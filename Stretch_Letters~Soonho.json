{"stamps":[{"id":"ibav5kwya","name":"var letters = {","code":"var letters = {\n  A: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2, 3, 4]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [2, 2],\n        [2, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  B: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 2],\n        [1, 2],\n        [1, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 3],\n        [4, 3],\n        [4, 2],\n        [5, 2],\n        [5, 0]\n      ],\n      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [2, 2],\n        [2, 1]\n      ],\n      [1, 2]\n    ],\n    [\n      [\n        [3, 1],\n        [3, 2],\n        [4, 2],\n        [4, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  C: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [2, 3],\n        [2, 2],\n        [1, 2],\n        [1, 1],\n        [4, 1],\n        [4, 2],\n        [3, 2],\n        [3, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [1, 2, 3, 4, 7, 8, 9, 10]\n    ]\n  ],\n  D: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 2],\n        [1, 2],\n        [1, 3],\n        [4, 3],\n        [4, 2],\n        [5, 2],\n        [5, 0]\n      ],\n      [1, 2, 3, 4, 5, 6]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [4, 2],\n        [4, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  E: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 1],\n        [2, 1],\n        [2, 3],\n        [3, 3],\n        [3, 1],\n        [4, 1],\n        [4, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [1, 2, 5, 6, 9, 10]\n    ]\n  ],\n  F: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 1],\n        [2, 1],\n        [2, 3],\n        [3, 3],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2, 5, 6]\n    ]\n  ],\n  G: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 1],\n        [4, 1],\n        [4, 2],\n        [2, 2],\n        [2, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [1, 2, 5, 6, 7, 8]\n    ]\n  ],\n  H: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [2, 1],\n        [2, 2],\n        [0, 2],\n        [0, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [3, 4, 5, 6, 7, 8]\n    ]\n  ],\n  I: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 2],\n        [4, 2],\n        [4, 3],\n        [5, 3],\n        [5, 0],\n        [4, 0],\n        [4, 1],\n        [1, 1],\n        [1, 0]\n      ],\n      [1, 2, 5, 6],\n      [3, 4, 9, 10]\n    ]\n  ],\n  J: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 2],\n        [5, 2],\n        [5, 0],\n        [4, 0],\n        [4, 1],\n        [1, 1],\n        [1, 0]\n      ],\n      [1, 2],\n      [3, 4, 7, 8]\n    ]\n  ],\n  K: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [2, 1],\n        [2, 2],\n        [0, 2],\n        [0, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    ]\n  ],\n  L: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [4, 1],\n        [4, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [3, 4]\n    ]\n  ],\n  M: [\n    [5, 5],\n    [\n      [\n        [1, 0],\n        [1, 1],\n        [0, 1],\n        [0, 2],\n        [1, 2],\n        [1, 3],\n        [0, 3],\n        [0, 4],\n        [1, 4],\n        [1, 5],\n        [5, 5],\n        [5, 4],\n        [1, 4],\n        [1, 3],\n        [3, 3],\n        [3, 2],\n        [1, 2],\n        [1, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [7, 8, 9, 10, 11, 12],\n      [3, 4, 5, 6, 13, 14, 15, 16]\n    ]\n  ],\n  N: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [5, 3],\n        [5, 2],\n        [1, 2],\n        [1, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2, 3, 4]\n    ]\n  ],\n  O: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [1, 2]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [4, 2],\n        [4, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  P: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [3, 3],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [2, 2],\n        [2, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  Q: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [5, 3],\n        [5, 2],\n        [4, 2],\n        [4, 0]\n      ],\n      [1, 2, 3, 4]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [3, 2],\n        [3, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  R: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 2],\n        [1, 2],\n        [1, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [2, 2],\n        [2, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  S: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 1],\n        [2, 1],\n        [2, 3],\n        [5, 3],\n        [5, 0],\n        [4, 0],\n        [4, 2],\n        [3, 2],\n        [3, 0]\n      ],\n      [1, 2, 5, 6, 9, 10]\n    ]\n  ],\n  T: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 2],\n        [5, 2],\n        [5, 1],\n        [1, 1],\n        [1, 0]\n      ],\n      [1, 2],\n      [3, 4, 5, 6]\n    ]\n  ],\n  U: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [4, 1],\n        [4, 2],\n        [0, 2],\n        [0, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [3, 4, 5, 6]\n    ]\n  ],\n  V: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [4, 1],\n        [4, 2],\n        [0, 2],\n        [0, 3],\n        [4, 3],\n        [4, 2],\n        [5, 2],\n        [5, 1],\n        [4, 1],\n        [4, 0]\n      ],\n      [3, 4, 5, 6, 7, 8]\n    ]\n  ],\n  W: [\n    [5, 5],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [4, 1],\n        [4, 2],\n        [2, 2],\n        [2, 3],\n        [4, 3],\n        [4, 4],\n        [0, 4],\n        [0, 5],\n        [4, 5],\n        [4, 4],\n        [5, 4],\n        [5, 3],\n        [4, 3],\n        [4, 2],\n        [5, 2],\n        [5, 1],\n        [4, 1],\n        [4, 0]\n      ],\n      [7, 8, 9, 10, 11, 12],\n      [3, 4, 5, 6, 13, 14, 15, 16]\n    ]\n  ],\n  X: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [2, 1],\n        [2, 2],\n        [0, 2],\n        [0, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0],\n        [3, 0],\n        [3, 1],\n        [2, 1],\n        [2, 0]\n      ],\n      [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    ]\n  ],\n  Y: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [2, 1],\n        [2, 2],\n        [0, 2],\n        [0, 3],\n        [5, 3],\n        [5, 0],\n        [4, 0],\n        [4, 2],\n        [3, 2],\n        [3, 0]\n      ],\n      [3, 4, 5, 6, 9, 10]\n    ]\n  ],\n  Z: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 1],\n        [4, 1],\n        [4, 3],\n        [5, 3],\n        [5, 0],\n        [3, 0],\n        [3, 1],\n        [2, 1],\n        [2, 2],\n        [1, 2],\n        [1, 0]\n      ],\n      [1, 2, 3, 4, 7, 8, 13, 14]\n    ]\n  ]\n};\nvar elong = 0;\nvar stretchFactor = 1;","args":" ","x":380,"y":-740,"editorWidth":218,"editorHeight":199.99999999999977,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":667,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"p9e53mxoz","name":"var letterW, le...","code":"var letterW, letterH;\nvar currentLetter;\n\nvar active;\nvar stopFlag;\n\nvar diff = 0;\n\nvar stretchVal;\nvar startX, startY;\n\nvar letterColor = 0;\nvar backgroundColor = 229;\n\nvar sizeMult = 10;\nvar spaceVal = 20;","args":" ","x":99.83828186769279,"y":-734.041209999785,"editorWidth":218.16171813230721,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":666,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"xyeb43nt3","name":"setup","code":"\n  createCanvas(400, 400);\n  background(backgroundColor);\n  noStroke();\n\n  startX = 20;\n  startY = 20;\n\n  active = true;\n  stopFlag = false;\n  currentLetter = \"\";\n","args":"","x":1330.9360381832712,"y":-9.822556537670923,"editorWidth":300,"editorHeight":200,"iframeWidth":145.0116582955174,"iframeHeight":141.47015354962176,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":true,"exported":true,"zIndex":657,"isBlob":false,"codeSize":14,"icon":"./static/media/tool.d68b9b61.svg","lineHighLightingStatus":"none"},{"id":"kskejrmci","name":"draw","code":"\n  if (true) {\n    if (keyIsPressed && keyCode > 64 && keyCode < 91) {\n      var let = key.toUpperCase();\n      if (let == currentLetter || currentLetter == \"\") {\n        currentLetter = let;\n      } else {\n        currentLetter = let;\n        newLetter();\n\n      }\n\n      var activeLetter = letters[let];\n\n      fill(backgroundColor);\n      letterW = activeLetter[0][1] * sizeMult + stretchVal;\n      letterH = activeLetter[0][0] * sizeMult;\n      rect(startX, startY, startX + letterW, startY + letterH); //new frame\n\n      if (width - startX < activeLetter[0][1] * sizeMult) {\n        newLine();\n      }\n      \n      drawLetter(startX, startY, activeLetter)\n      elong += 5;\n    } else if (!keyIsPressed) {\n      currentLetter = \"\";\n    }\n  }\n  noFill();\n  strokeWeight(2);\n  stroke(0);\n  rect(0, 0, width, height);\n  noStroke();\n","args":"","x":1140,"y":-60,"editorWidth":577.9999999999999,"editorHeight":600,"iframeWidth":400,"iframeHeight":400,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":685,"isBlob":false,"codeSize":14,"icon":"./static/media/tool.d68b9b61.svg","lineHighLightingStatus":"none"},{"id":"aophxbnxv","name":"newLine","code":"\n  startX = 20;\n  startY += spaceVal + letterH;\n  elong = 0;\n  stopFlag = false;\n","args":"","x":980,"y":-440,"editorWidth":300,"editorHeight":200,"iframeWidth":80,"iframeHeight":80,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":678,"isBlob":false,"codeSize":14,"icon":"./static/media/box.310d8273.svg","lineHighLightingStatus":"none"},{"id":"b1eb09l37","name":"newLetter","code":"\n  startX += spaceVal + letterW;\n  elong = 0;\n  active = true;\n","args":"","x":540,"y":-440,"editorWidth":300,"editorHeight":200,"iframeWidth":80,"iframeHeight":80,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":677,"isBlob":false,"codeSize":14,"icon":"./static/media/box.310d8273.svg","lineHighLightingStatus":"none"},{"id":"2gerglsoz","name":"keyReleased","code":"\n  if (keyCode == 13) {\n    newLine();\n  } //enter\n  else if (keyCode == 32) {\n    startX += 40;\n  } //space\n  else if (keyCode == 49) {\n    save(\"myCanvas.png\");\n  } else if (keyCode == 50) {\n    reset();\n  } else if (key.toUpperCase() == currentLetter && active) {\n    newLetter();\n  } else if (!active) {\n    active = true;\n  }\n","args":"","x":2180,"y":-60,"editorWidth":300,"editorHeight":280,"iframeWidth":80,"iframeHeight":80,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":686,"isBlob":false,"codeSize":14,"icon":"./static/media/bell.86facacc.svg","lineHighLightingStatus":"none"},{"id":"umaqyrpvl","name":"reset","code":"\n  background(backgroundColor);\n  noStroke();\n\n  startX = 20;\n  startY = 20;\n\n  active = true;\n  stopFlag = false;\n  currentLetter = \"\";\n","args":"","x":100,"y":-440,"editorWidth":298,"editorHeight":200,"iframeWidth":80,"iframeHeight":80,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":674,"isBlob":false,"codeSize":14,"icon":"./static/media/box.310d8273.svg","lineHighLightingStatus":"none"},{"id":"6eii75g9s","name":"p5.sound.min.js","code":"/*! p5.sound.min.js v0.3.11 2019-03-14 */\n\n/**\n *  p5.sound \n *  https://p5js.org/reference/#/libraries/p5.sound\n *\n *  From the Processing Foundation and contributors\n *  https://github.com/processing/p5.js-sound/graphs/contributors\n *\n *  MIT License (MIT)\n *  https://github.com/processing/p5.js-sound/blob/master/LICENSE\n *\n *  Some of the many audio libraries & resources that inspire p5.sound:\n *   - TONE.js (c) Yotam Mann. Licensed under The MIT License (MIT). https://github.com/TONEnoTONE/Tone.js\n *   - buzz.js (c) Jay Salvat. Licensed under The MIT License (MIT). http://buzz.jaysalvat.com/\n *   - Boris Smus Web Audio API book, 2013. Licensed under the Apache License http://www.apache.org/licenses/LICENSE-2.0\n *   - wavesurfer.js https://github.com/katspaugh/wavesurfer.js\n *   - Web Audio Components by Jordan Santell https://github.com/web-audio-components\n *   - Wilm Thoben's Sound library for Processing https://github.com/processing/processing/tree/master/java/libraries/sound\n *\n *   Web Audio API: http://w3.org/TR/webaudio/\n */\n\n!function(t,e){\"function\"==typeof define&&define.amd?define(\"p5.sound\",[\"p5\"],function(t){e(t)}):e(\"object\"==typeof exports?require(\"../p5\"):t.p5)}(this,function(t){var e;e=function(){!function(){function t(t){t&&(t.setTargetAtTime||(t.setTargetAtTime=t.setTargetValueAtTime))}window.hasOwnProperty(\"webkitAudioContext\")&&!window.hasOwnProperty(\"AudioContext\")&&(window.AudioContext=window.webkitAudioContext,\"function\"!=typeof AudioContext.prototype.createGain&&(AudioContext.prototype.createGain=AudioContext.prototype.createGainNode),\"function\"!=typeof AudioContext.prototype.createDelay&&(AudioContext.prototype.createDelay=AudioContext.prototype.createDelayNode),\"function\"!=typeof AudioContext.prototype.createScriptProcessor&&(AudioContext.prototype.createScriptProcessor=AudioContext.prototype.createJavaScriptNode),\"function\"!=typeof AudioContext.prototype.createPeriodicWave&&(AudioContext.prototype.createPeriodicWave=AudioContext.prototype.createWaveTable),AudioContext.prototype.internal_createGain=AudioContext.prototype.createGain,AudioContext.prototype.createGain=function(){var e=this.internal_createGain();return t(e.gain),e},AudioContext.prototype.internal_createDelay=AudioContext.prototype.createDelay,AudioContext.prototype.createDelay=function(e){var i=e?this.internal_createDelay(e):this.internal_createDelay();return t(i.delayTime),i},AudioContext.prototype.internal_createBufferSource=AudioContext.prototype.createBufferSource,AudioContext.prototype.createBufferSource=function(){var e=this.internal_createBufferSource();return e.start?(e.internal_start=e.start,e.start=function(t,i,n){\"undefined\"!=typeof n?e.internal_start(t||0,i,n):e.internal_start(t||0,i||0)}):e.start=function(t,e,i){e||i?this.noteGrainOn(t||0,e,i):this.noteOn(t||0)},e.stop?(e.internal_stop=e.stop,e.stop=function(t){e.internal_stop(t||0)}):e.stop=function(t){this.noteOff(t||0)},t(e.playbackRate),e},AudioContext.prototype.internal_createDynamicsCompressor=AudioContext.prototype.createDynamicsCompressor,AudioContext.prototype.createDynamicsCompressor=function(){var e=this.internal_createDynamicsCompressor();return t(e.threshold),t(e.knee),t(e.ratio),t(e.reduction),t(e.attack),t(e.release),e},AudioContext.prototype.internal_createBiquadFilter=AudioContext.prototype.createBiquadFilter,AudioContext.prototype.createBiquadFilter=function(){var e=this.internal_createBiquadFilter();return t(e.frequency),t(e.detune),t(e.Q),t(e.gain),e},\"function\"!=typeof AudioContext.prototype.createOscillator&&(AudioContext.prototype.internal_createOscillator=AudioContext.prototype.createOscillator,AudioContext.prototype.createOscillator=function(){var e=this.internal_createOscillator();return e.start?(e.internal_start=e.start,e.start=function(t){e.internal_start(t||0)}):e.start=function(t){this.noteOn(t||0)},e.stop?(e.internal_stop=e.stop,e.stop=function(t){e.internal_stop(t||0)}):e.stop=function(t){this.noteOff(t||0)},e.setPeriodicWave||(e.setPeriodicWave=e.setWaveTable),t(e.frequency),t(e.detune),e})),window.hasOwnProperty(\"webkitOfflineAudioContext\")&&!window.hasOwnProperty(\"OfflineAudioContext\")&&(window.OfflineAudioContext=window.webkitOfflineAudioContext)}(window),navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia;var e=document.createElement(\"audio\");t.prototype.isSupported=function(){return!!e.canPlayType};var i=function(){return!!e.canPlayType&&e.canPlayType('audio/ogg; codecs=\"vorbis\"')},n=function(){return!!e.canPlayType&&e.canPlayType(\"audio/mpeg;\")},o=function(){return!!e.canPlayType&&e.canPlayType('audio/wav; codecs=\"1\"')},r=function(){return!!e.canPlayType&&(e.canPlayType(\"audio/x-m4a;\")||e.canPlayType(\"audio/aac;\"))},s=function(){return!!e.canPlayType&&e.canPlayType(\"audio/x-aiff;\")};t.prototype.isFileSupported=function(t){switch(t.toLowerCase()){case\"mp3\":return n();case\"wav\":return o();case\"ogg\":return i();case\"aac\":case\"m4a\":case\"mp4\":return r();case\"aif\":case\"aiff\":return s();default:return!1}}}();var i;!function(t,e){i=function(){return e()}()}(this,function(){function t(t){var e=t.createBuffer(1,1,t.sampleRate),i=t.createBufferSource();i.buffer=e,i.connect(t.destination),i.start(0),t.resume&&t.resume()}function e(t){return\"running\"===t.state}function i(t,i){function n(){e(t)?i():(requestAnimationFrame(n),t.resume&&t.resume())}e(t)?i():n()}function n(t,e,i){if(Array.isArray(t)||NodeList&&t instanceof NodeList)for(var o=0;o<t.length;o++)n(t[o],e,i);else if(\"string\"==typeof t)n(document.querySelectorAll(t),e,i);else if(t.jquery&&\"function\"==typeof t.toArray)n(t.toArray(),e,i);else if(Element&&t instanceof Element){var s=new r(t,i);e.push(s)}}function o(t,e,o){var r=new Promise(function(e){i(t,e)}),s=[];return e||(e=document.body),n(e,s,t),r.then(function(){for(var t=0;t<s.length;t++)s[t].dispose();s=null,o&&o()}),r}var r=function(t,e){this._dragged=!1,this._element=t,this._bindedMove=this._moved.bind(this),this._bindedEnd=this._ended.bind(this,e),t.addEventListener(\"touchstart\",this._bindedEnd),t.addEventListener(\"touchmove\",this._bindedMove),t.addEventListener(\"touchend\",this._bindedEnd),t.addEventListener(\"mouseup\",this._bindedEnd)};return r.prototype._moved=function(t){this._dragged=!0},r.prototype._ended=function(e){this._dragged||t(e),this._dragged=!1},r.prototype.dispose=function(){this._element.removeEventListener(\"touchstart\",this._bindedEnd),this._element.removeEventListener(\"touchmove\",this._bindedMove),this._element.removeEventListener(\"touchend\",this._bindedEnd),this._element.removeEventListener(\"mouseup\",this._bindedEnd),this._bindedMove=null,this._bindedEnd=null,this._element=null},o});var n;n=function(){\"use strict\";var t=function(t,e){this.isUndef(t)||1===t?this.input=this.context.createGain():t>1&&(this.input=new Array(t)),this.isUndef(e)||1===e?this.output=this.context.createGain():e>1&&(this.output=new Array(t))};t.prototype.set=function(e,i,n){if(this.isObject(e))n=i;else if(this.isString(e)){var o={};o[e]=i,e=o}t:for(var r in e){i=e[r];var s=this;if(-1!==r.indexOf(\".\")){for(var a=r.split(\".\"),u=0;u<a.length-1;u++)if(s=s[a[u]],s instanceof t){a.splice(0,u+1);var c=a.join(\".\");s.set(c,i);continue t}r=a[a.length-1]}var p=s[r];this.isUndef(p)||(t.Signal&&p instanceof t.Signal||t.Param&&p instanceof t.Param?p.value!==i&&(this.isUndef(n)?p.value=i:p.rampTo(i,n)):p instanceof AudioParam?p.value!==i&&(p.value=i):p instanceof t?p.set(i):p!==i&&(s[r]=i))}return this},t.prototype.get=function(e){this.isUndef(e)?e=this._collectDefaults(this.constructor):this.isString(e)&&(e=[e]);for(var i={},n=0;n<e.length;n++){var o=e[n],r=this,s=i;if(-1!==o.indexOf(\".\")){for(var a=o.split(\".\"),u=0;u<a.length-1;u++){var c=a[u];s[c]=s[c]||{},s=s[c],r=r[c]}o=a[a.length-1]}var p=r[o];this.isObject(e[o])?s[o]=p.get():t.Signal&&p instanceof t.Signal?s[o]=p.value:t.Param&&p instanceof t.Param?s[o]=p.value:p instanceof AudioParam?s[o]=p.value:p instanceof t?s[o]=p.get():this.isFunction(p)||this.isUndef(p)||(s[o]=p)}return i},t.prototype._collectDefaults=function(t){var e=[];if(this.isUndef(t.defaults)||(e=Object.keys(t.defaults)),!this.isUndef(t._super))for(var i=this._collectDefaults(t._super),n=0;n<i.length;n++)-1===e.indexOf(i[n])&&e.push(i[n]);return e},t.prototype.toString=function(){for(var e in t){var i=e[0].match(/^[A-Z]$/),n=t[e]===this.constructor;if(this.isFunction(t[e])&&i&&n)return e}return\"Tone\"},Object.defineProperty(t.prototype,\"numberOfInputs\",{get:function(){return this.input?this.isArray(this.input)?this.input.length:1:0}}),Object.defineProperty(t.prototype,\"numberOfOutputs\",{get:function(){return this.output?this.isArray(this.output)?this.output.length:1:0}}),t.prototype.dispose=function(){return this.isUndef(this.input)||(this.input instanceof AudioNode&&this.input.disconnect(),this.input=null),this.isUndef(this.output)||(this.output instanceof AudioNode&&this.output.disconnect(),this.output=null),this},t.prototype.connect=function(t,e,i){return Array.isArray(this.output)?(e=this.defaultArg(e,0),this.output[e].connect(t,0,i)):this.output.connect(t,e,i),this},t.prototype.disconnect=function(t,e,i){this.isArray(this.output)?this.isNumber(t)?this.output[t].disconnect():(e=this.defaultArg(e,0),this.output[e].disconnect(t,0,i)):this.output.disconnect.apply(this.output,arguments)},t.prototype.connectSeries=function(){if(arguments.length>1)for(var t=arguments[0],e=1;e<arguments.length;e++){var i=arguments[e];t.connect(i),t=i}return this},t.prototype.chain=function(){if(arguments.length>0)for(var t=this,e=0;e<arguments.length;e++){var i=arguments[e];t.connect(i),t=i}return this},t.prototype.fan=function(){if(arguments.length>0)for(var t=0;t<arguments.length;t++)this.connect(arguments[t]);return this},AudioNode.prototype.chain=t.prototype.chain,AudioNode.prototype.fan=t.prototype.fan,t.prototype.defaultArg=function(t,e){if(this.isObject(t)&&this.isObject(e)){var i={};for(var n in t)i[n]=this.defaultArg(e[n],t[n]);for(var o in e)i[o]=this.defaultArg(t[o],e[o]);return i}return this.isUndef(t)?e:t},t.prototype.optionsObject=function(t,e,i){var n={};if(1===t.length&&this.isObject(t[0]))n=t[0];else for(var o=0;o<e.length;o++)n[e[o]]=t[o];return this.isUndef(i)?n:this.defaultArg(n,i)},t.prototype.isUndef=function(t){return\"undefined\"==typeof t},t.prototype.isFunction=function(t){return\"function\"==typeof t},t.prototype.isNumber=function(t){return\"number\"==typeof t},t.prototype.isObject=function(t){return\"[object Object]\"===Object.prototype.toString.call(t)&&t.constructor===Object},t.prototype.isBoolean=function(t){return\"boolean\"==typeof t},t.prototype.isArray=function(t){return Array.isArray(t)},t.prototype.isString=function(t){return\"string\"==typeof t},t.noOp=function(){},t.prototype._readOnly=function(t){if(Array.isArray(t))for(var e=0;e<t.length;e++)this._readOnly(t[e]);else Object.defineProperty(this,t,{writable:!1,enumerable:!0})},t.prototype._writable=function(t){if(Array.isArray(t))for(var e=0;e<t.length;e++)this._writable(t[e]);else Object.defineProperty(this,t,{writable:!0})},t.State={Started:\"started\",Stopped:\"stopped\",Paused:\"paused\"},t.prototype.equalPowerScale=function(t){var e=.5*Math.PI;return Math.sin(t*e)},t.prototype.dbToGain=function(t){return Math.pow(2,t/6)},t.prototype.gainToDb=function(t){return 20*(Math.log(t)/Math.LN10)},t.prototype.intervalToFrequencyRatio=function(t){return Math.pow(2,t/12)},t.prototype.now=function(){return t.context.now()},t.now=function(){return t.context.now()},t.extend=function(e,i){function n(){}t.prototype.isUndef(i)&&(i=t),n.prototype=i.prototype,e.prototype=new n,e.prototype.constructor=e,e._super=i};var e;return Object.defineProperty(t,\"context\",{get:function(){return e},set:function(i){e=t.Context&&i instanceof t.Context?i:new t.Context(i),t.Context&&t.Context.emit(\"init\",e)}}),Object.defineProperty(t.prototype,\"context\",{get:function(){return t.context}}),t.setContext=function(e){t.context=e},Object.defineProperty(t.prototype,\"blockTime\",{get:function(){return 128/this.context.sampleRate}}),Object.defineProperty(t.prototype,\"sampleTime\",{get:function(){return 1/this.context.sampleRate}}),Object.defineProperty(t,\"supported\",{get:function(){var t=window.hasOwnProperty(\"AudioContext\")||window.hasOwnProperty(\"webkitAudioContext\"),e=window.hasOwnProperty(\"Promise\"),i=window.hasOwnProperty(\"Worker\");return t&&e&&i}}),t.version=\"r10\",!window.TONE_SILENCE_VERSION_LOGGING,t}();var o;o=function(t){\"use strict\";return t.Emitter=function(){this._events={}},t.extend(t.Emitter),t.Emitter.prototype.on=function(t,e){for(var i=t.split(/\\W+/),n=0;n<i.length;n++){var o=i[n];this._events.hasOwnProperty(o)||(this._events[o]=[]),this._events[o].push(e)}return this},t.Emitter.prototype.off=function(e,i){for(var n=e.split(/\\W+/),o=0;o<n.length;o++)if(e=n[o],this._events.hasOwnProperty(e))if(t.prototype.isUndef(i))this._events[e]=[];else for(var r=this._events[e],s=0;s<r.length;s++)r[s]===i&&r.splice(s,1);return this},t.Emitter.prototype.emit=function(t){if(this._events){var e=Array.apply(null,arguments).slice(1);if(this._events.hasOwnProperty(t))for(var i=this._events[t],n=0,o=i.length;o>n;n++)i[n].apply(this,e)}return this},t.Emitter.mixin=function(e){var i=[\"on\",\"off\",\"emit\"];e._events={};for(var n=0;n<i.length;n++){var o=i[n],r=t.Emitter.prototype[o];e[o]=r}},t.Emitter.prototype.dispose=function(){return t.prototype.dispose.call(this),this._events=null,this},t.Emitter}(n);var r;r=function(t){function e(){function e(e,i,o){if(e.input)Array.isArray(e.input)?(t.prototype.isUndef(o)&&(o=0),this.connect(e.input[o])):this.connect(e.input,i,o);else try{e instanceof AudioNode?n.call(this,e,i,o):n.call(this,e,i)}catch(r){throw new Error(\"error connecting to node: \"+e+\"\\n\"+r)}}function i(e,i,n){if(e&&e.input&&Array.isArray(e.input))t.prototype.isUndef(n)&&(n=0),this.disconnect(e.input[n],i,n);else if(e&&e.input)this.disconnect(e.input,i,n);else try{o.apply(this,arguments)}catch(r){throw new Error(\"error disconnecting node: \"+e+\"\\n\"+r)}}var n=AudioNode.prototype.connect,o=AudioNode.prototype.disconnect;AudioNode.prototype.connect!==e&&(AudioNode.prototype.connect=e,AudioNode.prototype.disconnect=i)}return!window.hasOwnProperty(\"AudioContext\")&&window.hasOwnProperty(\"webkitAudioContext\")&&(window.AudioContext=window.webkitAudioContext),t.Context=function(e){t.Emitter.call(this),e||(e=new window.AudioContext),this._context=e;for(var i in this._context)this._defineProperty(this._context,i);this._latencyHint=\"interactive\",this._lookAhead=.1,this._updateInterval=this._lookAhead/3,this._computedUpdateInterval=0,this._worker=this._createWorker(),this._constants={}},t.extend(t.Context,t.Emitter),t.Emitter.mixin(t.Context),t.Context.prototype._defineProperty=function(t,e){this.isUndef(this[e])&&Object.defineProperty(this,e,{get:function(){return\"function\"==typeof t[e]?t[e].bind(t):t[e]},set:function(i){t[e]=i}})},t.Context.prototype.now=function(){return this._context.currentTime},t.Context.prototype._createWorker=function(){window.URL=window.URL||window.webkitURL;var t=new Blob([\"var timeoutTime = \"+(1e3*this._updateInterval).toFixed(1)+\";self.onmessage = function(msg){\ttimeoutTime = parseInt(msg.data);};function tick(){\tsetTimeout(tick, timeoutTime);\tself.postMessage('tick');}tick();\"]),e=URL.createObjectURL(t),i=new Worker(e);return i.addEventListener(\"message\",function(){this.emit(\"tick\")}.bind(this)),i.addEventListener(\"message\",function(){var t=this.now();if(this.isNumber(this._lastUpdate)){var e=t-this._lastUpdate;this._computedUpdateInterval=Math.max(e,.97*this._computedUpdateInterval)}this._lastUpdate=t}.bind(this)),i},t.Context.prototype.getConstant=function(t){if(this._constants[t])return this._constants[t];for(var e=this._context.createBuffer(1,128,this._context.sampleRate),i=e.getChannelData(0),n=0;n<i.length;n++)i[n]=t;var o=this._context.createBufferSource();return o.channelCount=1,o.channelCountMode=\"explicit\",o.buffer=e,o.loop=!0,o.start(0),this._constants[t]=o,o},Object.defineProperty(t.Context.prototype,\"lag\",{get:function(){var t=this._computedUpdateInterval-this._updateInterval;return t=Math.max(t,0)}}),Object.defineProperty(t.Context.prototype,\"lookAhead\",{get:function(){return this._lookAhead},set:function(t){this._lookAhead=t}}),Object.defineProperty(t.Context.prototype,\"updateInterval\",{get:function(){return this._updateInterval},set:function(e){this._updateInterval=Math.max(e,t.prototype.blockTime),this._worker.postMessage(Math.max(1e3*e,1))}}),Object.defineProperty(t.Context.prototype,\"latencyHint\",{get:function(){return this._latencyHint},set:function(t){var e=t;if(this._latencyHint=t,this.isString(t))switch(t){case\"interactive\":e=.1,this._context.latencyHint=t;break;case\"playback\":e=.8,this._context.latencyHint=t;break;case\"balanced\":e=.25,this._context.latencyHint=t;break;case\"fastest\":e=.01}this.lookAhead=e,this.updateInterval=e/3}}),t.supported?(e(),t.context=new t.Context):console.warn(\"This browser does not support Tone.js\"),t.Context}(n);var s;s=function(e,i,n){const o=new window.AudioContext;return n.context.dispose(),n.setContext(o),t.prototype.getAudioContext=function(){return o},t.prototype.userStartAudio=function(i,n){var r=i;return i instanceof t.Element?r=i.elt:i instanceof Array&&i[0]instanceof t.Element&&(r=i.map(function(t){return t.elt})),e(o,r,n)},o}(i,r,n);var a;a=function(e){var i=function(){this.input=e.createGain(),this.output=e.createGain(),this.limiter=e.createDynamicsCompressor(),this.limiter.threshold.value=-3,this.limiter.ratio.value=20,this.limiter.knee.value=1,this.audiocontext=e,this.output.disconnect(),this.input.connect(this.limiter),this.limiter.connect(this.output),this.meter=e.createGain(),this.fftMeter=e.createGain(),this.output.connect(this.meter),this.output.connect(this.fftMeter),this.output.connect(this.audiocontext.destination),this.soundArray=[],this.parts=[],this.extensions=[]},n=new i;return t.prototype.getMasterVolume=function(){return n.output.gain.value},t.prototype.masterVolume=function(t,e,i){if(\"number\"==typeof t){var e=e||0,i=i||0,o=n.audiocontext.currentTime,r=n.output.gain.value;n.output.gain.cancelScheduledValues(o+i),n.output.gain.linearRampToValueAtTime(r,o+i),n.output.gain.linearRampToValueAtTime(t,o+i+e)}else{if(!t)return n.output.gain;t.connect(n.output.gain)}},t.prototype.soundOut=t.soundOut=n,t.soundOut._silentNode=n.audiocontext.createGain(),t.soundOut._silentNode.gain.value=0,t.soundOut._silentNode.connect(n.audiocontext.destination),n}(s);var u;u=function(){function e(t){var e,r;e=t.getChannelData(0),r=t.numberOfChannels>1?t.getChannelData(1):e;var s=i(e,r),a=new window.ArrayBuffer(44+2*s.length),u=new window.DataView(a);n(u,0,\"RIFF\"),u.setUint32(4,36+2*s.length,!0),n(u,8,\"WAVE\"),n(u,12,\"fmt \"),u.setUint32(16,16,!0),u.setUint16(20,1,!0),u.setUint16(22,2,!0),u.setUint32(24,o.audiocontext.sampleRate,!0),u.setUint32(28,4*o.audiocontext.sampleRate,!0),u.setUint16(32,4,!0),u.setUint16(34,16,!0),n(u,36,\"data\"),u.setUint32(40,2*s.length,!0);for(var c=s.length,p=44,h=1,l=0;c>l;l++)u.setInt16(p,s[l]*(32767*h),!0),p+=2;return u}function i(t,e){for(var i=t.length+e.length,n=new Float32Array(i),o=0,r=0;i>r;)n[r++]=t[o],n[r++]=e[o],o++;return n}function n(t,e,i){for(var n=i.length,o=0;n>o;o++)t.setUint8(e+o,i.charCodeAt(o))}var o=a;t.prototype.sampleRate=function(){return o.audiocontext.sampleRate},t.prototype.freqToMidi=function(t){var e=Math.log(t/440)/Math.log(2),i=Math.round(12*e)+69;return i};var r=t.prototype.midiToFreq=function(t){return 440*Math.pow(2,(t-69)/12)},s=function(t){if(\"string\"!=typeof t)return t;var e={A:21,B:23,C:24,D:26,E:28,F:29,G:31},i=e[t[0].toUpperCase()],n=~~t.slice(-1);switch(i+=12*(n-1),t[1]){case\"#\":i+=1;break;case\"b\":i-=1}return r(i)};return t.prototype.soundFormats=function(){o.extensions=[];for(var t=0;t<arguments.length;t++){if(arguments[t]=arguments[t].toLowerCase(),!([\"mp3\",\"wav\",\"ogg\",\"m4a\",\"aac\"].indexOf(arguments[t])>-1))throw arguments[t]+\" is not a valid sound format!\";o.extensions.push(arguments[t])}},t.prototype.disposeSound=function(){for(var t=0;t<o.soundArray.length;t++)o.soundArray[t].dispose()},t.prototype.registerMethod(\"remove\",t.prototype.disposeSound),t.prototype._checkFileFormats=function(e){var i;if(\"string\"==typeof e){i=e;var n=i.split(\".\").pop();if([\"mp3\",\"wav\",\"ogg\",\"m4a\",\"aac\"].indexOf(n)>-1)if(t.prototype.isFileSupported(n))i=i;else for(var r=i.split(\".\"),s=r[r.length-1],a=0;a<o.extensions.length;a++){var u=o.extensions[a],c=t.prototype.isFileSupported(u);if(c){s=\"\",2===r.length&&(s+=r[0]);for(var a=1;a<=r.length-2;a++){var p=r[a];s+=\".\"+p}i=s+=\".\",i=i+=u;break}}else for(var a=0;a<o.extensions.length;a++){var u=o.extensions[a],c=t.prototype.isFileSupported(u);if(c){i=i+\".\"+u;break}}}else if(\"object\"==typeof e)for(var a=0;a<e.length;a++){var u=e[a].split(\".\").pop(),c=t.prototype.isFileSupported(u);if(c){i=e[a];break}}return i},t.prototype._mathChain=function(t,e,i,n,o){for(var r in t.mathOps)t.mathOps[r]instanceof o&&(t.mathOps[r].dispose(),i=r,i<t.mathOps.length-1&&(n=t.mathOps[r+1]));return t.mathOps[i-1].disconnect(),t.mathOps[i-1].connect(e),e.connect(n),t.mathOps[i]=e,t},{convertToWav:e,midiToFreq:r,noteToFreq:s}}(a);var c;c=function(){var t=function(t,e,i){var n,o,r=new Error;r.name=t,r.originalStack=r.stack+e,n=r.stack+e,r.failedPath=i;var o=n.split(\"\\n\");return o=o.filter(function(t){return!t.match(/(p5.|native code|globalInit)/g)}),r.stack=o.join(\"\\n\"),r};return t}();var p;p=function(){var e=a,i=e.audiocontext;\"undefined\"!=typeof i.createStereoPanner?(t.Panner=function(t,e){this.stereoPanner=this.input=i.createStereoPanner(),t.connect(this.stereoPanner),this.stereoPanner.connect(e)},t.Panner.prototype.pan=function(t,e){var n=e||0,o=i.currentTime+n;this.stereoPanner.pan.linearRampToValueAtTime(t,o)},t.Panner.prototype.inputChannels=function(){},t.Panner.prototype.connect=function(t){this.stereoPanner.connect(t)},t.Panner.prototype.disconnect=function(){this.stereoPanner&&this.stereoPanner.disconnect()}):(t.Panner=function(t,e,n){this.input=i.createGain(),t.connect(this.input),this.left=i.createGain(),this.right=i.createGain(),this.left.channelInterpretation=\"discrete\",this.right.channelInterpretation=\"discrete\",n>1?(this.splitter=i.createChannelSplitter(2),this.input.connect(this.splitter),this.splitter.connect(this.left,1),this.splitter.connect(this.right,0)):(this.input.connect(this.left),this.input.connect(this.right)),this.output=i.createChannelMerger(2),this.left.connect(this.output,0,1),this.right.connect(this.output,0,0),this.output.connect(e)},t.Panner.prototype.pan=function(t,e){var n=e||0,o=i.currentTime+n,r=(t+1)/2,s=Math.cos(r*Math.PI/2),a=Math.sin(r*Math.PI/2);this.left.gain.linearRampToValueAtTime(a,o),this.right.gain.linearRampToValueAtTime(s,o)},t.Panner.prototype.inputChannels=function(t){1===t?(this.input.disconnect(),this.input.connect(this.left),this.input.connect(this.right)):2===t&&(this.splitter=i.createChannelSplitter(2),this.input.disconnect(),this.input.connect(this.splitter),this.splitter.connect(this.left,1),this.splitter.connect(this.right,0))},t.Panner.prototype.connect=function(t){this.output.connect(t)},t.Panner.prototype.disconnect=function(){this.output&&this.output.disconnect()})}(a);var h;h=function(){function e(t,e){for(var i={},n=t.length,o=0;n>o;o++){if(t[o]>e){var r=t[o],s=new v(r,o);i[o]=s,o+=6e3}o++}return i}function i(t){for(var e=[],i=Object.keys(t).sort(),n=0;n<i.length;n++)for(var o=0;10>o;o++){var r=t[i[n]],s=t[i[n+o]];if(r&&s){var a=r.sampleIndex,u=s.sampleIndex,c=u-a;c>0&&r.intervals.push(c);var p=e.some(function(t){return t.interval===c?(t.count++,t):void 0});p||e.push({interval:c,count:1})}}return e}function n(t,e){var i=[];return t.forEach(function(t){try{var n=Math.abs(60/(t.interval/e));n=r(n);var o=i.some(function(e){return e.tempo===n?e.count+=t.count:void 0});if(!o){if(isNaN(n))return;i.push({tempo:Math.round(n),count:t.count})}}catch(s){throw s}}),i}function o(t,e,i,n){for(var o=[],s=Object.keys(t).sort(),a=0;a<s.length;a++)for(var u=s[a],c=t[u],p=0;p<c.intervals.length;p++){var h=Math.round(Math.abs(60/(c.intervals[p]/i)));h=r(h),Math.abs(h-e)<n&&o.push(c.sampleIndex/i)}return o=o.filter(function(t,e,i){var n=i[e+1]-t;return n>.01?!0:void 0})}function r(t){if(isFinite(t)&&0!==t){for(;90>t;)t*=2;for(;t>180&&t>90;)t/=2;return t}}function s(t){var e=t.inputBuffer.getChannelData(0);this._lastPos=e[e.length-1]||0,this._onTimeUpdate(self._lastPos)}function p(t){const e=t.target,i=this;e._playing=!1,e.removeEventListener(\"ended\",i._clearOnEnd),i._onended(i),i.bufferSourceNodes.forEach(function(t,e){t._playing===!1&&i.bufferSourceNodes.splice(e)}),0===i.bufferSourceNodes.length&&(i._playing=!1)}var h=c,l=a,f=l.audiocontext,d=u.midiToFreq,m=u.convertToWav;t.SoundFile=function(e,i,n,o){if(\"undefined\"!=typeof e){if(\"string\"==typeof e||\"string\"==typeof e[0]){var r=t.prototype._checkFileFormats(e);this.url=r}else if(\"object\"==typeof e&&!(window.File&&window.FileReader&&window.FileList&&window.Blob))throw\"Unable to load file because the File API is not supported\";e.file&&(e=e.file),this.file=e}this._onended=function(){},this._looping=!1,this._playing=!1,this._paused=!1,this._pauseTime=0,this._cues=[],this._cueIDCounter=0,this._lastPos=0,this._counterNode=null,this._scopeNode=null,this.bufferSourceNodes=[],this.bufferSourceNode=null,this.buffer=null,this.playbackRate=1,this.input=l.audiocontext.createGain(),this.output=l.audiocontext.createGain(),this.reversed=!1,this.startTime=0,this.endTime=null,this.pauseTime=0,this.mode=\"sustain\",this.startMillis=null,this.panPosition=0,this.panner=new t.Panner(this.output,l.input,2),(this.url||this.file)&&this.load(i,n),l.soundArray.push(this),\"function\"==typeof o?this._whileLoading=o:this._whileLoading=function(){},this._onAudioProcess=s.bind(this),this._clearOnEnd=p.bind(this)},t.prototype.registerPreloadMethod(\"loadSound\",t.prototype),t.prototype.loadSound=function(e,i,n,o){window.location.origin.indexOf(\"file://\")>-1&&\"undefined\"===window.cordova&&window.alert(\"This sketch may require a server to load external files. Please see http://bit.ly/1qcInwS\");var r=this,s=new t.SoundFile(e,function(){\"function\"==typeof i&&i.apply(r,arguments),\"function\"==typeof r._decrementPreload&&r._decrementPreload()},n,o);return s},t.SoundFile.prototype.load=function(t,e){var i=this,n=(new Error).stack;if(void 0!==this.url&&\"\"!==this.url){var o=new XMLHttpRequest;o.addEventListener(\"progress\",function(t){i._updateProgress(t)},!1),o.open(\"GET\",this.url,!0),o.responseType=\"arraybuffer\",o.onload=function(){if(200===o.status){if(!i.panner)return;f.decodeAudioData(o.response,function(e){i.panner&&(i.buffer=e,i.panner.inputChannels(e.numberOfChannels),t&&t(i))},function(){if(i.panner){var t=new h(\"decodeAudioData\",n,i.url),o=\"AudioContext error at decodeAudioData for \"+i.url;e?(t.msg=o,e(t)):console.error(o+\"\\n The error stack trace includes: \\n\"+t.stack)}})}else{if(!i.panner)return;var r=new h(\"loadSound\",n,i.url),s=\"Unable to load \"+i.url+\". The request status was: \"+o.status+\" (\"+o.statusText+\")\";e?(r.message=s,e(r)):console.error(s+\"\\n The error stack trace includes: \\n\"+r.stack)}},o.onerror=function(){var t=new h(\"loadSound\",n,i.url),o=\"There was no response from the server at \"+i.url+\". Check the url and internet connectivity.\";e?(t.message=o,e(t)):console.error(o+\"\\n The error stack trace includes: \\n\"+t.stack)},o.send()}else if(void 0!==this.file){var r=new FileReader;r.onload=function(){i.panner&&f.decodeAudioData(r.result,function(e){i.panner&&(i.buffer=e,i.panner.inputChannels(e.numberOfChannels),t&&t(i))})},r.onerror=function(t){i.panner&&onerror&&onerror(t)},r.readAsArrayBuffer(this.file)}},t.SoundFile.prototype._updateProgress=function(t){if(t.lengthComputable){var e=t.loaded/t.total*.99;this._whileLoading(e,t)}else this._whileLoading(\"size unknown\")},t.SoundFile.prototype.isLoaded=function(){return this.buffer?!0:!1},t.SoundFile.prototype.play=function(t,e,i,n,o){if(!this.output)return void console.warn(\"SoundFile.play() called after dispose\");var r,s,a=l.audiocontext.currentTime,u=t||0;if(0>u&&(u=0),u+=a,\"undefined\"!=typeof e&&this.rate(e),\"undefined\"!=typeof i&&this.setVolume(i),!this.buffer)throw\"not ready to play file, buffer has yet to load. Try preload()\";if(this._pauseTime=0,\"restart\"===this.mode&&this.buffer&&this.bufferSourceNode&&(this.bufferSourceNode.stop(u),this._counterNode.stop(u)),\"untildone\"!==this.mode||!this.isPlaying()){if(this.bufferSourceNode=this._initSourceNode(),delete this._counterNode,this._counterNode=this._initCounterNode(),n){if(!(n>=0&&n<this.buffer.duration))throw\"start time out of range\";r=n}else r=0;o&&(o=o<=this.buffer.duration-r?o:this.buffer.duration),this._paused?(this.bufferSourceNode.start(u,this.pauseTime,o),this._counterNode.start(u,this.pauseTime,o)):(this.bufferSourceNode.start(u,r,o),this._counterNode.start(u,r,o)),this._playing=!0,this._paused=!1,this.bufferSourceNodes.push(this.bufferSourceNode),this.bufferSourceNode._arrayIndex=this.bufferSourceNodes.length-1,this.bufferSourceNode.addEventListener(\"ended\",this._clearOnEnd),this.bufferSourceNode.loop=this._looping,this._counterNode.loop=this._looping,this._looping===!0&&(s=o?o:r-1e-15,this.bufferSourceNode.loopStart=r,this.bufferSourceNode.loopEnd=s,this._counterNode.loopStart=r,this._counterNode.loopEnd=s)}},t.SoundFile.prototype.playMode=function(t){var e=t.toLowerCase();if(\"restart\"===e&&this.buffer&&this.bufferSourceNode)for(var i=0;i<this.bufferSourceNodes.length-1;i++){var n=l.audiocontext.currentTime;this.bufferSourceNodes[i].stop(n)}if(\"restart\"!==e&&\"sustain\"!==e&&\"untildone\"!==e)throw'Invalid play mode. Must be either \"restart\" or \"sustain\"';this.mode=e},t.SoundFile.prototype.pause=function(t){var e=l.audiocontext.currentTime,i=t||0,n=i+e;this.isPlaying()&&this.buffer&&this.bufferSourceNode?(this.pauseTime=this.currentTime(),this.bufferSourceNode.stop(n),this._counterNode.stop(n),this._paused=!0,this._playing=!1,this._pauseTime=this.currentTime()):this._pauseTime=0},t.SoundFile.prototype.loop=function(t,e,i,n,o){this._looping=!0,this.play(t,e,i,n,o)},t.SoundFile.prototype.setLoop=function(t){if(t===!0)this._looping=!0;else{if(t!==!1)throw\"Error: setLoop accepts either true or false\";this._looping=!1}this.bufferSourceNode&&(this.bufferSourceNode.loop=this._looping,this._counterNode.loop=this._looping)},t.SoundFile.prototype.isLooping=function(){return this.bufferSourceNode&&this._looping===!0&&this.isPlaying()===!0?!0:!1},t.SoundFile.prototype.isPlaying=function(){return this._playing},t.SoundFile.prototype.isPaused=function(){return this._paused},t.SoundFile.prototype.stop=function(t){var e=t||0;if(\"sustain\"===this.mode||\"untildone\"===this.mode)this.stopAll(e),this._playing=!1,this.pauseTime=0,this._paused=!1;else if(this.buffer&&this.bufferSourceNode){var i=l.audiocontext.currentTime,n=e||0;this.pauseTime=0,this.bufferSourceNode.stop(i+n),this._counterNode.stop(i+n),this._playing=!1,this._paused=!1}},t.SoundFile.prototype.stopAll=function(t){var e=l.audiocontext.currentTime,i=t||0;if(this.buffer&&this.bufferSourceNode){for(var n in this.bufferSourceNodes){const o=this.bufferSourceNodes[n];if(o)try{o.stop(e+i)}catch(r){}}this._counterNode.stop(e+i),this._onended(this)}},t.SoundFile.prototype.setVolume=function(t,e,i){if(\"number\"==typeof t){var n=e||0,o=i||0,r=l.audiocontext.currentTime,s=this.output.gain.value;this.output.gain.cancelScheduledValues(r+o),this.output.gain.linearRampToValueAtTime(s,r+o),this.output.gain.linearRampToValueAtTime(t,r+o+n)}else{if(!t)return this.output.gain;t.connect(this.output.gain)}},t.SoundFile.prototype.amp=t.SoundFile.prototype.setVolume,t.SoundFile.prototype.fade=t.SoundFile.prototype.setVolume,t.SoundFile.prototype.getVolume=function(){return this.output.gain.value},t.SoundFile.prototype.pan=function(t,e){this.panPosition=t,this.panner.pan(t,e)},t.SoundFile.prototype.getPan=function(){return this.panPosition},t.SoundFile.prototype.rate=function(t){var e=!1;if(\"undefined\"==typeof t)return this.playbackRate;if(this.playbackRate=t,0===t?t=1e-13:0>t&&!this.reversed?(t=Math.abs(t),e=!0):t>0&&this.reversed&&(e=!0),this.bufferSourceNode){var i=l.audiocontext.currentTime;this.bufferSourceNode.playbackRate.cancelScheduledValues(i),this.bufferSourceNode.playbackRate.linearRampToValueAtTime(Math.abs(t),i),this._counterNode.playbackRate.cancelScheduledValues(i),this._counterNode.playbackRate.linearRampToValueAtTime(Math.abs(t),i)}return e&&this.reverseBuffer(),this.playbackRate},t.SoundFile.prototype.setPitch=function(t){var e=d(t)/d(60);this.rate(e)},t.SoundFile.prototype.getPlaybackRate=function(){return this.playbackRate},t.SoundFile.prototype.duration=function(){return this.buffer?this.buffer.duration:0},t.SoundFile.prototype.currentTime=function(){return this.reversed?Math.abs(this._lastPos-this.buffer.length)/f.sampleRate:this._lastPos/f.sampleRate},t.SoundFile.prototype.jump=function(t,e){if(0>t||t>this.buffer.duration)throw\"jump time out of range\";if(e>this.buffer.duration-t)throw\"end time out of range\";var i=t||0,n=e||void 0;this.isPlaying()&&this.stop(0),this.play(0,this.playbackRate,this.output.gain.value,i,n);\n},t.SoundFile.prototype.channels=function(){return this.buffer.numberOfChannels},t.SoundFile.prototype.sampleRate=function(){return this.buffer.sampleRate},t.SoundFile.prototype.frames=function(){return this.buffer.length},t.SoundFile.prototype.getPeaks=function(t){if(!this.buffer)throw\"Cannot load peaks yet, buffer is not loaded\";if(t||(t=5*window.width),this.buffer){for(var e=this.buffer,i=e.length/t,n=~~(i/10)||1,o=e.numberOfChannels,r=new Float32Array(Math.round(t)),s=0;o>s;s++)for(var a=e.getChannelData(s),u=0;t>u;u++){for(var c=~~(u*i),p=~~(c+i),h=0,l=c;p>l;l+=n){var f=a[l];f>h?h=f:-f>h&&(h=f)}(0===s||Math.abs(h)>r[u])&&(r[u]=h)}return r}},t.SoundFile.prototype.reverseBuffer=function(){if(!this.buffer)throw\"SoundFile is not done loading\";var t=this._lastPos/f.sampleRate,e=this.getVolume();this.setVolume(0,.001);const i=this.buffer.numberOfChannels;for(var n=0;i>n;n++)this.buffer.getChannelData(n).reverse();this.reversed=!this.reversed,t&&this.jump(this.duration()-t),this.setVolume(e,.001)},t.SoundFile.prototype.onended=function(t){return this._onended=t,this},t.SoundFile.prototype.add=function(){},t.SoundFile.prototype.dispose=function(){var t=l.audiocontext.currentTime,e=l.soundArray.indexOf(this);if(l.soundArray.splice(e,1),this.stop(t),this.buffer&&this.bufferSourceNode){for(var i=0;i<this.bufferSourceNodes.length-1;i++)if(null!==this.bufferSourceNodes[i]){this.bufferSourceNodes[i].disconnect();try{this.bufferSourceNodes[i].stop(t)}catch(n){console.warning(\"no buffer source node to dispose\")}this.bufferSourceNodes[i]=null}if(this.isPlaying()){try{this._counterNode.stop(t)}catch(n){console.log(n)}this._counterNode=null}}this.output&&(this.output.disconnect(),this.output=null),this.panner&&(this.panner.disconnect(),this.panner=null)},t.SoundFile.prototype.connect=function(t){t?t.hasOwnProperty(\"input\")?this.panner.connect(t.input):this.panner.connect(t):this.panner.connect(l.input)},t.SoundFile.prototype.disconnect=function(){this.panner&&this.panner.disconnect()},t.SoundFile.prototype.getLevel=function(){console.warn(\"p5.SoundFile.getLevel has been removed from the library. Use p5.Amplitude instead\")},t.SoundFile.prototype.setPath=function(e,i){var n=t.prototype._checkFileFormats(e);this.url=n,this.load(i)},t.SoundFile.prototype.setBuffer=function(t){var e=t.length,i=t[0].length,n=f.createBuffer(e,i,f.sampleRate);t[0]instanceof Float32Array||(t[0]=new Float32Array(t[0]));for(var o=0;e>o;o++){var r=n.getChannelData(o);r.set(t[o])}this.buffer=n,this.panner.inputChannels(e)};var y=function(t){const e=t.length,i=f.createBuffer(1,t.length,f.sampleRate),n=i.getChannelData(0);for(var o=0;e>o;o++)n[o]=o;return i};t.SoundFile.prototype._initCounterNode=function(){var e=this,i=f.currentTime,n=f.createBufferSource();return e._scopeNode&&(e._scopeNode.disconnect(),e._scopeNode.removeEventListener(\"audioprocess\",e._onAudioProcess),delete e._scopeNode),e._scopeNode=f.createScriptProcessor(256,1,1),n.buffer=y(e.buffer),n.playbackRate.setValueAtTime(e.playbackRate,i),n.connect(e._scopeNode),e._scopeNode.connect(t.soundOut._silentNode),e._scopeNode.addEventListener(\"audioprocess\",e._onAudioProcess),n},t.SoundFile.prototype._initSourceNode=function(){var t=f.createBufferSource();return t.buffer=this.buffer,t.playbackRate.value=this.playbackRate,t.connect(this.output),t},t.SoundFile.prototype.processPeaks=function(t,r,s,a){var u=this.buffer.length,c=this.buffer.sampleRate,p=this.buffer,h=[],l=r||.9,f=l,d=s||.22,m=a||200,y=new window.OfflineAudioContext(1,u,c),v=y.createBufferSource();v.buffer=p;var g=y.createBiquadFilter();g.type=\"lowpass\",v.connect(g),g.connect(y.destination),v.start(0),y.startRendering(),y.oncomplete=function(r){if(self.panner){var s=r.renderedBuffer,a=s.getChannelData(0);do h=e(a,f),f-=.005;while(Object.keys(h).length<m&&f>=d);var u=i(h),c=n(u,s.sampleRate),p=c.sort(function(t,e){return e.count-t.count}).splice(0,5);this.tempo=p[0].tempo;var l=5,y=o(h,p[0].tempo,s.sampleRate,l);t(y)}}};var v=function(t,e){this.sampleIndex=e,this.amplitude=t,this.tempos=[],this.intervals=[]},g=function(t,e,i,n){this.callback=t,this.time=e,this.id=i,this.val=n};t.SoundFile.prototype.addCue=function(t,e,i){var n=this._cueIDCounter++,o=new g(e,t,n,i);return this._cues.push(o),n},t.SoundFile.prototype.removeCue=function(t){for(var e=this._cues.length,i=0;e>i;i++){var n=this._cues[i];if(n.id===t){this._cues.splice(i,1);break}}0===this._cues.length},t.SoundFile.prototype.clearCues=function(){this._cues=[]},t.SoundFile.prototype._onTimeUpdate=function(t){for(var e=t/this.buffer.sampleRate,i=this._cues.length,n=0;i>n;n++){var o=this._cues[n],r=o.time,s=o.val;this._prevTime<r&&e>=r&&o.callback(s)}this._prevTime=e},t.SoundFile.prototype.save=function(e){const i=m(this.buffer);t.prototype.saveSound([i],e,\"wav\")},t.SoundFile.prototype.getBlob=function(){const t=m(this.buffer);return new Blob([t],{type:\"audio/wav\"})}}(c,a,u,u);var l;l=function(){var e=a;t.Amplitude=function(t){this.bufferSize=2048,this.audiocontext=e.audiocontext,this.processor=this.audiocontext.createScriptProcessor(this.bufferSize,2,1),this.input=this.processor,this.output=this.audiocontext.createGain(),this.smoothing=t||0,this.volume=0,this.average=0,this.stereoVol=[0,0],this.stereoAvg=[0,0],this.stereoVolNorm=[0,0],this.volMax=.001,this.normalize=!1,this.processor.onaudioprocess=this._audioProcess.bind(this),this.processor.connect(this.output),this.output.gain.value=0,this.output.connect(this.audiocontext.destination),e.meter.connect(this.processor),e.soundArray.push(this)},t.Amplitude.prototype.setInput=function(i,n){e.meter.disconnect(),n&&(this.smoothing=n),null==i?(console.log(\"Amplitude input source is not ready! Connecting to master output instead\"),e.meter.connect(this.processor)):i instanceof t.Signal?i.output.connect(this.processor):i?(i.connect(this.processor),this.processor.disconnect(),this.processor.connect(this.output)):e.meter.connect(this.processor)},t.Amplitude.prototype.connect=function(t){t?t.hasOwnProperty(\"input\")?this.output.connect(t.input):this.output.connect(t):this.output.connect(this.panner.connect(e.input))},t.Amplitude.prototype.disconnect=function(){this.output&&this.output.disconnect()},t.Amplitude.prototype._audioProcess=function(t){for(var e=0;e<t.inputBuffer.numberOfChannels;e++){for(var i,n=t.inputBuffer.getChannelData(e),o=n.length,r=0,s=0,a=0;o>a;a++)i=n[a],this.normalize?(r+=Math.max(Math.min(i/this.volMax,1),-1),s+=Math.max(Math.min(i/this.volMax,1),-1)*Math.max(Math.min(i/this.volMax,1),-1)):(r+=i,s+=i*i);var u=r/o,c=Math.sqrt(s/o);this.stereoVol[e]=Math.max(c,this.stereoVol[e]*this.smoothing),this.stereoAvg[e]=Math.max(u,this.stereoVol[e]*this.smoothing),this.volMax=Math.max(this.stereoVol[e],this.volMax)}var p=this,h=this.stereoVol.reduce(function(t,e,i){return p.stereoVolNorm[i-1]=Math.max(Math.min(p.stereoVol[i-1]/p.volMax,1),0),p.stereoVolNorm[i]=Math.max(Math.min(p.stereoVol[i]/p.volMax,1),0),t+e});this.volume=h/this.stereoVol.length,this.volNorm=Math.max(Math.min(this.volume/this.volMax,1),0)},t.Amplitude.prototype.getLevel=function(t){return\"undefined\"!=typeof t?this.normalize?this.stereoVolNorm[t]:this.stereoVol[t]:this.normalize?this.volNorm:this.volume},t.Amplitude.prototype.toggleNormalize=function(t){\"boolean\"==typeof t?this.normalize=t:this.normalize=!this.normalize},t.Amplitude.prototype.smooth=function(t){t>=0&&1>t?this.smoothing=t:console.log(\"Error: smoothing must be between 0 and 1\")},t.Amplitude.prototype.dispose=function(){var t=e.soundArray.indexOf(this);e.soundArray.splice(t,1),this.input&&(this.input.disconnect(),delete this.input),this.output&&(this.output.disconnect(),delete this.output),delete this.processor}}(a);var f;f=function(){var e=a;t.FFT=function(t,i){this.input=this.analyser=e.audiocontext.createAnalyser(),Object.defineProperties(this,{bins:{get:function(){return this.analyser.fftSize/2},set:function(t){this.analyser.fftSize=2*t},configurable:!0,enumerable:!0},smoothing:{get:function(){return this.analyser.smoothingTimeConstant},set:function(t){this.analyser.smoothingTimeConstant=t},configurable:!0,enumerable:!0}}),this.smooth(t),this.bins=i||1024,e.fftMeter.connect(this.analyser),this.freqDomain=new Uint8Array(this.analyser.frequencyBinCount),this.timeDomain=new Uint8Array(this.analyser.frequencyBinCount),this.bass=[20,140],this.lowMid=[140,400],this.mid=[400,2600],this.highMid=[2600,5200],this.treble=[5200,14e3],e.soundArray.push(this)},t.FFT.prototype.setInput=function(t){t?(t.output?t.output.connect(this.analyser):t.connect&&t.connect(this.analyser),e.fftMeter.disconnect()):e.fftMeter.connect(this.analyser)},t.FFT.prototype.waveform=function(){for(var e,i,n,s=0;s<arguments.length;s++)\"number\"==typeof arguments[s]&&(e=arguments[s],this.analyser.fftSize=2*e),\"string\"==typeof arguments[s]&&(i=arguments[s]);if(i&&!t.prototype._isSafari())return o(this,this.timeDomain),this.analyser.getFloatTimeDomainData(this.timeDomain),this.timeDomain;r(this,this.timeDomain),this.analyser.getByteTimeDomainData(this.timeDomain);for(var n=new Array,a=0;a<this.timeDomain.length;a++){var u=t.prototype.map(this.timeDomain[a],0,255,-1,1);n.push(u)}return n},t.FFT.prototype.analyze=function(){for(var t,e=0;e<arguments.length;e++)\"number\"==typeof arguments[e]&&(this.bins=arguments[e],this.analyser.fftSize=2*this.bins),\"string\"==typeof arguments[e]&&(t=arguments[e]);if(t&&\"db\"===t.toLowerCase())return i(this),this.analyser.getFloatFrequencyData(this.freqDomain),this.freqDomain;n(this,this.freqDomain),this.analyser.getByteFrequencyData(this.freqDomain);var o=Array.apply([],this.freqDomain);return o.length===this.analyser.fftSize,o.constructor===Array,o},t.FFT.prototype.getEnergy=function(t,i){var n=e.audiocontext.sampleRate/2;if(\"bass\"===t?(t=this.bass[0],i=this.bass[1]):\"lowMid\"===t?(t=this.lowMid[0],i=this.lowMid[1]):\"mid\"===t?(t=this.mid[0],i=this.mid[1]):\"highMid\"===t?(t=this.highMid[0],i=this.highMid[1]):\"treble\"===t&&(t=this.treble[0],i=this.treble[1]),\"number\"!=typeof t)throw\"invalid input for getEnergy()\";if(i){if(t&&i){if(t>i){var o=i;i=t,t=o}for(var r=Math.round(t/n*this.freqDomain.length),s=Math.round(i/n*this.freqDomain.length),a=0,u=0,c=r;s>=c;c++)a+=this.freqDomain[c],u+=1;var p=a/u;return p}throw\"invalid input for getEnergy()\"}var h=Math.round(t/n*this.freqDomain.length);return this.freqDomain[h]},t.FFT.prototype.getFreq=function(t,e){console.log(\"getFreq() is deprecated. Please use getEnergy() instead.\");var i=this.getEnergy(t,e);return i},t.FFT.prototype.getCentroid=function(){for(var t=e.audiocontext.sampleRate/2,i=0,n=0,o=0;o<this.freqDomain.length;o++)i+=o*this.freqDomain[o],n+=this.freqDomain[o];var r=0;0!==n&&(r=i/n);var s=r*(t/this.freqDomain.length);return s},t.FFT.prototype.smooth=function(t){return\"undefined\"!=typeof t&&(this.smoothing=t),this.smoothing},t.FFT.prototype.dispose=function(){var t=e.soundArray.indexOf(this);e.soundArray.splice(t,1),this.analyser&&(this.analyser.disconnect(),delete this.analyser)},t.FFT.prototype.linAverages=function(t){for(var t=t||16,e=this.freqDomain,i=e.length,n=Math.floor(i/t),o=new Array(t),r=0,s=0;i>s;s++)o[r]=void 0!==o[r]?(o[r]+e[s])/2:e[s],s%n===n-1&&r++;return o},t.FFT.prototype.logAverages=function(t){for(var i=e.audiocontext.sampleRate/2,n=this.freqDomain,o=n.length,r=new Array(t.length),s=0,a=0;o>a;a++){var u=Math.round(a*i/this.freqDomain.length);u>t[s].hi&&s++,r[s]=void 0!==r[s]?(r[s]+n[a])/2:n[a]}return r},t.FFT.prototype.getOctaveBands=function(t,i){var t=t||3,i=i||15.625,n=[],o={lo:i/Math.pow(2,1/(2*t)),ctr:i,hi:i*Math.pow(2,1/(2*t))};n.push(o);for(var r=e.audiocontext.sampleRate/2;o.hi<r;){var s={};s.lo=o.hi,s.ctr=o.ctr*Math.pow(2,1/t),s.hi=s.ctr*Math.pow(2,1/(2*t)),n.push(s),o=s}return n};var i=function(t){t.freqDomain instanceof Float32Array==!1&&(t.freqDomain=new Float32Array(t.analyser.frequencyBinCount))},n=function(t){t.freqDomain instanceof Uint8Array==!1&&(t.freqDomain=new Uint8Array(t.analyser.frequencyBinCount))},o=function(t){t.timeDomain instanceof Float32Array==!1&&(t.timeDomain=new Float32Array(t.analyser.frequencyBinCount))},r=function(t){t.timeDomain instanceof Uint8Array==!1&&(t.timeDomain=new Uint8Array(t.analyser.frequencyBinCount))}}(a);var d;d=function(t){\"use strict\";return t.SignalBase=function(){},t.extend(t.SignalBase),t.SignalBase.prototype.connect=function(e,i,n){return t.Signal&&t.Signal===e.constructor||t.Param&&t.Param===e.constructor||t.TimelineSignal&&t.TimelineSignal===e.constructor?(e._param.cancelScheduledValues(0),e._param.value=0,e.overridden=!0):e instanceof AudioParam&&(e.cancelScheduledValues(0),e.value=0),t.prototype.connect.call(this,e,i,n),this},t.SignalBase}(n);var m;m=function(t){\"use strict\";return t.WaveShaper=function(t,e){this._shaper=this.input=this.output=this.context.createWaveShaper(),this._curve=null,Array.isArray(t)?this.curve=t:isFinite(t)||this.isUndef(t)?this._curve=new Float32Array(this.defaultArg(t,1024)):this.isFunction(t)&&(this._curve=new Float32Array(this.defaultArg(e,1024)),this.setMap(t))},t.extend(t.WaveShaper,t.SignalBase),t.WaveShaper.prototype.setMap=function(t){for(var e=0,i=this._curve.length;i>e;e++){var n=e/(i-1)*2-1;this._curve[e]=t(n,e)}return this._shaper.curve=this._curve,this},Object.defineProperty(t.WaveShaper.prototype,\"curve\",{get:function(){return this._shaper.curve},set:function(t){this._curve=new Float32Array(t),this._shaper.curve=this._curve}}),Object.defineProperty(t.WaveShaper.prototype,\"oversample\",{get:function(){return this._shaper.oversample},set:function(t){if(-1===[\"none\",\"2x\",\"4x\"].indexOf(t))throw new RangeError(\"Tone.WaveShaper: oversampling must be either 'none', '2x', or '4x'\");this._shaper.oversample=t}}),t.WaveShaper.prototype.dispose=function(){return t.prototype.dispose.call(this),this._shaper.disconnect(),this._shaper=null,this._curve=null,this},t.WaveShaper}(n);var y;y=function(t){return t.TimeBase=function(e,i){if(!(this instanceof t.TimeBase))return new t.TimeBase(e,i);if(this._expr=this._noOp,e instanceof t.TimeBase)this.copy(e);else if(!this.isUndef(i)||this.isNumber(e)){i=this.defaultArg(i,this._defaultUnits);var n=this._primaryExpressions[i].method;this._expr=n.bind(this,e)}else this.isString(e)?this.set(e):this.isUndef(e)&&(this._expr=this._defaultExpr())},t.extend(t.TimeBase),t.TimeBase.prototype.set=function(t){return this._expr=this._parseExprString(t),this},t.TimeBase.prototype.clone=function(){var t=new this.constructor;return t.copy(this),t},t.TimeBase.prototype.copy=function(t){var e=t._expr();return this.set(e)},t.TimeBase.prototype._primaryExpressions={n:{regexp:/^(\\d+)n/i,method:function(t){return t=parseInt(t),1===t?this._beatsToUnits(this._timeSignature()):this._beatsToUnits(4/t)}},t:{regexp:/^(\\d+)t/i,method:function(t){return t=parseInt(t),this._beatsToUnits(8/(3*parseInt(t)))}},m:{regexp:/^(\\d+)m/i,method:function(t){return this._beatsToUnits(parseInt(t)*this._timeSignature())}},i:{regexp:/^(\\d+)i/i,method:function(t){return this._ticksToUnits(parseInt(t))}},hz:{regexp:/^(\\d+(?:\\.\\d+)?)hz/i,method:function(t){return this._frequencyToUnits(parseFloat(t))}},tr:{regexp:/^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,method:function(t,e,i){var n=0;return t&&\"0\"!==t&&(n+=this._beatsToUnits(this._timeSignature()*parseFloat(t))),e&&\"0\"!==e&&(n+=this._beatsToUnits(parseFloat(e))),i&&\"0\"!==i&&(n+=this._beatsToUnits(parseFloat(i)/4)),n}},s:{regexp:/^(\\d+(?:\\.\\d+)?s)/,method:function(t){return this._secondsToUnits(parseFloat(t))}},samples:{regexp:/^(\\d+)samples/,method:function(t){return parseInt(t)/this.context.sampleRate}},\"default\":{regexp:/^(\\d+(?:\\.\\d+)?)/,method:function(t){return this._primaryExpressions[this._defaultUnits].method.call(this,t)}}},t.TimeBase.prototype._binaryExpressions={\"+\":{regexp:/^\\+/,precedence:2,method:function(t,e){return t()+e()}},\"-\":{regexp:/^\\-/,precedence:2,method:function(t,e){return t()-e()}},\"*\":{regexp:/^\\*/,precedence:1,method:function(t,e){return t()*e()}},\"/\":{regexp:/^\\//,precedence:1,method:function(t,e){return t()/e()}}},t.TimeBase.prototype._unaryExpressions={neg:{regexp:/^\\-/,method:function(t){return-t()}}},t.TimeBase.prototype._syntaxGlue={\"(\":{regexp:/^\\(/},\")\":{regexp:/^\\)/}},t.TimeBase.prototype._tokenize=function(t){function e(t,e){for(var i=[\"_binaryExpressions\",\"_unaryExpressions\",\"_primaryExpressions\",\"_syntaxGlue\"],n=0;n<i.length;n++){var o=e[i[n]];for(var r in o){var s=o[r],a=s.regexp,u=t.match(a);if(null!==u)return{method:s.method,precedence:s.precedence,regexp:s.regexp,value:u[0]}}}throw new SyntaxError(\"Tone.TimeBase: Unexpected token \"+t)}for(var i=-1,n=[];t.length>0;){t=t.trim();var o=e(t,this);n.push(o),t=t.substr(o.value.length)}return{next:function(){return n[++i]},peek:function(){return n[i+1]}}},t.TimeBase.prototype._matchGroup=function(t,e,i){var n=!1;if(!this.isUndef(t))for(var o in e){var r=e[o];if(r.regexp.test(t.value)){if(this.isUndef(i))return r;if(r.precedence===i)return r}}return n},t.TimeBase.prototype._parseBinary=function(t,e){this.isUndef(e)&&(e=2);var i;i=0>e?this._parseUnary(t):this._parseBinary(t,e-1);for(var n=t.peek();n&&this._matchGroup(n,this._binaryExpressions,e);)n=t.next(),i=n.method.bind(this,i,this._parseBinary(t,e-1)),n=t.peek();return i},t.TimeBase.prototype._parseUnary=function(t){var e,i;e=t.peek();var n=this._matchGroup(e,this._unaryExpressions);return n?(e=t.next(),i=this._parseUnary(t),n.method.bind(this,i)):this._parsePrimary(t)},t.TimeBase.prototype._parsePrimary=function(t){var e,i;if(e=t.peek(),this.isUndef(e))throw new SyntaxError(\"Tone.TimeBase: Unexpected end of expression\");if(this._matchGroup(e,this._primaryExpressions)){e=t.next();var n=e.value.match(e.regexp);return e.method.bind(this,n[1],n[2],n[3])}if(e&&\"(\"===e.value){if(t.next(),i=this._parseBinary(t),e=t.next(),!e||\")\"!==e.value)throw new SyntaxError(\"Expected )\");return i}throw new SyntaxError(\"Tone.TimeBase: Cannot process token \"+e.value)},t.TimeBase.prototype._parseExprString=function(t){this.isString(t)||(t=t.toString());var e=this._tokenize(t),i=this._parseBinary(e);return i},t.TimeBase.prototype._noOp=function(){return 0},t.TimeBase.prototype._defaultExpr=function(){return this._noOp},t.TimeBase.prototype._defaultUnits=\"s\",t.TimeBase.prototype._frequencyToUnits=function(t){return 1/t},t.TimeBase.prototype._beatsToUnits=function(e){return 60/t.Transport.bpm.value*e},t.TimeBase.prototype._secondsToUnits=function(t){return t},t.TimeBase.prototype._ticksToUnits=function(e){return e*(this._beatsToUnits(1)/t.Transport.PPQ)},t.TimeBase.prototype._timeSignature=function(){return t.Transport.timeSignature},t.TimeBase.prototype._pushExpr=function(e,i,n){return e instanceof t.TimeBase||(e=new this.constructor(e,n)),this._expr=this._binaryExpressions[i].method.bind(this,this._expr,e._expr),this},t.TimeBase.prototype.add=function(t,e){return this._pushExpr(t,\"+\",e)},t.TimeBase.prototype.sub=function(t,e){return this._pushExpr(t,\"-\",e)},t.TimeBase.prototype.mult=function(t,e){return this._pushExpr(t,\"*\",e)},t.TimeBase.prototype.div=function(t,e){return this._pushExpr(t,\"/\",e)},t.TimeBase.prototype.valueOf=function(){return this._expr()},t.TimeBase.prototype.dispose=function(){this._expr=null},t.TimeBase}(n);var v;v=function(t){return t.Time=function(e,i){return this instanceof t.Time?(this._plusNow=!1,void t.TimeBase.call(this,e,i)):new t.Time(e,i)},t.extend(t.Time,t.TimeBase),t.Time.prototype._unaryExpressions=Object.create(t.TimeBase.prototype._unaryExpressions),t.Time.prototype._unaryExpressions.quantize={regexp:/^@/,method:function(e){return t.Transport.nextSubdivision(e())}},t.Time.prototype._unaryExpressions.now={regexp:/^\\+/,method:function(t){return this._plusNow=!0,t()}},t.Time.prototype.quantize=function(t,e){return e=this.defaultArg(e,1),this._expr=function(t,e,i){t=t(),e=e.toSeconds();var n=Math.round(t/e),o=n*e,r=o-t;return t+r*i}.bind(this,this._expr,new this.constructor(t),e),this},t.Time.prototype.addNow=function(){return this._plusNow=!0,this},t.Time.prototype._defaultExpr=function(){return this._plusNow=!0,this._noOp},t.Time.prototype.copy=function(e){return t.TimeBase.prototype.copy.call(this,e),this._plusNow=e._plusNow,this},t.Time.prototype.toNotation=function(){var t=this.toSeconds(),e=[\"1m\",\"2n\",\"4n\",\"8n\",\"16n\",\"32n\",\"64n\",\"128n\"],i=this._toNotationHelper(t,e),n=[\"1m\",\"2n\",\"2t\",\"4n\",\"4t\",\"8n\",\"8t\",\"16n\",\"16t\",\"32n\",\"32t\",\"64n\",\"64t\",\"128n\"],o=this._toNotationHelper(t,n);return o.split(\"+\").length<i.split(\"+\").length?o:i},t.Time.prototype._toNotationHelper=function(t,e){for(var i=this._notationToUnits(e[e.length-1]),n=\"\",o=0;o<e.length;o++){var r=this._notationToUnits(e[o]),s=t/r,a=1e-6;if(a>1-s%1&&(s+=a),s=Math.floor(s),s>0){if(n+=1===s?e[o]:s.toString()+\"*\"+e[o],t-=s*r,i>t)break;n+=\" + \"}}return\"\"===n&&(n=\"0\"),n},t.Time.prototype._notationToUnits=function(t){for(var e=this._primaryExpressions,i=[e.n,e.t,e.m],n=0;n<i.length;n++){var o=i[n],r=t.match(o.regexp);if(r)return o.method.call(this,r[1])}},t.Time.prototype.toBarsBeatsSixteenths=function(){var t=this._beatsToUnits(1),e=this.toSeconds()/t,i=Math.floor(e/this._timeSignature()),n=e%1*4;e=Math.floor(e)%this._timeSignature(),n=n.toString(),n.length>3&&(n=parseFloat(n).toFixed(3));var o=[i,e,n];return o.join(\":\")},t.Time.prototype.toTicks=function(){var e=this._beatsToUnits(1),i=this.valueOf()/e;return Math.floor(i*t.Transport.PPQ)},t.Time.prototype.toSamples=function(){return this.toSeconds()*this.context.sampleRate},t.Time.prototype.toFrequency=function(){return 1/this.toSeconds()},t.Time.prototype.toSeconds=function(){return this.valueOf()},t.Time.prototype.toMilliseconds=function(){return 1e3*this.toSeconds()},t.Time.prototype.valueOf=function(){var t=this._expr();return t+(this._plusNow?this.now():0)},t.Time}(n);var g;g=function(t){t.Frequency=function(e,i){return this instanceof t.Frequency?void t.TimeBase.call(this,e,i):new t.Frequency(e,i)},t.extend(t.Frequency,t.TimeBase),t.Frequency.prototype._primaryExpressions=Object.create(t.TimeBase.prototype._primaryExpressions),t.Frequency.prototype._primaryExpressions.midi={regexp:/^(\\d+(?:\\.\\d+)?midi)/,method:function(t){return this.midiToFrequency(t)}},t.Frequency.prototype._primaryExpressions.note={regexp:/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,method:function(t,i){var n=e[t.toLowerCase()],o=n+12*(parseInt(i)+1);return this.midiToFrequency(o)}},t.Frequency.prototype._primaryExpressions.tr={regexp:/^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,method:function(t,e,i){var n=1;return t&&\"0\"!==t&&(n*=this._beatsToUnits(this._timeSignature()*parseFloat(t))),e&&\"0\"!==e&&(n*=this._beatsToUnits(parseFloat(e))),i&&\"0\"!==i&&(n*=this._beatsToUnits(parseFloat(i)/4)),n}},t.Frequency.prototype.transpose=function(t){return this._expr=function(t,e){var i=t();return i*this.intervalToFrequencyRatio(e)}.bind(this,this._expr,t),this},t.Frequency.prototype.harmonize=function(t){return this._expr=function(t,e){for(var i=t(),n=[],o=0;o<e.length;o++)n[o]=i*this.intervalToFrequencyRatio(e[o]);return n}.bind(this,this._expr,t),this},t.Frequency.prototype.toMidi=function(){return this.frequencyToMidi(this.valueOf())},t.Frequency.prototype.toNote=function(){var e=this.valueOf(),n=Math.log(e/t.Frequency.A4)/Math.LN2,o=Math.round(12*n)+57,r=Math.floor(o/12);0>r&&(o+=-12*r);var s=i[o%12];return s+r.toString()},t.Frequency.prototype.toSeconds=function(){return 1/this.valueOf()},t.Frequency.prototype.toFrequency=function(){return this.valueOf()},t.Frequency.prototype.toTicks=function(){var e=this._beatsToUnits(1),i=this.valueOf()/e;return Math.floor(i*t.Transport.PPQ)},t.Frequency.prototype._frequencyToUnits=function(t){return t},t.Frequency.prototype._ticksToUnits=function(e){return 1/(60*e/(t.Transport.bpm.value*t.Transport.PPQ))},t.Frequency.prototype._beatsToUnits=function(e){return 1/t.TimeBase.prototype._beatsToUnits.call(this,e)},t.Frequency.prototype._secondsToUnits=function(t){return 1/t},t.Frequency.prototype._defaultUnits=\"hz\";var e={cbb:-2,cb:-1,c:0,\"c#\":1,cx:2,dbb:0,db:1,d:2,\"d#\":3,dx:4,ebb:2,eb:3,e:4,\"e#\":5,ex:6,fbb:3,fb:4,f:5,\"f#\":6,fx:7,gbb:5,gb:6,g:7,\"g#\":8,gx:9,abb:7,ab:8,a:9,\"a#\":10,ax:11,bbb:9,bb:10,b:11,\"b#\":12,bx:13},i=[\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\",\"A\",\"A#\",\"B\"];return t.Frequency.A4=440,t.Frequency.prototype.midiToFrequency=function(e){return t.Frequency.A4*Math.pow(2,(e-69)/12)},t.Frequency.prototype.frequencyToMidi=function(e){return 69+12*Math.log(e/t.Frequency.A4)/Math.LN2},t.Frequency}(n);var _;_=function(t){return t.TransportTime=function(e,i){return this instanceof t.TransportTime?void t.Time.call(this,e,i):new t.TransportTime(e,i)},t.extend(t.TransportTime,t.Time),t.TransportTime.prototype._unaryExpressions=Object.create(t.Time.prototype._unaryExpressions),t.TransportTime.prototype._unaryExpressions.quantize={regexp:/^@/,method:function(e){var i=this._secondsToTicks(e()),n=Math.ceil(t.Transport.ticks/i);return this._ticksToUnits(n*i)}},t.TransportTime.prototype._secondsToTicks=function(e){var i=this._beatsToUnits(1),n=e/i;return Math.round(n*t.Transport.PPQ)},t.TransportTime.prototype.valueOf=function(){var e=this._secondsToTicks(this._expr());return e+(this._plusNow?t.Transport.ticks:0)},t.TransportTime.prototype.toTicks=function(){return this.valueOf()},t.TransportTime.prototype.toSeconds=function(){var e=this._expr();return e+(this._plusNow?t.Transport.seconds:0)},t.TransportTime.prototype.toFrequency=function(){return 1/this.toSeconds()},t.TransportTime}(n);var T;T=function(t){return t.Type={Default:\"number\",Time:\"time\",Frequency:\"frequency\",TransportTime:\"transportTime\",Ticks:\"ticks\",NormalRange:\"normalRange\",AudioRange:\"audioRange\",Decibels:\"db\",Interval:\"interval\",BPM:\"bpm\",Positive:\"positive\",Cents:\"cents\",Degrees:\"degrees\",MIDI:\"midi\",BarsBeatsSixteenths:\"barsBeatsSixteenths\",Samples:\"samples\",Hertz:\"hertz\",Note:\"note\",Milliseconds:\"milliseconds\",Seconds:\"seconds\",Notation:\"notation\"},t.prototype.toSeconds=function(e){return this.isNumber(e)?e:this.isUndef(e)?this.now():this.isString(e)?new t.Time(e).toSeconds():e instanceof t.TimeBase?e.toSeconds():void 0},t.prototype.toFrequency=function(e){return this.isNumber(e)?e:this.isString(e)||this.isUndef(e)?new t.Frequency(e).valueOf():e instanceof t.TimeBase?e.toFrequency():void 0},t.prototype.toTicks=function(e){return this.isNumber(e)||this.isString(e)?new t.TransportTime(e).toTicks():this.isUndef(e)?t.Transport.ticks:e instanceof t.TimeBase?e.toTicks():void 0},t}(n,v,g,_);var b;b=function(t){\"use strict\";return t.Param=function(){var e=this.optionsObject(arguments,[\"param\",\"units\",\"convert\"],t.Param.defaults);this._param=this.input=e.param,this.units=e.units,this.convert=e.convert,this.overridden=!1,this._lfo=null,this.isObject(e.lfo)?this.value=e.lfo:this.isUndef(e.value)||(this.value=e.value)},t.extend(t.Param),t.Param.defaults={units:t.Type.Default,convert:!0,param:void 0},Object.defineProperty(t.Param.prototype,\"value\",{get:function(){return this._toUnits(this._param.value)},set:function(e){if(this.isObject(e)){if(this.isUndef(t.LFO))throw new Error(\"Include 'Tone.LFO' to use an LFO as a Param value.\");this._lfo&&this._lfo.dispose(),this._lfo=new t.LFO(e).start(),this._lfo.connect(this.input)}else{var i=this._fromUnits(e);this._param.cancelScheduledValues(0),this._param.value=i}}}),t.Param.prototype._fromUnits=function(e){if(!this.convert&&!this.isUndef(this.convert))return e;switch(this.units){case t.Type.Time:return this.toSeconds(e);case t.Type.Frequency:return this.toFrequency(e);case t.Type.Decibels:return this.dbToGain(e);case t.Type.NormalRange:return Math.min(Math.max(e,0),1);case t.Type.AudioRange:return Math.min(Math.max(e,-1),1);case t.Type.Positive:return Math.max(e,0);default:return e}},t.Param.prototype._toUnits=function(e){if(!this.convert&&!this.isUndef(this.convert))return e;switch(this.units){case t.Type.Decibels:return this.gainToDb(e);default:return e}},t.Param.prototype._minOutput=1e-5,t.Param.prototype.setValueAtTime=function(t,e){return t=this._fromUnits(t),e=this.toSeconds(e),e<=this.now()+this.blockTime?this._param.value=t:this._param.setValueAtTime(t,e),this},t.Param.prototype.setRampPoint=function(t){t=this.defaultArg(t,this.now());var e=this._param.value;return 0===e&&(e=this._minOutput),this._param.setValueAtTime(e,t),this},t.Param.prototype.linearRampToValueAtTime=function(t,e){return t=this._fromUnits(t),this._param.linearRampToValueAtTime(t,this.toSeconds(e)),this},t.Param.prototype.exponentialRampToValueAtTime=function(t,e){return t=this._fromUnits(t),t=Math.max(this._minOutput,t),this._param.exponentialRampToValueAtTime(t,this.toSeconds(e)),this},t.Param.prototype.exponentialRampToValue=function(t,e,i){return i=this.toSeconds(i),this.setRampPoint(i),this.exponentialRampToValueAtTime(t,i+this.toSeconds(e)),this},t.Param.prototype.linearRampToValue=function(t,e,i){return i=this.toSeconds(i),this.setRampPoint(i),this.linearRampToValueAtTime(t,i+this.toSeconds(e)),this},t.Param.prototype.setTargetAtTime=function(t,e,i){return t=this._fromUnits(t),t=Math.max(this._minOutput,t),i=Math.max(this._minOutput,i),this._param.setTargetAtTime(t,this.toSeconds(e),i),this},t.Param.prototype.setValueCurveAtTime=function(t,e,i){for(var n=0;n<t.length;n++)t[n]=this._fromUnits(t[n]);return this._param.setValueCurveAtTime(t,this.toSeconds(e),this.toSeconds(i)),this},t.Param.prototype.cancelScheduledValues=function(t){return this._param.cancelScheduledValues(this.toSeconds(t)),this},t.Param.prototype.rampTo=function(e,i,n){return i=this.defaultArg(i,0),this.units===t.Type.Frequency||this.units===t.Type.BPM||this.units===t.Type.Decibels?this.exponentialRampToValue(e,i,n):this.linearRampToValue(e,i,n),this},Object.defineProperty(t.Param.prototype,\"lfo\",{get:function(){return this._lfo}}),t.Param.prototype.dispose=function(){return t.prototype.dispose.call(this),this._param=null,this._lfo&&(this._lfo.dispose(),this._lfo=null),this},t.Param}(n);var x;x=function(t){\"use strict\";return window.GainNode&&!AudioContext.prototype.createGain&&(AudioContext.prototype.createGain=AudioContext.prototype.createGainNode),t.Gain=function(){var e=this.optionsObject(arguments,[\"gain\",\"units\"],t.Gain.defaults);this.input=this.output=this._gainNode=this.context.createGain(),this.gain=new t.Param({param:this._gainNode.gain,units:e.units,value:e.gain,convert:e.convert}),this._readOnly(\"gain\")},t.extend(t.Gain),t.Gain.defaults={gain:1,convert:!0},t.Gain.prototype.dispose=function(){t.Param.prototype.dispose.call(this),this._gainNode.disconnect(),this._gainNode=null,this._writable(\"gain\"),this.gain.dispose(),this.gain=null},t.prototype.createInsOuts=function(e,i){1===e?this.input=new t.Gain:e>1&&(this.input=new Array(e)),1===i?this.output=new t.Gain:i>1&&(this.output=new Array(e))},t.Gain}(n,b);var S;S=function(t){\"use strict\";return t.Signal=function(){var e=this.optionsObject(arguments,[\"value\",\"units\"],t.Signal.defaults);this.output=this._gain=this.context.createGain(),e.param=this._gain.gain,t.Param.call(this,e),this.input=this._param=this._gain.gain,this.context.getConstant(1).chain(this._gain)},t.extend(t.Signal,t.Param),t.Signal.defaults={value:0,units:t.Type.Default,convert:!0},t.Signal.prototype.connect=t.SignalBase.prototype.connect,t.Signal.prototype.dispose=function(){return t.Param.prototype.dispose.call(this),this._param=null,this._gain.disconnect(),this._gain=null,this},t.Signal}(n,m,T,b);var w;w=function(t){\"use strict\";return t.Add=function(e){this.createInsOuts(2,0),this._sum=this.input[0]=this.input[1]=this.output=new t.Gain,this._param=this.input[1]=new t.Signal(e),this._param.connect(this._sum)},t.extend(t.Add,t.Signal),t.Add.prototype.dispose=function(){return t.prototype.dispose.call(this),this._sum.dispose(),this._sum=null,this._param.dispose(),this._param=null,this},t.Add}(n,S);var A;A=function(t){\"use strict\";return t.Multiply=function(e){this.createInsOuts(2,0),this._mult=this.input[0]=this.output=new t.Gain,this._param=this.input[1]=this.output.gain,this._param.value=this.defaultArg(e,0)},t.extend(t.Multiply,t.Signal),t.Multiply.prototype.dispose=function(){return t.prototype.dispose.call(this),this._mult.dispose(),this._mult=null,\nthis._param=null,this},t.Multiply}(n,S);var P;P=function(t){\"use strict\";return t.Scale=function(e,i){this._outputMin=this.defaultArg(e,0),this._outputMax=this.defaultArg(i,1),this._scale=this.input=new t.Multiply(1),this._add=this.output=new t.Add(0),this._scale.connect(this._add),this._setRange()},t.extend(t.Scale,t.SignalBase),Object.defineProperty(t.Scale.prototype,\"min\",{get:function(){return this._outputMin},set:function(t){this._outputMin=t,this._setRange()}}),Object.defineProperty(t.Scale.prototype,\"max\",{get:function(){return this._outputMax},set:function(t){this._outputMax=t,this._setRange()}}),t.Scale.prototype._setRange=function(){this._add.value=this._outputMin,this._scale.value=this._outputMax-this._outputMin},t.Scale.prototype.dispose=function(){return t.prototype.dispose.call(this),this._add.dispose(),this._add=null,this._scale.dispose(),this._scale=null,this},t.Scale}(n,w,A);var k;k=function(){var e=S,i=w,n=A,o=P;t.Signal=function(t){var i=new e(t);return i},e.prototype.fade=e.prototype.linearRampToValueAtTime,n.prototype.fade=e.prototype.fade,i.prototype.fade=e.prototype.fade,o.prototype.fade=e.prototype.fade,e.prototype.setInput=function(t){t.connect(this)},n.prototype.setInput=e.prototype.setInput,i.prototype.setInput=e.prototype.setInput,o.prototype.setInput=e.prototype.setInput,e.prototype.add=function(t){var e=new i(t);return this.connect(e),e},n.prototype.add=e.prototype.add,i.prototype.add=e.prototype.add,o.prototype.add=e.prototype.add,e.prototype.mult=function(t){var e=new n(t);return this.connect(e),e},n.prototype.mult=e.prototype.mult,i.prototype.mult=e.prototype.mult,o.prototype.mult=e.prototype.mult,e.prototype.scale=function(e,i,n,r){var s,a;4===arguments.length?(s=t.prototype.map(n,e,i,0,1)-.5,a=t.prototype.map(r,e,i,0,1)-.5):(s=arguments[0],a=arguments[1]);var u=new o(s,a);return this.connect(u),u},n.prototype.scale=e.prototype.scale,i.prototype.scale=e.prototype.scale,o.prototype.scale=e.prototype.scale}(S,w,A,P);var O;O=function(){var e=a,i=w,n=A,o=P;t.Oscillator=function(i,n){if(\"string\"==typeof i){var o=n;n=i,i=o}if(\"number\"==typeof n){var o=n;n=i,i=o}this.started=!1,this.phaseAmount=void 0,this.oscillator=e.audiocontext.createOscillator(),this.f=i||440,this.oscillator.type=n||\"sine\",this.oscillator.frequency.setValueAtTime(this.f,e.audiocontext.currentTime),this.output=e.audiocontext.createGain(),this._freqMods=[],this.output.gain.value=.5,this.output.gain.setValueAtTime(.5,e.audiocontext.currentTime),this.oscillator.connect(this.output),this.panPosition=0,this.connection=e.input,this.panner=new t.Panner(this.output,this.connection,1),this.mathOps=[this.output],e.soundArray.push(this)},t.Oscillator.prototype.start=function(t,i){if(this.started){var n=e.audiocontext.currentTime;this.stop(n)}if(!this.started){var o=i||this.f,r=this.oscillator.type;this.oscillator&&(this.oscillator.disconnect(),delete this.oscillator),this.oscillator=e.audiocontext.createOscillator(),this.oscillator.frequency.value=Math.abs(o),this.oscillator.type=r,this.oscillator.connect(this.output),t=t||0,this.oscillator.start(t+e.audiocontext.currentTime),this.freqNode=this.oscillator.frequency;for(var s in this._freqMods)\"undefined\"!=typeof this._freqMods[s].connect&&this._freqMods[s].connect(this.oscillator.frequency);this.started=!0}},t.Oscillator.prototype.stop=function(t){if(this.started){var i=t||0,n=e.audiocontext.currentTime;this.oscillator.stop(i+n),this.started=!1}},t.Oscillator.prototype.amp=function(t,i,n){var o=this;if(\"number\"==typeof t){var i=i||0,n=n||0,r=e.audiocontext.currentTime;this.output.gain.linearRampToValueAtTime(t,r+n+i)}else{if(!t)return this.output.gain;t.connect(o.output.gain)}},t.Oscillator.prototype.fade=t.Oscillator.prototype.amp,t.Oscillator.prototype.getAmp=function(){return this.output.gain.value},t.Oscillator.prototype.freq=function(t,i,n){if(\"number\"!=typeof t||isNaN(t)){if(!t)return this.oscillator.frequency;t.output&&(t=t.output),t.connect(this.oscillator.frequency),this._freqMods.push(t)}else{this.f=t;var o=e.audiocontext.currentTime,i=i||0,n=n||0;0===i?this.oscillator.frequency.setValueAtTime(t,n+o):t>0?this.oscillator.frequency.exponentialRampToValueAtTime(t,n+i+o):this.oscillator.frequency.linearRampToValueAtTime(t,n+i+o),this.phaseAmount&&this.phase(this.phaseAmount)}},t.Oscillator.prototype.getFreq=function(){return this.oscillator.frequency.value},t.Oscillator.prototype.setType=function(t){this.oscillator.type=t},t.Oscillator.prototype.getType=function(){return this.oscillator.type},t.Oscillator.prototype.connect=function(t){t?t.hasOwnProperty(\"input\")?(this.panner.connect(t.input),this.connection=t.input):(this.panner.connect(t),this.connection=t):this.panner.connect(e.input)},t.Oscillator.prototype.disconnect=function(){this.output&&this.output.disconnect(),this.panner&&(this.panner.disconnect(),this.output&&this.output.connect(this.panner)),this.oscMods=[]},t.Oscillator.prototype.pan=function(t,e){this.panPosition=t,this.panner.pan(t,e)},t.Oscillator.prototype.getPan=function(){return this.panPosition},t.Oscillator.prototype.dispose=function(){var t=e.soundArray.indexOf(this);if(e.soundArray.splice(t,1),this.oscillator){var i=e.audiocontext.currentTime;this.stop(i),this.disconnect(),this.panner=null,this.oscillator=null}this.osc2&&this.osc2.dispose()},t.Oscillator.prototype.phase=function(i){var n=t.prototype.map(i,0,1,0,1/this.f),o=e.audiocontext.currentTime;this.phaseAmount=i,this.dNode||(this.dNode=e.audiocontext.createDelay(),this.oscillator.disconnect(),this.oscillator.connect(this.dNode),this.dNode.connect(this.output)),this.dNode.delayTime.setValueAtTime(n,o)};var r=function(t,e,i,n,o){var r=t.oscillator;for(var s in t.mathOps)t.mathOps[s]instanceof o&&(r.disconnect(),t.mathOps[s].dispose(),i=s,i<t.mathOps.length-2&&(n=t.mathOps[s+1]));return i===t.mathOps.length-1&&t.mathOps.push(n),s>0&&(r=t.mathOps[s-1]),r.disconnect(),r.connect(e),e.connect(n),t.mathOps[i]=e,t};t.Oscillator.prototype.add=function(t){var e=new i(t),n=this.mathOps.length-1,o=this.output;return r(this,e,n,o,i)},t.Oscillator.prototype.mult=function(t){var e=new n(t),i=this.mathOps.length-1,o=this.output;return r(this,e,i,o,n)},t.Oscillator.prototype.scale=function(e,i,n,s){var a,u;4===arguments.length?(a=t.prototype.map(n,e,i,0,1)-.5,u=t.prototype.map(s,e,i,0,1)-.5):(a=arguments[0],u=arguments[1]);var c=new o(a,u),p=this.mathOps.length-1,h=this.output;return r(this,c,p,h,o)},t.SinOsc=function(e){t.Oscillator.call(this,e,\"sine\")},t.SinOsc.prototype=Object.create(t.Oscillator.prototype),t.TriOsc=function(e){t.Oscillator.call(this,e,\"triangle\")},t.TriOsc.prototype=Object.create(t.Oscillator.prototype),t.SawOsc=function(e){t.Oscillator.call(this,e,\"sawtooth\")},t.SawOsc.prototype=Object.create(t.Oscillator.prototype),t.SqrOsc=function(e){t.Oscillator.call(this,e,\"square\")},t.SqrOsc.prototype=Object.create(t.Oscillator.prototype)}(a,w,A,P);var F;F=function(t){\"use strict\";return t.Timeline=function(){var e=this.optionsObject(arguments,[\"memory\"],t.Timeline.defaults);this._timeline=[],this._toRemove=[],this._iterating=!1,this.memory=e.memory},t.extend(t.Timeline),t.Timeline.defaults={memory:1/0},Object.defineProperty(t.Timeline.prototype,\"length\",{get:function(){return this._timeline.length}}),t.Timeline.prototype.add=function(t){if(this.isUndef(t.time))throw new Error(\"Tone.Timeline: events must have a time attribute\");if(this._timeline.length){var e=this._search(t.time);this._timeline.splice(e+1,0,t)}else this._timeline.push(t);if(this.length>this.memory){var i=this.length-this.memory;this._timeline.splice(0,i)}return this},t.Timeline.prototype.remove=function(t){if(this._iterating)this._toRemove.push(t);else{var e=this._timeline.indexOf(t);-1!==e&&this._timeline.splice(e,1)}return this},t.Timeline.prototype.get=function(t){var e=this._search(t);return-1!==e?this._timeline[e]:null},t.Timeline.prototype.peek=function(){return this._timeline[0]},t.Timeline.prototype.shift=function(){return this._timeline.shift()},t.Timeline.prototype.getAfter=function(t){var e=this._search(t);return e+1<this._timeline.length?this._timeline[e+1]:null},t.Timeline.prototype.getBefore=function(t){var e=this._timeline.length;if(e>0&&this._timeline[e-1].time<t)return this._timeline[e-1];var i=this._search(t);return i-1>=0?this._timeline[i-1]:null},t.Timeline.prototype.cancel=function(t){if(this._timeline.length>1){var e=this._search(t);if(e>=0)if(this._timeline[e].time===t){for(var i=e;i>=0&&this._timeline[i].time===t;i--)e=i;this._timeline=this._timeline.slice(0,e)}else this._timeline=this._timeline.slice(0,e+1);else this._timeline=[]}else 1===this._timeline.length&&this._timeline[0].time>=t&&(this._timeline=[]);return this},t.Timeline.prototype.cancelBefore=function(t){if(this._timeline.length){var e=this._search(t);e>=0&&(this._timeline=this._timeline.slice(e+1))}return this},t.Timeline.prototype._search=function(t){var e=0,i=this._timeline.length,n=i;if(i>0&&this._timeline[i-1].time<=t)return i-1;for(;n>e;){var o=Math.floor(e+(n-e)/2),r=this._timeline[o],s=this._timeline[o+1];if(r.time===t){for(var a=o;a<this._timeline.length;a++){var u=this._timeline[a];u.time===t&&(o=a)}return o}if(r.time<t&&s.time>t)return o;r.time>t?n=o:r.time<t&&(e=o+1)}return-1},t.Timeline.prototype._iterate=function(t,e,i){this._iterating=!0,e=this.defaultArg(e,0),i=this.defaultArg(i,this._timeline.length-1);for(var n=e;i>=n;n++)t(this._timeline[n]);if(this._iterating=!1,this._toRemove.length>0){for(var o=0;o<this._toRemove.length;o++){var r=this._timeline.indexOf(this._toRemove[o]);-1!==r&&this._timeline.splice(r,1)}this._toRemove=[]}},t.Timeline.prototype.forEach=function(t){return this._iterate(t),this},t.Timeline.prototype.forEachBefore=function(t,e){var i=this._search(t);return-1!==i&&this._iterate(e,0,i),this},t.Timeline.prototype.forEachAfter=function(t,e){var i=this._search(t);return this._iterate(e,i+1),this},t.Timeline.prototype.forEachFrom=function(t,e){for(var i=this._search(t);i>=0&&this._timeline[i].time>=t;)i--;return this._iterate(e,i+1),this},t.Timeline.prototype.forEachAtTime=function(t,e){var i=this._search(t);return-1!==i&&this._iterate(function(i){i.time===t&&e(i)},0,i),this},t.Timeline.prototype.dispose=function(){t.prototype.dispose.call(this),this._timeline=null,this._toRemove=null},t.Timeline}(n);var q;q=function(t){\"use strict\";return t.TimelineSignal=function(){var e=this.optionsObject(arguments,[\"value\",\"units\"],t.Signal.defaults);this._events=new t.Timeline(10),t.Signal.apply(this,e),e.param=this._param,t.Param.call(this,e),this._initial=this._fromUnits(this._param.value)},t.extend(t.TimelineSignal,t.Param),t.TimelineSignal.Type={Linear:\"linear\",Exponential:\"exponential\",Target:\"target\",Curve:\"curve\",Set:\"set\"},Object.defineProperty(t.TimelineSignal.prototype,\"value\",{get:function(){var t=this.now(),e=this.getValueAtTime(t);return this._toUnits(e)},set:function(t){var e=this._fromUnits(t);this._initial=e,this.cancelScheduledValues(),this._param.value=e}}),t.TimelineSignal.prototype.setValueAtTime=function(e,i){return e=this._fromUnits(e),i=this.toSeconds(i),this._events.add({type:t.TimelineSignal.Type.Set,value:e,time:i}),this._param.setValueAtTime(e,i),this},t.TimelineSignal.prototype.linearRampToValueAtTime=function(e,i){return e=this._fromUnits(e),i=this.toSeconds(i),this._events.add({type:t.TimelineSignal.Type.Linear,value:e,time:i}),this._param.linearRampToValueAtTime(e,i),this},t.TimelineSignal.prototype.exponentialRampToValueAtTime=function(e,i){i=this.toSeconds(i);var n=this._searchBefore(i);n&&0===n.value&&this.setValueAtTime(this._minOutput,n.time),e=this._fromUnits(e);var o=Math.max(e,this._minOutput);return this._events.add({type:t.TimelineSignal.Type.Exponential,value:o,time:i}),e<this._minOutput?(this._param.exponentialRampToValueAtTime(this._minOutput,i-this.sampleTime),this.setValueAtTime(0,i)):this._param.exponentialRampToValueAtTime(e,i),this},t.TimelineSignal.prototype.setTargetAtTime=function(e,i,n){return e=this._fromUnits(e),e=Math.max(this._minOutput,e),n=Math.max(this._minOutput,n),i=this.toSeconds(i),this._events.add({type:t.TimelineSignal.Type.Target,value:e,time:i,constant:n}),this._param.setTargetAtTime(e,i,n),this},t.TimelineSignal.prototype.setValueCurveAtTime=function(e,i,n,o){o=this.defaultArg(o,1);for(var r=new Array(e.length),s=0;s<r.length;s++)r[s]=this._fromUnits(e[s])*o;i=this.toSeconds(i),n=this.toSeconds(n),this._events.add({type:t.TimelineSignal.Type.Curve,value:r,time:i,duration:n}),this._param.setValueAtTime(r[0],i);for(var a=1;a<r.length;a++){var u=i+a/(r.length-1)*n;this._param.linearRampToValueAtTime(r[a],u)}return this},t.TimelineSignal.prototype.cancelScheduledValues=function(t){return t=this.toSeconds(t),this._events.cancel(t),this._param.cancelScheduledValues(t),this},t.TimelineSignal.prototype.setRampPoint=function(e){e=this.toSeconds(e);var i=this._toUnits(this.getValueAtTime(e)),n=this._searchBefore(e);if(n&&n.time===e)this.cancelScheduledValues(e+this.sampleTime);else if(n&&n.type===t.TimelineSignal.Type.Curve&&n.time+n.duration>e)this.cancelScheduledValues(e),this.linearRampToValueAtTime(i,e);else{var o=this._searchAfter(e);o&&(this.cancelScheduledValues(e),o.type===t.TimelineSignal.Type.Linear?this.linearRampToValueAtTime(i,e):o.type===t.TimelineSignal.Type.Exponential&&this.exponentialRampToValueAtTime(i,e)),this.setValueAtTime(i,e)}return this},t.TimelineSignal.prototype.linearRampToValueBetween=function(t,e,i){return this.setRampPoint(e),this.linearRampToValueAtTime(t,i),this},t.TimelineSignal.prototype.exponentialRampToValueBetween=function(t,e,i){return this.setRampPoint(e),this.exponentialRampToValueAtTime(t,i),this},t.TimelineSignal.prototype._searchBefore=function(t){return this._events.get(t)},t.TimelineSignal.prototype._searchAfter=function(t){return this._events.getAfter(t)},t.TimelineSignal.prototype.getValueAtTime=function(e){e=this.toSeconds(e);var i=this._searchAfter(e),n=this._searchBefore(e),o=this._initial;if(null===n)o=this._initial;else if(n.type===t.TimelineSignal.Type.Target){var r,s=this._events.getBefore(n.time);r=null===s?this._initial:s.value,o=this._exponentialApproach(n.time,r,n.value,n.constant,e)}else o=n.type===t.TimelineSignal.Type.Curve?this._curveInterpolate(n.time,n.value,n.duration,e):null===i?n.value:i.type===t.TimelineSignal.Type.Linear?this._linearInterpolate(n.time,n.value,i.time,i.value,e):i.type===t.TimelineSignal.Type.Exponential?this._exponentialInterpolate(n.time,n.value,i.time,i.value,e):n.value;return o},t.TimelineSignal.prototype.connect=t.SignalBase.prototype.connect,t.TimelineSignal.prototype._exponentialApproach=function(t,e,i,n,o){return i+(e-i)*Math.exp(-(o-t)/n)},t.TimelineSignal.prototype._linearInterpolate=function(t,e,i,n,o){return e+(n-e)*((o-t)/(i-t))},t.TimelineSignal.prototype._exponentialInterpolate=function(t,e,i,n,o){return e=Math.max(this._minOutput,e),e*Math.pow(n/e,(o-t)/(i-t))},t.TimelineSignal.prototype._curveInterpolate=function(t,e,i,n){var o=e.length;if(n>=t+i)return e[o-1];if(t>=n)return e[0];var r=(n-t)/i,s=Math.floor((o-1)*r),a=Math.ceil((o-1)*r),u=e[s],c=e[a];return a===s?u:this._linearInterpolate(s,u,a,c,r*(o-1))},t.TimelineSignal.prototype.dispose=function(){t.Signal.prototype.dispose.call(this),t.Param.prototype.dispose.call(this),this._events.dispose(),this._events=null},t.TimelineSignal}(n,S);var M;M=function(){var e=a,i=w,n=A,o=P,r=q;t.Envelope=function(t,i,n,o,s,a){this.aTime=t||.1,this.aLevel=i||1,this.dTime=n||.5,this.dLevel=o||0,this.rTime=s||0,this.rLevel=a||0,this._rampHighPercentage=.98,this._rampLowPercentage=.02,this.output=e.audiocontext.createGain(),this.control=new r,this._init(),this.control.connect(this.output),this.connection=null,this.mathOps=[this.control],this.isExponential=!1,this.sourceToClear=null,this.wasTriggered=!1,e.soundArray.push(this)},t.Envelope.prototype._init=function(){var t=e.audiocontext.currentTime,i=t;this.control.setTargetAtTime(1e-5,i,.001),this._setRampAD(this.aTime,this.dTime)},t.Envelope.prototype.set=function(t,e,i,n,o,r){this.aTime=t,this.aLevel=e,this.dTime=i||0,this.dLevel=n||0,this.rTime=o||0,this.rLevel=r||0,this._setRampAD(t,i)},t.Envelope.prototype.setADSR=function(t,e,i,n){this.aTime=t,this.dTime=e||0,this.sPercent=i||0,this.dLevel=\"undefined\"!=typeof i?i*(this.aLevel-this.rLevel)+this.rLevel:0,this.rTime=n||0,this._setRampAD(t,e)},t.Envelope.prototype.setRange=function(t,e){this.aLevel=t||1,this.rLevel=e||0},t.Envelope.prototype._setRampAD=function(t,e){this._rampAttackTime=this.checkExpInput(t),this._rampDecayTime=this.checkExpInput(e);var i=1;i=Math.log(1/this.checkExpInput(1-this._rampHighPercentage)),this._rampAttackTC=t/this.checkExpInput(i),i=Math.log(1/this._rampLowPercentage),this._rampDecayTC=e/this.checkExpInput(i)},t.Envelope.prototype.setRampPercentages=function(t,e){this._rampHighPercentage=this.checkExpInput(t),this._rampLowPercentage=this.checkExpInput(e);var i=1;i=Math.log(1/this.checkExpInput(1-this._rampHighPercentage)),this._rampAttackTC=this._rampAttackTime/this.checkExpInput(i),i=Math.log(1/this._rampLowPercentage),this._rampDecayTC=this._rampDecayTime/this.checkExpInput(i)},t.Envelope.prototype.setInput=function(){for(var t=0;t<arguments.length;t++)this.connect(arguments[t])},t.Envelope.prototype.setExp=function(t){this.isExponential=t},t.Envelope.prototype.checkExpInput=function(t){return 0>=t&&(t=1e-8),t},t.Envelope.prototype.play=function(t,e,i){var n=e||0,i=i||0;t&&this.connection!==t&&this.connect(t),this.triggerAttack(t,n),this.triggerRelease(t,n+this.aTime+this.dTime+i)},t.Envelope.prototype.triggerAttack=function(t,i){var n=e.audiocontext.currentTime,o=i||0,r=n+o;this.lastAttack=r,this.wasTriggered=!0,t&&this.connection!==t&&this.connect(t);var s=this.control.getValueAtTime(r);this.isExponential===!0?this.control.exponentialRampToValueAtTime(this.checkExpInput(s),r):this.control.linearRampToValueAtTime(s,r),r+=this.aTime,this.isExponential===!0?(this.control.exponentialRampToValueAtTime(this.checkExpInput(this.aLevel),r),s=this.checkExpInput(this.control.getValueAtTime(r)),this.control.cancelScheduledValues(r),this.control.exponentialRampToValueAtTime(s,r)):(this.control.linearRampToValueAtTime(this.aLevel,r),s=this.control.getValueAtTime(r),this.control.cancelScheduledValues(r),this.control.linearRampToValueAtTime(s,r)),r+=this.dTime,this.isExponential===!0?(this.control.exponentialRampToValueAtTime(this.checkExpInput(this.dLevel),r),s=this.checkExpInput(this.control.getValueAtTime(r)),this.control.cancelScheduledValues(r),this.control.exponentialRampToValueAtTime(s,r)):(this.control.linearRampToValueAtTime(this.dLevel,r),s=this.control.getValueAtTime(r),this.control.cancelScheduledValues(r),this.control.linearRampToValueAtTime(s,r))},t.Envelope.prototype.triggerRelease=function(t,i){if(this.wasTriggered){var n=e.audiocontext.currentTime,o=i||0,r=n+o;t&&this.connection!==t&&this.connect(t);var s=this.control.getValueAtTime(r);this.isExponential===!0?this.control.exponentialRampToValueAtTime(this.checkExpInput(s),r):this.control.linearRampToValueAtTime(s,r),r+=this.rTime,this.isExponential===!0?(this.control.exponentialRampToValueAtTime(this.checkExpInput(this.rLevel),r),s=this.checkExpInput(this.control.getValueAtTime(r)),this.control.cancelScheduledValues(r),this.control.exponentialRampToValueAtTime(s,r)):(this.control.linearRampToValueAtTime(this.rLevel,r),s=this.control.getValueAtTime(r),this.control.cancelScheduledValues(r),this.control.linearRampToValueAtTime(s,r)),this.wasTriggered=!1}},t.Envelope.prototype.ramp=function(t,i,n,o){var r=e.audiocontext.currentTime,s=i||0,a=r+s,u=this.checkExpInput(n),c=\"undefined\"!=typeof o?this.checkExpInput(o):void 0;t&&this.connection!==t&&this.connect(t);var p=this.checkExpInput(this.control.getValueAtTime(a));u>p?(this.control.setTargetAtTime(u,a,this._rampAttackTC),a+=this._rampAttackTime):p>u&&(this.control.setTargetAtTime(u,a,this._rampDecayTC),a+=this._rampDecayTime),void 0!==c&&(c>u?this.control.setTargetAtTime(c,a,this._rampAttackTC):u>c&&this.control.setTargetAtTime(c,a,this._rampDecayTC))},t.Envelope.prototype.connect=function(i){this.connection=i,(i instanceof t.Oscillator||i instanceof t.SoundFile||i instanceof t.AudioIn||i instanceof t.Reverb||i instanceof t.Noise||i instanceof t.Filter||i instanceof t.Delay)&&(i=i.output.gain),i instanceof AudioParam&&i.setValueAtTime(0,e.audiocontext.currentTime),i instanceof t.Signal&&i.setValue(0),this.output.connect(i)},t.Envelope.prototype.disconnect=function(){this.output&&this.output.disconnect()},t.Envelope.prototype.add=function(e){var n=new i(e),o=this.mathOps.length,r=this.output;return t.prototype._mathChain(this,n,o,r,i)},t.Envelope.prototype.mult=function(e){var i=new n(e),o=this.mathOps.length,r=this.output;return t.prototype._mathChain(this,i,o,r,n)},t.Envelope.prototype.scale=function(e,i,n,r){var s=new o(e,i,n,r),a=this.mathOps.length,u=this.output;return t.prototype._mathChain(this,s,a,u,o)},t.Envelope.prototype.dispose=function(){var t=e.soundArray.indexOf(this);e.soundArray.splice(t,1),this.disconnect(),this.control&&(this.control.dispose(),this.control=null);for(var i=1;i<this.mathOps.length;i++)this.mathOps[i].dispose()},t.Env=function(e,i,n,o,r,s){console.warn(\"WARNING: p5.Env is now deprecated and may be removed in future versions. Please use the new p5.Envelope instead.\"),t.Envelope.call(this,e,i,n,o,r,s)},t.Env.prototype=Object.create(t.Envelope.prototype)}(a,w,A,P,q);var E;E=function(){function e(){for(var t=i.audiocontext,e=t.createBuffer(1,2048,t.sampleRate),n=e.getChannelData(0),o=0;2048>o;o++)n[o]=1;var r=t.createBufferSource();return r.buffer=e,r.loop=!0,r}var i=a;t.Pulse=function(n,o){t.Oscillator.call(this,n,\"sawtooth\"),this.w=o||0,this.osc2=new t.SawOsc(n),this.dNode=i.audiocontext.createDelay(),this.dcOffset=e(),this.dcGain=i.audiocontext.createGain(),this.dcOffset.connect(this.dcGain),this.dcGain.connect(this.output),this.f=n||440;var r=this.w/this.oscillator.frequency.value;this.dNode.delayTime.value=r,this.dcGain.gain.value=1.7*(.5-this.w),this.osc2.disconnect(),this.osc2.panner.disconnect(),this.osc2.amp(-1),this.osc2.output.connect(this.dNode),this.dNode.connect(this.output),this.output.gain.value=1,this.output.connect(this.panner)},t.Pulse.prototype=Object.create(t.Oscillator.prototype),t.Pulse.prototype.width=function(e){if(\"number\"==typeof e){if(1>=e&&e>=0){this.w=e;var i=this.w/this.oscillator.frequency.value;this.dNode.delayTime.value=i}this.dcGain.gain.value=1.7*(.5-this.w)}else{e.connect(this.dNode.delayTime);var n=new t.SignalAdd(-.5);n.setInput(e),n=n.mult(-1),n=n.mult(1.7),n.connect(this.dcGain.gain)}},t.Pulse.prototype.start=function(t,n){var o=i.audiocontext.currentTime,r=n||0;if(!this.started){var s=t||this.f,a=this.oscillator.type;this.oscillator=i.audiocontext.createOscillator(),this.oscillator.frequency.setValueAtTime(s,o),this.oscillator.type=a,this.oscillator.connect(this.output),this.oscillator.start(r+o),this.osc2.oscillator=i.audiocontext.createOscillator(),this.osc2.oscillator.frequency.setValueAtTime(s,r+o),this.osc2.oscillator.type=a,this.osc2.oscillator.connect(this.osc2.output),this.osc2.start(r+o),this.freqNode=[this.oscillator.frequency,this.osc2.oscillator.frequency],this.dcOffset=e(),this.dcOffset.connect(this.dcGain),this.dcOffset.start(r+o),void 0!==this.mods&&void 0!==this.mods.frequency&&(this.mods.frequency.connect(this.freqNode[0]),this.mods.frequency.connect(this.freqNode[1])),this.started=!0,this.osc2.started=!0}},t.Pulse.prototype.stop=function(t){if(this.started){var e=t||0,n=i.audiocontext.currentTime;this.oscillator.stop(e+n),this.osc2.oscillator&&this.osc2.oscillator.stop(e+n),this.dcOffset.stop(e+n),this.started=!1,this.osc2.started=!1}},t.Pulse.prototype.freq=function(t,e,n){if(\"number\"==typeof t){this.f=t;var o=i.audiocontext.currentTime,e=e||0,n=n||0,r=this.oscillator.frequency.value;this.oscillator.frequency.cancelScheduledValues(o),this.oscillator.frequency.setValueAtTime(r,o+n),this.oscillator.frequency.exponentialRampToValueAtTime(t,n+e+o),this.osc2.oscillator.frequency.cancelScheduledValues(o),this.osc2.oscillator.frequency.setValueAtTime(r,o+n),this.osc2.oscillator.frequency.exponentialRampToValueAtTime(t,n+e+o),this.freqMod&&(this.freqMod.output.disconnect(),this.freqMod=null)}else t.output&&(t.output.disconnect(),t.output.connect(this.oscillator.frequency),t.output.connect(this.osc2.oscillator.frequency),this.freqMod=t)}}(a,O);var V;V=function(){var e=a;t.Noise=function(e){var r;t.Oscillator.call(this),delete this.f,delete this.freq,delete this.oscillator,r=\"brown\"===e?o:\"pink\"===e?n:i,this.buffer=r},t.Noise.prototype=Object.create(t.Oscillator.prototype);var i=function(){for(var t=2*e.audiocontext.sampleRate,i=e.audiocontext.createBuffer(1,t,e.audiocontext.sampleRate),n=i.getChannelData(0),o=0;t>o;o++)n[o]=2*Math.random()-1;return i.type=\"white\",i}(),n=function(){var t,i,n,o,r,s,a,u=2*e.audiocontext.sampleRate,c=e.audiocontext.createBuffer(1,u,e.audiocontext.sampleRate),p=c.getChannelData(0);t=i=n=o=r=s=a=0;for(var h=0;u>h;h++){var l=2*Math.random()-1;t=.99886*t+.0555179*l,i=.99332*i+.0750759*l,n=.969*n+.153852*l,o=.8665*o+.3104856*l,r=.55*r+.5329522*l,s=-.7616*s-.016898*l,p[h]=t+i+n+o+r+s+a+.5362*l,p[h]*=.11,a=.115926*l}return c.type=\"pink\",c}(),o=function(){for(var t=2*e.audiocontext.sampleRate,i=e.audiocontext.createBuffer(1,t,e.audiocontext.sampleRate),n=i.getChannelData(0),o=0,r=0;t>r;r++){var s=2*Math.random()-1;n[r]=(o+.02*s)/1.02,o=n[r],n[r]*=3.5}return i.type=\"brown\",i}();t.Noise.prototype.setType=function(t){switch(t){case\"white\":this.buffer=i;break;case\"pink\":this.buffer=n;break;case\"brown\":this.buffer=o;break;default:this.buffer=i}if(this.started){var r=e.audiocontext.currentTime;this.stop(r),this.start(r+.01)}},t.Noise.prototype.getType=function(){return this.buffer.type},t.Noise.prototype.start=function(){this.started&&this.stop(),this.noise=e.audiocontext.createBufferSource(),this.noise.buffer=this.buffer,this.noise.loop=!0,this.noise.connect(this.output);var t=e.audiocontext.currentTime;this.noise.start(t),this.started=!0},t.Noise.prototype.stop=function(){var t=e.audiocontext.currentTime;this.noise&&(this.noise.stop(t),this.started=!1)},t.Noise.prototype.dispose=function(){var t=e.audiocontext.currentTime,i=e.soundArray.indexOf(this);e.soundArray.splice(i,1),this.noise&&(this.noise.disconnect(),this.stop(t)),this.output&&this.output.disconnect(),this.panner&&this.panner.disconnect(),this.output=null,this.panner=null,this.buffer=null,this.noise=null}}(a);var R;R=function(){var e=a;e.inputSources=[],t.AudioIn=function(i){this.input=e.audiocontext.createGain(),this.output=e.audiocontext.createGain(),this.stream=null,this.mediaStream=null,this.currentSource=null,this.enabled=!1,this.amplitude=new t.Amplitude,this.output.connect(this.amplitude.input),window.MediaStreamTrack&&window.navigator.mediaDevices&&window.navigator.mediaDevices.getUserMedia||(i?i():window.alert(\"This browser does not support MediaStreamTrack and mediaDevices\")),e.soundArray.push(this)},t.AudioIn.prototype.start=function(t,i){var n=this;this.stream&&this.stop();var o=e.inputSources[n.currentSource],r={audio:{sampleRate:e.audiocontext.sampleRate,echoCancellation:!1}};e.inputSources[this.currentSource]&&(r.audio.deviceId=o.deviceId),window.navigator.mediaDevices.getUserMedia(r).then(function(i){n.stream=i,n.enabled=!0,n.mediaStream=e.audiocontext.createMediaStreamSource(i),n.mediaStream.connect(n.output),n.amplitude.setInput(n.output),t&&t()})[\"catch\"](function(t){i?i(t):console.error(t)})},t.AudioIn.prototype.stop=function(){this.stream&&(this.stream.getTracks().forEach(function(t){t.stop()}),this.mediaStream.disconnect(),delete this.mediaStream,delete this.stream)},t.AudioIn.prototype.connect=function(t){t?t.hasOwnProperty(\"input\")?this.output.connect(t.input):t.hasOwnProperty(\"analyser\")?this.output.connect(t.analyser):this.output.connect(t):this.output.connect(e.input)},t.AudioIn.prototype.disconnect=function(){this.output&&(this.output.disconnect(),this.output.connect(this.amplitude.input))},t.AudioIn.prototype.getLevel=function(t){return t&&(this.amplitude.smoothing=t),this.amplitude.getLevel()},t.AudioIn.prototype.amp=function(t,i){if(i){var n=i||0,o=this.output.gain.value;this.output.gain.cancelScheduledValues(e.audiocontext.currentTime),this.output.gain.setValueAtTime(o,e.audiocontext.currentTime),this.output.gain.linearRampToValueAtTime(t,n+e.audiocontext.currentTime)}else this.output.gain.cancelScheduledValues(e.audiocontext.currentTime),this.output.gain.setValueAtTime(t,e.audiocontext.currentTime)},t.AudioIn.prototype.getSources=function(t,i){return new Promise(function(n,o){window.navigator.mediaDevices.enumerateDevices().then(function(i){e.inputSources=i.filter(function(t){return\"audioinput\"===t.kind}),n(e.inputSources),t&&t(e.inputSources)})[\"catch\"](function(t){o(t),i?i(t):console.error(\"This browser does not support MediaStreamTrack.getSources()\")})})},t.AudioIn.prototype.setSource=function(t){e.inputSources.length>0&&t<e.inputSources.length?(this.currentSource=t,console.log(\"set source to \",e.inputSources[this.currentSource])):console.log(\"unable to set input source\"),this.stream&&this.stream.active&&this.start()},t.AudioIn.prototype.dispose=function(){var t=e.soundArray.indexOf(this);e.soundArray.splice(t,1),this.stop(),this.output&&this.output.disconnect(),this.amplitude&&this.amplitude.disconnect(),delete this.amplitude,delete this.output}}(a);var C;C=function(t){\"use strict\";return t.Negate=function(){this._multiply=this.input=this.output=new t.Multiply(-1)},t.extend(t.Negate,t.SignalBase),t.Negate.prototype.dispose=function(){return t.prototype.dispose.call(this),this._multiply.dispose(),this._multiply=null,this},t.Negate}(n,A);var D;D=function(t){\"use strict\";return t.Subtract=function(e){this.createInsOuts(2,0),this._sum=this.input[0]=this.output=new t.Gain,this._neg=new t.Negate,this._param=this.input[1]=new t.Signal(e),this._param.chain(this._neg,this._sum)},t.extend(t.Subtract,t.Signal),t.Subtract.prototype.dispose=function(){return t.prototype.dispose.call(this),this._neg.dispose(),this._neg=null,this._sum.disconnect(),this._sum=null,this._param.dispose(),this._param=null,this},t.Subtract}(n,w,C,S);var N;N=function(t){\"use strict\";return t.GreaterThanZero=function(){this._thresh=this.output=new t.WaveShaper(function(t){return 0>=t?0:1},127),this._scale=this.input=new t.Multiply(1e4),this._scale.connect(this._thresh)},t.extend(t.GreaterThanZero,t.SignalBase),t.GreaterThanZero.prototype.dispose=function(){return t.prototype.dispose.call(this),this._scale.dispose(),this._scale=null,this._thresh.dispose(),this._thresh=null,this},t.GreaterThanZero}(n,S,A);var B;B=function(t){\"use strict\";return t.GreaterThan=function(e){this.createInsOuts(2,0),this._param=this.input[0]=new t.Subtract(e),this.input[1]=this._param.input[1],this._gtz=this.output=new t.GreaterThanZero,this._param.connect(this._gtz)},t.extend(t.GreaterThan,t.Signal),t.GreaterThan.prototype.dispose=function(){return t.prototype.dispose.call(this),this._param.dispose(),this._param=null,this._gtz.dispose(),this._gtz=null,this},t.GreaterThan}(n,N,D);var U;U=function(t){\"use strict\";return t.Abs=function(){this._abs=this.input=this.output=new t.WaveShaper(function(t){return 0===t?0:Math.abs(t)},127)},t.extend(t.Abs,t.SignalBase),t.Abs.prototype.dispose=function(){return t.prototype.dispose.call(this),this._abs.dispose(),this._abs=null,this},t.Abs}(n,m);var I;I=function(t){\"use strict\";return t.Modulo=function(e){this.createInsOuts(1,0),this._shaper=new t.WaveShaper(Math.pow(2,16)),this._multiply=new t.Multiply,this._subtract=this.output=new t.Subtract,this._modSignal=new t.Signal(e),this.input.fan(this._shaper,this._subtract),this._modSignal.connect(this._multiply,0,0),this._shaper.connect(this._multiply,0,1),this._multiply.connect(this._subtract,0,1),this._setWaveShaper(e)},t.extend(t.Modulo,t.SignalBase),t.Modulo.prototype._setWaveShaper=function(t){this._shaper.setMap(function(e){var i=Math.floor((e+1e-4)/t);return i;\n})},Object.defineProperty(t.Modulo.prototype,\"value\",{get:function(){return this._modSignal.value},set:function(t){this._modSignal.value=t,this._setWaveShaper(t)}}),t.Modulo.prototype.dispose=function(){return t.prototype.dispose.call(this),this._shaper.dispose(),this._shaper=null,this._multiply.dispose(),this._multiply=null,this._subtract.dispose(),this._subtract=null,this._modSignal.dispose(),this._modSignal=null,this},t.Modulo}(n,m,A);var G;G=function(t){\"use strict\";return t.Pow=function(e){this._exp=this.defaultArg(e,1),this._expScaler=this.input=this.output=new t.WaveShaper(this._expFunc(this._exp),8192)},t.extend(t.Pow,t.SignalBase),Object.defineProperty(t.Pow.prototype,\"value\",{get:function(){return this._exp},set:function(t){this._exp=t,this._expScaler.setMap(this._expFunc(this._exp))}}),t.Pow.prototype._expFunc=function(t){return function(e){return Math.pow(Math.abs(e),t)}},t.Pow.prototype.dispose=function(){return t.prototype.dispose.call(this),this._expScaler.dispose(),this._expScaler=null,this},t.Pow}(n);var L;L=function(t){\"use strict\";return t.AudioToGain=function(){this._norm=this.input=this.output=new t.WaveShaper(function(t){return(t+1)/2})},t.extend(t.AudioToGain,t.SignalBase),t.AudioToGain.prototype.dispose=function(){return t.prototype.dispose.call(this),this._norm.dispose(),this._norm=null,this},t.AudioToGain}(n,m);var j;j=function(t){\"use strict\";function e(t,e,i){var n=new t;return i._eval(e[0]).connect(n,0,0),i._eval(e[1]).connect(n,0,1),n}function i(t,e,i){var n=new t;return i._eval(e[0]).connect(n,0,0),n}function n(t){return t?parseFloat(t):void 0}function o(t){return t&&t.args?parseFloat(t.args):void 0}return t.Expr=function(){var t=this._replacements(Array.prototype.slice.call(arguments)),e=this._parseInputs(t);this._nodes=[],this.input=new Array(e);for(var i=0;e>i;i++)this.input[i]=this.context.createGain();var n,o=this._parseTree(t);try{n=this._eval(o)}catch(r){throw this._disposeNodes(),new Error(\"Tone.Expr: Could evaluate expression: \"+t)}this.output=n},t.extend(t.Expr,t.SignalBase),t.Expr._Expressions={value:{signal:{regexp:/^\\d+\\.\\d+|^\\d+/,method:function(e){var i=new t.Signal(n(e));return i}},input:{regexp:/^\\$\\d/,method:function(t,e){return e.input[n(t.substr(1))]}}},glue:{\"(\":{regexp:/^\\(/},\")\":{regexp:/^\\)/},\",\":{regexp:/^,/}},func:{abs:{regexp:/^abs/,method:i.bind(this,t.Abs)},mod:{regexp:/^mod/,method:function(e,i){var n=o(e[1]),r=new t.Modulo(n);return i._eval(e[0]).connect(r),r}},pow:{regexp:/^pow/,method:function(e,i){var n=o(e[1]),r=new t.Pow(n);return i._eval(e[0]).connect(r),r}},a2g:{regexp:/^a2g/,method:function(e,i){var n=new t.AudioToGain;return i._eval(e[0]).connect(n),n}}},binary:{\"+\":{regexp:/^\\+/,precedence:1,method:e.bind(this,t.Add)},\"-\":{regexp:/^\\-/,precedence:1,method:function(n,o){return 1===n.length?i(t.Negate,n,o):e(t.Subtract,n,o)}},\"*\":{regexp:/^\\*/,precedence:0,method:e.bind(this,t.Multiply)}},unary:{\"-\":{regexp:/^\\-/,method:i.bind(this,t.Negate)},\"!\":{regexp:/^\\!/,method:i.bind(this,t.NOT)}}},t.Expr.prototype._parseInputs=function(t){var e=t.match(/\\$\\d/g),i=0;if(null!==e)for(var n=0;n<e.length;n++){var o=parseInt(e[n].substr(1))+1;i=Math.max(i,o)}return i},t.Expr.prototype._replacements=function(t){for(var e=t.shift(),i=0;i<t.length;i++)e=e.replace(/\\%/i,t[i]);return e},t.Expr.prototype._tokenize=function(e){function i(e){for(var i in t.Expr._Expressions){var n=t.Expr._Expressions[i];for(var o in n){var r=n[o],s=r.regexp,a=e.match(s);if(null!==a)return{type:i,value:a[0],method:r.method}}}throw new SyntaxError(\"Tone.Expr: Unexpected token \"+e)}for(var n=-1,o=[];e.length>0;){e=e.trim();var r=i(e);o.push(r),e=e.substr(r.value.length)}return{next:function(){return o[++n]},peek:function(){return o[n+1]}}},t.Expr.prototype._parseTree=function(e){function i(t,e){return!p(t)&&\"glue\"===t.type&&t.value===e}function n(e,i,n){var o=!1,r=t.Expr._Expressions[i];if(!p(e))for(var s in r){var a=r[s];if(a.regexp.test(e.value)){if(p(n))return!0;if(a.precedence===n)return!0}}return o}function o(t){p(t)&&(t=5);var e;e=0>t?r():o(t-1);for(var i=c.peek();n(i,\"binary\",t);)i=c.next(),e={operator:i.value,method:i.method,args:[e,o(t-1)]},i=c.peek();return e}function r(){var t,e;return t=c.peek(),n(t,\"unary\")?(t=c.next(),e=r(),{operator:t.value,method:t.method,args:[e]}):s()}function s(){var t,e;if(t=c.peek(),p(t))throw new SyntaxError(\"Tone.Expr: Unexpected termination of expression\");if(\"func\"===t.type)return t=c.next(),a(t);if(\"value\"===t.type)return t=c.next(),{method:t.method,args:t.value};if(i(t,\"(\")){if(c.next(),e=o(),t=c.next(),!i(t,\")\"))throw new SyntaxError(\"Expected )\");return e}throw new SyntaxError(\"Tone.Expr: Parse error, cannot process token \"+t.value)}function a(t){var e,n=[];if(e=c.next(),!i(e,\"(\"))throw new SyntaxError('Tone.Expr: Expected ( in a function call \"'+t.value+'\"');if(e=c.peek(),i(e,\")\")||(n=u()),e=c.next(),!i(e,\")\"))throw new SyntaxError('Tone.Expr: Expected ) in a function call \"'+t.value+'\"');return{method:t.method,args:n,name:name}}function u(){for(var t,e,n=[];;){if(e=o(),p(e))break;if(n.push(e),t=c.peek(),!i(t,\",\"))break;c.next()}return n}var c=this._tokenize(e),p=this.isUndef.bind(this);return o()},t.Expr.prototype._eval=function(t){if(!this.isUndef(t)){var e=t.method(t.args,this);return this._nodes.push(e),e}},t.Expr.prototype._disposeNodes=function(){for(var t=0;t<this._nodes.length;t++){var e=this._nodes[t];this.isFunction(e.dispose)?e.dispose():this.isFunction(e.disconnect)&&e.disconnect(),e=null,this._nodes[t]=null}this._nodes=null},t.Expr.prototype.dispose=function(){t.prototype.dispose.call(this),this._disposeNodes()},t.Expr}(n,w,D,A,B,N,U,C,I,G);var Z;Z=function(t){\"use strict\";return t.EqualPowerGain=function(){this._eqPower=this.input=this.output=new t.WaveShaper(function(t){return Math.abs(t)<.001?0:this.equalPowerScale(t)}.bind(this),4096)},t.extend(t.EqualPowerGain,t.SignalBase),t.EqualPowerGain.prototype.dispose=function(){return t.prototype.dispose.call(this),this._eqPower.dispose(),this._eqPower=null,this},t.EqualPowerGain}(n);var X;X=function(t){\"use strict\";return t.CrossFade=function(e){this.createInsOuts(2,1),this.a=this.input[0]=new t.Gain,this.b=this.input[1]=new t.Gain,this.fade=new t.Signal(this.defaultArg(e,.5),t.Type.NormalRange),this._equalPowerA=new t.EqualPowerGain,this._equalPowerB=new t.EqualPowerGain,this._invert=new t.Expr(\"1 - $0\"),this.a.connect(this.output),this.b.connect(this.output),this.fade.chain(this._equalPowerB,this.b.gain),this.fade.chain(this._invert,this._equalPowerA,this.a.gain),this._readOnly(\"fade\")},t.extend(t.CrossFade),t.CrossFade.prototype.dispose=function(){return t.prototype.dispose.call(this),this._writable(\"fade\"),this._equalPowerA.dispose(),this._equalPowerA=null,this._equalPowerB.dispose(),this._equalPowerB=null,this.fade.dispose(),this.fade=null,this._invert.dispose(),this._invert=null,this.a.dispose(),this.a=null,this.b.dispose(),this.b=null,this},t.CrossFade}(n,S,j,Z);var Y;Y=function(){var e=a,i=X;return t.Effect=function(){this.ac=e.audiocontext,this.input=this.ac.createGain(),this.output=this.ac.createGain(),this._drywet=new i(1),this.wet=this.ac.createGain(),this.input.connect(this._drywet.a),this.wet.connect(this._drywet.b),this._drywet.connect(this.output),this.connect(),e.soundArray.push(this)},t.Effect.prototype.amp=function(t,i,n){var i=i||0,n=n||0,o=e.audiocontext.currentTime,r=this.output.gain.value;this.output.gain.cancelScheduledValues(o),this.output.gain.linearRampToValueAtTime(r,o+n+.001),this.output.gain.linearRampToValueAtTime(t,o+n+i+.001)},t.Effect.prototype.chain=function(){if(arguments.length>0){this.connect(arguments[0]);for(var t=1;t<arguments.length;t+=1)arguments[t-1].connect(arguments[t])}return this},t.Effect.prototype.drywet=function(t){return\"undefined\"!=typeof t&&(this._drywet.fade.value=t),this._drywet.fade.value},t.Effect.prototype.connect=function(e){var i=e||t.soundOut.input;this.output.connect(i.input?i.input:i)},t.Effect.prototype.disconnect=function(){this.output&&this.output.disconnect()},t.Effect.prototype.dispose=function(){var t=e.soundArray.indexOf(this);e.soundArray.splice(t,1),this.input&&(this.input.disconnect(),delete this.input),this.output&&(this.output.disconnect(),delete this.output),this._drywet&&(this._drywet.disconnect(),delete this._drywet),this.wet&&(this.wet.disconnect(),delete this.wet),this.ac=void 0},t.Effect}(a,X);var z;z=function(){var e=Y;return t.Filter=function(t){e.call(this),this.biquad=this.ac.createBiquadFilter(),this.input.connect(this.biquad),this.biquad.connect(this.wet),t&&this.setType(t),this._on=!0,this._untoggledType=this.biquad.type},t.Filter.prototype=Object.create(e.prototype),t.Filter.prototype.process=function(t,e,i,n){t.connect(this.input),this.set(e,i,n)},t.Filter.prototype.set=function(t,e,i){t&&this.freq(t,i),e&&this.res(e,i)},t.Filter.prototype.freq=function(t,e){var i=e||0;return 0>=t&&(t=1),\"number\"==typeof t?(this.biquad.frequency.cancelScheduledValues(this.ac.currentTime+.01+i),this.biquad.frequency.exponentialRampToValueAtTime(t,this.ac.currentTime+.02+i)):t&&t.connect(this.biquad.frequency),this.biquad.frequency.value},t.Filter.prototype.res=function(t,e){var i=e||0;return\"number\"==typeof t?(this.biquad.Q.value=t,this.biquad.Q.cancelScheduledValues(this.ac.currentTime+.01+i),this.biquad.Q.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):t&&t.connect(this.biquad.Q),this.biquad.Q.value},t.Filter.prototype.gain=function(t,e){var i=e||0;return\"number\"==typeof t?(this.biquad.gain.value=t,this.biquad.gain.cancelScheduledValues(this.ac.currentTime+.01+i),this.biquad.gain.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):t&&t.connect(this.biquad.gain),this.biquad.gain.value},t.Filter.prototype.toggle=function(){return this._on=!this._on,this._on===!0?this.biquad.type=this._untoggledType:this._on===!1&&(this.biquad.type=\"allpass\"),this._on},t.Filter.prototype.setType=function(t){this.biquad.type=t,this._untoggledType=this.biquad.type},t.Filter.prototype.dispose=function(){e.prototype.dispose.apply(this),this.biquad&&(this.biquad.disconnect(),delete this.biquad)},t.LowPass=function(){t.Filter.call(this,\"lowpass\")},t.LowPass.prototype=Object.create(t.Filter.prototype),t.HighPass=function(){t.Filter.call(this,\"highpass\")},t.HighPass.prototype=Object.create(t.Filter.prototype),t.BandPass=function(){t.Filter.call(this,\"bandpass\")},t.BandPass.prototype=Object.create(t.Filter.prototype),t.Filter}(a,Y);var W;W=function(){var e=z,i=a,n=function(t,i){e.call(this,\"peaking\"),this.disconnect(),this.set(t,i),this.biquad.gain.value=0,delete this.input,delete this.output,delete this._drywet,delete this.wet};return n.prototype=Object.create(e.prototype),n.prototype.amp=function(){console.warn(\"`amp()` is not available for p5.EQ bands. Use `.gain()`\")},n.prototype.drywet=function(){console.warn(\"`drywet()` is not available for p5.EQ bands.\")},n.prototype.connect=function(e){var i=e||t.soundOut.input;this.biquad?this.biquad.connect(i.input?i.input:i):this.output.connect(i.input?i.input:i)},n.prototype.disconnect=function(){this.biquad&&this.biquad.disconnect()},n.prototype.dispose=function(){var t=i.soundArray.indexOf(this);i.soundArray.splice(t,1),this.disconnect(),delete this.biquad},n}(z,a);var Q;Q=function(){var e=Y,i=W;return t.EQ=function(t){e.call(this),t=3===t||8===t?t:3;var i;i=3===t?Math.pow(2,3):2,this.bands=[];for(var n,o,r=0;t>r;r++)r===t-1?(n=21e3,o=.01):0===r?(n=100,o=.1):1===r?(n=3===t?360*i:360,o=1):(n=this.bands[r-1].freq()*i,o=1),this.bands[r]=this._newBand(n,o),r>0?this.bands[r-1].connect(this.bands[r].biquad):this.input.connect(this.bands[r].biquad);this.bands[t-1].connect(this.output)},t.EQ.prototype=Object.create(e.prototype),t.EQ.prototype.process=function(t){t.connect(this.input)},t.EQ.prototype.set=function(){if(arguments.length===2*this.bands.length)for(var t=0;t<arguments.length;t+=2)this.bands[t/2].freq(arguments[t]),this.bands[t/2].gain(arguments[t+1]);else console.error(\"Argument mismatch. .set() should be called with \"+2*this.bands.length+\" arguments. (one frequency and gain value pair for each band of the eq)\")},t.EQ.prototype._newBand=function(t,e){return new i(t,e)},t.EQ.prototype.dispose=function(){if(e.prototype.dispose.apply(this),this.bands){for(;this.bands.length>0;)delete this.bands.pop().dispose();delete this.bands}},t.EQ}(Y,W);var H;H=function(){var e=Y;return t.Panner3D=function(){e.call(this),this.panner=this.ac.createPanner(),this.panner.panningModel=\"HRTF\",this.panner.distanceModel=\"linear\",this.panner.connect(this.output),this.input.connect(this.panner)},t.Panner3D.prototype=Object.create(e.prototype),t.Panner3D.prototype.process=function(t){t.connect(this.input)},t.Panner3D.prototype.set=function(t,e,i,n){return this.positionX(t,n),this.positionY(e,n),this.positionZ(i,n),[this.panner.positionX.value,this.panner.positionY.value,this.panner.positionZ.value]},t.Panner3D.prototype.positionX=function(t,e){var i=e||0;return\"number\"==typeof t?(this.panner.positionX.value=t,this.panner.positionX.cancelScheduledValues(this.ac.currentTime+.01+i),this.panner.positionX.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):t&&t.connect(this.panner.positionX),this.panner.positionX.value},t.Panner3D.prototype.positionY=function(t,e){var i=e||0;return\"number\"==typeof t?(this.panner.positionY.value=t,this.panner.positionY.cancelScheduledValues(this.ac.currentTime+.01+i),this.panner.positionY.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):t&&t.connect(this.panner.positionY),this.panner.positionY.value},t.Panner3D.prototype.positionZ=function(t,e){var i=e||0;return\"number\"==typeof t?(this.panner.positionZ.value=t,this.panner.positionZ.cancelScheduledValues(this.ac.currentTime+.01+i),this.panner.positionZ.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):t&&t.connect(this.panner.positionZ),this.panner.positionZ.value},t.Panner3D.prototype.orient=function(t,e,i,n){return this.orientX(t,n),this.orientY(e,n),this.orientZ(i,n),[this.panner.orientationX.value,this.panner.orientationY.value,this.panner.orientationZ.value]},t.Panner3D.prototype.orientX=function(t,e){var i=e||0;return\"number\"==typeof t?(this.panner.orientationX.value=t,this.panner.orientationX.cancelScheduledValues(this.ac.currentTime+.01+i),this.panner.orientationX.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):t&&t.connect(this.panner.orientationX),this.panner.orientationX.value},t.Panner3D.prototype.orientY=function(t,e){var i=e||0;return\"number\"==typeof t?(this.panner.orientationY.value=t,this.panner.orientationY.cancelScheduledValues(this.ac.currentTime+.01+i),this.panner.orientationY.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):t&&t.connect(this.panner.orientationY),this.panner.orientationY.value},t.Panner3D.prototype.orientZ=function(t,e){var i=e||0;return\"number\"==typeof t?(this.panner.orientationZ.value=t,this.panner.orientationZ.cancelScheduledValues(this.ac.currentTime+.01+i),this.panner.orientationZ.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):t&&t.connect(this.panner.orientationZ),this.panner.orientationZ.value},t.Panner3D.prototype.setFalloff=function(t,e){this.maxDist(t),this.rolloff(e)},t.Panner3D.prototype.maxDist=function(t){return\"number\"==typeof t&&(this.panner.maxDistance=t),this.panner.maxDistance},t.Panner3D.prototype.rolloff=function(t){return\"number\"==typeof t&&(this.panner.rolloffFactor=t),this.panner.rolloffFactor},t.Panner3D.dispose=function(){e.prototype.dispose.apply(this),this.panner&&(this.panner.disconnect(),delete this.panner)},t.Panner3D}(a,Y);var $;$=function(){var e=a;return t.Listener3D=function(t){this.ac=e.audiocontext,this.listener=this.ac.listener},t.Listener3D.prototype.process=function(t){t.connect(this.input)},t.Listener3D.prototype.position=function(t,e,i,n){return this.positionX(t,n),this.positionY(e,n),this.positionZ(i,n),[this.listener.positionX.value,this.listener.positionY.value,this.listener.positionZ.value]},t.Listener3D.prototype.positionX=function(t,e){var i=e||0;return\"number\"==typeof t?(this.listener.positionX.value=t,this.listener.positionX.cancelScheduledValues(this.ac.currentTime+.01+i),this.listener.positionX.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):t&&t.connect(this.listener.positionX),this.listener.positionX.value},t.Listener3D.prototype.positionY=function(t,e){var i=e||0;return\"number\"==typeof t?(this.listener.positionY.value=t,this.listener.positionY.cancelScheduledValues(this.ac.currentTime+.01+i),this.listener.positionY.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):t&&t.connect(this.listener.positionY),this.listener.positionY.value},t.Listener3D.prototype.positionZ=function(t,e){var i=e||0;return\"number\"==typeof t?(this.listener.positionZ.value=t,this.listener.positionZ.cancelScheduledValues(this.ac.currentTime+.01+i),this.listener.positionZ.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):t&&t.connect(this.listener.positionZ),this.listener.positionZ.value},t.Listener3D.prototype.orient=function(t,e,i,n,o,r,s){return 3===arguments.length||4===arguments.length?(s=arguments[3],this.orientForward(t,e,i,s)):(6===arguments.length||7===arguments)&&(this.orientForward(t,e,i),this.orientUp(n,o,r,s)),[this.listener.forwardX.value,this.listener.forwardY.value,this.listener.forwardZ.value,this.listener.upX.value,this.listener.upY.value,this.listener.upZ.value]},t.Listener3D.prototype.orientForward=function(t,e,i,n){return this.forwardX(t,n),this.forwardY(e,n),this.forwardZ(i,n),[this.listener.forwardX,this.listener.forwardY,this.listener.forwardZ]},t.Listener3D.prototype.orientUp=function(t,e,i,n){return this.upX(t,n),this.upY(e,n),this.upZ(i,n),[this.listener.upX,this.listener.upY,this.listener.upZ]},t.Listener3D.prototype.forwardX=function(t,e){var i=e||0;return\"number\"==typeof t?(this.listener.forwardX.value=t,this.listener.forwardX.cancelScheduledValues(this.ac.currentTime+.01+i),this.listener.forwardX.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):t&&t.connect(this.listener.forwardX),this.listener.forwardX.value},t.Listener3D.prototype.forwardY=function(t,e){var i=e||0;return\"number\"==typeof t?(this.listener.forwardY.value=t,this.listener.forwardY.cancelScheduledValues(this.ac.currentTime+.01+i),this.listener.forwardY.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):t&&t.connect(this.listener.forwardY),this.listener.forwardY.value},t.Listener3D.prototype.forwardZ=function(t,e){var i=e||0;return\"number\"==typeof t?(this.listener.forwardZ.value=t,this.listener.forwardZ.cancelScheduledValues(this.ac.currentTime+.01+i),this.listener.forwardZ.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):t&&t.connect(this.listener.forwardZ),this.listener.forwardZ.value},t.Listener3D.prototype.upX=function(t,e){var i=e||0;return\"number\"==typeof t?(this.listener.upX.value=t,this.listener.upX.cancelScheduledValues(this.ac.currentTime+.01+i),this.listener.upX.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):t&&t.connect(this.listener.upX),this.listener.upX.value},t.Listener3D.prototype.upY=function(t,e){var i=e||0;return\"number\"==typeof t?(this.listener.upY.value=t,this.listener.upY.cancelScheduledValues(this.ac.currentTime+.01+i),this.listener.upY.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):t&&t.connect(this.listener.upY),this.listener.upY.value},t.Listener3D.prototype.upZ=function(t,e){var i=e||0;return\"number\"==typeof t?(this.listener.upZ.value=t,this.listener.upZ.cancelScheduledValues(this.ac.currentTime+.01+i),this.listener.upZ.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):t&&t.connect(this.listener.upZ),this.listener.upZ.value},t.Listener3D}(a,Y);var J;J=function(){var e=z,i=Y;t.Delay=function(){i.call(this),this._split=this.ac.createChannelSplitter(2),this._merge=this.ac.createChannelMerger(2),this._leftGain=this.ac.createGain(),this._rightGain=this.ac.createGain(),this.leftDelay=this.ac.createDelay(),this.rightDelay=this.ac.createDelay(),this._leftFilter=new e,this._rightFilter=new e,this._leftFilter.disconnect(),this._rightFilter.disconnect(),this._leftFilter.biquad.frequency.setValueAtTime(1200,this.ac.currentTime),this._rightFilter.biquad.frequency.setValueAtTime(1200,this.ac.currentTime),this._leftFilter.biquad.Q.setValueAtTime(.3,this.ac.currentTime),this._rightFilter.biquad.Q.setValueAtTime(.3,this.ac.currentTime),this.input.connect(this._split),this.leftDelay.connect(this._leftGain),this.rightDelay.connect(this._rightGain),this._leftGain.connect(this._leftFilter.input),this._rightGain.connect(this._rightFilter.input),this._merge.connect(this.wet),this._leftFilter.biquad.gain.setValueAtTime(1,this.ac.currentTime),this._rightFilter.biquad.gain.setValueAtTime(1,this.ac.currentTime),this.setType(0),this._maxDelay=this.leftDelay.delayTime.maxValue,this.feedback(.5)},t.Delay.prototype=Object.create(i.prototype),t.Delay.prototype.process=function(t,e,i,n){var o=i||0,r=e||0;if(o>=1)throw new Error(\"Feedback value will force a positive feedback loop.\");if(r>=this._maxDelay)throw new Error(\"Delay Time exceeds maximum delay time of \"+this._maxDelay+\" second.\");t.connect(this.input),this.leftDelay.delayTime.setValueAtTime(r,this.ac.currentTime),this.rightDelay.delayTime.setValueAtTime(r,this.ac.currentTime),this._leftGain.gain.value=o,this._rightGain.gain.value=o,n&&(this._leftFilter.freq(n),this._rightFilter.freq(n))},t.Delay.prototype.delayTime=function(t){\"number\"!=typeof t?(t.connect(this.leftDelay.delayTime),t.connect(this.rightDelay.delayTime)):(this.leftDelay.delayTime.cancelScheduledValues(this.ac.currentTime),this.rightDelay.delayTime.cancelScheduledValues(this.ac.currentTime),this.leftDelay.delayTime.linearRampToValueAtTime(t,this.ac.currentTime),this.rightDelay.delayTime.linearRampToValueAtTime(t,this.ac.currentTime))},t.Delay.prototype.feedback=function(t){if(t&&\"number\"!=typeof t)t.connect(this._leftGain.gain),t.connect(this._rightGain.gain);else{if(t>=1)throw new Error(\"Feedback value will force a positive feedback loop.\");\"number\"==typeof t&&(this._leftGain.gain.value=t,this._rightGain.gain.value=t)}return this._leftGain.gain.value},t.Delay.prototype.filter=function(t,e){this._leftFilter.set(t,e),this._rightFilter.set(t,e)},t.Delay.prototype.setType=function(t){switch(1===t&&(t=\"pingPong\"),this._split.disconnect(),this._leftFilter.disconnect(),this._rightFilter.disconnect(),this._split.connect(this.leftDelay,0),this._split.connect(this.rightDelay,1),t){case\"pingPong\":this._rightFilter.setType(this._leftFilter.biquad.type),this._leftFilter.output.connect(this._merge,0,0),this._rightFilter.output.connect(this._merge,0,1),this._leftFilter.output.connect(this.rightDelay),this._rightFilter.output.connect(this.leftDelay);break;default:this._leftFilter.output.connect(this._merge,0,0),this._rightFilter.output.connect(this._merge,0,1),this._leftFilter.output.connect(this.leftDelay),this._rightFilter.output.connect(this.rightDelay)}},t.Delay.prototype.dispose=function(){i.prototype.dispose.apply(this),this._split.disconnect(),this._leftFilter.dispose(),this._rightFilter.dispose(),this._merge.disconnect(),this._leftGain.disconnect(),this._rightGain.disconnect(),this.leftDelay.disconnect(),this.rightDelay.disconnect(),this._split=void 0,this._leftFilter=void 0,this._rightFilter=void 0,this._merge=void 0,this._leftGain=void 0,this._rightGain=void 0,this.leftDelay=void 0,this.rightDelay=void 0}}(z,Y);var K;K=function(){var e=c,i=Y;t.Reverb=function(){i.call(this),this._initConvolverNode(),this.input.gain.value=.5,this._seconds=3,this._decay=2,this._reverse=!1,this._buildImpulse()},t.Reverb.prototype=Object.create(i.prototype),t.Reverb.prototype._initConvolverNode=function(){this.convolverNode=this.ac.createConvolver(),this.input.connect(this.convolverNode),this.convolverNode.connect(this.wet)},t.Reverb.prototype._teardownConvolverNode=function(){this.convolverNode&&(this.convolverNode.disconnect(),delete this.convolverNode)},t.Reverb.prototype._setBuffer=function(t){this._teardownConvolverNode(),this._initConvolverNode(),this.convolverNode.buffer=t},t.Reverb.prototype.process=function(t,e,i,n){t.connect(this.input);var o=!1;e&&(this._seconds=e,o=!0),i&&(this._decay=i),n&&(this._reverse=n),o&&this._buildImpulse()},t.Reverb.prototype.set=function(t,e,i){var n=!1;t&&(this._seconds=t,n=!0),e&&(this._decay=e),i&&(this._reverse=i),n&&this._buildImpulse()},t.Reverb.prototype._buildImpulse=function(){var t,e,i=this.ac.sampleRate,n=i*this._seconds,o=this._decay,r=this.ac.createBuffer(2,n,i),s=r.getChannelData(0),a=r.getChannelData(1);for(e=0;n>e;e++)t=this._reverse?n-e:e,s[e]=(2*Math.random()-1)*Math.pow(1-t/n,o),a[e]=(2*Math.random()-1)*Math.pow(1-t/n,o);this._setBuffer(r)},t.Reverb.prototype.dispose=function(){i.prototype.dispose.apply(this),this._teardownConvolverNode()},t.Convolver=function(e,i,n){t.Reverb.call(this),this._initConvolverNode(),this.input.gain.value=.5,e?(this.impulses=[],this._loadBuffer(e,i,n)):(this._seconds=3,this._decay=2,this._reverse=!1,this._buildImpulse())},t.Convolver.prototype=Object.create(t.Reverb.prototype),t.prototype.registerPreloadMethod(\"createConvolver\",t.prototype),t.prototype.createConvolver=function(e,i,n){window.location.origin.indexOf(\"file://\")>-1&&\"undefined\"===window.cordova&&alert(\"This sketch may require a server to load external files. Please see http://bit.ly/1qcInwS\");var o=this,r=new t.Convolver(e,function(t){\"function\"==typeof i&&i(t),\"function\"==typeof o._decrementPreload&&o._decrementPreload()},n);return r.impulses=[],r},t.Convolver.prototype._loadBuffer=function(i,n,o){var i=t.prototype._checkFileFormats(i),r=this,s=(new Error).stack,a=t.prototype.getAudioContext(),u=new XMLHttpRequest;u.open(\"GET\",i,!0),u.responseType=\"arraybuffer\",u.onload=function(){if(200===u.status)a.decodeAudioData(u.response,function(t){var e={},o=i.split(\"/\");e.name=o[o.length-1],e.audioBuffer=t,r.impulses.push(e),r._setBuffer(e.audioBuffer),n&&n(e)},function(){var t=new e(\"decodeAudioData\",s,r.url),i=\"AudioContext error at decodeAudioData for \"+r.url;o?(t.msg=i,o(t)):console.error(i+\"\\n The error stack trace includes: \\n\"+t.stack)});else{var t=new e(\"loadConvolver\",s,r.url),c=\"Unable to load \"+r.url+\". The request status was: \"+u.status+\" (\"+u.statusText+\")\";o?(t.message=c,o(t)):console.error(c+\"\\n The error stack trace includes: \\n\"+t.stack)}},u.onerror=function(){var t=new e(\"loadConvolver\",s,r.url),i=\"There was no response from the server at \"+r.url+\". Check the url and internet connectivity.\";o?(t.message=i,o(t)):console.error(i+\"\\n The error stack trace includes: \\n\"+t.stack)},u.send()},t.Convolver.prototype.set=null,t.Convolver.prototype.process=function(t){t.connect(this.input)},t.Convolver.prototype.impulses=[],t.Convolver.prototype.addImpulse=function(t,e,i){window.location.origin.indexOf(\"file://\")>-1&&\"undefined\"===window.cordova&&alert(\"This sketch may require a server to load external files. Please see http://bit.ly/1qcInwS\"),this._loadBuffer(t,e,i)},t.Convolver.prototype.resetImpulse=function(t,e,i){window.location.origin.indexOf(\"file://\")>-1&&\"undefined\"===window.cordova&&alert(\"This sketch may require a server to load external files. Please see http://bit.ly/1qcInwS\"),this.impulses=[],this._loadBuffer(t,e,i)},t.Convolver.prototype.toggleImpulse=function(t){if(\"number\"==typeof t&&t<this.impulses.length&&this._setBuffer(this.impulses[t].audioBuffer),\"string\"==typeof t)for(var e=0;e<this.impulses.length;e++)if(this.impulses[e].name===t){this._setBuffer(this.impulses[e].audioBuffer);break}},t.Convolver.prototype.dispose=function(){t.Reverb.prototype.dispose.apply(this);for(var e in this.impulses)this.impulses[e]&&(this.impulses[e]=null)}}(c,Y);var tt;tt=function(t){\"use strict\";return t.TimelineState=function(e){t.Timeline.call(this),this._initial=e},t.extend(t.TimelineState,t.Timeline),t.TimelineState.prototype.getValueAtTime=function(t){var e=this.get(t);return null!==e?e.state:this._initial},t.TimelineState.prototype.setStateAtTime=function(t,e){this.add({state:t,time:e})},t.TimelineState}(n,F);var et;et=function(t){\"use strict\";return t.Clock=function(){t.Emitter.call(this);var e=this.optionsObject(arguments,[\"callback\",\"frequency\"],t.Clock.defaults);this.callback=e.callback,this._nextTick=0,this._lastState=t.State.Stopped,this.frequency=new t.TimelineSignal(e.frequency,t.Type.Frequency),this._readOnly(\"frequency\"),this.ticks=0,this._state=new t.TimelineState(t.State.Stopped),this._boundLoop=this._loop.bind(this),this.context.on(\"tick\",this._boundLoop)},t.extend(t.Clock,t.Emitter),t.Clock.defaults={callback:t.noOp,frequency:1,lookAhead:\"auto\"},Object.defineProperty(t.Clock.prototype,\"state\",{get:function(){return this._state.getValueAtTime(this.now())}}),t.Clock.prototype.start=function(e,i){return e=this.toSeconds(e),this._state.getValueAtTime(e)!==t.State.Started&&this._state.add({state:t.State.Started,time:e,offset:i}),this},t.Clock.prototype.stop=function(e){return e=this.toSeconds(e),this._state.cancel(e),this._state.setStateAtTime(t.State.Stopped,e),this},t.Clock.prototype.pause=function(e){return e=this.toSeconds(e),this._state.getValueAtTime(e)===t.State.Started&&this._state.setStateAtTime(t.State.Paused,e),this},t.Clock.prototype._loop=function(){for(var e=this.now(),i=this.context.lookAhead,n=this.context.updateInterval,o=2*this.context.lag,r=e+i+n+o;r>this._nextTick&&this._state;){var s=this._state.getValueAtTime(this._nextTick);if(s!==this._lastState){this._lastState=s;var a=this._state.get(this._nextTick);s===t.State.Started?(this._nextTick=a.time,this.isUndef(a.offset)||(this.ticks=a.offset),this.emit(\"start\",a.time,this.ticks)):s===t.State.Stopped?(this.ticks=0,this.emit(\"stop\",a.time)):s===t.State.Paused&&this.emit(\"pause\",a.time)}var u=this._nextTick;this.frequency&&(this._nextTick+=1/this.frequency.getValueAtTime(this._nextTick),s===t.State.Started&&(this.callback(u),this.ticks++))}},t.Clock.prototype.getStateAtTime=function(t){return t=this.toSeconds(t),this._state.getValueAtTime(t)},t.Clock.prototype.dispose=function(){t.Emitter.prototype.dispose.call(this),this.context.off(\"tick\",this._boundLoop),this._writable(\"frequency\"),this.frequency.dispose(),this.frequency=null,this._boundLoop=null,this._nextTick=1/0,this.callback=null,this._state.dispose(),this._state=null},t.Clock}(n,q,tt,o);var it;it=function(){var e=a,i=et;t.Metro=function(){this.clock=new i({callback:this.ontick.bind(this)}),this.syncedParts=[],this.bpm=120,this._init(),this.prevTick=0,this.tatumTime=0,this.tickCallback=function(){}},t.Metro.prototype.ontick=function(t){var i=t-this.prevTick,n=t-e.audiocontext.currentTime;if(!(i-this.tatumTime<=-.02)){this.prevTick=t;var o=this;this.syncedParts.forEach(function(t){t.isPlaying&&(t.incrementStep(n),t.phrases.forEach(function(t){var e=t.sequence,i=o.metroTicks%e.length;0!==e[i]&&(o.metroTicks<e.length||!t.looping)&&t.callback(n,e[i])}))}),this.metroTicks+=1,this.tickCallback(n)}},t.Metro.prototype.setBPM=function(t,i){var n=60/(t*this.tatums),o=e.audiocontext.currentTime;this.tatumTime=n;var i=i||0;this.clock.frequency.setValueAtTime(this.clock.frequency.value,o),this.clock.frequency.linearRampToValueAtTime(t,o+i),this.bpm=t},t.Metro.prototype.getBPM=function(){return this.clock.getRate()/this.tatums*60},t.Metro.prototype._init=function(){this.metroTicks=0},t.Metro.prototype.resetSync=function(t){this.syncedParts=[t]},t.Metro.prototype.pushSync=function(t){this.syncedParts.push(t)},t.Metro.prototype.start=function(t){var i=t||0,n=e.audiocontext.currentTime;this.clock.start(n+i),this.setBPM(this.bpm)},t.Metro.prototype.stop=function(t){var i=t||0,n=e.audiocontext.currentTime;this.clock.stop(n+i)},t.Metro.prototype.beatLength=function(t){this.tatums=1/t/4}}(a,et);var nt;nt=function(){function e(t){t.currentPart++,t.currentPart>=t.parts.length?(t.scoreStep=0,t.onended()):(t.scoreStep=0,t.parts[t.currentPart-1].stop(),t.parts[t.currentPart].start())}var i=a,n=120;t.prototype.setBPM=function(t,e){n=t;for(var o in i.parts)i.parts[o]&&i.parts[o].setBPM(t,e)},t.Phrase=function(t,e,i){this.phraseStep=0,this.name=t,this.callback=e,this.sequence=i},t.Part=function(e,o){this.length=e||0,this.partStep=0,\nthis.phrases=[],this.isPlaying=!1,this.noLoop(),this.tatums=o||.0625,this.metro=new t.Metro,this.metro._init(),this.metro.beatLength(this.tatums),this.metro.setBPM(n),i.parts.push(this),this.callback=function(){}},t.Part.prototype.setBPM=function(t,e){this.metro.setBPM(t,e)},t.Part.prototype.getBPM=function(){return this.metro.getBPM()},t.Part.prototype.start=function(t){if(!this.isPlaying){this.isPlaying=!0,this.metro.resetSync(this);var e=t||0;this.metro.start(e)}},t.Part.prototype.loop=function(t){this.looping=!0,this.onended=function(){this.partStep=0};var e=t||0;this.start(e)},t.Part.prototype.noLoop=function(){this.looping=!1,this.onended=function(){this.stop()}},t.Part.prototype.stop=function(t){this.partStep=0,this.pause(t)},t.Part.prototype.pause=function(t){this.isPlaying=!1;var e=t||0;this.metro.stop(e)},t.Part.prototype.addPhrase=function(e,i,n){var o;if(3===arguments.length)o=new t.Phrase(e,i,n);else{if(!(arguments[0]instanceof t.Phrase))throw\"invalid input. addPhrase accepts name, callback, array or a p5.Phrase\";o=arguments[0]}this.phrases.push(o),o.sequence.length>this.length&&(this.length=o.sequence.length)},t.Part.prototype.removePhrase=function(t){for(var e in this.phrases)this.phrases[e].name===t&&this.phrases.splice(e,1)},t.Part.prototype.getPhrase=function(t){for(var e in this.phrases)if(this.phrases[e].name===t)return this.phrases[e]},t.Part.prototype.replaceSequence=function(t,e){for(var i in this.phrases)this.phrases[i].name===t&&(this.phrases[i].sequence=e)},t.Part.prototype.incrementStep=function(t){this.partStep<this.length-1?(this.callback(t),this.partStep+=1):this.looping||this.partStep!==this.length-1||(console.log(\"done\"),this.onended())},t.Part.prototype.onStep=function(t){this.callback=t},t.Score=function(){this.parts=[],this.currentPart=0;var t=this;for(var i in arguments)arguments[i]&&this.parts[i]&&(this.parts[i]=arguments[i],this.parts[i].nextPart=this.parts[i+1],this.parts[i].onended=function(){t.resetPart(i),e(t)});this.looping=!1},t.Score.prototype.onended=function(){this.looping?this.parts[0].start():this.parts[this.parts.length-1].onended=function(){this.stop(),this.resetParts()},this.currentPart=0},t.Score.prototype.start=function(){this.parts[this.currentPart].start(),this.scoreStep=0},t.Score.prototype.stop=function(){this.parts[this.currentPart].stop(),this.currentPart=0,this.scoreStep=0},t.Score.prototype.pause=function(){this.parts[this.currentPart].stop()},t.Score.prototype.loop=function(){this.looping=!0,this.start()},t.Score.prototype.noLoop=function(){this.looping=!1},t.Score.prototype.resetParts=function(){var t=this;this.parts.forEach(function(e){t.resetParts[e]})},t.Score.prototype.resetPart=function(t){this.parts[t].stop(),this.parts[t].partStep=0;for(var e in this.parts[t].phrases)this.parts[t]&&(this.parts[t].phrases[e].phraseStep=0)},t.Score.prototype.setBPM=function(t,e){for(var i in this.parts)this.parts[i]&&this.parts[i].setBPM(t,e)}}(a);var ot;ot=function(){var e=a,i=et;return t.SoundLoop=function(t,n){this.callback=t,this.musicalTimeMode=\"number\"==typeof this._interval?!1:!0,this._interval=n||1,this._timeSignature=4,this._bpm=60,this.isPlaying=!1,this.maxIterations=1/0;var o=this;this.clock=new i({callback:function(t){var i=t-e.audiocontext.currentTime;i>0&&o.iterations<=o.maxIterations&&o.callback(i)},frequency:this._calcFreq()})},t.SoundLoop.prototype.start=function(t){var i=t||0,n=e.audiocontext.currentTime;this.isPlaying||(this.clock.start(n+i),this.isPlaying=!0)},t.SoundLoop.prototype.stop=function(t){var i=t||0,n=e.audiocontext.currentTime;this.isPlaying&&(this.clock.stop(n+i),this.isPlaying=!1)},t.SoundLoop.prototype.pause=function(t){var i=t||0,n=e.audiocontext.currentTime;this.isPlaying&&(this.clock.pause(n+i),this.isPlaying=!1)},t.SoundLoop.prototype.syncedStart=function(t,i){var n=i||0,o=e.audiocontext.currentTime;if(t.isPlaying){if(t.isPlaying){var r=t.clock._nextTick-e.audiocontext.currentTime;this.clock.start(o+r),this.isPlaying=!0}}else t.clock.start(o+n),t.isPlaying=!0,this.clock.start(o+n),this.isPlaying=!0},t.SoundLoop.prototype._update=function(){this.clock.frequency.value=this._calcFreq()},t.SoundLoop.prototype._calcFreq=function(){return\"number\"==typeof this._interval?(this.musicalTimeMode=!1,1/this._interval):\"string\"==typeof this._interval?(this.musicalTimeMode=!0,this._bpm/60/this._convertNotation(this._interval)*(this._timeSignature/4)):void 0},t.SoundLoop.prototype._convertNotation=function(t){var e=t.slice(-1);switch(t=Number(t.slice(0,-1)),e){case\"m\":return this._measure(t);case\"n\":return this._note(t);default:console.warn(\"Specified interval is not formatted correctly. See Tone.js timing reference for more info: https://github.com/Tonejs/Tone.js/wiki/Time\")}},t.SoundLoop.prototype._measure=function(t){return t*this._timeSignature},t.SoundLoop.prototype._note=function(t){return this._timeSignature/t},Object.defineProperty(t.SoundLoop.prototype,\"bpm\",{get:function(){return this._bpm},set:function(t){this.musicalTimeMode||console.warn('Changing the BPM in \"seconds\" mode has no effect. BPM is only relevant in musicalTimeMode when the interval is specified as a string (\"2n\", \"4n\", \"1m\"...etc)'),this._bpm=t,this._update()}}),Object.defineProperty(t.SoundLoop.prototype,\"timeSignature\",{get:function(){return this._timeSignature},set:function(t){this.musicalTimeMode||console.warn('Changing the timeSignature in \"seconds\" mode has no effect. BPM is only relevant in musicalTimeMode when the interval is specified as a string (\"2n\", \"4n\", \"1m\"...etc)'),this._timeSignature=t,this._update()}}),Object.defineProperty(t.SoundLoop.prototype,\"interval\",{get:function(){return this._interval},set:function(t){this.musicalTimeMode=\"Number\"==typeof t?!1:!0,this._interval=t,this._update()}}),Object.defineProperty(t.SoundLoop.prototype,\"iterations\",{get:function(){return this.clock.ticks}}),t.SoundLoop}(a,et);var rt;rt=function(){\"use strict\";var e=Y;return t.Compressor=function(){e.call(this),this.compressor=this.ac.createDynamicsCompressor(),this.input.connect(this.compressor),this.compressor.connect(this.wet)},t.Compressor.prototype=Object.create(e.prototype),t.Compressor.prototype.process=function(t,e,i,n,o,r){t.connect(this.input),this.set(e,i,n,o,r)},t.Compressor.prototype.set=function(t,e,i,n,o){\"undefined\"!=typeof t&&this.attack(t),\"undefined\"!=typeof e&&this.knee(e),\"undefined\"!=typeof i&&this.ratio(i),\"undefined\"!=typeof n&&this.threshold(n),\"undefined\"!=typeof o&&this.release(o)},t.Compressor.prototype.attack=function(t,e){var i=e||0;return\"number\"==typeof t?(this.compressor.attack.value=t,this.compressor.attack.cancelScheduledValues(this.ac.currentTime+.01+i),this.compressor.attack.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):\"undefined\"!=typeof t&&t.connect(this.compressor.attack),this.compressor.attack.value},t.Compressor.prototype.knee=function(t,e){var i=e||0;return\"number\"==typeof t?(this.compressor.knee.value=t,this.compressor.knee.cancelScheduledValues(this.ac.currentTime+.01+i),this.compressor.knee.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):\"undefined\"!=typeof t&&t.connect(this.compressor.knee),this.compressor.knee.value},t.Compressor.prototype.ratio=function(t,e){var i=e||0;return\"number\"==typeof t?(this.compressor.ratio.value=t,this.compressor.ratio.cancelScheduledValues(this.ac.currentTime+.01+i),this.compressor.ratio.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):\"undefined\"!=typeof t&&t.connect(this.compressor.ratio),this.compressor.ratio.value},t.Compressor.prototype.threshold=function(t,e){var i=e||0;return\"number\"==typeof t?(this.compressor.threshold.value=t,this.compressor.threshold.cancelScheduledValues(this.ac.currentTime+.01+i),this.compressor.threshold.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):\"undefined\"!=typeof t&&t.connect(this.compressor.threshold),this.compressor.threshold.value},t.Compressor.prototype.release=function(t,e){var i=e||0;return\"number\"==typeof t?(this.compressor.release.value=t,this.compressor.release.cancelScheduledValues(this.ac.currentTime+.01+i),this.compressor.release.linearRampToValueAtTime(t,this.ac.currentTime+.02+i)):\"undefined\"!=typeof number&&t.connect(this.compressor.release),this.compressor.release.value},t.Compressor.prototype.reduction=function(){return this.compressor.reduction.value},t.Compressor.prototype.dispose=function(){e.prototype.dispose.apply(this),this.compressor&&(this.compressor.disconnect(),delete this.compressor)},t.Compressor}(a,Y,c);var st;st=function(){var e=a,i=u.convertToWav,n=e.audiocontext;t.SoundRecorder=function(){this.input=n.createGain(),this.output=n.createGain(),this.recording=!1,this.bufferSize=1024,this._channels=2,this._clear(),this._jsNode=n.createScriptProcessor(this.bufferSize,this._channels,2),this._jsNode.onaudioprocess=this._audioprocess.bind(this),this._callback=function(){},this._jsNode.connect(t.soundOut._silentNode),this.setInput(),e.soundArray.push(this)},t.SoundRecorder.prototype.setInput=function(e){this.input.disconnect(),this.input=null,this.input=n.createGain(),this.input.connect(this._jsNode),this.input.connect(this.output),e?e.connect(this.input):t.soundOut.output.connect(this.input)},t.SoundRecorder.prototype.record=function(t,e,i){this.recording=!0,e&&(this.sampleLimit=Math.round(e*n.sampleRate)),t&&i?this._callback=function(){this.buffer=this._getBuffer(),t.setBuffer(this.buffer),i()}:t&&(this._callback=function(){this.buffer=this._getBuffer(),t.setBuffer(this.buffer)})},t.SoundRecorder.prototype.stop=function(){this.recording=!1,this._callback(),this._clear()},t.SoundRecorder.prototype._clear=function(){this._leftBuffers=[],this._rightBuffers=[],this.recordedSamples=0,this.sampleLimit=null},t.SoundRecorder.prototype._audioprocess=function(t){if(this.recording!==!1&&this.recording===!0)if(this.sampleLimit&&this.recordedSamples>=this.sampleLimit)this.stop();else{var e=t.inputBuffer.getChannelData(0),i=t.inputBuffer.getChannelData(1);this._leftBuffers.push(new Float32Array(e)),this._rightBuffers.push(new Float32Array(i)),this.recordedSamples+=this.bufferSize}},t.SoundRecorder.prototype._getBuffer=function(){var t=[];return t.push(this._mergeBuffers(this._leftBuffers)),t.push(this._mergeBuffers(this._rightBuffers)),t},t.SoundRecorder.prototype._mergeBuffers=function(t){for(var e=new Float32Array(this.recordedSamples),i=0,n=t.length,o=0;n>o;o++){var r=t[o];e.set(r,i),i+=r.length}return e},t.SoundRecorder.prototype.dispose=function(){this._clear();var t=e.soundArray.indexOf(this);e.soundArray.splice(t,1),this._callback=function(){},this.input&&this.input.disconnect(),this.input=null,this._jsNode=null},t.prototype.saveSound=function(e,n){const o=i(e.buffer);t.prototype.writeFile([o],n,\"wav\")}}(a,u);var at;at=function(){t.PeakDetect=function(t,e,i,n){this.framesPerPeak=n||20,this.framesSinceLastPeak=0,this.decayRate=.95,this.threshold=i||.35,this.cutoff=0,this.cutoffMult=1.5,this.energy=0,this.penergy=0,this.currentValue=0,this.isDetected=!1,this.f1=t||40,this.f2=e||2e4,this._onPeak=function(){}},t.PeakDetect.prototype.update=function(t){var e=this.energy=t.getEnergy(this.f1,this.f2)/255;e>this.cutoff&&e>this.threshold&&e-this.penergy>0?(this._onPeak(),this.isDetected=!0,this.cutoff=e*this.cutoffMult,this.framesSinceLastPeak=0):(this.isDetected=!1,this.framesSinceLastPeak<=this.framesPerPeak?this.framesSinceLastPeak++:(this.cutoff*=this.decayRate,this.cutoff=Math.max(this.cutoff,this.threshold))),this.currentValue=e,this.penergy=e},t.PeakDetect.prototype.onPeak=function(t,e){var i=this;i._onPeak=function(){t(i.energy,e)}}}();var ut;ut=function(){var e=a;t.Gain=function(){this.ac=e.audiocontext,this.input=this.ac.createGain(),this.output=this.ac.createGain(),this.input.gain.value=.5,this.input.connect(this.output),e.soundArray.push(this)},t.Gain.prototype.setInput=function(t){t.connect(this.input)},t.Gain.prototype.connect=function(e){var i=e||t.soundOut.input;this.output.connect(i.input?i.input:i)},t.Gain.prototype.disconnect=function(){this.output&&this.output.disconnect()},t.Gain.prototype.amp=function(t,i,n){var i=i||0,n=n||0,o=e.audiocontext.currentTime,r=this.output.gain.value;this.output.gain.cancelScheduledValues(o),this.output.gain.linearRampToValueAtTime(r,o+n),this.output.gain.linearRampToValueAtTime(t,o+n+i)},t.Gain.prototype.dispose=function(){var t=e.soundArray.indexOf(this);e.soundArray.splice(t,1),this.output&&(this.output.disconnect(),delete this.output),this.input&&(this.input.disconnect(),delete this.input)}}(a);var ct;ct=function(){var e=a;return t.AudioVoice=function(){this.ac=e.audiocontext,this.output=this.ac.createGain(),this.connect(),e.soundArray.push(this)},t.AudioVoice.prototype.play=function(t,e,i,n){},t.AudioVoice.prototype.triggerAttack=function(t,e,i){},t.AudioVoice.prototype.triggerRelease=function(t){},t.AudioVoice.prototype.amp=function(t,e){},t.AudioVoice.prototype.connect=function(t){var i=t||e.input;this.output.connect(i.input?i.input:i)},t.AudioVoice.prototype.disconnect=function(){this.output.disconnect()},t.AudioVoice.prototype.dispose=function(){this.output&&(this.output.disconnect(),delete this.output)},t.AudioVoice}(a);var pt;pt=function(){var e=a,i=ct,n=u.noteToFreq,o=.15;t.MonoSynth=function(){i.call(this),this.oscillator=new t.Oscillator,this.env=new t.Envelope,this.env.setRange(1,0),this.env.setExp(!0),this.setADSR(.02,.25,.05,.35),this.oscillator.disconnect(),this.oscillator.connect(this.output),this.env.disconnect(),this.env.setInput(this.output.gain),this.oscillator.output.gain.value=1,this.oscillator.start(),this.connect(),e.soundArray.push(this)},t.MonoSynth.prototype=Object.create(t.AudioVoice.prototype),t.MonoSynth.prototype.play=function(t,e,i,n){this.triggerAttack(t,e,~~i),this.triggerRelease(~~i+(n||o))},t.MonoSynth.prototype.triggerAttack=function(t,e,i){var i=~~i,o=n(t),r=e||.1;this.oscillator.freq(o,0,i),this.env.ramp(this.output.gain,i,r)},t.MonoSynth.prototype.triggerRelease=function(t){var t=t||0;this.env.ramp(this.output.gain,t,0)},t.MonoSynth.prototype.setADSR=function(t,e,i,n){this.env.setADSR(t,e,i,n)},Object.defineProperties(t.MonoSynth.prototype,{attack:{get:function(){return this.env.aTime},set:function(t){this.env.setADSR(t,this.env.dTime,this.env.sPercent,this.env.rTime)}},decay:{get:function(){return this.env.dTime},set:function(t){this.env.setADSR(this.env.aTime,t,this.env.sPercent,this.env.rTime)}},sustain:{get:function(){return this.env.sPercent},set:function(t){this.env.setADSR(this.env.aTime,this.env.dTime,t,this.env.rTime)}},release:{get:function(){return this.env.rTime},set:function(t){this.env.setADSR(this.env.aTime,this.env.dTime,this.env.sPercent,t)}}}),t.MonoSynth.prototype.amp=function(t,e){var i=e||0;return\"undefined\"!=typeof t&&this.oscillator.amp(t,i),this.oscillator.amp().value},t.MonoSynth.prototype.connect=function(t){var i=t||e.input;this.output.connect(i.input?i.input:i)},t.MonoSynth.prototype.disconnect=function(){this.output&&this.output.disconnect()},t.MonoSynth.prototype.dispose=function(){i.prototype.dispose.apply(this),this.env&&this.env.dispose(),this.oscillator&&this.oscillator.dispose()}}(a,ct,u);var ht;ht=function(){var e=a,i=q,n=u.noteToFreq;t.PolySynth=function(n,o){this.audiovoices=[],this.notes={},this._newest=0,this._oldest=0,this.maxVoices=o||8,this.AudioVoice=void 0===n?t.MonoSynth:n,this._voicesInUse=new i(0),this.output=e.audiocontext.createGain(),this.connect(),this._allocateVoices(),e.soundArray.push(this)},t.PolySynth.prototype._allocateVoices=function(){for(var t=0;t<this.maxVoices;t++)this.audiovoices.push(new this.AudioVoice),this.audiovoices[t].disconnect(),this.audiovoices[t].connect(this.output)},t.PolySynth.prototype.play=function(t,e,i,n){var n=n||1;this.noteAttack(t,e,i),this.noteRelease(t,i+n)},t.PolySynth.prototype.noteADSR=function(t,i,n,o,r,s){var a=e.audiocontext.currentTime,s=s||0,u=a+s;this.audiovoices[this.notes[t].getValueAtTime(u)].setADSR(i,n,o,r)},t.PolySynth.prototype.setADSR=function(t,e,i,n){this.audiovoices.forEach(function(o){o.setADSR(t,e,i,n)})},t.PolySynth.prototype.noteAttack=function(o,r,s){var a,s=~~s,u=e.audiocontext.currentTime+s,c=n(o),p=r||.1;if(this.notes[c]&&null!==this.notes[c].getValueAtTime(u)&&this.noteRelease(c,0),this._voicesInUse.getValueAtTime(u)<this.maxVoices)a=Math.max(~~this._voicesInUse.getValueAtTime(u),0);else{a=this._oldest;var h=t.prototype.freqToMidi(this.audiovoices[this._oldest].oscillator.freq().value);this.noteRelease(h),this._oldest=(this._oldest+1)%(this.maxVoices-1)}this.notes[c]=new i,this.notes[c].setValueAtTime(a,u);var l=null===this._voicesInUse._searchBefore(u)?0:this._voicesInUse._searchBefore(u).value;if(this._voicesInUse.setValueAtTime(l+1,u),this._updateAfter(u,1),this._newest=a,\"number\"==typeof p){var f=1/this._voicesInUse.getValueAtTime(u)*2;p=p>f?f:p}this.audiovoices[a].triggerAttack(c,p,s)},t.PolySynth.prototype._updateAfter=function(t,e){if(null!==this._voicesInUse._searchAfter(t)){this._voicesInUse._searchAfter(t).value+=e;var i=this._voicesInUse._searchAfter(t).time;this._updateAfter(i,e)}},t.PolySynth.prototype.noteRelease=function(t,i){var o=e.audiocontext.currentTime,r=i||0,s=o+r;if(t){var a=n(t);if(this.notes[a]&&null!==this.notes[a].getValueAtTime(s)){var u=Math.max(~~this._voicesInUse.getValueAtTime(s).value,1);this._voicesInUse.setValueAtTime(u-1,s),u>0&&this._updateAfter(s,-1),this.audiovoices[this.notes[a].getValueAtTime(s)].triggerRelease(r),this.notes[a].dispose(),delete this.notes[a],this._newest=0===this._newest?0:(this._newest-1)%(this.maxVoices-1)}else console.warn(\"Cannot release a note that is not already playing\")}else{this.audiovoices.forEach(function(t){t.triggerRelease(r)}),this._voicesInUse.setValueAtTime(0,s);for(var c in this.notes)this.notes[c].dispose(),delete this.notes[c]}},t.PolySynth.prototype.connect=function(t){var i=t||e.input;this.output.connect(i.input?i.input:i)},t.PolySynth.prototype.disconnect=function(){this.output&&this.output.disconnect()},t.PolySynth.prototype.dispose=function(){this.audiovoices.forEach(function(t){t.dispose()}),this.output&&(this.output.disconnect(),delete this.output)}}(a,q,u);var lt;lt=function(){function e(t){for(var e,i=\"number\"==typeof t?t:50,n=44100,o=new Float32Array(n),r=Math.PI/180,s=0;n>s;++s)e=2*s/n-1,o[s]=(3+i)*e*20*r/(Math.PI+i*Math.abs(e));return o}var i=Y;t.Distortion=function(n,o){if(i.call(this),\"undefined\"==typeof n&&(n=.25),\"number\"!=typeof n)throw new Error(\"amount must be a number\");if(\"undefined\"==typeof o&&(o=\"2x\"),\"string\"!=typeof o)throw new Error(\"oversample must be a String\");var r=t.prototype.map(n,0,1,0,2e3);this.waveShaperNode=this.ac.createWaveShaper(),this.amount=r,this.waveShaperNode.curve=e(r),this.waveShaperNode.oversample=o,this.input.connect(this.waveShaperNode),this.waveShaperNode.connect(this.wet)},t.Distortion.prototype=Object.create(i.prototype),t.Distortion.prototype.process=function(t,e,i){t.connect(this.input),this.set(e,i)},t.Distortion.prototype.set=function(i,n){if(i){var o=t.prototype.map(i,0,1,0,2e3);this.amount=o,this.waveShaperNode.curve=e(o)}n&&(this.waveShaperNode.oversample=n)},t.Distortion.prototype.getAmount=function(){return this.amount},t.Distortion.prototype.getOversample=function(){return this.waveShaperNode.oversample},t.Distortion.prototype.dispose=function(){i.prototype.dispose.apply(this),this.waveShaperNode&&(this.waveShaperNode.disconnect(),this.waveShaperNode=null)}}(Y);var ft;ft=function(){var t=a;return t}(e,s,a,u,c,p,h,l,f,k,O,M,E,V,R,z,Q,H,$,J,K,it,nt,ot,rt,st,at,ut,pt,ht,lt,ct,pt,ht)});","args":" ","x":417.80719307964654,"y":1605.5009954576954,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":true,"isMediaFile":false,"hidden":true,"exported":true,"isBlob":false,"codeSize":14,"icon":"./static/media/file.5bd43cb8.svg","lineHighLightingStatus":"none"},{"id":"aopr5tpxu","name":"index.html","code":"<!DOCTYPE html><html><head>\n    <script src=\"p5.js\"></script>\n    <script src=\"p5.dom.min.js\"></script>\n    <script src=\"p5.sound.min.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n    <meta charset=\"utf-8\">\n\n  </head>\n  <body>\n    <script src=\"sketch.js\"></script>\n  \n\n</body></html>","args":" ","x":779.8071930796466,"y":1605.5009954576954,"editorWidth":300,"editorHeight":200,"iframeWidth":100,"iframeHeight":100,"isIndex":true,"isTxtFile":false,"isMediaFile":false,"hidden":true,"exported":true,"isBlob":false,"codeSize":14,"icon":"./static/media/layout.8a437d55.svg","lineHighLightingStatus":"none"},{"id":"yj0xkju5d","name":"p5.dom.min.js","code":"/*! p5.js v0.9.0 July 01, 2019 */\n\n!function(t,e){\"function\"==typeof define&&define.amd?define(\"p5.dom\",[\"p5\"],function(t){e(t)}):\"object\"==typeof exports?e(require(\"../p5\")):e(t.p5)}(this,function(d){function l(t){var e=document;return\"string\"==typeof t&&\"#\"===t[0]?(t=t.slice(1),e=document.getElementById(t)||document):t instanceof d.Element?e=t.elt:t instanceof HTMLElement&&(e=t),e}function c(t,e,i){(e._userNode?e._userNode:document.body).appendChild(t);var n=i?new d.MediaElement(t,e):new d.Element(t,e);return e._elements.push(n),n}d.prototype.select=function(t,e){d._validateParameters(\"select\",arguments);var i=null,n=l(e);return(i=\".\"===t[0]?(t=t.slice(1),(i=n.getElementsByClassName(t)).length?i[0]:null):\"#\"===t[0]?(t=t.slice(1),n.getElementById(t)):(i=n.getElementsByTagName(t)).length?i[0]:null)?this._wrapElement(i):null},d.prototype.selectAll=function(t,e){d._validateParameters(\"selectAll\",arguments);var i,n=[],r=l(e);if(i=\".\"===t[0]?(t=t.slice(1),r.getElementsByClassName(t)):r.getElementsByTagName(t))for(var o=0;o<i.length;o++){var s=this._wrapElement(i[o]);n.push(s)}return n},d.prototype._wrapElement=function(t){var e=Array.prototype.slice.call(t.children);if(\"INPUT\"!==t.tagName||\"checkbox\"!==t.type)return\"VIDEO\"===t.tagName||\"AUDIO\"===t.tagName?new d.MediaElement(t,this):\"SELECT\"===t.tagName?this.createSelect(new d.Element(t,this)):0<e.length&&e.every(function(t){return\"INPUT\"===t.tagName||\"LABEL\"===t.tagName})?this.createRadio(new d.Element(t,this)):new d.Element(t,this);var i=new d.Element(t,this);return i.checked=function(){return 0===arguments.length?this.elt.checked:(arguments[0]?this.elt.checked=!0:this.elt.checked=!1,this)},i},d.prototype.removeElements=function(t){d._validateParameters(\"removeElements\",arguments);for(var e=0;e<this._elements.length;e++)this._elements[e].elt instanceof HTMLCanvasElement||this._elements[e].remove()},d.Element.prototype.changed=function(t){return d.Element._adjustListener(\"change\",t,this),this},d.Element.prototype.input=function(t){return d.Element._adjustListener(\"input\",t,this),this};function i(t,e,i,n){var r=document.createElement(e);\"string\"==typeof(i=i||\"\")&&(i=[i]);for(var o=0;o<i.length;o++){var s=document.createElement(\"source\");s.src=i[o],r.appendChild(s)}if(void 0!==n){var l=function(){n(),r.removeEventListener(\"canplaythrough\",l)};r.addEventListener(\"canplaythrough\",l)}var a=c(r,t,!0);return a.loadedmetadata=!1,r.addEventListener(\"loadedmetadata\",function(){a.width=r.videoWidth,a.height=r.videoHeight,0===a.elt.width&&(a.elt.width=r.videoWidth),0===a.elt.height&&(a.elt.height=r.videoHeight),a.presetPlaybackRate&&(a.elt.playbackRate=a.presetPlaybackRate,delete a.presetPlaybackRate),a.loadedmetadata=!0}),a}[\"div\",\"p\",\"span\"].forEach(function(i){var t=\"create\"+i.charAt(0).toUpperCase()+i.slice(1);d.prototype[t]=function(t){var e=document.createElement(i);return e.innerHTML=void 0===t?\"\":t,c(e,this)}}),d.prototype.createImg=function(){d._validateParameters(\"createImg\",arguments);var t=document.createElement(\"img\");t.crossOrigin=\"Anonymous\";var e,i=arguments;return t.src=i[0],1<i.length&&\"string\"==typeof i[1]&&(t.alt=i[1]),t.onload=function(){e.width=t.offsetWidth||t.width,e.height=t.offsetHeight||t.height,1<i.length&&\"function\"==typeof i[1]?(e.fn=i[1],e.fn()):1<i.length&&\"function\"==typeof i[2]&&(e.fn=i[2],e.fn())},e=c(t,this)},d.prototype.createA=function(t,e,i){d._validateParameters(\"createA\",arguments);var n=document.createElement(\"a\");return n.href=t,n.innerHTML=e,i&&(n.target=i),c(n,this)},d.prototype.createSlider=function(t,e,i,n){d._validateParameters(\"createSlider\",arguments);var r=document.createElement(\"input\");return r.type=\"range\",r.min=t,r.max=e,0===n?r.step=1e-18:n&&(r.step=n),\"number\"==typeof i&&(r.value=i),c(r,this)},d.prototype.createButton=function(t,e){d._validateParameters(\"createButton\",arguments);var i=document.createElement(\"button\");return i.innerHTML=t,e&&(i.value=e),c(i,this)},d.prototype.createCheckbox=function(){d._validateParameters(\"createCheckbox\",arguments);var t=document.createElement(\"div\"),e=document.createElement(\"input\");e.type=\"checkbox\",t.appendChild(e);var i=c(t,this);if(i.checked=function(){var t=i.elt.getElementsByTagName(\"input\")[0];if(t){if(0===arguments.length)return t.checked;arguments[0]?t.checked=!0:t.checked=!1}return i},this.value=function(t){return i.value=t,this},arguments[0]){var n=Math.random().toString(36).slice(2),r=document.createElement(\"label\");e.setAttribute(\"id\",n),r.htmlFor=n,i.value(arguments[0]),r.appendChild(document.createTextNode(arguments[0])),t.appendChild(r)}return arguments[1]&&(e.checked=!0),i},d.prototype.createSelect=function(){var o,t;d._validateParameters(\"createSelect\",arguments);var e=arguments[0];return\"object\"==typeof e&&\"SELECT\"===e.elt.nodeName?(t=e,o=this.elt=e.elt):(o=document.createElement(\"select\"),e&&\"boolean\"==typeof e&&o.setAttribute(\"multiple\",\"true\"),t=c(o,this)),t.option=function(t,e){for(var i,n=0;n<this.elt.length;n++)if(this.elt[n].innerHTML===t){i=n;break}if(void 0!==i)!1===e?this.elt.remove(i):this.elt[i].innerHTML===this.elt[i].value?this.elt[i].innerHTML=this.elt[i].value=e:this.elt[i].value=e;else{var r=document.createElement(\"option\");r.innerHTML=t,1<arguments.length?r.value=e:r.value=t,o.appendChild(r)}},t.selected=function(t){var e,i=[];if(0<arguments.length){for(e=0;e<this.elt.length;e++)t.toString()===this.elt[e].value&&(this.elt.selectedIndex=e);return this}if(this.elt.getAttribute(\"multiple\")){for(e=0;e<this.elt.selectedOptions.length;e++)i.push(this.elt.selectedOptions[e].value);return i}return this.elt.value},t},d.prototype.createRadio=function(t){d._validateParameters(\"createRadio\",arguments);var r,n,e=document.querySelectorAll(\"input[type=radio]\"),o=0;if(1<e.length)for(var i=e.length,s=e[0].name,l=e[1].name,a=o=1;a<i;a++)s!==(l=e[a].name)&&o++,s=l;else 1===e.length&&(o=1);\"object\"==typeof t?(n=t,r=this.elt=t.elt):(r=document.createElement(\"div\"),n=c(r,this)),n._getInputChildrenArray=function(){return Array.prototype.slice.call(this.elt.children).filter(function(t){return\"INPUT\"===t.tagName})};var h=-1;return n.option=function(t,e){var i=document.createElement(\"input\");if(i.type=\"radio\",i.innerHTML=t,i.value=e||t,i.setAttribute(\"name\",\"defaultradio\"+o),r.appendChild(i),t){h++;var n=document.createElement(\"label\");i.setAttribute(\"id\",\"defaultradio\"+o+\"-\"+h),n.htmlFor=\"defaultradio\"+o+\"-\"+h,n.appendChild(document.createTextNode(t)),r.appendChild(n)}return i},n.selected=function(t){var e,i=n._getInputChildrenArray();if(t){for(e=0;e<i.length;e++)i[e].value===t&&(i[e].checked=!0);return this}for(e=0;e<i.length;e++)if(!0===i[e].checked)return i[e].value},n.value=function(t){var e,i=n._getInputChildrenArray();if(t){for(e=0;e<i.length;e++)i[e].value===t&&(i[e].checked=!0);return this}for(e=0;e<i.length;e++)if(!0===i[e].checked)return i[e].value;return\"\"},n},d.prototype.createColorPicker=function(t){d._validateParameters(\"createColorPicker\",arguments);var e,i=document.createElement(\"input\");return i.type=\"color\",t?t instanceof d.Color?i.value=t.toString(\"#rrggbb\"):(d.prototype._colorMode=\"rgb\",d.prototype._colorMaxes={rgb:[255,255,255,255],hsb:[360,100,100,1],hsl:[360,100,100,1]},i.value=d.prototype.color(t).toString(\"#rrggbb\")):i.value=\"#000000\",(e=c(i,this)).color=function(){return t.mode&&(d.prototype._colorMode=t.mode),t.maxes&&(d.prototype._colorMaxes=t.maxes),d.prototype.color(this.elt.value)},e},d.prototype.createInput=function(t,e){d._validateParameters(\"createInput\",arguments);var i=document.createElement(\"input\");return i.type=e||\"text\",t&&(i.value=t),c(i,this)},d.prototype.createFileInput=function(r,t){if(d._validateParameters(\"createFileInput\",arguments),window.File&&window.FileReader&&window.FileList&&window.Blob){var e=document.createElement(\"input\");return e.type=\"file\",t&&(e.multiple=\"multiple\"),e.addEventListener(\"change\",function(t){for(var e=t.target.files,i=0;i<e.length;i++){var n=e[i];d.File._load(n,r)}},!1),c(e,this)}console.log(\"The File APIs are not fully supported in this browser. Cannot create element.\")},d.prototype.createVideo=function(t,e){return d._validateParameters(\"createVideo\",arguments),i(this,\"video\",t,e)},d.prototype.createAudio=function(t,e){return d._validateParameters(\"createAudio\",arguments),i(this,\"audio\",t,e)},d.prototype.VIDEO=\"video\",d.prototype.AUDIO=\"audio\",void 0===navigator.mediaDevices&&(navigator.mediaDevices={}),void 0===navigator.mediaDevices.getUserMedia&&(navigator.mediaDevices.getUserMedia=function(i){var n=navigator.webkitGetUserMedia||navigator.mozGetUserMedia;return n?new Promise(function(t,e){n.call(navigator,i,t,e)}):Promise.reject(new Error(\"getUserMedia is not implemented in this browser\"))}),d.prototype.createCapture=function(){d._validateParameters(\"createCapture\",arguments);for(var t,e,i=!0,n=!0,r=0;r<arguments.length;r++)arguments[r]===d.prototype.VIDEO?n=!1:arguments[r]===d.prototype.AUDIO?i=!1:\"object\"==typeof arguments[r]?t=arguments[r]:\"function\"==typeof arguments[r]&&(e=arguments[r]);if(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)throw\"getUserMedia not supported in this browser\";var o=document.createElement(\"video\");o.setAttribute(\"playsinline\",\"\"),t||(t={video:i,audio:n}),navigator.mediaDevices.getUserMedia(t).then(function(e){try{\"srcObject\"in o?o.srcObject=e:o.src=window.URL.createObjectURL(e)}catch(t){o.src=e}},function(t){console.log(t)});var s=c(o,this,!0);return s.loadedmetadata=!1,o.addEventListener(\"loadedmetadata\",function(){o.play(),o.width?(s.width=o.videoWidth=o.width,s.height=o.videoHeight=o.height):(s.width=s.elt.width=o.videoWidth,s.height=s.elt.height=o.videoHeight),s.loadedmetadata=!0,e&&e(o.srcObject)}),s},d.prototype.createElement=function(t,e){d._validateParameters(\"createElement\",arguments);var i=document.createElement(t);return void 0!==e&&(i.innerHTML=e),c(i,this)},d.Element.prototype.addClass=function(t){return this.elt.className?this.hasClass(t)||(this.elt.className=this.elt.className+\" \"+t):this.elt.className=t,this},d.Element.prototype.removeClass=function(t){return this.elt.classList.remove(t),this},d.Element.prototype.hasClass=function(t){return this.elt.classList.contains(t)},d.Element.prototype.toggleClass=function(t){return this.elt.classList.contains(t)?this.elt.classList.remove(t):this.elt.classList.add(t),this},d.Element.prototype.child=function(t){return void 0===t?this.elt.childNodes:(\"string\"==typeof t?(\"#\"===t[0]&&(t=t.substring(1)),t=document.getElementById(t)):t instanceof d.Element&&(t=t.elt),this.elt.appendChild(t),this)},d.Element.prototype.center=function(t){var e=this.elt.style.display,i=\"none\"===this.elt.style.display,n=\"none\"===this.parent().style.display,r={x:this.elt.offsetLeft,y:this.elt.offsetTop};i&&this.show(),this.elt.style.display=\"block\",this.position(0,0),n&&(this.parent().style.display=\"block\");var o=Math.abs(this.parent().offsetWidth-this.elt.offsetWidth),s=Math.abs(this.parent().offsetHeight-this.elt.offsetHeight),l=r.y,a=r.x;return\"both\"===t||void 0===t?this.position(o/2,s/2):\"horizontal\"===t?this.position(o/2,l):\"vertical\"===t&&this.position(a,s/2),this.style(\"display\",e),i&&this.hide(),n&&(this.parent().style.display=\"none\"),this},d.Element.prototype.html=function(){return 0===arguments.length?this.elt.innerHTML:(arguments[1]?this.elt.innerHTML+=arguments[0]:this.elt.innerHTML=arguments[0],this)},d.Element.prototype.position=function(){return 0===arguments.length?{x:this.elt.offsetLeft,y:this.elt.offsetTop}:(this.elt.style.position=\"absolute\",this.elt.style.left=arguments[0]+\"px\",this.elt.style.top=arguments[1]+\"px\",this.x=arguments[0],this.y=arguments[1],this)},d.Element.prototype._translate=function(){this.elt.style.position=\"absolute\";var t=\"\";return this.elt.style.transform&&(t=(t=this.elt.style.transform.replace(/translate3d\\(.*\\)/g,\"\")).replace(/translate[X-Z]?\\(.*\\)/g,\"\")),2===arguments.length?this.elt.style.transform=\"translate(\"+arguments[0]+\"px, \"+arguments[1]+\"px)\":2<arguments.length&&(this.elt.style.transform=\"translate3d(\"+arguments[0]+\"px,\"+arguments[1]+\"px,\"+arguments[2]+\"px)\",3===arguments.length?this.elt.parentElement.style.perspective=\"1000px\":this.elt.parentElement.style.perspective=arguments[3]+\"px\"),this.elt.style.transform+=t,this},d.Element.prototype._rotate=function(){var t=\"\";return this.elt.style.transform&&(t=(t=this.elt.style.transform.replace(/rotate3d\\(.*\\)/g,\"\")).replace(/rotate[X-Z]?\\(.*\\)/g,\"\")),1===arguments.length?this.elt.style.transform=\"rotate(\"+arguments[0]+\"deg)\":2===arguments.length?this.elt.style.transform=\"rotate(\"+arguments[0]+\"deg, \"+arguments[1]+\"deg)\":3===arguments.length&&(this.elt.style.transform=\"rotateX(\"+arguments[0]+\"deg)\",this.elt.style.transform+=\"rotateY(\"+arguments[1]+\"deg)\",this.elt.style.transform+=\"rotateZ(\"+arguments[2]+\"deg)\"),this.elt.style.transform+=t,this},d.Element.prototype.style=function(t,e){if(e instanceof d.Color&&(e=\"rgba(\"+e.levels[0]+\",\"+e.levels[1]+\",\"+e.levels[2]+\",\"+e.levels[3]/255+\")\"),void 0===e){if(-1===t.indexOf(\":\"))return window.getComputedStyle(this.elt).getPropertyValue(t);for(var i=t.split(\";\"),n=0;n<i.length;n++){var r=i[n].split(\":\");r[0]&&r[1]&&(this.elt.style[r[0].trim()]=r[1].trim())}}else if(this.elt.style[t]=e,\"width\"===t||\"height\"===t||\"left\"===t||\"top\"===t){var o=e.replace(/\\D+/g,\"\");this[t]=parseInt(o,10)}return this},d.Element.prototype.attribute=function(t,e){if(null==this.elt.firstChild||\"checkbox\"!==this.elt.firstChild.type&&\"radio\"!==this.elt.firstChild.type)return void 0===e?this.elt.getAttribute(t):(this.elt.setAttribute(t,e),this);if(void 0===e)return this.elt.firstChild.getAttribute(t);for(var i=0;i<this.elt.childNodes.length;i++)this.elt.childNodes[i].setAttribute(t,e)},d.Element.prototype.removeAttribute=function(t){if(null!=this.elt.firstChild&&(\"checkbox\"===this.elt.firstChild.type||\"radio\"===this.elt.firstChild.type))for(var e=0;e<this.elt.childNodes.length;e++)this.elt.childNodes[e].removeAttribute(t);return this.elt.removeAttribute(t),this},d.Element.prototype.value=function(){return 0<arguments.length?(this.elt.value=arguments[0],this):\"range\"===this.elt.type?parseFloat(this.elt.value):this.elt.value},d.Element.prototype.show=function(){return this.elt.style.display=\"block\",this},d.Element.prototype.hide=function(){return this.elt.style.display=\"none\",this},d.Element.prototype.size=function(t,e){if(0===arguments.length)return{width:this.elt.offsetWidth,height:this.elt.offsetHeight};var i=t,n=e,r=d.prototype.AUTO;if(i!==r||n!==r){if(i===r?i=e*this.width/this.height:n===r&&(n=t*this.height/this.width),this.elt instanceof HTMLCanvasElement){var o,s={},l=this.elt.getContext(\"2d\");for(o in l)s[o]=l[o];for(o in this.elt.setAttribute(\"width\",i*this._pInst._pixelDensity),this.elt.setAttribute(\"height\",n*this._pInst._pixelDensity),this.elt.style.width=i+\"px\",this.elt.style.height=n+\"px\",this._pInst.scale(this._pInst._pixelDensity,this._pInst._pixelDensity),s)this.elt.getContext(\"2d\")[o]=s[o]}else this.elt.style.width=i+\"px\",this.elt.style.height=n+\"px\",this.elt.width=i,this.elt.height=n;this.width=this.elt.offsetWidth,this.height=this.elt.offsetHeight,this._pInst&&this._pInst._curElement&&this._pInst._curElement.elt===this.elt&&(this._pInst._setProperty(\"width\",this.elt.offsetWidth),this._pInst._setProperty(\"height\",this.elt.offsetHeight))}return this},d.Element.prototype.remove=function(){for(var t in this._events)this.elt.removeEventListener(t,this._events[t]);this.elt.parentNode&&this.elt.parentNode.removeChild(this.elt)},d.Element.prototype.drop=function(r,o){if(window.File&&window.FileReader&&window.FileList&&window.Blob){if(!this._dragDisabled){this._dragDisabled=!0;var t=function(t){t.preventDefault()};this.elt.addEventListener(\"dragover\",t),this.elt.addEventListener(\"dragleave\",t)}d.Element._attachListener(\"drop\",function(t){t.preventDefault(),\"function\"==typeof o&&o.call(this,t);for(var e=t.dataTransfer.files,i=0;i<e.length;i++){var n=e[i];d.File._load(n,r)}},this)}else console.log(\"The File APIs are not fully supported in this browser.\");return this},d.MediaElement=function(n,t){d.Element.call(this,n,t);var r=this;this.elt.crossOrigin=\"anonymous\",this._prevTime=0,this._cueIDCounter=0,this._cues=[],(this._pixelsState=this)._pixelDensity=1,this._modified=!1,this._pixelsDirty=!0,this._pixelsTime=-1,Object.defineProperty(r,\"src\",{get:function(){var t=r.elt.children[0].src,e=r.elt.src===window.location.href?\"\":r.elt.src;return t===window.location.href?e:t},set:function(t){for(var e=0;e<r.elt.children.length;e++)r.elt.removeChild(r.elt.children[e]);var i=document.createElement(\"source\");i.src=t,n.appendChild(i),r.elt.src=t,r.modified=!0}}),r._onended=function(){},r.elt.onended=function(){r._onended(r)}},d.MediaElement.prototype=Object.create(d.Element.prototype),d.MediaElement.prototype.play=function(){var t;return this.elt.currentTime===this.elt.duration&&(this.elt.currentTime=0),(t=(1<this.elt.readyState||this.elt.load(),this.elt.play()))&&t.catch&&t.catch(function(t){console.log(\"WARN: Element play method raised an error asynchronously\",t)}),this},d.MediaElement.prototype.stop=function(){return this.elt.pause(),this.elt.currentTime=0,this},d.MediaElement.prototype.pause=function(){return this.elt.pause(),this},d.MediaElement.prototype.loop=function(){return this.elt.setAttribute(\"loop\",!0),this.play(),this},d.MediaElement.prototype.noLoop=function(){return this.elt.setAttribute(\"loop\",!1),this},d.MediaElement.prototype.autoplay=function(t){return this.elt.setAttribute(\"autoplay\",t),this},d.MediaElement.prototype.volume=function(t){if(void 0===t)return this.elt.volume;this.elt.volume=t},d.MediaElement.prototype.speed=function(t){if(void 0===t)return this.presetPlaybackRate||this.elt.playbackRate;this.loadedmetadata?this.elt.playbackRate=t:this.presetPlaybackRate=t},d.MediaElement.prototype.time=function(t){return void 0===t?this.elt.currentTime:(this.elt.currentTime=t,this)},d.MediaElement.prototype.duration=function(){return this.elt.duration},d.MediaElement.prototype.pixels=[],d.MediaElement.prototype._ensureCanvas=function(){if(this.canvas||(this.canvas=document.createElement(\"canvas\"),this.drawingContext=this.canvas.getContext(\"2d\"),this.setModified(!0)),this.loadedmetadata){this.canvas.width!==this.elt.width&&(this.canvas.width=this.elt.width,this.canvas.height=this.elt.height,this.width=this.canvas.width,this.height=this.canvas.height,this._pixelsDirty=!0);var t=this.elt.currentTime;(this._pixelsDirty||this._pixelsTime!==t)&&(this._pixelsTime=t,this._pixelsDirty=!0,this.drawingContext.drawImage(this.elt,0,0,this.canvas.width,this.canvas.height),this.setModified(!0))}},d.MediaElement.prototype.loadPixels=function(){return this._ensureCanvas(),d.Renderer2D.prototype.loadPixels.apply(this,arguments)},d.MediaElement.prototype.updatePixels=function(t,e,i,n){return this.loadedmetadata&&(this._ensureCanvas(),d.Renderer2D.prototype.updatePixels.call(this,t,e,i,n)),this.setModified(!0),this},d.MediaElement.prototype.get=function(){return this._ensureCanvas(),d.Renderer2D.prototype.get.apply(this,arguments)},d.MediaElement.prototype._getPixel=function(){return this.loadPixels(),d.Renderer2D.prototype._getPixel.apply(this,arguments)},d.MediaElement.prototype.set=function(t,e,i){this.loadedmetadata&&(this._ensureCanvas(),d.Renderer2D.prototype.set.call(this,t,e,i),this.setModified(!0))},d.MediaElement.prototype.copy=function(){this._ensureCanvas(),d.Renderer2D.prototype.copy.apply(this,arguments)},d.MediaElement.prototype.mask=function(){this.loadPixels(),this.setModified(!0),d.Image.prototype.mask.apply(this,arguments)},d.MediaElement.prototype.isModified=function(){return this._modified},d.MediaElement.prototype.setModified=function(t){this._modified=t},d.MediaElement.prototype.onended=function(t){return this._onended=t,this},d.MediaElement.prototype.connect=function(t){var e,i;if(\"function\"==typeof d.prototype.getAudioContext)e=d.prototype.getAudioContext(),i=d.soundOut.input;else try{i=(e=t.context).destination}catch(t){throw\"connect() is meant to be used with Web Audio API or p5.sound.js\"}this.audioSourceNode||(this.audioSourceNode=e.createMediaElementSource(this.elt),this.audioSourceNode.connect(i)),t?t.input?this.audioSourceNode.connect(t.input):this.audioSourceNode.connect(t):this.audioSourceNode.connect(i)},d.MediaElement.prototype.disconnect=function(){if(!this.audioSourceNode)throw\"nothing to disconnect\";this.audioSourceNode.disconnect()},d.MediaElement.prototype.showControls=function(){this.elt.style[\"text-align\"]=\"inherit\",this.elt.controls=!0},d.MediaElement.prototype.hideControls=function(){this.elt.controls=!1};var o=function(t,e,i,n){this.callback=t,this.time=e,this.id=i,this.val=n};d.MediaElement.prototype.addCue=function(t,e,i){var n=this._cueIDCounter++,r=new o(e,t,n,i);return this._cues.push(r),this.elt.ontimeupdate||(this.elt.ontimeupdate=this._onTimeUpdate.bind(this)),n},d.MediaElement.prototype.removeCue=function(t){for(var e=0;e<this._cues.length;e++)this._cues[e].id===t&&(console.log(t),this._cues.splice(e,1));0===this._cues.length&&(this.elt.ontimeupdate=null)},d.MediaElement.prototype.clearCues=function(){this._cues=[],this.elt.ontimeupdate=null},d.MediaElement.prototype._onTimeUpdate=function(){for(var t=this.time(),e=0;e<this._cues.length;e++){var i=this._cues[e].time,n=this._cues[e].val;this._prevTime<i&&i<=t&&this._cues[e].callback(n)}this._prevTime=t},d.File=function(t,e){this.file=t,this._pInst=e;var i=t.type.split(\"/\");this.type=i[0],this.subtype=i[1],this.name=t.name,this.size=t.size,this.data=void 0},d.File._createLoader=function(i,n){var t=new FileReader;return t.onload=function(t){var e=new d.File(i);e.data=t.target.result,n(e)},t},d.File._load=function(t,e){if(/^text\\//.test(t.type))d.File._createLoader(t,e).readAsText(t);else if(/^(video|audio)\\//.test(t.type)){var i=new d.File(t);i.data=URL.createObjectURL(t),e(i)}else d.File._createLoader(t,e).readAsDataURL(t)}});","args":" ","x":1241.8071930796466,"y":1605.5009954576954,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":true,"isMediaFile":false,"hidden":true,"exported":true,"isBlob":false,"codeSize":14,"icon":"./static/media/file.5bd43cb8.svg","lineHighLightingStatus":"none"},{"id":"gkxydkf8g","name":"style.css","code":"html, body {\n  margin: 0;\n  padding: 0;\n}\ncanvas {\n  display: block;\n}\n","args":" ","x":1603.8071930796466,"y":1605.5009954576954,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":true,"isMediaFile":false,"hidden":true,"exported":true,"isBlob":false,"codeSize":14,"icon":"./static/media/file.5bd43cb8.svg","lineHighLightingStatus":"none"},{"id":"yit32o4qp","name":"p5.js","code":"/*! p5.js v0.9.0 July 01, 2019 */\n(function(f) {\n  if (typeof exports === 'object' && typeof module !== 'undefined') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd) {\n    define([], f);\n  } else {\n    var g;\n    if (typeof window !== 'undefined') {\n      g = window;\n    } else if (typeof global !== 'undefined') {\n      g = global;\n    } else if (typeof self !== 'undefined') {\n      g = self;\n    } else {\n      g = this;\n    }\n    g.p5 = f();\n  }\n})(function() {\n  var define, module, exports;\n  return (function() {\n    function r(e, n, t) {\n      function o(i, f) {\n        if (!n[i]) {\n          if (!e[i]) {\n            var c = 'function' == typeof require && require;\n            if (!f && c) return c(i, !0);\n            if (u) return u(i, !0);\n            var a = new Error(\"Cannot find module '\" + i + \"'\");\n            throw ((a.code = 'MODULE_NOT_FOUND'), a);\n          }\n          var p = (n[i] = { exports: {} });\n          e[i][0].call(\n            p.exports,\n            function(r) {\n              var n = e[i][1][r];\n              return o(n || r);\n            },\n            p,\n            p.exports,\n            r,\n            e,\n            n,\n            t\n          );\n        }\n        return n[i].exports;\n      }\n      for (var u = 'function' == typeof require && require, i = 0; i < t.length; i++)\n        o(t[i]);\n      return o;\n    }\n    return r;\n  })()(\n    {\n      1: [\n        function(_dereq_, module, exports) {\n          module.exports = {\n            project: {\n              name: 'p5',\n              description:\n                '[![Build Status](https://travis-ci.org/processing/p5.js.svg?branch=master)](https://travis-ci.org/processing/p5.js) [![npm version](https://badge.fury.io/js/p5.svg)](https://www.npmjs.com/package/p5)',\n              version: '0.9.0',\n              url: 'https://github.com/processing/p5.js#readme'\n            },\n            files: {\n              'src/color/color_conversion.js': {\n                name: 'src/color/color_conversion.js',\n                modules: {\n                  'Color Conversion': 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/color/creating_reading.js': {\n                name: 'src/color/creating_reading.js',\n                modules: {\n                  'Creating & Reading': 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/color/p5.Color.js': {\n                name: 'src/color/p5.Color.js',\n                modules: {},\n                classes: {\n                  'p5.Color': 1\n                },\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/color/setting.js': {\n                name: 'src/color/setting.js',\n                modules: {\n                  Setting: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/core/shape/2d_primitives.js': {\n                name: 'src/core/shape/2d_primitives.js',\n                modules: {\n                  '2D Primitives': 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/core/shape/attributes.js': {\n                name: 'src/core/shape/attributes.js',\n                modules: {\n                  Attributes: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/core/shape/curves.js': {\n                name: 'src/core/shape/curves.js',\n                modules: {\n                  Curves: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/core/shape/vertex.js': {\n                name: 'src/core/shape/vertex.js',\n                modules: {\n                  Vertex: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/core/constants.js': {\n                name: 'src/core/constants.js',\n                modules: {\n                  Constants: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/core/environment.js': {\n                name: 'src/core/environment.js',\n                modules: {\n                  Environment: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/core/error_helpers.js': {\n                name: 'src/core/error_helpers.js',\n                modules: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/core/helpers.js': {\n                name: 'src/core/helpers.js',\n                modules: {},\n                classes: {},\n                fors: {},\n                namespaces: {}\n              },\n              'src/core/init.js': {\n                name: 'src/core/init.js',\n                modules: {},\n                classes: {},\n                fors: {},\n                namespaces: {}\n              },\n              'src/core/legacy.js': {\n                name: 'src/core/legacy.js',\n                modules: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/core/main.js': {\n                name: 'src/core/main.js',\n                modules: {\n                  Structure: 1\n                },\n                classes: {\n                  p5: 1\n                },\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/core/p5.Element.js': {\n                name: 'src/core/p5.Element.js',\n                modules: {\n                  DOM: 1\n                },\n                classes: {\n                  'p5.Element': 1\n                },\n                fors: {\n                  'p5.Element': 1\n                },\n                namespaces: {}\n              },\n              'src/core/p5.Graphics.js': {\n                name: 'src/core/p5.Graphics.js',\n                modules: {\n                  Rendering: 1\n                },\n                classes: {\n                  'p5.Graphics': 1\n                },\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/core/p5.Renderer.js': {\n                name: 'src/core/p5.Renderer.js',\n                modules: {},\n                classes: {\n                  'p5.Renderer': 1\n                },\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/core/p5.Renderer2D.js': {\n                name: 'src/core/p5.Renderer2D.js',\n                modules: {},\n                classes: {},\n                fors: {},\n                namespaces: {}\n              },\n              'src/core/rendering.js': {\n                name: 'src/core/rendering.js',\n                modules: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/core/shim.js': {\n                name: 'src/core/shim.js',\n                modules: {},\n                classes: {},\n                fors: {},\n                namespaces: {}\n              },\n              'src/core/structure.js': {\n                name: 'src/core/structure.js',\n                modules: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/core/transform.js': {\n                name: 'src/core/transform.js',\n                modules: {\n                  Transform: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/data/local_storage.js': {\n                name: 'src/data/local_storage.js',\n                modules: {\n                  LocalStorage: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/data/p5.TypedDict.js': {\n                name: 'src/data/p5.TypedDict.js',\n                modules: {\n                  Dictionary: 1\n                },\n                classes: {\n                  'p5.TypedDict': 1,\n                  'p5.StringDict': 1,\n                  'p5.NumberDict': 1\n                },\n                fors: {\n                  'p5.TypedDict': 1,\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/events/acceleration.js': {\n                name: 'src/events/acceleration.js',\n                modules: {\n                  Acceleration: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/events/keyboard.js': {\n                name: 'src/events/keyboard.js',\n                modules: {\n                  Keyboard: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/events/mouse.js': {\n                name: 'src/events/mouse.js',\n                modules: {\n                  Mouse: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/events/touch.js': {\n                name: 'src/events/touch.js',\n                modules: {\n                  Touch: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/image/filters.js': {\n                name: 'src/image/filters.js',\n                modules: {},\n                classes: {},\n                fors: {},\n                namespaces: {}\n              },\n              'src/image/image.js': {\n                name: 'src/image/image.js',\n                modules: {\n                  Image: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/image/loading_displaying.js': {\n                name: 'src/image/loading_displaying.js',\n                modules: {\n                  'Loading & Displaying': 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/image/p5.Image.js': {\n                name: 'src/image/p5.Image.js',\n                modules: {},\n                classes: {\n                  'p5.Image': 1\n                },\n                fors: {},\n                namespaces: {}\n              },\n              'src/image/pixels.js': {\n                name: 'src/image/pixels.js',\n                modules: {\n                  Pixels: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/io/files.js': {\n                name: 'src/io/files.js',\n                modules: {\n                  Input: 1,\n                  Output: 1\n                },\n                classes: {\n                  'p5.PrintWriter': 1\n                },\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/io/p5.Table.js': {\n                name: 'src/io/p5.Table.js',\n                modules: {\n                  Table: 1\n                },\n                classes: {\n                  'p5.Table': 1\n                },\n                fors: {},\n                namespaces: {}\n              },\n              'src/io/p5.TableRow.js': {\n                name: 'src/io/p5.TableRow.js',\n                modules: {},\n                classes: {\n                  'p5.TableRow': 1\n                },\n                fors: {},\n                namespaces: {}\n              },\n              'src/io/p5.XML.js': {\n                name: 'src/io/p5.XML.js',\n                modules: {\n                  XML: 1\n                },\n                classes: {\n                  'p5.XML': 1\n                },\n                fors: {},\n                namespaces: {}\n              },\n              'src/math/calculation.js': {\n                name: 'src/math/calculation.js',\n                modules: {\n                  Calculation: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/math/math.js': {\n                name: 'src/math/math.js',\n                modules: {\n                  Math: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/math/noise.js': {\n                name: 'src/math/noise.js',\n                modules: {\n                  Noise: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/math/p5.Vector.js': {\n                name: 'src/math/p5.Vector.js',\n                modules: {},\n                classes: {\n                  'p5.Vector': 1\n                },\n                fors: {},\n                namespaces: {}\n              },\n              'src/math/random.js': {\n                name: 'src/math/random.js',\n                modules: {\n                  Random: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/math/trigonometry.js': {\n                name: 'src/math/trigonometry.js',\n                modules: {\n                  Trigonometry: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/typography/attributes.js': {\n                name: 'src/typography/attributes.js',\n                modules: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/typography/loading_displaying.js': {\n                name: 'src/typography/loading_displaying.js',\n                modules: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/typography/p5.Font.js': {\n                name: 'src/typography/p5.Font.js',\n                modules: {\n                  Font: 1\n                },\n                classes: {\n                  'p5.Font': 1\n                },\n                fors: {},\n                namespaces: {}\n              },\n              'src/utilities/array_functions.js': {\n                name: 'src/utilities/array_functions.js',\n                modules: {\n                  'Array Functions': 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/utilities/conversion.js': {\n                name: 'src/utilities/conversion.js',\n                modules: {\n                  Conversion: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/utilities/string_functions.js': {\n                name: 'src/utilities/string_functions.js',\n                modules: {\n                  'String Functions': 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/utilities/time_date.js': {\n                name: 'src/utilities/time_date.js',\n                modules: {\n                  'Time & Date': 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/webgl/3d_primitives.js': {\n                name: 'src/webgl/3d_primitives.js',\n                modules: {\n                  '3D Primitives': 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/webgl/interaction.js': {\n                name: 'src/webgl/interaction.js',\n                modules: {\n                  Interaction: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/webgl/light.js': {\n                name: 'src/webgl/light.js',\n                modules: {\n                  Lights: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/webgl/loading.js': {\n                name: 'src/webgl/loading.js',\n                modules: {\n                  '3D Models': 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/webgl/material.js': {\n                name: 'src/webgl/material.js',\n                modules: {\n                  Material: 1\n                },\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/webgl/p5.Camera.js': {\n                name: 'src/webgl/p5.Camera.js',\n                modules: {\n                  Camera: 1\n                },\n                classes: {\n                  'p5.Camera': 1\n                },\n                fors: {\n                  p5: 1,\n                  'p5.Camera': 1\n                },\n                namespaces: {}\n              },\n              'src/webgl/p5.Geometry.js': {\n                name: 'src/webgl/p5.Geometry.js',\n                modules: {},\n                classes: {\n                  'p5.Geometry': 1\n                },\n                fors: {},\n                namespaces: {}\n              },\n              'src/webgl/p5.Matrix.js': {\n                name: 'src/webgl/p5.Matrix.js',\n                modules: {},\n                classes: {\n                  'p5.Matrix': 1\n                },\n                fors: {},\n                namespaces: {}\n              },\n              'src/webgl/p5.RendererGL.Immediate.js': {\n                name: 'src/webgl/p5.RendererGL.Immediate.js',\n                modules: {},\n                classes: {},\n                fors: {},\n                namespaces: {}\n              },\n              'src/webgl/p5.RendererGL.Retained.js': {\n                name: 'src/webgl/p5.RendererGL.Retained.js',\n                modules: {},\n                classes: {},\n                fors: {},\n                namespaces: {}\n              },\n              'src/webgl/p5.RendererGL.js': {\n                name: 'src/webgl/p5.RendererGL.js',\n                modules: {},\n                classes: {\n                  'p5.RendererGL': 1\n                },\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/webgl/p5.Shader.js': {\n                name: 'src/webgl/p5.Shader.js',\n                modules: {\n                  Shaders: 1\n                },\n                classes: {\n                  'p5.Shader': 1\n                },\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/webgl/p5.Texture.js': {\n                name: 'src/webgl/p5.Texture.js',\n                modules: {},\n                classes: {\n                  'p5.Texture': 1\n                },\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'src/webgl/text.js': {\n                name: 'src/webgl/text.js',\n                modules: {},\n                classes: {\n                  ImageInfos: 1,\n                  FontInfo: 1,\n                  Cubic: 1\n                },\n                fors: {},\n                namespaces: {}\n              },\n              'lib/addons/p5.dom.js': {\n                name: 'lib/addons/p5.dom.js',\n                modules: {\n                  'p5.dom': 1\n                },\n                classes: {\n                  'p5.MediaElement': 1,\n                  'p5.File': 1\n                },\n                fors: {\n                  p5: 1,\n                  'p5.Element': 1\n                },\n                namespaces: {}\n              },\n              'lib/addons/p5.sound.js': {\n                name: 'lib/addons/p5.sound.js',\n                modules: {\n                  'p5.sound': 1\n                },\n                classes: {\n                  'p5.SoundFile': 1,\n                  'p5.Amplitude': 1,\n                  'p5.FFT': 1,\n                  'p5.Signal': 1,\n                  'p5.Oscillator': 1,\n                  'p5.SinOsc': 1,\n                  'p5.TriOsc': 1,\n                  'p5.SawOsc': 1,\n                  'p5.SqrOsc': 1,\n                  'p5.Envelope': 1,\n                  'p5.Pulse': 1,\n                  'p5.Noise': 1,\n                  'p5.AudioIn': 1,\n                  'p5.Effect': 1,\n                  'p5.Filter': 1,\n                  'p5.LowPass': 1,\n                  'p5.HighPass': 1,\n                  'p5.BandPass': 1,\n                  'p5.EQ': 1,\n                  'p5.Panner3D': 1,\n                  'p5.Delay': 1,\n                  'p5.Reverb': 1,\n                  'p5.Convolver': 1,\n                  'p5.Phrase': 1,\n                  'p5.Part': 1,\n                  'p5.Score': 1,\n                  'p5.SoundLoop': 1,\n                  'p5.Compressor': 1,\n                  'p5.SoundRecorder': 1,\n                  'p5.PeakDetect': 1,\n                  'p5.Gain': 1,\n                  'p5.AudioVoice': 1,\n                  'p5.MonoSynth': 1,\n                  'p5.PolySynth': 1,\n                  'p5.Distortion': 1\n                },\n                fors: {\n                  'p5.sound': 1,\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              'lib/addons/p5.sound.min.js': {\n                name: 'lib/addons/p5.sound.min.js',\n                modules: {},\n                classes: {},\n                fors: {},\n                namespaces: {}\n              }\n            },\n            modules: {\n              Color: {\n                name: 'Color',\n                submodules: {\n                  'Color Conversion': 1,\n                  'Creating & Reading': 1,\n                  Setting: 1\n                },\n                elements: {},\n                classes: {\n                  'p5.Color': 1\n                },\n                fors: {\n                  p5: 1\n                },\n                namespaces: {},\n                file: 'src/color/p5.Color.js',\n                line: 16\n              },\n              'Color Conversion': {\n                name: 'Color Conversion',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Color',\n                namespace: '',\n                file: 'src/color/color_conversion.js',\n                line: 1,\n                requires: ['core']\n              },\n              'Creating & Reading': {\n                name: 'Creating & Reading',\n                submodules: {},\n                elements: {},\n                classes: {\n                  'p5.Color': 1\n                },\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Color',\n                namespace: '',\n                file: 'src/color/p5.Color.js',\n                line: 16,\n                requires: ['core', 'constants'],\n                description:\n                  '<p>Each color stores the color mode and level maxes that applied at the\\ntime of its construction. These are used to interpret the input arguments\\n(at construction and later for that instance of color) and to format the\\noutput e.g. when <a href=\"#/p5/saturation\">saturation()</a> is requested.</p>\\n<p>Internally we store an array representing the ideal RGBA values in floating\\npoint form, normalized from 0 to 1. From this we calculate the closest\\nscreen color (RGBA levels from 0 to 255) and expose this to the renderer.</p>\\n<p>We also cache normalized, floating point components of the color in various\\nrepresentations as they are calculated. This is done to prevent repeating a\\nconversion that has already been performed.</p>\\n'\n              },\n              Setting: {\n                name: 'Setting',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Color',\n                namespace: '',\n                file: 'src/color/setting.js',\n                line: 1,\n                requires: ['core', 'constants']\n              },\n              Shape: {\n                name: 'Shape',\n                submodules: {\n                  '2D Primitives': 1,\n                  Curves: 1,\n                  Vertex: 1,\n                  '3D Primitives': 1,\n                  '3D Models': 1\n                },\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              '2D Primitives': {\n                name: '2D Primitives',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Shape',\n                namespace: '',\n                file: 'src/core/shape/2d_primitives.js',\n                line: 1,\n                requires: ['core', 'constants']\n              },\n              Attributes: {\n                name: 'Attributes',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Typography',\n                namespace: '',\n                file: 'src/core/shape/attributes.js',\n                line: 1,\n                requires: ['core', 'constants']\n              },\n              Curves: {\n                name: 'Curves',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Shape',\n                namespace: '',\n                file: 'src/core/shape/curves.js',\n                line: 1,\n                requires: ['core']\n              },\n              Vertex: {\n                name: 'Vertex',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Shape',\n                namespace: '',\n                file: 'src/core/shape/vertex.js',\n                line: 1,\n                requires: ['core', 'constants']\n              },\n              Constants: {\n                name: 'Constants',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {},\n                module: 'Constants',\n                file: 'src/core/constants.js',\n                line: 1\n              },\n              Environment: {\n                name: 'Environment',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {},\n                module: 'Environment',\n                file: 'src/core/environment.js',\n                line: 1,\n                requires: ['core', 'constants']\n              },\n              Structure: {\n                name: 'Structure',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {},\n                module: 'IO',\n                file: 'src/core/main.js',\n                line: 1,\n                requires: ['constants']\n              },\n              DOM: {\n                name: 'DOM',\n                submodules: {},\n                elements: {},\n                classes: {\n                  'p5.Element': 1\n                },\n                fors: {\n                  'p5.Element': 1\n                },\n                namespaces: {},\n                module: 'DOM',\n                file: 'src/core/p5.Element.js',\n                line: 11,\n                description:\n                  '<p>Base class for all elements added to a sketch, including canvas,\\ngraphics buffers, and other HTML elements. Methods in blue are\\nincluded in the core functionality, methods in brown are added\\nwith the <a href=\"http://p5js.org/reference/#/libraries/p5.dom\">p5.dom\\nlibrary</a>.\\nIt is not called directly, but <a href=\"#/p5.Element\">p5.Element</a>\\nobjects are created by calling <a href=\"#/p5/createCanvas\">createCanvas</a>, <a href=\"#/p5/createGraphics\">createGraphics</a>,\\nor in the p5.dom library, <a href=\"#/p5/createDiv\">createDiv</a>, <a href=\"#/p5/createImg\">createImg</a>, <a href=\"#/p5/createInput\">createInput</a>, etc.</p>\\n'\n              },\n              Rendering: {\n                name: 'Rendering',\n                submodules: {\n                  undefined: 1\n                },\n                elements: {},\n                classes: {\n                  'p5.RendererGL': 1,\n                  'p5.Graphics': 1,\n                  'p5.Renderer': 1\n                },\n                fors: {\n                  p5: 1\n                },\n                namespaces: {},\n                module: 'Rendering',\n                file: 'src/webgl/p5.RendererGL.js',\n                line: 519,\n                description:\n                  '<p>Thin wrapper around a renderer, to be used for creating a\\ngraphics buffer object. Use this class if you need\\nto draw into an off-screen graphics buffer. The two parameters define the\\nwidth and height in pixels. The fields and methods for this class are\\nextensive, but mirror the normal drawing API for p5.</p>\\n'\n              },\n              Transform: {\n                name: 'Transform',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {},\n                module: 'Transform',\n                file: 'src/core/transform.js',\n                line: 1,\n                requires: ['core', 'constants']\n              },\n              Data: {\n                name: 'Data',\n                submodules: {\n                  LocalStorage: 1,\n                  Dictionary: 1,\n                  'Array Functions': 1,\n                  Conversion: 1,\n                  'String Functions': 1\n                },\n                elements: {},\n                classes: {\n                  'p5.TypedDict': 1,\n                  'p5.StringDict': 1,\n                  'p5.NumberDict': 1\n                },\n                fors: {\n                  p5: 1,\n                  'p5.TypedDict': 1\n                },\n                namespaces: {},\n                file: 'src/data/p5.TypedDict.js',\n                line: 422\n              },\n              LocalStorage: {\n                name: 'LocalStorage',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Data',\n                namespace: '',\n                file: 'src/data/local_storage.js',\n                line: 1,\n                requires: [\n                  'core\\n\\nThis module defines the p5 methods for working with local storage'\n                ]\n              },\n              Dictionary: {\n                name: 'Dictionary',\n                submodules: {},\n                elements: {},\n                classes: {\n                  'p5.TypedDict': 1,\n                  'p5.StringDict': 1,\n                  'p5.NumberDict': 1\n                },\n                fors: {\n                  'p5.TypedDict': 1,\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Data',\n                namespace: '',\n                file: 'src/data/p5.TypedDict.js',\n                line: 422,\n                requires: [\n                  'core\\n\\nThis module defines the p5 methods for the p5 Dictionary classes.\\nThe classes StringDict and NumberDict are for storing and working\\nwith key-value pairs.'\n                ],\n                description:\n                  '<p>Base class for all p5.Dictionary types. Specifically\\n typed Dictionary classes inherit from this class.</p>\\n'\n              },\n              Events: {\n                name: 'Events',\n                submodules: {\n                  Acceleration: 1,\n                  Keyboard: 1,\n                  Mouse: 1,\n                  Touch: 1\n                },\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                namespaces: {}\n              },\n              Acceleration: {\n                name: 'Acceleration',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Events',\n                namespace: '',\n                file: 'src/events/acceleration.js',\n                line: 1,\n                requires: ['core']\n              },\n              Keyboard: {\n                name: 'Keyboard',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Events',\n                namespace: '',\n                file: 'src/events/keyboard.js',\n                line: 1,\n                requires: ['core']\n              },\n              Mouse: {\n                name: 'Mouse',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Events',\n                namespace: '',\n                file: 'src/events/mouse.js',\n                line: 1,\n                requires: ['core', 'constants']\n              },\n              Touch: {\n                name: 'Touch',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Events',\n                namespace: '',\n                file: 'src/events/touch.js',\n                line: 1,\n                requires: ['core']\n              },\n              Image: {\n                name: 'Image',\n                submodules: {\n                  Pixels: 1\n                },\n                elements: {},\n                classes: {\n                  'p5.Image': 1\n                },\n                fors: {\n                  p5: 1\n                },\n                namespaces: {},\n                module: 'Image',\n                file: 'src/image/p5.Image.js',\n                line: 23,\n                requires: ['core'],\n                description:\n                  '<p>Creates a new <a href=\"#/p5.Image\">p5.Image</a>. A <a href=\"#/p5.Image\">p5.Image</a> is a canvas backed representation of an\\nimage.\\n<br><br>\\np5 can display .gif, .jpg and .png images. Images may be displayed\\nin 2D and 3D space. Before an image is used, it must be loaded with the\\n<a href=\"#/p5/loadImage\">loadImage()</a> function. The <a href=\"#/p5.Image\">p5.Image</a> class contains fields for the width and\\nheight of the image, as well as an array called <a href=\"#/p5.Image/pixels\">pixels[]</a> that contains the\\nvalues for every pixel in the image.\\n<br><br>\\nThe methods described below allow easy access to the image&#39;s pixels and\\nalpha channel and simplify the process of compositing.\\n<br><br>\\nBefore using the <a href=\"#/p5.Image/pixels\">pixels[]</a> array, be sure to use the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> method on\\nthe image to make sure that the pixel data is properly loaded.</p>\\n'\n              },\n              'Loading & Displaying': {\n                name: 'Loading & Displaying',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Typography',\n                namespace: '',\n                file: 'src/image/loading_displaying.js',\n                line: 1,\n                requires: ['core']\n              },\n              Pixels: {\n                name: 'Pixels',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Image',\n                namespace: '',\n                file: 'src/image/pixels.js',\n                line: 1,\n                requires: ['core']\n              },\n              IO: {\n                name: 'IO',\n                submodules: {\n                  Structure: 1,\n                  Input: 1,\n                  Output: 1,\n                  Table: 1,\n                  XML: 1,\n                  'Time & Date': 1\n                },\n                elements: {},\n                classes: {\n                  p5: 1,\n                  'p5.PrintWriter': 1,\n                  'p5.Table': 1,\n                  'p5.TableRow': 1,\n                  'p5.XML': 1\n                },\n                fors: {\n                  p5: 1\n                },\n                namespaces: {},\n                file: 'src/io/p5.XML.js',\n                line: 11\n              },\n              Input: {\n                name: 'Input',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'IO',\n                namespace: '',\n                file: 'src/io/files.js',\n                line: 1,\n                requires: ['core']\n              },\n              Output: {\n                name: 'Output',\n                submodules: {},\n                elements: {},\n                classes: {\n                  p5: 1,\n                  'p5.PrintWriter': 1\n                },\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'IO',\n                namespace: '',\n                file: 'src/io/files.js',\n                line: 1238,\n                description:\n                  '<p>This is the p5 instance constructor.</p>\\n<p>A p5 instance holds all the properties and methods related to\\na p5 sketch.  It expects an incoming sketch closure and it can also\\ntake an optional node parameter for attaching the generated p5 canvas\\nto a node.  The sketch closure takes the newly created p5 instance as\\nits sole argument and may optionally set <a href=\"#/p5/preload\">preload()</a>, <a href=\"#/p5/setup\">setup()</a>, and/or\\n<a href=\"#/p5/draw\">draw()</a> properties on it for running a sketch.</p>\\n<p>A p5 sketch can run in &quot;global&quot; or &quot;instance&quot; mode:\\n&quot;global&quot;   - all properties and methods are attached to the window\\n&quot;instance&quot; - all properties and methods are bound to this p5 object</p>\\n'\n              },\n              Table: {\n                name: 'Table',\n                submodules: {},\n                elements: {},\n                classes: {\n                  'p5.Table': 1,\n                  'p5.TableRow': 1\n                },\n                fors: {},\n                is_submodule: 1,\n                namespaces: {},\n                module: 'IO',\n                namespace: '',\n                file: 'src/io/p5.TableRow.js',\n                line: 11,\n                requires: ['core'],\n                description:\n                  '<p><a href=\"#/p5.Table\">Table</a> objects store data with multiple rows and columns, much\\nlike in a traditional spreadsheet. Tables can be generated from\\nscratch, dynamically, or using data from an existing file.</p>\\n'\n              },\n              XML: {\n                name: 'XML',\n                submodules: {},\n                elements: {},\n                classes: {\n                  'p5.XML': 1\n                },\n                fors: {},\n                is_submodule: 1,\n                namespaces: {},\n                module: 'IO',\n                namespace: '',\n                file: 'src/io/p5.XML.js',\n                line: 11,\n                requires: ['core'],\n                description:\n                  '<p>XML is a representation of an XML object, able to parse XML code. Use\\n<a href=\"#/p5/loadXML\">loadXML()</a> to load external XML files and create XML objects.</p>\\n'\n              },\n              Math: {\n                name: 'Math',\n                submodules: {\n                  Calculation: 1,\n                  Noise: 1,\n                  Random: 1,\n                  Trigonometry: 1\n                },\n                elements: {},\n                classes: {\n                  'p5.Vector': 1\n                },\n                fors: {\n                  p5: 1\n                },\n                namespaces: {},\n                module: 'Math',\n                file: 'src/math/p5.Vector.js',\n                line: 12,\n                requires: ['core'],\n                description:\n                  '<p>A class to describe a two or three dimensional vector, specifically\\na Euclidean (also known as geometric) vector. A vector is an entity\\nthat has both magnitude and direction. The datatype, however, stores\\nthe components of the vector (x, y for 2D, and x, y, z for 3D). The magnitude\\nand direction can be accessed via the methods <a href=\"#/p5/mag\">mag()</a> and <a href=\"#/p5/heading\">heading()</a>.\\n<br><br>\\nIn many of the p5.js examples, you will see <a href=\"#/p5.Vector\">p5.Vector</a> used to describe a\\nposition, velocity, or acceleration. For example, if you consider a rectangle\\nmoving across the screen, at any given instant it has a position (a vector\\nthat points from the origin to its location), a velocity (the rate at which\\nthe object&#39;s position changes per time unit, expressed as a vector), and\\nacceleration (the rate at which the object&#39;s velocity changes per time\\nunit, expressed as a vector).\\n<br><br>\\nSince vectors represent groupings of values, we cannot simply use\\ntraditional addition/multiplication/etc. Instead, we&#39;ll need to do some\\n&quot;vector&quot; math, which is made easy by the methods inside the <a href=\"#/p5.Vector\">p5.Vector</a> class.</p>\\n'\n              },\n              Calculation: {\n                name: 'Calculation',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Math',\n                namespace: '',\n                file: 'src/math/calculation.js',\n                line: 1,\n                requires: ['core']\n              },\n              Noise: {\n                name: 'Noise',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Math',\n                namespace: '',\n                file: 'src/math/noise.js',\n                line: 14,\n                requires: ['core']\n              },\n              Random: {\n                name: 'Random',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Math',\n                namespace: '',\n                file: 'src/math/random.js',\n                line: 1,\n                requires: ['core']\n              },\n              Trigonometry: {\n                name: 'Trigonometry',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Math',\n                namespace: '',\n                file: 'src/math/trigonometry.js',\n                line: 1,\n                requires: ['core', 'constants']\n              },\n              Typography: {\n                name: 'Typography',\n                submodules: {\n                  Attributes: 1,\n                  'Loading & Displaying': 1,\n                  Font: 1\n                },\n                elements: {},\n                classes: {\n                  'p5.Font': 1\n                },\n                fors: {\n                  p5: 1\n                },\n                namespaces: {},\n                file: 'src/typography/p5.Font.js',\n                line: 15\n              },\n              Font: {\n                name: 'Font',\n                submodules: {},\n                elements: {},\n                classes: {\n                  'p5.Font': 1\n                },\n                fors: {},\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Typography',\n                namespace: '',\n                file: 'src/typography/p5.Font.js',\n                line: 15,\n                description:\n                  '<p>This module defines the <a href=\"#/p5.Font\">p5.Font</a> class and functions for\\ndrawing text to the display canvas.</p>\\n',\n                requires: ['core', 'constants']\n              },\n              'Array Functions': {\n                name: 'Array Functions',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Data',\n                namespace: '',\n                file: 'src/utilities/array_functions.js',\n                line: 1,\n                requires: ['core']\n              },\n              Conversion: {\n                name: 'Conversion',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Data',\n                namespace: '',\n                file: 'src/utilities/conversion.js',\n                line: 1,\n                requires: ['core']\n              },\n              'String Functions': {\n                name: 'String Functions',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Data',\n                namespace: '',\n                file: 'src/utilities/string_functions.js',\n                line: 1,\n                requires: ['core']\n              },\n              'Time & Date': {\n                name: 'Time & Date',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'IO',\n                namespace: '',\n                file: 'src/utilities/time_date.js',\n                line: 1,\n                requires: ['core']\n              },\n              '3D Primitives': {\n                name: '3D Primitives',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Shape',\n                namespace: '',\n                file: 'src/webgl/3d_primitives.js',\n                line: 1,\n                requires: ['core', 'p5.Geometry']\n              },\n              'Lights, Camera': {\n                name: 'Lights, Camera',\n                submodules: {\n                  Interaction: 1,\n                  Lights: 1,\n                  Material: 1,\n                  Camera: 1,\n                  Shaders: 1\n                },\n                elements: {},\n                classes: {\n                  'p5.Camera': 1,\n                  'p5.Geometry': 1,\n                  'p5.Matrix': 1,\n                  'p5.Shader': 1,\n                  'p5.Texture': 1,\n                  ImageInfos: 1,\n                  FontInfo: 1,\n                  Cubic: 1\n                },\n                fors: {\n                  p5: 1,\n                  'p5.Camera': 1\n                },\n                namespaces: {},\n                file: 'src/webgl/text.js',\n                line: 259\n              },\n              Interaction: {\n                name: 'Interaction',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Lights, Camera',\n                namespace: '',\n                file: 'src/webgl/interaction.js',\n                line: 1,\n                requires: ['core']\n              },\n              Lights: {\n                name: 'Lights',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Lights, Camera',\n                namespace: '',\n                file: 'src/webgl/light.js',\n                line: 1,\n                requires: ['core']\n              },\n              '3D Models': {\n                name: '3D Models',\n                submodules: {},\n                elements: {},\n                classes: {},\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Shape',\n                namespace: '',\n                file: 'src/webgl/loading.js',\n                line: 1,\n                requires: ['core', 'p5.Geometry']\n              },\n              Material: {\n                name: 'Material',\n                submodules: {},\n                elements: {},\n                classes: {\n                  'p5.Texture': 1\n                },\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Lights, Camera',\n                namespace: '',\n                file: 'src/webgl/p5.Texture.js',\n                line: 14,\n                requires: ['core'],\n                description: '<p>This module defines the p5.Texture class</p>\\n'\n              },\n              Camera: {\n                name: 'Camera',\n                submodules: {},\n                elements: {},\n                classes: {\n                  'p5.Camera': 1\n                },\n                fors: {\n                  p5: 1,\n                  'p5.Camera': 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Lights, Camera',\n                namespace: '',\n                file: 'src/webgl/p5.Camera.js',\n                line: 209,\n                requires: ['core'],\n                description:\n                  '<p>This class describes a camera for use in p5&#39;s\\n<a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5\">\\nWebGL mode</a>. It contains camera position, orientation, and projection\\ninformation necessary for rendering a 3D scene.</p>\\n<p>New p5.Camera objects can be made through the\\n<a href=\"#/p5/createCamera\">createCamera()</a> function and controlled through\\nthe methods described below. A camera created in this way will use a default\\nposition in the scene and a default perspective projection until these\\nproperties are changed through the various methods available. It is possible\\nto create multiple cameras, in which case the current camera\\ncan be set through the <a href=\"#/p5/setCamera\">setCamera()</a> method.</p>\\n<p>Note:\\nThe methods below operate in two coordinate systems: the &#39;world&#39; coordinate\\nsystem describe positions in terms of their relationship to the origin along\\nthe X, Y and Z axes whereas the camera&#39;s &#39;local&#39; coordinate system\\ndescribes positions from the camera&#39;s point of view: left-right, up-down,\\nand forward-backward. The <a href=\"#/p5.Camera/move\">move()</a> method,\\nfor instance, moves the camera along its own axes, whereas the\\n<a href=\"#/p5.Camera/setPosition\">setPosition()</a>\\nmethod sets the camera&#39;s position in world-space.</p>\\n'\n              },\n              Shaders: {\n                name: 'Shaders',\n                submodules: {},\n                elements: {},\n                classes: {\n                  'p5.Shader': 1\n                },\n                fors: {\n                  p5: 1\n                },\n                is_submodule: 1,\n                namespaces: {},\n                module: 'Lights, Camera',\n                namespace: '',\n                file: 'src/webgl/p5.Shader.js',\n                line: 13,\n                description: '<p>This module defines the p5.Shader class</p>\\n',\n                requires: ['core']\n              },\n              'p5.dom': {\n                name: 'p5.dom',\n                submodules: {},\n                elements: {},\n                classes: {\n                  'p5.MediaElement': 1,\n                  'p5.File': 1\n                },\n                fors: {\n                  p5: 1,\n                  'p5.Element': 1\n                },\n                namespaces: {},\n                module: 'p5.dom',\n                file: 'lib/addons/p5.dom.js',\n                line: 3323,\n                description:\n                  \"<p><p>The web is much more than just canvas and p5.dom makes it easy to interact\\nwith other HTML5 objects, including text, hyperlink, image, input, video,\\naudio, and webcam.</p></p>\\n<p><p>There is a set of creation methods, DOM manipulation methods, and\\nan extended <a href=\\\"#/p5.Element\\\">p5.Element</a> that supports a range of HTML elements. See the\\n<a href='https://github.com/processing/p5.js/wiki/Beyond-the-canvas'>\\nbeyond the canvas tutorial</a> for a full overview of how this addon works.</p>\\n<p><p>Methods and properties shown in black are part of the p5.js core, items in\\nblue are part of the p5.dom library. You will need to include an extra file\\nin order to access the blue functions. See the\\n<a href='http://p5js.org/libraries/#using-a-library'>using a library</a>\\nsection for information on how to include this library. p5.dom comes with\\n<a href='http://p5js.org/download'>p5 complete</a> or you can download the single file\\n<a href='https://raw.githubusercontent.com/lmccart/p5.js/master/lib/addons/p5.dom.js'>\\nhere</a>.</p></p>\\n<p><p>See <a href='https://github.com/processing/p5.js/wiki/Beyond-the-canvas'>tutorial: beyond the canvas</a>\\nfor more info on how to use this library.</a></p>\\n\",\n                tag: 'main',\n                itemtype: 'main'\n              },\n              'p5.sound': {\n                name: 'p5.sound',\n                submodules: {},\n                elements: {},\n                classes: {\n                  'p5.sound': 1,\n                  'p5.SoundFile': 1,\n                  'p5.Amplitude': 1,\n                  'p5.FFT': 1,\n                  'p5.Signal': 1,\n                  'p5.Oscillator': 1,\n                  'p5.SinOsc': 1,\n                  'p5.TriOsc': 1,\n                  'p5.SawOsc': 1,\n                  'p5.SqrOsc': 1,\n                  'p5.Envelope': 1,\n                  'p5.Pulse': 1,\n                  'p5.Noise': 1,\n                  'p5.AudioIn': 1,\n                  'p5.Effect': 1,\n                  'p5.Filter': 1,\n                  'p5.LowPass': 1,\n                  'p5.HighPass': 1,\n                  'p5.BandPass': 1,\n                  'p5.EQ': 1,\n                  'p5.Panner3D': 1,\n                  'p5.Delay': 1,\n                  'p5.Reverb': 1,\n                  'p5.Convolver': 1,\n                  'p5.Phrase': 1,\n                  'p5.Part': 1,\n                  'p5.Score': 1,\n                  'p5.SoundLoop': 1,\n                  'p5.Compressor': 1,\n                  'p5.SoundRecorder': 1,\n                  'p5.PeakDetect': 1,\n                  'p5.Gain': 1,\n                  'p5.AudioVoice': 1,\n                  'p5.MonoSynth': 1,\n                  'p5.PolySynth': 1,\n                  'p5.Distortion': 1\n                },\n                fors: {\n                  'p5.sound': 1,\n                  p5: 1\n                },\n                namespaces: {},\n                module: 'p5.sound',\n                file: 'lib/addons/p5.sound.js',\n                line: 12767,\n                description:\n                  '<p>p5.sound extends p5 with <a href=\"http://caniuse.com/audio-api\"\\ntarget=\"_blank\">Web Audio</a> functionality including audio input,\\nplayback, analysis and synthesis.\\n<br/><br/>\\n<a href=\"#/p5.SoundFile\"><b>p5.SoundFile</b></a>: Load and play sound files.<br/>\\n<a href=\"#/p5.Amplitude\"><b>p5.Amplitude</b></a>: Get the current volume of a sound.<br/>\\n<a href=\"#/p5.AudioIn\"><b>p5.AudioIn</b></a>: Get sound from an input source, typically\\n  a computer microphone.<br/>\\n<a href=\"#/p5.FFT\"><b>p5.FFT</b></a>: Analyze the frequency of sound. Returns\\n  results from the frequency spectrum or time domain (waveform).<br/>\\n<a href=\"#/p5.Oscillator\"><b>p5.Oscillator</b></a>: Generate Sine,\\n  Triangle, Square and Sawtooth waveforms. Base class of\\n  <a href=\"#/p5.Noise\">p5.Noise</a> and <a href=\"#/p5.Pulse\">p5.Pulse</a>.\\n  <br/>\\n<a href=\"#/p5.Envelope\"><b>p5.Envelope</b></a>: An Envelope is a series\\n  of fades over time. Often used to control an object&#39;s\\n  output gain level as an &quot;ADSR Envelope&quot; (Attack, Decay,\\n  Sustain, Release). Can also modulate other parameters.<br/>\\n<a href=\"#/p5.Delay\"><b>p5.Delay</b></a>: A delay effect with\\n  parameters for feedback, delayTime, and lowpass filter.<br/>\\n<a href=\"#/p5.Filter\"><b>p5.Filter</b></a>: Filter the frequency range of a\\n  sound.\\n<br/>\\n<a href=\"#/p5.Reverb\"><b>p5.Reverb</b></a>: Add reverb to a sound by specifying\\n  duration and decay. <br/>\\n<b><a href=\"#/p5.Convolver\">p5.Convolver</a>:</b> Extends\\n<a href=\"#/p5.Reverb\">p5.Reverb</a> to simulate the sound of real\\n  physical spaces through convolution.<br/>\\n<b><a href=\"#/p5.SoundRecorder\">p5.SoundRecorder</a></b>: Record sound for playback\\n  / save the .wav file.\\n<b><a href=\"#/p5.Phrase\">p5.Phrase</a></b>, <b><a href=\"#/p5.Part\">p5.Part</a></b> and\\n<b><a href=\"#/p5.Score\">p5.Score</a></b>: Compose musical sequences.\\n<br/><br/>\\np5.sound is on <a href=\"https://github.com/therewasaguy/p5.sound/\">GitHub</a>.\\nDownload the latest version\\n<a href=\"https://github.com/therewasaguy/p5.sound/blob/master/lib/p5.sound.js\">here</a>.</p>\\n',\n                tag: 'main',\n                itemtype: 'main'\n              }\n            },\n            classes: {\n              p5: {\n                name: 'p5',\n                shortname: 'p5',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'IO',\n                submodule: 'Output',\n                namespace: '',\n                file: 'src/core/main.js',\n                line: 15,\n                description:\n                  '<p>This is the p5 instance constructor.</p>\\n<p>A p5 instance holds all the properties and methods related to\\na p5 sketch.  It expects an incoming sketch closure and it can also\\ntake an optional node parameter for attaching the generated p5 canvas\\nto a node.  The sketch closure takes the newly created p5 instance as\\nits sole argument and may optionally set <a href=\"#/p5/preload\">preload()</a>, <a href=\"#/p5/setup\">setup()</a>, and/or\\n<a href=\"#/p5/draw\">draw()</a> properties on it for running a sketch.</p>\\n<p>A p5 sketch can run in &quot;global&quot; or &quot;instance&quot; mode:\\n&quot;global&quot;   - all properties and methods are attached to the window\\n&quot;instance&quot; - all properties and methods are bound to this p5 object</p>\\n',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'sketch',\n                    description:\n                      '<p>a closure that can set optional <a href=\"#/p5/preload\">preload()</a>,\\n                             <a href=\"#/p5/setup\">setup()</a>, and/or <a href=\"#/p5/draw\">draw()</a> properties on the\\n                             given p5 instance</p>\\n',\n                    type: 'Function'\n                  },\n                  {\n                    name: 'node',\n                    description: '<p>element to attach canvas to</p>\\n',\n                    type: 'HTMLElement',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'a p5 instance',\n                  type: 'P5'\n                }\n              },\n              'p5.Color': {\n                name: 'p5.Color',\n                shortname: 'p5.Color',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'Color',\n                submodule: 'Creating & Reading',\n                namespace: '',\n                file: 'src/color/p5.Color.js',\n                line: 16,\n                description:\n                  '<p>Each color stores the color mode and level maxes that applied at the\\ntime of its construction. These are used to interpret the input arguments\\n(at construction and later for that instance of color) and to format the\\noutput e.g. when <a href=\"#/p5/saturation\">saturation()</a> is requested.</p>\\n<p>Internally we store an array representing the ideal RGBA values in floating\\npoint form, normalized from 0 to 1. From this we calculate the closest\\nscreen color (RGBA levels from 0 to 255) and expose this to the renderer.</p>\\n<p>We also cache normalized, floating point components of the color in various\\nrepresentations as they are calculated. This is done to prevent repeating a\\nconversion that has already been performed.</p>\\n'\n              },\n              'p5.Element': {\n                name: 'p5.Element',\n                shortname: 'p5.Element',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'DOM',\n                submodule: 'DOM',\n                namespace: '',\n                file: 'src/core/p5.Element.js',\n                line: 11,\n                description:\n                  '<p>Base class for all elements added to a sketch, including canvas,\\ngraphics buffers, and other HTML elements. Methods in blue are\\nincluded in the core functionality, methods in brown are added\\nwith the <a href=\"http://p5js.org/reference/#/libraries/p5.dom\">p5.dom\\nlibrary</a>.\\nIt is not called directly, but <a href=\"#/p5.Element\">p5.Element</a>\\nobjects are created by calling <a href=\"#/p5/createCanvas\">createCanvas</a>, <a href=\"#/p5/createGraphics\">createGraphics</a>,\\nor in the p5.dom library, <a href=\"#/p5/createDiv\">createDiv</a>, <a href=\"#/p5/createImg\">createImg</a>, <a href=\"#/p5/createInput\">createInput</a>, etc.</p>\\n',\n                params: [\n                  {\n                    name: 'elt',\n                    description: '<p>DOM node that is wrapped</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'pInst',\n                    description: '<p>pointer to p5 instance</p>\\n',\n                    type: 'P5',\n                    optional: true\n                  }\n                ]\n              },\n              'p5.Graphics': {\n                name: 'p5.Graphics',\n                shortname: 'p5.Graphics',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'Rendering',\n                submodule: 'Rendering',\n                namespace: '',\n                file: 'src/core/p5.Graphics.js',\n                line: 12,\n                description:\n                  '<p>Thin wrapper around a renderer, to be used for creating a\\ngraphics buffer object. Use this class if you need\\nto draw into an off-screen graphics buffer. The two parameters define the\\nwidth and height in pixels. The fields and methods for this class are\\nextensive, but mirror the normal drawing API for p5.</p>\\n',\n                extends: 'p5.Element',\n                params: [\n                  {\n                    name: 'w',\n                    description: '<p>width</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'h',\n                    description: '<p>height</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'renderer',\n                    description: '<p>the renderer to use, either P2D or WEBGL</p>\\n',\n                    type: 'Constant'\n                  },\n                  {\n                    name: 'pInst',\n                    description: '<p>pointer to p5 instance</p>\\n',\n                    type: 'P5',\n                    optional: true\n                  }\n                ]\n              },\n              'p5.Renderer': {\n                name: 'p5.Renderer',\n                shortname: 'p5.Renderer',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'Rendering',\n                submodule: 'Rendering',\n                namespace: '',\n                file: 'src/core/p5.Renderer.js',\n                line: 12,\n                description:\n                  '<p>Main graphics and rendering context, as well as the base API\\nimplementation for p5.js &quot;core&quot;. To be used as the superclass for\\nRenderer2D and Renderer3D classes, respecitvely.</p>\\n',\n                is_constructor: 1,\n                extends: 'p5.Element',\n                params: [\n                  {\n                    name: 'elt',\n                    description: '<p>DOM node that is wrapped</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'pInst',\n                    description: '<p>pointer to p5 instance</p>\\n',\n                    type: 'P5',\n                    optional: true\n                  },\n                  {\n                    name: 'isMainCanvas',\n                    description: '<p>whether we&#39;re using it as main canvas</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ]\n              },\n              'p5.TypedDict': {\n                name: 'p5.TypedDict',\n                shortname: 'p5.TypedDict',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'Data',\n                submodule: 'Dictionary',\n                namespace: '',\n                file: 'src/data/p5.TypedDict.js',\n                line: 84,\n                description:\n                  '<p>Base class for all p5.Dictionary types. Specifically\\n typed Dictionary classes inherit from this class.</p>\\n'\n              },\n              'p5.StringDict': {\n                name: 'p5.StringDict',\n                shortname: 'p5.StringDict',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'Data',\n                submodule: 'Dictionary',\n                namespace: '',\n                file: 'src/data/p5.TypedDict.js',\n                line: 403,\n                description: '<p>A simple Dictionary class for Strings.</p>\\n',\n                extends: 'p5.TypedDict'\n              },\n              'p5.NumberDict': {\n                name: 'p5.NumberDict',\n                shortname: 'p5.NumberDict',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'Data',\n                submodule: 'Dictionary',\n                namespace: '',\n                file: 'src/data/p5.TypedDict.js',\n                line: 422,\n                description: '<p>A simple Dictionary class for Numbers.</p>\\n',\n                extends: 'p5.TypedDict'\n              },\n              'p5.Image': {\n                name: 'p5.Image',\n                shortname: 'p5.Image',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'Image',\n                submodule: 'Image',\n                namespace: '',\n                file: 'src/image/p5.Image.js',\n                line: 23,\n                description:\n                  '<p>Creates a new <a href=\"#/p5.Image\">p5.Image</a>. A <a href=\"#/p5.Image\">p5.Image</a> is a canvas backed representation of an\\nimage.\\n<br><br>\\np5 can display .gif, .jpg and .png images. Images may be displayed\\nin 2D and 3D space. Before an image is used, it must be loaded with the\\n<a href=\"#/p5/loadImage\">loadImage()</a> function. The <a href=\"#/p5.Image\">p5.Image</a> class contains fields for the width and\\nheight of the image, as well as an array called <a href=\"#/p5.Image/pixels\">pixels[]</a> that contains the\\nvalues for every pixel in the image.\\n<br><br>\\nThe methods described below allow easy access to the image&#39;s pixels and\\nalpha channel and simplify the process of compositing.\\n<br><br>\\nBefore using the <a href=\"#/p5.Image/pixels\">pixels[]</a> array, be sure to use the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> method on\\nthe image to make sure that the pixel data is properly loaded.</p>\\n',\n                example: [\n                  '\\n<div><code>\\nfunction setup() {\\n  let img = createImage(100, 100); // same as new p5.Image(100, 100);\\n  img.loadPixels();\\n  createCanvas(100, 100);\\n  background(0);\\n\\n  // helper for writing color to array\\n  function writeColor(image, x, y, red, green, blue, alpha) {\\n    let index = (x + y * width) * 4;\\n    image.pixels[index] = red;\\n    image.pixels[index + 1] = green;\\n    image.pixels[index + 2] = blue;\\n    image.pixels[index + 3] = alpha;\\n  }\\n\\n  let x, y;\\n  // fill with random colors\\n  for (y = 0; y < img.height; y++) {\\n    for (x = 0; x < img.width; x++) {\\n      let red = random(255);\\n      let green = random(255);\\n      let blue = random(255);\\n      let alpha = 255;\\n      writeColor(img, x, y, red, green, blue, alpha);\\n    }\\n  }\\n\\n  // draw a red line\\n  y = 0;\\n  for (x = 0; x < img.width; x++) {\\n    writeColor(img, x, y, 255, 0, 0, 255);\\n  }\\n\\n  // draw a green line\\n  y = img.height - 1;\\n  for (x = 0; x < img.width; x++) {\\n    writeColor(img, x, y, 0, 255, 0, 255);\\n  }\\n\\n  img.updatePixels();\\n  image(img, 0, 0);\\n}\\n</code></div>'\n                ],\n                params: [\n                  {\n                    name: 'width',\n                    description: '',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'height',\n                    description: '',\n                    type: 'Number'\n                  }\n                ]\n              },\n              'p5.PrintWriter': {\n                name: 'p5.PrintWriter',\n                shortname: 'p5.PrintWriter',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'IO',\n                submodule: 'Output',\n                namespace: '',\n                file: 'src/io/files.js',\n                line: 1238,\n                params: [\n                  {\n                    name: 'filename',\n                    description: '',\n                    type: 'String'\n                  },\n                  {\n                    name: 'extension',\n                    description: '',\n                    type: 'String',\n                    optional: true\n                  }\n                ]\n              },\n              'p5.Table': {\n                name: 'p5.Table',\n                shortname: 'p5.Table',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'IO',\n                submodule: 'Table',\n                namespace: '',\n                file: 'src/io/p5.Table.js',\n                line: 35,\n                description:\n                  '<p><a href=\"#/p5.Table\">Table</a> objects store data with multiple rows and columns, much\\nlike in a traditional spreadsheet. Tables can be generated from\\nscratch, dynamically, or using data from an existing file.</p>\\n',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'rows',\n                    description: '<p>An array of p5.TableRow objects</p>\\n',\n                    type: 'p5.TableRow[]',\n                    optional: true\n                  }\n                ]\n              },\n              'p5.TableRow': {\n                name: 'p5.TableRow',\n                shortname: 'p5.TableRow',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'IO',\n                submodule: 'Table',\n                namespace: '',\n                file: 'src/io/p5.TableRow.js',\n                line: 11,\n                description:\n                  '<p>A TableRow object represents a single row of data values,\\nstored in columns, from a table.</p>\\n<p>A Table Row contains both an ordered array, and an unordered\\nJSON object.</p>\\n',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'str',\n                    description:\n                      '<p>optional: populate the row with a\\n                            string of values, separated by the\\n                            separator</p>\\n',\n                    type: 'String',\n                    optional: true\n                  },\n                  {\n                    name: 'separator',\n                    description: '<p>comma separated values (csv) by default</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ]\n              },\n              'p5.XML': {\n                name: 'p5.XML',\n                shortname: 'p5.XML',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'IO',\n                submodule: 'XML',\n                namespace: '',\n                file: 'src/io/p5.XML.js',\n                line: 11,\n                description:\n                  '<p>XML is a representation of an XML object, able to parse XML code. Use\\n<a href=\"#/p5/loadXML\">loadXML()</a> to load external XML files and create XML objects.</p>\\n',\n                is_constructor: 1,\n                example: [\n                  '\\n<div class=\\'norender\\'><code>\\n// The following short XML file called \"mammals.xml\" is parsed\\n// in the code below.\\n//\\n// <?xml version=\"1.0\"?>\\n// &lt;mammals&gt;\\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n// &lt;/mammals&gt;\\n\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  let children = xml.getChildren(\\'animal\\');\\n\\n  for (let i = 0; i < children.length; i++) {\\n    let id = children[i].getNum(\\'id\\');\\n    let coloring = children[i].getString(\\'species\\');\\n    let name = children[i].getContent();\\n    print(id + \\', \\' + coloring + \\', \\' + name);\\n  }\\n}\\n\\n// Sketch prints:\\n// 0, Capra hircus, Goat\\n// 1, Panthera pardus, Leopard\\n// 2, Equus zebra, Zebra\\n</code></div>'\n                ],\n                alt: 'no image displayed'\n              },\n              'p5.Vector': {\n                name: 'p5.Vector',\n                shortname: 'p5.Vector',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'Math',\n                submodule: 'Math',\n                namespace: '',\n                file: 'src/math/p5.Vector.js',\n                line: 12,\n                description:\n                  '<p>A class to describe a two or three dimensional vector, specifically\\na Euclidean (also known as geometric) vector. A vector is an entity\\nthat has both magnitude and direction. The datatype, however, stores\\nthe components of the vector (x, y for 2D, and x, y, z for 3D). The magnitude\\nand direction can be accessed via the methods <a href=\"#/p5/mag\">mag()</a> and <a href=\"#/p5/heading\">heading()</a>.\\n<br><br>\\nIn many of the p5.js examples, you will see <a href=\"#/p5.Vector\">p5.Vector</a> used to describe a\\nposition, velocity, or acceleration. For example, if you consider a rectangle\\nmoving across the screen, at any given instant it has a position (a vector\\nthat points from the origin to its location), a velocity (the rate at which\\nthe object&#39;s position changes per time unit, expressed as a vector), and\\nacceleration (the rate at which the object&#39;s velocity changes per time\\nunit, expressed as a vector).\\n<br><br>\\nSince vectors represent groupings of values, we cannot simply use\\ntraditional addition/multiplication/etc. Instead, we&#39;ll need to do some\\n&quot;vector&quot; math, which is made easy by the methods inside the <a href=\"#/p5.Vector\">p5.Vector</a> class.</p>\\n',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>x component of the vector</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y component of the vector</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'z',\n                    description: '<p>z component of the vector</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\nlet v1 = createVector(40, 50);\\nlet v2 = createVector(40, 50);\\n\\nellipse(v1.x, v1.y, 50, 50);\\nellipse(v2.x, v2.y, 50, 50);\\nv1.add(v2);\\nellipse(v1.x, v1.y, 50, 50);\\n</code>\\n</div>'\n                ],\n                alt:\n                  '2 white ellipses. One center-left the other bottom right and off canvas'\n              },\n              'p5.Font': {\n                name: 'p5.Font',\n                shortname: 'p5.Font',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'Typography',\n                submodule: 'Font',\n                namespace: '',\n                file: 'src/typography/p5.Font.js',\n                line: 15,\n                description: '<p>Base class for font handling</p>\\n',\n                params: [\n                  {\n                    name: 'pInst',\n                    description: '<p>pointer to p5 instance</p>\\n',\n                    type: 'P5',\n                    optional: true\n                  }\n                ]\n              },\n              'p5.Camera': {\n                name: 'p5.Camera',\n                shortname: 'p5.Camera',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'Lights, Camera',\n                submodule: 'Camera',\n                namespace: '',\n                file: 'src/webgl/p5.Camera.js',\n                line: 209,\n                description:\n                  '<p>This class describes a camera for use in p5&#39;s\\n<a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5\">\\nWebGL mode</a>. It contains camera position, orientation, and projection\\ninformation necessary for rendering a 3D scene.</p>\\n<p>New p5.Camera objects can be made through the\\n<a href=\"#/p5/createCamera\">createCamera()</a> function and controlled through\\nthe methods described below. A camera created in this way will use a default\\nposition in the scene and a default perspective projection until these\\nproperties are changed through the various methods available. It is possible\\nto create multiple cameras, in which case the current camera\\ncan be set through the <a href=\"#/p5/setCamera\">setCamera()</a> method.</p>\\n<p>Note:\\nThe methods below operate in two coordinate systems: the &#39;world&#39; coordinate\\nsystem describe positions in terms of their relationship to the origin along\\nthe X, Y and Z axes whereas the camera&#39;s &#39;local&#39; coordinate system\\ndescribes positions from the camera&#39;s point of view: left-right, up-down,\\nand forward-backward. The <a href=\"#/p5.Camera/move\">move()</a> method,\\nfor instance, moves the camera along its own axes, whereas the\\n<a href=\"#/p5.Camera/setPosition\">setPosition()</a>\\nmethod sets the camera&#39;s position in world-space.</p>\\n',\n                params: [\n                  {\n                    name: 'rendererGL',\n                    description: '<p>instance of WebGL renderer</p>\\n',\n                    type: 'RendererGL'\n                  }\n                ],\n                example: [\n                  \"\\n<div>\\n<code>\\nlet cam;\\nlet delta = 0.01;\\n\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  normalMaterial();\\n  cam = createCamera();\\n  // set initial pan angle\\n  cam.pan(-0.8);\\n}\\n\\nfunction draw() {\\n  background(200);\\n\\n  // pan camera according to angle 'delta'\\n  cam.pan(delta);\\n\\n  // every 160 frames, switch direction\\n  if (frameCount % 160 === 0) {\\n    delta *= -1;\\n  }\\n\\n  rotateX(frameCount * 0.01);\\n  translate(-100, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'camera view pans left and right across a series of rotating 3D boxes.'\n              },\n              'p5.Geometry': {\n                name: 'p5.Geometry',\n                shortname: 'p5.Geometry',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'Lights, Camera',\n                namespace: '',\n                file: 'src/webgl/p5.Geometry.js',\n                line: 6,\n                description: '<p>p5 Geometry class</p>\\n',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'detailX',\n                    description: '<p>number of vertices on horizontal surface</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'detailY',\n                    description: '<p>number of vertices on horizontal surface</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'callback',\n                    description: '<p>function to call upon object instantiation.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ]\n              },\n              'p5.Shader': {\n                name: 'p5.Shader',\n                shortname: 'p5.Shader',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'Lights, Camera',\n                submodule: 'Shaders',\n                namespace: '',\n                file: 'src/webgl/p5.Shader.js',\n                line: 13,\n                description: '<p>Shader class for WEBGL Mode</p>\\n',\n                params: [\n                  {\n                    name: 'renderer',\n                    description:\n                      '<p>an instance of p5.RendererGL that\\nwill provide the GL context for this new p5.Shader</p>\\n',\n                    type: 'p5.RendererGL'\n                  },\n                  {\n                    name: 'vertSrc',\n                    description: '<p>source code for the vertex shader (as a string)</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'fragSrc',\n                    description:\n                      '<p>source code for the fragment shader (as a string)</p>\\n',\n                    type: 'String'\n                  }\n                ]\n              },\n              'p5.MediaElement': {\n                name: 'p5.MediaElement',\n                shortname: 'p5.MediaElement',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.dom',\n                submodule: 'p5.dom',\n                namespace: '',\n                file: 'lib/addons/p5.dom.js',\n                line: 2228,\n                description:\n                  '<p>Extends <a href=\"#/p5.Element\">p5.Element</a> to handle audio and video. In addition to the methods\\nof <a href=\"#/p5.Element\">p5.Element</a>, it also contains methods for controlling media. It is not\\ncalled directly, but <a href=\"#/p5.MediaElement\">p5.MediaElement</a>s are created by calling <a href=\"#/p5/createVideo\">createVideo</a>,\\n<a href=\"#/p5/createAudio\">createAudio</a>, and <a href=\"#/p5/createCapture\">createCapture</a>.</p>\\n',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'elt',\n                    description: '<p>DOM node that is wrapped</p>\\n',\n                    type: 'String'\n                  }\n                ]\n              },\n              'p5.File': {\n                name: 'p5.File',\n                shortname: 'p5.File',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.dom',\n                submodule: 'p5.dom',\n                namespace: '',\n                file: 'lib/addons/p5.dom.js',\n                line: 3323,\n                description:\n                  '<p>Base class for a file.\\nUsed for Element.drop and createFileInput.</p>\\n',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'file',\n                    description: '<p>File that is wrapped</p>\\n',\n                    type: 'File'\n                  }\n                ]\n              },\n              'p5.sound': {\n                name: 'p5.sound',\n                shortname: 'p5.sound',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: ''\n              },\n              'p5.SoundFile': {\n                name: 'p5.SoundFile',\n                shortname: 'p5.SoundFile',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 1645,\n                description:\n                  '<p>SoundFile object with a path to a file.</p>\\n\\n<p>The p5.SoundFile may not be available immediately because\\nit loads the file information asynchronously.</p>\\n\\n<p>To do something with the sound as soon as it loads\\npass the name of a function as the second parameter.</p>\\n\\n<p>Only one file path is required. However, audio file formats\\n(i.e. mp3, ogg, wav and m4a/aac) are not supported by all\\nweb browsers. If you want to ensure compatability, instead of a single\\nfile path, you may include an Array of filepaths, and the browser will\\nchoose a format that works.</p>',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'path',\n                    description:\n                      '<p>path to a sound file (String). Optionally,\\n                             you may include multiple file formats in\\n                             an array. Alternately, accepts an object\\n                             from the HTML5 File API, or a p5.File.</p>\\n',\n                    type: 'String|Array'\n                  },\n                  {\n                    name: 'successCallback',\n                    description: '<p>Name of a function to call once file loads</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>Name of a function to call if file fails to\\n                                    load. This function will receive an error or\\n                                   XMLHttpRequest object with information\\n                                   about what went wrong.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'whileLoadingCallback',\n                    description:\n                      '<p>Name of a function to call while file\\n                                           is loading. That function will\\n                                           receive progress of the request to\\n                                           load the sound file\\n                                           (between 0 and 1) as its first\\n                                           parameter. This progress\\n                                           does not account for the additional\\n                                           time needed to decode the audio data.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\n\\nfunction preload() {\\n  soundFormats('mp3', 'ogg');\\n  mySound = loadSound('assets/doorbell.mp3');\\n}\\n\\nfunction setup() {\\n  mySound.setVolume(0.1);\\n  mySound.play();\\n}\\n\\n </code></div>\"\n                ]\n              },\n              'p5.Amplitude': {\n                name: 'p5.Amplitude',\n                shortname: 'p5.Amplitude',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 3179,\n                description:\n                  '<p>Amplitude measures volume between 0.0 and 1.0.\\nListens to all p5sound by default, or use setInput()\\nto listen to a specific sound source. Accepts an optional\\nsmoothing value, which defaults to 0.</p>\\n',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'smoothing',\n                    description:\n                      '<p>between 0.0 and .999 to smooth\\n                           amplitude readings (defaults to 0)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nvar sound, amplitude, cnv;\\n\\nfunction preload(){\\n  sound = loadSound('assets/beat.mp3');\\n}\\nfunction setup() {\\n  cnv = createCanvas(100,100);\\n  amplitude = new p5.Amplitude();\\n\\n  // start / stop the sound when canvas is clicked\\n  cnv.mouseClicked(function() {\\n    if (sound.isPlaying() ){\\n      sound.stop();\\n    } else {\\n      sound.play();\\n    }\\n  });\\n}\\nfunction draw() {\\n  background(0);\\n  fill(255);\\n  var level = amplitude.getLevel();\\n  var size = map(level, 0, 1, 0, 200);\\n  ellipse(width/2, height/2, size, size);\\n}\\n\\n</code></div>\"\n                ]\n              },\n              'p5.FFT': {\n                name: 'p5.FFT',\n                shortname: 'p5.FFT',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 3458,\n                description:\n                  '<p>FFT (Fast Fourier Transform) is an analysis algorithm that\\nisolates individual\\n<a href=\"https://en.wikipedia.org/wiki/Audio_frequency\">\\naudio frequencies</a> within a waveform.</p>\\n\\n<p>Once instantiated, a p5.FFT object can return an array based on\\ntwo types of analyses: <br> • <code>FFT.waveform()</code> computes\\namplitude values along the time domain. The array indices correspond\\nto samples across a brief moment in time. Each value represents\\namplitude of the waveform at that sample of time.<br>\\n• <code>FFT.analyze() </code> computes amplitude values along the\\nfrequency domain. The array indices correspond to frequencies (i.e.\\npitches), from the lowest to the highest that humans can hear. Each\\nvalue represents amplitude at that slice of the frequency spectrum.\\nUse with <code>getEnergy()</code> to measure amplitude at specific\\nfrequencies, or within a range of frequencies. </p>\\n\\n<p>FFT analyzes a very short snapshot of sound called a sample\\nbuffer. It returns an array of amplitude measurements, referred\\nto as <code>bins</code>. The array is 1024 bins long by default.\\nYou can change the bin array length, but it must be a power of 2\\nbetween 16 and 1024 in order for the FFT algorithm to function\\ncorrectly. The actual size of the FFT buffer is twice the\\nnumber of bins, so given a standard sample rate, the buffer is\\n2048/44100 seconds long.</p>',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'smoothing',\n                    description:\n                      '<p>Smooth results of Freq Spectrum.\\n                              0.0 &lt; smoothing &lt; 1.0.\\n                              Defaults to 0.8.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'bins',\n                    description:\n                      '<p>Length of resulting array.\\n                          Must be a power of two between\\n                          16 and 1024. Defaults to 1024.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nfunction preload(){\\n  sound = loadSound('assets/Damscray_DancingTiger.mp3');\\n}\\n\\nfunction setup(){\\n  var cnv = createCanvas(100,100);\\n  cnv.mouseClicked(togglePlay);\\n  fft = new p5.FFT();\\n  sound.amp(0.2);\\n}\\n\\nfunction draw(){\\n  background(0);\\n\\n  var spectrum = fft.analyze();\\n  noStroke();\\n  fill(0,255,0); // spectrum is green\\n  for (var i = 0; i< spectrum.length; i++){\\n    var x = map(i, 0, spectrum.length, 0, width);\\n    var h = -height + map(spectrum[i], 0, 255, height, 0);\\n    rect(x, height, width / spectrum.length, h )\\n  }\\n\\n  var waveform = fft.waveform();\\n  noFill();\\n  beginShape();\\n  stroke(255,0,0); // waveform is red\\n  strokeWeight(1);\\n  for (var i = 0; i< waveform.length; i++){\\n    var x = map(i, 0, waveform.length, 0, width);\\n    var y = map( waveform[i], -1, 1, 0, height);\\n    vertex(x,y);\\n  }\\n  endShape();\\n\\n  text('click to play/pause', 4, 10);\\n}\\n\\n// fade sound if mouse is over canvas\\nfunction togglePlay() {\\n  if (sound.isPlaying()) {\\n    sound.pause();\\n  } else {\\n    sound.loop();\\n  }\\n}\\n</code></div>\"\n                ]\n              },\n              'p5.Signal': {\n                name: 'p5.Signal',\n                shortname: 'p5.Signal',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 5223,\n                description:\n                  \"<p>p5.Signal is a constant audio-rate signal used by p5.Oscillator\\nand p5.Envelope for modulation math.</p>\\n\\n<p>This is necessary because Web Audio is processed on a seprate clock.\\nFor example, the p5 draw loop runs about 60 times per second. But\\nthe audio clock must process samples 44100 times per second. If we\\nwant to add a value to each of those samples, we can&#39;t do it in the\\ndraw loop, but we can do it by adding a constant-rate audio signal.&lt;/p.\\n\\n<p>This class mostly functions behind the scenes in p5.sound, and returns\\na Tone.Signal from the Tone.js library by Yotam Mann.\\nIf you want to work directly with audio signals for modular\\nsynthesis, check out\\n<a href='http://bit.ly/1oIoEng' target=_'blank'>tone.js.</a></p>\",\n                is_constructor: 1,\n                return: {\n                  description: 'A Signal object from the Tone.js library',\n                  type: 'Tone.Signal'\n                },\n                example: [\n                  \"\\n<div><code>\\nfunction setup() {\\n  carrier = new p5.Oscillator('sine');\\n  carrier.amp(1); // set amplitude\\n  carrier.freq(220); // set frequency\\n  carrier.start(); // start oscillating\\n\\n  modulator = new p5.Oscillator('sawtooth');\\n  modulator.disconnect();\\n  modulator.amp(1);\\n  modulator.freq(4);\\n  modulator.start();\\n\\n  // Modulator's default amplitude range is -1 to 1.\\n  // Multiply it by -200, so the range is -200 to 200\\n  // then add 220 so the range is 20 to 420\\n  carrier.freq( modulator.mult(-200).add(220) );\\n}\\n</code></div>\"\n                ]\n              },\n              'p5.Oscillator': {\n                name: 'p5.Oscillator',\n                shortname: 'p5.Oscillator',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 5369,\n                description:\n                  '<p>Creates a signal that oscillates between -1.0 and 1.0.\\nBy default, the oscillation takes the form of a sinusoidal\\nshape (&#39;sine&#39;). Additional types include &#39;triangle&#39;,\\n&#39;sawtooth&#39; and &#39;square&#39;. The frequency defaults to\\n440 oscillations per second (440Hz, equal to the pitch of an\\n&#39;A&#39; note).</p>\\n\\n<p>Set the type of oscillation with setType(), or by instantiating a\\nspecific oscillator: <a href=\"/reference/#/p5.SinOsc\">p5.SinOsc</a>, <a\\nhref=\"/reference/#/p5.TriOsc\">p5.TriOsc</a>, <a\\nhref=\"/reference/#/p5.SqrOsc\">p5.SqrOsc</a>, or <a\\nhref=\"/reference/#/p5.SawOsc\">p5.SawOsc</a>.\\n</p>',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'freq',\n                    description: '<p>frequency defaults to 440Hz</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'type',\n                    description:\n                      '<p>type of oscillator. Options:\\n                       &#39;sine&#39; (default), &#39;triangle&#39;,\\n                       &#39;sawtooth&#39;, &#39;square&#39;</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nvar osc;\\nvar playing = false;\\n\\nfunction setup() {\\n  backgroundColor = color(255,0,255);\\n  textAlign(CENTER);\\n\\n  osc = new p5.Oscillator();\\n  osc.setType('sine');\\n  osc.freq(240);\\n  osc.amp(0);\\n  osc.start();\\n}\\n\\nfunction draw() {\\n  background(backgroundColor)\\n  text('click to play', width/2, height/2);\\n}\\n\\nfunction mouseClicked() {\\n  if (mouseX > 0 && mouseX < width && mouseY < height && mouseY > 0) {\\n    if (!playing) {\\n      // ramp amplitude to 0.5 over 0.05 seconds\\n      osc.amp(0.5, 0.05);\\n      playing = true;\\n      backgroundColor = color(0,255,255);\\n    } else {\\n      // ramp amplitude to 0 over 0.5 seconds\\n      osc.amp(0, 0.5);\\n      playing = false;\\n      backgroundColor = color(255,0,255);\\n    }\\n  }\\n}\\n</code> </div>\"\n                ]\n              },\n              'p5.SinOsc': {\n                name: 'p5.SinOsc',\n                shortname: 'p5.SinOsc',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 5810,\n                description:\n                  '<p>Constructor: <code>new p5.SinOsc()</code>.\\nThis creates a Sine Wave Oscillator and is\\nequivalent to <code> new p5.Oscillator(&#39;sine&#39;)\\n</code> or creating a p5.Oscillator and then calling\\nits method <code>setType(&#39;sine&#39;)</code>.\\nSee p5.Oscillator for methods.</p>\\n',\n                is_constructor: 1,\n                extends: 'p5.Oscillator',\n                params: [\n                  {\n                    name: 'freq',\n                    description: '<p>Set the frequency</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ]\n              },\n              'p5.TriOsc': {\n                name: 'p5.TriOsc',\n                shortname: 'p5.TriOsc',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 5827,\n                description:\n                  '<p>Constructor: <code>new p5.TriOsc()</code>.\\nThis creates a Triangle Wave Oscillator and is\\nequivalent to <code>new p5.Oscillator(&#39;triangle&#39;)\\n</code> or creating a p5.Oscillator and then calling\\nits method <code>setType(&#39;triangle&#39;)</code>.\\nSee p5.Oscillator for methods.</p>\\n',\n                is_constructor: 1,\n                extends: 'p5.Oscillator',\n                params: [\n                  {\n                    name: 'freq',\n                    description: '<p>Set the frequency</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ]\n              },\n              'p5.SawOsc': {\n                name: 'p5.SawOsc',\n                shortname: 'p5.SawOsc',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 5844,\n                description:\n                  '<p>Constructor: <code>new p5.SawOsc()</code>.\\nThis creates a SawTooth Wave Oscillator and is\\nequivalent to <code> new p5.Oscillator(&#39;sawtooth&#39;)\\n</code> or creating a p5.Oscillator and then calling\\nits method <code>setType(&#39;sawtooth&#39;)</code>.\\nSee p5.Oscillator for methods.</p>\\n',\n                is_constructor: 1,\n                extends: 'p5.Oscillator',\n                params: [\n                  {\n                    name: 'freq',\n                    description: '<p>Set the frequency</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ]\n              },\n              'p5.SqrOsc': {\n                name: 'p5.SqrOsc',\n                shortname: 'p5.SqrOsc',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 5861,\n                description:\n                  '<p>Constructor: <code>new p5.SqrOsc()</code>.\\nThis creates a Square Wave Oscillator and is\\nequivalent to <code> new p5.Oscillator(&#39;square&#39;)\\n</code> or creating a p5.Oscillator and then calling\\nits method <code>setType(&#39;square&#39;)</code>.\\nSee p5.Oscillator for methods.</p>\\n',\n                is_constructor: 1,\n                extends: 'p5.Oscillator',\n                params: [\n                  {\n                    name: 'freq',\n                    description: '<p>Set the frequency</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ]\n              },\n              'p5.Envelope': {\n                name: 'p5.Envelope',\n                shortname: 'p5.Envelope',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 6316,\n                description:\n                  '<p>Envelopes are pre-defined amplitude distribution over time.\\nTypically, envelopes are used to control the output volume\\nof an object, a series of fades referred to as Attack, Decay,\\nSustain and Release (\\n<a href=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">ADSR</a>\\n). Envelopes can also control other Web Audio Parameters—for example, a p5.Envelope can\\ncontrol an Oscillator&#39;s frequency like this: <code>osc.freq(env)</code>.</p>\\n<p>Use <code><a href=\"#/p5.Envelope/setRange\">setRange</a></code> to change the attack/release level.\\nUse <code><a href=\"#/p5.Envelope/setADSR\">setADSR</a></code> to change attackTime, decayTime, sustainPercent and releaseTime.</p>\\n<p>Use the <code><a href=\"#/p5.Envelope/play\">play</a></code> method to play the entire envelope,\\nthe <code><a href=\"#/p5.Envelope/ramp\">ramp</a></code> method for a pingable trigger,\\nor <code><a href=\"#/p5.Envelope/triggerAttack\">triggerAttack</a></code>/\\n<code><a href=\"#/p5.Envelope/triggerRelease\">triggerRelease</a></code> to trigger noteOn/noteOff.</p>',\n                is_constructor: 1,\n                example: [\n                  \"\\n<div><code>\\nvar attackLevel = 1.0;\\nvar releaseLevel = 0;\\n\\nvar attackTime = 0.001;\\nvar decayTime = 0.2;\\nvar susPercent = 0.2;\\nvar releaseTime = 0.5;\\n\\nvar env, triOsc;\\n\\nfunction setup() {\\n  var cnv = createCanvas(100, 100);\\n\\n  textAlign(CENTER);\\n  text('click to play', width/2, height/2);\\n\\n  env = new p5.Envelope();\\n  env.setADSR(attackTime, decayTime, susPercent, releaseTime);\\n  env.setRange(attackLevel, releaseLevel);\\n\\n  triOsc = new p5.Oscillator('triangle');\\n  triOsc.amp(env);\\n  triOsc.start();\\n  triOsc.freq(220);\\n\\n  cnv.mousePressed(playEnv);\\n}\\n\\nfunction playEnv()  {\\n  env.play();\\n}\\n</code></div>\"\n                ]\n              },\n              'p5.Pulse': {\n                name: 'p5.Pulse',\n                shortname: 'p5.Pulse',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 7114,\n                description:\n                  '<p>Creates a Pulse object, an oscillator that implements\\nPulse Width Modulation.\\nThe pulse is created with two oscillators.\\nAccepts a parameter for frequency, and to set the\\nwidth between the pulses. See <a href=\"\\nhttp://p5js.org/reference/#/p5.Oscillator\">\\n<code>p5.Oscillator</code> for a full list of methods.</p>\\n',\n                extends: 'p5.Oscillator',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'freq',\n                    description: '<p>Frequency in oscillations per second (Hz)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'w',\n                    description:\n                      '<p>Width between the pulses (0 to 1.0,\\n                       defaults to 0)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div><code>\\nvar pulse;\\nfunction setup() {\\n  background(0);\\n\\n  // Create and start the pulse wave oscillator\\n  pulse = new p5.Pulse();\\n  pulse.amp(0.5);\\n  pulse.freq(220);\\n  pulse.start();\\n}\\n\\nfunction draw() {\\n  var w = map(mouseX, 0, width, 0, 1);\\n  w = constrain(w, 0, 1);\\n  pulse.width(w)\\n}\\n</code></div>'\n                ]\n              },\n              'p5.Noise': {\n                name: 'p5.Noise',\n                shortname: 'p5.Noise',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 7293,\n                description:\n                  '<p>Noise is a type of oscillator that generates a buffer with random values.</p>\\n',\n                extends: 'p5.Oscillator',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'type',\n                    description:\n                      '<p>Type of noise can be &#39;white&#39; (default),\\n                     &#39;brown&#39; or &#39;pink&#39;.</p>\\n',\n                    type: 'String'\n                  }\n                ]\n              },\n              'p5.AudioIn': {\n                name: 'p5.AudioIn',\n                shortname: 'p5.AudioIn',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 7441,\n                description:\n                  '<p>Get audio from an input, i.e. your computer&#39;s microphone.</p>\\n\\n<p>Turn the mic on/off with the start() and stop() methods. When the mic\\nis on, its volume can be measured with getLevel or by connecting an\\nFFT object.</p>\\n\\n<p>If you want to hear the AudioIn, use the .connect() method.\\nAudioIn does not connect to p5.sound output by default to prevent\\nfeedback.</p>\\n\\n<p><em>Note: This uses the <a href=\"http://caniuse.com/stream\">getUserMedia/\\nStream</a> API, which is not supported by certain browsers. Access in Chrome browser\\nis limited to localhost and https, but access over http may be limited.</em></p>',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>A function to call if there is an error\\n                                  accessing the AudioIn. For example,\\n                                  Safari and iOS devices do not\\n                                  currently allow microphone access.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div><code>\\nvar mic;\\nfunction setup(){\\n  mic = new p5.AudioIn()\\n  mic.start();\\n}\\nfunction draw(){\\n  background(0);\\n  micLevel = mic.getLevel();\\n  ellipse(width/2, constrain(height-micLevel*height*5, 0, height), 10, 10);\\n}\\n</code></div>'\n                ]\n              },\n              'p5.Effect': {\n                name: 'p5.Effect',\n                shortname: 'p5.Effect',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 8357,\n                description:\n                  '<p>Effect is a base class for audio effects in p5. <br>\\nThis module handles the nodes and methods that are \\ncommon and useful for current and future effects.</p>\\n<p>This class is extended by <a href=\"/reference/#/p5.Distortion\">p5.Distortion</a>, \\n<a href=\"/reference/#/p5.Compressor\">p5.Compressor</a>,\\n<a href=\"/reference/#/p5.Delay\">p5.Delay</a>, \\n<a href=\"/reference/#/p5.Filter\">p5.Filter</a>, \\n<a href=\"/reference/#/p5.Reverb\">p5.Reverb</a>.</p>\\n',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'ac',\n                    description: '<p>Reference to the audio context of the p5 object</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  },\n                  {\n                    name: 'input',\n                    description: '<p>Gain Node effect wrapper</p>\\n',\n                    type: 'AudioNode',\n                    optional: true\n                  },\n                  {\n                    name: 'output',\n                    description: '<p>Gain Node effect wrapper</p>\\n',\n                    type: 'AudioNode',\n                    optional: true\n                  },\n                  {\n                    name: '_drywet',\n                    description: '<p>Tone.JS CrossFade node (defaults to value: 1)</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  },\n                  {\n                    name: 'wet',\n                    description:\n                      '<p>Effects that extend this class should connect\\n                             to the wet signal to this gain node, so that dry and wet \\n                             signals are mixed properly.</p>\\n',\n                    type: 'AudioNode',\n                    optional: true\n                  }\n                ]\n              },\n              'p5.Filter': {\n                name: 'p5.Filter',\n                shortname: 'p5.Filter',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 8499,\n                description:\n                  '<p><p>A p5.Filter uses a Web Audio Biquad Filter to filter\\nthe frequency response of an input source. Subclasses\\ninclude:</p></p>\\n<ul>\\n<li><a href=\"/reference/#/p5.LowPass\"><code>p5.LowPass</code></a>:\\nAllows frequencies below the cutoff frequency to pass through,\\nand attenuates frequencies above the cutoff.<br/></li>\\n<li><a href=\"/reference/#/p5.HighPass\"><code>p5.HighPass</code></a>:\\nThe opposite of a lowpass filter. <br/></li>\\n<li><a href=\"/reference/#/p5.BandPass\"><code>p5.BandPass</code></a>:\\nAllows a range of frequencies to pass through and attenuates\\nthe frequencies below and above this frequency range.<br/></li>\\n</ul>\\n<p>The <code>.res()</code> method controls either width of the\\nbandpass, or resonance of the low/highpass cutoff frequency.</p>\\n<p>This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>.<br>Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, \\n<a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and \\n<a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available.</p>\\n',\n                extends: 'p5.Effect',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'type',\n                    description:\n                      '<p>&#39;lowpass&#39; (default), &#39;highpass&#39;, &#39;bandpass&#39;</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div><code>\\nvar fft, noise, filter;\\n\\nfunction setup() {\\n  fill(255, 40, 255);\\n\\n  filter = new p5.BandPass();\\n\\n  noise = new p5.Noise();\\n  // disconnect unfiltered noise,\\n  // and connect to filter\\n  noise.disconnect();\\n  noise.connect(filter);\\n  noise.start();\\n\\n  fft = new p5.FFT();\\n}\\n\\nfunction draw() {\\n  background(30);\\n\\n  // set the BandPass frequency based on mouseX\\n  var freq = map(mouseX, 0, width, 20, 10000);\\n  filter.freq(freq);\\n  // give the filter a narrow band (lower res = wider bandpass)\\n  filter.res(50);\\n\\n  // draw filtered spectrum\\n  var spectrum = fft.analyze();\\n  noStroke();\\n  for (var i = 0; i < spectrum.length; i++) {\\n    var x = map(i, 0, spectrum.length, 0, width);\\n    var h = -height + map(spectrum[i], 0, 255, height, 0);\\n    rect(x, height, width/spectrum.length, h);\\n  }\\n\\n  isMouseOverCanvas();\\n}\\n\\nfunction isMouseOverCanvas() {\\n  var mX = mouseX, mY = mouseY;\\n  if (mX > 0 && mX < width && mY < height && mY > 0) {\\n    noise.amp(0.5, 0.2);\\n  } else {\\n    noise.amp(0, 0.2);\\n  }\\n}\\n</code></div>'\n                ]\n              },\n              'p5.LowPass': {\n                name: 'p5.LowPass',\n                shortname: 'p5.LowPass',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 8730,\n                description:\n                  '<p>Constructor: <code>new p5.LowPass()</code> Filter.\\nThis is the same as creating a p5.Filter and then calling\\nits method <code>setType(&#39;lowpass&#39;)</code>.\\nSee p5.Filter for methods.</p>\\n',\n                is_constructor: 1,\n                extends: 'p5.Filter'\n              },\n              'p5.HighPass': {\n                name: 'p5.HighPass',\n                shortname: 'p5.HighPass',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 8744,\n                description:\n                  '<p>Constructor: <code>new p5.HighPass()</code> Filter.\\nThis is the same as creating a p5.Filter and then calling\\nits method <code>setType(&#39;highpass&#39;)</code>.\\nSee p5.Filter for methods.</p>\\n',\n                is_constructor: 1,\n                extends: 'p5.Filter'\n              },\n              'p5.BandPass': {\n                name: 'p5.BandPass',\n                shortname: 'p5.BandPass',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 8758,\n                description:\n                  '<p>Constructor: <code>new p5.BandPass()</code> Filter.\\nThis is the same as creating a p5.Filter and then calling\\nits method <code>setType(&#39;bandpass&#39;)</code>.\\nSee p5.Filter for methods.</p>\\n',\n                is_constructor: 1,\n                extends: 'p5.Filter'\n              },\n              'p5.EQ': {\n                name: 'p5.EQ',\n                shortname: 'p5.EQ',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 8829,\n                description:\n                  '<p>p5.EQ is an audio effect that performs the function of a multiband\\naudio equalizer. Equalization is used to adjust the balance of\\nfrequency compoenents of an audio signal. This process is commonly used\\nin sound production and recording to change the waveform before it reaches\\na sound output device. EQ can also be used as an audio effect to create\\ninteresting distortions by filtering out parts of the spectrum. p5.EQ is\\nbuilt using a chain of Web Audio Biquad Filter Nodes and can be\\ninstantiated with 3 or 8 bands. Bands can be added or removed from\\nthe EQ by directly modifying p5.EQ.bands (the array that stores filters).</p>\\n<p>This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>.\\nMethods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>,\\n<a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and\\n<a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available.</p>\\n',\n                is_constructor: 1,\n                extends: 'p5.Effect',\n                params: [\n                  {\n                    name: '_eqsize',\n                    description: '<p>Constructor will accept 3 or 8, defaults to 3</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'p5.EQ object',\n                  type: 'Object'\n                },\n                example: [\n                  \"\\n<div><code>\\nvar eq;\\nvar band_names;\\nvar band_index;\\n\\nvar soundFile, play;\\n\\nfunction preload() {\\n  soundFormats('mp3', 'ogg');\\n  soundFile = loadSound('assets/beat');\\n}\\n\\nfunction setup() {\\n  eq = new p5.EQ(3);\\n  soundFile.disconnect();\\n  eq.process(soundFile);\\n\\n  band_names = ['lows','mids','highs'];\\n  band_index = 0;\\n  play = false;\\n  textAlign(CENTER);\\n}\\n\\nfunction draw() {\\n  background(30);\\n  noStroke();\\n  fill(255);\\n  text('click to kill',50,25);\\n\\n  fill(255, 40, 255);\\n  textSize(26);\\n  text(band_names[band_index],50,55);\\n\\n  fill(255);\\n  textSize(9);\\n  text('space = play/pause',50,80);\\n}\\n\\n//If mouse is over canvas, cycle to the next band and kill the frequency\\nfunction mouseClicked() {\\n  for (var i = 0; i < eq.bands.length; i++) {\\n    eq.bands[i].gain(0);\\n  }\\n  eq.bands[band_index].gain(-40);\\n  if (mouseX > 0 && mouseX < width && mouseY < height && mouseY > 0) {\\n    band_index === 2 ? band_index = 0 : band_index++;\\n  }\\n}\\n\\n//use space bar to trigger play / pause\\nfunction keyPressed() {\\n  if (key===' ') {\\n    play = !play\\n    play ? soundFile.loop() : soundFile.pause();\\n  }\\n}\\n</code></div>\"\n                ]\n              },\n              'p5.Panner3D': {\n                name: 'p5.Panner3D',\n                shortname: 'p5.Panner3D',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 9021,\n                description:\n                  '<p>Panner3D is based on the <a title=\"Web Audio Panner docs\"  href=\\n\"https://developer.mozilla.org/en-US/docs/Web/API/PannerNode\">\\nWeb Audio Spatial Panner Node</a>.\\nThis panner is a spatial processing node that allows audio to be positioned\\nand oriented in 3D space.</p>\\n<p>The position is relative to an <a title=\"Web Audio Listener docs\" href=\\n\"https://developer.mozilla.org/en-US/docs/Web/API/AudioListener\">\\nAudio Context Listener</a>, which can be accessed\\nby <code>p5.soundOut.audiocontext.listener</code></p>\\n',\n                is_constructor: 1\n              },\n              'p5.Delay': {\n                name: 'p5.Delay',\n                shortname: 'p5.Delay',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 9472,\n                description:\n                  '<p>Delay is an echo effect. It processes an existing sound source,\\nand outputs a delayed version of that sound. The p5.Delay can\\nproduce different effects depending on the delayTime, feedback,\\nfilter, and type. In the example below, a feedback of 0.5 (the\\ndefaul value) will produce a looping delay that decreases in\\nvolume by 50% each repeat. A filter will cut out the high\\nfrequencies so that the delay does not sound as piercing as the\\noriginal source.</p>\\n<p>This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>.<br>Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, \\n<a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and \\n<a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available.</p>\\n',\n                extends: 'p5.Effect',\n                is_constructor: 1,\n                example: [\n                  \"\\n<div><code>\\nvar noise, env, delay;\\n\\nfunction setup() {\\n  background(0);\\n  noStroke();\\n  fill(255);\\n  textAlign(CENTER);\\n  text('click to play', width/2, height/2);\\n\\n  noise = new p5.Noise('brown');\\n  noise.amp(0);\\n  noise.start();\\n\\n  delay = new p5.Delay();\\n\\n  // delay.process() accepts 4 parameters:\\n  // source, delayTime, feedback, filter frequency\\n  // play with these numbers!!\\n  delay.process(noise, .12, .7, 2300);\\n\\n  // play the noise with an envelope,\\n  // a series of fades ( time / value pairs )\\n  env = new p5.Envelope(.01, 0.2, .2, .1);\\n}\\n\\n// mouseClick triggers envelope\\nfunction mouseClicked() {\\n  // is mouse over canvas?\\n  if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\\n    env.play(noise);\\n  }\\n}\\n</code></div>\"\n                ]\n              },\n              'p5.Reverb': {\n                name: 'p5.Reverb',\n                shortname: 'p5.Reverb',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 9749,\n                description:\n                  '<p>Reverb adds depth to a sound through a large number of decaying\\nechoes. It creates the perception that sound is occurring in a\\nphysical space. The p5.Reverb has paramters for Time (how long does the\\nreverb last) and decayRate (how much the sound decays with each echo)\\nthat can be set with the .set() or .process() methods. The p5.Convolver\\nextends p5.Reverb allowing you to recreate the sound of actual physical\\nspaces through convolution.</p>\\n<p>This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>.\\nMethods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>,\\n<a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and\\n<a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available.</p>\\n',\n                extends: 'p5.Effect',\n                is_constructor: 1,\n                example: [\n                  \"\\n<div><code>\\nvar soundFile, reverb;\\nfunction preload() {\\n  soundFile = loadSound('assets/Damscray_DancingTiger.mp3');\\n}\\n\\nfunction setup() {\\n  reverb = new p5.Reverb();\\n  soundFile.disconnect(); // so we'll only hear reverb...\\n\\n  // connect soundFile to reverb, process w/\\n  // 3 second reverbTime, decayRate of 2%\\n  reverb.process(soundFile, 3, 2);\\n  soundFile.play();\\n}\\n</code></div>\"\n                ]\n              },\n              'p5.Convolver': {\n                name: 'p5.Convolver',\n                shortname: 'p5.Convolver',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 9920,\n                description:\n                  '<p>p5.Convolver extends p5.Reverb. It can emulate the sound of real\\nphysical spaces through a process called <a href=\"\\nhttps://en.wikipedia.org/wiki/Convolution_reverb#Real_space_simulation\">\\nconvolution</a>.</p>\\n\\n<p>Convolution multiplies any audio input by an &quot;impulse response&quot;\\nto simulate the dispersion of sound over time. The impulse response is\\ngenerated from an audio file that you provide. One way to\\ngenerate an impulse response is to pop a balloon in a reverberant space\\nand record the echo. Convolution can also be used to experiment with\\nsound.</p>\\n\\n<p>Use the method <code>createConvolution(path)</code> to instantiate a\\np5.Convolver with a path to your impulse response audio file.</p>',\n                extends: 'p5.Effect',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'path',\n                    description: '<p>path to a sound file</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description: '<p>function to call when loading succeeds</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>function to call if loading fails.\\n                                   This function will receive an error or\\n                                   XMLHttpRequest object with information\\n                                   about what went wrong.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nvar cVerb, sound;\\nfunction preload() {\\n  // We have both MP3 and OGG versions of all sound assets\\n  soundFormats('ogg', 'mp3');\\n\\n  // Try replacing 'bx-spring' with other soundfiles like\\n  // 'concrete-tunnel' 'small-plate' 'drum' 'beatbox'\\n  cVerb = createConvolver('assets/bx-spring.mp3');\\n\\n  // Try replacing 'Damscray_DancingTiger' with\\n  // 'beat', 'doorbell', lucky_dragons_-_power_melody'\\n  sound = loadSound('assets/Damscray_DancingTiger.mp3');\\n}\\n\\nfunction setup() {\\n  // disconnect from master output...\\n  sound.disconnect();\\n\\n  // ...and process with cVerb\\n  // so that we only hear the convolution\\n  cVerb.process(sound);\\n\\n  sound.play();\\n}\\n</code></div>\"\n                ]\n              },\n              'p5.Phrase': {\n                name: 'p5.Phrase',\n                shortname: 'p5.Phrase',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 10476,\n                description:\n                  '<p>A phrase is a pattern of musical events over time, i.e.\\na series of notes and rests.</p>\\n\\n<p>Phrases must be added to a p5.Part for playback, and\\neach part can play multiple phrases at the same time.\\nFor example, one Phrase might be a kick drum, another\\ncould be a snare, and another could be the bassline.</p>\\n\\n<p>The first parameter is a name so that the phrase can be\\nmodified or deleted later. The callback is a a function that\\nthis phrase will call at every step—for example it might be\\ncalled <code>playNote(value){}</code>. The array determines\\nwhich value is passed into the callback at each step of the\\nphrase. It can be numbers, an object with multiple numbers,\\nor a zero (0) indicates a rest so the callback won&#39;t be called).</p>',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'name',\n                    description: '<p>Name so that you can access the Phrase.</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>The name of a function that this phrase\\n                           will call. Typically it will play a sound,\\n                           and accept two parameters: a time at which\\n                           to play the sound (in seconds from now),\\n                           and a value from the sequence array. The\\n                           time should be passed into the play() or\\n                           start() method to ensure precision.</p>\\n',\n                    type: 'Function'\n                  },\n                  {\n                    name: 'sequence',\n                    description:\n                      '<p>Array of values to pass into the callback\\n                          at each step of the phrase.</p>\\n',\n                    type: 'Array'\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nvar mySound, myPhrase, myPart;\\nvar pattern = [1,0,0,2,0,2,0,0];\\nvar msg = 'click to play';\\n\\nfunction preload() {\\n  mySound = loadSound('assets/beatbox.mp3');\\n}\\n\\nfunction setup() {\\n  noStroke();\\n  fill(255);\\n  textAlign(CENTER);\\n  masterVolume(0.1);\\n\\n  myPhrase = new p5.Phrase('bbox', makeSound, pattern);\\n  myPart = new p5.Part();\\n  myPart.addPhrase(myPhrase);\\n  myPart.setBPM(60);\\n}\\n\\nfunction draw() {\\n  background(0);\\n  text(msg, width/2, height/2);\\n}\\n\\nfunction makeSound(time, playbackRate) {\\n  mySound.rate(playbackRate);\\n  mySound.play(time);\\n}\\n\\nfunction mouseClicked() {\\n  if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\\n    myPart.start();\\n    msg = 'playing pattern';\\n  }\\n}\\n\\n</code></div>\"\n                ]\n              },\n              'p5.Part': {\n                name: 'p5.Part',\n                shortname: 'p5.Part',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 10561,\n                description:\n                  '<p>A p5.Part plays back one or more p5.Phrases. Instantiate a part\\nwith steps and tatums. By default, each step represents a 1/16th note.</p>\\n\\n<p>See p5.Phrase for more about musical timing.</p>',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'steps',\n                    description: '<p>Steps in the part</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'tatums',\n                    description:\n                      '<p>Divisions of a beat, e.g. use 1/4, or 0.25 for a quater note (default is 1/16, a sixteenth note)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nvar box, drum, myPart;\\nvar boxPat = [1,0,0,2,0,2,0,0];\\nvar drumPat = [0,1,1,0,2,0,1,0];\\nvar msg = 'click to play';\\n\\nfunction preload() {\\n  box = loadSound('assets/beatbox.mp3');\\n  drum = loadSound('assets/drum.mp3');\\n}\\n\\nfunction setup() {\\n  noStroke();\\n  fill(255);\\n  textAlign(CENTER);\\n  masterVolume(0.1);\\n\\n  var boxPhrase = new p5.Phrase('box', playBox, boxPat);\\n  var drumPhrase = new p5.Phrase('drum', playDrum, drumPat);\\n  myPart = new p5.Part();\\n  myPart.addPhrase(boxPhrase);\\n  myPart.addPhrase(drumPhrase);\\n  myPart.setBPM(60);\\n  masterVolume(0.1);\\n}\\n\\nfunction draw() {\\n  background(0);\\n  text(msg, width/2, height/2);\\n}\\n\\nfunction playBox(time, playbackRate) {\\n  box.rate(playbackRate);\\n  box.play(time);\\n}\\n\\nfunction playDrum(time, playbackRate) {\\n  drum.rate(playbackRate);\\n  drum.play(time);\\n}\\n\\nfunction mouseClicked() {\\n  if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\\n    myPart.start();\\n    msg = 'playing part';\\n  }\\n}\\n</code></div>\"\n                ]\n              },\n              'p5.Score': {\n                name: 'p5.Score',\n                shortname: 'p5.Score',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 10814,\n                description:\n                  '<p>A Score consists of a series of Parts. The parts will\\nbe played back in order. For example, you could have an\\nA part, a B part, and a C part, and play them back in this order\\n<code>new p5.Score(a, a, b, a, c)</code></p>\\n',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'parts',\n                    description:\n                      '<p>One or multiple parts, to be played in sequence.</p>\\n',\n                    type: 'p5.Part',\n                    optional: true,\n                    multiple: true\n                  }\n                ]\n              },\n              'p5.SoundLoop': {\n                name: 'p5.SoundLoop',\n                shortname: 'p5.SoundLoop',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 10945,\n                description: '<p>SoundLoop</p>\\n',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>this function will be called on each iteration of theloop</p>\\n',\n                    type: 'Function'\n                  },\n                  {\n                    name: 'interval',\n                    description:\n                      '<p>amount of time or beats for each iteration of the loop\\n                                      defaults to 1</p>\\n',\n                    type: 'Number|String',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nvar click;\\nvar looper1;\\n\\nfunction preload() {\\n  click = loadSound('assets/drum.mp3');\\n}\\n\\nfunction setup() {\\n  //the looper's callback is passed the timeFromNow\\n  //this value should be used as a reference point from \\n  //which to schedule sounds \\n  looper1 = new p5.SoundLoop(function(timeFromNow){\\n    click.play(timeFromNow);\\n    background(255 * (looper1.iterations % 2));\\n    }, 2);\\n\\n  //stop after 10 iteratios;\\n  looper1.maxIterations = 10;\\n  //start the loop\\n  looper1.start();\\n}\\n</code></div>\"\n                ]\n              },\n              'p5.Compressor': {\n                name: 'p5.Compressor',\n                shortname: 'p5.Compressor',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 11205,\n                description:\n                  '<p>Compressor is an audio effect class that performs dynamics compression\\non an audio input source. This is a very commonly used technique in music\\nand sound production. Compression creates an overall louder, richer, \\nand fuller sound by lowering the volume of louds and raising that of softs.\\nCompression can be used to avoid clipping (sound distortion due to \\npeaks in volume) and is especially useful when many sounds are played \\nat once. Compression can be used on indivudal sound sources in addition\\nto the master output.  </p>\\n<p>This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>.<br>Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, \\n<a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and \\n<a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available.</p>\\n',\n                is_constructor: 1,\n                extends: 'p5.Effect'\n              },\n              'p5.SoundRecorder': {\n                name: 'p5.SoundRecorder',\n                shortname: 'p5.SoundRecorder',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 11417,\n                description:\n                  '<p>Record sounds for playback and/or to save as a .wav file.\\nThe p5.SoundRecorder records all sound output from your sketch,\\nor can be assigned a specific source with setInput().</p>\\n<p>The record() method accepts a p5.SoundFile as a parameter.\\nWhen playback is stopped (either after the given amount of time,\\nor with the stop() method), the p5.SoundRecorder will send its\\nrecording to that p5.SoundFile for playback.</p>',\n                is_constructor: 1,\n                example: [\n                  \"\\n<div><code>\\nvar mic, recorder, soundFile;\\nvar state = 0;\\n\\nfunction setup() {\\n  background(200);\\n  // create an audio in\\n  mic = new p5.AudioIn();\\n\\n  // prompts user to enable their browser mic\\n  mic.start();\\n\\n  // create a sound recorder\\n  recorder = new p5.SoundRecorder();\\n\\n  // connect the mic to the recorder\\n  recorder.setInput(mic);\\n\\n  // this sound file will be used to\\n  // playback & save the recording\\n  soundFile = new p5.SoundFile();\\n\\n  text('keyPress to record', 20, 20);\\n}\\n\\nfunction keyPressed() {\\n  // make sure user enabled the mic\\n  if (state === 0 && mic.enabled) {\\n\\n    // record to our p5.SoundFile\\n    recorder.record(soundFile);\\n\\n    background(255,0,0);\\n    text('Recording!', 20, 20);\\n    state++;\\n  }\\n  else if (state === 1) {\\n    background(0,255,0);\\n\\n    // stop recorder and\\n    // send result to soundFile\\n    recorder.stop();\\n\\n    text('Stopped', 20, 20);\\n    state++;\\n  }\\n\\n  else if (state === 2) {\\n    soundFile.play(); // play the result!\\n    save(soundFile, 'mySound.wav');\\n    state++;\\n  }\\n}\\n</div></code>\"\n                ]\n              },\n              'p5.PeakDetect': {\n                name: 'p5.PeakDetect',\n                shortname: 'p5.PeakDetect',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 11655,\n                description:\n                  '<p>PeakDetect works in conjunction with p5.FFT to\\nlook for onsets in some or all of the frequency spectrum.\\n</p>\\n<p>\\nTo use p5.PeakDetect, call <code>update</code> in the draw loop\\nand pass in a p5.FFT object.\\n</p>\\n<p>\\nYou can listen for a specific part of the frequency spectrum by\\nsetting the range between <code>freq1</code> and <code>freq2</code>.\\n</p>\\n\\n<p><code>threshold</code> is the threshold for detecting a peak,\\nscaled between 0 and 1. It is logarithmic, so 0.1 is half as loud\\nas 1.0.</p>\\n\\n<p>\\nThe update method is meant to be run in the draw loop, and\\n<b>frames</b> determines how many loops must pass before\\nanother peak can be detected.\\nFor example, if the frameRate() = 60, you could detect the beat of a\\n120 beat-per-minute song with this equation:\\n<code> framesPerPeak = 60 / (estimatedBPM / 60 );</code>\\n</p>\\n\\n<p>\\nBased on example contribtued by @b2renger, and a simple beat detection\\nexplanation by <a\\nhref=\"http://www.airtightinteractive.com/2013/10/making-audio-reactive-visuals/\"\\ntarget=\"_blank\">Felix Turner</a>.\\n</p>',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'freq1',\n                    description: '<p>lowFrequency - defaults to 20Hz</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'freq2',\n                    description: '<p>highFrequency - defaults to 20000 Hz</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'threshold',\n                    description:\n                      '<p>Threshold for detecting a beat between 0 and 1\\n                          scaled logarithmically where 0.1 is 1/2 the loudness\\n                          of 1.0. Defaults to 0.35.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'framesPerPeak',\n                    description: '<p>Defaults to 20.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\n\\nvar cnv, soundFile, fft, peakDetect;\\nvar ellipseWidth = 10;\\n\\nfunction preload() {\\n  soundFile = loadSound('assets/beat.mp3');\\n}\\n\\nfunction setup() {\\n  background(0);\\n  noStroke();\\n  fill(255);\\n  textAlign(CENTER);\\n\\n  // p5.PeakDetect requires a p5.FFT\\n  fft = new p5.FFT();\\n  peakDetect = new p5.PeakDetect();\\n}\\n\\nfunction draw() {\\n  background(0);\\n  text('click to play/pause', width/2, height/2);\\n\\n  // peakDetect accepts an fft post-analysis\\n  fft.analyze();\\n  peakDetect.update(fft);\\n\\n  if ( peakDetect.isDetected ) {\\n    ellipseWidth = 50;\\n  } else {\\n    ellipseWidth *= 0.95;\\n  }\\n\\n  ellipse(width/2, height/2, ellipseWidth, ellipseWidth);\\n}\\n\\n// toggle play/stop when canvas is clicked\\nfunction mouseClicked() {\\n  if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\\n    if (soundFile.isPlaying() ) {\\n      soundFile.stop();\\n    } else {\\n      soundFile.play();\\n    }\\n  }\\n}\\n</code></div>\"\n                ]\n              },\n              'p5.Gain': {\n                name: 'p5.Gain',\n                shortname: 'p5.Gain',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 11879,\n                description:\n                  '<p>A gain node is usefull to set the relative volume of sound.\\nIt&#39;s typically used to build mixers.</p>\\n',\n                is_constructor: 1,\n                example: [\n                  \"\\n<div><code>\\n\\n // load two soundfile and crossfade beetween them\\n var sound1,sound2;\\n var gain1, gain2, gain3;\\n\\n function preload(){\\n soundFormats('ogg', 'mp3');\\n sound1 = loadSound('assets/Damscray_-_Dancing_Tiger_01');\\n sound2 = loadSound('assets/beat.mp3');\\n }\\n\\n function setup() {\\n createCanvas(400,200);\\n\\n // create a 'master' gain to which we will connect both soundfiles\\n gain3 = new p5.Gain();\\n gain3.connect();\\n\\n // setup first sound for playing\\n sound1.rate(1);\\n sound1.loop();\\n sound1.disconnect(); // diconnect from p5 output\\n\\n gain1 = new p5.Gain(); // setup a gain node\\n gain1.setInput(sound1); // connect the first sound to its input\\n gain1.connect(gain3); // connect its output to the 'master'\\n\\n sound2.rate(1);\\n sound2.disconnect();\\n sound2.loop();\\n\\n gain2 = new p5.Gain();\\n gain2.setInput(sound2);\\n gain2.connect(gain3);\\n\\n }\\n\\n function draw(){\\n background(180);\\n\\n // calculate the horizontal distance beetween the mouse and the right of the screen\\n var d = dist(mouseX,0,width,0);\\n\\n // map the horizontal position of the mouse to values useable for volume control of sound1\\n var vol1 = map(mouseX,0,width,0,1);\\n var vol2 = 1-vol1; // when sound1 is loud, sound2 is quiet and vice versa\\n\\n gain1.amp(vol1,0.5,0);\\n gain2.amp(vol2,0.5,0);\\n\\n // map the vertical position of the mouse to values useable for 'master volume control'\\n var vol3 = map(mouseY,0,height,0,1);\\n gain3.amp(vol3,0.5,0);\\n }\\n</code></div>\\n\"\n                ]\n              },\n              'p5.AudioVoice': {\n                name: 'p5.AudioVoice',\n                shortname: 'p5.AudioVoice',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 12020,\n                description:\n                  '<p>Base class for monophonic synthesizers. Any extensions of this class\\nshould follow the API and implement the methods below in order to \\nremain compatible with p5.PolySynth();</p>\\n',\n                is_constructor: 1\n              },\n              'p5.MonoSynth': {\n                name: 'p5.MonoSynth',\n                shortname: 'p5.MonoSynth',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 12073,\n                description:\n                  '<p>A MonoSynth is used as a single voice for sound synthesis.\\nThis is a class to be used in conjunction with the PolySynth\\nclass. Custom synthetisers should be built inheriting from\\nthis class.</p>\\n',\n                is_constructor: 1,\n                example: [\n                  '\\n<div><code>\\nvar monoSynth;\\n\\nfunction setup() {\\n  var cnv = createCanvas(100, 100);\\n  cnv.mousePressed(playSynth);\\n\\n  monoSynth = new p5.MonoSynth();\\n\\n  textAlign(CENTER);\\n  text(\\'click to play\\', width/2, height/2);\\n}\\n\\nfunction playSynth() {\\n  // time from now (in seconds)\\n  var time = 0;\\n  // note duration (in seconds)\\n  var dur = 0.25;\\n  // velocity (volume, from 0 to 1)\\n  var v = 0.2;\\n\\n  monoSynth.play(\"G3\", v, time, dur);\\n  monoSynth.play(\"C4\", v, time += dur, dur);\\n\\n  background(random(255), random(255), 255);\\n  text(\\'click to play\\', width/2, height/2);\\n}\\n</code></div>'\n                ]\n              },\n              'p5.PolySynth': {\n                name: 'p5.PolySynth',\n                shortname: 'p5.PolySynth',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 12362,\n                description:\n                  '<p>An AudioVoice is used as a single voice for sound synthesis.\\nThe PolySynth class holds an array of AudioVoice, and deals\\nwith voices allocations, with setting notes to be played, and\\nparameters to be set.</p>\\n',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'synthVoice',\n                    description:\n                      '<p>A monophonic synth voice inheriting\\n                               the AudioVoice class. Defaults to p5.MonoSynth</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'maxVoices',\n                    description: '<p>Number of voices, defaults to 8;</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div><code>\\nvar polySynth;\\n\\nfunction setup() {\\n  var cnv = createCanvas(100, 100);\\n  cnv.mousePressed(playSynth);\\n\\n  polySynth = new p5.PolySynth();\\n\\n  textAlign(CENTER);\\n  text(\\'click to play\\', width/2, height/2);\\n}\\n\\nfunction playSynth() {\\n  // note duration (in seconds)\\n  var dur = 1.5;\\n\\n  // time from now (in seconds)\\n  var time = 0;\\n\\n  // velocity (volume, from 0 to 1)\\n  var vel = 0.1;\\n\\n  // notes can overlap with each other\\n  polySynth.play(\"G2\", vel, 0, dur);\\n  polySynth.play(\"C3\", vel, time += 1/3, dur);\\n  polySynth.play(\"G3\", vel, time += 1/3, dur);\\n\\n  background(random(255), random(255), 255);\\n  text(\\'click to play\\', width/2, height/2);\\n}\\n</code></div>'\n                ]\n              },\n              'p5.Distortion': {\n                name: 'p5.Distortion',\n                shortname: 'p5.Distortion',\n                classitems: [],\n                plugins: [],\n                extensions: [],\n                plugin_for: [],\n                extension_for: [],\n                module: 'p5.sound',\n                submodule: 'p5.sound',\n                namespace: '',\n                file: 'lib/addons/p5.sound.js',\n                line: 12767,\n                description:\n                  '<p>A Distortion effect created with a Waveshaper Node,\\nwith an approach adapted from\\n<a href=\"http://stackoverflow.com/questions/22312841/waveshaper-node-in-webaudio-how-to-emulate-distortion\">Kevin Ennis</a></p>\\n<p>This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>.<br>Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, \\n<a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and \\n<a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available.</p>\\n',\n                extends: 'p5.Effect',\n                is_constructor: 1,\n                params: [\n                  {\n                    name: 'amount',\n                    description:\n                      '<p>Unbounded distortion amount.\\n                               Normal values range from 0-1.</p>\\n',\n                    type: 'Number',\n                    optional: true,\n                    optdefault: '0.25'\n                  },\n                  {\n                    name: 'oversample',\n                    description: '<p>&#39;none&#39;, &#39;2x&#39;, or &#39;4x&#39;.</p>\\n',\n                    type: 'String',\n                    optional: true,\n                    optdefault: \"'none'\"\n                  }\n                ]\n              }\n            },\n            elements: {},\n            classitems: [\n              {\n                file: 'src/color/color_conversion.js',\n                line: 10,\n                description:\n                  '<p>Conversions adapted from <a href=\"http://www.easyrgb.com/en/math.php\">http://www.easyrgb.com/en/math.php</a>.</p>\\n<p>In these functions, hue is always in the range [0, 1], just like all other\\ncomponents are in the range [0, 1]. &#39;Brightness&#39; and &#39;value&#39; are used\\ninterchangeably.</p>\\n',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Color Conversion'\n              },\n              {\n                file: 'src/color/color_conversion.js',\n                line: 21,\n                description: '<p>Convert an HSBA array to HSLA.</p>\\n',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Color Conversion'\n              },\n              {\n                file: 'src/color/color_conversion.js',\n                line: 47,\n                description: '<p>Convert an HSBA array to RGBA.</p>\\n',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Color Conversion'\n              },\n              {\n                file: 'src/color/color_conversion.js',\n                line: 102,\n                description: '<p>Convert an HSLA array to HSBA.</p>\\n',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Color Conversion'\n              },\n              {\n                file: 'src/color/color_conversion.js',\n                line: 125,\n                description:\n                  '<p>Convert an HSLA array to RGBA.</p>\\n<p>We need to change basis from HSLA to something that can be more easily be\\nprojected onto RGBA. We will choose hue and brightness as our first two\\ncomponents, and pick a convenient third one (&#39;zest&#39;) so that we don&#39;t need\\nto calculate formal HSBA saturation.</p>\\n',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Color Conversion'\n              },\n              {\n                file: 'src/color/color_conversion.js',\n                line: 189,\n                description: '<p>Convert an RGBA array to HSBA.</p>\\n',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Color Conversion'\n              },\n              {\n                file: 'src/color/color_conversion.js',\n                line: 228,\n                description: '<p>Convert an RGBA array to HSLA.</p>\\n',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Color Conversion'\n              },\n              {\n                file: 'src/color/creating_reading.js',\n                line: 16,\n                description:\n                  '<p>Extracts the alpha value from a color or pixel array.</p>\\n',\n                itemtype: 'method',\n                name: 'alpha',\n                params: [\n                  {\n                    name: 'color',\n                    description:\n                      '<p><a href=\"#/p5.Color\">p5.Color</a> object, color components,\\n                                        or CSS color</p>\\n',\n                    type: 'p5.Color|Number[]|String'\n                  }\n                ],\n                return: {\n                  description: 'the alpha value',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nnoStroke();\\nlet c = color(0, 126, 255, 102);\\nfill(c);\\nrect(15, 15, 35, 70);\\nlet value = alpha(c); // Sets 'value' to 102\\nfill(value);\\nrect(50, 15, 35, 70);\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'Left half of canvas light blue and right half light charcoal grey.\\nLeft half of canvas light purple and right half a royal blue.\\nLeft half of canvas salmon pink and the right half white.\\nYellow rect in middle right of canvas, with 55 pixel width and height.\\nYellow ellipse in top left canvas, black ellipse in bottom right,both 80x80.\\nBright fuchsia rect in middle of canvas, 60 pixel width and height.\\nTwo bright green rects on opposite sides of the canvas, both 45x80.\\nFour blue rects in each corner of the canvas, each are 35x35.\\nBright sea green rect on left and darker rect on right of canvas, both 45x80.\\nDark green rect on left and light green rect on right of canvas, both 45x80.\\nDark blue rect on left and light teal rect on right of canvas, both 45x80.\\nblue rect on left and green on right, both with black outlines & 35x60.\\nsalmon pink rect on left and black on right, both 35x60.\\n4 rects, tan, brown, brownish purple and purple, with white outlines & 20x60.\\nlight pastel green rect on left and dark grey rect on right, both 35x60.\\nyellow rect on left and red rect on right, both with black outlines & 35x60.\\ngrey canvas\\ndeep pink rect on left and grey rect on right, both 35x60.',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/creating_reading.js',\n                line: 61,\n                description:\n                  '<p>Extracts the blue value from a color or pixel array.</p>\\n',\n                itemtype: 'method',\n                name: 'blue',\n                params: [\n                  {\n                    name: 'color',\n                    description:\n                      '<p><a href=\"#/p5.Color\">p5.Color</a> object, color components,\\n                                        or CSS color</p>\\n',\n                    type: 'p5.Color|Number[]|String'\n                  }\n                ],\n                return: {\n                  description: 'the blue value',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nlet c = color(175, 100, 220); // Define color 'c'\\nfill(c); // Use color variable 'c' as fill color\\nrect(15, 20, 35, 60); // Draw left rectangle\\n\\nlet blueValue = blue(c); // Get blue in 'c'\\nprint(blueValue); // Prints \\\"220.0\\\"\\nfill(0, 0, blueValue); // Use 'blueValue' in new fill\\nrect(50, 20, 35, 60); // Draw right rectangle\\n</code>\\n</div>\"\n                ],\n                alt: 'Left half of canvas light purple and right half a royal blue.',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/creating_reading.js',\n                line: 91,\n                description:\n                  '<p>Extracts the HSB brightness value from a color or pixel array.</p>\\n',\n                itemtype: 'method',\n                name: 'brightness',\n                params: [\n                  {\n                    name: 'color',\n                    description:\n                      '<p><a href=\"#/p5.Color\">p5.Color</a> object, color components,\\n                                        or CSS color</p>\\n',\n                    type: 'p5.Color|Number[]|String'\n                  }\n                ],\n                return: {\n                  description: 'the brightness value',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nnoStroke();\\ncolorMode(HSB, 255);\\nlet c = color(0, 126, 255);\\nfill(c);\\nrect(15, 20, 35, 60);\\nlet value = brightness(c); // Sets 'value' to 255\\nfill(value);\\nrect(50, 20, 35, 60);\\n</code>\\n</div>\\n<div>\\n<code>\\nnoStroke();\\ncolorMode(HSB, 255);\\nlet c = color('hsb(60, 100%, 50%)');\\nfill(c);\\nrect(15, 20, 35, 60);\\nlet value = brightness(c); // A 'value' of 50% is 127.5\\nfill(value);\\nrect(50, 20, 35, 60);\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'Left half of canvas salmon pink and the right half white.\\nLeft half of canvas yellow at half brightness and the right gray .',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/creating_reading.js',\n                line: 134,\n                description:\n                  '<p>Creates colors for storing in variables of the color datatype. The\\nparameters are interpreted as RGB or HSB values depending on the\\ncurrent <a href=\"#/p5/colorMode\">colorMode()</a>. The default mode is RGB values from 0 to 255\\nand, therefore, the function call color(255, 204, 0) will return a\\nbright yellow color.\\n<br><br>\\nNote that if only one value is provided to <a href=\"#/p5/color\">color()</a>, it will be interpreted\\nas a grayscale value. Add a second value, and it will be used for alpha\\ntransparency. When three values are specified, they are interpreted as\\neither RGB or HSB values. Adding a fourth value applies alpha\\ntransparency.\\n<br><br>\\nIf a single string argument is provided, RGB, RGBA and Hex CSS color\\nstrings and all named color strings are supported. In this case, an alpha\\nnumber value as a second argument is not supported, the RGBA form should be\\nused.</p>\\n',\n                itemtype: 'method',\n                name: 'color',\n                return: {\n                  description: 'resulting color',\n                  type: 'p5.Color'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nlet c = color(255, 204, 0); // Define color 'c'\\nfill(c); // Use color variable 'c' as fill color\\nnoStroke(); // Don't draw a stroke around shapes\\nrect(30, 20, 55, 55); // Draw rectangle\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet c = color(255, 204, 0); // Define color 'c'\\nfill(c); // Use color variable 'c' as fill color\\nnoStroke(); // Don't draw a stroke around shapes\\nellipse(25, 25, 80, 80); // Draw left circle\\n\\n// Using only one value with color()\\n// generates a grayscale value.\\nc = color(65); // Update 'c' with grayscale value\\nfill(c); // Use updated 'c' as fill color\\nellipse(75, 75, 80, 80); // Draw right circle\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// Named SVG & CSS colors may be used,\\nlet c = color('magenta');\\nfill(c); // Use 'c' as fill color\\nnoStroke(); // Don't draw a stroke around shapes\\nrect(20, 20, 60, 60); // Draw rectangle\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// as can hex color codes:\\nnoStroke(); // Don't draw a stroke around shapes\\nlet c = color('#0f0');\\nfill(c); // Use 'c' as fill color\\nrect(0, 10, 45, 80); // Draw rectangle\\n\\nc = color('#00ff00');\\nfill(c); // Use updated 'c' as fill color\\nrect(55, 10, 45, 80); // Draw rectangle\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// RGB and RGBA color strings are also supported:\\n// these all set to the same color (solid blue)\\nlet c;\\nnoStroke(); // Don't draw a stroke around shapes\\nc = color('rgb(0,0,255)');\\nfill(c); // Use 'c' as fill color\\nrect(10, 10, 35, 35); // Draw rectangle\\n\\nc = color('rgb(0%, 0%, 100%)');\\nfill(c); // Use updated 'c' as fill color\\nrect(55, 10, 35, 35); // Draw rectangle\\n\\nc = color('rgba(0, 0, 255, 1)');\\nfill(c); // Use updated 'c' as fill color\\nrect(10, 55, 35, 35); // Draw rectangle\\n\\nc = color('rgba(0%, 0%, 100%, 1)');\\nfill(c); // Use updated 'c' as fill color\\nrect(55, 55, 35, 35); // Draw rectangle\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// HSL color is also supported and can be specified\\n// by value\\nlet c;\\nnoStroke(); // Don't draw a stroke around shapes\\nc = color('hsl(160, 100%, 50%)');\\nfill(c); // Use 'c' as fill color\\nrect(0, 10, 45, 80); // Draw rectangle\\n\\nc = color('hsla(160, 100%, 50%, 0.5)');\\nfill(c); // Use updated 'c' as fill color\\nrect(55, 10, 45, 80); // Draw rectangle\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// HSB color is also supported and can be specified\\n// by value\\nlet c;\\nnoStroke(); // Don't draw a stroke around shapes\\nc = color('hsb(160, 100%, 50%)');\\nfill(c); // Use 'c' as fill color\\nrect(0, 10, 45, 80); // Draw rectangle\\n\\nc = color('hsba(160, 100%, 50%, 0.5)');\\nfill(c); // Use updated 'c' as fill color\\nrect(55, 10, 45, 80); // Draw rectangle\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet c; // Declare color 'c'\\nnoStroke(); // Don't draw a stroke around shapes\\n\\n// If no colorMode is specified, then the\\n// default of RGB with scale of 0-255 is used.\\nc = color(50, 55, 100); // Create a color for 'c'\\nfill(c); // Use color variable 'c' as fill color\\nrect(0, 10, 45, 80); // Draw left rect\\n\\ncolorMode(HSB, 100); // Use HSB with scale of 0-100\\nc = color(50, 55, 100); // Update 'c' with new color\\nfill(c); // Use updated 'c' as fill color\\nrect(55, 10, 45, 80); // Draw right rect\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'Yellow rect in middle right of canvas, with 55 pixel width and height.\\nYellow ellipse in top left of canvas, black ellipse in bottom right,both 80x80.\\nBright fuchsia rect in middle of canvas, 60 pixel width and height.\\nTwo bright green rects on opposite sides of the canvas, both 45x80.\\nFour blue rects in each corner of the canvas, each are 35x35.\\nBright sea green rect on left and darker rect on right of canvas, both 45x80.\\nDark green rect on left and lighter green rect on right of canvas, both 45x80.\\nDark blue rect on left and light teal rect on right of canvas, both 45x80.',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Creating & Reading',\n                overloads: [\n                  {\n                    line: 134,\n                    params: [\n                      {\n                        name: 'gray',\n                        description:\n                          '<p>number specifying value between white\\n                                and black.</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description:\n                          '<p>alpha value relative to current color range\\n                                (default is 0-255)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: 'resulting color',\n                      type: 'p5.Color'\n                    }\n                  },\n                  {\n                    line: 293,\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value relative to\\n                                the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>green or saturation value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description:\n                          '<p>blue or brightness value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'p5.Color'\n                    }\n                  },\n                  {\n                    line: 305,\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>a color string</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'p5.Color'\n                    }\n                  },\n                  {\n                    line: 310,\n                    params: [\n                      {\n                        name: 'values',\n                        description:\n                          '<p>an array containing the red,green,blue &amp;\\n                                and alpha components of the color</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'p5.Color'\n                    }\n                  },\n                  {\n                    line: 316,\n                    params: [\n                      {\n                        name: 'color',\n                        description: '',\n                        type: 'p5.Color'\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'p5.Color'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/color/creating_reading.js',\n                line: 332,\n                description:\n                  '<p>Extracts the green value from a color or pixel array.</p>\\n',\n                itemtype: 'method',\n                name: 'green',\n                params: [\n                  {\n                    name: 'color',\n                    description:\n                      '<p><a href=\"#/p5.Color\">p5.Color</a> object, color components,\\n                                        or CSS color</p>\\n',\n                    type: 'p5.Color|Number[]|String'\n                  }\n                ],\n                return: {\n                  description: 'the green value',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nlet c = color(20, 75, 200); // Define color 'c'\\nfill(c); // Use color variable 'c' as fill color\\nrect(15, 20, 35, 60); // Draw left rectangle\\n\\nlet greenValue = green(c); // Get green in 'c'\\nprint(greenValue); // Print \\\"75.0\\\"\\nfill(0, greenValue, 0); // Use 'greenValue' in new fill\\nrect(50, 20, 35, 60); // Draw right rectangle\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'blue rect on left and green on right, both with black outlines & 35x60.',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/creating_reading.js',\n                line: 363,\n                description:\n                  '<p>Extracts the hue value from a color or pixel array.</p>\\n<p>Hue exists in both HSB and HSL. This function will return the\\nHSB-normalized hue when supplied with an HSB color object (or when supplied\\nwith a pixel array while the color mode is HSB), but will default to the\\nHSL-normalized hue otherwise. (The values will only be different if the\\nmaximum hue setting for each system is different.)</p>\\n',\n                itemtype: 'method',\n                name: 'hue',\n                params: [\n                  {\n                    name: 'color',\n                    description:\n                      '<p><a href=\"#/p5.Color\">p5.Color</a> object, color components,\\n                                        or CSS color</p>\\n',\n                    type: 'p5.Color|Number[]|String'\n                  }\n                ],\n                return: {\n                  description: 'the hue',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\nnoStroke();\\ncolorMode(HSB, 255);\\nlet c = color(0, 126, 255);\\nfill(c);\\nrect(15, 20, 35, 60);\\nlet value = hue(c); // Sets \\'value\\' to \"0\"\\nfill(value);\\nrect(50, 20, 35, 60);\\n</code>\\n</div>'\n                ],\n                alt: 'salmon pink rect on left and black on right, both 35x60.',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/creating_reading.js',\n                line: 400,\n                description:\n                  '<p>Blends two colors to find a third color somewhere between them. The amt\\nparameter is the amount to interpolate between the two values where 0.0\\nequal to the first color, 0.1 is very near the first color, 0.5 is halfway\\nin between, etc. An amount below 0 will be treated as 0. Likewise, amounts\\nabove 1 will be capped at 1. This is different from the behavior of <a href=\"#/p5/lerp\">lerp()</a>,\\nbut necessary because otherwise numbers outside the range will produce\\nstrange and unexpected colors.\\n<br><br>\\nThe way that colours are interpolated depends on the current color mode.</p>\\n',\n                itemtype: 'method',\n                name: 'lerpColor',\n                params: [\n                  {\n                    name: 'c1',\n                    description: '<p>interpolate from this color</p>\\n',\n                    type: 'p5.Color'\n                  },\n                  {\n                    name: 'c2',\n                    description: '<p>interpolate to this color</p>\\n',\n                    type: 'p5.Color'\n                  },\n                  {\n                    name: 'amt',\n                    description: '<p>number between 0 and 1</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'interpolated color',\n                  type: 'p5.Color'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\ncolorMode(RGB);\\nstroke(255);\\nbackground(51);\\nlet from = color(218, 165, 32);\\nlet to = color(72, 61, 139);\\ncolorMode(RGB); // Try changing to HSB.\\nlet interA = lerpColor(from, to, 0.33);\\nlet interB = lerpColor(from, to, 0.66);\\nfill(from);\\nrect(10, 20, 20, 60);\\nfill(interA);\\nrect(30, 20, 20, 60);\\nfill(interB);\\nrect(50, 20, 20, 60);\\nfill(to);\\nrect(70, 20, 20, 60);\\n</code>\\n</div>'\n                ],\n                alt:\n                  '4 rects one tan, brown, brownish purple, purple, with white outlines & 20x60',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/creating_reading.js',\n                line: 497,\n                description:\n                  '<p>Extracts the HSL lightness value from a color or pixel array.</p>\\n',\n                itemtype: 'method',\n                name: 'lightness',\n                params: [\n                  {\n                    name: 'color',\n                    description:\n                      '<p><a href=\"#/p5.Color\">p5.Color</a> object, color components,\\n                                        or CSS color</p>\\n',\n                    type: 'p5.Color|Number[]|String'\n                  }\n                ],\n                return: {\n                  description: 'the lightness',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nnoStroke();\\ncolorMode(HSL);\\nlet c = color(156, 100, 50, 1);\\nfill(c);\\nrect(15, 20, 35, 60);\\nlet value = lightness(c); // Sets 'value' to 50\\nfill(value);\\nrect(50, 20, 35, 60);\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'light pastel green rect on left and dark grey rect on right, both 35x60.',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/creating_reading.js',\n                line: 527,\n                description: '<p>Extracts the red value from a color or pixel array.</p>\\n',\n                itemtype: 'method',\n                name: 'red',\n                params: [\n                  {\n                    name: 'color',\n                    description:\n                      '<p><a href=\"#/p5.Color\">p5.Color</a> object, color components,\\n                                        or CSS color</p>\\n',\n                    type: 'p5.Color|Number[]|String'\n                  }\n                ],\n                return: {\n                  description: 'the red value',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nlet c = color(255, 204, 0); // Define color 'c'\\nfill(c); // Use color variable 'c' as fill color\\nrect(15, 20, 35, 60); // Draw left rectangle\\n\\nlet redValue = red(c); // Get red in 'c'\\nprint(redValue); // Print \\\"255.0\\\"\\nfill(redValue, 0, 0); // Use 'redValue' in new fill\\nrect(50, 20, 35, 60); // Draw right rectangle\\n</code>\\n</div>\\n\\n<div class=\\\"norender\\\">\\n<code>\\ncolorMode(RGB, 255); // Sets the range for red, green, and blue to 255\\nlet c = color(127, 255, 0);\\ncolorMode(RGB, 1); // Sets the range for red, green, and blue to 1\\nlet myColor = red(c);\\nprint(myColor); // 0.4980392156862745\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'yellow rect on left and red rect on right, both with black outlines and 35x60.\\ngrey canvas',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/creating_reading.js',\n                line: 567,\n                description:\n                  '<p>Extracts the saturation value from a color or pixel array.</p>\\n<p>Saturation is scaled differently in HSB and HSL. This function will return\\nthe HSB saturation when supplied with an HSB color object (or when supplied\\nwith a pixel array while the color mode is HSB), but will default to the\\nHSL saturation otherwise.</p>\\n',\n                itemtype: 'method',\n                name: 'saturation',\n                params: [\n                  {\n                    name: 'color',\n                    description:\n                      '<p><a href=\"#/p5.Color\">p5.Color</a> object, color components,\\n                                        or CSS color</p>\\n',\n                    type: 'p5.Color|Number[]|String'\n                  }\n                ],\n                return: {\n                  description: 'the saturation value',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nnoStroke();\\ncolorMode(HSB, 255);\\nlet c = color(0, 126, 255);\\nfill(c);\\nrect(15, 20, 35, 60);\\nlet value = saturation(c); // Sets 'value' to 126\\nfill(value);\\nrect(50, 20, 35, 60);\\n</code>\\n</div>\"\n                ],\n                alt: 'deep pink rect on left and grey rect on right, both 35x60.',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/p5.Color.js',\n                line: 52,\n                description:\n                  '<p>This function returns the color formatted as a string. This can be useful\\nfor debugging, or for using p5.js with other libraries.</p>\\n',\n                itemtype: 'method',\n                name: 'toString',\n                params: [\n                  {\n                    name: 'format',\n                    description:\n                      '<p>How the color string will be formatted.\\nLeaving this empty formats the string as rgba(r, g, b, a).\\n&#39;#rgb&#39; &#39;#rgba&#39; &#39;#rrggbb&#39; and &#39;#rrggbbaa&#39; format as hexadecimal color codes.\\n&#39;rgb&#39; &#39;hsb&#39; and &#39;hsl&#39; return the color formatted in the specified color mode.\\n&#39;rgba&#39; &#39;hsba&#39; and &#39;hsla&#39; are the same as above but with alpha channels.\\n&#39;rgb%&#39; &#39;hsb%&#39; &#39;hsl%&#39; &#39;rgba%&#39; &#39;hsba%&#39; and &#39;hsla%&#39; format as percentages.</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'the formatted string',\n                  type: 'String'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nlet myColor;\\nfunction setup() {\\n  createCanvas(200, 200);\\n  stroke(255);\\n  myColor = color(100, 100, 250);\\n  fill(myColor);\\n}\\n\\nfunction draw() {\\n  rotate(HALF_PI);\\n  text(myColor.toString(), 0, -5);\\n  text(myColor.toString('#rrggbb'), 0, -30);\\n  text(myColor.toString('rgba%'), 0, -55);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'canvas with text representation of color',\n                class: 'p5.Color',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/p5.Color.js',\n                line: 253,\n                itemtype: 'method',\n                name: 'setRed',\n                params: [\n                  {\n                    name: 'red',\n                    description: '<p>the new red value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\nlet backgroundColor;\\n\\nfunction setup() {\\n  backgroundColor = color(100, 50, 150);\\n}\\n\\nfunction draw() {\\n  backgroundColor.setRed(128 + 128 * sin(millis() / 1000));\\n  background(backgroundColor);\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'canvas with gradually changing background color',\n                class: 'p5.Color',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/p5.Color.js',\n                line: 280,\n                itemtype: 'method',\n                name: 'setGreen',\n                params: [\n                  {\n                    name: 'green',\n                    description: '<p>the new green value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\nlet backgroundColor;\\n\\nfunction setup() {\\n  backgroundColor = color(100, 50, 150);\\n}\\n\\nfunction draw() {\\n  backgroundColor.setGreen(128 + 128 * sin(millis() / 1000));\\n  background(backgroundColor);\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'canvas with gradually changing background color',\n                class: 'p5.Color',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/p5.Color.js',\n                line: 307,\n                itemtype: 'method',\n                name: 'setBlue',\n                params: [\n                  {\n                    name: 'blue',\n                    description: '<p>the new blue value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\nlet backgroundColor;\\n\\nfunction setup() {\\n  backgroundColor = color(100, 50, 150);\\n}\\n\\nfunction draw() {\\n  backgroundColor.setBlue(128 + 128 * sin(millis() / 1000));\\n  background(backgroundColor);\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'canvas with gradually changing background color',\n                class: 'p5.Color',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/p5.Color.js',\n                line: 334,\n                itemtype: 'method',\n                name: 'setAlpha',\n                params: [\n                  {\n                    name: 'alpha',\n                    description: '<p>the new alpha value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\nlet squareColor;\\n\\nfunction setup() {\\n  ellipseMode(CORNERS);\\n  strokeWeight(4);\\n  squareColor = color(100, 50, 150);\\n}\\n\\nfunction draw() {\\n  background(255);\\n\\n  noFill();\\n  stroke(0);\\n  ellipse(10, 10, width - 10, height - 10);\\n\\n  squareColor.setAlpha(128 + 128 * sin(millis() / 1000));\\n  fill(squareColor);\\n  noStroke();\\n  rect(13, 13, width - 26, height - 26);\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'circle behind a square with gradually changing opacity',\n                class: 'p5.Color',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/p5.Color.js',\n                line: 415,\n                description:\n                  '<p>Hue is the same in HSB and HSL, but the maximum value may be different.\\nThis function will return the HSB-normalized saturation when supplied with\\nan HSB color object, but will default to the HSL-normalized saturation\\notherwise.</p>\\n',\n                class: 'p5.Color',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/p5.Color.js',\n                line: 446,\n                description:\n                  '<p>Saturation is scaled differently in HSB and HSL. This function will return\\nthe HSB saturation when supplied with an HSB color object, but will default\\nto the HSL saturation otherwise.</p>\\n',\n                class: 'p5.Color',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/p5.Color.js',\n                line: 465,\n                description: '<p>CSS named colors.</p>\\n',\n                class: 'p5.Color',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/p5.Color.js',\n                line: 618,\n                description:\n                  '<p>These regular expressions are used to build up the patterns for matching\\nviable CSS color strings: fragmenting the regexes in this way increases the\\nlegibility and comprehensibility of the code.</p>\\n<p>Note that RGB values of .9 are not parsed by IE, but are supported here for\\ncolor string consistency.</p>\\n',\n                class: 'p5.Color',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/p5.Color.js',\n                line: 631,\n                description:\n                  '<p>Full color string patterns. The capture groups are necessary.</p>\\n',\n                class: 'p5.Color',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/p5.Color.js',\n                line: 994,\n                description:\n                  '<p>For HSB and HSL, interpret the gray level as a brightness/lightness\\nvalue (they are equivalent when chroma is zero). For RGB, normalize the\\ngray level according to the blue maximum.</p>\\n',\n                class: 'p5.Color',\n                module: 'Color',\n                submodule: 'Creating & Reading'\n              },\n              {\n                file: 'src/color/setting.js',\n                line: 15,\n                description:\n                  '<p>The <a href=\"#/p5/background\">background()</a> function sets the color used for the background of the\\np5.js canvas. The default background is transparent. This function is\\ntypically used within <a href=\"#/p5/draw\">draw()</a> to clear the display window at the beginning\\nof each frame, but it can be used inside <a href=\"#/p5/setup\">setup()</a> to set the background on\\nthe first frame of animation or if the background need only be set once.\\n<br><br>\\nThe color is either specified in terms of the RGB, HSB, or HSL color\\ndepending on the current <a href=\"#/p5/colorMode\">colorMode</a>. (The default color space is RGB, with\\neach value in the range from 0 to 255). The alpha range by default is also 0 to 255.\\n<br><br>\\nIf a single string argument is provided, RGB, RGBA and Hex CSS color strings\\nand all named color strings are supported. In this case, an alpha number\\nvalue as a second argument is not supported, the RGBA form should be used.\\n<br><br>\\nA <a href=\"#/p5.Color\">p5.Color</a> object can also be provided to set the background color.\\n<br><br>\\nA <a href=\"#/p5.Image\">p5.Image</a> can also be provided to set the background image.</p>\\n',\n                itemtype: 'method',\n                name: 'background',\n                chainable: 1,\n                example: [\n                  \"\\n<div>\\n<code>\\n// Grayscale integer value\\nbackground(51);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// R, G & B integer values\\nbackground(255, 204, 0);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// H, S & B integer values\\ncolorMode(HSB);\\nbackground(255, 204, 100);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// Named SVG/CSS color string\\nbackground('red');\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// three-digit hexadecimal RGB notation\\nbackground('#fae');\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// six-digit hexadecimal RGB notation\\nbackground('#222222');\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// integer RGB notation\\nbackground('rgb(0,255,0)');\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// integer RGBA notation\\nbackground('rgba(0,255,0, 0.25)');\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// percentage RGB notation\\nbackground('rgb(100%,0%,10%)');\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// percentage RGBA notation\\nbackground('rgba(100%,0%,100%,0.5)');\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// p5 Color object\\nbackground(color(0, 0, 255));\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'canvas with darkest charcoal grey background.\\ncanvas with yellow background.\\ncanvas with royal blue background.\\ncanvas with red background.\\ncanvas with pink background.\\ncanvas with black background.\\ncanvas with bright green background.\\ncanvas with soft green background.\\ncanvas with red background.\\ncanvas with light purple background.\\ncanvas with blue background.',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Setting',\n                overloads: [\n                  {\n                    line: 15,\n                    params: [\n                      {\n                        name: 'color',\n                        description:\n                          '<p>any value created by the <a href=\"#/p5/color\">color()</a> function</p>\\n',\n                        type: 'p5.Color'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 131,\n                    params: [\n                      {\n                        name: 'colorstring',\n                        description:\n                          '<p>color string, possible formats include: integer\\n                        rgb() or rgba(), percentage rgb() or rgba(),\\n                        3-digit hex, 6-digit hex</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'a',\n                        description:\n                          '<p>opacity of the background relative to current\\n                            color range (default is 0-255)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 141,\n                    params: [\n                      {\n                        name: 'gray',\n                        description: '<p>specifies a value between white and black</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'a',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 148,\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value (depending on the current color\\n                       mode)</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>green or saturation value (depending on the current\\n                       color mode)</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description:\n                          '<p>blue or brightness value (depending on the current\\n                       color mode)</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'a',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 160,\n                    params: [\n                      {\n                        name: 'values',\n                        description:\n                          '<p>an array containing the red, green, blue\\n                                and alpha components of the color</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 167,\n                    params: [\n                      {\n                        name: 'image',\n                        description:\n                          '<p>image created with <a href=\"#/p5/loadImage\">loadImage()</a> or <a href=\"#/p5/createImage\">createImage()</a>,\\n                            to set as background\\n                            (must be same size as the sketch window)</p>\\n',\n                        type: 'p5.Image'\n                      },\n                      {\n                        name: 'a',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/color/setting.js',\n                line: 181,\n                description:\n                  '<p>Clears the pixels within a buffer. This function only clears the canvas.\\nIt will not clear objects created by createX() methods such as\\n<a href=\"#/p5/createVideo\">createVideo()</a> or <a href=\"#/p5/createDiv\">createDiv()</a>.\\nUnlike the main graphics context, pixels in additional graphics areas created\\nwith <a href=\"#/p5/createGraphics\">createGraphics()</a> can be entirely\\nor partially transparent. This function clears everything to make all of\\nthe pixels 100% transparent.</p>\\n',\n                itemtype: 'method',\n                name: 'clear',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\n// Clear the screen on mouse press.\\nfunction setup() {\\n  createCanvas(100, 100);\\n}\\n\\nfunction draw() {\\n  ellipse(mouseX, mouseY, 20, 20);\\n}\\n\\nfunction mousePressed() {\\n  clear();\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  '20x20 white ellipses are continually drawn at mouse x and y coordinates.',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Setting'\n              },\n              {\n                file: 'src/color/setting.js',\n                line: 220,\n                description:\n                  '<p><a href=\"#/p5/colorMode\">colorMode()</a> changes the way p5.js interprets color data. By default, the\\nparameters for <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/background\">background()</a>, and <a href=\"#/p5/color\">color()</a> are defined by\\nvalues between 0 and 255 using the RGB color model. This is equivalent to\\nsetting colorMode(RGB, 255). Setting colorMode(HSB) lets you use the HSB\\nsystem instead. By default, this is colorMode(HSB, 360, 100, 100, 1). You\\ncan also use HSL.\\n<br><br>\\nNote: existing color objects remember the mode that they were created in,\\nso you can change modes as you like without affecting their appearance.</p>\\n',\n                itemtype: 'method',\n                name: 'colorMode',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nnoStroke();\\ncolorMode(RGB, 100);\\nfor (let i = 0; i < 100; i++) {\\n  for (let j = 0; j < 100; j++) {\\n    stroke(i, j, 0);\\n    point(i, j);\\n  }\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nnoStroke();\\ncolorMode(HSB, 100);\\nfor (let i = 0; i < 100; i++) {\\n  for (let j = 0; j < 100; j++) {\\n    stroke(i, j, 100);\\n    point(i, j);\\n  }\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\ncolorMode(RGB, 255);\\nlet c = color(127, 255, 0);\\n\\ncolorMode(RGB, 1);\\nlet myColor = c._getRed();\\ntext(myColor, 10, 10, 80, 80);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nnoFill();\\ncolorMode(RGB, 255, 255, 255, 1);\\nbackground(255);\\n\\nstrokeWeight(4);\\nstroke(255, 0, 10, 0.3);\\nellipse(40, 40, 50, 50);\\nellipse(50, 50, 40, 40);\\n</code>\\n</div>'\n                ],\n                alt:\n                  'Green to red gradient from bottom L to top R. shading originates from top left.\\nRainbow gradient from left to right. Brightness increasing to white at top.\\nunknown image.\\n50x50 ellipse at middle L & 40x40 ellipse at center. Translucent pink outlines.',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Setting',\n                overloads: [\n                  {\n                    line: 220,\n                    params: [\n                      {\n                        name: 'mode',\n                        description:\n                          '<p>either RGB, HSB or HSL, corresponding to\\n                         Red/Green/Blue and Hue/Saturation/Brightness\\n                         (or Lightness)</p>\\n',\n                        type: 'Constant'\n                      },\n                      {\n                        name: 'max',\n                        description: '<p>range for all values</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 297,\n                    params: [\n                      {\n                        name: 'mode',\n                        description: '',\n                        type: 'Constant'\n                      },\n                      {\n                        name: 'max1',\n                        description:\n                          '<p>range for the red or hue depending on the\\n                             current color mode</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'max2',\n                        description:\n                          '<p>range for the green or saturation depending\\n                             on the current color mode</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'max3',\n                        description:\n                          '<p>range for the blue or brightness/lightness\\n                             depending on the current color mode</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'maxA',\n                        description: '<p>range for the alpha</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/color/setting.js',\n                line: 341,\n                description:\n                  '<p>Sets the color used to fill shapes. For example, if you run\\nfill(204, 102, 0), all shapes drawn after the fill command will be filled with the color orange. This\\ncolor is either specified in terms of the RGB or HSB color depending on\\nthe current <a href=\"#/p5/colorMode\">colorMode()</a>. (The default color space is RGB, with each value\\nin the range from 0 to 255). The alpha range by default is also 0 to 255.\\n<br><br>\\nIf a single string argument is provided, RGB, RGBA and Hex CSS color strings\\nand all named color strings are supported. In this case, an alpha number\\nvalue as a second argument is not supported, the RGBA form should be used.\\n<br><br>\\nA p5 <a href=\"#/p5.Color\">Color</a> object can also be provided to set the fill color.</p>\\n',\n                itemtype: 'method',\n                name: 'fill',\n                chainable: 1,\n                example: [\n                  \"\\n<div>\\n<code>\\n// Grayscale integer value\\nfill(51);\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// R, G & B integer values\\nfill(255, 204, 0);\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// H, S & B integer values\\ncolorMode(HSB);\\nfill(255, 204, 100);\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// Named SVG/CSS color string\\nfill('red');\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// three-digit hexadecimal RGB notation\\nfill('#fae');\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// six-digit hexadecimal RGB notation\\nfill('#222222');\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// integer RGB notation\\nfill('rgb(0,255,0)');\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// integer RGBA notation\\nfill('rgba(0,255,0, 0.25)');\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// percentage RGB notation\\nfill('rgb(100%,0%,10%)');\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// percentage RGBA notation\\nfill('rgba(100%,0%,100%,0.5)');\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// p5 Color object\\nfill(color(0, 0, 255));\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\"\n                ],\n                alt:\n                  '60x60 dark charcoal grey rect with black outline in center of canvas.\\n60x60 yellow rect with black outline in center of canvas.\\n60x60 royal blue rect with black outline in center of canvas.\\n60x60 red rect with black outline in center of canvas.\\n60x60 pink rect with black outline in center of canvas.\\n60x60 black rect with black outline in center of canvas.\\n60x60 light green rect with black outline in center of canvas.\\n60x60 soft green rect with black outline in center of canvas.\\n60x60 red rect with black outline in center of canvas.\\n60x60 dark fuchsia rect with black outline in center of canvas.\\n60x60 blue rect with black outline in center of canvas.',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Setting',\n                overloads: [\n                  {\n                    line: 341,\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value relative to\\n                                the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>green or saturation value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description:\n                          '<p>blue or brightness value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 466,\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>a color string</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 472,\n                    params: [\n                      {\n                        name: 'gray',\n                        description: '<p>a gray value</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 479,\n                    params: [\n                      {\n                        name: 'values',\n                        description:\n                          '<p>an array containing the red,green,blue &amp;\\n                                and alpha components of the color</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 486,\n                    params: [\n                      {\n                        name: 'color',\n                        description: '<p>the fill color</p>\\n',\n                        type: 'p5.Color'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/color/setting.js',\n                line: 498,\n                description:\n                  '<p>Disables filling geometry. If both <a href=\"#/p5/noStroke\">noStroke()</a> and <a href=\"#/p5/noFill\">noFill()</a> are called,\\nnothing will be drawn to the screen.</p>\\n',\n                itemtype: 'method',\n                name: 'noFill',\n                chainable: 1,\n                example: [\n                  \"\\n<div>\\n<code>\\nrect(15, 10, 55, 55);\\nnoFill();\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div modernizr='webgl'>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(0);\\n  noFill();\\n  stroke(100, 100, 240);\\n  rotateX(frameCount * 0.01);\\n  rotateY(frameCount * 0.01);\\n  box(45, 45, 45);\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'white rect top middle and noFill rect center. Both 60x60 with black outlines.\\nblack canvas with purple cube wireframe spinning',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Setting'\n              },\n              {\n                file: 'src/color/setting.js',\n                line: 539,\n                description:\n                  '<p>Disables drawing the stroke (outline). If both <a href=\"#/p5/noStroke\">noStroke()</a> and <a href=\"#/p5/noFill\">noFill()</a>\\nare called, nothing will be drawn to the screen.</p>\\n',\n                itemtype: 'method',\n                name: 'noStroke',\n                chainable: 1,\n                example: [\n                  \"\\n<div>\\n<code>\\nnoStroke();\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div modernizr='webgl'>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(0);\\n  noStroke();\\n  fill(240, 150, 150);\\n  rotateX(frameCount * 0.01);\\n  rotateY(frameCount * 0.01);\\n  box(45, 45, 45);\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  '60x60 white rect at center. no outline.\\nblack canvas with pink cube spinning',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Setting'\n              },\n              {\n                file: 'src/color/setting.js',\n                line: 579,\n                description:\n                  '<p>Sets the color used to draw lines and borders around shapes. This color\\nis either specified in terms of the RGB or HSB color depending on the\\ncurrent <a href=\"#/p5/colorMode\">colorMode()</a> (the default color space is RGB, with each value in\\nthe range from 0 to 255). The alpha range by default is also 0 to 255.\\n<br><br>\\nIf a single string argument is provided, RGB, RGBA and Hex CSS color\\nstrings and all named color strings are supported. In this case, an alpha\\nnumber value as a second argument is not supported, the RGBA form should be\\nused.\\n<br><br>\\nA p5 <a href=\"#/p5.Color\">Color</a> object can also be provided to set the stroke color.</p>\\n',\n                itemtype: 'method',\n                name: 'stroke',\n                chainable: 1,\n                example: [\n                  \"\\n<div>\\n<code>\\n// Grayscale integer value\\nstrokeWeight(4);\\nstroke(51);\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// R, G & B integer values\\nstroke(255, 204, 0);\\nstrokeWeight(4);\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// H, S & B integer values\\ncolorMode(HSB);\\nstrokeWeight(4);\\nstroke(255, 204, 100);\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// Named SVG/CSS color string\\nstroke('red');\\nstrokeWeight(4);\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// three-digit hexadecimal RGB notation\\nstroke('#fae');\\nstrokeWeight(4);\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// six-digit hexadecimal RGB notation\\nstroke('#222222');\\nstrokeWeight(4);\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// integer RGB notation\\nstroke('rgb(0,255,0)');\\nstrokeWeight(4);\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// integer RGBA notation\\nstroke('rgba(0,255,0,0.25)');\\nstrokeWeight(4);\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// percentage RGB notation\\nstroke('rgb(100%,0%,10%)');\\nstrokeWeight(4);\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// percentage RGBA notation\\nstroke('rgba(100%,0%,100%,0.5)');\\nstrokeWeight(4);\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// p5 Color object\\nstroke(color(0, 0, 255));\\nstrokeWeight(4);\\nrect(20, 20, 60, 60);\\n</code>\\n</div>\"\n                ],\n                alt:\n                  '60x60 white rect at center. Dark charcoal grey outline.\\n60x60 white rect at center. Yellow outline.\\n60x60 white rect at center. Royal blue outline.\\n60x60 white rect at center. Red outline.\\n60x60 white rect at center. Pink outline.\\n60x60 white rect at center. Black outline.\\n60x60 white rect at center. Bright green outline.\\n60x60 white rect at center. Soft green outline.\\n60x60 white rect at center. Red outline.\\n60x60 white rect at center. Dark fuchsia outline.\\n60x60 white rect at center. Blue outline.',\n                class: 'p5',\n                module: 'Color',\n                submodule: 'Setting',\n                overloads: [\n                  {\n                    line: 579,\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value relative to\\n                                the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>green or saturation value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description:\n                          '<p>blue or brightness value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 718,\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>a color string</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 724,\n                    params: [\n                      {\n                        name: 'gray',\n                        description: '<p>a gray value</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 731,\n                    params: [\n                      {\n                        name: 'values',\n                        description:\n                          '<p>an array containing the red,green,blue &amp;\\n                                and alpha components of the color</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 738,\n                    params: [\n                      {\n                        name: 'color',\n                        description: '<p>the stroke color</p>\\n',\n                        type: 'p5.Color'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/core/shape/2d_primitives.js',\n                line: 16,\n                description:\n                  '<p>This function does 3 things:</p>\\n<ol>\\n<li><p>Bounds the desired start/stop angles for an arc (in radians) so that:</p>\\n<pre><code>0 &lt;= start &lt; TWO_PI ;    start &lt;= stop &lt; start + TWO_PI\\n</code></pre><p>This means that the arc rendering functions don&#39;t have to be concerned\\nwith what happens if stop is smaller than start, or if the arc &#39;goes\\nround more than once&#39;, etc.: they can just start at start and increase\\nuntil stop and the correct arc will be drawn.</p>\\n</li>\\n<li><p>Optionally adjusts the angles within each quadrant to counter the naive\\nscaling of the underlying ellipse up from the unit circle.  Without\\nthis, the angles become arbitrary when width != height: 45 degrees\\nmight be drawn at 5 degrees on a &#39;wide&#39; ellipse, or at 85 degrees on\\na &#39;tall&#39; ellipse.</p>\\n</li>\\n<li><p>Flags up when start and stop correspond to the same place on the\\nunderlying ellipse.  This is useful if you want to do something special\\nthere (like rendering a whole ellipse instead).</p>\\n</li>\\n</ol>\\n',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '2D Primitives'\n              },\n              {\n                file: 'src/core/shape/2d_primitives.js',\n                line: 102,\n                description:\n                  '<p>Draw an arc to the screen. If called with only x, y, w, h, start, and\\nstop, the arc will be drawn and filled as an open pie segment. If a mode parameter is provided, the arc\\nwill be filled like an open semi-circle (OPEN) , a closed semi-circle (CHORD), or as a closed pie segment (PIE). The\\norigin may be changed with the <a href=\"#/p5/ellipseMode\">ellipseMode()</a> function.<br><br>\\nThe arc is always drawn clockwise from wherever start falls to wherever stop falls on the ellipse.\\nAdding or subtracting TWO_PI to either angle does not change where they fall.\\nIf both start and stop fall at the same place, a full ellipse will be drawn. Be aware that the the\\ny-axis increases in the downward direction therefore the values of PI is counter clockwise.</p>\\n',\n                itemtype: 'method',\n                name: 'arc',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>x-coordinate of the arc&#39;s ellipse</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y-coordinate of the arc&#39;s ellipse</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'w',\n                    description: '<p>width of the arc&#39;s ellipse by default</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'h',\n                    description: '<p>height of the arc&#39;s ellipse by default</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'start',\n                    description: '<p>angle to start the arc, specified in radians</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'stop',\n                    description: '<p>angle to stop the arc, specified in radians</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'mode',\n                    description:\n                      '<p>optional parameter to determine the way of drawing\\n                        the arc. either CHORD, PIE or OPEN</p>\\n',\n                    type: 'Constant',\n                    optional: true\n                  },\n                  {\n                    name: 'detail',\n                    description:\n                      '<p>optional parameter for WebGL mode only. This is to\\n                        specify the number of vertices that makes up the\\n                        perimeter of the arc. Default value is 25.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\narc(50, 55, 50, 50, 0, HALF_PI);\\nnoFill();\\narc(50, 55, 60, 60, HALF_PI, PI);\\narc(50, 55, 70, 70, PI, PI + QUARTER_PI);\\narc(50, 55, 80, 80, PI + QUARTER_PI, TWO_PI);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\narc(50, 50, 80, 80, 0, PI + QUARTER_PI);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\narc(50, 50, 80, 80, 0, PI + QUARTER_PI, OPEN);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\narc(50, 50, 80, 80, 0, PI + QUARTER_PI, CHORD);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\narc(50, 50, 80, 80, 0, PI + QUARTER_PI, PIE);\\n</code>\\n</div>'\n                ],\n                alt:\n                  'shattered outline of an ellipse with a quarter of a white circle bottom-right.\\nwhite ellipse with top right quarter missing.\\nwhite ellipse with black outline with top right missing.\\nwhite ellipse with top right missing with black outline around shape.\\nwhite ellipse with top right quarter missing with black outline around the shape.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '2D Primitives'\n              },\n              {\n                file: 'src/core/shape/2d_primitives.js',\n                line: 210,\n                description:\n                  '<p>Draws an ellipse (oval) to the screen. An ellipse with equal width and\\nheight is a circle. By default, the first two parameters set the location,\\nand the third and fourth parameters set the shape&#39;s width and height. If\\nno height is specified, the value of width is used for both the width and\\nheight. If a negative height or width is specified, the absolute value is taken.\\nThe origin may be changed with the <a href=\"#/p5/ellipseMode\">ellipseMode()</a> function.</p>\\n',\n                itemtype: 'method',\n                name: 'ellipse',\n                chainable: 1,\n                example: ['\\n<div>\\n<code>\\nellipse(56, 46, 55, 55);\\n</code>\\n</div>'],\n                alt:\n                  'white ellipse with black outline in middle-right of canvas that is 55x55.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '2D Primitives',\n                overloads: [\n                  {\n                    line: 210,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>x-coordinate of the ellipse.</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y-coordinate of the ellipse.</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'w',\n                        description: '<p>width of the ellipse.</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'h',\n                        description: '<p>height of the ellipse.</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 235,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'w',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'h',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'detail',\n                        description:\n                          '<p>number of radial sectors to draw (for WebGL mode)</p>\\n',\n                        type: 'Integer'\n                      }\n                    ]\n                  }\n                ]\n              },\n              {\n                file: 'src/core/shape/2d_primitives.js',\n                line: 270,\n                description:\n                  '<p>Draws a circle to the screen. A circle is a simple closed shape.\\nIt is the set of all points in a plane that are at a given distance from a given point, the centre.\\nThis function is a special case of the ellipse() function, where the width and height of the ellipse are the same.\\nHeight and width of the ellipse correspond to the diameter of the circle.\\nBy default, the first two parameters set the location of the centre of the circle, the third sets the diameter of the circle.</p>\\n',\n                itemtype: 'method',\n                name: 'circle',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>x-coordinate of the centre of the circle.</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y-coordinate of the centre of the circle.</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'd',\n                    description: '<p>diameter of the circle.</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\n// Draw a circle at location (30, 30) with a diameter of 20.\\ncircle(30, 30, 20);\\n</code>\\n</div>'\n                ],\n                alt: 'white circle with black outline in mid of canvas that is 55x55.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '2D Primitives'\n              },\n              {\n                file: 'src/core/shape/2d_primitives.js',\n                line: 300,\n                description:\n                  '<p>Draws a line (a direct path between two points) to the screen. The version\\nof <a href=\"#/p5/line\">line()</a> with four parameters draws the line in 2D. To color a line, use\\nthe <a href=\"#/p5/stroke\">stroke()</a> function. A line cannot be filled, therefore the <a href=\"#/p5/fill\">fill()</a>\\nfunction will not affect the color of a line. 2D lines are drawn with a\\nwidth of one pixel by default, but this can be changed with the\\n<a href=\"#/p5/strokeWeight\">strokeWeight()</a> function.</p>\\n',\n                itemtype: 'method',\n                name: 'line',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nline(30, 20, 85, 75);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nline(30, 20, 85, 20);\\nstroke(126);\\nline(85, 20, 85, 75);\\nstroke(255);\\nline(85, 75, 30, 75);\\n</code>\\n</div>'\n                ],\n                alt:\n                  'line 78 pixels long running from mid-top to bottom-right of canvas.\\n3 lines of various stroke sizes. Form top, bottom and right sides of a square.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '2D Primitives',\n                overloads: [\n                  {\n                    line: 300,\n                    params: [\n                      {\n                        name: 'x1',\n                        description: '<p>the x-coordinate of the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description: '<p>the y-coordinate of the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '<p>the x-coordinate of the second point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '<p>the y-coordinate of the second point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 336,\n                    params: [\n                      {\n                        name: 'x1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z1',\n                        description: '<p>the z-coordinate of the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z2',\n                        description: '<p>the z-coordinate of the second point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/core/shape/2d_primitives.js',\n                line: 356,\n                description:\n                  '<p>Draws a point, a coordinate in space at the dimension of one pixel.\\nThe first parameter is the horizontal value for the point, the second\\nvalue is the vertical value for the point. The color of the point is\\ndetermined by the current stroke.</p>\\n',\n                itemtype: 'method',\n                name: 'point',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>the x-coordinate</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>the y-coordinate</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'z',\n                    description: '<p>the z-coordinate (for WebGL mode)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\npoint(30, 20);\\npoint(85, 20);\\npoint(85, 75);\\npoint(30, 75);\\n</code>\\n</div>'\n                ],\n                alt: '4 points centered in the middle-right of the canvas.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '2D Primitives'\n              },\n              {\n                file: 'src/core/shape/2d_primitives.js',\n                line: 391,\n                description:\n                  '<p>Draw a quad. A quad is a quadrilateral, a four sided polygon. It is\\nsimilar to a rectangle, but the angles between its edges are not\\nconstrained to ninety degrees. The first pair of parameters (x1,y1)\\nsets the first vertex and the subsequent pairs should proceed\\nclockwise or counter-clockwise around the defined shape.\\nz-arguments only work when quad() is used in WEBGL mode.</p>\\n',\n                itemtype: 'method',\n                name: 'quad',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nquad(38, 31, 86, 20, 69, 63, 30, 76);\\n</code>\\n</div>'\n                ],\n                alt:\n                  'irregular white quadrilateral shape with black outline mid-right of canvas.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '2D Primitives',\n                overloads: [\n                  {\n                    line: 391,\n                    params: [\n                      {\n                        name: 'x1',\n                        description: '<p>the x-coordinate of the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description: '<p>the y-coordinate of the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '<p>the x-coordinate of the second point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '<p>the y-coordinate of the second point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '<p>the x-coordinate of the third point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '<p>the y-coordinate of the third point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x4',\n                        description: '<p>the x-coordinate of the fourth point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y4',\n                        description: '<p>the y-coordinate of the fourth point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 421,\n                    params: [\n                      {\n                        name: 'x1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z1',\n                        description: '<p>the z-coordinate of the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z2',\n                        description: '<p>the z-coordinate of the second point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z3',\n                        description: '<p>the z-coordinate of the third point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x4',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y4',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z4',\n                        description: '<p>the z-coordinate of the fourth point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/core/shape/2d_primitives.js',\n                line: 458,\n                description:\n                  '<p>Draws a rectangle to the screen. A rectangle is a four-sided shape with\\nevery angle at ninety degrees. By default, the first two parameters set\\nthe location of the upper-left corner, the third sets the width, and the\\nfourth sets the height. The way these parameters are interpreted, however,\\nmay be changed with the <a href=\"#/p5/rectMode\">rectMode()</a> function.\\n<br><br>\\nThe fifth, sixth, seventh and eighth parameters, if specified,\\ndetermine corner radius for the top-left, top-right, lower-right and\\nlower-left corners, respectively. An omitted corner radius parameter is set\\nto the value of the previously specified radius value in the parameter list.</p>\\n',\n                itemtype: 'method',\n                name: 'rect',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\n// Draw a rectangle at location (30, 20) with a width and height of 55.\\nrect(30, 20, 55, 55);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// Draw a rectangle with rounded corners, each having a radius of 20.\\nrect(30, 20, 55, 55, 20);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// Draw a rectangle with rounded corners having the following radii:\\n// top-left = 20, top-right = 15, bottom-right = 10, bottom-left = 5.\\nrect(30, 20, 55, 55, 20, 15, 10, 5);\\n</code>\\n</div>'\n                ],\n                alt:\n                  '55x55 white rect with black outline in mid-right of canvas.\\n55x55 white rect with black outline and rounded edges in mid-right of canvas.\\n55x55 white rect with black outline and rounded edges of different radii.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '2D Primitives',\n                overloads: [\n                  {\n                    line: 458,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>x-coordinate of the rectangle.</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y-coordinate of the rectangle.</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'w',\n                        description: '<p>width of the rectangle.</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'h',\n                        description: '<p>height of the rectangle.</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'tl',\n                        description: '<p>optional radius of top-left corner.</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'tr',\n                        description: '<p>optional radius of top-right corner.</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'br',\n                        description: '<p>optional radius of bottom-right corner.</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'bl',\n                        description: '<p>optional radius of bottom-left corner.</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 508,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'w',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'h',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'detailX',\n                        description:\n                          '<p>number of segments in the x-direction (for WebGL mode)</p>\\n',\n                        type: 'Integer',\n                        optional: true\n                      },\n                      {\n                        name: 'detailY',\n                        description:\n                          '<p>number of segments in the y-direction (for WebGL mode)</p>\\n',\n                        type: 'Integer',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/core/shape/2d_primitives.js',\n                line: 541,\n                description:\n                  '<p>Draws a square to the screen. A square is a four-sided shape with\\nevery angle at ninety degrees, and equal side size.\\nThis function is a special case of the rect() function, where the width and height are the same, and the parameter is called &quot;s&quot; for side size.\\nBy default, the first two parameters set the location of the upper-left corner, the third sets the side size of the square.\\nThe way these parameters are interpreted, however,\\nmay be changed with the <a href=\"#/p5/rectMode\">rectMode()</a> function.\\n<br><br>\\nThe fourth, fifth, sixth and seventh parameters, if specified,\\ndetermine corner radius for the top-left, top-right, lower-right and\\nlower-left corners, respectively. An omitted corner radius parameter is set\\nto the value of the previously specified radius value in the parameter list.</p>\\n',\n                itemtype: 'method',\n                name: 'square',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>x-coordinate of the square.</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y-coordinate of the square.</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 's',\n                    description: '<p>side size of the square.</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'tl',\n                    description: '<p>optional radius of top-left corner.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'tr',\n                    description: '<p>optional radius of top-right corner.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'br',\n                    description: '<p>optional radius of bottom-right corner.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'bl',\n                    description: '<p>optional radius of bottom-left corner.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\n// Draw a square at location (30, 20) with a side size of 55.\\nsquare(30, 20, 55);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// Draw a square with rounded corners, each having a radius of 20.\\nsquare(30, 20, 55, 20);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// Draw a square with rounded corners having the following radii:\\n// top-left = 20, top-right = 15, bottom-right = 10, bottom-left = 5.\\nsquare(30, 20, 55, 20, 15, 10, 5);\\n</code>\\n</div>'\n                ],\n                alt:\n                  '55x55 white square with black outline in mid-right of canvas.\\n55x55 white square with black outline and rounded edges in mid-right of canvas.\\n55x55 white square with black outline and rounded edges of different radii.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '2D Primitives'\n              },\n              {\n                file: 'src/core/shape/2d_primitives.js',\n                line: 595,\n                description:\n                  '<p>A triangle is a plane created by connecting three points. The first two\\narguments specify the first point, the middle two arguments specify the\\nsecond point, and the last two arguments specify the third point.</p>\\n',\n                itemtype: 'method',\n                name: 'triangle',\n                params: [\n                  {\n                    name: 'x1',\n                    description: '<p>x-coordinate of the first point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y1',\n                    description: '<p>y-coordinate of the first point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'x2',\n                    description: '<p>x-coordinate of the second point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y2',\n                    description: '<p>y-coordinate of the second point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'x3',\n                    description: '<p>x-coordinate of the third point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y3',\n                    description: '<p>y-coordinate of the third point</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\ntriangle(30, 75, 58, 20, 86, 75);\\n</code>\\n</div>'\n                ],\n                alt: 'white triangle with black outline in mid-right of canvas.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '2D Primitives'\n              },\n              {\n                file: 'src/core/shape/attributes.js',\n                line: 14,\n                description:\n                  '<p>Modifies the location from which ellipses are drawn by changing the way\\nin which parameters given to <a href=\"#/p5/ellipse\">ellipse()</a> are interpreted.\\n<br><br>\\nThe default mode is ellipseMode(CENTER), which interprets the first two\\nparameters of <a href=\"#/p5/ellipse\">ellipse()</a> as the shape&#39;s center point, while the third and\\nfourth parameters are its width and height.\\n<br><br>\\nellipseMode(RADIUS) also uses the first two parameters of <a href=\"#/p5/ellipse\">ellipse()</a> as\\nthe shape&#39;s center point, but uses the third and fourth parameters to\\nspecify half of the shapes&#39;s width and height.\\n<br><br>\\nellipseMode(CORNER) interprets the first two parameters of <a href=\"#/p5/ellipse\">ellipse()</a> as\\nthe upper-left corner of the shape, while the third and fourth parameters\\nare its width and height.\\n<br><br>\\nellipseMode(CORNERS) interprets the first two parameters of <a href=\"#/p5/ellipse\">ellipse()</a> as\\nthe location of one corner of the ellipse&#39;s bounding box, and the third\\nand fourth parameters as the location of the opposite corner.\\n<br><br>\\nThe parameter must be written in ALL CAPS because Javascript is a\\ncase-sensitive language.</p>\\n',\n                itemtype: 'method',\n                name: 'ellipseMode',\n                params: [\n                  {\n                    name: 'mode',\n                    description: '<p>either CENTER, RADIUS, CORNER, or CORNERS</p>\\n',\n                    type: 'Constant'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nellipseMode(RADIUS); // Set ellipseMode to RADIUS\\nfill(255); // Set fill to white\\nellipse(50, 50, 30, 30); // Draw white ellipse using RADIUS mode\\n\\nellipseMode(CENTER); // Set ellipseMode to CENTER\\nfill(100); // Set fill to gray\\nellipse(50, 50, 30, 30); // Draw gray ellipse using CENTER mode\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nellipseMode(CORNER); // Set ellipseMode is CORNER\\nfill(255); // Set fill to white\\nellipse(25, 25, 50, 50); // Draw white ellipse using CORNER mode\\n\\nellipseMode(CORNERS); // Set ellipseMode to CORNERS\\nfill(100); // Set fill to gray\\nellipse(25, 25, 50, 50); // Draw gray ellipse using CORNERS mode\\n</code>\\n</div>'\n                ],\n                alt:\n                  '60x60 white ellipse and 30x30 grey ellipse with black outlines at center.\\n60x60 white ellipse @center and 30x30 grey ellipse top-right, black outlines.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Attributes'\n              },\n              {\n                file: 'src/core/shape/attributes.js',\n                line: 83,\n                description:\n                  '<p>Draws all geometry with jagged (aliased) edges. Note that <a href=\"#/p5/smooth\">smooth()</a> is\\nactive by default in 2D mode, so it is necessary to call <a href=\"#/p5/noSmooth\">noSmooth()</a> to disable\\nsmoothing of geometry, images, and fonts. In 3D mode, <a href=\"#/p5/noSmooth\">noSmooth()</a> is enabled\\nby default, so it is necessary to call <a href=\"#/p5/smooth\">smooth()</a> if you would like\\nsmooth (antialiased) edges on your geometry.</p>\\n',\n                itemtype: 'method',\n                name: 'noSmooth',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nbackground(0);\\nnoStroke();\\nsmooth();\\nellipse(30, 48, 36, 36);\\nnoSmooth();\\nellipse(70, 48, 36, 36);\\n</code>\\n</div>'\n                ],\n                alt:\n                  '2 pixelated 36x36 white ellipses to left & right of center, black background',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Attributes'\n              },\n              {\n                file: 'src/core/shape/attributes.js',\n                line: 116,\n                description:\n                  '<p>Modifies the location from which rectangles are drawn by changing the way\\nin which parameters given to <a href=\"#/p5/rect\">rect()</a> are interpreted.\\n<br><br>\\nThe default mode is rectMode(CORNER), which interprets the first two\\nparameters of <a href=\"#/p5/rect\">rect()</a> as the upper-left corner of the shape, while the\\nthird and fourth parameters are its width and height.\\n<br><br>\\nrectMode(CORNERS) interprets the first two parameters of <a href=\"#/p5/rect\">rect()</a> as the\\nlocation of one corner, and the third and fourth parameters as the\\nlocation of the opposite corner.\\n<br><br>\\nrectMode(CENTER) interprets the first two parameters of <a href=\"#/p5/rect\">rect()</a> as the\\nshape&#39;s center point, while the third and fourth parameters are its\\nwidth and height.\\n<br><br>\\nrectMode(RADIUS) also uses the first two parameters of <a href=\"#/p5/rect\">rect()</a> as the\\nshape&#39;s center point, but uses the third and fourth parameters to specify\\nhalf of the shapes&#39;s width and height.\\n<br><br>\\nThe parameter must be written in ALL CAPS because Javascript is a\\ncase-sensitive language.</p>\\n',\n                itemtype: 'method',\n                name: 'rectMode',\n                params: [\n                  {\n                    name: 'mode',\n                    description: '<p>either CORNER, CORNERS, CENTER, or RADIUS</p>\\n',\n                    type: 'Constant'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nrectMode(CORNER); // Default rectMode is CORNER\\nfill(255); // Set fill to white\\nrect(25, 25, 50, 50); // Draw white rect using CORNER mode\\n\\nrectMode(CORNERS); // Set rectMode to CORNERS\\nfill(100); // Set fill to gray\\nrect(25, 25, 50, 50); // Draw gray rect using CORNERS mode\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nrectMode(RADIUS); // Set rectMode to RADIUS\\nfill(255); // Set fill to white\\nrect(50, 50, 30, 30); // Draw white rect using RADIUS mode\\n\\nrectMode(CENTER); // Set rectMode to CENTER\\nfill(100); // Set fill to gray\\nrect(50, 50, 30, 30); // Draw gray rect using CENTER mode\\n</code>\\n</div>'\n                ],\n                alt:\n                  '50x50 white rect at center and 25x25 grey rect in the top left of the other.\\n50x50 white rect at center and 25x25 grey rect in the center of the other.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Attributes'\n              },\n              {\n                file: 'src/core/shape/attributes.js',\n                line: 185,\n                description:\n                  '<p>Draws all geometry with smooth (anti-aliased) edges. <a href=\"#/p5/smooth\">smooth()</a> will also\\nimprove image quality of resized images. Note that <a href=\"#/p5/smooth\">smooth()</a> is active by\\ndefault in 2D mode; <a href=\"#/p5/noSmooth\">noSmooth()</a> can be used to disable smoothing of geometry,\\nimages, and fonts. In 3D mode, <a href=\"#/p5/noSmooth\">noSmooth()</a> is enabled\\nby default, so it is necessary to call <a href=\"#/p5/smooth\">smooth()</a> if you would like\\nsmooth (antialiased) edges on your geometry.</p>\\n',\n                itemtype: 'method',\n                name: 'smooth',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nbackground(0);\\nnoStroke();\\nsmooth();\\nellipse(30, 48, 36, 36);\\nnoSmooth();\\nellipse(70, 48, 36, 36);\\n</code>\\n</div>'\n                ],\n                alt:\n                  '2 pixelated 36x36 white ellipses one left one right of center. On black.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Attributes'\n              },\n              {\n                file: 'src/core/shape/attributes.js',\n                line: 219,\n                description:\n                  '<p>Sets the style for rendering line endings. These ends are either squared,\\nextended, or rounded, each of which specified with the corresponding\\nparameters: SQUARE, PROJECT, and ROUND. The default cap is ROUND.</p>\\n',\n                itemtype: 'method',\n                name: 'strokeCap',\n                params: [\n                  {\n                    name: 'cap',\n                    description: '<p>either SQUARE, PROJECT, or ROUND</p>\\n',\n                    type: 'Constant'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nstrokeWeight(12.0);\\nstrokeCap(ROUND);\\nline(20, 30, 80, 30);\\nstrokeCap(SQUARE);\\nline(20, 50, 80, 50);\\nstrokeCap(PROJECT);\\nline(20, 70, 80, 70);\\n</code>\\n</div>'\n                ],\n                alt:\n                  '3 lines. Top line: rounded ends, mid: squared, bottom:longer squared ends.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Attributes'\n              },\n              {\n                file: 'src/core/shape/attributes.js',\n                line: 256,\n                description:\n                  '<p>Sets the style of the joints which connect line segments. These joints\\nare either mitered, beveled, or rounded and specified with the\\ncorresponding parameters MITER, BEVEL, and ROUND. The default joint is\\nMITER.</p>\\n',\n                itemtype: 'method',\n                name: 'strokeJoin',\n                params: [\n                  {\n                    name: 'join',\n                    description: '<p>either MITER, BEVEL, ROUND</p>\\n',\n                    type: 'Constant'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nnoFill();\\nstrokeWeight(10.0);\\nstrokeJoin(MITER);\\nbeginShape();\\nvertex(35, 20);\\nvertex(65, 50);\\nvertex(35, 80);\\nendShape();\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nnoFill();\\nstrokeWeight(10.0);\\nstrokeJoin(BEVEL);\\nbeginShape();\\nvertex(35, 20);\\nvertex(65, 50);\\nvertex(35, 80);\\nendShape();\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nnoFill();\\nstrokeWeight(10.0);\\nstrokeJoin(ROUND);\\nbeginShape();\\nvertex(35, 20);\\nvertex(65, 50);\\nvertex(35, 80);\\nendShape();\\n</code>\\n</div>'\n                ],\n                alt:\n                  'Right-facing arrowhead shape with pointed tip in center of canvas.\\nRight-facing arrowhead shape with flat tip in center of canvas.\\nRight-facing arrowhead shape with rounded tip in center of canvas.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Attributes'\n              },\n              {\n                file: 'src/core/shape/attributes.js',\n                line: 323,\n                description:\n                  '<p>Sets the width of the stroke used for lines, points, and the border\\naround shapes. All widths are set in units of pixels.</p>\\n',\n                itemtype: 'method',\n                name: 'strokeWeight',\n                params: [\n                  {\n                    name: 'weight',\n                    description: '<p>the weight (in pixels) of the stroke</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nstrokeWeight(1); // Default\\nline(20, 20, 80, 20);\\nstrokeWeight(4); // Thicker\\nline(20, 40, 80, 40);\\nstrokeWeight(10); // Beastly\\nline(20, 70, 80, 70);\\n</code>\\n</div>'\n                ],\n                alt: '3 horizontal black lines. Top line: thin, mid: medium, bottom:thick.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Attributes'\n              },\n              {\n                file: 'src/core/shape/curves.js',\n                line: 13,\n                description:\n                  '<p>Draws a cubic Bezier curve on the screen. These curves are defined by a\\nseries of anchor and control points. The first two parameters specify\\nthe first anchor point and the last two parameters specify the other\\nanchor point, which become the first and last points on the curve. The\\nmiddle parameters specify the two control points which define the shape\\nof the curve. Approximately speaking, control points &quot;pull&quot; the curve\\ntowards them.<br /><br />Bezier curves were developed by French\\nautomotive engineer Pierre Bezier, and are commonly used in computer\\ngraphics to define gently sloping curves. See also <a href=\"#/p5/curve\">curve()</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'bezier',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nnoFill();\\nstroke(255, 102, 0);\\nline(85, 20, 10, 10);\\nline(90, 90, 15, 80);\\nstroke(0, 0, 0);\\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nbackground(0, 0, 0);\\nnoFill();\\nstroke(255);\\nbezier(250, 250, 0, 100, 100, 0, 100, 0, 0, 0, 100, 0);\\n</code>\\n</div>'\n                ],\n                alt:\n                  'stretched black s-shape in center with orange lines extending from end points.\\nstretched black s-shape with 10 5x5 white ellipses along the shape.\\nstretched black s-shape with 7 5x5 ellipses and orange lines along the shape.\\nstretched black s-shape with 17 small orange lines extending from under shape.\\nhorseshoe shape with orange ends facing left and black curved center.\\nhorseshoe shape with orange ends facing left and black curved center.\\nLine shaped like right-facing arrow,points move with mouse-x and warp shape.\\nhorizontal line that hooks downward on the right and 13 5x5 ellipses along it.\\nright curving line mid-right of canvas with 7 short lines radiating from it.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Curves',\n                overloads: [\n                  {\n                    line: 13,\n                    params: [\n                      {\n                        name: 'x1',\n                        description: '<p>x-coordinate for the first anchor point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description: '<p>y-coordinate for the first anchor point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '<p>x-coordinate for the first control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '<p>y-coordinate for the first control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '<p>x-coordinate for the second control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '<p>y-coordinate for the second control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x4',\n                        description: '<p>x-coordinate for the second anchor point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y4',\n                        description: '<p>y-coordinate for the second anchor point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 66,\n                    params: [\n                      {\n                        name: 'x1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z1',\n                        description: '<p>z-coordinate for the first anchor point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z2',\n                        description: '<p>z-coordinate for the first control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z3',\n                        description: '<p>z-coordinate for the second control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x4',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y4',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z4',\n                        description: '<p>z-coordinate for the second anchor point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/core/shape/curves.js',\n                line: 96,\n                description:\n                  '<p>Sets the resolution at which Beziers display.</p>\\n<p>The default value is 20.</p>\\n<p>This function is only useful when using the WEBGL renderer\\nas the default canvas renderer does not use this information.</p>\\n',\n                itemtype: 'method',\n                name: 'bezierDetail',\n                params: [\n                  {\n                    name: 'detail',\n                    description: '<p>resolution of the curves</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div modernizr='webgl'>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  noFill();\\n\\n  bezierDetail(5);\\n}\\n\\nfunction draw() {\\n  background(200);\\n\\n  bezier(-40, -40, 0,\\n          90, -40, 0,\\n         -90,  40, 0,\\n          40,  40, 0);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'stretched black s-shape with a low level of bezier detail',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Curves'\n              },\n              {\n                file: 'src/core/shape/curves.js',\n                line: 139,\n                description:\n                  '<p>Evaluates the Bezier at position t for points a, b, c, d.\\nThe parameters a and d are the first and last points\\non the curve, and b and c are the control points.\\nThe final parameter t varies between 0 and 1.\\nThis can be done once with the x coordinates and a second time\\nwith the y coordinates to get the location of a bezier curve at t.</p>\\n',\n                itemtype: 'method',\n                name: 'bezierPoint',\n                params: [\n                  {\n                    name: 'a',\n                    description: '<p>coordinate of first point on the curve</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'b',\n                    description: '<p>coordinate of first control point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'c',\n                    description: '<p>coordinate of second control point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'd',\n                    description: '<p>coordinate of second point on the curve</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 't',\n                    description: '<p>value between 0 and 1</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'the value of the Bezier at position t',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\nnoFill();\\nlet x1 = 85,\\n x2 = 10,\\n x3 = 90,\\n x4 = 15;\\nlet y1 = 20,\\n y2 = 10,\\n y3 = 90,\\n y4 = 80;\\nbezier(x1, y1, x2, y2, x3, y3, x4, y4);\\nfill(255);\\nlet steps = 10;\\nfor (let i = 0; i <= steps; i++) {\\n  let t = i / steps;\\n  let x = bezierPoint(x1, x2, x3, x4, t);\\n  let y = bezierPoint(y1, y2, y3, y4, t);\\n  ellipse(x, y, 5, 5);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'stretched black s-shape with 17 small orange lines extending from under shape.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Curves'\n              },\n              {\n                file: 'src/core/shape/curves.js',\n                line: 194,\n                description:\n                  '<p>Evaluates the tangent to the Bezier at position t for points a, b, c, d.\\nThe parameters a and d are the first and last points\\non the curve, and b and c are the control points.\\nThe final parameter t varies between 0 and 1.</p>\\n',\n                itemtype: 'method',\n                name: 'bezierTangent',\n                params: [\n                  {\n                    name: 'a',\n                    description: '<p>coordinate of first point on the curve</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'b',\n                    description: '<p>coordinate of first control point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'c',\n                    description: '<p>coordinate of second control point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'd',\n                    description: '<p>coordinate of second point on the curve</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 't',\n                    description: '<p>value between 0 and 1</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'the tangent at position t',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\nnoFill();\\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\\nlet steps = 6;\\nfill(255);\\nfor (let i = 0; i <= steps; i++) {\\n  let t = i / steps;\\n  // Get the location of the point\\n  let x = bezierPoint(85, 10, 90, 15, t);\\n  let y = bezierPoint(20, 10, 90, 80, t);\\n  // Get the tangent points\\n  let tx = bezierTangent(85, 10, 90, 15, t);\\n  let ty = bezierTangent(20, 10, 90, 80, t);\\n  // Calculate an angle from the tangent points\\n  let a = atan2(ty, tx);\\n  a += PI;\\n  stroke(255, 102, 0);\\n  line(x, y, cos(a) * 30 + x, sin(a) * 30 + y);\\n  // The following line of code makes a line\\n  // inverse of the above line\\n  //line(x, y, cos(a)*-30 + x, sin(a)*-30 + y);\\n  stroke(0);\\n  ellipse(x, y, 5, 5);\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nnoFill();\\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\\nstroke(255, 102, 0);\\nlet steps = 16;\\nfor (let i = 0; i <= steps; i++) {\\n  let t = i / steps;\\n  let x = bezierPoint(85, 10, 90, 15, t);\\n  let y = bezierPoint(20, 10, 90, 80, t);\\n  let tx = bezierTangent(85, 10, 90, 15, t);\\n  let ty = bezierTangent(20, 10, 90, 80, t);\\n  let a = atan2(ty, tx);\\n  a -= HALF_PI;\\n  line(x, y, cos(a) * 8 + x, sin(a) * 8 + y);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  's-shaped line with 17 short orange lines extending from underside of shape',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Curves'\n              },\n              {\n                file: 'src/core/shape/curves.js',\n                line: 273,\n                description:\n                  '<p>Draws a curved line on the screen between two points, given as the\\nmiddle four parameters. The first two parameters are a control point, as\\nif the curve came from this point even though it&#39;s not drawn. The last\\ntwo parameters similarly describe the other control point. <br /><br />\\nLonger curves can be created by putting a series of <a href=\"#/p5/curve\">curve()</a> functions\\ntogether or using <a href=\"#/p5/curveVertex\">curveVertex()</a>. An additional function called\\n<a href=\"#/p5/curveTightness\">curveTightness()</a> provides control for the visual quality of the curve.\\nThe <a href=\"#/p5/curve\">curve()</a> function is an implementation of Catmull-Rom splines.</p>\\n',\n                itemtype: 'method',\n                name: 'curve',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nnoFill();\\nstroke(255, 102, 0);\\ncurve(5, 26, 5, 26, 73, 24, 73, 61);\\nstroke(0);\\ncurve(5, 26, 73, 24, 73, 61, 15, 65);\\nstroke(255, 102, 0);\\ncurve(73, 24, 73, 61, 15, 65, 15, 65);\\n</code>\\n</div>\\n<div>\\n<code>\\n// Define the curve points as JavaScript objects\\nlet p1 = { x: 5, y: 26 },\\n p2 = { x: 73, y: 24 };\\nlet p3 = { x: 73, y: 61 },\\n p4 = { x: 15, y: 65 };\\nnoFill();\\nstroke(255, 102, 0);\\ncurve(p1.x, p1.y, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);\\nstroke(0);\\ncurve(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, p4.x, p4.y);\\nstroke(255, 102, 0);\\ncurve(p2.x, p2.y, p3.x, p3.y, p4.x, p4.y, p4.x, p4.y);\\n</code>\\n</div>\\n<div>\\n<code>\\nnoFill();\\nstroke(255, 102, 0);\\ncurve(5, 26, 0, 5, 26, 0, 73, 24, 0, 73, 61, 0);\\nstroke(0);\\ncurve(5, 26, 0, 73, 24, 0, 73, 61, 0, 15, 65, 0);\\nstroke(255, 102, 0);\\ncurve(73, 24, 0, 73, 61, 0, 15, 65, 0, 15, 65, 0);\\n</code>\\n</div>'\n                ],\n                alt:\n                  'horseshoe shape with orange ends facing left and black curved center.\\nhorseshoe shape with orange ends facing left and black curved center.\\ncurving black and orange lines.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Curves',\n                overloads: [\n                  {\n                    line: 273,\n                    params: [\n                      {\n                        name: 'x1',\n                        description:\n                          '<p>x-coordinate for the beginning control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description:\n                          '<p>y-coordinate for the beginning control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '<p>x-coordinate for the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '<p>y-coordinate for the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '<p>x-coordinate for the second point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '<p>y-coordinate for the second point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x4',\n                        description: '<p>x-coordinate for the ending control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y4',\n                        description: '<p>y-coordinate for the ending control point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 338,\n                    params: [\n                      {\n                        name: 'x1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z1',\n                        description:\n                          '<p>z-coordinate for the beginning control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z2',\n                        description: '<p>z-coordinate for the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z3',\n                        description: '<p>z-coordinate for the second point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x4',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y4',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z4',\n                        description: '<p>z-coordinate for the ending control point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/core/shape/curves.js',\n                line: 364,\n                description:\n                  '<p>Sets the resolution at which curves display.</p>\\n<p>The default value is 20 while the minimum value is 3.</p>\\n<p>This function is only useful when using the WEBGL renderer\\nas the default canvas renderer does not use this\\ninformation.</p>\\n',\n                itemtype: 'method',\n                name: 'curveDetail',\n                params: [\n                  {\n                    name: 'resolution',\n                    description: '<p>resolution of the curves</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div modernizr='webgl'>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n\\n  curveDetail(5);\\n}\\nfunction draw() {\\n  background(200);\\n\\n  curve(250, 600, 0, -30, 40, 0, 30, 30, 0, -250, 600, 0);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'white arch shape with a low level of curve detail.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Curves'\n              },\n              {\n                file: 'src/core/shape/curves.js',\n                line: 406,\n                description:\n                  '<p>Modifies the quality of forms created with <a href=\"#/p5/curve\">curve()</a> and <a href=\"#/p5/curveVertex\">curveVertex()</a>.\\nThe parameter tightness determines how the curve fits to the vertex\\npoints. The value 0.0 is the default value for tightness (this value\\ndefines the curves to be Catmull-Rom splines) and the value 1.0 connects\\nall the points with straight lines. Values within the range -5.0 and 5.0\\nwill deform the curves but will leave them recognizable and as values\\nincrease in magnitude, they will continue to deform.</p>\\n',\n                itemtype: 'method',\n                name: 'curveTightness',\n                params: [\n                  {\n                    name: 'amount',\n                    description:\n                      '<p>amount of deformation from the original vertices</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\n// Move the mouse left and right to see the curve change\\n\\nfunction setup() {\\n  createCanvas(100, 100);\\n  noFill();\\n}\\n\\nfunction draw() {\\n  background(204);\\n  let t = map(mouseX, 0, width, -5, 5);\\n  curveTightness(t);\\n  beginShape();\\n  curveVertex(10, 26);\\n  curveVertex(10, 26);\\n  curveVertex(83, 24);\\n  curveVertex(83, 61);\\n  curveVertex(25, 65);\\n  curveVertex(25, 65);\\n  endShape();\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'Line shaped like right-facing arrow,points move with mouse-x and warp shape.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Curves'\n              },\n              {\n                file: 'src/core/shape/curves.js',\n                line: 453,\n                description:\n                  '<p>Evaluates the curve at position t for points a, b, c, d.\\nThe parameter t varies between 0 and 1, a and d are control points\\nof the curve, and b and c are the start and end points of the curve.\\nThis can be done once with the x coordinates and a second time\\nwith the y coordinates to get the location of a curve at t.</p>\\n',\n                itemtype: 'method',\n                name: 'curvePoint',\n                params: [\n                  {\n                    name: 'a',\n                    description: '<p>coordinate of first control point of the curve</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'b',\n                    description: '<p>coordinate of first point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'c',\n                    description: '<p>coordinate of second point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'd',\n                    description: '<p>coordinate of second control point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 't',\n                    description: '<p>value between 0 and 1</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'bezier value at position t',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\nnoFill();\\ncurve(5, 26, 5, 26, 73, 24, 73, 61);\\ncurve(5, 26, 73, 24, 73, 61, 15, 65);\\nfill(255);\\nellipseMode(CENTER);\\nlet steps = 6;\\nfor (let i = 0; i <= steps; i++) {\\n  let t = i / steps;\\n  let x = curvePoint(5, 5, 73, 73, t);\\n  let y = curvePoint(26, 26, 24, 61, t);\\n  ellipse(x, y, 5, 5);\\n  x = curvePoint(5, 73, 73, 15, t);\\n  y = curvePoint(26, 24, 61, 65, t);\\n  ellipse(x, y, 5, 5);\\n}\\n</code>\\n</div>\\n\\nline hooking down to right-bottom with 13 5x5 white ellipse points'\n                ],\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Curves'\n              },\n              {\n                file: 'src/core/shape/curves.js',\n                line: 502,\n                description:\n                  '<p>Evaluates the tangent to the curve at position t for points a, b, c, d.\\nThe parameter t varies between 0 and 1, a and d are points on the curve,\\nand b and c are the control points.</p>\\n',\n                itemtype: 'method',\n                name: 'curveTangent',\n                params: [\n                  {\n                    name: 'a',\n                    description: '<p>coordinate of first point on the curve</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'b',\n                    description: '<p>coordinate of first control point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'c',\n                    description: '<p>coordinate of second control point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'd',\n                    description: '<p>coordinate of second point on the curve</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 't',\n                    description: '<p>value between 0 and 1</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'the tangent at position t',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\nnoFill();\\ncurve(5, 26, 73, 24, 73, 61, 15, 65);\\nlet steps = 6;\\nfor (let i = 0; i <= steps; i++) {\\n  let t = i / steps;\\n  let x = curvePoint(5, 73, 73, 15, t);\\n  let y = curvePoint(26, 24, 61, 65, t);\\n  //ellipse(x, y, 5, 5);\\n  let tx = curveTangent(5, 73, 73, 15, t);\\n  let ty = curveTangent(26, 24, 61, 65, t);\\n  let a = atan2(ty, tx);\\n  a -= PI / 2.0;\\n  line(x, y, cos(a) * 8 + x, sin(a) * 8 + y);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'right curving line mid-right of canvas with 7 short lines radiating from it.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Curves'\n              },\n              {\n                file: 'src/core/shape/vertex.js',\n                line: 22,\n                description:\n                  '<p>Use the <a href=\"#/p5/beginContour\">beginContour()</a> and <a href=\"#/p5/endContour\">endContour()</a> functions to create negative\\nshapes within shapes such as the center of the letter &#39;O&#39;. <a href=\"#/p5/beginContour\">beginContour()</a>\\nbegins recording vertices for the shape and <a href=\"#/p5/endContour\">endContour()</a> stops recording.\\nThe vertices that define a negative shape must &quot;wind&quot; in the opposite\\ndirection from the exterior shape. First draw vertices for the exterior\\nclockwise order, then for internal shapes, draw vertices\\nshape in counter-clockwise.\\n<br><br>\\nThese functions can only be used within a <a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a> pair and\\ntransformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work\\nwithin a <a href=\"#/p5/beginContour\">beginContour()</a>/<a href=\"#/p5/endContour\">endContour()</a> pair. It is also not possible to use\\nother shapes, such as <a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within.</p>\\n',\n                itemtype: 'method',\n                name: 'beginContour',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\ntranslate(50, 50);\\nstroke(255, 0, 0);\\nbeginShape();\\n// Exterior part of shape, clockwise winding\\nvertex(-40, -40);\\nvertex(40, -40);\\nvertex(40, 40);\\nvertex(-40, 40);\\n// Interior part of shape, counter-clockwise winding\\nbeginContour();\\nvertex(-20, -20);\\nvertex(-20, 20);\\nvertex(20, 20);\\nvertex(20, -20);\\nendContour();\\nendShape(CLOSE);\\n</code>\\n</div>'\n                ],\n                alt:\n                  'white rect and smaller grey rect with red outlines in center of canvas.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Vertex'\n              },\n              {\n                file: 'src/core/shape/vertex.js',\n                line: 70,\n                description:\n                  '<p>Using the <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a> functions allow creating more\\ncomplex forms. <a href=\"#/p5/beginShape\">beginShape()</a> begins recording vertices for a shape and\\n<a href=\"#/p5/endShape\">endShape()</a> stops recording. The value of the kind parameter tells it which\\ntypes of shapes to create from the provided vertices. With no mode\\nspecified, the shape can be any irregular polygon.\\n<br><br>\\nThe parameters available for <a href=\"#/p5/beginShape\">beginShape()</a> are POINTS, LINES, TRIANGLES,\\nTRIANGLE_FAN, TRIANGLE_STRIP, QUADS, and QUAD_STRIP. After calling the\\n<a href=\"#/p5/beginShape\">beginShape()</a> function, a series of <a href=\"#/p5/vertex\">vertex()</a> commands must follow. To stop\\ndrawing the shape, call <a href=\"#/p5/endShape\">endShape()</a>. Each shape will be outlined with the\\ncurrent stroke color and filled with the fill color.\\n<br><br>\\nTransformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work\\nwithin <a href=\"#/p5/beginShape\">beginShape()</a>. It is also not possible to use other shapes, such as\\n<a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within <a href=\"#/p5/beginShape\">beginShape()</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'beginShape',\n                params: [\n                  {\n                    name: 'kind',\n                    description:\n                      '<p>either POINTS, LINES, TRIANGLES, TRIANGLE_FAN\\n                               TRIANGLE_STRIP, QUADS, or QUAD_STRIP</p>\\n',\n                    type: 'Constant',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nbeginShape();\\nvertex(30, 20);\\nvertex(85, 20);\\nvertex(85, 75);\\nvertex(30, 75);\\nendShape(CLOSE);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nbeginShape(POINTS);\\nvertex(30, 20);\\nvertex(85, 20);\\nvertex(85, 75);\\nvertex(30, 75);\\nendShape();\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nbeginShape(LINES);\\nvertex(30, 20);\\nvertex(85, 20);\\nvertex(85, 75);\\nvertex(30, 75);\\nendShape();\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nnoFill();\\nbeginShape();\\nvertex(30, 20);\\nvertex(85, 20);\\nvertex(85, 75);\\nvertex(30, 75);\\nendShape();\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nnoFill();\\nbeginShape();\\nvertex(30, 20);\\nvertex(85, 20);\\nvertex(85, 75);\\nvertex(30, 75);\\nendShape(CLOSE);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nbeginShape(TRIANGLES);\\nvertex(30, 75);\\nvertex(40, 20);\\nvertex(50, 75);\\nvertex(60, 20);\\nvertex(70, 75);\\nvertex(80, 20);\\nendShape();\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nbeginShape(TRIANGLE_STRIP);\\nvertex(30, 75);\\nvertex(40, 20);\\nvertex(50, 75);\\nvertex(60, 20);\\nvertex(70, 75);\\nvertex(80, 20);\\nvertex(90, 75);\\nendShape();\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nbeginShape(TRIANGLE_FAN);\\nvertex(57.5, 50);\\nvertex(57.5, 15);\\nvertex(92, 50);\\nvertex(57.5, 85);\\nvertex(22, 50);\\nvertex(57.5, 15);\\nendShape();\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nbeginShape(QUADS);\\nvertex(30, 20);\\nvertex(30, 75);\\nvertex(50, 75);\\nvertex(50, 20);\\nvertex(65, 20);\\nvertex(65, 75);\\nvertex(85, 75);\\nvertex(85, 20);\\nendShape();\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nbeginShape(QUAD_STRIP);\\nvertex(30, 20);\\nvertex(30, 75);\\nvertex(50, 20);\\nvertex(50, 75);\\nvertex(65, 20);\\nvertex(65, 75);\\nvertex(85, 20);\\nvertex(85, 75);\\nendShape();\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nbeginShape();\\nvertex(20, 20);\\nvertex(40, 20);\\nvertex(40, 40);\\nvertex(60, 40);\\nvertex(60, 60);\\nvertex(20, 60);\\nendShape(CLOSE);\\n</code>\\n</div>'\n                ],\n                alt:\n                  'white square-shape with black outline in middle-right of canvas.\\n4 black points in a square shape in middle-right of canvas.\\n2 horizontal black lines. In the top-right and bottom-right of canvas.\\n3 line shape with horizontal on top, vertical in middle and horizontal bottom.\\nsquare line shape in middle-right of canvas.\\n2 white triangle shapes mid-right canvas. left one pointing up and right down.\\n5 horizontal interlocking and alternating white triangles in mid-right canvas.\\n4 interlocking white triangles in 45 degree rotated square-shape.\\n2 white rectangle shapes in mid-right canvas. Both 20x55.\\n3 side-by-side white rectangles center rect is smaller in mid-right canvas.\\nThick white l-shape with black outline mid-top-left of canvas.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Vertex'\n              },\n              {\n                file: 'src/core/shape/vertex.js',\n                line: 270,\n                description:\n                  '<p>Specifies vertex coordinates for Bezier curves. Each call to\\nbezierVertex() defines the position of two control points and\\none anchor point of a Bezier curve, adding a new segment to a\\nline or shape. For WebGL mode bezierVertex() can be used in 2D\\nas well as 3D mode. 2D mode expects 6 parameters, while 3D mode\\nexpects 9 parameters (including z coordinates).\\n<br><br>\\nThe first time bezierVertex() is used within a <a href=\"#/p5/beginShape\">beginShape()</a>\\ncall, it must be prefaced with a call to <a href=\"#/p5/vertex\">vertex()</a> to set the first anchor\\npoint. This function must be used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a>\\nand only when there is no MODE or POINTS parameter specified to\\n<a href=\"#/p5/beginShape\">beginShape()</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'bezierVertex',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nnoFill();\\nbeginShape();\\nvertex(30, 20);\\nbezierVertex(80, 0, 80, 75, 30, 75);\\nendShape();\\n</code>\\n</div>',\n                  '\\n<div>\\n<code>\\nbeginShape();\\nvertex(30, 20);\\nbezierVertex(80, 0, 80, 75, 30, 75);\\nbezierVertex(50, 80, 60, 25, 30, 20);\\nendShape();\\n</code>\\n</div>',\n                  \"\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  setAttributes('antialias', true);\\n}\\nfunction draw() {\\n  orbitControl();\\n  background(50);\\n  strokeWeight(4);\\n  stroke(255);\\n  point(-25, 30);\\n  point(25, 30);\\n  point(25, -30);\\n  point(-25, -30);\\n\\n  strokeWeight(1);\\n  noFill();\\n\\n  beginShape();\\n  vertex(-25, 30);\\n  bezierVertex(25, 30, 25, -30, -25, -30);\\n  endShape();\\n\\n  beginShape();\\n  vertex(-25, 30, 20);\\n  bezierVertex(25, 30, 20, 25, -30, 20, -25, -30, 20);\\n  endShape();\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'crescent shape in middle of canvas with another crescent shape on positive z-axis.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Vertex',\n                overloads: [\n                  {\n                    line: 270,\n                    params: [\n                      {\n                        name: 'x2',\n                        description: '<p>x-coordinate for the first control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '<p>y-coordinate for the first control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '<p>x-coordinate for the second control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '<p>y-coordinate for the second control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x4',\n                        description: '<p>x-coordinate for the anchor point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y4',\n                        description: '<p>y-coordinate for the anchor point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 358,\n                    params: [\n                      {\n                        name: 'x2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z2',\n                        description:\n                          '<p>z-coordinate for the first control point (for WebGL mode)</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z3',\n                        description:\n                          '<p>z-coordinate for the second control point (for WebGL mode)</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x4',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y4',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z4',\n                        description:\n                          '<p>z-coordinate for the anchor point (for WebGL mode)</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/core/shape/vertex.js',\n                line: 398,\n                description:\n                  '<p>Specifies vertex coordinates for curves. This function may only\\nbe used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a> and only when there\\nis no MODE parameter specified to <a href=\"#/p5/beginShape\">beginShape()</a>.\\nFor WebGL mode curveVertex() can be used in 2D as well as 3D mode.\\n2D mode expects 2 parameters, while 3D mode expects 3 parameters.\\n<br><br>\\nThe first and last points in a series of curveVertex() lines will be used to\\nguide the beginning and end of a the curve. A minimum of four\\npoints is required to draw a tiny curve between the second and\\nthird points. Adding a fifth point with curveVertex() will draw\\nthe curve between the second, third, and fourth points. The\\ncurveVertex() function is an implementation of Catmull-Rom\\nsplines.</p>\\n',\n                itemtype: 'method',\n                name: 'curveVertex',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nstrokeWeight(5);\\npoint(84, 91);\\npoint(68, 19);\\npoint(21, 17);\\npoint(32, 91);\\nstrokeWeight(1);\\n\\nnoFill();\\nbeginShape();\\ncurveVertex(84, 91);\\ncurveVertex(84, 91);\\ncurveVertex(68, 19);\\ncurveVertex(21, 17);\\ncurveVertex(32, 91);\\ncurveVertex(32, 91);\\nendShape();\\n</code>\\n</div>'\n                ],\n                alt:\n                  'Upside-down u-shape line, mid canvas. left point extends beyond canvas view.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Vertex',\n                overloads: [\n                  {\n                    line: 398,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>x-coordinate of the vertex</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y-coordinate of the vertex</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 443,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>z-coordinate of the vertex (for WebGL mode)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/core/shape/vertex.js',\n                line: 508,\n                description:\n                  '<p>Use the <a href=\"#/p5/beginContour\">beginContour()</a> and <a href=\"#/p5/endContour\">endContour()</a> functions to create negative\\nshapes within shapes such as the center of the letter &#39;O&#39;. <a href=\"#/p5/beginContour\">beginContour()</a>\\nbegins recording vertices for the shape and <a href=\"#/p5/endContour\">endContour()</a> stops recording.\\nThe vertices that define a negative shape must &quot;wind&quot; in the opposite\\ndirection from the exterior shape. First draw vertices for the exterior\\nclockwise order, then for internal shapes, draw vertices\\nshape in counter-clockwise.\\n<br><br>\\nThese functions can only be used within a <a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a> pair and\\ntransformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work\\nwithin a <a href=\"#/p5/beginContour\">beginContour()</a>/<a href=\"#/p5/endContour\">endContour()</a> pair. It is also not possible to use\\nother shapes, such as <a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within.</p>\\n',\n                itemtype: 'method',\n                name: 'endContour',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\ntranslate(50, 50);\\nstroke(255, 0, 0);\\nbeginShape();\\n// Exterior part of shape, clockwise winding\\nvertex(-40, -40);\\nvertex(40, -40);\\nvertex(40, 40);\\nvertex(-40, 40);\\n// Interior part of shape, counter-clockwise winding\\nbeginContour();\\nvertex(-20, -20);\\nvertex(-20, 20);\\nvertex(20, 20);\\nvertex(20, -20);\\nendContour();\\nendShape(CLOSE);\\n</code>\\n</div>'\n                ],\n                alt:\n                  'white rect and smaller grey rect with red outlines in center of canvas.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Vertex'\n              },\n              {\n                file: 'src/core/shape/vertex.js',\n                line: 568,\n                description:\n                  '<p>The <a href=\"#/p5/endShape\">endShape()</a> function is the companion to <a href=\"#/p5/beginShape\">beginShape()</a> and may only be\\ncalled after <a href=\"#/p5/beginShape\">beginShape()</a>. When <a href=\"#/p5/endshape\">endshape()</a> is called, all of image data\\ndefined since the previous call to <a href=\"#/p5/beginShape\">beginShape()</a> is written into the image\\nbuffer. The constant CLOSE as the value for the MODE parameter to close\\nthe shape (to connect the beginning and the end).</p>\\n',\n                itemtype: 'method',\n                name: 'endShape',\n                params: [\n                  {\n                    name: 'mode',\n                    description: '<p>use CLOSE to close the shape</p>\\n',\n                    type: 'Constant',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nnoFill();\\n\\nbeginShape();\\nvertex(20, 20);\\nvertex(45, 20);\\nvertex(45, 80);\\nendShape(CLOSE);\\n\\nbeginShape();\\nvertex(50, 20);\\nvertex(75, 20);\\nvertex(75, 80);\\nendShape();\\n</code>\\n</div>'\n                ],\n                alt:\n                  'Triangle line shape with smallest interior angle on bottom and upside-down L.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Vertex'\n              },\n              {\n                file: 'src/core/shape/vertex.js',\n                line: 654,\n                description:\n                  '<p>Specifies vertex coordinates for quadratic Bezier curves. Each call to\\nquadraticVertex() defines the position of one control points and one\\nanchor point of a Bezier curve, adding a new segment to a line or shape.\\nThe first time quadraticVertex() is used within a <a href=\"#/p5/beginShape\">beginShape()</a> call, it\\nmust be prefaced with a call to <a href=\"#/p5/vertex\">vertex()</a> to set the first anchor point.\\nFor WebGL mode quadraticVertex() can be used in 2D as well as 3D mode.\\n2D mode expects 4 parameters, while 3D mode expects 6 parameters\\n(including z coordinates).\\n<br><br>\\nThis function must be used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a>\\nand only when there is no MODE or POINTS parameter specified to\\n<a href=\"#/p5/beginShape\">beginShape()</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'quadraticVertex',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nstrokeWeight(5);\\npoint(20, 20);\\npoint(80, 20);\\npoint(50, 50);\\n\\nnoFill();\\nstrokeWeight(1);\\nbeginShape();\\nvertex(20, 20);\\nquadraticVertex(80, 20, 50, 50);\\nendShape();\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nstrokeWeight(5);\\npoint(20, 20);\\npoint(80, 20);\\npoint(50, 50);\\n\\npoint(20, 80);\\npoint(80, 80);\\npoint(80, 60);\\n\\nnoFill();\\nstrokeWeight(1);\\nbeginShape();\\nvertex(20, 20);\\nquadraticVertex(80, 20, 50, 50);\\nquadraticVertex(20, 80, 80, 80);\\nvertex(80, 60);\\nendShape();\\n</code>\\n</div>'\n                ],\n                alt:\n                  'arched-shaped black line with 4 pixel thick stroke weight.\\nbackwards s-shaped black line with 4 pixel thick stroke weight.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Vertex',\n                overloads: [\n                  {\n                    line: 654,\n                    params: [\n                      {\n                        name: 'cx',\n                        description: '<p>x-coordinate for the control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'cy',\n                        description: '<p>y-coordinate for the control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '<p>x-coordinate for the anchor point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '<p>y-coordinate for the anchor point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 720,\n                    params: [\n                      {\n                        name: 'cx',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'cy',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'cz',\n                        description:\n                          '<p>z-coordinate for the control point (for WebGL mode)</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z3',\n                        description:\n                          '<p>z-coordinate for the anchor point (for WebGL mode)</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/core/shape/vertex.js',\n                line: 813,\n                description:\n                  '<p>All shapes are constructed by connecting a series of vertices. <a href=\"#/p5/vertex\">vertex()</a>\\nis used to specify the vertex coordinates for points, lines, triangles,\\nquads, and polygons. It is used exclusively within the <a href=\"#/p5/beginShape\">beginShape()</a> and\\n<a href=\"#/p5/endShape\">endShape()</a> functions.</p>\\n',\n                itemtype: 'method',\n                name: 'vertex',\n                chainable: 1,\n                example: [\n                  \"\\n<div>\\n<code>\\nstrokeWeight(3);\\nbeginShape(POINTS);\\nvertex(30, 20);\\nvertex(85, 20);\\nvertex(85, 75);\\nvertex(30, 75);\\nendShape();\\n</code>\\n</div>\\n\\n<div>\\n<code>\\ncreateCanvas(100, 100, WEBGL);\\nbackground(240, 240, 240);\\nfill(237, 34, 93);\\nnoStroke();\\nbeginShape();\\nvertex(0, 35);\\nvertex(35, 0);\\nvertex(0, -35);\\nvertex(-35, 0);\\nendShape();\\n</code>\\n</div>\\n\\n<div>\\n<code>\\ncreateCanvas(100, 100, WEBGL);\\nbackground(240, 240, 240);\\nfill(237, 34, 93);\\nnoStroke();\\nbeginShape();\\nvertex(-10, 10);\\nvertex(0, 35);\\nvertex(10, 10);\\nvertex(35, 0);\\nvertex(10, -8);\\nvertex(0, -35);\\nvertex(-10, -8);\\nvertex(-35, 0);\\nendShape();\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nstrokeWeight(3);\\nstroke(237, 34, 93);\\nbeginShape(LINES);\\nvertex(10, 35);\\nvertex(90, 35);\\nvertex(10, 65);\\nvertex(90, 65);\\nvertex(35, 10);\\nvertex(35, 90);\\nvertex(65, 10);\\nvertex(65, 90);\\nendShape();\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// Click to change the number of sides.\\n// In WebGL mode, custom shapes will only\\n// display hollow fill sections when\\n// all calls to vertex() use the same z-value.\\n\\nlet sides = 3;\\nlet angle, px, py;\\n\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  setAttributes('antialias', true);\\n  fill(237, 34, 93);\\n  strokeWeight(3);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  rotateX(frameCount * 0.01);\\n  rotateZ(frameCount * 0.01);\\n  ngon(sides, 0, 0, 80);\\n}\\n\\nfunction mouseClicked() {\\n  if (sides > 6) {\\n    sides = 3;\\n  } else {\\n    sides++;\\n  }\\n}\\n\\nfunction ngon(n, x, y, d) {\\n  beginShape();\\n  for (var i = 0; i < n + 1; i++) {\\n    angle = TWO_PI / n * i;\\n    px = x + sin(angle) * d / 2;\\n    py = y - cos(angle) * d / 2;\\n    vertex(px, py, 0);\\n  }\\n  for (i = 0; i < n + 1; i++) {\\n    angle = TWO_PI / n * i;\\n    px = x + sin(angle) * d / 4;\\n    py = y - cos(angle) * d / 4;\\n    vertex(px, py, 0);\\n  }\\n  endShape();\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  '4 black points in a square shape in middle-right of canvas.\\n4 points making a diamond shape.\\n8 points making a star.\\n8 points making 4 lines.\\nA rotating 3D shape with a hollow section in the middle.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: 'Vertex',\n                overloads: [\n                  {\n                    line: 813,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>x-coordinate of the vertex</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y-coordinate of the vertex</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 945,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>z-coordinate of the vertex</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'u',\n                        description: '<p>the vertex&#39;s texture u-coordinate</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'v',\n                        description: '<p>the vertex&#39;s texture v-coordinate</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 13,\n                description: '<p>The default, two-dimensional renderer.</p>\\n',\n                itemtype: 'property',\n                name: 'P2D',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 19,\n                description:\n                  '<p>One of the two render modes in p5.js: P2D (default renderer) and WEBGL\\nEnables 3D render by introducing the third dimension: Z</p>\\n',\n                itemtype: 'property',\n                name: 'WEBGL',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 28,\n                itemtype: 'property',\n                name: 'ARROW',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 33,\n                itemtype: 'property',\n                name: 'CROSS',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 38,\n                itemtype: 'property',\n                name: 'HAND',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 43,\n                itemtype: 'property',\n                name: 'MOVE',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 48,\n                itemtype: 'property',\n                name: 'TEXT',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 53,\n                itemtype: 'property',\n                name: 'WAIT',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 61,\n                description:\n                  '<p>HALF_PI is a mathematical constant with the value\\n1.57079632679489661923. It is half the ratio of the\\ncircumference of a circle to its diameter. It is useful in\\ncombination with the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.</p>\\n',\n                itemtype: 'property',\n                name: 'HALF_PI',\n                type: 'Number',\n                final: 1,\n                example: ['\\n<div><code>\\narc(50, 50, 80, 80, 0, HALF_PI);\\n</code></div>'],\n                alt: '80x80 white quarter-circle with curve toward bottom right of canvas.',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 80,\n                description:\n                  '<p>PI is a mathematical constant with the value\\n3.14159265358979323846. It is the ratio of the circumference\\nof a circle to its diameter. It is useful in combination with\\nthe trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.</p>\\n',\n                itemtype: 'property',\n                name: 'PI',\n                type: 'Number',\n                final: 1,\n                example: ['\\n<div><code>\\narc(50, 50, 80, 80, 0, PI);\\n</code></div>'],\n                alt: 'white half-circle with curve toward bottom of canvas.',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 99,\n                description:\n                  '<p>QUARTER_PI is a mathematical constant with the value 0.7853982.\\nIt is one quarter the ratio of the circumference of a circle to\\nits diameter. It is useful in combination with the trigonometric\\nfunctions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.</p>\\n',\n                itemtype: 'property',\n                name: 'QUARTER_PI',\n                type: 'Number',\n                final: 1,\n                example: [\n                  '\\n<div><code>\\narc(50, 50, 80, 80, 0, QUARTER_PI);\\n</code></div>'\n                ],\n                alt:\n                  'white eighth-circle rotated about 40 degrees with curve bottom right canvas.',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 118,\n                description:\n                  '<p>TAU is an alias for TWO_PI, a mathematical constant with the\\nvalue 6.28318530717958647693. It is twice the ratio of the\\ncircumference of a circle to its diameter. It is useful in\\ncombination with the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.</p>\\n',\n                itemtype: 'property',\n                name: 'TAU',\n                type: 'Number',\n                final: 1,\n                example: ['\\n<div><code>\\narc(50, 50, 80, 80, 0, TAU);\\n</code></div>'],\n                alt: '80x80 white ellipse shape in center of canvas.',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 137,\n                description:\n                  '<p>TWO_PI is a mathematical constant with the value\\n6.28318530717958647693. It is twice the ratio of the\\ncircumference of a circle to its diameter. It is useful in\\ncombination with the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.</p>\\n',\n                itemtype: 'property',\n                name: 'TWO_PI',\n                type: 'Number',\n                final: 1,\n                example: ['\\n<div><code>\\narc(50, 50, 80, 80, 0, TWO_PI);\\n</code></div>'],\n                alt: '80x80 white ellipse shape in center of canvas.',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 156,\n                description:\n                  '<p>Constant to be used with <a href=\"#/p5/angleMode\">angleMode()</a> function, to set the mode which\\np5.js interprates and calculates angles (either DEGREES or RADIANS).</p>\\n',\n                itemtype: 'property',\n                name: 'DEGREES',\n                type: 'String',\n                final: 1,\n                example: [\n                  \"\\n<div class='norender'><code>\\nfunction setup() {\\n  angleMode(DEGREES);\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 170,\n                description:\n                  '<p>Constant to be used with <a href=\"#/p5/angleMode\">angleMode()</a> function, to set the mode which\\np5.js interprates and calculates angles (either RADIANS or DEGREES).</p>\\n',\n                itemtype: 'property',\n                name: 'RADIANS',\n                type: 'String',\n                final: 1,\n                example: [\n                  \"\\n<div class='norender'><code>\\nfunction setup() {\\n  angleMode(RADIANS);\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 188,\n                itemtype: 'property',\n                name: 'CORNER',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 193,\n                itemtype: 'property',\n                name: 'CORNERS',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 198,\n                itemtype: 'property',\n                name: 'RADIUS',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 203,\n                itemtype: 'property',\n                name: 'RIGHT',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 208,\n                itemtype: 'property',\n                name: 'LEFT',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 213,\n                itemtype: 'property',\n                name: 'CENTER',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 218,\n                itemtype: 'property',\n                name: 'TOP',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 223,\n                itemtype: 'property',\n                name: 'BOTTOM',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 228,\n                itemtype: 'property',\n                name: 'BASELINE',\n                type: 'String',\n                final: 1,\n                default: 'alphabetic',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 234,\n                itemtype: 'property',\n                name: 'POINTS',\n                type: 'Number',\n                final: 1,\n                default: '0x0000',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 240,\n                itemtype: 'property',\n                name: 'LINES',\n                type: 'Number',\n                final: 1,\n                default: '0x0001',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 246,\n                itemtype: 'property',\n                name: 'LINE_STRIP',\n                type: 'Number',\n                final: 1,\n                default: '0x0003',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 252,\n                itemtype: 'property',\n                name: 'LINE_LOOP',\n                type: 'Number',\n                final: 1,\n                default: '0x0002',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 258,\n                itemtype: 'property',\n                name: 'TRIANGLES',\n                type: 'Number',\n                final: 1,\n                default: '0x0004',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 264,\n                itemtype: 'property',\n                name: 'TRIANGLE_FAN',\n                type: 'Number',\n                final: 1,\n                default: '0x0006',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 270,\n                itemtype: 'property',\n                name: 'TRIANGLE_STRIP',\n                type: 'Number',\n                final: 1,\n                default: '0x0005',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 276,\n                itemtype: 'property',\n                name: 'QUADS',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 281,\n                itemtype: 'property',\n                name: 'QUAD_STRIP',\n                type: 'String',\n                final: 1,\n                default: 'quad_strip',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 287,\n                itemtype: 'property',\n                name: 'CLOSE',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 292,\n                itemtype: 'property',\n                name: 'OPEN',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 297,\n                itemtype: 'property',\n                name: 'CHORD',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 302,\n                itemtype: 'property',\n                name: 'PIE',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 307,\n                itemtype: 'property',\n                name: 'PROJECT',\n                type: 'String',\n                final: 1,\n                default: 'square',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 313,\n                itemtype: 'property',\n                name: 'SQUARE',\n                type: 'String',\n                final: 1,\n                default: 'butt',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 319,\n                itemtype: 'property',\n                name: 'ROUND',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 324,\n                itemtype: 'property',\n                name: 'BEVEL',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 329,\n                itemtype: 'property',\n                name: 'MITER',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 336,\n                itemtype: 'property',\n                name: 'RGB',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 341,\n                itemtype: 'property',\n                name: 'HSB',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 346,\n                itemtype: 'property',\n                name: 'HSL',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 353,\n                description:\n                  '<p>AUTO allows us to automatically set the width or height of an element (but not both),\\nbased on the current height and width of the element. Only one parameter can\\nbe passed to the <a href=\"/#/p5.Element/size\">size</a> function as AUTO, at a time.</p>\\n',\n                itemtype: 'property',\n                name: 'AUTO',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 380,\n                itemtype: 'property',\n                name: 'BLEND',\n                type: 'String',\n                final: 1,\n                default: 'source-over',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 386,\n                itemtype: 'property',\n                name: 'ADD',\n                type: 'String',\n                final: 1,\n                default: 'lighter',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 394,\n                itemtype: 'property',\n                name: 'DARKEST',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 399,\n                itemtype: 'property',\n                name: 'LIGHTEST',\n                type: 'String',\n                final: 1,\n                default: 'lighten',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 405,\n                itemtype: 'property',\n                name: 'DIFFERENCE',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 410,\n                itemtype: 'property',\n                name: 'SUBTRACT',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 415,\n                itemtype: 'property',\n                name: 'EXCLUSION',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 420,\n                itemtype: 'property',\n                name: 'MULTIPLY',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 425,\n                itemtype: 'property',\n                name: 'SCREEN',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 430,\n                itemtype: 'property',\n                name: 'REPLACE',\n                type: 'String',\n                final: 1,\n                default: 'copy',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 436,\n                itemtype: 'property',\n                name: 'OVERLAY',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 441,\n                itemtype: 'property',\n                name: 'HARD_LIGHT',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 446,\n                itemtype: 'property',\n                name: 'SOFT_LIGHT',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 451,\n                itemtype: 'property',\n                name: 'DODGE',\n                type: 'String',\n                final: 1,\n                default: 'color-dodge',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 457,\n                itemtype: 'property',\n                name: 'BURN',\n                type: 'String',\n                final: 1,\n                default: 'color-burn',\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 465,\n                itemtype: 'property',\n                name: 'THRESHOLD',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 470,\n                itemtype: 'property',\n                name: 'GRAY',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 475,\n                itemtype: 'property',\n                name: 'OPAQUE',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 480,\n                itemtype: 'property',\n                name: 'INVERT',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 485,\n                itemtype: 'property',\n                name: 'POSTERIZE',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 490,\n                itemtype: 'property',\n                name: 'DILATE',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 495,\n                itemtype: 'property',\n                name: 'ERODE',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 500,\n                itemtype: 'property',\n                name: 'BLUR',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 507,\n                itemtype: 'property',\n                name: 'NORMAL',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 512,\n                itemtype: 'property',\n                name: 'ITALIC',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 517,\n                itemtype: 'property',\n                name: 'BOLD',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 522,\n                itemtype: 'property',\n                name: 'BOLDITALIC',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 547,\n                itemtype: 'property',\n                name: 'IMAGE',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 561,\n                itemtype: 'property',\n                name: 'LANDSCAPE',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 566,\n                itemtype: 'property',\n                name: 'PORTRAIT',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 576,\n                itemtype: 'property',\n                name: 'GRID',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/constants.js',\n                line: 582,\n                itemtype: 'property',\n                name: 'AXES',\n                type: 'String',\n                final: 1,\n                class: 'p5',\n                module: 'Constants',\n                submodule: 'Constants'\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 22,\n                description:\n                  '<p>The <a href=\"#/p5/print\">print()</a> function writes to the console area of your browser.\\nThis function is often helpful for looking at the data a program is\\nproducing. This function creates a new line of text for each call to\\nthe function. Individual elements can be\\nseparated with quotes (&quot;&quot;) and joined with the addition operator (+).</p>\\n<p>Note that calling print() without any arguments invokes the window.print()\\nfunction which opens the browser&#39;s print dialog. To print a blank line\\nto console you can write print(&#39;\\\\n&#39;).</p>\\n',\n                itemtype: 'method',\n                name: 'print',\n                params: [\n                  {\n                    name: 'contents',\n                    description:\n                      '<p>any combination of Number, String, Object, Boolean,\\n                      Array to print</p>\\n',\n                    type: 'Any'\n                  }\n                ],\n                example: [\n                  \"\\n<div><code class='norender'>\\nlet x = 10;\\nprint('The value of x is ' + x);\\n// prints \\\"The value of x is 10\\\"\\n</code></div>\"\n                ],\n                alt: 'default grey canvas',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment'\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 53,\n                description:\n                  '<p>The system variable <a href=\"#/p5/frameCount\">frameCount</a> contains the number of frames that have\\nbeen displayed since the program started. Inside <a href=\"#/p5/setup\">setup()</a> the value is 0,\\nafter the first iteration of draw it is 1, etc.</p>\\n',\n                itemtype: 'property',\n                name: 'frameCount',\n                type: 'Integer',\n                readonly: '',\n                example: [\n                  '\\n  <div><code>\\nfunction setup() {\\n  frameRate(30);\\n  textSize(30);\\n  textAlign(CENTER);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  text(frameCount, width / 2, height / 2);\\n}\\n</code></div>'\n                ],\n                alt: 'numbers rapidly counting upward with frame count set to 30.',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment'\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 80,\n                description:\n                  '<p>The system variable <a href=\"#/p5/deltaTime\">deltaTime</a> contains the time\\ndifference between the beginning of the previous frame and the beginning\\nof the current frame in milliseconds.\\n<br><br>\\nThis variable is useful for creating time sensitive animation or physics\\ncalculation that should stay constant regardless of frame rate.</p>\\n',\n                itemtype: 'property',\n                name: 'deltaTime',\n                type: 'Integer',\n                readonly: '',\n                example: [\n                  '\\n<div><code>\\nlet rectX = 0;\\nlet fr = 30; //starting FPS\\nlet clr;\\n\\nfunction setup() {\\n  background(200);\\n  frameRate(fr); // Attempt to refresh at starting FPS\\n  clr = color(255, 0, 0);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  rectX = rectX + 1 * (deltaTime / 50); // Move Rectangle in relation to deltaTime\\n\\n  if (rectX >= width) {\\n    // If you go off screen.\\n    if (fr === 30) {\\n      clr = color(0, 0, 255);\\n      fr = 10;\\n      frameRate(fr); // make frameRate 10 FPS\\n    } else {\\n      clr = color(255, 0, 0);\\n      fr = 30;\\n      frameRate(fr); // make frameRate 30 FPS\\n    }\\n    rectX = 0;\\n  }\\n  fill(clr);\\n  rect(rectX, 40, 20, 20);\\n}\\n</code></div>'\n                ],\n                alt:\n                  'red rect moves left to right, followed by blue rect moving at the same speed\\nwith a lower frame rate. Loops.',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment'\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 131,\n                description:\n                  '<p>Confirms if the window a p5.js program is in is &quot;focused,&quot; meaning that\\nthe sketch will accept mouse or keyboard input. This variable is\\n&quot;true&quot; if the window is focused and &quot;false&quot; if not.</p>\\n',\n                itemtype: 'property',\n                name: 'focused',\n                type: 'Boolean',\n                readonly: '',\n                example: [\n                  '\\n<div><code>\\n// To demonstrate, put two windows side by side.\\n// Click on the window that the p5 sketch isn\\'t in!\\nfunction draw() {\\n  background(200);\\n  noStroke();\\n  fill(0, 200, 0);\\n  ellipse(25, 25, 50, 50);\\n\\n  if (!focused) {\\n   // or \"if (focused === false)\"\\n    stroke(200, 0, 0);\\n    line(0, 0, 100, 100);\\n    line(100, 0, 0, 100);\\n  }\\n}\\n</code></div>'\n                ],\n                alt:\n                  'green 50x50 ellipse at top left. Red X covers canvas when page focus changes',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment'\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 163,\n                description:\n                  '<p>Sets the cursor to a predefined symbol or an image, or makes it visible\\nif already hidden. If you are trying to set an image as the cursor, the\\nrecommended size is 16x16 or 32x32 pixels. The values for parameters x and y\\nmust be less than the dimensions of the image.</p>\\n',\n                itemtype: 'method',\n                name: 'cursor',\n                params: [\n                  {\n                    name: 'type',\n                    description:\n                      '<p>Built-In: either ARROW, CROSS, HAND, MOVE, TEXT and WAIT\\n                              Native CSS properties: &#39;grab&#39;, &#39;progress&#39;, &#39;cell&#39; etc.\\n                              External: path for cursor&#39;s images\\n                              (Allowed File extensions: .cur, .gif, .jpg, .jpeg, .png)\\n                              For more information on Native CSS cursors and url visit:\\n                              <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\">https://developer.mozilla.org/en-US/docs/Web/CSS/cursor</a></p>\\n',\n                    type: 'String|Constant'\n                  },\n                  {\n                    name: 'x',\n                    description:\n                      '<p>the horizontal active spot of the cursor (must be less than 32)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'y',\n                    description:\n                      '<p>the vertical active spot of the cursor (must be less than 32)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\n// Move the mouse across the quadrants\\n// to see the cursor change\\nfunction draw() {\\n  line(width / 2, 0, width / 2, height);\\n  line(0, height / 2, width, height / 2);\\n  if (mouseX < 50 && mouseY < 50) {\\n    cursor(CROSS);\\n  } else if (mouseX > 50 && mouseY < 50) {\\n    cursor('progress');\\n  } else if (mouseX > 50 && mouseY > 50) {\\n    cursor('https://s3.amazonaws.com/mupublicdata/cursor.cur');\\n  } else {\\n    cursor('grab');\\n  }\\n}\\n</code></div>\"\n                ],\n                alt:\n                  'canvas is divided into four quadrants. cursor on first is a cross, second is a progress,\\nthird is a custom cursor using path to the cursor and fourth is a grab.',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment'\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 232,\n                description:\n                  '<p>Specifies the number of frames to be displayed every second. For example,\\nthe function call frameRate(30) will attempt to refresh 30 times a second.\\nIf the processor is not fast enough to maintain the specified rate, the\\nframe rate will not be achieved. Setting the frame rate within <a href=\"#/p5/setup\">setup()</a> is\\nrecommended. The default frame rate is based on the frame rate of the display\\n(here also called &quot;refresh rate&quot;), which is set to 60 frames per second on most\\ncomputers. A frame rate of 24 frames per second (usual for movies) or above\\nwill be enough for smooth animations\\nThis is the same as setFrameRate(val).\\n<br><br>\\nCalling <a href=\"#/p5/frameRate\">frameRate()</a> with no arguments returns the current framerate. The\\ndraw function must run at least once before it will return a value. This\\nis the same as <a href=\"#/p5/getFrameRate\">getFrameRate()</a>.\\n<br><br>\\nCalling <a href=\"#/p5/frameRate\">frameRate()</a> with arguments that are not of the type numbers\\nor are non positive also returns current framerate.</p>\\n',\n                itemtype: 'method',\n                name: 'frameRate',\n                chainable: 1,\n                example: [\n                  '\\n\\n<div><code>\\nlet rectX = 0;\\nlet fr = 30; //starting FPS\\nlet clr;\\n\\nfunction setup() {\\n  background(200);\\n  frameRate(fr); // Attempt to refresh at starting FPS\\n  clr = color(255, 0, 0);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  rectX = rectX += 1; // Move Rectangle\\n\\n  if (rectX >= width) {\\n   // If you go off screen.\\n    if (fr === 30) {\\n      clr = color(0, 0, 255);\\n      fr = 10;\\n      frameRate(fr); // make frameRate 10 FPS\\n    } else {\\n      clr = color(255, 0, 0);\\n      fr = 30;\\n      frameRate(fr); // make frameRate 30 FPS\\n    }\\n    rectX = 0;\\n  }\\n  fill(clr);\\n  rect(rectX, 40, 20, 20);\\n}\\n</code></div>'\n                ],\n                alt:\n                  'blue rect moves left to right, followed by red rect moving faster. Loops.',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment',\n                overloads: [\n                  {\n                    line: 232,\n                    params: [\n                      {\n                        name: 'fps',\n                        description:\n                          '<p>number of frames to be displayed every second</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 293,\n                    params: [],\n                    return: {\n                      description: 'current frameRate',\n                      type: 'Number'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 332,\n                description: '<p>Hides the cursor from view.</p>\\n',\n                itemtype: 'method',\n                name: 'noCursor',\n                example: [\n                  '\\n<div><code>\\nfunction setup() {\\n  noCursor();\\n}\\n\\nfunction draw() {\\n  background(200);\\n  ellipse(mouseX, mouseY, 10, 10);\\n}\\n</code></div>'\n                ],\n                alt: 'cursor becomes 10x 10 white ellipse the moves with mouse x and y.',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment'\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 357,\n                description:\n                  '<p>System variable that stores the width of the screen display according to The\\ndefault <a href=\"#/p5/pixelDensity\">pixelDensity</a>. This is used to run a\\nfull-screen program on any display size. To return actual screen size,\\nmultiply this by pixelDensity.</p>\\n',\n                itemtype: 'property',\n                name: 'displayWidth',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  '\\n<div class=\"norender\"><code>\\ncreateCanvas(displayWidth, displayHeight);\\n</code></div>'\n                ],\n                alt: 'cursor becomes 10x 10 white ellipse the moves with mouse x and y.',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment'\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 376,\n                description:\n                  '<p>System variable that stores the height of the screen display according to The\\ndefault <a href=\"#/p5/pixelDensity\">pixelDensity</a>. This is used to run a\\nfull-screen program on any display size. To return actual screen size,\\nmultiply this by pixelDensity.</p>\\n',\n                itemtype: 'property',\n                name: 'displayHeight',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  '\\n<div class=\"norender\"><code>\\ncreateCanvas(displayWidth, displayHeight);\\n</code></div>'\n                ],\n                alt: 'no display.',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment'\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 395,\n                description:\n                  '<p>System variable that stores the width of the inner window, it maps to\\nwindow.innerWidth.</p>\\n',\n                itemtype: 'property',\n                name: 'windowWidth',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  '\\n<div class=\"norender\"><code>\\ncreateCanvas(windowWidth, windowHeight);\\n</code></div>'\n                ],\n                alt: 'no display.',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment'\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 411,\n                description:\n                  '<p>System variable that stores the height of the inner window, it maps to\\nwindow.innerHeight.</p>\\n',\n                itemtype: 'property',\n                name: 'windowHeight',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  '\\n<div class=\"norender\"><code>\\ncreateCanvas(windowWidth, windowHeight);\\n</code></div>'\n                ],\n                alt: 'no display.',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment'\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 427,\n                description:\n                  '<p>The <a href=\"#/p5/windowResized\">windowResized()</a> function is called once every time the browser window\\nis resized. This is a good place to resize the canvas or do any other\\nadjustments to accommodate the new window size.</p>\\n',\n                itemtype: 'method',\n                name: 'windowResized',\n                example: [\n                  '\\n<div class=\"norender\"><code>\\nfunction setup() {\\n  createCanvas(windowWidth, windowHeight);\\n}\\n\\nfunction draw() {\\n  background(0, 100, 200);\\n}\\n\\nfunction windowResized() {\\n  resizeCanvas(windowWidth, windowHeight);\\n}\\n</code></div>'\n                ],\n                alt: 'no display.',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment'\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 481,\n                description:\n                  '<p>System variable that stores the width of the drawing canvas. This value\\nis set by the first parameter of the <a href=\"#/p5/createCanvas\">createCanvas()</a> function.\\nFor example, the function call createCanvas(320, 240) sets the width\\nvariable to the value 320. The value of width defaults to 100 if\\n<a href=\"#/p5/createCanvas\">createCanvas()</a> is not used in a program.</p>\\n',\n                itemtype: 'property',\n                name: 'width',\n                type: 'Number',\n                readonly: '',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment'\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 493,\n                description:\n                  '<p>System variable that stores the height of the drawing canvas. This value\\nis set by the second parameter of the <a href=\"#/p5/createCanvas\">createCanvas()</a> function. For\\nexample, the function call createCanvas(320, 240) sets the height\\nvariable to the value 240. The value of height defaults to 100 if\\n<a href=\"#/p5/createCanvas\">createCanvas()</a> is not used in a program.</p>\\n',\n                itemtype: 'property',\n                name: 'height',\n                type: 'Number',\n                readonly: '',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment'\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 505,\n                description:\n                  '<p>If argument is given, sets the sketch to fullscreen or not based on the\\nvalue of the argument. If no argument is given, returns the current\\nfullscreen state. Note that due to browser restrictions this can only\\nbe called on user input, for example, on mouse press like the example\\nbelow.</p>\\n',\n                itemtype: 'method',\n                name: 'fullscreen',\n                params: [\n                  {\n                    name: 'val',\n                    description:\n                      '<p>whether the sketch should be in fullscreen mode\\nor not</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'current fullscreen state',\n                  type: 'Boolean'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\n// Clicking in the box toggles fullscreen on and off.\\nfunction setup() {\\n  background(200);\\n}\\nfunction mousePressed() {\\n  if (mouseX > 0 && mouseX < 100 && mouseY > 0 && mouseY < 100) {\\n    let fs = fullscreen();\\n    fullscreen(!fs);\\n  }\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'no display.',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment'\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 556,\n                description:\n                  '<p>Sets the pixel scaling for high pixel density displays. By default\\npixel density is set to match display density, call pixelDensity(1)\\nto turn this off. Calling <a href=\"#/p5/pixelDensity\">pixelDensity()</a> with no arguments returns\\nthe current pixel density of the sketch.</p>\\n',\n                itemtype: 'method',\n                name: 'pixelDensity',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  pixelDensity(1);\\n  createCanvas(100, 100);\\n  background(200);\\n  ellipse(width / 2, height / 2, 50, 50);\\n}\\n</code>\\n</div>\\n<div>\\n<code>\\nfunction setup() {\\n  pixelDensity(3.0);\\n  createCanvas(100, 100);\\n  background(200);\\n  ellipse(width / 2, height / 2, 50, 50);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'fuzzy 50x50 white ellipse with black outline in center of canvas.\\nsharp 50x50 white ellipse with black outline in center of canvas.',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment',\n                overloads: [\n                  {\n                    line: 556,\n                    params: [\n                      {\n                        name: 'val',\n                        description: '<p>whether or how much the sketch should scale</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 591,\n                    params: [],\n                    return: {\n                      description: 'current pixel density of the sketch',\n                      type: 'Number'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 611,\n                description:\n                  '<p>Returns the pixel density of the current display the sketch is running on.</p>\\n',\n                itemtype: 'method',\n                name: 'displayDensity',\n                return: {\n                  description: 'current pixel density of the display',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  let density = displayDensity();\\n  pixelDensity(density);\\n  createCanvas(100, 100);\\n  background(200);\\n  ellipse(width / 2, height / 2, 50, 50);\\n}\\n</code>\\n</div>'\n                ],\n                alt: '50x50 white ellipse with black outline in center of canvas.',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment'\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 668,\n                description: '<p>Gets the current URL.</p>\\n',\n                itemtype: 'method',\n                name: 'getURL',\n                return: {\n                  description: 'url',\n                  type: 'String'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\nlet url;\\nlet x = 100;\\n\\nfunction setup() {\\n  fill(0);\\n  noStroke();\\n  url = getURL();\\n}\\n\\nfunction draw() {\\n  background(200);\\n  text(url, x, height / 2);\\n  x--;\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'current url (http://p5js.org/reference/#/p5/getURL) moves right to left.',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment'\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 699,\n                description: '<p>Gets the current URL path as an array.</p>\\n',\n                itemtype: 'method',\n                name: 'getURLPath',\n                return: {\n                  description: 'path components',\n                  type: 'String[]'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\nfunction setup() {\\n  let urlPath = getURLPath();\\n  for (let i = 0; i < urlPath.length; i++) {\\n    text(urlPath[i], 10, i * 20 + 20);\\n  }\\n}\\n</code></div>\"\n                ],\n                alt: 'no display',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment'\n              },\n              {\n                file: 'src/core/environment.js',\n                line: 722,\n                description: '<p>Gets the current URL params as an Object.</p>\\n',\n                itemtype: 'method',\n                name: 'getURLParams',\n                return: {\n                  description: 'URL params',\n                  type: 'Object'\n                },\n                example: [\n                  \"\\n<div class='norender notest'>\\n<code>\\n// Example: http://p5js.org?year=2014&month=May&day=15\\n\\nfunction setup() {\\n  let params = getURLParams();\\n  text(params.day, 10, 20);\\n  text(params.month, 10, 40);\\n  text(params.year, 10, 60);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'no display.',\n                class: 'p5',\n                module: 'Environment',\n                submodule: 'Environment'\n              },\n              {\n                file: 'src/core/error_helpers.js',\n                line: 1,\n                requires: ['core'],\n                class: 'p5',\n                module: 'Environment'\n              },\n              {\n                file: 'src/core/error_helpers.js',\n                line: 584,\n                description:\n                  '<p>Validates parameters\\nparam  {String}               func    the name of the function\\nparam  {Array}                args    user input arguments</p>\\n<p>example:\\n var a;\\n ellipse(10,10,a,5);\\nconsole ouput:\\n &quot;It looks like ellipse received an empty variable in spot #2.&quot;</p>\\n<p>example:\\n ellipse(10,&quot;foo&quot;,5,5);\\nconsole output:\\n &quot;ellipse was expecting a number for parameter #1,\\n          received &quot;foo&quot; instead.&quot;</p>\\n',\n                class: 'p5',\n                module: 'Environment'\n              },\n              {\n                file: 'src/core/error_helpers.js',\n                line: 645,\n                description:\n                  '<p>Prints out all the colors in the color pallete with white text.\\nFor color blindness testing.</p>\\n',\n                class: 'p5',\n                module: 'Environment'\n              },\n              {\n                file: 'src/core/helpers.js',\n                line: 1,\n                requires: ['constants'],\n                class: 'p5',\n                module: 'Environment'\n              },\n              {\n                file: 'src/core/legacy.js',\n                line: 1,\n                requires: [\n                  'core\\nThese are functions that are part of the Processing API but are not part of\\nthe p5.js API. In some cases they have a new name',\n                  'in others',\n                  'they are\\nremoved completely. Not all unsupported Processing functions are listed here\\nbut we try to include ones that a user coming from Processing might likely\\ncall.'\n                ],\n                class: 'p5',\n                module: 'Environment'\n              },\n              {\n                file: 'src/core/main.js',\n                line: 42,\n                description:\n                  '<p>Called directly before <a href=\"#/p5/setup\">setup()</a>, the <a href=\"#/p5/preload\">preload()</a> function is used to handle\\nasynchronous loading of external files in a blocking way. If a preload\\nfunction is defined, <a href=\"#/p5/setup\">setup()</a> will wait until any load calls within have\\nfinished. Nothing besides load calls (<a href=\"#/p5/loadImage\">loadImage</a>, <a href=\"#/p5/loadJSON\">loadJSON</a>, <a href=\"#/p5/loadFont\">loadFont</a>,\\n<a href=\"#/p5/loadStrings\">loadStrings</a>, etc.) should be inside the preload function. If asynchronous\\nloading is preferred, the load methods can instead be called in <a href=\"#/p5/setup\">setup()</a>\\nor anywhere else with the use of a callback parameter.\\n<br><br>\\nBy default the text &quot;loading...&quot; will be displayed. To make your own\\nloading page, include an HTML element with id &quot;p5_loading&quot; in your\\npage. More information <a href=\"http://bit.ly/2kQ6Nio\">here</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'preload',\n                example: [\n                  \"\\n<div><code>\\nlet img;\\nlet c;\\nfunction preload() {\\n  // preload() runs once\\n  img = loadImage('assets/laDefense.jpg');\\n}\\n\\nfunction setup() {\\n  // setup() waits until preload() is done\\n  img.loadPixels();\\n  // get color of middle pixel\\n  c = img.get(img.width / 2, img.height / 2);\\n}\\n\\nfunction draw() {\\n  background(c);\\n  image(img, 25, 25, 50, 50);\\n}\\n</code></div>\"\n                ],\n                alt: 'nothing displayed',\n                class: 'p5',\n                module: 'Structure',\n                submodule: 'Structure'\n              },\n              {\n                file: 'src/core/main.js',\n                line: 83,\n                description:\n                  '<p>The <a href=\"#/p5/setup\">setup()</a> function is called once when the program starts. It&#39;s used to\\ndefine initial environment properties such as screen size and background\\ncolor and to load media such as images and fonts as the program starts.\\nThere can only be one <a href=\"#/p5/setup\">setup()</a> function for each program and it shouldn&#39;t\\nbe called again after its initial execution.\\n<br><br>\\nNote: Variables declared within <a href=\"#/p5/setup\">setup()</a> are not accessible within other\\nfunctions, including <a href=\"#/p5/draw\">draw()</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'setup',\n                example: [\n                  '\\n<div><code>\\nlet a = 0;\\n\\nfunction setup() {\\n  background(0);\\n  noStroke();\\n  fill(102);\\n}\\n\\nfunction draw() {\\n  rect(a++ % width, 10, 2, 80);\\n}\\n</code></div>'\n                ],\n                alt: 'nothing displayed',\n                class: 'p5',\n                module: 'Structure',\n                submodule: 'Structure'\n              },\n              {\n                file: 'src/core/main.js',\n                line: 114,\n                description:\n                  '<p>Called directly after <a href=\"#/p5/setup\">setup()</a>, the <a href=\"#/p5/draw\">draw()</a> function continuously executes\\nthe lines of code contained inside its block until the program is stopped\\nor <a href=\"#/p5/noLoop\">noLoop()</a> is called. Note if <a href=\"#/p5/noLoop\">noLoop()</a> is called in <a href=\"#/p5/setup\">setup()</a>, <a href=\"#/p5/draw\">draw()</a> will\\nstill be executed once before stopping. <a href=\"#/p5/draw\">draw()</a> is called automatically and\\nshould never be called explicitly.\\n<br><br>\\nIt should always be controlled with <a href=\"#/p5/noLoop\">noLoop()</a>, <a href=\"#/p5/redraw\">redraw()</a> and <a href=\"#/p5/loop\">loop()</a>. After\\n<a href=\"#/p5/noLoop\">noLoop()</a> stops the code in <a href=\"#/p5/draw\">draw()</a> from executing, <a href=\"#/p5/redraw\">redraw()</a> causes the\\ncode inside <a href=\"#/p5/draw\">draw()</a> to execute once, and <a href=\"#/p5/loop\">loop()</a> will cause the code\\ninside <a href=\"#/p5/draw\">draw()</a> to resume executing continuously.\\n<br><br>\\nThe number of times <a href=\"#/p5/draw\">draw()</a> executes in each second may be controlled with\\nthe <a href=\"#/p5/frameRate\">frameRate()</a> function.\\n<br><br>\\nThere can only be one <a href=\"#/p5/draw\">draw()</a> function for each sketch, and <a href=\"#/p5/draw\">draw()</a> must\\nexist if you want the code to run continuously, or to process events such\\nas <a href=\"#/p5/mousePressed\">mousePressed()</a>. Sometimes, you might have an empty call to <a href=\"#/p5/draw\">draw()</a> in\\nyour program, as shown in the above example.\\n<br><br>\\nIt is important to note that the drawing coordinate system will be reset\\nat the beginning of each <a href=\"#/p5/draw\">draw()</a> call. If any transformations are performed\\nwithin <a href=\"#/p5/draw\">draw()</a> (ex: scale, rotate, translate), their effects will be\\nundone at the beginning of <a href=\"#/p5/draw\">draw()</a>, so transformations will not accumulate\\nover time. On the other hand, styling applied (ex: fill, stroke, etc) will\\nremain in effect.</p>\\n',\n                itemtype: 'method',\n                name: 'draw',\n                example: [\n                  '\\n<div><code>\\nlet yPos = 0;\\nfunction setup() {\\n  // setup() runs once\\n  frameRate(30);\\n}\\nfunction draw() {\\n  // draw() loops forever, until stopped\\n  background(204);\\n  yPos = yPos - 1;\\n  if (yPos < 0) {\\n    yPos = height;\\n  }\\n  line(0, yPos, width, yPos);\\n}\\n</code></div>'\n                ],\n                alt: 'nothing displayed',\n                class: 'p5',\n                module: 'Structure',\n                submodule: 'Structure'\n              },\n              {\n                file: 'src/core/main.js',\n                line: 396,\n                description:\n                  '<p>Removes the entire p5 sketch. This will remove the canvas and any\\nelements created by p5.js. It will also stop the draw loop and unbind\\nany properties or methods from the window global scope. It will\\nleave a variable p5 in case you wanted to create a new p5 sketch.\\nIf you like, you can set p5 = null to erase it. While all functions and\\nvariables and objects created by the p5 library will be removed, any\\nother global variables created by your code will remain.</p>\\n',\n                itemtype: 'method',\n                name: 'remove',\n                example: [\n                  \"\\n<div class='norender'><code>\\nfunction draw() {\\n  ellipse(50, 50, 10, 10);\\n}\\n\\nfunction mousePressed() {\\n  remove(); // remove whole sketch on mouse press\\n}\\n</code></div>\"\n                ],\n                alt: 'nothing displayed',\n                class: 'p5',\n                module: 'Structure',\n                submodule: 'Structure'\n              },\n              {\n                file: 'src/core/main.js',\n                line: 577,\n                description:\n                  \"<p>Allows for the friendly error system (FES) to be turned off when creating a sketch,\\nwhich can give a significant boost to performance when needed.\\nSee <a href='https://github.com/processing/p5.js/wiki/Optimizing-p5.js-Code-for-Performance#disable-the-friendly-error-system-fes'>\\ndisabling the friendly error system</a>.</p>\\n\",\n                itemtype: 'property',\n                name: 'disableFriendlyErrors',\n                type: 'Boolean',\n                example: [\n                  '\\n<div class=\"norender notest\"><code>\\np5.disableFriendlyErrors = true;\\n\\nfunction setup() {\\n  createCanvas(100, 50);\\n}\\n</code></div>'\n                ],\n                class: 'p5',\n                module: 'Structure',\n                submodule: 'Structure'\n              },\n              {\n                file: 'src/core/p5.Element.js',\n                line: 26,\n                description:\n                  '<p>Underlying HTML element. All normal HTML methods can be called on this.</p>\\n',\n                example: [\n                  \"\\n<div>\\n<code>\\nfunction setup() {\\n  let c = createCanvas(50, 50);\\n  c.elt.style.border = '5px solid red';\\n}\\n\\nfunction draw() {\\n  background(220);\\n}\\n</code>\\n</div>\"\n                ],\n                itemtype: 'property',\n                name: 'elt',\n                readonly: '',\n                class: 'p5.Element',\n                module: 'DOM',\n                submodule: 'DOM'\n              },\n              {\n                file: 'src/core/p5.Element.js',\n                line: 52,\n                description:\n                  \"<p>Attaches the element to the parent specified. A way of setting\\n the container for the element. Accepts either a string ID, DOM\\n node, or <a href=\\\"#/p5.Element\\\">p5.Element</a>. If no arguments given, parent node is returned.\\n For more ways to position the canvas, see the\\n <a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'>\\n positioning the canvas</a> wiki page.\\nAll above examples except for the first one require the inclusion of\\n the p5.dom library in your index.html. See the\\n <a href='http://p5js.org/libraries/#using-a-library'>using a library</a>\\n section for information on how to include this library.</p>\\n\",\n                itemtype: 'method',\n                name: 'parent',\n                chainable: 1,\n                example: [\n                  \"\\n <div class=\\\"norender notest\\\"><code>\\n // in the html file:\\n // &lt;div id=\\\"myContainer\\\">&lt;/div>\\n// in the js file:\\n let cnv = createCanvas(100, 100);\\n cnv.parent('myContainer');\\n </code></div>\\n <div class='norender'><code>\\n let div0 = createDiv('this is the parent');\\n let div1 = createDiv('this is the child');\\n div1.parent(div0); // use p5.Element\\n </code></div>\\n <div class='norender'><code>\\n let div0 = createDiv('this is the parent');\\n div0.id('apples');\\n let div1 = createDiv('this is the child');\\n div1.parent('apples'); // use id\\n </code></div>\\n <div class='norender notest'><code>\\n let elt = document.getElementById('myParentDiv');\\n let div1 = createDiv('this is the child');\\n div1.parent(elt); // use element from page\\n </code></div>\"\n                ],\n                alt: 'no display.',\n                class: 'p5.Element',\n                module: 'DOM',\n                submodule: 'DOM',\n                overloads: [\n                  {\n                    line: 52,\n                    params: [\n                      {\n                        name: 'parent',\n                        description:\n                          '<p>the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>\\n                         of desired parent element</p>\\n',\n                        type: 'String|p5.Element|Object'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 100,\n                    params: [],\n                    return: {\n                      description: '',\n                      type: 'p5.Element'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/core/p5.Element.js',\n                line: 122,\n                description:\n                  '<p>Sets the ID of the element. If no ID argument is passed in, it instead\\n returns the current ID of the element.\\n Note that only one element can have a particular id in a page.\\n The <a href=\"#/p5.Element/class\">.class()</a> function can be used\\n to identify multiple elements with the same class name.</p>\\n',\n                itemtype: 'method',\n                name: 'id',\n                chainable: 1,\n                example: [\n                  \"\\n <div class='norender'><code>\\n function setup() {\\n   let cnv = createCanvas(100, 100);\\n   // Assigns a CSS selector ID to\\n   // the canvas element.\\n   cnv.id('mycanvas');\\n }\\n </code></div>\"\n                ],\n                alt: 'no display.',\n                class: 'p5.Element',\n                module: 'DOM',\n                submodule: 'DOM',\n                overloads: [\n                  {\n                    line: 122,\n                    params: [\n                      {\n                        name: 'id',\n                        description: '<p>ID of the element</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 147,\n                    params: [],\n                    return: {\n                      description: 'the id of the element',\n                      type: 'String'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/core/p5.Element.js',\n                line: 162,\n                description:\n                  '<p>Adds given class to the element. If no class argument is passed in, it\\n instead returns a string containing the current class(es) of the element.</p>\\n',\n                itemtype: 'method',\n                name: 'class',\n                chainable: 1,\n                example: [\n                  \"\\n <div class='norender'><code>\\n function setup() {\\n   let cnv = createCanvas(100, 100);\\n   // Assigns a CSS selector class 'small'\\n   // to the canvas element.\\n   cnv.class('small');\\n }\\n </code></div>\"\n                ],\n                alt: 'no display.',\n                class: 'p5.Element',\n                module: 'DOM',\n                submodule: 'DOM',\n                overloads: [\n                  {\n                    line: 162,\n                    params: [\n                      {\n                        name: 'class',\n                        description: '<p>class to add</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 184,\n                    params: [],\n                    return: {\n                      description: 'the class of the element',\n                      type: 'String'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/core/p5.Element.js',\n                line: 197,\n                description:\n                  '<p>The .<a href=\"#/p5.Element/mousePressed\">mousePressed()</a> function is called once after every time a\\nmouse button is pressed over the element.\\nSome mobile browsers may also trigger this event on a touch screen,\\nif the user performs a quick tap.\\nThis can be used to attach element specific event listeners.</p>\\n',\n                itemtype: 'method',\n                name: 'mousePressed',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when mouse is\\n                               pressed over the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div class='norender'><code>\\nlet cnv;\\nlet d;\\nlet g;\\nfunction setup() {\\n  cnv = createCanvas(100, 100);\\n  cnv.mousePressed(changeGray); // attach listener for\\n  // canvas click only\\n  d = 10;\\n  g = 100;\\n}\\n\\nfunction draw() {\\n  background(g);\\n  ellipse(width / 2, height / 2, d, d);\\n}\\n\\n// this function fires with any click anywhere\\nfunction mousePressed() {\\n  d = d + 10;\\n}\\n\\n// this function fires only when cnv is clicked\\nfunction changeGray() {\\n  g = random(0, 255);\\n}\\n</code></div>\"\n                ],\n                alt: 'no display.',\n                class: 'p5.Element',\n                module: 'DOM',\n                submodule: 'DOM'\n              },\n              {\n                file: 'src/core/p5.Element.js',\n                line: 258,\n                description:\n                  '<p>The .<a href=\"#/p5.Element/doubleClicked\">doubleClicked()</a> function is called once after every time a\\nmouse button is pressed twice over the element. This can be used to\\nattach element and action specific event listeners.</p>\\n',\n                itemtype: 'method',\n                name: 'doubleClicked',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when mouse is\\n                               double clicked over the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                return: {\n                  description: '',\n                  type: 'p5.Element'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\nlet cnv;\\nlet d;\\nlet g;\\nfunction setup() {\\n  cnv = createCanvas(100, 100);\\n  cnv.doubleClicked(changeGray); // attach listener for\\n  // canvas double click only\\n  d = 10;\\n  g = 100;\\n}\\n\\nfunction draw() {\\n  background(g);\\n  ellipse(width / 2, height / 2, d, d);\\n}\\n\\n// this function fires with any double click anywhere\\nfunction doubleClicked() {\\n  d = d + 10;\\n}\\n\\n// this function fires only when cnv is double clicked\\nfunction changeGray() {\\n  g = random(0, 255);\\n}\\n</code></div>\"\n                ],\n                alt: 'no display.',\n                class: 'p5.Element',\n                module: 'DOM',\n                submodule: 'DOM'\n              },\n              {\n                file: 'src/core/p5.Element.js',\n                line: 307,\n                description:\n                  '<p>The .<a href=\"#/p5.Element/mouseWheel\">mouseWheel()</a> function is called once after every time a\\nmouse wheel is scrolled over the element. This can be used to\\nattach element specific event listeners.\\n<br><br>\\nThe function accepts a callback function as argument which will be executed\\nwhen the <code>wheel</code> event is triggered on the element, the callback function is\\npassed one argument <code>event</code>. The <code>event.deltaY</code> property returns negative\\nvalues if the mouse wheel is rotated up or away from the user and positive\\nin the other direction. The <code>event.deltaX</code> does the same as <code>event.deltaY</code>\\nexcept it reads the horizontal wheel scroll of the mouse wheel.\\n<br><br>\\nOn OS X with &quot;natural&quot; scrolling enabled, the <code>event.deltaY</code> values are\\nreversed.</p>\\n',\n                itemtype: 'method',\n                name: 'mouseWheel',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when mouse is\\n                               scrolled over the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div class='norender'><code>\\nlet cnv;\\nlet d;\\nlet g;\\nfunction setup() {\\n  cnv = createCanvas(100, 100);\\n  cnv.mouseWheel(changeSize); // attach listener for\\n  // activity on canvas only\\n  d = 10;\\n  g = 100;\\n}\\n\\nfunction draw() {\\n  background(g);\\n  ellipse(width / 2, height / 2, d, d);\\n}\\n\\n// this function fires with mousewheel movement\\n// anywhere on screen\\nfunction mouseWheel() {\\n  g = g + 10;\\n}\\n\\n// this function fires with mousewheel movement\\n// over canvas only\\nfunction changeSize(event) {\\n  if (event.deltaY > 0) {\\n    d = d + 10;\\n  } else {\\n    d = d - 10;\\n  }\\n}\\n</code></div>\"\n                ],\n                alt: 'no display.',\n                class: 'p5.Element',\n                module: 'DOM',\n                submodule: 'DOM'\n              },\n              {\n                file: 'src/core/p5.Element.js',\n                line: 373,\n                description:\n                  '<p>The .<a href=\"#/p5.Element/mouseReleased\">mouseReleased()</a> function is called once after every time a\\nmouse button is released over the element.\\nSome mobile browsers may also trigger this event on a touch screen,\\nif the user performs a quick tap.\\nThis can be used to attach element specific event listeners.</p>\\n',\n                itemtype: 'method',\n                name: 'mouseReleased',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when mouse is\\n                               released over the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div class='norender'><code>\\nlet cnv;\\nlet d;\\nlet g;\\nfunction setup() {\\n  cnv = createCanvas(100, 100);\\n  cnv.mouseReleased(changeGray); // attach listener for\\n  // activity on canvas only\\n  d = 10;\\n  g = 100;\\n}\\n\\nfunction draw() {\\n  background(g);\\n  ellipse(width / 2, height / 2, d, d);\\n}\\n\\n// this function fires after the mouse has been\\n// released\\nfunction mouseReleased() {\\n  d = d + 10;\\n}\\n\\n// this function fires after the mouse has been\\n// released while on canvas\\nfunction changeGray() {\\n  g = random(0, 255);\\n}\\n</code></div>\"\n                ],\n                alt: 'no display.',\n                class: 'p5.Element',\n                module: 'DOM',\n                submodule: 'DOM'\n              },\n              {\n                file: 'src/core/p5.Element.js',\n                line: 427,\n                description:\n                  '<p>The .<a href=\"#/p5.Element/mouseClicked\">mouseClicked()</a> function is called once after a mouse button is\\npressed and released over the element.\\nSome mobile browsers may also trigger this event on a touch screen,\\nif the user performs a quick tap.\\nThis can be used to attach element specific event listeners.</p>\\n',\n                itemtype: 'method',\n                name: 'mouseClicked',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when mouse is\\n                               clicked over the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\nlet cnv;\\nlet d;\\nlet g;\\n\\nfunction setup() {\\n  cnv = createCanvas(100, 100);\\n  cnv.mouseClicked(changeGray); // attach listener for\\n  // activity on canvas only\\n  d = 10;\\n  g = 100;\\n}\\n\\nfunction draw() {\\n  background(g);\\n  ellipse(width / 2, height / 2, d, d);\\n}\\n\\n// this function fires after the mouse has been\\n// clicked anywhere\\nfunction mouseClicked() {\\n  d = d + 10;\\n}\\n\\n// this function fires after the mouse has been\\n// clicked on canvas\\nfunction changeGray() {\\n  g = random(0, 255);\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'no display.',\n                class: 'p5.Element',\n                module: 'DOM',\n                submodule: 'DOM'\n              },\n              {\n                file: 'src/core/p5.Element.js',\n                line: 483,\n                description:\n                  '<p>The .<a href=\"#/p5.Element/mouseMoved\">mouseMoved()</a> function is called once every time a\\nmouse moves over the element. This can be used to attach an\\nelement specific event listener.</p>\\n',\n                itemtype: 'method',\n                name: 'mouseMoved',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when a mouse moves\\n                               over the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div class='norender'><code>\\nlet cnv;\\nlet d = 30;\\nlet g;\\nfunction setup() {\\n  cnv = createCanvas(100, 100);\\n  cnv.mouseMoved(changeSize); // attach listener for\\n  // activity on canvas only\\n  d = 10;\\n  g = 100;\\n}\\n\\nfunction draw() {\\n  background(g);\\n  fill(200);\\n  ellipse(width / 2, height / 2, d, d);\\n}\\n\\n// this function fires when mouse moves anywhere on\\n// page\\nfunction mouseMoved() {\\n  g = g + 5;\\n  if (g > 255) {\\n    g = 0;\\n  }\\n}\\n\\n// this function fires when mouse moves over canvas\\nfunction changeSize() {\\n  d = d + 2;\\n  if (d > 100) {\\n    d = 0;\\n  }\\n}\\n</code></div>\"\n                ],\n                alt: 'no display.',\n                class: 'p5.Element',\n                module: 'DOM',\n                submodule: 'DOM'\n              },\n              {\n                file: 'src/core/p5.Element.js',\n                line: 541,\n                description:\n                  '<p>The .<a href=\"#/p5.Element/mouseOver\">mouseOver()</a> function is called once after every time a\\nmouse moves onto the element. This can be used to attach an\\nelement specific event listener.</p>\\n',\n                itemtype: 'method',\n                name: 'mouseOver',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when a mouse moves\\n                               onto the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div class='norender'><code>\\nlet cnv;\\nlet d;\\nfunction setup() {\\n  cnv = createCanvas(100, 100);\\n  cnv.mouseOver(changeGray);\\n  d = 10;\\n}\\n\\nfunction draw() {\\n  ellipse(width / 2, height / 2, d, d);\\n}\\n\\nfunction changeGray() {\\n  d = d + 10;\\n  if (d > 100) {\\n    d = 0;\\n  }\\n}\\n</code></div>\"\n                ],\n                alt: 'no display.',\n                class: 'p5.Element',\n                module: 'DOM',\n                submodule: 'DOM'\n              },\n              {\n                file: 'src/core/p5.Element.js',\n                line: 584,\n                description:\n                  '<p>The .<a href=\"#/p5.Element/mouseOut\">mouseOut()</a> function is called once after every time a\\nmouse moves off the element. This can be used to attach an\\nelement specific event listener.</p>\\n',\n                itemtype: 'method',\n                name: 'mouseOut',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when a mouse\\n                               moves off of an element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div class='norender'><code>\\nlet cnv;\\nlet d;\\nfunction setup() {\\n  cnv = createCanvas(100, 100);\\n  cnv.mouseOut(changeGray);\\n  d = 10;\\n}\\n\\nfunction draw() {\\n  ellipse(width / 2, height / 2, d, d);\\n}\\n\\nfunction changeGray() {\\n  d = d + 10;\\n  if (d > 100) {\\n    d = 0;\\n  }\\n}\\n</code></div>\"\n                ],\n                alt: 'no display.',\n                class: 'p5.Element',\n                module: 'DOM',\n                submodule: 'DOM'\n              },\n              {\n                file: 'src/core/p5.Element.js',\n                line: 626,\n                description:\n                  '<p>The .<a href=\"#/p5.Element/touchStarted\">touchStarted()</a> function is called once after every time a touch is\\nregistered. This can be used to attach element specific event listeners.</p>\\n',\n                itemtype: 'method',\n                name: 'touchStarted',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when a touch\\n                               starts over the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div class='norender'><code>\\nlet cnv;\\nlet d;\\nlet g;\\nfunction setup() {\\n  cnv = createCanvas(100, 100);\\n  cnv.touchStarted(changeGray); // attach listener for\\n  // canvas click only\\n  d = 10;\\n  g = 100;\\n}\\n\\nfunction draw() {\\n  background(g);\\n  ellipse(width / 2, height / 2, d, d);\\n}\\n\\n// this function fires with any touch anywhere\\nfunction touchStarted() {\\n  d = d + 10;\\n}\\n\\n// this function fires only when cnv is clicked\\nfunction changeGray() {\\n  g = random(0, 255);\\n}\\n</code></div>\"\n                ],\n                alt: 'no display.',\n                class: 'p5.Element',\n                module: 'DOM',\n                submodule: 'DOM'\n              },\n              {\n                file: 'src/core/p5.Element.js',\n                line: 674,\n                description:\n                  '<p>The .<a href=\"#/p5.Element/touchMoved\">touchMoved()</a> function is called once after every time a touch move is\\nregistered. This can be used to attach element specific event listeners.</p>\\n',\n                itemtype: 'method',\n                name: 'touchMoved',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when a touch moves over\\n                               the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div class='norender'><code>\\nlet cnv;\\nlet g;\\nfunction setup() {\\n  cnv = createCanvas(100, 100);\\n  cnv.touchMoved(changeGray); // attach listener for\\n  // canvas click only\\n  g = 100;\\n}\\n\\nfunction draw() {\\n  background(g);\\n}\\n\\n// this function fires only when cnv is clicked\\nfunction changeGray() {\\n  g = random(0, 255);\\n}\\n</code></div>\"\n                ],\n                alt: 'no display.',\n                class: 'p5.Element',\n                module: 'DOM',\n                submodule: 'DOM'\n              },\n              {\n                file: 'src/core/p5.Element.js',\n                line: 714,\n                description:\n                  '<p>The .<a href=\"#/p5.Element/touchEnded\">touchEnded()</a> function is called once after every time a touch is\\nregistered. This can be used to attach element specific event listeners.</p>\\n',\n                itemtype: 'method',\n                name: 'touchEnded',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when a touch ends\\n                               over the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div class='norender'><code>\\nlet cnv;\\nlet d;\\nlet g;\\nfunction setup() {\\n  cnv = createCanvas(100, 100);\\n  cnv.touchEnded(changeGray); // attach listener for\\n  // canvas click only\\n  d = 10;\\n  g = 100;\\n}\\n\\nfunction draw() {\\n  background(g);\\n  ellipse(width / 2, height / 2, d, d);\\n}\\n\\n// this function fires with any touch anywhere\\nfunction touchEnded() {\\n  d = d + 10;\\n}\\n\\n// this function fires only when cnv is clicked\\nfunction changeGray() {\\n  g = random(0, 255);\\n}\\n</code></div>\"\n                ],\n                alt: 'no display.',\n                class: 'p5.Element',\n                module: 'DOM',\n                submodule: 'DOM'\n              },\n              {\n                file: 'src/core/p5.Element.js',\n                line: 763,\n                description:\n                  '<p>The .<a href=\"#/p5.Element/dragOver\">dragOver()</a> function is called once after every time a\\nfile is dragged over the element. This can be used to attach an\\nelement specific event listener.</p>\\n',\n                itemtype: 'method',\n                name: 'dragOver',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when a file is\\n                               dragged over the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div><code>\\n// To test this sketch, simply drag a\\n// file over the canvas\\nfunction setup() {\\n  let c = createCanvas(100, 100);\\n  background(200);\\n  textAlign(CENTER);\\n  text('Drag file', width / 2, height / 2);\\n  c.dragOver(dragOverCallback);\\n}\\n\\n// This function will be called whenever\\n// a file is dragged over the canvas\\nfunction dragOverCallback() {\\n  background(240);\\n  text('Dragged over', width / 2, height / 2);\\n}\\n</code></div>\"\n                ],\n                alt: 'nothing displayed',\n                class: 'p5.Element',\n                module: 'DOM',\n                submodule: 'DOM'\n              },\n              {\n                file: 'src/core/p5.Element.js',\n                line: 801,\n                description:\n                  '<p>The .dragLeave() function is called once after every time a\\ndragged file leaves the element area. This can be used to attach an\\nelement specific event listener.</p>\\n',\n                itemtype: 'method',\n                name: 'dragLeave',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when a file is\\n                               dragged off the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div><code>\\n// To test this sketch, simply drag a file\\n// over and then out of the canvas area\\nfunction setup() {\\n  let c = createCanvas(100, 100);\\n  background(200);\\n  textAlign(CENTER);\\n  text('Drag file', width / 2, height / 2);\\n  c.dragLeave(dragLeaveCallback);\\n}\\n\\n// This function will be called whenever\\n// a file is dragged out of the canvas\\nfunction dragLeaveCallback() {\\n  background(240);\\n  text('Dragged off', width / 2, height / 2);\\n}\\n</code></div>\"\n                ],\n                alt: 'nothing displayed',\n                class: 'p5.Element',\n                module: 'DOM',\n                submodule: 'DOM'\n              },\n              {\n                file: 'src/core/p5.Element.js',\n                line: 865,\n                description: '<p>Helper fxn for sharing pixel methods</p>\\n',\n                class: 'p5.Element',\n                module: 'DOM',\n                submodule: 'DOM'\n              },\n              {\n                file: 'src/core/p5.Graphics.js',\n                line: 65,\n                description:\n                  \"<p>Resets certain values such as those modified by functions in the Transform category\\nand in the Lights category that are not automatically reset\\nwith graphics buffer objects. Calling this in <a href='#/p5/draw'>draw()</a> will copy the behavior\\nof the standard canvas.</p>\\n\",\n                itemtype: 'method',\n                name: 'reset',\n                example: [\n                  \"\\n\\n<div><code>\\nlet pg;\\nfunction setup() {\\n  createCanvas(100, 100);\\n  background(0);\\n  pg = createGraphics(50, 100);\\n  pg.fill(0);\\n  frameRate(5);\\n}\\nfunction draw() {\\n  image(pg, width / 2, 0);\\n  pg.background(255);\\n  // p5.Graphics object behave a bit differently in some cases\\n  // The normal canvas on the left resets the translate\\n  // with every loop through draw()\\n  // the graphics object on the right doesn't automatically reset\\n  // so translate() is additive and it moves down the screen\\n  rect(0, 0, width / 2, 5);\\n  pg.rect(0, 0, width / 2, 5);\\n  translate(0, 5, 0);\\n  pg.translate(0, 5, 0);\\n}\\nfunction mouseClicked() {\\n  // if you click you will see that\\n  // reset() resets the translate back to the initial state\\n  // of the Graphics object\\n  pg.reset();\\n}\\n</code></div>\"\n                ],\n                alt:\n                  'A white line on a black background stays still on the top-left half.\\nA black line animates from top to bottom on a white background on the right half.\\nWhen clicked, the black line starts back over at the top.',\n                class: 'p5.Graphics',\n                module: 'Rendering',\n                submodule: 'Rendering'\n              },\n              {\n                file: 'src/core/p5.Graphics.js',\n                line: 117,\n                description:\n                  '<p>Removes a Graphics object from the page and frees any resources\\nassociated with it.</p>\\n',\n                itemtype: 'method',\n                name: 'remove',\n                example: [\n                  \"\\n<div class='norender'><code>\\nlet bg;\\nfunction setup() {\\n  bg = createCanvas(100, 100);\\n  bg.background(0);\\n  image(bg, 0, 0);\\n  bg.remove();\\n}\\n</code></div>\\n\\n<div><code>\\nlet bg;\\nfunction setup() {\\n  pixelDensity(1);\\n  createCanvas(100, 100);\\n  stroke(255);\\n  fill(0);\\n\\n  // create and draw the background image\\n  bg = createGraphics(100, 100);\\n  bg.background(200);\\n  bg.ellipse(50, 50, 80, 80);\\n}\\nfunction draw() {\\n  let t = millis() / 1000;\\n  // draw the background\\n  if (bg) {\\n    image(bg, frameCount % 100, 0);\\n    image(bg, frameCount % 100 - 100, 0);\\n  }\\n  // draw the foreground\\n  let p = p5.Vector.fromAngle(t, 35).add(50, 50);\\n  ellipse(p.x, p.y, 30);\\n}\\nfunction mouseClicked() {\\n  // remove the background\\n  if (bg) {\\n    bg.remove();\\n    bg = null;\\n  }\\n}\\n</code></div>\"\n                ],\n                alt:\n                  'no image\\na multi-colored circle moving back and forth over a scrolling background.',\n                class: 'p5.Graphics',\n                module: 'Rendering',\n                submodule: 'Rendering'\n              },\n              {\n                file: 'src/core/p5.Renderer.js',\n                line: 97,\n                description: '<p>Resize our canvas element.</p>\\n',\n                class: 'p5.Renderer',\n                module: 'Rendering',\n                submodule: 'Rendering'\n              },\n              {\n                file: 'src/core/p5.Renderer.js',\n                line: 335,\n                description: '<p>Helper fxn to check font type (system or otf)</p>\\n',\n                class: 'p5.Renderer',\n                module: 'Rendering',\n                submodule: 'Rendering'\n              },\n              {\n                file: 'src/core/p5.Renderer.js',\n                line: 388,\n                description:\n                  '<p>Helper fxn to measure ascent and descent.\\nAdapted from <a href=\"http://stackoverflow.com/a/25355178\">http://stackoverflow.com/a/25355178</a></p>\\n',\n                class: 'p5.Renderer',\n                module: 'Rendering',\n                submodule: 'Rendering'\n              },\n              {\n                file: 'src/core/p5.Renderer2D.js',\n                line: 9,\n                description:\n                  '<p>p5.Renderer2D\\nThe 2D graphics canvas renderer class.\\nextends p5.Renderer</p>\\n',\n                class: 'p5',\n                module: 'Rendering'\n              },\n              {\n                file: 'src/core/p5.Renderer2D.js',\n                line: 407,\n                description:\n                  '<p>Generate a cubic Bezier representing an arc on the unit circle of total\\nangle <code>size</code> radians, beginning <code>start</code> radians above the x-axis. Up to\\nfour of these curves are combined to make a full arc.</p>\\n<p>See <a href=\"http://www.joecridge.me/bezier.pdf\">www.joecridge.me/bezier.pdf</a> for an explanation of the method.</p>\\n',\n                class: 'p5',\n                module: 'Rendering'\n              },\n              {\n                file: 'src/core/rendering.js',\n                line: 17,\n                description:\n                  '<p>Creates a canvas element in the document, and sets the dimensions of it\\nin pixels. This method should be called only once at the start of setup.\\nCalling <a href=\"#/p5/createCanvas\">createCanvas</a> more than once in a sketch will result in very\\nunpredictable behavior. If you want more than one drawing canvas\\nyou could use <a href=\"#/p5/createGraphics\">createGraphics</a> (hidden by default but it can be shown).\\n<br><br>\\nThe system variables width and height are set by the parameters passed\\nto this function. If <a href=\"#/p5/createCanvas\">createCanvas()</a> is not used, the window will be\\ngiven a default size of 100x100 pixels.\\n<br><br>\\nFor more ways to position the canvas, see the\\n<a href=\\'https://github.com/processing/p5.js/wiki/Positioning-your-canvas\\'>\\npositioning the canvas</a> wiki page.</p>\\n',\n                itemtype: 'method',\n                name: 'createCanvas',\n                params: [\n                  {\n                    name: 'w',\n                    description: '<p>width of the canvas</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'h',\n                    description: '<p>height of the canvas</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'renderer',\n                    description: '<p>either P2D or WEBGL</p>\\n',\n                    type: 'Constant',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: '',\n                  type: 'p5.Renderer'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 50);\\n  background(153);\\n  line(0, 0, width, height);\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'Black line extending from top-left of canvas to bottom right.',\n                class: 'p5',\n                module: 'Rendering',\n                submodule: 'Rendering'\n              },\n              {\n                file: 'src/core/rendering.js',\n                line: 119,\n                description:\n                  '<p>Resizes the canvas to given width and height. The canvas will be cleared\\nand draw will be called immediately, allowing the sketch to re-render itself\\nin the resized canvas.</p>\\n',\n                itemtype: 'method',\n                name: 'resizeCanvas',\n                params: [\n                  {\n                    name: 'w',\n                    description: '<p>width of the canvas</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'h',\n                    description: '<p>height of the canvas</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'noRedraw',\n                    description: '<p>don&#39;t redraw the canvas immediately</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div class=\"norender\"><code>\\nfunction setup() {\\n  createCanvas(windowWidth, windowHeight);\\n}\\n\\nfunction draw() {\\n  background(0, 100, 200);\\n}\\n\\nfunction windowResized() {\\n  resizeCanvas(windowWidth, windowHeight);\\n}\\n</code></div>'\n                ],\n                alt: 'No image displayed.',\n                class: 'p5',\n                module: 'Rendering',\n                submodule: 'Rendering'\n              },\n              {\n                file: 'src/core/rendering.js',\n                line: 174,\n                description:\n                  '<p>Removes the default canvas for a p5 sketch that doesn&#39;t\\nrequire a canvas</p>\\n',\n                itemtype: 'method',\n                name: 'noCanvas',\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  noCanvas();\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'no image displayed',\n                class: 'p5',\n                module: 'Rendering',\n                submodule: 'Rendering'\n              },\n              {\n                file: 'src/core/rendering.js',\n                line: 197,\n                description:\n                  '<p>Creates and returns a new p5.Renderer object. Use this class if you need\\nto draw into an off-screen graphics buffer. The two parameters define the\\nwidth and height in pixels.</p>\\n',\n                itemtype: 'method',\n                name: 'createGraphics',\n                params: [\n                  {\n                    name: 'w',\n                    description: '<p>width of the offscreen graphics buffer</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'h',\n                    description: '<p>height of the offscreen graphics buffer</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'renderer',\n                    description: '<p>either P2D or WEBGL\\nundefined defaults to p2d</p>\\n',\n                    type: 'Constant',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'offscreen graphics buffer',\n                  type: 'p5.Graphics'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\nlet pg;\\nfunction setup() {\\n  createCanvas(100, 100);\\n  pg = createGraphics(100, 100);\\n}\\nfunction draw() {\\n  background(200);\\n  pg.background(100);\\n  pg.noStroke();\\n  pg.ellipse(pg.width / 2, pg.height / 2, 50, 50);\\n  image(pg, 50, 50);\\n  image(pg, 0, 0, 50, 50);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  '4 grey squares alternating light and dark grey. White quarter circle mid-left.',\n                class: 'p5',\n                module: 'Rendering',\n                submodule: 'Rendering'\n              },\n              {\n                file: 'src/core/rendering.js',\n                line: 236,\n                description:\n                  '<p>Blends the pixels in the display window according to the defined mode.\\nThere is a choice of the following modes to blend the source pixels (A)\\nwith the ones of pixels already in the display window (B):</p>\\n<p><ul></p>\\n<p><li><code>BLEND</code> - linear interpolation of colours: C =\\nA*factor + B. <b>This is the default blending mode.</b></li></p>\\n<p><li><code>ADD</code> - sum of A and B</li></p>\\n<p><li><code>DARKEST</code> - only the darkest colour succeeds: C =\\nmin(A*factor, B).</li></p>\\n<p><li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\\nmax(A*factor, B).</li></p>\\n<p><li><code>DIFFERENCE</code> - subtract colors from underlying image.</li></p>\\n<p><li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\\nextreme.</li></p>\\n<p><li><code>MULTIPLY</code> - multiply the colors, result will always be\\ndarker.</li></p>\\n<p><li><code>SCREEN</code> - opposite multiply, uses inverse values of the\\ncolors.</li></p>\\n<p><li><code>REPLACE</code> - the pixels entirely replace the others and\\ndon&#39;t utilize alpha (transparency) values.</li></p>\\n<p><li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\\n</code>. Multiplies dark values, and screens light values. <em>(2D)</em></li></p>\\n<p><li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\\ngray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li></p>\\n<p><li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\\n</li></p>\\n<p><li><code>DODGE</code> - lightens light tones and increases contrast,\\nignores darks. <em>(2D)</em></li></p>\\n<p><li><code>BURN</code> - darker areas are applied, increasing contrast,\\nignores lights. <em>(2D)</em></li></p>\\n<p><li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\\n</ul>\\n<br><br>\\n<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\\n<em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.</p>\\n',\n                itemtype: 'method',\n                name: 'blendMode',\n                params: [\n                  {\n                    name: 'mode',\n                    description:\n                      '<p>blend mode to set for canvas.\\n               either BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY,\\n               EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\\n               SOFT_LIGHT, DODGE, BURN, ADD, or SUBTRACT</p>\\n',\n                    type: 'Constant'\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\nblendMode(LIGHTEST);\\nstrokeWeight(30);\\nstroke(80, 150, 255);\\nline(25, 25, 75, 75);\\nstroke(255, 50, 50);\\nline(75, 25, 25, 75);\\n</code>\\n</div>\\n<div>\\n<code>\\nblendMode(MULTIPLY);\\nstrokeWeight(30);\\nstroke(80, 150, 255);\\nline(25, 25, 75, 75);\\nstroke(255, 50, 50);\\nline(75, 25, 25, 75);\\n</code>\\n</div>'\n                ],\n                alt:\n                  'translucent image thick red & blue diagonal rounded lines intersecting center\\nThick red & blue diagonal rounded lines intersecting center. dark at overlap',\n                class: 'p5',\n                module: 'Rendering',\n                submodule: 'Rendering'\n              },\n              {\n                file: 'src/core/shim.js',\n                line: 23,\n                description:\n                  '<p>shim for Uint8ClampedArray.slice\\n(allows arrayCopy to work with pixels[])\\nwith thanks to <a href=\"http://halfpapstudios.com/blog/tag/html5-canvas/\">http://halfpapstudios.com/blog/tag/html5-canvas/</a>\\nEnumerable set to false to protect for...in from\\nUint8ClampedArray.prototype pollution.</p>\\n',\n                class: 'p5',\n                module: 'Rendering'\n              },\n              {\n                file: 'src/core/shim.js',\n                line: 45,\n                description:\n                  '<p>this is implementation of Object.assign() which is unavailable in\\nIE11 and (non-Chrome) Android browsers.\\nThe assign() method is used to copy the values of all enumerable\\nown properties from one or more source objects to a target object.\\nIt will return the target object.\\nModified from <a href=\"https://github.com/ljharb/object.assign\">https://github.com/ljharb/object.assign</a></p>\\n',\n                class: 'p5',\n                module: 'Rendering'\n              },\n              {\n                file: 'src/core/structure.js',\n                line: 12,\n                description:\n                  '<p>Stops p5.js from continuously executing the code within <a href=\"#/p5/draw\">draw()</a>.\\nIf <a href=\"#/p5/loop\">loop()</a> is called, the code in <a href=\"#/p5/draw\">draw()</a> begins to run continuously again.\\nIf using <a href=\"#/p5/noLoop\">noLoop()</a> in <a href=\"#/p5/setup\">setup()</a>, it should be the last line inside the block.\\n<br><br>\\nWhen <a href=\"#/p5/noLoop\">noLoop()</a> is used, it&#39;s not possible to manipulate or access the\\nscreen inside event handling functions such as <a href=\"#/p5/mousePressed\">mousePressed()</a> or\\n<a href=\"#/p5/keyPressed\">keyPressed()</a>. Instead, use those functions to call <a href=\"#/p5/redraw\">redraw()</a> or <a href=\"#/p5/loop\">loop()</a>,\\nwhich will run <a href=\"#/p5/draw\">draw()</a>, which can update the screen properly. This means\\nthat when <a href=\"#/p5/noLoop\">noLoop()</a> has been called, no drawing can happen, and functions\\nlike <a href=\"#/p5/saveFrame\">saveFrame()</a> or <a href=\"#/p5/loadPixels\">loadPixels()</a> may not be used.\\n<br><br>\\nNote that if the sketch is resized, <a href=\"#/p5/redraw\">redraw()</a> will be called to update\\nthe sketch, even after <a href=\"#/p5/noLoop\">noLoop()</a> has been specified. Otherwise, the sketch\\nwould enter an odd state until <a href=\"#/p5/loop\">loop()</a> was called.</p>\\n',\n                itemtype: 'method',\n                name: 'noLoop',\n                example: [\n                  '\\n<div><code>\\nfunction setup() {\\n  createCanvas(100, 100);\\n  background(200);\\n  noLoop();\\n}\\n\\nfunction draw() {\\n  line(10, 10, 90, 90);\\n}\\n</code></div>\\n\\n<div><code>\\nlet x = 0;\\nfunction setup() {\\n  createCanvas(100, 100);\\n}\\n\\nfunction draw() {\\n  background(204);\\n  x = x + 0.1;\\n  if (x > width) {\\n    x = 0;\\n  }\\n  line(x, 0, x, height);\\n}\\n\\nfunction mousePressed() {\\n  noLoop();\\n}\\n\\nfunction mouseReleased() {\\n  loop();\\n}\\n</code></div>'\n                ],\n                alt:\n                  '113 pixel long line extending from top-left to bottom right of canvas.\\nhorizontal line moves slowly from left. Loops but stops on mouse press.',\n                class: 'p5',\n                module: 'Structure',\n                submodule: 'Structure'\n              },\n              {\n                file: 'src/core/structure.js',\n                line: 74,\n                description:\n                  '<p>By default, p5.js loops through draw() continuously, executing the code\\nwithin it. However, the <a href=\"#/p5/draw\">draw()</a> loop may be stopped by calling <a href=\"#/p5/noLoop\">noLoop()</a>.\\nIn that case, the <a href=\"#/p5/draw\">draw()</a> loop can be resumed with loop().</p>\\n<p>Avoid calling loop() from inside setup().</p>\\n',\n                itemtype: 'method',\n                name: 'loop',\n                example: [\n                  '\\n<div><code>\\nlet x = 0;\\nfunction setup() {\\n  createCanvas(100, 100);\\n  noLoop();\\n}\\n\\nfunction draw() {\\n  background(204);\\n  x = x + 0.1;\\n  if (x > width) {\\n    x = 0;\\n  }\\n  line(x, 0, x, height);\\n}\\n\\nfunction mousePressed() {\\n  loop();\\n}\\n\\nfunction mouseReleased() {\\n  noLoop();\\n}\\n</code></div>'\n                ],\n                alt:\n                  'horizontal line moves slowly from left. Loops but stops on mouse press.',\n                class: 'p5',\n                module: 'Structure',\n                submodule: 'Structure'\n              },\n              {\n                file: 'src/core/structure.js',\n                line: 122,\n                description:\n                  '<p>The <a href=\"#/p5/push\">push()</a> function saves the current drawing style settings and\\ntransformations, while <a href=\"#/p5/pop\">pop()</a> restores these settings. Note that these\\nfunctions are always used together. They allow you to change the style\\nand transformation settings and later return to what you had. When a new\\nstate is started with <a href=\"#/p5/push\">push()</a>, it builds on the current style and transform\\ninformation. The <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions can be embedded to provide\\nmore control. (See the second example for a demonstration.)\\n<br><br>\\n<a href=\"#/p5/push\">push()</a> stores information related to the current transformation state\\nand style settings controlled by the following functions: <a href=\"#/p5/fill\">fill()</a>,\\n<a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/tint\">tint()</a>, <a href=\"#/p5/strokeWeight\">strokeWeight()</a>, <a href=\"#/p5/strokeCap\">strokeCap()</a>, <a href=\"#/p5/strokeJoin\">strokeJoin()</a>,\\n<a href=\"#/p5/imageMode\">imageMode()</a>, <a href=\"#/p5/rectMode\">rectMode()</a>, <a href=\"#/p5/ellipseMode\">ellipseMode()</a>, <a href=\"#/p5/colorMode\">colorMode()</a>, <a href=\"#/p5/textAlign\">textAlign()</a>,\\n<a href=\"#/p5/textFont\">textFont()</a>, <a href=\"#/p5/textSize\">textSize()</a>, <a href=\"#/p5/textLeading\">textLeading()</a>.\\n<br><br>\\nIn WEBGL mode additional style settings are stored. These are controlled by the following functions: <a href=\"#/p5/setCamera\">setCamera()</a>, <a href=\"#/p5/ambientLight\">ambientLight()</a>, <a href=\"#/p5/directionalLight\">directionalLight()</a>,\\n<a href=\"#/p5/pointLight\">pointLight()</a>, <a href=\"#/p5/texture\">texture()</a>, <a href=\"#/p5/specularMaterial\">specularMaterial()</a>, <a href=\"#/p5/shininess\">shininess()</a>, <a href=\"#/p5/normalMaterial\">normalMaterial()</a>\\nand <a href=\"#/p5/shader\">shader()</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'push',\n                example: [\n                  '\\n<div>\\n<code>\\nellipse(0, 50, 33, 33); // Left circle\\n\\npush(); // Start a new drawing state\\nstrokeWeight(10);\\nfill(204, 153, 0);\\ntranslate(50, 0);\\nellipse(0, 50, 33, 33); // Middle circle\\npop(); // Restore original state\\n\\nellipse(100, 50, 33, 33); // Right circle\\n</code>\\n</div>\\n<div>\\n<code>\\nellipse(0, 50, 33, 33); // Left circle\\n\\npush(); // Start a new drawing state\\nstrokeWeight(10);\\nfill(204, 153, 0);\\nellipse(33, 50, 33, 33); // Left-middle circle\\n\\npush(); // Start another new drawing state\\nstroke(0, 102, 153);\\nellipse(66, 50, 33, 33); // Right-middle circle\\npop(); // Restore previous state\\n\\npop(); // Restore original state\\n\\nellipse(100, 50, 33, 33); // Right circle\\n</code>\\n</div>'\n                ],\n                alt:\n                  'Gold ellipse + thick black outline @center 2 white ellipses on left and right.\\n2 Gold ellipses left black right blue stroke. 2 white ellipses on left+right.',\n                class: 'p5',\n                module: 'Structure',\n                submodule: 'Structure'\n              },\n              {\n                file: 'src/core/structure.js',\n                line: 191,\n                description:\n                  '<p>The <a href=\"#/p5/push\">push()</a> function saves the current drawing style settings and\\ntransformations, while <a href=\"#/p5/pop\">pop()</a> restores these settings. Note that these\\nfunctions are always used together. They allow you to change the style\\nand transformation settings and later return to what you had. When a new\\nstate is started with <a href=\"#/p5/push\">push()</a>, it builds on the current style and transform\\ninformation. The <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions can be embedded to provide\\nmore control. (See the second example for a demonstration.)\\n<br><br>\\n<a href=\"#/p5/push\">push()</a> stores information related to the current transformation state\\nand style settings controlled by the following functions: <a href=\"#/p5/fill\">fill()</a>,\\n<a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/tint\">tint()</a>, <a href=\"#/p5/strokeWeight\">strokeWeight()</a>, <a href=\"#/p5/strokeCap\">strokeCap()</a>, <a href=\"#/p5/strokeJoin\">strokeJoin()</a>,\\n<a href=\"#/p5/imageMode\">imageMode()</a>, <a href=\"#/p5/rectMode\">rectMode()</a>, <a href=\"#/p5/ellipseMode\">ellipseMode()</a>, <a href=\"#/p5/colorMode\">colorMode()</a>, <a href=\"#/p5/textAlign\">textAlign()</a>,\\n<a href=\"#/p5/textFont\">textFont()</a>, <a href=\"#/p5/textSize\">textSize()</a>, <a href=\"#/p5/textLeading\">textLeading()</a>.\\n<br><br>\\nIn WEBGL mode additional style settings are stored. These are controlled by the following functions: <a href=\"#/p5/setCamera\">setCamera()</a>, <a href=\"#/p5/ambientLight\">ambientLight()</a>, <a href=\"#/p5/directionalLight\">directionalLight()</a>,\\n<a href=\"#/p5/pointLight\">pointLight()</a>, <a href=\"#/p5/texture\">texture()</a>, <a href=\"#/p5/specularMaterial\">specularMaterial()</a>, <a href=\"#/p5/shininess\">shininess()</a>, <a href=\"#/p5/normalMaterial\">normalMaterial()</a>\\nand <a href=\"#/p5/shader\">shader()</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'pop',\n                example: [\n                  '\\n<div>\\n<code>\\nellipse(0, 50, 33, 33); // Left circle\\n\\npush(); // Start a new drawing state\\ntranslate(50, 0);\\nstrokeWeight(10);\\nfill(204, 153, 0);\\nellipse(0, 50, 33, 33); // Middle circle\\npop(); // Restore original state\\n\\nellipse(100, 50, 33, 33); // Right circle\\n</code>\\n</div>\\n<div>\\n<code>\\nellipse(0, 50, 33, 33); // Left circle\\n\\npush(); // Start a new drawing state\\nstrokeWeight(10);\\nfill(204, 153, 0);\\nellipse(33, 50, 33, 33); // Left-middle circle\\n\\npush(); // Start another new drawing state\\nstroke(0, 102, 153);\\nellipse(66, 50, 33, 33); // Right-middle circle\\npop(); // Restore previous state\\n\\npop(); // Restore original state\\n\\nellipse(100, 50, 33, 33); // Right circle\\n</code>\\n</div>'\n                ],\n                alt:\n                  'Gold ellipse + thick black outline @center 2 white ellipses on left and right.\\n2 Gold ellipses left black right blue stroke. 2 white ellipses on left+right.',\n                class: 'p5',\n                module: 'Structure',\n                submodule: 'Structure'\n              },\n              {\n                file: 'src/core/structure.js',\n                line: 261,\n                description:\n                  '<p>Executes the code within <a href=\"#/p5/draw\">draw()</a> one time. This functions allows the\\n program to update the display window only when necessary, for example\\n when an event registered by <a href=\"#/p5/mousePressed\">mousePressed()</a> or <a href=\"#/p5/keyPressed\">keyPressed()</a> occurs.\\n <br><br>\\n In structuring a program, it only makes sense to call <a href=\"#/p5/redraw\">redraw()</a> within\\n events such as <a href=\"#/p5/mousePressed\">mousePressed()</a>. This is because <a href=\"#/p5/redraw\">redraw()</a> does not run\\n <a href=\"#/p5/draw\">draw()</a> immediately (it only sets a flag that indicates an update is\\n needed).\\n <br><br>\\n The <a href=\"#/p5/redraw\">redraw()</a> function does not work properly when called inside <a href=\"#/p5/draw\">draw()</a>.\\n To enable/disable animations, use <a href=\"#/p5/loop\">loop()</a> and <a href=\"#/p5/noLoop\">noLoop()</a>.\\n <br><br>\\n In addition you can set the number of redraws per method call. Just\\n add an integer as single parameter for the number of redraws.</p>\\n',\n                itemtype: 'method',\n                name: 'redraw',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>Redraw for n-times. The default value is 1.</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n <div><code>\\n let x = 0;\\nfunction setup() {\\n   createCanvas(100, 100);\\n   noLoop();\\n }\\nfunction draw() {\\n   background(204);\\n   line(x, 0, x, height);\\n }\\nfunction mousePressed() {\\n   x += 1;\\n   redraw();\\n }\\n </code></div>\\n<div class='norender'><code>\\n let x = 0;\\nfunction setup() {\\n   createCanvas(100, 100);\\n   noLoop();\\n }\\nfunction draw() {\\n   background(204);\\n   x += 1;\\n   line(x, 0, x, height);\\n }\\nfunction mousePressed() {\\n   redraw(5);\\n }\\n </code></div>\"\n                ],\n                alt: 'black line on far left of canvas\\n black line on far left of canvas',\n                class: 'p5',\n                module: 'Structure',\n                submodule: 'Structure'\n              },\n              {\n                file: 'src/core/transform.js',\n                line: 13,\n                description:\n                  '<p>Multiplies the current matrix by the one specified through the parameters.\\nThis is a powerful operation that can perform the equivalent of translate,\\nscale, shear and rotate all at once. You can learn more about transformation\\nmatrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\\nWikipedia</a>.</p>\\n<p>The naming of the arguments here follows the naming of the <a href=\\n\"https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-transform\">\\nWHATWG specification</a> and corresponds to a\\ntransformation matrix of the\\nform:</p>\\n<blockquote>\\n<p><img style=\"max-width: 150px\" src=\"assets/transformation-matrix.png\"\\nalt=\"The transformation matrix used when applyMatrix is called\"/></p>\\n</blockquote>\\n',\n                itemtype: 'method',\n                name: 'applyMatrix',\n                params: [\n                  {\n                    name: 'a',\n                    description:\n                      '<p>numbers which define the 2x3 matrix to be multiplied</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'b',\n                    description:\n                      '<p>numbers which define the 2x3 matrix to be multiplied</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'c',\n                    description:\n                      '<p>numbers which define the 2x3 matrix to be multiplied</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'd',\n                    description:\n                      '<p>numbers which define the 2x3 matrix to be multiplied</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'e',\n                    description:\n                      '<p>numbers which define the 2x3 matrix to be multiplied</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'f',\n                    description:\n                      '<p>numbers which define the 2x3 matrix to be multiplied</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div>\\n<code>\\nfunction setup() {\\n  frameRate(10);\\n  rectMode(CENTER);\\n}\\n\\nfunction draw() {\\n  var step = frameCount % 20;\\n  background(200);\\n  // Equivalent to translate(x, y);\\n  applyMatrix(1, 0, 0, 1, 40 + step, 50);\\n  rect(0, 0, 50, 50);\\n}\\n</code>\\n</div>\\n<div>\\n<code>\\nfunction setup() {\\n  frameRate(10);\\n  rectMode(CENTER);\\n}\\n\\nfunction draw() {\\n  var step = frameCount % 20;\\n  background(200);\\n  translate(50, 50);\\n  // Equivalent to scale(x, y);\\n  applyMatrix(1 / step, 0, 0, 1 / step, 0, 0);\\n  rect(0, 0, 50, 50);\\n}\\n</code>\\n</div>\\n<div>\\n<code>\\nfunction setup() {\\n  frameRate(10);\\n  rectMode(CENTER);\\n}\\n\\nfunction draw() {\\n  var step = frameCount % 20;\\n  var angle = map(step, 0, 20, 0, TWO_PI);\\n  var cos_a = cos(angle);\\n  var sin_a = sin(angle);\\n  background(200);\\n  translate(50, 50);\\n  // Equivalent to rotate(angle);\\n  applyMatrix(cos_a, sin_a, -sin_a, cos_a, 0, 0);\\n  rect(0, 0, 50, 50);\\n}\\n</code>\\n</div>\\n<div>\\n<code>\\nfunction setup() {\\n  frameRate(10);\\n  rectMode(CENTER);\\n}\\n\\nfunction draw() {\\n  var step = frameCount % 20;\\n  var angle = map(step, 0, 20, -PI / 4, PI / 4);\\n  background(200);\\n  translate(50, 50);\\n  // equivalent to shearX(angle);\\n  var shear_factor = 1 / tan(PI / 2 - angle);\\n  applyMatrix(1, 0, shear_factor, 1, 0, 0);\\n  rect(0, 0, 50, 50);\\n}\\n</code>\\n</div>\\n<div modernizr='webgl'>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  noFill();\\n}\\n\\nfunction draw() {\\n  background(200);\\n  rotateY(PI / 6);\\n  stroke(153);\\n  box(35);\\n  var rad = millis() / 1000;\\n  // Set rotation angles\\n  var ct = cos(rad);\\n  var st = sin(rad);\\n  // Matrix for rotation around the Y axis\\n  applyMatrix(  ct, 0.0,  st,  0.0,\\n               0.0, 1.0, 0.0,  0.0,\\n               -st, 0.0,  ct,  0.0,\\n               0.0, 0.0, 0.0,  1.0);\\n  stroke(255);\\n  box(50);\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'A rectangle translating to the right\\nA rectangle shrinking to the center\\nA rectangle rotating clockwise about the center\\nA rectangle shearing',\n                class: 'p5',\n                module: 'Transform',\n                submodule: 'Transform'\n              },\n              {\n                file: 'src/core/transform.js',\n                line: 150,\n                description:\n                  '<p>Replaces the current matrix with the identity matrix.</p>\\n',\n                itemtype: 'method',\n                name: 'resetMatrix',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\ntranslate(50, 50);\\napplyMatrix(0.5, 0.5, -0.5, 0.5, 0, 0);\\nrect(0, 0, 20, 20);\\n// Note that the translate is also reset.\\nresetMatrix();\\nrect(0, 0, 20, 20);\\n</code>\\n</div>'\n                ],\n                alt: 'A rotated retangle in the center with another at the top left corner',\n                class: 'p5',\n                module: 'Transform',\n                submodule: 'Transform'\n              },\n              {\n                file: 'src/core/transform.js',\n                line: 176,\n                description:\n                  '<p>Rotates a shape the amount specified by the angle parameter. This\\nfunction accounts for <a href=\"#/p5/angleMode\">angleMode</a>, so angles can be entered in either\\nRADIANS or DEGREES.\\n<br><br>\\nObjects are always rotated around their relative position to the\\norigin and positive numbers rotate objects in a clockwise direction.\\nTransformations apply to everything that happens after and subsequent\\ncalls to the function accumulates the effect. For example, calling\\nrotate(HALF_PI) and then rotate(HALF_PI) is the same as rotate(PI).\\nAll tranformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again.\\n<br><br>\\nTechnically, <a href=\"#/p5/rotate\">rotate()</a> multiplies the current transformation matrix\\nby a rotation matrix. This function can be further controlled by\\nthe <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'rotate',\n                params: [\n                  {\n                    name: 'angle',\n                    description:\n                      '<p>the angle of rotation, specified in radians\\n                       or degrees, depending on current angleMode</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'axis',\n                    description: '<p>(in 3d) the axis to rotate around</p>\\n',\n                    type: 'p5.Vector|Number[]',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\ntranslate(width / 2, height / 2);\\nrotate(PI / 3.0);\\nrect(-26, -26, 52, 52);\\n</code>\\n</div>'\n                ],\n                alt:\n                  'white 52x52 rect with black outline at center rotated counter 45 degrees',\n                class: 'p5',\n                module: 'Transform',\n                submodule: 'Transform'\n              },\n              {\n                file: 'src/core/transform.js',\n                line: 216,\n                description: '<p>Rotates around X axis.</p>\\n',\n                itemtype: 'method',\n                name: 'rotateX',\n                params: [\n                  {\n                    name: 'angle',\n                    description:\n                      '<p>the angle of rotation, specified in radians\\n                       or degrees, depending on current angleMode</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div modernizr='webgl'>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\nfunction draw() {\\n  background(255);\\n  rotateX(millis() / 1000);\\n  box();\\n}\\n</code>\\n</div>\"\n                ],\n                alt: '3d box rotating around the x axis.',\n                class: 'p5',\n                module: 'Transform',\n                submodule: 'Transform'\n              },\n              {\n                file: 'src/core/transform.js',\n                line: 246,\n                description: '<p>Rotates around Y axis.</p>\\n',\n                itemtype: 'method',\n                name: 'rotateY',\n                params: [\n                  {\n                    name: 'angle',\n                    description:\n                      '<p>the angle of rotation, specified in radians\\n                       or degrees, depending on current angleMode</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div modernizr='webgl'>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\nfunction draw() {\\n  background(255);\\n  rotateY(millis() / 1000);\\n  box();\\n}\\n</code>\\n</div>\"\n                ],\n                alt: '3d box rotating around the y axis.',\n                class: 'p5',\n                module: 'Transform',\n                submodule: 'Transform'\n              },\n              {\n                file: 'src/core/transform.js',\n                line: 276,\n                description: '<p>Rotates around Z axis. Webgl mode only.</p>\\n',\n                itemtype: 'method',\n                name: 'rotateZ',\n                params: [\n                  {\n                    name: 'angle',\n                    description:\n                      '<p>the angle of rotation, specified in radians\\n                       or degrees, depending on current angleMode</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div modernizr='webgl'>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\nfunction draw() {\\n  background(255);\\n  rotateZ(millis() / 1000);\\n  box();\\n}\\n</code>\\n</div>\"\n                ],\n                alt: '3d box rotating around the z axis.',\n                class: 'p5',\n                module: 'Transform',\n                submodule: 'Transform'\n              },\n              {\n                file: 'src/core/transform.js',\n                line: 306,\n                description:\n                  '<p>Increases or decreases the size of a shape by expanding and contracting\\nvertices. Objects always scale from their relative origin to the\\ncoordinate system. Scale values are specified as decimal percentages.\\nFor example, the function call scale(2.0) increases the dimension of a\\nshape by 200%.\\n<br><br>\\nTransformations apply to everything that happens after and subsequent\\ncalls to the function multiply the effect. For example, calling scale(2.0)\\nand then scale(1.5) is the same as scale(3.0). If <a href=\"#/p5/scale\">scale()</a> is called\\nwithin <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when the loop begins again.\\n<br><br>\\nUsing this function with the z parameter is only available in WEBGL mode.\\nThis function can be further controlled with <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'scale',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nrect(30, 20, 50, 50);\\nscale(0.5);\\nrect(30, 20, 50, 50);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nrect(30, 20, 50, 50);\\nscale(0.5, 1.3);\\nrect(30, 20, 50, 50);\\n</code>\\n</div>'\n                ],\n                alt:\n                  'white 52x52 rect with black outline at center rotated counter 45 degrees\\n2 white rects with black outline- 1 50x50 at center. other 25x65 bottom left',\n                class: 'p5',\n                module: 'Transform',\n                submodule: 'Transform',\n                overloads: [\n                  {\n                    line: 306,\n                    params: [\n                      {\n                        name: 's',\n                        description:\n                          '<p>percent to scale the object, or percentage to\\n                     scale the object in the x-axis if multiple arguments\\n                     are given</p>\\n',\n                        type: 'Number|p5.Vector|Number[]'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>percent to scale the object in the y-axis</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'z',\n                        description:\n                          '<p>percent to scale the object in the z-axis (webgl only)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 351,\n                    params: [\n                      {\n                        name: 'scales',\n                        description: '<p>per-axis percents to scale the object</p>\\n',\n                        type: 'p5.Vector|Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/core/transform.js',\n                line: 381,\n                description:\n                  '<p>Shears a shape around the x-axis the amount specified by the angle\\nparameter. Angles should be specified in the current angleMode.\\nObjects are always sheared around their relative position to the origin\\nand positive numbers shear objects in a clockwise direction.\\n<br><br>\\nTransformations apply to everything that happens after and subsequent\\ncalls to the function accumulates the effect. For example, calling\\nshearX(PI/2) and then shearX(PI/2) is the same as shearX(PI).\\nIf <a href=\"#/p5/shearX\">shearX()</a> is called within the <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when\\nthe loop begins again.\\n<br><br>\\nTechnically, <a href=\"#/p5/shearX\">shearX()</a> multiplies the current transformation matrix by a\\nrotation matrix. This function can be further controlled by the\\n<a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions.</p>\\n',\n                itemtype: 'method',\n                name: 'shearX',\n                params: [\n                  {\n                    name: 'angle',\n                    description:\n                      '<p>angle of shear specified in radians or degrees,\\n                       depending on current angleMode</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\ntranslate(width / 4, height / 4);\\nshearX(PI / 4.0);\\nrect(0, 0, 30, 30);\\n</code>\\n</div>'\n                ],\n                alt: 'white irregular quadrilateral with black outline at top middle.',\n                class: 'p5',\n                module: 'Transform',\n                submodule: 'Transform'\n              },\n              {\n                file: 'src/core/transform.js',\n                line: 421,\n                description:\n                  '<p>Shears a shape around the y-axis the amount specified by the angle\\nparameter. Angles should be specified in the current angleMode. Objects\\nare always sheared around their relative position to the origin and\\npositive numbers shear objects in a clockwise direction.\\n<br><br>\\nTransformations apply to everything that happens after and subsequent\\ncalls to the function accumulates the effect. For example, calling\\nshearY(PI/2) and then shearY(PI/2) is the same as shearY(PI). If\\n<a href=\"#/p5/shearY\">shearY()</a> is called within the <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when\\nthe loop begins again.\\n<br><br>\\nTechnically, <a href=\"#/p5/shearY\">shearY()</a> multiplies the current transformation matrix by a\\nrotation matrix. This function can be further controlled by the\\n<a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions.</p>\\n',\n                itemtype: 'method',\n                name: 'shearY',\n                params: [\n                  {\n                    name: 'angle',\n                    description:\n                      '<p>angle of shear specified in radians or degrees,\\n                       depending on current angleMode</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\ntranslate(width / 4, height / 4);\\nshearY(PI / 4.0);\\nrect(0, 0, 30, 30);\\n</code>\\n</div>'\n                ],\n                alt: 'white irregular quadrilateral with black outline at middle bottom.',\n                class: 'p5',\n                module: 'Transform',\n                submodule: 'Transform'\n              },\n              {\n                file: 'src/core/transform.js',\n                line: 461,\n                description:\n                  '<p>Specifies an amount to displace objects within the display window.\\nThe x parameter specifies left/right translation, the y parameter\\nspecifies up/down translation.\\n<br><br>\\nTransformations are cumulative and apply to everything that happens after\\nand subsequent calls to the function accumulates the effect. For example,\\ncalling translate(50, 0) and then translate(20, 0) is the same as\\ntranslate(70, 0). If <a href=\"#/p5/translate\">translate()</a> is called within <a href=\"#/p5/draw\">draw()</a>, the\\ntransformation is reset when the loop begins again. This function can be\\nfurther controlled by using <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'translate',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\ntranslate(30, 20);\\nrect(0, 0, 55, 55);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nrect(0, 0, 55, 55); // Draw rect at original 0,0\\ntranslate(30, 20);\\nrect(0, 0, 55, 55); // Draw rect at new 0,0\\ntranslate(14, 14);\\nrect(0, 0, 55, 55); // Draw rect at new 0,0\\n</code>\\n</div>\\n\\n\\n<div>\\n<code>\\nfunction draw() {\\n  background(200);\\n  rectMode(CENTER);\\n  translate(width / 2, height / 2);\\n  translate(p5.Vector.fromAngle(millis() / 1000, 40));\\n  rect(0, 0, 20, 20);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'white 55x55 rect with black outline at center right.\\n3 white 55x55 rects with black outlines at top-l, center-r and bottom-r.\\na 20x20 white rect moving in a circle around the canvas',\n                class: 'p5',\n                module: 'Transform',\n                submodule: 'Transform',\n                overloads: [\n                  {\n                    line: 461,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>left/right translation</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>up/down translation</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>forward/backward translation (webgl only)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 515,\n                    params: [\n                      {\n                        name: 'vector',\n                        description: '<p>the vector to translate by</p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/data/local_storage.js',\n                line: 11,\n                description:\n                  '<p>Stores a value in local storage under the key name.\\n Local storage is saved in the browser and persists\\n between browsing sessions and page reloads.\\n The key can be the name of the variable but doesn&#39;t\\n have to be. To retrieve stored items\\n see <a href=\"#/p5/getItem\">getItem</a>.\\n <br><br>\\n Sensitive data such as passwords or personal information\\n should not be stored in local storage.</p>\\n',\n                itemtype: 'method',\n                name: 'storeItem',\n                params: [\n                  {\n                    name: 'key',\n                    description: '',\n                    type: 'String'\n                  },\n                  {\n                    name: 'value',\n                    description: '',\n                    type: 'String|Number|Object|Boolean|p5.Color'\n                  }\n                ],\n                example: [\n                  \"\\n <div><code>\\n // Type to change the letter in the\\n // center of the canvas.\\n // If you reload the page, it will\\n // still display the last key you entered\\nlet myText;\\nfunction setup() {\\n   createCanvas(100, 100);\\n   myText = getItem('myText');\\n   if (myText === null) {\\n     myText = '';\\n   }\\n }\\nfunction draw() {\\n   textSize(40);\\n   background(255);\\n   text(myText, width / 2, height / 2);\\n }\\nfunction keyPressed() {\\n   myText = key;\\n   storeItem('myText', myText);\\n }\\n </code></div>\"\n                ],\n                alt:\n                  'When you type the key name is displayed as black text on white background.\\n If you reload the page, the last letter typed is still displaying.',\n                class: 'p5',\n                module: 'Data',\n                submodule: 'LocalStorage'\n              },\n              {\n                file: 'src/data/local_storage.js',\n                line: 88,\n                description:\n                  '<p>Returns the value of an item that was stored in local storage\\n using storeItem()</p>\\n',\n                itemtype: 'method',\n                name: 'getItem',\n                params: [\n                  {\n                    name: 'key',\n                    description:\n                      '<p>name that you wish to use to store in local storage</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                return: {\n                  description: 'Value of stored item',\n                  type: 'Number|Object|String|Boolean|p5.Color'\n                },\n                example: [\n                  \"\\n <div><code>\\n // Click the mouse to change\\n // the color of the background\\n // Once you have changed the color\\n // it will stay changed even when you\\n // reload the page.\\nlet myColor;\\nfunction setup() {\\n   createCanvas(100, 100);\\n   myColor = getItem('myColor');\\n }\\nfunction draw() {\\n   if (myColor !== null) {\\n     background(myColor);\\n   }\\n }\\nfunction mousePressed() {\\n   myColor = color(random(255), random(255), random(255));\\n   storeItem('myColor', myColor);\\n }\\n </code></div>\"\n                ],\n                alt:\n                  'If you click, the canvas changes to a random color.\\n If you reload the page, the canvas is still the color it\\n was when the page was previously loaded.',\n                class: 'p5',\n                module: 'Data',\n                submodule: 'LocalStorage'\n              },\n              {\n                file: 'src/data/local_storage.js',\n                line: 163,\n                description:\n                  '<p>Clears all local storage items set with storeItem()\\n for the current domain.</p>\\n',\n                itemtype: 'method',\n                name: 'clearStorage',\n                example: [\n                  \"\\n <div class=\\\"norender\\\">\\n <code>\\n function setup() {\\n   let myNum = 10;\\n   let myBool = false;\\n   storeItem('myNum', myNum);\\n   storeItem('myBool', myBool);\\n   print(getItem('myNum')); // logs 10 to the console\\n   print(getItem('myBool')); // logs false to the console\\n   clearStorage();\\n   print(getItem('myNum')); // logs null to the console\\n   print(getItem('myBool')); // logs null to the console\\n }\\n </code></div>\"\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'LocalStorage'\n              },\n              {\n                file: 'src/data/local_storage.js',\n                line: 191,\n                description: '<p>Removes an item that was stored with storeItem()</p>\\n',\n                itemtype: 'method',\n                name: 'removeItem',\n                params: [\n                  {\n                    name: 'key',\n                    description: '',\n                    type: 'String'\n                  }\n                ],\n                example: [\n                  \"\\n <div class=\\\"norender\\\">\\n <code>\\n function setup() {\\n   let myVar = 10;\\n   storeItem('myVar', myVar);\\n   print(getItem('myVar')); // logs 10 to the console\\n   removeItem('myVar');\\n   print(getItem('myVar')); // logs null to the console\\n }\\n </code></div>\"\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'LocalStorage'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 16,\n                description:\n                  '<p>Creates a new instance of p5.StringDict using the key-value pair\\n or the object you provide.</p>\\n',\n                itemtype: 'method',\n                name: 'createStringDict',\n                return: {\n                  description: '',\n                  type: 'p5.StringDict'\n                },\n                example: [\n                  \"\\n <div class=\\\"norender\\\">\\n <code>\\n function setup() {\\n   let myDictionary = createStringDict('p5', 'js');\\n   print(myDictionary.hasKey('p5')); // logs true to console\\n  let anotherDictionary = createStringDict({ happy: 'coding' });\\n   print(anotherDictionary.hasKey('happy')); // logs true to console\\n }\\n </code></div>\"\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Dictionary',\n                overloads: [\n                  {\n                    line: 16,\n                    params: [\n                      {\n                        name: 'key',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'value',\n                        description: '',\n                        type: 'String'\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'p5.StringDict'\n                    }\n                  },\n                  {\n                    line: 39,\n                    params: [\n                      {\n                        name: 'object',\n                        description: '<p>object</p>\\n',\n                        type: 'Object'\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'p5.StringDict'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 50,\n                description:\n                  '<p>Creates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\\n or object you provide.</p>\\n',\n                itemtype: 'method',\n                name: 'createNumberDict',\n                return: {\n                  description: '',\n                  type: 'p5.NumberDict'\n                },\n                example: [\n                  '\\n <div class=\"norender\">\\n <code>\\n function setup() {\\n   let myDictionary = createNumberDict(100, 42);\\n   print(myDictionary.hasKey(100)); // logs true to console\\n  let anotherDictionary = createNumberDict({ 200: 84 });\\n   print(anotherDictionary.hasKey(200)); // logs true to console\\n }\\n </code></div>'\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Dictionary',\n                overloads: [\n                  {\n                    line: 50,\n                    params: [\n                      {\n                        name: 'key',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'value',\n                        description: '',\n                        type: 'Number'\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'p5.NumberDict'\n                    }\n                  },\n                  {\n                    line: 73,\n                    params: [\n                      {\n                        name: 'object',\n                        description: '<p>object</p>\\n',\n                        type: 'Object'\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'p5.NumberDict'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 103,\n                description:\n                  '<p>Returns the number of key-value pairs currently stored in the Dictionary.</p>\\n',\n                itemtype: 'method',\n                name: 'size',\n                return: {\n                  description: 'the number of key-value pairs in the Dictionary',\n                  type: 'Integer'\n                },\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\nfunction setup() {\\n  let myDictionary = createNumberDict(1, 10);\\n  myDictionary.create(2, 20);\\n  myDictionary.create(3, 30);\\n  print(myDictionary.size()); // logs 3 to the console\\n}\\n</code></div>\\n'\n                ],\n                class: 'p5.TypedDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 125,\n                description:\n                  '<p>Returns true if the given key exists in the Dictionary,\\notherwise returns false.</p>\\n',\n                itemtype: 'method',\n                name: 'hasKey',\n                params: [\n                  {\n                    name: 'key',\n                    description: '<p>that you want to look up</p>\\n',\n                    type: 'Number|String'\n                  }\n                ],\n                return: {\n                  description: 'whether that key exists in Dictionary',\n                  type: 'Boolean'\n                },\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nfunction setup() {\\n  let myDictionary = createStringDict('p5', 'js');\\n  print(myDictionary.hasKey('p5')); // logs true to console\\n}\\n</code></div>\\n\"\n                ],\n                class: 'p5.TypedDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 148,\n                description: '<p>Returns the value stored at the given key.</p>\\n',\n                itemtype: 'method',\n                name: 'get',\n                params: [\n                  {\n                    name: 'the',\n                    description: '<p>key you want to access</p>\\n',\n                    type: 'Number|String'\n                  }\n                ],\n                return: {\n                  description: 'the value stored at that key',\n                  type: 'Number|String'\n                },\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nfunction setup() {\\n  let myDictionary = createStringDict('p5', 'js');\\n  let myValue = myDictionary.get('p5');\\n  print(myValue === 'js'); // logs true to console\\n}\\n</code></div>\\n\"\n                ],\n                class: 'p5.TypedDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 175,\n                description:\n                  '<p>Updates the value associated with the given key in case it already exists\\nin the Dictionary. Otherwise a new key-value pair is added.</p>\\n',\n                itemtype: 'method',\n                name: 'set',\n                params: [\n                  {\n                    name: 'key',\n                    description: '',\n                    type: 'Number|String'\n                  },\n                  {\n                    name: 'value',\n                    description: '',\n                    type: 'Number|String'\n                  }\n                ],\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nfunction setup() {\\n  let myDictionary = createStringDict('p5', 'js');\\n  myDictionary.set('p5', 'JS');\\n  myDictionary.print(); // logs \\\"key: p5 - value: JS\\\" to console\\n}\\n</code></div>\\n\"\n                ],\n                class: 'p5.TypedDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 203,\n                description:\n                  '<p>private helper function to handle the user passing in objects\\nduring construction or calls to create()</p>\\n',\n                class: 'p5.TypedDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 214,\n                description: '<p>Creates a new key-value pair in the Dictionary.</p>\\n',\n                itemtype: 'method',\n                name: 'create',\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nfunction setup() {\\n  let myDictionary = createStringDict('p5', 'js');\\n  myDictionary.create('happy', 'coding');\\n  myDictionary.print();\\n  // above logs \\\"key: p5 - value: js, key: happy - value: coding\\\" to console\\n}\\n</code></div>\"\n                ],\n                class: 'p5.TypedDict',\n                module: 'Data',\n                submodule: 'Dictionary',\n                overloads: [\n                  {\n                    line: 214,\n                    params: [\n                      {\n                        name: 'key',\n                        description: '',\n                        type: 'Number|String'\n                      },\n                      {\n                        name: 'value',\n                        description: '',\n                        type: 'Number|String'\n                      }\n                    ]\n                  },\n                  {\n                    line: 232,\n                    params: [\n                      {\n                        name: 'obj',\n                        description: '<p>key/value pair</p>\\n',\n                        type: 'Object'\n                      }\n                    ]\n                  }\n                ]\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 250,\n                description:\n                  '<p>Removes all previously stored key-value pairs from the Dictionary.</p>\\n',\n                itemtype: 'method',\n                name: 'clear',\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nfunction setup() {\\n  let myDictionary = createStringDict('p5', 'js');\\n  print(myDictionary.hasKey('p5')); // prints 'true'\\n  myDictionary.clear();\\n  print(myDictionary.hasKey('p5')); // prints 'false'\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.TypedDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 271,\n                description:\n                  '<p>Removes the key-value pair stored at the given key from the Dictionary.</p>\\n',\n                itemtype: 'method',\n                name: 'remove',\n                params: [\n                  {\n                    name: 'key',\n                    description: '<p>for the pair to remove</p>\\n',\n                    type: 'Number|String'\n                  }\n                ],\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nfunction setup() {\\n  let myDictionary = createStringDict('p5', 'js');\\n  myDictionary.create('happy', 'coding');\\n  myDictionary.print();\\n  // above logs \\\"key: p5 - value: js, key: happy - value: coding\\\" to console\\n  myDictionary.remove('p5');\\n  myDictionary.print();\\n  // above logs \\\"key: happy value: coding\\\" to console\\n}\\n</code></div>\\n\"\n                ],\n                class: 'p5.TypedDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 301,\n                description:\n                  '<p>Logs the set of items currently stored in the Dictionary to the console.</p>\\n',\n                itemtype: 'method',\n                name: 'print',\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nfunction setup() {\\n  let myDictionary = createStringDict('p5', 'js');\\n  myDictionary.create('happy', 'coding');\\n  myDictionary.print();\\n  // above logs \\\"key: p5 - value: js, key: happy - value: coding\\\" to console\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.TypedDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 325,\n                description:\n                  '<p>Converts the Dictionary into a CSV file for local download.</p>\\n',\n                itemtype: 'method',\n                name: 'saveTable',\n                example: [\n                  \"\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100);\\n  background(200);\\n  text('click here to save', 10, 10, 70, 80);\\n}\\n\\nfunction mousePressed() {\\n  if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\\n    createStringDict({\\n      john: 1940,\\n      paul: 1942,\\n      george: 1943,\\n      ringo: 1940\\n    }).saveTable('beatles');\\n  }\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.TypedDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 363,\n                description:\n                  '<p>Converts the Dictionary into a JSON file for local download.</p>\\n',\n                itemtype: 'method',\n                name: 'saveJSON',\n                example: [\n                  \"\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100);\\n  background(200);\\n  text('click here to save', 10, 10, 70, 80);\\n}\\n\\nfunction mousePressed() {\\n  if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\\n    createStringDict({\\n      john: 1940,\\n      paul: 1942,\\n      george: 1943,\\n      ringo: 1940\\n    }).saveJSON('beatles');\\n  }\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.TypedDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 394,\n                description:\n                  '<p>private helper function to ensure that the user passed in valid\\nvalues for the Dictionary type</p>\\n',\n                class: 'p5.TypedDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 437,\n                description:\n                  '<p>private helper function to ensure that the user passed in valid\\nvalues for the Dictionary type</p>\\n',\n                class: 'p5.NumberDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 446,\n                description:\n                  '<p>Add the given number to the value currently stored at the given key.\\nThe sum then replaces the value previously stored in the Dictionary.</p>\\n',\n                itemtype: 'method',\n                name: 'add',\n                params: [\n                  {\n                    name: 'Key',\n                    description: '<p>for the value you wish to add to</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'Number',\n                    description: '<p>to add to the value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  \"\\n<div class='norender'>\\n<code>\\nfunction setup() {\\n  let myDictionary = createNumberDict(2, 5);\\n  myDictionary.add(2, 2);\\n  print(myDictionary.get(2)); // logs 7 to console.\\n}\\n</code></div>\\n\\n\"\n                ],\n                class: 'p5.NumberDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 474,\n                description:\n                  '<p>Subtract the given number from the value currently stored at the given key.\\nThe difference then replaces the value previously stored in the Dictionary.</p>\\n',\n                itemtype: 'method',\n                name: 'sub',\n                params: [\n                  {\n                    name: 'Key',\n                    description: '<p>for the value you wish to subtract from</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'Number',\n                    description: '<p>to subtract from the value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  \"\\n<div class='norender'>\\n<code>\\nfunction setup() {\\n  let myDictionary = createNumberDict(2, 5);\\n  myDictionary.sub(2, 2);\\n  print(myDictionary.get(2)); // logs 3 to console.\\n}\\n</code></div>\\n\\n\"\n                ],\n                class: 'p5.NumberDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 498,\n                description:\n                  '<p>Multiply the given number with the value currently stored at the given key.\\nThe product then replaces the value previously stored in the Dictionary.</p>\\n',\n                itemtype: 'method',\n                name: 'mult',\n                params: [\n                  {\n                    name: 'Key',\n                    description: '<p>for value you wish to multiply</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'Amount',\n                    description: '<p>to multiply the value by</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  \"\\n<div class='norender'>\\n<code>\\nfunction setup() {\\n  let myDictionary = createNumberDict(2, 4);\\n  myDictionary.mult(2, 2);\\n  print(myDictionary.get(2)); // logs 8 to console.\\n}\\n</code></div>\\n\\n\"\n                ],\n                class: 'p5.NumberDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 526,\n                description:\n                  '<p>Divide the given number with the value currently stored at the given key.\\nThe quotient then replaces the value previously stored in the Dictionary.</p>\\n',\n                itemtype: 'method',\n                name: 'div',\n                params: [\n                  {\n                    name: 'Key',\n                    description: '<p>for value you wish to divide</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'Amount',\n                    description: '<p>to divide the value by</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  \"\\n<div class='norender'>\\n<code>\\nfunction setup() {\\n  let myDictionary = createNumberDict(2, 8);\\n  myDictionary.div(2, 2);\\n  print(myDictionary.get(2)); // logs 4 to console.\\n}\\n</code></div>\\n\\n\"\n                ],\n                class: 'p5.NumberDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 554,\n                description:\n                  '<p>private helper function for finding lowest or highest value\\nthe argument &#39;flip&#39; is used to flip the comparison arrow\\nfrom &#39;less than&#39; to &#39;greater than&#39;</p>\\n',\n                class: 'p5.NumberDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 579,\n                description:\n                  '<p>Return the lowest number currently stored in the Dictionary.</p>\\n',\n                itemtype: 'method',\n                name: 'minValue',\n                return: {\n                  description: '',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div class='norender'>\\n<code>\\nfunction setup() {\\n  let myDictionary = createNumberDict({ 2: -10, 4: 0.65, 1.2: 3 });\\n  let lowestValue = myDictionary.minValue(); // value is -10\\n  print(lowestValue);\\n}\\n</code></div>\\n\"\n                ],\n                class: 'p5.NumberDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 600,\n                description:\n                  '<p>Return the highest number currently stored in the Dictionary.</p>\\n',\n                itemtype: 'method',\n                name: 'maxValue',\n                return: {\n                  description: '',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div class='norender'>\\n<code>\\nfunction setup() {\\n  let myDictionary = createNumberDict({ 2: -10, 4: 0.65, 1.2: 3 });\\n  let highestValue = myDictionary.maxValue(); // value is 3\\n  print(highestValue);\\n}\\n</code></div>\\n\"\n                ],\n                class: 'p5.NumberDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 621,\n                description:\n                  '<p>private helper function for finding lowest or highest key\\nthe argument &#39;flip&#39; is used to flip the comparison arrow\\nfrom &#39;less than&#39; to &#39;greater than&#39;</p>\\n',\n                class: 'p5.NumberDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 644,\n                description:\n                  '<p>Return the lowest key currently used in the Dictionary.</p>\\n',\n                itemtype: 'method',\n                name: 'minKey',\n                return: {\n                  description: '',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div class='norender'>\\n<code>\\nfunction setup() {\\n  let myDictionary = createNumberDict({ 2: 4, 4: 6, 1.2: 3 });\\n  let lowestKey = myDictionary.minKey(); // value is 1.2\\n  print(lowestKey);\\n}\\n</code></div>\\n\"\n                ],\n                class: 'p5.NumberDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/data/p5.TypedDict.js',\n                line: 665,\n                description:\n                  '<p>Return the highest key currently used in the Dictionary.</p>\\n',\n                itemtype: 'method',\n                name: 'maxKey',\n                return: {\n                  description: '',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div class='norender'>\\n<code>\\nfunction setup() {\\n  let myDictionary = createNumberDict({ 2: 4, 4: 6, 1.2: 3 });\\n  let highestKey = myDictionary.maxKey(); // value is 4\\n  print(highestKey);\\n}\\n</code></div>\\n\"\n                ],\n                class: 'p5.NumberDict',\n                module: 'Data',\n                submodule: 'Dictionary'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 12,\n                description:\n                  '<p>The system variable deviceOrientation always contains the orientation of\\nthe device. The value of this variable will either be set &#39;landscape&#39;\\nor &#39;portrait&#39;. If no data is available it will be set to &#39;undefined&#39;.\\neither LANDSCAPE or PORTRAIT.</p>\\n',\n                itemtype: 'property',\n                name: 'deviceOrientation',\n                type: 'Constant',\n                readonly: '',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 23,\n                description:\n                  '<p>The system variable accelerationX always contains the acceleration of the\\ndevice along the x axis. Value is represented as meters per second squared.</p>\\n',\n                itemtype: 'property',\n                name: 'accelerationX',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  \"\\n<div>\\n<code>\\n// Move a touchscreen device to register\\n// acceleration changes.\\nfunction draw() {\\n  background(220, 50);\\n  fill('magenta');\\n  ellipse(width / 2, height / 2, accelerationX);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'Magnitude of device acceleration is displayed as ellipse size',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 46,\n                description:\n                  '<p>The system variable accelerationY always contains the acceleration of the\\ndevice along the y axis. Value is represented as meters per second squared.</p>\\n',\n                itemtype: 'property',\n                name: 'accelerationY',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  \"\\n<div>\\n<code>\\n// Move a touchscreen device to register\\n// acceleration changes.\\nfunction draw() {\\n  background(220, 50);\\n  fill('magenta');\\n  ellipse(width / 2, height / 2, accelerationY);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'Magnitude of device acceleration is displayed as ellipse size',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 69,\n                description:\n                  '<p>The system variable accelerationZ always contains the acceleration of the\\ndevice along the z axis. Value is represented as meters per second squared.</p>\\n',\n                itemtype: 'property',\n                name: 'accelerationZ',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  \"\\n<div>\\n<code>\\n// Move a touchscreen device to register\\n// acceleration changes.\\nfunction draw() {\\n  background(220, 50);\\n  fill('magenta');\\n  ellipse(width / 2, height / 2, accelerationZ);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'Magnitude of device acceleration is displayed as ellipse size',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 94,\n                description:\n                  '<p>The system variable pAccelerationX always contains the acceleration of the\\ndevice along the x axis in the frame previous to the current frame. Value\\nis represented as meters per second squared.</p>\\n',\n                itemtype: 'property',\n                name: 'pAccelerationX',\n                type: 'Number',\n                readonly: '',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 104,\n                description:\n                  '<p>The system variable pAccelerationY always contains the acceleration of the\\ndevice along the y axis in the frame previous to the current frame. Value\\nis represented as meters per second squared.</p>\\n',\n                itemtype: 'property',\n                name: 'pAccelerationY',\n                type: 'Number',\n                readonly: '',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 114,\n                description:\n                  '<p>The system variable pAccelerationZ always contains the acceleration of the\\ndevice along the z axis in the frame previous to the current frame. Value\\nis represented as meters per second squared.</p>\\n',\n                itemtype: 'property',\n                name: 'pAccelerationZ',\n                type: 'Number',\n                readonly: '',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 135,\n                description:\n                  '<p>The system variable rotationX always contains the rotation of the\\ndevice along the x axis. Value is represented as 0 to +/-180 degrees.\\n<br><br>\\nNote: The order the rotations are called is important, ie. if used\\ntogether, it must be called in the order Z-X-Y or there might be\\nunexpected behaviour.</p>\\n',\n                itemtype: 'property',\n                name: 'rotationX',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  //rotateZ(radians(rotationZ));\\n  rotateX(radians(rotationX));\\n  //rotateY(radians(rotationY));\\n  box(200, 200, 200);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'red horizontal line right, green vertical line bottom. black background.',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 166,\n                description:\n                  '<p>The system variable rotationY always contains the rotation of the\\ndevice along the y axis. Value is represented as 0 to +/-90 degrees.\\n<br><br>\\nNote: The order the rotations are called is important, ie. if used\\ntogether, it must be called in the order Z-X-Y or there might be\\nunexpected behaviour.</p>\\n',\n                itemtype: 'property',\n                name: 'rotationY',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  //rotateZ(radians(rotationZ));\\n  //rotateX(radians(rotationX));\\n  rotateY(radians(rotationY));\\n  box(200, 200, 200);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'red horizontal line right, green vertical line bottom. black background.',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 197,\n                description:\n                  '<p>The system variable rotationZ always contains the rotation of the\\ndevice along the z axis. Value is represented as 0 to 359 degrees.\\n<br><br>\\nUnlike rotationX and rotationY, this variable is available for devices\\nwith a built-in compass only.\\n<br><br>\\nNote: The order the rotations are called is important, ie. if used\\ntogether, it must be called in the order Z-X-Y or there might be\\nunexpected behaviour.</p>\\n',\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  rotateZ(radians(rotationZ));\\n  //rotateX(radians(rotationX));\\n  //rotateY(radians(rotationY));\\n  box(200, 200, 200);\\n}\\n</code>\\n</div>'\n                ],\n                itemtype: 'property',\n                name: 'rotationZ',\n                type: 'Number',\n                readonly: '',\n                alt:\n                  'red horizontal line right, green vertical line bottom. black background.',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 233,\n                description:\n                  '<p>The system variable pRotationX always contains the rotation of the\\ndevice along the x axis in the frame previous to the current frame. Value\\nis represented as 0 to +/-180 degrees.\\n<br><br>\\npRotationX can also be used with rotationX to determine the rotate\\ndirection of the device along the X-axis.</p>\\n',\n                example: [\n                  \"\\n<div class='norender'>\\n<code>\\n// A simple if statement looking at whether\\n// rotationX - pRotationX < 0 is true or not will be\\n// sufficient for determining the rotate direction\\n// in most cases.\\n\\n// Some extra logic is needed to account for cases where\\n// the angles wrap around.\\nlet rotateDirection = 'clockwise';\\n\\n// Simple range conversion to make things simpler.\\n// This is not absolutely necessary but the logic\\n// will be different in that case.\\n\\nlet rX = rotationX + 180;\\nlet pRX = pRotationX + 180;\\n\\nif ((rX - pRX > 0 && rX - pRX < 270) || rX - pRX < -270) {\\n  rotateDirection = 'clockwise';\\n} else if (rX - pRX < 0 || rX - pRX > 270) {\\n  rotateDirection = 'counter-clockwise';\\n}\\n\\nprint(rotateDirection);\\n</code>\\n</div>\"\n                ],\n                alt: 'no image to display.',\n                itemtype: 'property',\n                name: 'pRotationX',\n                type: 'Number',\n                readonly: '',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 278,\n                description:\n                  '<p>The system variable pRotationY always contains the rotation of the\\ndevice along the y axis in the frame previous to the current frame. Value\\nis represented as 0 to +/-90 degrees.\\n<br><br>\\npRotationY can also be used with rotationY to determine the rotate\\ndirection of the device along the Y-axis.</p>\\n',\n                example: [\n                  \"\\n<div class='norender'>\\n<code>\\n// A simple if statement looking at whether\\n// rotationY - pRotationY < 0 is true or not will be\\n// sufficient for determining the rotate direction\\n// in most cases.\\n\\n// Some extra logic is needed to account for cases where\\n// the angles wrap around.\\nlet rotateDirection = 'clockwise';\\n\\n// Simple range conversion to make things simpler.\\n// This is not absolutely necessary but the logic\\n// will be different in that case.\\n\\nlet rY = rotationY + 180;\\nlet pRY = pRotationY + 180;\\n\\nif ((rY - pRY > 0 && rY - pRY < 270) || rY - pRY < -270) {\\n  rotateDirection = 'clockwise';\\n} else if (rY - pRY < 0 || rY - pRY > 270) {\\n  rotateDirection = 'counter-clockwise';\\n}\\nprint(rotateDirection);\\n</code>\\n</div>\"\n                ],\n                alt: 'no image to display.',\n                itemtype: 'property',\n                name: 'pRotationY',\n                type: 'Number',\n                readonly: '',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 322,\n                description:\n                  '<p>The system variable pRotationZ always contains the rotation of the\\ndevice along the z axis in the frame previous to the current frame. Value\\nis represented as 0 to 359 degrees.\\n<br><br>\\npRotationZ can also be used with rotationZ to determine the rotate\\ndirection of the device along the Z-axis.</p>\\n',\n                example: [\n                  \"\\n<div class='norender'>\\n<code>\\n// A simple if statement looking at whether\\n// rotationZ - pRotationZ < 0 is true or not will be\\n// sufficient for determining the rotate direction\\n// in most cases.\\n\\n// Some extra logic is needed to account for cases where\\n// the angles wrap around.\\nlet rotateDirection = 'clockwise';\\n\\nif (\\n  (rotationZ - pRotationZ > 0 && rotationZ - pRotationZ < 270) ||\\n  rotationZ - pRotationZ < -270\\n) {\\n  rotateDirection = 'clockwise';\\n} else if (rotationZ - pRotationZ < 0 || rotationZ - pRotationZ > 270) {\\n  rotateDirection = 'counter-clockwise';\\n}\\nprint(rotateDirection);\\n</code>\\n</div>\"\n                ],\n                alt: 'no image to display.',\n                itemtype: 'property',\n                name: 'pRotationZ',\n                type: 'Number',\n                readonly: '',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 380,\n                description:\n                  '<p>When a device is rotated, the axis that triggers the <a href=\"#/p5/deviceTurned\">deviceTurned()</a>\\nmethod is stored in the turnAxis variable. The turnAxis variable is only defined within\\nthe scope of deviceTurned().</p>\\n',\n                itemtype: 'property',\n                name: 'turnAxis',\n                type: 'String',\n                readonly: '',\n                example: [\n                  \"\\n<div>\\n<code>\\n// Run this example on a mobile device\\n// Rotate the device by 90 degrees in the\\n// X-axis to change the value.\\n\\nvar value = 0;\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\nfunction deviceTurned() {\\n  if (turnAxis === 'X') {\\n    if (value === 0) {\\n      value = 255;\\n    } else if (value === 255) {\\n      value = 0;\\n    }\\n  }\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  '50x50 black rect in center of canvas. turns white on mobile when device turns\\n50x50 black rect in center of canvas. turns white on mobile when x-axis turns',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 419,\n                description:\n                  '<p>The <a href=\"#/p5/setMoveThreshold\">setMoveThreshold()</a> function is used to set the movement threshold for\\nthe <a href=\"#/p5/deviceMoved\">deviceMoved()</a> function. The default threshold is set to 0.5.</p>\\n',\n                itemtype: 'method',\n                name: 'setMoveThreshold',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>The threshold value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\n// Run this example on a mobile device\\n// You will need to move the device incrementally further\\n// the closer the square\\'s color gets to white in order to change the value.\\n\\nlet value = 0;\\nlet threshold = 0.5;\\nfunction setup() {\\n  setMoveThreshold(threshold);\\n}\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\nfunction deviceMoved() {\\n  value = value + 5;\\n  threshold = threshold + 0.1;\\n  if (value > 255) {\\n    value = 0;\\n    threshold = 30;\\n  }\\n  setMoveThreshold(threshold);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  '50x50 black rect in center of canvas. turns white on mobile when device moves',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 462,\n                description:\n                  '<p>The <a href=\"#/p5/setShakeThreshold\">setShakeThreshold()</a> function is used to set the movement threshold for\\nthe <a href=\"#/p5/deviceShaken\">deviceShaken()</a> function. The default threshold is set to 30.</p>\\n',\n                itemtype: 'method',\n                name: 'setShakeThreshold',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>The threshold value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\n// Run this example on a mobile device\\n// You will need to shake the device more firmly\\n// the closer the box\\'s fill gets to white in order to change the value.\\n\\nlet value = 0;\\nlet threshold = 30;\\nfunction setup() {\\n  setShakeThreshold(threshold);\\n}\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\nfunction deviceMoved() {\\n  value = value + 5;\\n  threshold = threshold + 5;\\n  if (value > 255) {\\n    value = 0;\\n    threshold = 30;\\n  }\\n  setShakeThreshold(threshold);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  '50x50 black rect in center of canvas. turns white on mobile when device\\nis being shaked',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 506,\n                description:\n                  '<p>The <a href=\"#/p5/deviceMoved\">deviceMoved()</a> function is called when the device is moved by more than\\nthe threshold value along X, Y or Z axis. The default threshold is set to 0.5.\\nThe threshold value can be changed using <a href=\"https://p5js.org/reference/#/p5/setMoveThreshold\">setMoveThreshold()</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'deviceMoved',\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\n// Run this example on a mobile device\\n// Move the device around\\n// to change the value.\\n\\nlet value = 0;\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\nfunction deviceMoved() {\\n  value = value + 5;\\n  if (value > 255) {\\n    value = 0;\\n  }\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  '50x50 black rect in center of canvas. turns white on mobile when device moves',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 538,\n                description:\n                  '<p>The <a href=\"#/p5/deviceTurned\">deviceTurned()</a> function is called when the device rotates by\\nmore than 90 degrees continuously.\\n<br><br>\\nThe axis that triggers the <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method is stored in the turnAxis\\nvariable. The <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method can be locked to trigger on any axis:\\nX, Y or Z by comparing the turnAxis variable to &#39;X&#39;, &#39;Y&#39; or &#39;Z&#39;.</p>\\n',\n                itemtype: 'method',\n                name: 'deviceTurned',\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\n// Run this example on a mobile device\\n// Rotate the device by 90 degrees\\n// to change the value.\\n\\nlet value = 0;\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\nfunction deviceTurned() {\\n  if (value === 0) {\\n    value = 255;\\n  } else if (value === 255) {\\n    value = 0;\\n  }\\n}\\n</code>\\n</div>\\n<div>\\n<code>\\n// Run this example on a mobile device\\n// Rotate the device by 90 degrees in the\\n// X-axis to change the value.\\n\\nlet value = 0;\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\nfunction deviceTurned() {\\n  if (turnAxis === \\'X\\') {\\n    if (value === 0) {\\n      value = 255;\\n    } else if (value === 255) {\\n      value = 0;\\n    }\\n  }\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  '50x50 black rect in center of canvas. turns white on mobile when device turns\\n50x50 black rect in center of canvas. turns white on mobile when x-axis turns',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/acceleration.js',\n                line: 597,\n                description:\n                  '<p>The <a href=\"#/p5/deviceShaken\">deviceShaken()</a> function is called when the device total acceleration\\nchanges of accelerationX and accelerationY values is more than\\nthe threshold value. The default threshold is set to 30.\\nThe threshold value can be changed using <a href=\"https://p5js.org/reference/#/p5/setShakeThreshold\">setShakeThreshold()</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'deviceShaken',\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\n// Run this example on a mobile device\\n// Shake the device to change the value.\\n\\nlet value = 0;\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\nfunction deviceShaken() {\\n  value = value + 5;\\n  if (value > 255) {\\n    value = 0;\\n  }\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  '50x50 black rect in center of canvas. turns white on mobile when device shakes',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Acceleration'\n              },\n              {\n                file: 'src/events/keyboard.js',\n                line: 12,\n                description:\n                  '<p>The boolean system variable <a href=\"#/p5/keyIsPressed\">keyIsPressed</a> is true if any key is pressed\\nand false if no keys are pressed.</p>\\n',\n                itemtype: 'property',\n                name: 'keyIsPressed',\n                type: 'Boolean',\n                readonly: '',\n                example: [\n                  '\\n<div>\\n<code>\\nfunction draw() {\\n  if (keyIsPressed === true) {\\n    fill(0);\\n  } else {\\n    fill(255);\\n  }\\n  rect(25, 25, 50, 50);\\n}\\n</code>\\n</div>'\n                ],\n                alt: '50x50 white rect that turns black on keypress.',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Keyboard'\n              },\n              {\n                file: 'src/events/keyboard.js',\n                line: 39,\n                description:\n                  '<p>The system variable key always contains the value of the most recent\\nkey on the keyboard that was typed. To get the proper capitalization, it\\nis best to use it within <a href=\"#/p5/keyTyped\">keyTyped()</a>. For non-ASCII keys, use the <a href=\"#/p5/keyCode\">keyCode</a>\\nvariable.</p>\\n',\n                itemtype: 'property',\n                name: 'key',\n                type: 'String',\n                readonly: '',\n                example: [\n                  '\\n<div><code>\\n// Click any key to display it!\\n// (Not Guaranteed to be Case Sensitive)\\nfunction setup() {\\n  fill(245, 123, 158);\\n  textSize(50);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  text(key, 33, 65); // Display last key pressed.\\n}\\n</code></div>'\n                ],\n                alt: 'canvas displays any key value that is pressed in pink font.',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Keyboard'\n              },\n              {\n                file: 'src/events/keyboard.js',\n                line: 68,\n                description:\n                  '<p>The variable keyCode is used to detect special keys such as BACKSPACE,\\nDELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL, OPTION, ALT, UP_ARROW,\\nDOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.\\nYou can also check for custom keys by looking up the keyCode of any key\\non a site like this: <a href=\"http://keycode.info/\">keycode.info</a>.</p>\\n',\n                itemtype: 'property',\n                name: 'keyCode',\n                type: 'Integer',\n                readonly: '',\n                example: [\n                  \"\\n<div><code>\\nlet fillVal = 126;\\nfunction draw() {\\n  fill(fillVal);\\n  rect(25, 25, 50, 50);\\n}\\n\\nfunction keyPressed() {\\n  if (keyCode === UP_ARROW) {\\n    fillVal = 255;\\n  } else if (keyCode === DOWN_ARROW) {\\n    fillVal = 0;\\n  }\\n  return false; // prevent default\\n}\\n</code></div>\\n<div><code>\\nfunction draw() {}\\nfunction keyPressed() {\\n  background('yellow');\\n  text(`${key} ${keyCode}`, 10, 40);\\n  print(key, ' ', keyCode);\\n  return false; // prevent default\\n}\\n</code></div>\"\n                ],\n                alt:\n                  'Grey rect center. turns white when up arrow pressed and black when down\\nDisplay key pressed and its keyCode in a yellow box',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Keyboard'\n              },\n              {\n                file: 'src/events/keyboard.js',\n                line: 109,\n                description:\n                  '<p>The <a href=\"#/p5/keyPressed\">keyPressed()</a> function is called once every time a key is pressed. The\\nkeyCode for the key that was pressed is stored in the <a href=\"#/p5/keyCode\">keyCode</a> variable.\\n<br><br>\\nFor non-ASCII keys, use the keyCode variable. You can check if the keyCode\\nequals BACKSPACE, DELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL,\\nOPTION, ALT, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.\\n<br><br>\\nFor ASCII keys, the key that was pressed is stored in the key variable. However, it\\ndoes not distinguish between uppercase and lowercase. For this reason, it\\nis recommended to use <a href=\"#/p5/keyTyped\">keyTyped()</a> to read the key variable, in which the\\ncase of the variable will be distinguished.\\n<br><br>\\nBecause of how operating systems handle key repeats, holding down a key\\nmay cause multiple calls to <a href=\"#/p5/keyTyped\">keyTyped()</a> (and <a href=\"#/p5/keyReleased\">keyReleased()</a> as well). The\\nrate of repeat is set by the operating system and how each computer is\\nconfigured.<br><br>\\nBrowsers may have different default\\nbehaviors attached to various key events. To prevent any default\\nbehavior for this event, add &quot;return false&quot; to the end of the method.</p>\\n',\n                itemtype: 'method',\n                name: 'keyPressed',\n                example: [\n                  '\\n<div>\\n<code>\\nlet value = 0;\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\nfunction keyPressed() {\\n  if (value === 0) {\\n    value = 255;\\n  } else {\\n    value = 0;\\n  }\\n}\\n</code>\\n</div>\\n<div>\\n<code>\\nlet value = 0;\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\nfunction keyPressed() {\\n  if (keyCode === LEFT_ARROW) {\\n    value = 255;\\n  } else if (keyCode === RIGHT_ARROW) {\\n    value = 0;\\n  }\\n}\\n</code>\\n</div>\\n<div class=\"norender\">\\n<code>\\nfunction keyPressed() {\\n  // Do something\\n  return false; // prevent any default behaviour\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'black rect center. turns white when key pressed and black when released\\nblack rect center. turns white when left arrow pressed and black when right.',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Keyboard'\n              },\n              {\n                file: 'src/events/keyboard.js',\n                line: 196,\n                description:\n                  '<p>The <a href=\"#/p5/keyReleased\">keyReleased()</a> function is called once every time a key is released.\\nSee <a href=\"#/p5/key\">key</a> and <a href=\"#/p5/keyCode\">keyCode</a> for more information.<br><br>\\nBrowsers may have different default\\nbehaviors attached to various key events. To prevent any default\\nbehavior for this event, add &quot;return false&quot; to the end of the method.</p>\\n',\n                itemtype: 'method',\n                name: 'keyReleased',\n                example: [\n                  '\\n<div>\\n<code>\\nlet value = 0;\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\nfunction keyReleased() {\\n  if (value === 0) {\\n    value = 255;\\n  } else {\\n    value = 0;\\n  }\\n  return false; // prevent any default behavior\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'black rect center. turns white when key pressed and black when pressed again',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Keyboard'\n              },\n              {\n                file: 'src/events/keyboard.js',\n                line: 248,\n                description:\n                  '<p>The <a href=\"#/p5/keyTyped\">keyTyped()</a> function is called once every time a key is pressed, but\\naction keys such as Backspace, Delete, Ctrl, Shift, and Alt are ignored. If you are trying to detect\\na keyCode for one of these keys, use the <a href=\"#/p5/keyPressed\">keyPressed()</a> function instead.\\nThe most recent key typed will be stored in the key variable.\\n<br><br>\\nBecause of how operating systems handle key repeats, holding down a key\\nwill cause multiple calls to <a href=\"#/p5/keyTyped\">keyTyped()</a> (and <a href=\"#/p5/keyReleased\">keyReleased()</a> as well). The\\nrate of repeat is set by the operating system and how each computer is\\nconfigured.<br><br>\\nBrowsers may have different default behaviors attached to various key\\nevents. To prevent any default behavior for this event, add &quot;return false&quot;\\nto the end of the method.</p>\\n',\n                itemtype: 'method',\n                name: 'keyTyped',\n                example: [\n                  \"\\n<div>\\n<code>\\nlet value = 0;\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\nfunction keyTyped() {\\n  if (key === 'a') {\\n    value = 255;\\n  } else if (key === 'b') {\\n    value = 0;\\n  }\\n  // uncomment to prevent any default behavior\\n  // return false;\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  \"black rect center. turns white when 'a' key typed and black when 'b' pressed\",\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Keyboard'\n              },\n              {\n                file: 'src/events/keyboard.js',\n                line: 302,\n                description:\n                  '<p>The onblur function is called when the user is no longer focused\\non the p5 element. Because the keyup events will not fire if the user is\\nnot focused on the element we must assume all keys currently down have\\nbeen released.</p>\\n',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Keyboard'\n              },\n              {\n                file: 'src/events/keyboard.js',\n                line: 312,\n                description:\n                  '<p>The <a href=\"#/p5/keyIsDown\">keyIsDown()</a> function checks if the key is currently down, i.e. pressed.\\nIt can be used if you have an object that moves, and you want several keys\\nto be able to affect its behaviour simultaneously, such as moving a\\nsprite diagonally. You can put in any number representing the keyCode of\\nthe key, or use any of the variable <a href=\"#/p5/keyCode\">keyCode</a> names listed\\n<a href=\"http://p5js.org/reference/#p5/keyCode\">here</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'keyIsDown',\n                params: [\n                  {\n                    name: 'code',\n                    description: '<p>The key to check for.</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'whether key is down or not',\n                  type: 'Boolean'\n                },\n                example: [\n                  '\\n<div><code>\\nlet x = 100;\\nlet y = 100;\\n\\nfunction setup() {\\n  createCanvas(512, 512);\\n  fill(255, 0, 0);\\n}\\n\\nfunction draw() {\\n  if (keyIsDown(LEFT_ARROW)) {\\n    x -= 5;\\n  }\\n\\n  if (keyIsDown(RIGHT_ARROW)) {\\n    x += 5;\\n  }\\n\\n  if (keyIsDown(UP_ARROW)) {\\n    y -= 5;\\n  }\\n\\n  if (keyIsDown(DOWN_ARROW)) {\\n    y += 5;\\n  }\\n\\n  clear();\\n  ellipse(x, y, 50, 50);\\n}\\n</code></div>\\n\\n<div><code>\\nlet diameter = 50;\\n\\nfunction setup() {\\n  createCanvas(512, 512);\\n}\\n\\nfunction draw() {\\n  // 107 and 187 are keyCodes for \"+\"\\n  if (keyIsDown(107) || keyIsDown(187)) {\\n    diameter += 1;\\n  }\\n\\n  // 109 and 189 are keyCodes for \"-\"\\n  if (keyIsDown(109) || keyIsDown(189)) {\\n    diameter -= 1;\\n  }\\n\\n  clear();\\n  fill(255, 0, 0);\\n  ellipse(50, 50, diameter, diameter);\\n}\\n</code></div>'\n                ],\n                alt:\n                  '50x50 red ellipse moves left, right, up and down with arrow presses.\\n50x50 red ellipse gets bigger or smaller when + or - are pressed.',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Keyboard'\n              },\n              {\n                file: 'src/events/mouse.js',\n                line: 22,\n                description:\n                  '<p>The system variable mouseX always contains the current horizontal\\nposition of the mouse, relative to (0, 0) of the canvas. The value at\\nthe top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL.\\nIf touch is used instead of mouse input, mouseX will hold the x value\\nof the most recent touch point.</p>\\n',\n                itemtype: 'property',\n                name: 'mouseX',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  '\\n<div>\\n<code>\\n// Move the mouse across the canvas\\nfunction draw() {\\n  background(244, 248, 252);\\n  line(mouseX, 0, mouseX, 100);\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'horizontal black line moves left and right with mouse x-position',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Mouse'\n              },\n              {\n                file: 'src/events/mouse.js',\n                line: 49,\n                description:\n                  '<p>The system variable mouseY always contains the current vertical\\nposition of the mouse, relative to (0, 0) of the canvas. The value at\\nthe top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL.\\nIf touch is used instead of mouse input, mouseY will hold the y value\\nof the most recent touch point.</p>\\n',\n                itemtype: 'property',\n                name: 'mouseY',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  '\\n<div>\\n<code>\\n// Move the mouse across the canvas\\nfunction draw() {\\n  background(244, 248, 252);\\n  line(0, mouseY, 100, mouseY);\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'vertical black line moves up and down with mouse y-position',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Mouse'\n              },\n              {\n                file: 'src/events/mouse.js',\n                line: 76,\n                description:\n                  '<p>The system variable pmouseX always contains the horizontal position of\\nthe mouse or finger in the frame previous to the current frame, relative to\\n(0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and\\n(-width/2, -height/2) for WebGL. Note: pmouseX will be reset to the current mouseX\\nvalue at the start of each touch event.</p>\\n',\n                itemtype: 'property',\n                name: 'pmouseX',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  \"\\n<div>\\n<code>\\n// Move the mouse across the canvas to leave a trail\\nfunction setup() {\\n  //slow down the frameRate to make it more visible\\n  frameRate(10);\\n}\\n\\nfunction draw() {\\n  background(244, 248, 252);\\n  line(mouseX, mouseY, pmouseX, pmouseY);\\n  print(pmouseX + ' -> ' + mouseX);\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'line trail is created from cursor movements. faster movement make longer line.',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Mouse'\n              },\n              {\n                file: 'src/events/mouse.js',\n                line: 109,\n                description:\n                  '<p>The system variable pmouseY always contains the vertical position of\\nthe mouse or finger in the frame previous to the current frame, relative to\\n(0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and\\n(-width/2, -height/2) for WebGL. Note: pmouseY will be reset to the current mouseY\\nvalue at the start of each touch event.</p>\\n',\n                itemtype: 'property',\n                name: 'pmouseY',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  \"\\n<div>\\n<code>\\nfunction draw() {\\n  background(237, 34, 93);\\n  fill(0);\\n  //draw a square only if the mouse is not moving\\n  if (mouseY === pmouseY && mouseX === pmouseX) {\\n    rect(20, 20, 60, 60);\\n  }\\n\\n  print(pmouseY + ' -> ' + mouseY);\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  '60x60 black rect center, fuchsia background. rect flickers on mouse movement',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Mouse'\n              },\n              {\n                file: 'src/events/mouse.js',\n                line: 141,\n                description:\n                  '<p>The system variable winMouseX always contains the current horizontal\\nposition of the mouse, relative to (0, 0) of the window.</p>\\n',\n                itemtype: 'property',\n                name: 'winMouseX',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  \"\\n<div>\\n<code>\\nlet myCanvas;\\n\\nfunction setup() {\\n  //use a variable to store a pointer to the canvas\\n  myCanvas = createCanvas(100, 100);\\n  const body = document.getElementsByTagName('body')[0];\\n  myCanvas.parent(body);\\n}\\n\\nfunction draw() {\\n  background(237, 34, 93);\\n  fill(0);\\n\\n  //move the canvas to the horizontal mouse position\\n  //relative to the window\\n  myCanvas.position(winMouseX + 1, windowHeight / 2);\\n\\n  //the y of the square is relative to the canvas\\n  rect(20, mouseY, 60, 60);\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  '60x60 black rect y moves with mouse y and fuchsia canvas moves with mouse x',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Mouse'\n              },\n              {\n                file: 'src/events/mouse.js',\n                line: 180,\n                description:\n                  '<p>The system variable winMouseY always contains the current vertical\\nposition of the mouse, relative to (0, 0) of the window.</p>\\n',\n                itemtype: 'property',\n                name: 'winMouseY',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  \"\\n<div>\\n<code>\\nlet myCanvas;\\n\\nfunction setup() {\\n  //use a variable to store a pointer to the canvas\\n  myCanvas = createCanvas(100, 100);\\n  const body = document.getElementsByTagName('body')[0];\\n  myCanvas.parent(body);\\n}\\n\\nfunction draw() {\\n  background(237, 34, 93);\\n  fill(0);\\n\\n  //move the canvas to the vertical mouse position\\n  //relative to the window\\n  myCanvas.position(windowWidth / 2, winMouseY + 1);\\n\\n  //the x of the square is relative to the canvas\\n  rect(mouseX, 20, 60, 60);\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  '60x60 black rect x moves with mouse x and fuchsia canvas y moves with mouse y',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Mouse'\n              },\n              {\n                file: 'src/events/mouse.js',\n                line: 219,\n                description:\n                  '<p>The system variable pwinMouseX always contains the horizontal position\\nof the mouse in the frame previous to the current frame, relative to\\n(0, 0) of the window. Note: pwinMouseX will be reset to the current winMouseX\\nvalue at the start of each touch event.</p>\\n',\n                itemtype: 'property',\n                name: 'pwinMouseX',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  '\\n<div>\\n<code>\\nlet myCanvas;\\n\\nfunction setup() {\\n  //use a variable to store a pointer to the canvas\\n  myCanvas = createCanvas(100, 100);\\n  noStroke();\\n  fill(237, 34, 93);\\n}\\n\\nfunction draw() {\\n  clear();\\n  //the difference between previous and\\n  //current x position is the horizontal mouse speed\\n  let speed = abs(winMouseX - pwinMouseX);\\n  //change the size of the circle\\n  //according to the horizontal speed\\n  ellipse(50, 50, 10 + speed * 5, 10 + speed * 5);\\n  //move the canvas to the mouse position\\n  myCanvas.position(winMouseX + 1, winMouseY + 1);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'fuchsia ellipse moves with mouse x and y. Grows and shrinks with mouse speed',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Mouse'\n              },\n              {\n                file: 'src/events/mouse.js',\n                line: 260,\n                description:\n                  '<p>The system variable pwinMouseY always contains the vertical position of\\nthe mouse in the frame previous to the current frame, relative to (0, 0)\\nof the window. Note: pwinMouseY will be reset to the current winMouseY\\nvalue at the start of each touch event.</p>\\n',\n                itemtype: 'property',\n                name: 'pwinMouseY',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  '\\n<div>\\n<code>\\nlet myCanvas;\\n\\nfunction setup() {\\n  //use a variable to store a pointer to the canvas\\n  myCanvas = createCanvas(100, 100);\\n  noStroke();\\n  fill(237, 34, 93);\\n}\\n\\nfunction draw() {\\n  clear();\\n  //the difference between previous and\\n  //current y position is the vertical mouse speed\\n  let speed = abs(winMouseY - pwinMouseY);\\n  //change the size of the circle\\n  //according to the vertical speed\\n  ellipse(50, 50, 10 + speed * 5, 10 + speed * 5);\\n  //move the canvas to the mouse position\\n  myCanvas.position(winMouseX + 1, winMouseY + 1);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'fuchsia ellipse moves with mouse x and y. Grows and shrinks with mouse speed',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Mouse'\n              },\n              {\n                file: 'src/events/mouse.js',\n                line: 302,\n                description:\n                  '<p>Processing automatically tracks if the mouse button is pressed and which\\nbutton is pressed. The value of the system variable mouseButton is either\\nLEFT, RIGHT, or CENTER depending on which button was pressed last.\\nWarning: different browsers may track mouseButton differently.</p>\\n',\n                itemtype: 'property',\n                name: 'mouseButton',\n                type: 'Constant',\n                readonly: '',\n                example: [\n                  '\\n<div>\\n<code>\\nfunction draw() {\\n  background(237, 34, 93);\\n  fill(0);\\n\\n  if (mouseIsPressed) {\\n    if (mouseButton === LEFT) {\\n      ellipse(50, 50, 50, 50);\\n    }\\n    if (mouseButton === RIGHT) {\\n      rect(25, 25, 50, 50);\\n    }\\n    if (mouseButton === CENTER) {\\n      triangle(23, 75, 50, 20, 78, 75);\\n    }\\n  }\\n\\n  print(mouseButton);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  '50x50 black ellipse appears on center of fuchsia canvas on mouse click/press.',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Mouse'\n              },\n              {\n                file: 'src/events/mouse.js',\n                line: 341,\n                description:\n                  '<p>The boolean system variable mouseIsPressed is true if the mouse is pressed\\nand false if not.</p>\\n',\n                itemtype: 'property',\n                name: 'mouseIsPressed',\n                type: 'Boolean',\n                readonly: '',\n                example: [\n                  '\\n<div>\\n<code>\\nfunction draw() {\\n  background(237, 34, 93);\\n  fill(0);\\n\\n  if (mouseIsPressed) {\\n    ellipse(50, 50, 50, 50);\\n  } else {\\n    rect(25, 25, 50, 50);\\n  }\\n\\n  print(mouseIsPressed);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'black 50x50 rect becomes ellipse with mouse click/press. fuchsia background.',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Mouse'\n              },\n              {\n                file: 'src/events/mouse.js',\n                line: 432,\n                description:\n                  '<p>The <a href=\"#/p5/mouseMoved\">mouseMoved()</a> function is called every time the mouse moves and a mouse\\nbutton is not pressed.<br><br>\\nBrowsers may have different default\\nbehaviors attached to various mouse events. To prevent any default\\nbehavior for this event, add &quot;return false&quot; to the end of the method.</p>\\n',\n                itemtype: 'method',\n                name: 'mouseMoved',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional MouseEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\n// Move the mouse across the page\\n// to change its value\\n\\nlet value = 0;\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\nfunction mouseMoved() {\\n  value = value + 5;\\n  if (value > 255) {\\n    value = 0;\\n  }\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\nfunction mouseMoved() {\\n  ellipse(mouseX, mouseY, 5, 5);\\n  // prevent default\\n  return false;\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\n// returns a MouseEvent object\\n// as a callback argument\\nfunction mouseMoved(event) {\\n  console.log(event);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'black 50x50 rect becomes lighter with mouse movements until white then resets\\nno image displayed',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Mouse'\n              },\n              {\n                file: 'src/events/mouse.js',\n                line: 487,\n                description:\n                  '<p>The <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function is called once every time the mouse moves and\\na mouse button is pressed. If no <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function is defined, the\\n<a href=\"#/p5/touchMoved\">touchMoved()</a> function will be called instead if it is defined.<br><br>\\nBrowsers may have different default\\nbehaviors attached to various mouse events. To prevent any default\\nbehavior for this event, add &quot;return false&quot; to the end of the method.</p>\\n',\n                itemtype: 'method',\n                name: 'mouseDragged',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional MouseEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\n// Drag the mouse across the page\\n// to change its value\\n\\nlet value = 0;\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\nfunction mouseDragged() {\\n  value = value + 5;\\n  if (value > 255) {\\n    value = 0;\\n  }\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\nfunction mouseDragged() {\\n  ellipse(mouseX, mouseY, 5, 5);\\n  // prevent default\\n  return false;\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\n// returns a MouseEvent object\\n// as a callback argument\\nfunction mouseDragged(event) {\\n  console.log(event);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'black 50x50 rect turns lighter with mouse click and drag until white, resets\\nno image displayed',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Mouse'\n              },\n              {\n                file: 'src/events/mouse.js',\n                line: 568,\n                description:\n                  '<p>The <a href=\"#/p5/mousePressed\">mousePressed()</a> function is called once after every time a mouse button\\nis pressed. The mouseButton variable (see the related reference entry)\\ncan be used to determine which button has been pressed. If no\\n<a href=\"#/p5/mousePressed\">mousePressed()</a> function is defined, the <a href=\"#/p5/touchStarted\">touchStarted()</a> function will be\\ncalled instead if it is defined.<br><br>\\nBrowsers may have different default\\nbehaviors attached to various mouse events. To prevent any default\\nbehavior for this event, add &quot;return false&quot; to the end of the method.</p>\\n',\n                itemtype: 'method',\n                name: 'mousePressed',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional MouseEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\n// Click within the image to change\\n// the value of the rectangle\\n\\nlet value = 0;\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\nfunction mousePressed() {\\n  if (value === 0) {\\n    value = 255;\\n  } else {\\n    value = 0;\\n  }\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\nfunction mousePressed() {\\n  ellipse(mouseX, mouseY, 5, 5);\\n  // prevent default\\n  return false;\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\n// returns a MouseEvent object\\n// as a callback argument\\nfunction mousePressed(event) {\\n  console.log(event);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'black 50x50 rect turns white with mouse click/press.\\nno image displayed',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Mouse'\n              },\n              {\n                file: 'src/events/mouse.js',\n                line: 650,\n                description:\n                  '<p>The <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function is called every time a mouse button is\\nreleased. If no <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function is defined, the <a href=\"#/p5/touchEnded\">touchEnded()</a>\\nfunction will be called instead if it is defined.<br><br>\\nBrowsers may have different default\\nbehaviors attached to various mouse events. To prevent any default\\nbehavior for this event, add &quot;return false&quot; to the end of the method.</p>\\n',\n                itemtype: 'method',\n                name: 'mouseReleased',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional MouseEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\n// Click within the image to change\\n// the value of the rectangle\\n// after the mouse has been clicked\\n\\nlet value = 0;\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\nfunction mouseReleased() {\\n  if (value === 0) {\\n    value = 255;\\n  } else {\\n    value = 0;\\n  }\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\nfunction mouseReleased() {\\n  ellipse(mouseX, mouseY, 5, 5);\\n  // prevent default\\n  return false;\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\n// returns a MouseEvent object\\n// as a callback argument\\nfunction mouseReleased(event) {\\n  console.log(event);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'black 50x50 rect turns white with mouse click/press.\\nno image displayed',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Mouse'\n              },\n              {\n                file: 'src/events/mouse.js',\n                line: 728,\n                description:\n                  '<p>The <a href=\"#/p5/mouseClicked\">mouseClicked()</a> function is called once after a mouse button has been\\npressed and then released.<br><br>\\nBrowsers handle clicks differently, so this function is only guaranteed to be\\nrun when the left mouse button is clicked. To handle other mouse buttons\\nbeing pressed or released, see <a href=\"#/p5/mousePressed\">mousePressed()</a> or <a href=\"#/p5/mouseReleased\">mouseReleased()</a>.<br><br>\\nBrowsers may have different default\\nbehaviors attached to various mouse events. To prevent any default\\nbehavior for this event, add &quot;return false&quot; to the end of the method.</p>\\n',\n                itemtype: 'method',\n                name: 'mouseClicked',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional MouseEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\n// Click within the image to change\\n// the value of the rectangle\\n// after the mouse has been clicked\\n\\nlet value = 0;\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\n\\nfunction mouseClicked() {\\n  if (value === 0) {\\n    value = 255;\\n  } else {\\n    value = 0;\\n  }\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\nfunction mouseClicked() {\\n  ellipse(mouseX, mouseY, 5, 5);\\n  // prevent default\\n  return false;\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\n// returns a MouseEvent object\\n// as a callback argument\\nfunction mouseClicked(event) {\\n  console.log(event);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'black 50x50 rect turns white with mouse click/press.\\nno image displayed',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Mouse'\n              },\n              {\n                file: 'src/events/mouse.js',\n                line: 798,\n                description:\n                  '<p>The <a href=\"#/p5/doubleClicked\">doubleClicked()</a> function is executed every time a event\\nlistener has detected a dblclick event which is a part of the\\nDOM L3 specification. The doubleClicked event is fired when a\\npointing device button (usually a mouse&#39;s primary button)\\nis clicked twice on a single element. For more info on the\\ndblclick event refer to mozilla&#39;s documentation here:\\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dblclick\">https://developer.mozilla.org/en-US/docs/Web/Events/dblclick</a></p>\\n',\n                itemtype: 'method',\n                name: 'doubleClicked',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional MouseEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\n// Click within the image to change\\n// the value of the rectangle\\n// after the mouse has been double clicked\\n\\nlet value = 0;\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\n\\nfunction doubleClicked() {\\n  if (value === 0) {\\n    value = 255;\\n  } else {\\n    value = 0;\\n  }\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\nfunction doubleClicked() {\\n  ellipse(mouseX, mouseY, 5, 5);\\n  // prevent default\\n  return false;\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\n// returns a MouseEvent object\\n// as a callback argument\\nfunction doubleClicked(event) {\\n  console.log(event);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'black 50x50 rect turns white with mouse doubleClick/press.\\nno image displayed',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Mouse'\n              },\n              {\n                file: 'src/events/mouse.js',\n                line: 883,\n                description:\n                  '<p>The function <a href=\"#/p5/mouseWheel\">mouseWheel()</a> is executed every time a vertical mouse wheel\\nevent is detected either triggered by an actual mouse wheel or by a\\ntouchpad.<br><br>\\nThe event.delta property returns the amount the mouse wheel\\nhave scrolled. The values can be positive or negative depending on the\\nscroll direction (on OS X with &quot;natural&quot; scrolling enabled, the signs\\nare inverted).<br><br>\\nBrowsers may have different default behaviors attached to various\\nmouse events. To prevent any default behavior for this event, add\\n&quot;return false&quot; to the end of the method.<br><br>\\nDue to the current support of the &quot;wheel&quot; event on Safari, the function\\nmay only work as expected if &quot;return false&quot; is included while using Safari.</p>\\n',\n                itemtype: 'method',\n                name: 'mouseWheel',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional WheelEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\nlet pos = 25;\\n\\nfunction draw() {\\n  background(237, 34, 93);\\n  fill(0);\\n  rect(25, pos, 50, 50);\\n}\\n\\nfunction mouseWheel(event) {\\n  print(event.delta);\\n  //move the square according to the vertical scroll amount\\n  pos += event.delta;\\n  //uncomment to block page scrolling\\n  //return false;\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'black 50x50 rect moves up and down with vertical scroll. fuchsia background',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Mouse'\n              },\n              {\n                file: 'src/events/touch.js',\n                line: 12,\n                description:\n                  '<p>The system variable touches[] contains an array of the positions of all\\ncurrent touch points, relative to (0, 0) of the canvas, and IDs identifying a\\nunique touch as it moves. Each element in the array is an object with x, y,\\nand id properties.</p>\\n<p>The touches[] array is not supported on Safari and IE on touch-based\\ndesktops (laptops).</p>\\n',\n                itemtype: 'property',\n                name: 'touches',\n                type: 'Object[]',\n                readonly: '',\n                example: [\n                  \"\\n<div>\\n<code>\\n// On a touchscreen device, touch\\n// the canvas using one or more fingers\\n// at the same time\\nfunction draw() {\\n  clear();\\n  let display = touches.length + ' touches';\\n  text(display, 5, 10);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'Number of touches currently registered are displayed on the canvas',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Touch'\n              },\n              {\n                file: 'src/events/touch.js',\n                line: 74,\n                description:\n                  '<p>The touchStarted() function is called once after every time a touch is\\nregistered. If no <a href=\"#/p5/touchStarted\">touchStarted()</a> function is defined, the <a href=\"#/p5/mousePressed\">mousePressed()</a>\\nfunction will be called instead if it is defined.<br><br>\\nBrowsers may have different default behaviors attached to various touch\\nevents. To prevent any default behavior for this event, add &quot;return false&quot;\\nto the end of the method.</p>\\n',\n                itemtype: 'method',\n                name: 'touchStarted',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional TouchEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\n// Touch within the image to change\\n// the value of the rectangle\\n\\nlet value = 0;\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\nfunction touchStarted() {\\n  if (value === 0) {\\n    value = 255;\\n  } else {\\n    value = 0;\\n  }\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\nfunction touchStarted() {\\n  ellipse(mouseX, mouseY, 5, 5);\\n  // prevent default\\n  return false;\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\n// returns a TouchEvent object\\n// as a callback argument\\nfunction touchStarted(event) {\\n  console.log(event);\\n}\\n</code>\\n</div>'\n                ],\n                alt: '50x50 black rect turns white with touch event.\\nno image displayed',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Touch'\n              },\n              {\n                file: 'src/events/touch.js',\n                line: 154,\n                description:\n                  '<p>The <a href=\"#/p5/touchMoved\">touchMoved()</a> function is called every time a touch move is registered.\\nIf no <a href=\"#/p5/touchMoved\">touchMoved()</a> function is defined, the <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function will\\nbe called instead if it is defined.<br><br>\\nBrowsers may have different default behaviors attached to various touch\\nevents. To prevent any default behavior for this event, add &quot;return false&quot;\\nto the end of the method.</p>\\n',\n                itemtype: 'method',\n                name: 'touchMoved',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional TouchEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\n// Move your finger across the page\\n// to change its value\\n\\nlet value = 0;\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\nfunction touchMoved() {\\n  value = value + 5;\\n  if (value > 255) {\\n    value = 0;\\n  }\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\nfunction touchMoved() {\\n  ellipse(mouseX, mouseY, 5, 5);\\n  // prevent default\\n  return false;\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\n// returns a TouchEvent object\\n// as a callback argument\\nfunction touchMoved(event) {\\n  console.log(event);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  '50x50 black rect turns lighter with touch until white. resets\\nno image displayed',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Touch'\n              },\n              {\n                file: 'src/events/touch.js',\n                line: 227,\n                description:\n                  '<p>The <a href=\"#/p5/touchEnded\">touchEnded()</a> function is called every time a touch ends. If no\\n<a href=\"#/p5/touchEnded\">touchEnded()</a> function is defined, the <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function will be\\ncalled instead if it is defined.<br><br>\\nBrowsers may have different default behaviors attached to various touch\\nevents. To prevent any default behavior for this event, add &quot;return false&quot;\\nto the end of the method.</p>\\n',\n                itemtype: 'method',\n                name: 'touchEnded',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional TouchEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\n// Release touch within the image to\\n// change the value of the rectangle\\n\\nlet value = 0;\\nfunction draw() {\\n  fill(value);\\n  rect(25, 25, 50, 50);\\n}\\nfunction touchEnded() {\\n  if (value === 0) {\\n    value = 255;\\n  } else {\\n    value = 0;\\n  }\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\nfunction touchEnded() {\\n  ellipse(mouseX, mouseY, 5, 5);\\n  // prevent default\\n  return false;\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\n// returns a TouchEvent object\\n// as a callback argument\\nfunction touchEnded(event) {\\n  console.log(event);\\n}\\n</code>\\n</div>'\n                ],\n                alt: '50x50 black rect turns white with touch.\\nno image displayed',\n                class: 'p5',\n                module: 'Events',\n                submodule: 'Touch'\n              },\n              {\n                file: 'src/image/filters.js',\n                line: 3,\n                description:\n                  '<p>This module defines the filters for use with image buffers.</p>\\n<p>This module is basically a collection of functions stored in an object\\nas opposed to modules. The functions are destructive, modifying\\nthe passed in canvas rather than creating a copy.</p>\\n<p>Generally speaking users of this module will use the Filters.apply method\\non a canvas to create an effect.</p>\\n<p>A number of functions are borrowed/adapted from\\n<a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">http://www.html5rocks.com/en/tutorials/canvas/imagefilters/</a>\\nor the java processing implementation.</p>\\n',\n                class: 'p5',\n                module: 'Events'\n              },\n              {\n                file: 'src/image/image.js',\n                line: 8,\n                description:\n                  '<p>This module defines the p5 methods for the <a href=\"#/p5.Image\">p5.Image</a> class\\nfor drawing images to the main display canvas.</p>\\n',\n                class: 'p5',\n                module: 'Image',\n                submodule: 'Image'\n              },\n              {\n                file: 'src/image/image.js',\n                line: 22,\n                description:\n                  '<p>Creates a new <a href=\"#/p5.Image\">p5.Image</a> (the datatype for storing images). This provides a\\nfresh buffer of pixels to play with. Set the size of the buffer with the\\nwidth and height parameters.\\n<br><br>\\n.<a href=\"#/p5.Image/pixels\">pixels</a> gives access to an array containing the values for all the pixels\\nin the display window.\\nThese values are numbers. This array is the size (including an appropriate\\nfactor for the <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4,\\nrepresenting the R, G, B, A values in order for each pixel, moving from\\nleft to right across each row, then down each column. See .<a href=\"#/p5.Image/pixels\">pixels</a> for\\nmore info. It may also be simpler to use <a href=\"#/p5.Image/set\">set()</a> or <a href=\"#/p5.Image/get\">get()</a>.\\n<br><br>\\nBefore accessing the pixels of an image, the data must loaded with the\\n<a href=\"#/p5.Image/loadPixels\">loadPixels()</a> function. After the array data has been modified, the\\n<a href=\"#/p5.Image/updatePixels\">updatePixels()</a> function must be run to update the changes.</p>\\n',\n                itemtype: 'method',\n                name: 'createImage',\n                params: [\n                  {\n                    name: 'width',\n                    description: '<p>width in pixels</p>\\n',\n                    type: 'Integer'\n                  },\n                  {\n                    name: 'height',\n                    description: '<p>height in pixels</p>\\n',\n                    type: 'Integer'\n                  }\n                ],\n                return: {\n                  description: 'the <a href=\"#/p5.Image\">p5.Image</a> object',\n                  type: 'p5.Image'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\nlet img = createImage(66, 66);\\nimg.loadPixels();\\nfor (let i = 0; i < img.width; i++) {\\n  for (let j = 0; j < img.height; j++) {\\n    img.set(i, j, color(0, 90, 102));\\n  }\\n}\\nimg.updatePixels();\\nimage(img, 17, 17);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet img = createImage(66, 66);\\nimg.loadPixels();\\nfor (let i = 0; i < img.width; i++) {\\n  for (let j = 0; j < img.height; j++) {\\n    img.set(i, j, color(0, 90, 102, (i % img.width) * 2));\\n  }\\n}\\nimg.updatePixels();\\nimage(img, 17, 17);\\nimage(img, 34, 34);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet pink = color(255, 102, 204);\\nlet img = createImage(66, 66);\\nimg.loadPixels();\\nlet d = pixelDensity();\\nlet halfImage = 4 * (img.width * d) * (img.height / 2 * d);\\nfor (let i = 0; i < halfImage; i += 4) {\\n  img.pixels[i] = red(pink);\\n  img.pixels[i + 1] = green(pink);\\n  img.pixels[i + 2] = blue(pink);\\n  img.pixels[i + 3] = alpha(pink);\\n}\\nimg.updatePixels();\\nimage(img, 17, 17);\\n</code>\\n</div>'\n                ],\n                alt:\n                  '66x66 dark turquoise rect in center of canvas.\\n2 gradated dark turquoise rects fade left. 1 center 1 bottom right of canvas\\nno image displayed',\n                class: 'p5',\n                module: 'Image',\n                submodule: 'Image'\n              },\n              {\n                file: 'src/image/image.js',\n                line: 102,\n                description:\n                  '<p>Save the current canvas as an image. The browser will either save the\\nfile immediately, or prompt the user with a dialogue window.</p>\\n',\n                itemtype: 'method',\n                name: 'saveCanvas',\n                example: [\n                  \"\\n <div class='norender notest'><code>\\n function setup() {\\n let c = createCanvas(100, 100);\\n background(255, 0, 0);\\n saveCanvas(c, 'myCanvas', 'jpg');\\n }\\n </code></div>\\n <div class='norender notest'><code>\\n // note that this example has the same result as above\\n // if no canvas is specified, defaults to main canvas\\n function setup() {\\n let c = createCanvas(100, 100);\\n background(255, 0, 0);\\n saveCanvas('myCanvas', 'jpg');\\n\\n // all of the following are valid\\n saveCanvas(c, 'myCanvas', 'jpg');\\n saveCanvas(c, 'myCanvas.jpg');\\n saveCanvas(c, 'myCanvas');\\n saveCanvas(c);\\n saveCanvas('myCanvas', 'png');\\n saveCanvas('myCanvas');\\n saveCanvas();\\n }\\n </code></div>\"\n                ],\n                alt: 'no image displayed\\n no image displayed\\n no image displayed',\n                class: 'p5',\n                module: 'Image',\n                submodule: 'Image',\n                overloads: [\n                  {\n                    line: 102,\n                    params: [\n                      {\n                        name: 'selectedCanvas',\n                        description:\n                          '<p>a variable\\n                                representing a specific html5 canvas (optional)</p>\\n',\n                        type: 'p5.Element|HTMLCanvasElement'\n                      },\n                      {\n                        name: 'filename',\n                        description: '',\n                        type: 'String',\n                        optional: true\n                      },\n                      {\n                        name: 'extension',\n                        description: '<p>&#39;jpg&#39; or &#39;png&#39;</p>\\n',\n                        type: 'String',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    line: 144,\n                    params: [\n                      {\n                        name: 'filename',\n                        description: '',\n                        type: 'String',\n                        optional: true\n                      },\n                      {\n                        name: 'extension',\n                        description: '',\n                        type: 'String',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              {\n                file: 'src/image/image.js',\n                line: 195,\n                description:\n                  '<p>Capture a sequence of frames that can be used to create a movie.\\nAccepts a callback. For example, you may wish to send the frames\\nto a server where they can be stored or converted into a movie.\\nIf no callback is provided, the browser will pop up save dialogues in an\\nattempt to download all of the images that have just been created. With the\\ncallback provided the image data isn&#39;t saved by default but instead passed\\nas an argument to the callback function as an array of objects, with the\\nsize of array equal to the total number of frames.</p>\\n<p>Note that <a href=\"#/p5.Image/saveFrames\">saveFrames()</a> will only save the first 15 frames of an animation.\\nTo export longer animations, you might look into a library like\\n<a href=\"https://github.com/spite/ccapture.js/\">ccapture.js</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'saveFrames',\n                params: [\n                  {\n                    name: 'filename',\n                    description: '',\n                    type: 'String'\n                  },\n                  {\n                    name: 'extension',\n                    description: '<p>&#39;jpg&#39; or &#39;png&#39;</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'duration',\n                    description: '<p>Duration in seconds to save the frames for.</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'framerate',\n                    description: '<p>Framerate to save the frames in.</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>A callback function that will be executed\\n                                to handle the image data. This function\\n                                should accept an array as argument. The\\n                                array will contain the specified number of\\n                                frames of objects. Each object has three\\n                                properties: imageData - an\\n                                image/octet-stream, filename and extension.</p>\\n',\n                    type: 'Function(Array)',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\n function draw() {\\n background(mouseX);\\n }\\n\\n function mousePressed() {\\n saveFrames('out', 'png', 1, 25, data => {\\n   print(data);\\n });\\n }\\n</code></div>\"\n                ],\n                alt: 'canvas background goes from light to dark with mouse x.',\n                class: 'p5',\n                module: 'Image',\n                submodule: 'Image'\n              },\n              {\n                file: 'src/image/loading_displaying.js',\n                line: 17,\n                description:\n                  '<p>Loads an image from a path and creates a <a href=\"#/p5.Image\">p5.Image</a> from it.\\n<br><br>\\nThe image may not be immediately available for rendering\\nIf you want to ensure that the image is ready before doing\\nanything with it, place the <a href=\"#/p5/loadImage\">loadImage()</a> call in <a href=\"#/p5/preload\">preload()</a>.\\nYou may also supply a callback function to handle the image when it&#39;s ready.\\n<br><br>\\nThe path to the image should be relative to the HTML file\\nthat links in your sketch. Loading an image from a URL or other\\nremote location may be blocked due to your browser&#39;s built-in\\nsecurity.</p>\\n',\n                itemtype: 'method',\n                name: 'loadImage',\n                params: [\n                  {\n                    name: 'path',\n                    description: '<p>Path of the image to be loaded</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'successCallback',\n                    description:\n                      '<p>Function to be called once\\n                               the image is loaded. Will be passed the\\n                               <a href=\"#/p5.Image\">p5.Image</a>.</p>\\n',\n                    type: 'function(p5.Image)',\n                    optional: true\n                  },\n                  {\n                    name: 'failureCallback',\n                    description:\n                      '<p>called with event error if\\n                               the image fails to load.</p>\\n',\n                    type: 'Function(Event)',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'the <a href=\"#/p5.Image\">p5.Image</a> object',\n                  type: 'p5.Image'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/laDefense.jpg');\\n}\\nfunction setup() {\\n  image(img, 0, 0);\\n}\\n</code>\\n</div>\\n<div>\\n<code>\\nfunction setup() {\\n  // here we use a callback to display the image after loading\\n  loadImage('assets/laDefense.jpg', img => {\\n    image(img, 0, 0);\\n  });\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'image of the underside of a white umbrella and grided ceililng above\\nimage of the underside of a white umbrella and grided ceililng above',\n                class: 'p5',\n                module: 'Image',\n                submodule: 'Loading & Displaying'\n              },\n              {\n                file: 'src/image/loading_displaying.js',\n                line: 127,\n                description:\n                  '<p>Draw an image to the p5.js canvas.</p>\\n<p>This function can be used with different numbers of parameters. The\\nsimplest use requires only three parameters: img, x, and y—where (x, y) is\\nthe position of the image. Two more parameters can optionally be added to\\nspecify the width and height of the image.</p>\\n<p>This function can also be used with all eight Number parameters. To\\ndifferentiate between all these parameters, p5.js uses the language of\\n&quot;destination rectangle&quot; (which corresponds to &quot;dx&quot;, &quot;dy&quot;, etc.) and &quot;source\\nimage&quot; (which corresponds to &quot;sx&quot;, &quot;sy&quot;, etc.) below. Specifying the\\n&quot;source image&quot; dimensions can be useful when you want to display a\\nsubsection of the source image instead of the whole thing. Here&#39;s a diagram\\nto explain further:\\n<img src=\"assets/drawImage.png\"></img></p>\\n',\n                itemtype: 'method',\n                name: 'image',\n                example: [\n                  \"\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/laDefense.jpg');\\n}\\nfunction setup() {\\n  // Top-left corner of the img is at (0, 0)\\n  // Width and height are the img's original width and height\\n  image(img, 0, 0);\\n}\\n</code>\\n</div>\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/laDefense.jpg');\\n}\\nfunction setup() {\\n  background(50);\\n  // Top-left corner of the img is at (10, 10)\\n  // Width and height are 50 x 50\\n  image(img, 10, 10, 50, 50);\\n}\\n</code>\\n</div>\\n<div>\\n<code>\\nfunction setup() {\\n  // Here, we use a callback to display the image after loading\\n  loadImage('assets/laDefense.jpg', img => {\\n    image(img, 0, 0);\\n  });\\n}\\n</code>\\n</div>\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/gradient.png');\\n}\\nfunction setup() {\\n  // 1. Background image\\n  // Top-left corner of the img is at (0, 0)\\n  // Width and height are the img's original width and height, 100 x 100\\n  image(img, 0, 0);\\n  // 2. Top right image\\n  // Top-left corner of destination rectangle is at (50, 0)\\n  // Destination rectangle width and height are 40 x 20\\n  // The next parameters are relative to the source image:\\n  // - Starting at position (50, 50) on the source image, capture a 50 x 50\\n  // subsection\\n  // - Draw this subsection to fill the dimensions of the destination rectangle\\n  image(img, 50, 0, 40, 20, 50, 50, 50, 50);\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'image of the underside of a white umbrella and gridded ceiling above\\nimage of the underside of a white umbrella and gridded ceiling above',\n                class: 'p5',\n                module: 'Image',\n                submodule: 'Loading & Displaying',\n                overloads: [\n                  {\n                    line: 127,\n                    params: [\n                      {\n                        name: 'img',\n                        description: '<p>the image to display</p>\\n',\n                        type: 'p5.Image|p5.Element'\n                      },\n                      {\n                        name: 'x',\n                        description:\n                          '<p>the x-coordinate of the top-left corner of the image</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description:\n                          '<p>the y-coordinate of the top-left corner of the image</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'width',\n                        description: '<p>the width to draw the image</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'height',\n                        description: '<p>the height to draw the image</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    line: 215,\n                    params: [\n                      {\n                        name: 'img',\n                        description: '',\n                        type: 'p5.Image|p5.Element'\n                      },\n                      {\n                        name: 'dx',\n                        description:\n                          '<p>the x-coordinate of the destination\\n                          rectangle in which to draw the source image</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'dy',\n                        description:\n                          '<p>the y-coordinate of the destination\\n                          rectangle in which to draw the source image</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'dWidth',\n                        description: '<p>the width of the destination rectangle</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'dHeight',\n                        description: '<p>the height of the destination rectangle</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'sx',\n                        description:\n                          '<p>the x-coordinate of the subsection of the source\\nimage to draw into the destination rectangle</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'sy',\n                        description:\n                          '<p>the y-coordinate of the subsection of the source\\nimage to draw into the destination rectangle</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'sWidth',\n                        description:\n                          '<p>the width of the subsection of the\\n                          source image to draw into the destination\\n                          rectangle</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'sHeight',\n                        description:\n                          '<p>the height of the subsection of the\\n                           source image to draw into the destination rectangle</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              {\n                file: 'src/image/loading_displaying.js',\n                line: 298,\n                description:\n                  '<p>Sets the fill value for displaying images. Images can be tinted to\\nspecified colors or made transparent by including an alpha value.\\n<br><br>\\nTo apply transparency to an image without affecting its color, use\\nwhite as the tint color and specify an alpha value. For instance,\\ntint(255, 128) will make an image 50% transparent (assuming the default\\nalpha range of 0-255, which can be changed with <a href=\"#/p5/colorMode\">colorMode()</a>).\\n<br><br>\\nThe value for the gray parameter must be less than or equal to the current\\nmaximum value as specified by <a href=\"#/p5/colorMode\">colorMode()</a>. The default maximum value is\\n255.</p>\\n',\n                itemtype: 'method',\n                name: 'tint',\n                example: [\n                  \"\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/laDefense.jpg');\\n}\\nfunction setup() {\\n  image(img, 0, 0);\\n  tint(0, 153, 204); // Tint blue\\n  image(img, 50, 0);\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/laDefense.jpg');\\n}\\nfunction setup() {\\n  image(img, 0, 0);\\n  tint(0, 153, 204, 126); // Tint blue and set transparency\\n  image(img, 50, 0);\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/laDefense.jpg');\\n}\\nfunction setup() {\\n  image(img, 0, 0);\\n  tint(255, 126); // Apply transparency without changing color\\n  image(img, 50, 0);\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  '2 side by side images of umbrella and ceiling, one image with blue tint\\nImages of umbrella and ceiling, one half of image with blue tint\\n2 side by side images of umbrella and ceiling, one image translucent',\n                class: 'p5',\n                module: 'Image',\n                submodule: 'Loading & Displaying',\n                overloads: [\n                  {\n                    line: 298,\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value relative to\\n                                the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>green or saturation value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description:\n                          '<p>blue or brightness value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    line: 371,\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>a color string</p>\\n',\n                        type: 'String'\n                      }\n                    ]\n                  },\n                  {\n                    line: 376,\n                    params: [\n                      {\n                        name: 'gray',\n                        description: '<p>a gray value</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    line: 382,\n                    params: [\n                      {\n                        name: 'values',\n                        description:\n                          '<p>an array containing the red,green,blue &amp;\\n                                and alpha components of the color</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ]\n                  },\n                  {\n                    line: 388,\n                    params: [\n                      {\n                        name: 'color',\n                        description: '<p>the tint color</p>\\n',\n                        type: 'p5.Color'\n                      }\n                    ]\n                  }\n                ]\n              },\n              {\n                file: 'src/image/loading_displaying.js',\n                line: 398,\n                description:\n                  '<p>Removes the current fill value for displaying images and reverts to\\ndisplaying images with their original hues.</p>\\n',\n                itemtype: 'method',\n                name: 'noTint',\n                example: [\n                  \"\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/bricks.jpg');\\n}\\nfunction setup() {\\n  tint(0, 153, 204); // Tint blue\\n  image(img, 0, 0);\\n  noTint(); // Disable tint\\n  image(img, 50, 0);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: '2 side by side images of bricks, left image with blue tint',\n                class: 'p5',\n                module: 'Image',\n                submodule: 'Loading & Displaying'\n              },\n              {\n                file: 'src/image/loading_displaying.js',\n                line: 464,\n                description:\n                  '<p>Set image mode. Modifies the location from which images are drawn by\\nchanging the way in which parameters given to <a href=\"#/p5/image\">image()</a> are interpreted.\\nThe default mode is imageMode(CORNER), which interprets the second and\\nthird parameters of <a href=\"#/p5/image\">image()</a> as the upper-left corner of the image. If\\ntwo additional parameters are specified, they are used to set the image&#39;s\\nwidth and height.\\n<br><br>\\nimageMode(CORNERS) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a>\\nas the location of one corner, and the fourth and fifth parameters as the\\nopposite corner.\\n<br><br>\\nimageMode(CENTER) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a>\\nas the image&#39;s center point. If two additional parameters are specified,\\nthey are used to set the image&#39;s width and height.</p>\\n',\n                itemtype: 'method',\n                name: 'imageMode',\n                params: [\n                  {\n                    name: 'mode',\n                    description: '<p>either CORNER, CORNERS, or CENTER</p>\\n',\n                    type: 'Constant'\n                  }\n                ],\n                example: [\n                  \"\\n\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/bricks.jpg');\\n}\\nfunction setup() {\\n  imageMode(CORNER);\\n  image(img, 10, 10, 50, 50);\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/bricks.jpg');\\n}\\nfunction setup() {\\n  imageMode(CORNERS);\\n  image(img, 10, 10, 90, 40);\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/bricks.jpg');\\n}\\nfunction setup() {\\n  imageMode(CENTER);\\n  image(img, 50, 50, 80, 80);\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'small square image of bricks\\nhorizontal rectangle image of bricks\\nlarge square image of bricks',\n                class: 'p5',\n                module: 'Image',\n                submodule: 'Loading & Displaying'\n              },\n              {\n                file: 'src/image/p5.Image.js',\n                line: 9,\n                description:\n                  '<p>This module defines the <a href=\"#/p5.Image\">p5.Image</a> class and P5 methods for\\ndrawing images to the main display canvas.</p>\\n',\n                class: 'p5.Image',\n                module: 'Image',\n                submodule: 'Image'\n              },\n              {\n                file: 'src/image/p5.Image.js',\n                line: 90,\n                description: '<p>Image width.</p>\\n',\n                itemtype: 'property',\n                name: 'width',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  \"\\n<div><code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/rockies.jpg');\\n}\\n\\nfunction setup() {\\n  createCanvas(100, 100);\\n  image(img, 0, 0);\\n  for (let i = 0; i < img.width; i++) {\\n    let c = img.get(i, img.height / 2);\\n    stroke(c);\\n    line(i, height / 2, i, height);\\n  }\\n}\\n</code></div>\"\n                ],\n                alt:\n                  'rocky mountains in top and horizontal lines in corresponding colors in bottom.',\n                class: 'p5.Image',\n                module: 'Image',\n                submodule: 'Image'\n              },\n              {\n                file: 'src/image/p5.Image.js',\n                line: 117,\n                description: '<p>Image height.</p>\\n',\n                itemtype: 'property',\n                name: 'height',\n                type: 'Number',\n                readonly: '',\n                example: [\n                  \"\\n<div><code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/rockies.jpg');\\n}\\n\\nfunction setup() {\\n  createCanvas(100, 100);\\n  image(img, 0, 0);\\n  for (let i = 0; i < img.height; i++) {\\n    let c = img.get(img.width / 2, i);\\n    stroke(c);\\n    line(0, i, width / 2, i);\\n  }\\n}\\n</code></div>\"\n                ],\n                alt:\n                  'rocky mountains on right and vertical lines in corresponding colors on left.',\n                class: 'p5.Image',\n                module: 'Image',\n                submodule: 'Image'\n              },\n              {\n                file: 'src/image/p5.Image.js',\n                line: 153,\n                description:\n                  '<p>Array containing the values for all the pixels in the display window.\\nThese values are numbers. This array is the size (include an appropriate\\nfactor for pixelDensity) of the display window x4,\\nrepresenting the R, G, B, A values in order for each pixel, moving from\\nleft to right across each row, then down each column. Retina and other\\nhigh denisty displays may have more pixels (by a factor of\\npixelDensity^2).\\nFor example, if the image is 100x100 pixels, there will be 40,000. With\\npixelDensity = 2, there will be 160,000. The first four values\\n(indices 0-3) in the array will be the R, G, B, A values of the pixel at\\n(0, 0). The second four values (indices 4-7) will contain the R, G, B, A\\nvalues of the pixel at (1, 0). More generally, to set values for a pixel\\nat (x, y):</p>\\n<pre><code class=\"lang-javascript\">let d = pixelDensity();\\nfor (let i = 0; i &lt; d; i++) {\\n  for (let j = 0; j &lt; d; j++) {\\n    // loop over\\n    index = 4 * ((y * d + j) * width * d + (x * d + i));\\n    pixels[index] = r;\\n    pixels[index+1] = g;\\n    pixels[index+2] = b;\\n    pixels[index+3] = a;\\n  }\\n}\\n</code></pre>\\n<p><br><br>\\nBefore accessing this array, the data must loaded with the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a>\\nfunction. After the array data has been modified, the <a href=\"#/p5.Image/updatePixels\">updatePixels()</a>\\nfunction must be run to update the changes.</p>\\n',\n                itemtype: 'property',\n                name: 'pixels',\n                type: 'Number[]',\n                example: [\n                  '\\n<div>\\n<code>\\nlet img = createImage(66, 66);\\nimg.loadPixels();\\nfor (let i = 0; i < img.width; i++) {\\n  for (let j = 0; j < img.height; j++) {\\n    img.set(i, j, color(0, 90, 102));\\n  }\\n}\\nimg.updatePixels();\\nimage(img, 17, 17);\\n</code>\\n</div>\\n<div>\\n<code>\\nlet pink = color(255, 102, 204);\\nlet img = createImage(66, 66);\\nimg.loadPixels();\\nfor (let i = 0; i < 4 * (width * height / 2); i += 4) {\\n  img.pixels[i] = red(pink);\\n  img.pixels[i + 1] = green(pink);\\n  img.pixels[i + 2] = blue(pink);\\n  img.pixels[i + 3] = alpha(pink);\\n}\\nimg.updatePixels();\\nimage(img, 17, 17);\\n</code>\\n</div>'\n                ],\n                alt:\n                  '66x66 turquoise rect in center of canvas\\n66x66 pink rect in center of canvas',\n                class: 'p5.Image',\n                module: 'Image',\n                submodule: 'Image'\n              },\n              {\n                file: 'src/image/p5.Image.js',\n                line: 223,\n                description: '<p>Helper fxn for sharing pixel methods</p>\\n',\n                class: 'p5.Image',\n                module: 'Image',\n                submodule: 'Image'\n              },\n              {\n                file: 'src/image/p5.Image.js',\n                line: 232,\n                description:\n                  '<p>Loads the pixels data for this image into the [pixels] attribute.</p>\\n',\n                itemtype: 'method',\n                name: 'loadPixels',\n                example: [\n                  \"\\n<div><code>\\nlet myImage;\\nlet halfImage;\\n\\nfunction preload() {\\n  myImage = loadImage('assets/rockies.jpg');\\n}\\n\\nfunction setup() {\\n  myImage.loadPixels();\\n  halfImage = 4 * myImage.width * myImage.height / 2;\\n  for (let i = 0; i < halfImage; i++) {\\n    myImage.pixels[i + halfImage] = myImage.pixels[i];\\n  }\\n  myImage.updatePixels();\\n}\\n\\nfunction draw() {\\n  image(myImage, 0, 0, width, height);\\n}\\n</code></div>\"\n                ],\n                alt: '2 images of rocky mountains vertically stacked',\n                class: 'p5.Image',\n                module: 'Image',\n                submodule: 'Image'\n              },\n              {\n                file: 'src/image/p5.Image.js',\n                line: 268,\n                description:\n                  '<p>Updates the backing canvas for this image with the contents of\\nthe [pixels] array.</p>\\n',\n                itemtype: 'method',\n                name: 'updatePixels',\n                example: [\n                  \"\\n<div><code>\\nlet myImage;\\nlet halfImage;\\n\\nfunction preload() {\\n  myImage = loadImage('assets/rockies.jpg');\\n}\\n\\nfunction setup() {\\n  myImage.loadPixels();\\n  halfImage = 4 * myImage.width * myImage.height / 2;\\n  for (let i = 0; i < halfImage; i++) {\\n    myImage.pixels[i + halfImage] = myImage.pixels[i];\\n  }\\n  myImage.updatePixels();\\n}\\n\\nfunction draw() {\\n  image(myImage, 0, 0, width, height);\\n}\\n</code></div>\"\n                ],\n                alt: '2 images of rocky mountains vertically stacked',\n                class: 'p5.Image',\n                module: 'Image',\n                submodule: 'Image',\n                overloads: [\n                  {\n                    line: 268,\n                    params: [\n                      {\n                        name: 'x',\n                        description:\n                          '<p>x-offset of the target update area for the\\n                             underlying canvas</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'y',\n                        description:\n                          '<p>y-offset of the target update area for the\\n                             underlying canvas</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'w',\n                        description:\n                          '<p>height of the target update area for the\\n                             underlying canvas</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'h',\n                        description:\n                          '<p>height of the target update area for the\\n                             underlying canvas</p>\\n',\n                        type: 'Integer'\n                      }\n                    ]\n                  },\n                  {\n                    line: 308,\n                    params: []\n                  }\n                ]\n              },\n              {\n                file: 'src/image/p5.Image.js',\n                line: 316,\n                description:\n                  '<p>Get a region of pixels from an image.</p>\\n<p>If no params are passed, the whole image is returned.\\nIf x and y are the only params passed a single pixel is extracted.\\nIf all params are passed a rectangle region is extracted and a <a href=\"#/p5.Image\">p5.Image</a>\\nis returned.</p>\\n',\n                itemtype: 'method',\n                name: 'get',\n                return: {\n                  description: 'the rectangle <a href=\"#/p5.Image\">p5.Image</a>',\n                  type: 'p5.Image'\n                },\n                example: [\n                  \"\\n<div><code>\\nlet myImage;\\nlet c;\\n\\nfunction preload() {\\n  myImage = loadImage('assets/rockies.jpg');\\n}\\n\\nfunction setup() {\\n  background(myImage);\\n  noStroke();\\n  c = myImage.get(60, 90);\\n  fill(c);\\n  rect(25, 25, 50, 50);\\n}\\n\\n//get() returns color here\\n</code></div>\"\n                ],\n                alt: 'image of rocky mountains with 50x50 green rect in front',\n                class: 'p5.Image',\n                module: 'Image',\n                submodule: 'Image',\n                overloads: [\n                  {\n                    line: 316,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>x-coordinate of the pixel</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y-coordinate of the pixel</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'w',\n                        description: '<p>width</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'h',\n                        description: '<p>height</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    return: {\n                      description: 'the rectangle <a href=\"#/p5.Image\">p5.Image</a>',\n                      type: 'p5.Image'\n                    }\n                  },\n                  {\n                    line: 354,\n                    params: [],\n                    return: {\n                      description: 'the whole <a href=\"#/p5.Image\">p5.Image</a>',\n                      type: 'p5.Image'\n                    }\n                  },\n                  {\n                    line: 358,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      }\n                    ],\n                    return: {\n                      description: 'color of pixel at x,y in array format [R, G, B, A]',\n                      type: 'Number[]'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/image/p5.Image.js',\n                line: 371,\n                description:\n                  '<p>Set the color of a single pixel or write an image into\\nthis <a href=\"#/p5.Image\">p5.Image</a>.</p>\\n<p>Note that for a large number of pixels this will\\nbe slower than directly manipulating the pixels array\\nand then calling <a href=\"#/p5.Image/updatePixels\">updatePixels()</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'set',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>x-coordinate of the pixel</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y-coordinate of the pixel</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'a',\n                    description:\n                      '<p>grayscale value | pixel array |\\n                               a <a href=\"#/p5.Color\">p5.Color</a> | image to copy</p>\\n',\n                    type: 'Number|Number[]|Object'\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\nlet img = createImage(66, 66);\\nimg.loadPixels();\\nfor (let i = 0; i < img.width; i++) {\\n  for (let j = 0; j < img.height; j++) {\\n    img.set(i, j, color(0, 90, 102, (i % img.width) * 2));\\n  }\\n}\\nimg.updatePixels();\\nimage(img, 17, 17);\\nimage(img, 34, 34);\\n</code>\\n</div>'\n                ],\n                alt:\n                  '2 gradated dark turquoise rects fade left. 1 center 1 bottom right of canvas',\n                class: 'p5.Image',\n                module: 'Image',\n                submodule: 'Image'\n              },\n              {\n                file: 'src/image/p5.Image.js',\n                line: 409,\n                description:\n                  '<p>Resize the image to a new width and height. To make the image scale\\nproportionally, use 0 as the value for the wide or high parameter.\\nFor instance, to make the width of an image 150 pixels, and change\\nthe height using the same proportion, use resize(150, 0).</p>\\n',\n                itemtype: 'method',\n                name: 'resize',\n                params: [\n                  {\n                    name: 'width',\n                    description: '<p>the resized image width</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'height',\n                    description: '<p>the resized image height</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nlet img;\\n\\nfunction preload() {\\n  img = loadImage('assets/rockies.jpg');\\n}\\n\\nfunction draw() {\\n  image(img, 0, 0);\\n}\\n\\nfunction mousePressed() {\\n  img.resize(50, 100);\\n}\\n</code></div>\"\n                ],\n                alt: 'image of rocky mountains. zoomed in',\n                class: 'p5.Image',\n                module: 'Image',\n                submodule: 'Image'\n              },\n              {\n                file: 'src/image/p5.Image.js',\n                line: 494,\n                description:\n                  '<p>Copies a region of pixels from one image to another. If no\\nsrcImage is specified this is used as the source. If the source\\nand destination regions aren&#39;t the same size, it will\\nautomatically resize source pixels to fit the specified\\ntarget region.</p>\\n',\n                itemtype: 'method',\n                name: 'copy',\n                example: [\n                  \"\\n<div><code>\\nlet photo;\\nlet bricks;\\nlet x;\\nlet y;\\n\\nfunction preload() {\\n  photo = loadImage('assets/rockies.jpg');\\n  bricks = loadImage('assets/bricks.jpg');\\n}\\n\\nfunction setup() {\\n  x = bricks.width / 2;\\n  y = bricks.height / 2;\\n  photo.copy(bricks, 0, 0, x, y, 0, 0, x, y);\\n  image(photo, 0, 0);\\n}\\n</code></div>\"\n                ],\n                alt:\n                  'image of rocky mountains and smaller image on top of bricks at top left',\n                class: 'p5.Image',\n                module: 'Image',\n                submodule: 'Image',\n                overloads: [\n                  {\n                    line: 494,\n                    params: [\n                      {\n                        name: 'srcImage',\n                        description: '<p>source image</p>\\n',\n                        type: 'p5.Image|p5.Element'\n                      },\n                      {\n                        name: 'sx',\n                        description:\n                          '<p>X coordinate of the source&#39;s upper left corner</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sy',\n                        description:\n                          '<p>Y coordinate of the source&#39;s upper left corner</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sw',\n                        description: '<p>source image width</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sh',\n                        description: '<p>source image height</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dx',\n                        description:\n                          '<p>X coordinate of the destination&#39;s upper left corner</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dy',\n                        description:\n                          '<p>Y coordinate of the destination&#39;s upper left corner</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dw',\n                        description: '<p>destination image width</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dh',\n                        description: '<p>destination image height</p>\\n',\n                        type: 'Integer'\n                      }\n                    ]\n                  },\n                  {\n                    line: 535,\n                    params: [\n                      {\n                        name: 'sx',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sy',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sw',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sh',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dx',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dy',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dw',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dh',\n                        description: '',\n                        type: 'Integer'\n                      }\n                    ]\n                  }\n                ]\n              },\n              {\n                file: 'src/image/p5.Image.js',\n                line: 575,\n                description:\n                  '<p>Masks part of an image from displaying by loading another\\nimage and using it&#39;s alpha channel as an alpha channel for\\nthis image.</p>\\n',\n                itemtype: 'method',\n                name: 'mask',\n                params: [\n                  {\n                    name: 'srcImage',\n                    description: '<p>source image</p>\\n',\n                    type: 'p5.Image'\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nlet photo, maskImage;\\nfunction preload() {\\n  photo = loadImage('assets/rockies.jpg');\\n  maskImage = loadImage('assets/mask2.png');\\n}\\n\\nfunction setup() {\\n  createCanvas(100, 100);\\n  photo.mask(maskImage);\\n  image(photo, 0, 0);\\n}\\n</code></div>\"\n                ],\n                alt:\n                  'image of rocky mountains with white at right\\n\\n\\nhttp://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/',\n                class: 'p5.Image',\n                module: 'Image',\n                submodule: 'Image'\n              },\n              {\n                file: 'src/image/p5.Image.js',\n                line: 638,\n                description:\n                  '<p>Applies an image filter to a <a href=\"#/p5.Image\">p5.Image</a></p>\\n',\n                itemtype: 'method',\n                name: 'filter',\n                params: [\n                  {\n                    name: 'filterType',\n                    description:\n                      '<p>either THRESHOLD, GRAY, OPAQUE, INVERT,\\n                               POSTERIZE, BLUR, ERODE, DILATE or BLUR.\\n                               See Filters.js for docs on\\n                               each available filter</p>\\n',\n                    type: 'Constant'\n                  },\n                  {\n                    name: 'filterParam',\n                    description:\n                      '<p>an optional parameter unique\\n                               to each filter, see above</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nlet photo1;\\nlet photo2;\\n\\nfunction preload() {\\n  photo1 = loadImage('assets/rockies.jpg');\\n  photo2 = loadImage('assets/rockies.jpg');\\n}\\n\\nfunction setup() {\\n  photo2.filter(GRAY);\\n  image(photo1, 0, 0);\\n  image(photo2, width / 2, 0);\\n}\\n</code></div>\"\n                ],\n                alt:\n                  '2 images of rocky mountains left one in color, right in black and white',\n                class: 'p5.Image',\n                module: 'Image',\n                submodule: 'Image'\n              },\n              {\n                file: 'src/image/p5.Image.js',\n                line: 674,\n                description:\n                  '<p>Copies a region of pixels from one image to another, using a specified\\nblend mode to do the operation.</p>\\n',\n                itemtype: 'method',\n                name: 'blend',\n                example: [\n                  \"\\n<div><code>\\nlet mountains;\\nlet bricks;\\n\\nfunction preload() {\\n  mountains = loadImage('assets/rockies.jpg');\\n  bricks = loadImage('assets/bricks_third.jpg');\\n}\\n\\nfunction setup() {\\n  mountains.blend(bricks, 0, 0, 33, 100, 67, 0, 33, 100, ADD);\\n  image(mountains, 0, 0);\\n  image(bricks, 0, 0);\\n}\\n</code></div>\\n<div><code>\\nlet mountains;\\nlet bricks;\\n\\nfunction preload() {\\n  mountains = loadImage('assets/rockies.jpg');\\n  bricks = loadImage('assets/bricks_third.jpg');\\n}\\n\\nfunction setup() {\\n  mountains.blend(bricks, 0, 0, 33, 100, 67, 0, 33, 100, DARKEST);\\n  image(mountains, 0, 0);\\n  image(bricks, 0, 0);\\n}\\n</code></div>\\n<div><code>\\nlet mountains;\\nlet bricks;\\n\\nfunction preload() {\\n  mountains = loadImage('assets/rockies.jpg');\\n  bricks = loadImage('assets/bricks_third.jpg');\\n}\\n\\nfunction setup() {\\n  mountains.blend(bricks, 0, 0, 33, 100, 67, 0, 33, 100, LIGHTEST);\\n  image(mountains, 0, 0);\\n  image(bricks, 0, 0);\\n}\\n</code></div>\"\n                ],\n                alt:\n                  'image of rocky mountains. Brick images on left and right. Right overexposed\\nimage of rockies. Brickwall images on left and right. Right mortar transparent\\nimage of rockies. Brickwall images on left and right. Right translucent',\n                class: 'p5.Image',\n                module: 'Image',\n                submodule: 'Image',\n                overloads: [\n                  {\n                    line: 674,\n                    params: [\n                      {\n                        name: 'srcImage',\n                        description: '<p>source image</p>\\n',\n                        type: 'p5.Image'\n                      },\n                      {\n                        name: 'sx',\n                        description:\n                          '<p>X coordinate of the source&#39;s upper left corner</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sy',\n                        description:\n                          '<p>Y coordinate of the source&#39;s upper left corner</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sw',\n                        description: '<p>source image width</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sh',\n                        description: '<p>source image height</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dx',\n                        description:\n                          '<p>X coordinate of the destination&#39;s upper left corner</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dy',\n                        description:\n                          '<p>Y coordinate of the destination&#39;s upper left corner</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dw',\n                        description: '<p>destination image width</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dh',\n                        description: '<p>destination image height</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'blendMode',\n                        description:\n                          '<p>the blend mode. either\\n    BLEND, DARKEST, LIGHTEST, DIFFERENCE,\\n    MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\\n    SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.</p>\\n<p>Available blend modes are: normal | multiply | screen | overlay |\\n           darken | lighten | color-dodge | color-burn | hard-light |\\n           soft-light | difference | exclusion | hue | saturation |\\n           color | luminosity</p>\\n<p><a href=\"http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/\">http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/</a></p>\\n',\n                        type: 'Constant'\n                      }\n                    ]\n                  },\n                  {\n                    line: 753,\n                    params: [\n                      {\n                        name: 'sx',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sy',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sw',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sh',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dx',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dy',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dw',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dh',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'blendMode',\n                        description: '',\n                        type: 'Constant'\n                      }\n                    ]\n                  }\n                ]\n              },\n              {\n                file: 'src/image/p5.Image.js',\n                line: 796,\n                description:\n                  '<p>Saves the image to a file and force the browser to download it.\\nAccepts two strings for filename and file extension\\nSupports png (default) and jpg.</p>\\n',\n                itemtype: 'method',\n                name: 'save',\n                params: [\n                  {\n                    name: 'filename',\n                    description: '<p>give your file a name</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'extension',\n                    description: '<p>&#39;png&#39; or &#39;jpg&#39;</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nlet photo;\\n\\nfunction preload() {\\n  photo = loadImage('assets/rockies.jpg');\\n}\\n\\nfunction draw() {\\n  image(photo, 0, 0);\\n}\\n\\nfunction keyTyped() {\\n  if (key === 's') {\\n    photo.save('photo', 'png');\\n  }\\n}\\n</code></div>\"\n                ],\n                alt: 'image of rocky mountains.',\n                class: 'p5.Image',\n                module: 'Image',\n                submodule: 'Image'\n              },\n              {\n                file: 'src/image/pixels.js',\n                line: 14,\n                description:\n                  '<p><a href=\\'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference\\n/Global_Objects/Uint8ClampedArray\\' target=\\'_blank\\'>Uint8ClampedArray</a>\\ncontaining the values for all the pixels in the display window.\\nThese values are numbers. This array is the size (include an appropriate\\nfactor for <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4,\\nrepresenting the R, G, B, A values in order for each pixel, moving from\\nleft to right across each row, then down each column. Retina and other\\nhigh density displays will have more pixels[] (by a factor of\\npixelDensity^2).\\nFor example, if the image is 100x100 pixels, there will be 40,000. On a\\nretina display, there will be 160,000.\\n<br><br>\\nThe first four values (indices 0-3) in the array will be the R, G, B, A\\nvalues of the pixel at (0, 0). The second four values (indices 4-7) will\\ncontain the R, G, B, A values of the pixel at (1, 0). More generally, to\\nset values for a pixel at (x, y):</p>\\n<pre><code class=\"lang-javascript\">let d = pixelDensity();\\nfor (let i = 0; i &lt; d; i++) {\\n  for (let j = 0; j &lt; d; j++) {\\n    // loop over\\n    index = 4 * ((y * d + j) * width * d + (x * d + i));\\n    pixels[index] = r;\\n    pixels[index+1] = g;\\n    pixels[index+2] = b;\\n    pixels[index+3] = a;\\n  }\\n}\\n</code></pre>\\n<p>While the above method is complex, it is flexible enough to work with\\nany pixelDensity. Note that <a href=\"#/p5/set\">set()</a> will automatically take care of\\nsetting all the appropriate values in <a href=\"#/p5/pixels\">pixels[]</a> for a given (x, y) at\\nany pixelDensity, but the performance may not be as fast when lots of\\nmodifications are made to the pixel array.\\n<br><br>\\nBefore accessing this array, the data must loaded with the <a href=\"#/p5/loadPixels\">loadPixels()</a>\\nfunction. After the array data has been modified, the <a href=\"#/p5/updatePixels\">updatePixels()</a>\\nfunction must be run to update the changes.\\n<br><br>\\nNote that this is not a standard javascript array.  This means that\\nstandard javascript functions such as <a href=\"#/p5/slice\">slice()</a> or\\n<a href=\"#/p5/arrayCopy\">arrayCopy()</a> do not\\nwork.</p>',\n                itemtype: 'property',\n                name: 'pixels',\n                type: 'Number[]',\n                example: [\n                  '\\n<div>\\n<code>\\nlet pink = color(255, 102, 204);\\nloadPixels();\\nlet d = pixelDensity();\\nlet halfImage = 4 * (width * d) * (height / 2 * d);\\nfor (let i = 0; i < halfImage; i += 4) {\\n  pixels[i] = red(pink);\\n  pixels[i + 1] = green(pink);\\n  pixels[i + 2] = blue(pink);\\n  pixels[i + 3] = alpha(pink);\\n}\\nupdatePixels();\\n</code>\\n</div>'\n                ],\n                alt: 'top half of canvas pink, bottom grey',\n                class: 'p5',\n                module: 'Image',\n                submodule: 'Pixels'\n              },\n              {\n                file: 'src/image/pixels.js',\n                line: 83,\n                description:\n                  '<p>Copies a region of pixels from one image to another, using a specified\\nblend mode to do the operation.</p>\\n',\n                itemtype: 'method',\n                name: 'blend',\n                example: [\n                  \"\\n<div><code>\\nlet img0;\\nlet img1;\\n\\nfunction preload() {\\n  img0 = loadImage('assets/rockies.jpg');\\n  img1 = loadImage('assets/bricks_third.jpg');\\n}\\n\\nfunction setup() {\\n  background(img0);\\n  image(img1, 0, 0);\\n  blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, LIGHTEST);\\n}\\n</code></div>\\n<div><code>\\nlet img0;\\nlet img1;\\n\\nfunction preload() {\\n  img0 = loadImage('assets/rockies.jpg');\\n  img1 = loadImage('assets/bricks_third.jpg');\\n}\\n\\nfunction setup() {\\n  background(img0);\\n  image(img1, 0, 0);\\n  blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, DARKEST);\\n}\\n</code></div>\\n<div><code>\\nlet img0;\\nlet img1;\\n\\nfunction preload() {\\n  img0 = loadImage('assets/rockies.jpg');\\n  img1 = loadImage('assets/bricks_third.jpg');\\n}\\n\\nfunction setup() {\\n  background(img0);\\n  image(img1, 0, 0);\\n  blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, ADD);\\n}\\n</code></div>\"\n                ],\n                alt:\n                  'image of rocky mountains. Brick images on left and right. Right overexposed\\nimage of rockies. Brickwall images on left and right. Right mortar transparent\\nimage of rockies. Brickwall images on left and right. Right translucent',\n                class: 'p5',\n                module: 'Image',\n                submodule: 'Pixels',\n                overloads: [\n                  {\n                    line: 83,\n                    params: [\n                      {\n                        name: 'srcImage',\n                        description: '<p>source image</p>\\n',\n                        type: 'p5.Image'\n                      },\n                      {\n                        name: 'sx',\n                        description:\n                          '<p>X coordinate of the source&#39;s upper left corner</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sy',\n                        description:\n                          '<p>Y coordinate of the source&#39;s upper left corner</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sw',\n                        description: '<p>source image width</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sh',\n                        description: '<p>source image height</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dx',\n                        description:\n                          '<p>X coordinate of the destination&#39;s upper left corner</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dy',\n                        description:\n                          '<p>Y coordinate of the destination&#39;s upper left corner</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dw',\n                        description: '<p>destination image width</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dh',\n                        description: '<p>destination image height</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'blendMode',\n                        description:\n                          '<p>the blend mode. either\\n    BLEND, DARKEST, LIGHTEST, DIFFERENCE,\\n    MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\\n    SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.</p>\\n',\n                        type: 'Constant'\n                      }\n                    ]\n                  },\n                  {\n                    line: 156,\n                    params: [\n                      {\n                        name: 'sx',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sy',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sw',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sh',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dx',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dy',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dw',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dh',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'blendMode',\n                        description: '',\n                        type: 'Constant'\n                      }\n                    ]\n                  }\n                ]\n              },\n              {\n                file: 'src/image/pixels.js',\n                line: 177,\n                description:\n                  '<p>Copies a region of the canvas to another region of the canvas\\nand copies a region of pixels from an image used as the srcImg parameter\\ninto the canvas srcImage is specified this is used as the source. If\\nthe source and destination regions aren&#39;t the same size, it will\\nautomatically resize source pixels to fit the specified\\ntarget region.</p>\\n',\n                itemtype: 'method',\n                name: 'copy',\n                example: [\n                  \"\\n<div><code>\\nlet img;\\n\\nfunction preload() {\\n  img = loadImage('assets/rockies.jpg');\\n}\\n\\nfunction setup() {\\n  background(img);\\n  copy(img, 7, 22, 10, 10, 35, 25, 50, 50);\\n  stroke(255);\\n  noFill();\\n  // Rectangle shows area being copied\\n  rect(7, 22, 10, 10);\\n}\\n</code></div>\"\n                ],\n                alt:\n                  'image of rocky mountains. Brick images on left and right. Right overexposed\\nimage of rockies. Brickwall images on left and right. Right mortar transparent\\nimage of rockies. Brickwall images on left and right. Right translucent',\n                class: 'p5',\n                module: 'Image',\n                submodule: 'Pixels',\n                overloads: [\n                  {\n                    line: 177,\n                    params: [\n                      {\n                        name: 'srcImage',\n                        description: '<p>source image</p>\\n',\n                        type: 'p5.Image|p5.Element'\n                      },\n                      {\n                        name: 'sx',\n                        description:\n                          '<p>X coordinate of the source&#39;s upper left corner</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sy',\n                        description:\n                          '<p>Y coordinate of the source&#39;s upper left corner</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sw',\n                        description: '<p>source image width</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sh',\n                        description: '<p>source image height</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dx',\n                        description:\n                          '<p>X coordinate of the destination&#39;s upper left corner</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dy',\n                        description:\n                          '<p>Y coordinate of the destination&#39;s upper left corner</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dw',\n                        description: '<p>destination image width</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dh',\n                        description: '<p>destination image height</p>\\n',\n                        type: 'Integer'\n                      }\n                    ]\n                  },\n                  {\n                    line: 220,\n                    params: [\n                      {\n                        name: 'sx',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sy',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sw',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sh',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dx',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dy',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dw',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dh',\n                        description: '',\n                        type: 'Integer'\n                      }\n                    ]\n                  }\n                ]\n              },\n              {\n                file: 'src/image/pixels.js',\n                line: 236,\n                description:\n                  '<p>Applies a filter to the canvas.\\n<br><br></p>\\n<p>The presets options are:\\n<br><br></p>\\n<p>THRESHOLD\\nConverts the image to black and white pixels depending if they are above or\\nbelow the threshold defined by the level parameter. The parameter must be\\nbetween 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\\n<br><br></p>\\n<p>GRAY\\nConverts any colors in the image to grayscale equivalents. No parameter\\nis used.\\n<br><br></p>\\n<p>OPAQUE\\nSets the alpha channel to entirely opaque. No parameter is used.\\n<br><br></p>\\n<p>INVERT\\nSets each pixel to its inverse value. No parameter is used.\\n<br><br></p>\\n<p>POSTERIZE\\nLimits each channel of the image to the number of colors specified as the\\nparameter. The parameter can be set to values between 2 and 255, but\\nresults are most noticeable in the lower ranges.\\n<br><br></p>\\n<p>BLUR\\nExecutes a Gaussian blur with the level parameter specifying the extent\\nof the blurring. If no parameter is used, the blur is equivalent to\\nGaussian blur of radius 1. Larger values increase the blur.\\n<br><br></p>\\n<p>ERODE\\nReduces the light areas. No parameter is used.\\n<br><br></p>\\n<p>DILATE\\nIncreases the light areas. No parameter is used.</p>\\n',\n                itemtype: 'method',\n                name: 'filter',\n                params: [\n                  {\n                    name: 'filterType',\n                    description:\n                      '<p>either THRESHOLD, GRAY, OPAQUE, INVERT,\\n                               POSTERIZE, BLUR, ERODE, DILATE or BLUR.\\n                               See Filters.js for docs on\\n                               each available filter</p>\\n',\n                    type: 'Constant'\n                  },\n                  {\n                    name: 'filterParam',\n                    description:\n                      '<p>an optional parameter unique\\n                               to each filter, see above</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/bricks.jpg');\\n}\\nfunction setup() {\\n  image(img, 0, 0);\\n  filter(THRESHOLD);\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/bricks.jpg');\\n}\\nfunction setup() {\\n  image(img, 0, 0);\\n  filter(GRAY);\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/bricks.jpg');\\n}\\nfunction setup() {\\n  image(img, 0, 0);\\n  filter(OPAQUE);\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/bricks.jpg');\\n}\\nfunction setup() {\\n  image(img, 0, 0);\\n  filter(INVERT);\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/bricks.jpg');\\n}\\nfunction setup() {\\n  image(img, 0, 0);\\n  filter(POSTERIZE, 3);\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/bricks.jpg');\\n}\\nfunction setup() {\\n  image(img, 0, 0);\\n  filter(DILATE);\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/bricks.jpg');\\n}\\nfunction setup() {\\n  image(img, 0, 0);\\n  filter(BLUR, 3);\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/bricks.jpg');\\n}\\nfunction setup() {\\n  image(img, 0, 0);\\n  filter(ERODE);\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'black and white image of a brick wall.\\ngreyscale image of a brickwall\\nimage of a brickwall\\njade colored image of a brickwall\\nred and pink image of a brickwall\\nimage of a brickwall\\nblurry image of a brickwall\\nimage of a brickwall\\nimage of a brickwall with less detail',\n                class: 'p5',\n                module: 'Image',\n                submodule: 'Pixels'\n              },\n              {\n                file: 'src/image/pixels.js',\n                line: 415,\n                description:\n                  '<p>Get a region of pixels, or a single pixel, from the canvas.</p>\\n<p>Returns an array of [R,G,B,A] values for any pixel or grabs a section of\\nan image. If no parameters are specified, the entire image is returned.\\nUse the x and y parameters to get the value of one pixel. Get a section of\\nthe display window by specifying additional w and h parameters. When\\ngetting an image, the x and y parameters define the coordinates for the\\nupper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>.\\n<br><br>\\nGetting the color of a single pixel with get(x, y) is easy, but not as fast\\nas grabbing the data directly from <a href=\"#/p5/pixels\">pixels[]</a>. The equivalent statement to\\nget(x, y) using <a href=\"#/p5/pixels\">pixels[]</a> with pixel density d is</p>\\n<pre><code class=\"lang-javascript\">let x, y, d; // set these to the coordinates\\nlet off = (y * width + x) * d * 4;\\nlet components = [\\n  pixels[off],\\n  pixels[off + 1],\\n  pixels[off + 2],\\n  pixels[off + 3]\\n];\\nprint(components);\\n</code></pre>\\n<p><br><br></p>\\n<p>See the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information.</p>\\n<p>If you want to extract an array of colors or a subimage from an p5.Image object,\\ntake a look at <a href=\"#/p5.Image/get\">p5.Image.get()</a></p>\\n',\n                itemtype: 'method',\n                name: 'get',\n                return: {\n                  description: 'the rectangle <a href=\"#/p5.Image\">p5.Image</a>',\n                  type: 'p5.Image'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/rockies.jpg');\\n}\\nfunction setup() {\\n  image(img, 0, 0);\\n  let c = get();\\n  image(c, width / 2, 0);\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/rockies.jpg');\\n}\\nfunction setup() {\\n  image(img, 0, 0);\\n  let c = get(50, 90);\\n  fill(c);\\n  noStroke();\\n  rect(25, 25, 50, 50);\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  '2 images of the rocky mountains, side-by-side\\nImage of the rocky mountains with 50x50 green rect in center of canvas',\n                class: 'p5',\n                module: 'Image',\n                submodule: 'Pixels',\n                overloads: [\n                  {\n                    line: 415,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>x-coordinate of the pixel</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y-coordinate of the pixel</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'w',\n                        description: '<p>width</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'h',\n                        description: '<p>height</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    return: {\n                      description: 'the rectangle <a href=\"#/p5.Image\">p5.Image</a>',\n                      type: 'p5.Image'\n                    }\n                  },\n                  {\n                    line: 488,\n                    params: [],\n                    return: {\n                      description: 'the whole <a href=\"#/p5.Image\">p5.Image</a>',\n                      type: 'p5.Image'\n                    }\n                  },\n                  {\n                    line: 492,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      }\n                    ],\n                    return: {\n                      description: 'color of pixel at x,y in array format [R, G, B, A]',\n                      type: 'Number[]'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/image/pixels.js',\n                line: 503,\n                description:\n                  '<p>Loads the pixel data for the display window into the <a href=\"#/p5/pixels\">pixels[]</a> array. This\\nfunction must always be called before reading from or writing to <a href=\"#/p5/pixels\">pixels[]</a>.\\nNote that only changes made with <a href=\"#/p5/set\">set()</a> or direct manipulation of <a href=\"#/p5/pixels\">pixels[]</a>\\nwill occur.</p>\\n',\n                itemtype: 'method',\n                name: 'loadPixels',\n                example: [\n                  \"\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/rockies.jpg');\\n}\\n\\nfunction setup() {\\n  image(img, 0, 0, width, height);\\n  let d = pixelDensity();\\n  let halfImage = 4 * (width * d) * (height * d / 2);\\n  loadPixels();\\n  for (let i = 0; i < halfImage; i++) {\\n    pixels[i + halfImage] = pixels[i];\\n  }\\n  updatePixels();\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'two images of the rocky mountains. one on top, one on bottom of canvas.',\n                class: 'p5',\n                module: 'Image',\n                submodule: 'Pixels'\n              },\n              {\n                file: 'src/image/pixels.js',\n                line: 540,\n                description:\n                  '<p>Changes the color of any pixel, or writes an image directly to the\\ndisplay window.</p>\\n<p>The x and y parameters specify the pixel to change and the c parameter\\nspecifies the color value. This can be a <a href=\"#/p5.Color\">p5.Color</a> object, or [R, G, B, A]\\npixel array. It can also be a single grayscale value.\\nWhen setting an image, the x and y parameters define the coordinates for\\nthe upper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>.\\n</p>\\n<p>\\nAfter using <a href=\"#/p5/set\">set()</a>, you must call <a href=\"#/p5/updatePixels\">updatePixels()</a> for your changes to appear.\\nThis should be called once all pixels have been set, and must be called before\\ncalling .<a href=\"#/p5/get\">get()</a> or drawing the image.\\n</p>\\n<p>Setting the color of a single pixel with set(x, y) is easy, but not as\\nfast as putting the data directly into <a href=\"#/p5/pixels\">pixels[]</a>. Setting the <a href=\"#/p5/pixels\">pixels[]</a>\\nvalues directly may be complicated when working with a retina display,\\nbut will perform better when lots of pixels need to be set directly on\\nevery loop.</p>\\n<p>See the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information.</p>',\n                itemtype: 'method',\n                name: 'set',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>x-coordinate of the pixel</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y-coordinate of the pixel</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'c',\n                    description:\n                      '<p>insert a grayscale value | a pixel array |\\n                               a <a href=\"#/p5.Color\">p5.Color</a> object | a <a href=\"#/p5.Image\">p5.Image</a> to copy</p>\\n',\n                    type: 'Number|Number[]|Object'\n                  }\n                ],\n                example: [\n                  \"\\n<div>\\n<code>\\nlet black = color(0);\\nset(30, 20, black);\\nset(85, 20, black);\\nset(85, 75, black);\\nset(30, 75, black);\\nupdatePixels();\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nfor (let i = 30; i < width - 15; i++) {\\n  for (let j = 20; j < height - 25; j++) {\\n    let c = color(204 - j, 153 - i, 0);\\n    set(i, j, c);\\n  }\\n}\\nupdatePixels();\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/rockies.jpg');\\n}\\n\\nfunction setup() {\\n  set(0, 0, img);\\n  updatePixels();\\n  line(0, 0, width, height);\\n  line(0, height, width, 0);\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  \"4 black points in the shape of a square middle-right of canvas.\\nsquare with orangey-brown gradient lightening at bottom right.\\nimage of the rocky mountains. with lines like an 'x' through the center.\",\n                class: 'p5',\n                module: 'Image',\n                submodule: 'Pixels'\n              },\n              {\n                file: 'src/image/pixels.js',\n                line: 614,\n                description:\n                  '<p>Updates the display window with the data in the <a href=\"#/p5/pixels\">pixels[]</a> array.\\nUse in conjunction with <a href=\"#/p5/loadPixels\">loadPixels()</a>. If you&#39;re only reading pixels from\\nthe array, there&#39;s no need to call <a href=\"#/p5/updatePixels\">updatePixels()</a> — updating is only\\nnecessary to apply changes. <a href=\"#/p5/updatePixels\">updatePixels()</a> should be called anytime the\\npixels array is manipulated or <a href=\"#/p5/set\">set()</a> is called, and only changes made with\\n<a href=\"#/p5/set\">set()</a> or direct changes to <a href=\"#/p5/pixels\">pixels[]</a> will occur.</p>\\n',\n                itemtype: 'method',\n                name: 'updatePixels',\n                params: [\n                  {\n                    name: 'x',\n                    description:\n                      '<p>x-coordinate of the upper-left corner of region\\n                        to update</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'y',\n                    description:\n                      '<p>y-coordinate of the upper-left corner of region\\n                        to update</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'w',\n                    description: '<p>width of region to update</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'h',\n                    description: '<p>height of region to update</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/rockies.jpg');\\n}\\n\\nfunction setup() {\\n  image(img, 0, 0, width, height);\\n  let d = pixelDensity();\\n  let halfImage = 4 * (width * d) * (height * d / 2);\\n  loadPixels();\\n  for (let i = 0; i < halfImage; i++) {\\n    pixels[i + halfImage] = pixels[i];\\n  }\\n  updatePixels();\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'two images of the rocky mountains. one on top, one on bottom of canvas.',\n                class: 'p5',\n                module: 'Image',\n                submodule: 'Pixels'\n              },\n              {\n                file: 'src/io/files.js',\n                line: 19,\n                description:\n                  '<p>Loads a JSON file from a file or a URL, and returns an Object.\\nNote that even if the JSON file contains an Array, an Object will be\\nreturned with index numbers as keys.</p>\\n<p>This method is asynchronous, meaning it may not finish before the next\\nline in your sketch is executed. JSONP is supported via a polyfill and you\\ncan pass in as the second argument an object with definitions of the json\\ncallback following the syntax specified <a href=\"https://github.com/camsong/\\nfetch-jsonp\">here</a>.</p>\\n<p>This method is suitable for fetching files up to size of 64MB.</p>\\n',\n                itemtype: 'method',\n                name: 'loadJSON',\n                return: {\n                  description: 'JSON data',\n                  type: 'Object|Array'\n                },\n                example: [\n                  '\\n\\n<p>Calling <a href=\"#/p5/loadJSON\">loadJSON()</a> inside <a href=\"#/p5/preload\">preload()</a> guarantees to complete the\\noperation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.</p>\\n\\n<div><code>\\n// Examples use USGS Earthquake API:\\n//   https://earthquake.usgs.gov/fdsnws/event/1/#methods\\nlet earthquakes;\\nfunction preload() {\\n  // Get the most recent earthquake in the database\\n  let url =\\n   \\'https://earthquake.usgs.gov/earthquakes/feed/v1.0/\\' +\\n    \\'summary/all_day.geojson\\';\\n  earthquakes = loadJSON(url);\\n}\\n\\nfunction setup() {\\n  noLoop();\\n}\\n\\nfunction draw() {\\n  background(200);\\n  // Get the magnitude and name of the earthquake out of the loaded JSON\\n  let earthquakeMag = earthquakes.features[0].properties.mag;\\n  let earthquakeName = earthquakes.features[0].properties.place;\\n  ellipse(width / 2, height / 2, earthquakeMag * 10, earthquakeMag * 10);\\n  textAlign(CENTER);\\n  text(earthquakeName, 0, height - 30, width, 30);\\n}\\n</code></div>\\n\\n\\n<p>Outside of preload(), you may supply a callback function to handle the\\nobject:</p>\\n<div><code>\\nfunction setup() {\\n  noLoop();\\n  let url =\\n   \\'https://earthquake.usgs.gov/earthquakes/feed/v1.0/\\' +\\n    \\'summary/all_day.geojson\\';\\n  loadJSON(url, drawEarthquake);\\n}\\n\\nfunction draw() {\\n  background(200);\\n}\\n\\nfunction drawEarthquake(earthquakes) {\\n  // Get the magnitude and name of the earthquake out of the loaded JSON\\n  let earthquakeMag = earthquakes.features[0].properties.mag;\\n  let earthquakeName = earthquakes.features[0].properties.place;\\n  ellipse(width / 2, height / 2, earthquakeMag * 10, earthquakeMag * 10);\\n  textAlign(CENTER);\\n  text(earthquakeName, 0, height - 30, width, 30);\\n}\\n</code></div>'\n                ],\n                alt:\n                  '50x50 ellipse that changes from black to white depending on the current humidity\\n50x50 ellipse that changes from black to white depending on the current humidity',\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Input',\n                overloads: [\n                  {\n                    line: 19,\n                    params: [\n                      {\n                        name: 'path',\n                        description: '<p>name of the file or url to load</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'jsonpOptions',\n                        description: '<p>options object for jsonp related settings</p>\\n',\n                        type: 'Object',\n                        optional: true\n                      },\n                      {\n                        name: 'datatype',\n                        description: '<p>&quot;json&quot; or &quot;jsonp&quot;</p>\\n',\n                        type: 'String',\n                        optional: true\n                      },\n                      {\n                        name: 'callback',\n                        description:\n                          '<p>function to be executed after\\n                                   <a href=\"#/p5/loadJSON\">loadJSON()</a> completes, data is passed\\n                                   in as first argument</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      },\n                      {\n                        name: 'errorCallback',\n                        description:\n                          '<p>function to be executed if\\n                                   there is an error, response is passed\\n                                   in as first argument</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: 'JSON data',\n                      type: 'Object|Array'\n                    }\n                  },\n                  {\n                    line: 105,\n                    params: [\n                      {\n                        name: 'path',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'datatype',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'callback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      },\n                      {\n                        name: 'errorCallback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'Object|Array'\n                    }\n                  },\n                  {\n                    line: 113,\n                    params: [\n                      {\n                        name: 'path',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'callback',\n                        description: '',\n                        type: 'Function'\n                      },\n                      {\n                        name: 'errorCallback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'Object|Array'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/io/files.js',\n                line: 184,\n                description:\n                  '<p>Reads the contents of a file and creates a String array of its individual\\nlines. If the name of the file is used as the parameter, as in the above\\nexample, the file must be located in the sketch directory/folder.\\n<br><br>\\nAlternatively, the file maybe be loaded from anywhere on the local\\ncomputer using an absolute path (something that starts with / on Unix and\\nLinux, or a drive letter on Windows), or the filename parameter can be a\\nURL for a file found on a network.\\n<br><br>\\nThis method is asynchronous, meaning it may not finish before the next\\nline in your sketch is executed.</p>\\n<p>This method is suitable for fetching files up to size of 64MB.</p>\\n',\n                itemtype: 'method',\n                name: 'loadStrings',\n                params: [\n                  {\n                    name: 'filename',\n                    description: '<p>name of the file or url to load</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>function to be executed after <a href=\"#/p5/loadStrings\">loadStrings()</a>\\n                              completes, Array is passed in as first\\n                              argument</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>function to be executed if\\n                              there is an error, response is passed\\n                              in as first argument</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'Array of Strings',\n                  type: 'String[]'\n                },\n                example: [\n                  '\\n\\n<p>Calling loadStrings() inside <a href=\"#/p5/preload\">preload()</a> guarantees to complete the\\noperation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.</p>\\n\\n<div><code>\\nlet result;\\nfunction preload() {\\n  result = loadStrings(\\'assets/test.txt\\');\\n}\\n\\nfunction setup() {\\n  background(200);\\n  let ind = floor(random(result.length));\\n  text(result[ind], 10, 10, 80, 80);\\n}\\n</code></div>\\n\\n<p>Outside of preload(), you may supply a callback function to handle the\\nobject:</p>\\n\\n<div><code>\\nfunction setup() {\\n  loadStrings(\\'assets/test.txt\\', pickString);\\n}\\n\\nfunction pickString(result) {\\n  background(200);\\n  let ind = floor(random(result.length));\\n  text(result[ind], 10, 10, 80, 80);\\n}\\n</code></div>'\n                ],\n                alt:\n                  'randomly generated text from a file, for example \"i smell like butter\"\\nrandomly generated text from a file, for example \"i have three feet\"',\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Input'\n              },\n              {\n                file: 'src/io/files.js',\n                line: 297,\n                description:\n                  '<p>Reads the contents of a file or URL and creates a <a href=\"#/p5.Table\">p5.Table</a> object with\\nits values. If a file is specified, it must be located in the sketch&#39;s\\n&quot;data&quot; folder. The filename parameter can also be a URL to a file found\\nonline. By default, the file is assumed to be comma-separated (in CSV\\nformat). Table only looks for a header row if the &#39;header&#39; option is\\nincluded.</p>\\n\\n<p>Possible options include:\\n<ul>\\n<li>csv - parse the table as comma-separated values</li>\\n<li>tsv - parse the table as tab-separated values</li>\\n<li>header - this table has a header (title) row</li>\\n</ul>\\n</p>\\n\\n<p>When passing in multiple options, pass them in as separate parameters,\\nseperated by commas. For example:\\n<br><br>\\n<code>\\nloadTable(&#39;my_csv_file.csv&#39;, &#39;csv&#39;, &#39;header&#39;);\\n</code>\\n</p>\\n\\n<p> All files loaded and saved use UTF-8 encoding.</p>\\n\\n<p>This method is asynchronous, meaning it may not finish before the next\\nline in your sketch is executed. Calling <a href=\"#/p5/loadTable\">loadTable()</a> inside <a href=\"#/p5/preload\">preload()</a>\\nguarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.\\n<p>Outside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the\\nobject:</p>\\n</p>\\n\\n<p>This method is suitable for fetching files up to size of 64MB.</p>\\n',\n                itemtype: 'method',\n                name: 'loadTable',\n                return: {\n                  description: '<a href=\"#/p5.Table\">Table</a> object containing data',\n                  type: 'Object'\n                },\n                example: [\n                  '\\n<div class=\\'norender\\'>\\n<code>\\n// Given the following CSV file called \"mammals.csv\"\\n// located in the project\\'s \"assets\" folder:\\n//\\n// id,species,name\\n// 0,Capra hircus,Goat\\n// 1,Panthera pardus,Leopard\\n// 2,Equus zebra,Zebra\\n\\nlet table;\\n\\nfunction preload() {\\n  //my table is comma separated value \"csv\"\\n  //and has a header specifying the columns labels\\n  table = loadTable(\\'assets/mammals.csv\\', \\'csv\\', \\'header\\');\\n  //the file can be remote\\n  //table = loadTable(\"http://p5js.org/reference/assets/mammals.csv\",\\n  //                  \"csv\", \"header\");\\n}\\n\\nfunction setup() {\\n  //count the columns\\n  print(table.getRowCount() + \\' total rows in table\\');\\n  print(table.getColumnCount() + \\' total columns in table\\');\\n\\n  print(table.getColumn(\\'name\\'));\\n  //[\"Goat\", \"Leopard\", \"Zebra\"]\\n\\n  //cycle through the table\\n  for (let r = 0; r < table.getRowCount(); r++)\\n    for (let c = 0; c < table.getColumnCount(); c++) {\\n      print(table.getString(r, c));\\n    }\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'randomly generated text from a file, for example \"i smell like butter\"\\nrandomly generated text from a file, for example \"i have three feet\"',\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Input',\n                overloads: [\n                  {\n                    line: 297,\n                    params: [\n                      {\n                        name: 'filename',\n                        description: '<p>name of the file or URL to load</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'options',\n                        description:\n                          '<p>&quot;header&quot; &quot;csv&quot; &quot;tsv&quot;</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'callback',\n                        description:\n                          '<p>function to be executed after\\n                                    <a href=\"#/p5/loadTable\">loadTable()</a> completes. On success, the\\n                                    <a href=\"#/p5.Table\">Table</a> object is passed in as the\\n                                    first argument.</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      },\n                      {\n                        name: 'errorCallback',\n                        description:\n                          '<p>function to be executed if\\n                                    there is an error, response is passed\\n                                    in as first argument</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: '<a href=\"#/p5.Table\">Table</a> object containing data',\n                      type: 'Object'\n                    }\n                  },\n                  {\n                    line: 387,\n                    params: [\n                      {\n                        name: 'filename',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'callback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      },\n                      {\n                        name: 'errorCallback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'Object'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/io/files.js',\n                line: 607,\n                description:\n                  '<p>Reads the contents of a file and creates an XML object with its values.\\nIf the name of the file is used as the parameter, as in the above example,\\nthe file must be located in the sketch directory/folder.</p>\\n<p>Alternatively, the file maybe be loaded from anywhere on the local\\ncomputer using an absolute path (something that starts with / on Unix and\\nLinux, or a drive letter on Windows), or the filename parameter can be a\\nURL for a file found on a network.</p>\\n<p>This method is asynchronous, meaning it may not finish before the next\\nline in your sketch is executed. Calling <a href=\"#/p5/loadXML\">loadXML()</a> inside <a href=\"#/p5/preload\">preload()</a>\\nguarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.</p>\\n<p>Outside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the\\nobject.</p>\\n<p>This method is suitable for fetching files up to size of 64MB.</p>\\n',\n                itemtype: 'method',\n                name: 'loadXML',\n                params: [\n                  {\n                    name: 'filename',\n                    description: '<p>name of the file or URL to load</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>function to be executed after <a href=\"#/p5/loadXML\">loadXML()</a>\\n                              completes, XML object is passed in as\\n                              first argument</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>function to be executed if\\n                              there is an error, response is passed\\n                              in as first argument</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'XML object containing data',\n                  type: 'Object'\n                },\n                example: [\n                  '\\n<div class=\\'norender\\'><code>\\n// The following short XML file called \"mammals.xml\" is parsed\\n// in the code below.\\n//\\n// <?xml version=\"1.0\"?>\\n// &lt;mammals&gt;\\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n// &lt;/mammals&gt;\\n\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  let children = xml.getChildren(\\'animal\\');\\n\\n  for (let i = 0; i < children.length; i++) {\\n    let id = children[i].getNum(\\'id\\');\\n    let coloring = children[i].getString(\\'species\\');\\n    let name = children[i].getContent();\\n    print(id + \\', \\' + coloring + \\', \\' + name);\\n  }\\n}\\n\\n// Sketch prints:\\n// 0, Capra hircus, Goat\\n// 1, Panthera pardus, Leopard\\n// 2, Equus zebra, Zebra\\n</code></div>'\n                ],\n                alt: 'no image displayed',\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Input'\n              },\n              {\n                file: 'src/io/files.js',\n                line: 718,\n                description:\n                  '<p>This method is suitable for fetching files up to size of 64MB.</p>\\n',\n                itemtype: 'method',\n                name: 'loadBytes',\n                params: [\n                  {\n                    name: 'file',\n                    description: '<p>name of the file or URL to load</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>function to be executed after <a href=\"#/p5/loadBytes\">loadBytes()</a>\\n                                   completes</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>function to be executed if there\\n                                   is an error</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: \"an object whose 'bytes' property will be the loaded buffer\",\n                  type: 'Object'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\nlet data;\\n\\nfunction preload() {\\n  data = loadBytes('assets/mammals.xml');\\n}\\n\\nfunction setup() {\\n  for (let i = 0; i < 5; i++) {\\n    console.log(data.bytes[i].toString(16));\\n  }\\n}\\n</code></div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Input'\n              },\n              {\n                file: 'src/io/files.js',\n                line: 778,\n                description:\n                  '<p>Method for executing an HTTP GET request. If data type is not specified,\\np5 will try to guess based on the URL, defaulting to text. This is equivalent to\\ncalling <code>httpDo(path, &#39;GET&#39;)</code>. The &#39;binary&#39; datatype will return\\na Blob object, and the &#39;arrayBuffer&#39; datatype will return an ArrayBuffer\\nwhich can be used to initialize typed arrays (such as Uint8Array).</p>\\n',\n                itemtype: 'method',\n                name: 'httpGet',\n                return: {\n                  description:\n                    'A promise that resolves with the data when the operation\\n                  completes successfully or rejects with the error after\\n                  one occurs.',\n                  type: 'Promise'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\n// Examples use USGS Earthquake API:\\n//   https://earthquake.usgs.gov/fdsnws/event/1/#methods\\nlet earthquakes;\\nfunction preload() {\\n  // Get the most recent earthquake in the database\\n  let url =\\n   'https://earthquake.usgs.gov/fdsnws/event/1/query?' +\\n    'format=geojson&limit=1&orderby=time';\\n  httpGet(url, 'jsonp', false, function(response) {\\n    // when the HTTP request completes, populate the variable that holds the\\n    // earthquake data used in the visualization.\\n    earthquakes = response;\\n  });\\n}\\n\\nfunction draw() {\\n  if (!earthquakes) {\\n    // Wait until the earthquake data has loaded before drawing.\\n    return;\\n  }\\n  background(200);\\n  // Get the magnitude and name of the earthquake out of the loaded JSON\\n  let earthquakeMag = earthquakes.features[0].properties.mag;\\n  let earthquakeName = earthquakes.features[0].properties.place;\\n  ellipse(width / 2, height / 2, earthquakeMag * 10, earthquakeMag * 10);\\n  textAlign(CENTER);\\n  text(earthquakeName, 0, height - 30, width, 30);\\n  noLoop();\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Input',\n                overloads: [\n                  {\n                    line: 778,\n                    params: [\n                      {\n                        name: 'path',\n                        description: '<p>name of the file or url to load</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'datatype',\n                        description:\n                          '<p>&quot;json&quot;, &quot;jsonp&quot;, &quot;binary&quot;, &quot;arrayBuffer&quot;,\\n                                   &quot;xml&quot;, or &quot;text&quot;</p>\\n',\n                        type: 'String',\n                        optional: true\n                      },\n                      {\n                        name: 'data',\n                        description: '<p>param data passed sent with request</p>\\n',\n                        type: 'Object|Boolean',\n                        optional: true\n                      },\n                      {\n                        name: 'callback',\n                        description:\n                          '<p>function to be executed after\\n                                   <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in\\n                                   as first argument</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      },\n                      {\n                        name: 'errorCallback',\n                        description:\n                          '<p>function to be executed if\\n                                   there is an error, response is passed\\n                                   in as first argument</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description:\n                        'A promise that resolves with the data when the operation\\n                  completes successfully or rejects with the error after\\n                  one occurs.',\n                      type: 'Promise'\n                    }\n                  },\n                  {\n                    line: 832,\n                    params: [\n                      {\n                        name: 'path',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'data',\n                        description: '',\n                        type: 'Object|Boolean'\n                      },\n                      {\n                        name: 'callback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      },\n                      {\n                        name: 'errorCallback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'Promise'\n                    }\n                  },\n                  {\n                    line: 840,\n                    params: [\n                      {\n                        name: 'path',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'callback',\n                        description: '',\n                        type: 'Function'\n                      },\n                      {\n                        name: 'errorCallback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'Promise'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/io/files.js',\n                line: 855,\n                description:\n                  '<p>Method for executing an HTTP POST request. If data type is not specified,\\np5 will try to guess based on the URL, defaulting to text. This is equivalent to\\ncalling <code>httpDo(path, &#39;POST&#39;)</code>.</p>\\n',\n                itemtype: 'method',\n                name: 'httpPost',\n                return: {\n                  description:\n                    'A promise that resolves with the data when the operation\\n                  completes successfully or rejects with the error after\\n                  one occurs.',\n                  type: 'Promise'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\n// Examples use jsonplaceholder.typicode.com for a Mock Data API\\n\\nlet url = 'https://jsonplaceholder.typicode.com/posts';\\nlet postData = { userId: 1, title: 'p5 Clicked!', body: 'p5.js is way cool.' };\\n\\nfunction setup() {\\n  createCanvas(800, 800);\\n}\\n\\nfunction mousePressed() {\\n  // Pick new random color values\\n  let r = random(255);\\n  let g = random(255);\\n  let b = random(255);\\n\\n  httpPost(url, 'json', postData, function(result) {\\n    strokeWeight(2);\\n    stroke(r, g, b);\\n    fill(r, g, b, 127);\\n    ellipse(mouseX, mouseY, 200, 200);\\n    text(result.body, mouseX, mouseY);\\n  });\\n}\\n</code>\\n</div>\\n\\n\\n<div><code>\\nlet url = 'https://invalidURL'; // A bad URL that will cause errors\\nlet postData = { title: 'p5 Clicked!', body: 'p5.js is way cool.' };\\n\\nfunction setup() {\\n  createCanvas(800, 800);\\n}\\n\\nfunction mousePressed() {\\n  // Pick new random color values\\n  let r = random(255);\\n  let g = random(255);\\n  let b = random(255);\\n\\n  httpPost(\\n    url,\\n    'json',\\n    postData,\\n    function(result) {\\n      // ... won't be called\\n    },\\n    function(error) {\\n      strokeWeight(2);\\n      stroke(r, g, b);\\n      fill(r, g, b, 127);\\n      text(error.toString(), mouseX, mouseY);\\n    }\\n  );\\n}\\n</code></div>\\n\"\n                ],\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Input',\n                overloads: [\n                  {\n                    line: 855,\n                    params: [\n                      {\n                        name: 'path',\n                        description: '<p>name of the file or url to load</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'datatype',\n                        description:\n                          '<p>&quot;json&quot;, &quot;jsonp&quot;, &quot;xml&quot;, or &quot;text&quot;.\\n                                   If omitted, <a href=\"#/p5/httpPost\">httpPost()</a> will guess.</p>\\n',\n                        type: 'String',\n                        optional: true\n                      },\n                      {\n                        name: 'data',\n                        description: '<p>param data passed sent with request</p>\\n',\n                        type: 'Object|Boolean',\n                        optional: true\n                      },\n                      {\n                        name: 'callback',\n                        description:\n                          '<p>function to be executed after\\n                                   <a href=\"#/p5/httpPost\">httpPost()</a> completes, data is passed in\\n                                   as first argument</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      },\n                      {\n                        name: 'errorCallback',\n                        description:\n                          '<p>function to be executed if\\n                                   there is an error, response is passed\\n                                   in as first argument</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description:\n                        'A promise that resolves with the data when the operation\\n                  completes successfully or rejects with the error after\\n                  one occurs.',\n                      type: 'Promise'\n                    }\n                  },\n                  {\n                    line: 937,\n                    params: [\n                      {\n                        name: 'path',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'data',\n                        description: '',\n                        type: 'Object|Boolean'\n                      },\n                      {\n                        name: 'callback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      },\n                      {\n                        name: 'errorCallback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'Promise'\n                    }\n                  },\n                  {\n                    line: 945,\n                    params: [\n                      {\n                        name: 'path',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'callback',\n                        description: '',\n                        type: 'Function'\n                      },\n                      {\n                        name: 'errorCallback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'Promise'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/io/files.js',\n                line: 960,\n                description:\n                  '<p>Method for executing an HTTP request. If data type is not specified,\\np5 will try to guess based on the URL, defaulting to text.<br><br>\\nFor more advanced use, you may also pass in the path as the first argument\\nand a object as the second argument, the signature follows the one specified\\nin the Fetch API specification.\\nThis method is suitable for fetching files up to size of 64MB when &quot;GET&quot; is used.</p>\\n',\n                itemtype: 'method',\n                name: 'httpDo',\n                return: {\n                  description:\n                    'A promise that resolves with the data when the operation\\n                  completes successfully or rejects with the error after\\n                  one occurs.',\n                  type: 'Promise'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\n// Examples use USGS Earthquake API:\\n// https://earthquake.usgs.gov/fdsnws/event/1/#methods\\n\\n// displays an animation of all USGS earthquakes\\nlet earthquakes;\\nlet eqFeatureIndex = 0;\\n\\nfunction preload() {\\n  let url = 'https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson';\\n  httpDo(\\n    url,\\n    {\\n      method: 'GET',\\n      // Other Request options, like special headers for apis\\n      headers: { authorization: 'Bearer secretKey' }\\n    },\\n    function(res) {\\n      earthquakes = res;\\n    }\\n  );\\n}\\n\\nfunction draw() {\\n  // wait until the data is loaded\\n  if (!earthquakes || !earthquakes.features[eqFeatureIndex]) {\\n    return;\\n  }\\n  clear();\\n\\n  let feature = earthquakes.features[eqFeatureIndex];\\n  let mag = feature.properties.mag;\\n  let rad = mag / 11 * ((width + height) / 2);\\n  fill(255, 0, 0, 100);\\n  ellipse(width / 2 + random(-2, 2), height / 2 + random(-2, 2), rad, rad);\\n\\n  if (eqFeatureIndex >= earthquakes.features.length) {\\n    eqFeatureIndex = 0;\\n  } else {\\n    eqFeatureIndex += 1;\\n  }\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Input',\n                overloads: [\n                  {\n                    line: 960,\n                    params: [\n                      {\n                        name: 'path',\n                        description: '<p>name of the file or url to load</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'method',\n                        description:\n                          '<p>either &quot;GET&quot;, &quot;POST&quot;, or &quot;PUT&quot;,\\n                                   defaults to &quot;GET&quot;</p>\\n',\n                        type: 'String',\n                        optional: true\n                      },\n                      {\n                        name: 'datatype',\n                        description:\n                          '<p>&quot;json&quot;, &quot;jsonp&quot;, &quot;xml&quot;, or &quot;text&quot;</p>\\n',\n                        type: 'String',\n                        optional: true\n                      },\n                      {\n                        name: 'data',\n                        description: '<p>param data passed sent with request</p>\\n',\n                        type: 'Object',\n                        optional: true\n                      },\n                      {\n                        name: 'callback',\n                        description:\n                          '<p>function to be executed after\\n                                   <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in\\n                                   as first argument</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      },\n                      {\n                        name: 'errorCallback',\n                        description:\n                          '<p>function to be executed if\\n                                   there is an error, response is passed\\n                                   in as first argument</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description:\n                        'A promise that resolves with the data when the operation\\n                  completes successfully or rejects with the error after\\n                  one occurs.',\n                      type: 'Promise'\n                    }\n                  },\n                  {\n                    line: 1031,\n                    params: [\n                      {\n                        name: 'path',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'options',\n                        description:\n                          '<p>Request object options as documented in the\\n                                   &quot;fetch&quot; API\\n<a href=\"https://developer.mozilla.org/en/docs/Web/API/Fetch_API\">reference</a></p>\\n',\n                        type: 'Object'\n                      },\n                      {\n                        name: 'callback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      },\n                      {\n                        name: 'errorCallback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'Promise'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/io/files.js',\n                line: 1193,\n                itemtype: 'method',\n                name: 'createWriter',\n                params: [\n                  {\n                    name: 'name',\n                    description: '<p>name of the file to be created</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'extension',\n                    description: '',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: '',\n                  type: 'p5.PrintWriter'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100);\\n  background(200);\\n  text('click here to save', 10, 10, 70, 80);\\n}\\n\\nfunction mousePressed() {\\n  if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\\n    var writer = createWriter('squares.txt');\\n    for (let i = 0; i < 10; i++) {\\n      writer.print(i * i);\\n    }\\n    writer.close();\\n    writer.clear();\\n  }\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Output'\n              },\n              {\n                file: 'src/io/files.js',\n                line: 1248,\n                description: '<p>Writes data to the PrintWriter stream</p>\\n',\n                itemtype: 'method',\n                name: 'write',\n                params: [\n                  {\n                    name: 'data',\n                    description: '<p>all data to be written by the PrintWriter</p>\\n',\n                    type: 'Array'\n                  }\n                ],\n                example: [\n                  \"\\n<div class=\\\"norender notest\\\">\\n<code>\\n// creates a file called 'newFile.txt'\\nlet writer = createWriter('newFile.txt');\\n// write 'Hello world!'' to the file\\nwriter.write(['Hello world!']);\\n// close the PrintWriter and save the file\\nwriter.close();\\n</code>\\n</div>\\n<div class='norender notest'>\\n<code>\\n// creates a file called 'newFile2.txt'\\nlet writer = createWriter('newFile2.txt');\\n// write 'apples,bananas,123' to the file\\nwriter.write(['apples', 'bananas', 123]);\\n// close the PrintWriter and save the file\\nwriter.close();\\n</code>\\n</div>\\n<div class='norender notest'>\\n<code>\\n// creates a file called 'newFile3.txt'\\nlet writer = createWriter('newFile3.txt');\\n// write 'My name is: Teddy' to the file\\nwriter.write('My name is:');\\nwriter.write(' Teddy');\\n// close the PrintWriter and save the file\\nwriter.close();\\n</code>\\n</div>\"\n                ],\n                class: 'p5.PrintWriter',\n                module: 'IO',\n                submodule: 'Output'\n              },\n              {\n                file: 'src/io/files.js',\n                line: 1288,\n                description:\n                  '<p>Writes data to the PrintWriter stream, and adds a new line at the end</p>\\n',\n                itemtype: 'method',\n                name: 'print',\n                params: [\n                  {\n                    name: 'data',\n                    description: '<p>all data to be printed by the PrintWriter</p>\\n',\n                    type: 'Array'\n                  }\n                ],\n                example: [\n                  \"\\n<div class='norender notest'>\\n<code>\\n// creates a file called 'newFile.txt'\\nlet writer = createWriter('newFile.txt');\\n// creates a file containing\\n//  My name is:\\n//  Teddy\\nwriter.print('My name is:');\\nwriter.print('Teddy');\\n// close the PrintWriter and save the file\\nwriter.close();\\n</code>\\n</div>\\n<div class='norender notest'>\\n<code>\\nlet writer;\\n\\nfunction setup() {\\n  createCanvas(400, 400);\\n  // create a PrintWriter\\n  writer = createWriter('newFile.txt');\\n}\\n\\nfunction draw() {\\n  // print all mouseX and mouseY coordinates to the stream\\n  writer.print([mouseX, mouseY]);\\n}\\n\\nfunction mouseClicked() {\\n  // close the PrintWriter and save the file\\n  writer.close();\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.PrintWriter',\n                module: 'IO',\n                submodule: 'Output'\n              },\n              {\n                file: 'src/io/files.js',\n                line: 1331,\n                description:\n                  '<p>Clears the data already written to the PrintWriter object</p>\\n',\n                itemtype: 'method',\n                name: 'clear',\n                example: [\n                  \"\\n<div class =\\\"norender notest\\\"><code>\\n// create writer object\\nlet writer = createWriter('newFile.txt');\\nwriter.write(['clear me']);\\n// clear writer object here\\nwriter.clear();\\n// close writer\\nwriter.close();\\n</code></div>\\n\"\n                ],\n                class: 'p5.PrintWriter',\n                module: 'IO',\n                submodule: 'Output'\n              },\n              {\n                file: 'src/io/files.js',\n                line: 1349,\n                description: '<p>Closes the PrintWriter</p>\\n',\n                itemtype: 'method',\n                name: 'close',\n                example: [\n                  \"\\n<div class=\\\"norender notest\\\">\\n<code>\\n// create a file called 'newFile.txt'\\nlet writer = createWriter('newFile.txt');\\n// close the PrintWriter and save the file\\nwriter.close();\\n</code>\\n</div>\\n<div class='norender notest'>\\n<code>\\n// create a file called 'newFile2.txt'\\nlet writer = createWriter('newFile2.txt');\\n// write some data to the file\\nwriter.write([100, 101, 102]);\\n// close the PrintWriter and save the file\\nwriter.close();\\n</code>\\n</div>\"\n                ],\n                class: 'p5.PrintWriter',\n                module: 'IO',\n                submodule: 'Output'\n              },\n              {\n                file: 'src/io/files.js',\n                line: 1398,\n                description:\n                  \"<p>Save an image, text, json, csv, wav, or html. Prompts download to\\nthe client&#39;s computer. <b>Note that it is not recommended to call <a href=\\\"#/p5/save\\\">save()</a>\\nwithin draw if it&#39;s looping, as the <a href=\\\"#/p5/save\\\">save()</a> function will open a new save\\ndialog every frame.</b></p>\\n<p>The default behavior is to save the canvas as an image. You can\\noptionally specify a filename.\\nFor example:</p>\\n <pre class='language-javascript'><code>\\n save();\\n save(&#39;myCanvas.jpg&#39;); // save a specific canvas with a filename\\n </code></pre>\\n\\n<p>Alternately, the first parameter can be a pointer to a canvas\\n<a href=\\\"#/p5.Element\\\">p5.Element</a>, an Array of Strings,\\nan Array of JSON, a JSON object, a <a href=\\\"#/p5.Table\\\">p5.Table</a>, a <a href=\\\"#/p5.Image\\\">p5.Image</a>, or a\\np5.SoundFile (requires p5.sound). The second parameter is a filename\\n(including extension). The third parameter is for options specific\\nto this type of object. This method will save a file that fits the\\ngiven parameters. For example:</p>\\n\\n <pre class='language-javascript'><code>\\n // Saves canvas as an image\\n save('myCanvas.jpg');\\n\\n // Saves pImage as a png image\\n let img = createImage(10, 10);\\n save(img, 'my.png');\\n\\n // Saves canvas as an image\\n let cnv = createCanvas(100, 100);\\n save(cnv, 'myCanvas.jpg');\\n\\n // Saves p5.Renderer object as an image\\n let gb = createGraphics(100, 100);\\n save(gb, 'myGraphics.jpg');\\n\\n let myTable = new p5.Table();\\n\\n // Saves table as html file\\n save(myTable, 'myTable.html');\\n\\n // Comma Separated Values\\n save(myTable, 'myTable.csv');\\n\\n // Tab Separated Values\\n save(myTable, 'myTable.tsv');\\n\\n let myJSON = { a: 1, b: true };\\n\\n // Saves pretty JSON\\n save(myJSON, 'my.json');\\n\\n // Optimizes JSON filesize\\n save(myJSON, 'my.json', true);\\n\\n // Saves array of strings to a text file with line breaks after each item\\n let arrayOfStrings = ['a', 'b'];\\n save(arrayOfStrings, 'my.txt');\\n </code></pre>\",\n                itemtype: 'method',\n                name: 'save',\n                params: [\n                  {\n                    name: 'objectOrFilename',\n                    description:\n                      '<p>If filename is provided, will\\n                                           save canvas as an image with\\n                                           either png or jpg extension\\n                                           depending on the filename.\\n                                           If object is provided, will\\n                                           save depending on the object\\n                                           and filename (see examples\\n                                           above).</p>\\n',\n                    type: 'Object|String',\n                    optional: true\n                  },\n                  {\n                    name: 'filename',\n                    description:\n                      '<p>If an object is provided as the first\\n                             parameter, then the second parameter\\n                             indicates the filename,\\n                             and should include an appropriate\\n                             file extension (see examples above).</p>\\n',\n                    type: 'String',\n                    optional: true\n                  },\n                  {\n                    name: 'options',\n                    description:\n                      '<p>Additional options depend on\\n                          filetype. For example, when saving JSON,\\n                          <code>true</code> indicates that the\\n                          output will be optimized for filesize,\\n                          rather than readability.</p>\\n',\n                    type: 'Boolean|String',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Output'\n              },\n              {\n                file: 'src/io/files.js',\n                line: 1526,\n                description:\n                  '<p>Writes the contents of an Array or a JSON object to a .json file.\\nThe file saving process and location of the saved file will\\nvary between web browsers.</p>\\n',\n                itemtype: 'method',\n                name: 'saveJSON',\n                params: [\n                  {\n                    name: 'json',\n                    description: '',\n                    type: 'Array|Object'\n                  },\n                  {\n                    name: 'filename',\n                    description: '',\n                    type: 'String'\n                  },\n                  {\n                    name: 'optimize',\n                    description:\n                      '<p>If true, removes line breaks\\n                               and spaces from the output\\n                               file to optimize filesize\\n                               (but not readability).</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n <div><code>\\n let json = {}; // new  JSON Object\\n\\n json.id = 0;\\n json.species = \\'Panthera leo\\';\\n json.name = \\'Lion\\';\\n\\n function setup() {\\n createCanvas(100, 100);\\n background(200);\\n text(\\'click here to save\\', 10, 10, 70, 80);\\n }\\n\\n function mousePressed() {\\n if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\\n   saveJSON(json, \\'lion.json\\');\\n }\\n }\\n\\n // saves the following to a file called \"lion.json\":\\n // {\\n //   \"id\": 0,\\n //   \"species\": \"Panthera leo\",\\n //   \"name\": \"Lion\"\\n // }\\n </code></div>'\n                ],\n                alt: 'no image displayed',\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Output'\n              },\n              {\n                file: 'src/io/files.js',\n                line: 1584,\n                description:\n                  '<p>Writes an array of Strings to a text file, one line per String.\\nThe file saving process and location of the saved file will\\nvary between web browsers.</p>\\n',\n                itemtype: 'method',\n                name: 'saveStrings',\n                params: [\n                  {\n                    name: 'list',\n                    description: '<p>string array to be written</p>\\n',\n                    type: 'String[]'\n                  },\n                  {\n                    name: 'filename',\n                    description: '<p>filename for output</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'extension',\n                    description: '<p>the filename&#39;s extension</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n <div><code>\\n let words = 'apple bear cat dog';\\n\\n // .split() outputs an Array\\n let list = split(words, ' ');\\n\\n function setup() {\\n createCanvas(100, 100);\\n background(200);\\n text('click here to save', 10, 10, 70, 80);\\n }\\n\\n function mousePressed() {\\n if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\\n   saveStrings(list, 'nouns.txt');\\n }\\n }\\n\\n // Saves the following to a file called 'nouns.txt':\\n //\\n // apple\\n // bear\\n // cat\\n // dog\\n </code></div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Output'\n              },\n              {\n                file: 'src/io/files.js',\n                line: 1652,\n                description:\n                  '<p>Writes the contents of a <a href=\"#/p5.Table\">Table</a> object to a file. Defaults to a\\ntext file with comma-separated-values (&#39;csv&#39;) but can also\\nuse tab separation (&#39;tsv&#39;), or generate an HTML table (&#39;html&#39;).\\nThe file saving process and location of the saved file will\\nvary between web browsers.</p>\\n',\n                itemtype: 'method',\n                name: 'saveTable',\n                params: [\n                  {\n                    name: 'Table',\n                    description:\n                      '<p>the <a href=\"#/p5.Table\">Table</a> object to save to a file</p>\\n',\n                    type: 'p5.Table'\n                  },\n                  {\n                    name: 'filename',\n                    description: '<p>the filename to which the Table should be saved</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'options',\n                    description:\n                      '<p>can be one of &quot;tsv&quot;, &quot;csv&quot;, or &quot;html&quot;</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\n let table;\\n\\n function setup() {\\n table = new p5.Table();\\n\\n table.addColumn('id');\\n table.addColumn('species');\\n table.addColumn('name');\\n\\n let newRow = table.addRow();\\n newRow.setNum('id', table.getRowCount() - 1);\\n newRow.setString('species', 'Panthera leo');\\n newRow.setString('name', 'Lion');\\n\\n // To save, un-comment next line then click 'run'\\n // saveTable(table, 'new.csv');\\n }\\n\\n // Saves the following to a file called 'new.csv':\\n // id,species,name\\n // 0,Panthera leo,Lion\\n </code></div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Output'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 11,\n                description:\n                  '<p>Table Options</p>\\n<p>Generic class for handling tabular data, typically from a\\nCSV, TSV, or other sort of spreadsheet file.</p>\\n<p>CSV files are\\n<a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">\\ncomma separated values</a>, often with the data in quotes. TSV\\nfiles use tabs as separators, and usually don&#39;t bother with the\\nquotes.</p>\\n<p>File names should end with .csv if they&#39;re comma separated.</p>\\n<p>A rough &quot;spec&quot; for CSV can be found\\n<a href=\"http://tools.ietf.org/html/rfc4180\">here</a>.</p>\\n<p>To load files, use the <a href=\"#/p5/loadTable\">loadTable</a> method.</p>\\n<p>To save tables to your computer, use the <a href=\"#/p5/save\">save</a> method\\n or the <a href=\"#/p5/saveTable\">saveTable</a> method.</p>\\n\\n<p>Possible options include:</p>\\n<ul>\\n<li>csv - parse the table as comma-separated values\\n<li>tsv - parse the table as tab-separated values\\n<li>header - this table has a header (title) row\\n</ul>',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 45,\n                itemtype: 'property',\n                name: 'columns',\n                type: 'String[]',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 50,\n                itemtype: 'property',\n                name: 'rows',\n                type: 'p5.TableRow[]',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 56,\n                description:\n                  '<p>Use <a href=\"#/p5/addRow\">addRow()</a> to add a new row of data to a <a href=\"#/p5.Table\">p5.Table</a> object. By default,\\nan empty row is created. Typically, you would store a reference to\\nthe new row in a TableRow object (see newRow in the example above),\\nand then set individual values using <a href=\"#/p5/set\">set()</a>.</p>\\n<p>If a <a href=\"#/p5.TableRow\">p5.TableRow</a> object is included as a parameter, then that row is\\nduplicated and added to the table.</p>\\n',\n                itemtype: 'method',\n                name: 'addRow',\n                params: [\n                  {\n                    name: 'row',\n                    description: '<p>row to be added to the table</p>\\n',\n                    type: 'p5.TableRow',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'the row that was added',\n                  type: 'p5.TableRow'\n                },\n                example: [\n                  \"\\n <div class=\\\"norender\\\">\\n <code>\\n // Given the CSV file \\\"mammals.csv\\\"\\n // in the project's \\\"assets\\\" folder:\\n //\\n // id,species,name\\n // 0,Capra hircus,Goat\\n // 1,Panthera pardus,Leopard\\n // 2,Equus zebra,Zebra\\n\\n let table;\\n\\n function preload() {\\n //my table is comma separated value \\\"csv\\\"\\n //and has a header specifying the columns labels\\n table = loadTable('assets/mammals.csv', 'csv', 'header');\\n }\\n\\n function setup() {\\n //add a row\\n let newRow = table.addRow();\\n newRow.setString('id', table.getRowCount() - 1);\\n newRow.setString('species', 'Canis Lupus');\\n newRow.setString('name', 'Wolf');\\n\\n //print the results\\n for (let r = 0; r < table.getRowCount(); r++)\\n   for (let c = 0; c < table.getColumnCount(); c++)\\n     print(table.getString(r, c));\\n }\\n </code>\\n </div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 120,\n                description: '<p>Removes a row from the table object.</p>\\n',\n                itemtype: 'method',\n                name: 'removeRow',\n                params: [\n                  {\n                    name: 'id',\n                    description: '<p>ID number of the row to remove</p>\\n',\n                    type: 'Integer'\n                  }\n                ],\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\n// Given the CSV file \"mammals.csv\"\\n// in the project\\'s \"assets\" folder:\\n//\\n// id,species,name\\n// 0,Capra hircus,Goat\\n// 1,Panthera pardus,Leopard\\n// 2,Equus zebra,Zebra\\n\\nlet table;\\n\\nfunction preload() {\\n  //my table is comma separated value \"csv\"\\n  //and has a header specifying the columns labels\\n  table = loadTable(\\'assets/mammals.csv\\', \\'csv\\', \\'header\\');\\n}\\n\\nfunction setup() {\\n  //remove the first row\\n  table.removeRow(0);\\n\\n  //print the results\\n  for (let r = 0; r < table.getRowCount(); r++)\\n    for (let c = 0; c < table.getColumnCount(); c++)\\n      print(table.getString(r, c));\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'no image displayed',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 168,\n                description:\n                  '<p>Returns a reference to the specified <a href=\"#/p5.TableRow\">p5.TableRow</a>. The reference\\ncan then be used to get and set values of the selected row.</p>\\n',\n                itemtype: 'method',\n                name: 'getRow',\n                params: [\n                  {\n                    name: 'rowID',\n                    description: '<p>ID number of the row to get</p>\\n',\n                    type: 'Integer'\n                  }\n                ],\n                return: {\n                  description: '<a href=\"#/p5.TableRow\">p5.TableRow</a> object',\n                  type: 'p5.TableRow'\n                },\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\n// Given the CSV file \"mammals.csv\"\\n// in the project\\'s \"assets\" folder:\\n//\\n// id,species,name\\n// 0,Capra hircus,Goat\\n// 1,Panthera pardus,Leopard\\n// 2,Equus zebra,Zebra\\n\\nlet table;\\n\\nfunction preload() {\\n  //my table is comma separated value \"csv\"\\n  //and has a header specifying the columns labels\\n  table = loadTable(\\'assets/mammals.csv\\', \\'csv\\', \\'header\\');\\n}\\n\\nfunction setup() {\\n  let row = table.getRow(1);\\n  //print it column by column\\n  //note: a row is an object, not an array\\n  for (let c = 0; c < table.getColumnCount(); c++) {\\n    print(row.getString(c));\\n  }\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'no image displayed',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 214,\n                description:\n                  '<p>Gets all rows from the table. Returns an array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s.</p>\\n',\n                itemtype: 'method',\n                name: 'getRows',\n                return: {\n                  description: 'Array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s',\n                  type: 'p5.TableRow[]'\n                },\n                example: [\n                  \"\\n <div class=\\\"norender\\\">\\n <code>\\n // Given the CSV file \\\"mammals.csv\\\"\\n // in the project's \\\"assets\\\" folder:\\n //\\n // id,species,name\\n // 0,Capra hircus,Goat\\n // 1,Panthera pardus,Leopard\\n // 2,Equus zebra,Zebra\\n\\n let table;\\n\\n function preload() {\\n //my table is comma separated value \\\"csv\\\"\\n //and has a header specifying the columns labels\\n table = loadTable('assets/mammals.csv', 'csv', 'header');\\n }\\n\\n function setup() {\\n let rows = table.getRows();\\n\\n //warning: rows is an array of objects\\n for (let r = 0; r < rows.length; r++) {\\n   rows[r].set('name', 'Unicorn');\\n }\\n\\n //print the results\\n for (let r = 0; r < table.getRowCount(); r++)\\n   for (let c = 0; c < table.getColumnCount(); c++)\\n     print(table.getString(r, c));\\n }\\n </code>\\n </div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 263,\n                description:\n                  '<p>Finds the first row in the Table that contains the value\\nprovided, and returns a reference to that row. Even if\\nmultiple rows are possible matches, only the first matching\\nrow is returned. The column to search may be specified by\\neither its ID or title.</p>\\n',\n                itemtype: 'method',\n                name: 'findRow',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>The value to match</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>ID number or title of the\\n                               column to search</p>\\n',\n                    type: 'Integer|String'\n                  }\n                ],\n                return: {\n                  description: '',\n                  type: 'p5.TableRow'\n                },\n                example: [\n                  \"\\n <div class=\\\"norender\\\">\\n <code>\\n // Given the CSV file \\\"mammals.csv\\\"\\n // in the project's \\\"assets\\\" folder:\\n //\\n // id,species,name\\n // 0,Capra hircus,Goat\\n // 1,Panthera pardus,Leopard\\n // 2,Equus zebra,Zebra\\n\\n let table;\\n\\n function preload() {\\n //my table is comma separated value \\\"csv\\\"\\n //and has a header specifying the columns labels\\n table = loadTable('assets/mammals.csv', 'csv', 'header');\\n }\\n\\n function setup() {\\n //find the animal named zebra\\n let row = table.findRow('Zebra', 'name');\\n //find the corresponding species\\n print(row.getString('species'));\\n }\\n </code>\\n </div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 328,\n                description:\n                  '<p>Finds the rows in the Table that contain the value\\nprovided, and returns references to those rows. Returns an\\nArray, so for must be used to iterate through all the rows,\\nas shown in the example above. The column to search may be\\nspecified by either its ID or title.</p>\\n',\n                itemtype: 'method',\n                name: 'findRows',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>The value to match</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>ID number or title of the\\n                               column to search</p>\\n',\n                    type: 'Integer|String'\n                  }\n                ],\n                return: {\n                  description: 'An Array of TableRow objects',\n                  type: 'p5.TableRow[]'\n                },\n                example: [\n                  \"\\n <div class=\\\"norender\\\">\\n <code>\\n // Given the CSV file \\\"mammals.csv\\\"\\n // in the project's \\\"assets\\\" folder:\\n //\\n // id,species,name\\n // 0,Capra hircus,Goat\\n // 1,Panthera pardus,Leopard\\n // 2,Equus zebra,Zebra\\n\\n let table;\\n\\n function preload() {\\n //my table is comma separated value \\\"csv\\\"\\n //and has a header specifying the columns labels\\n table = loadTable('assets/mammals.csv', 'csv', 'header');\\n }\\n\\n function setup() {\\n //add another goat\\n let newRow = table.addRow();\\n newRow.setString('id', table.getRowCount() - 1);\\n newRow.setString('species', 'Scape Goat');\\n newRow.setString('name', 'Goat');\\n\\n //find the rows containing animals named Goat\\n let rows = table.findRows('Goat', 'name');\\n print(rows.length + ' Goats found');\\n }\\n </code>\\n </div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 397,\n                description:\n                  '<p>Finds the first row in the Table that matches the regular\\nexpression provided, and returns a reference to that row.\\nEven if multiple rows are possible matches, only the first\\nmatching row is returned. The column to search may be\\nspecified by either its ID or title.</p>\\n',\n                itemtype: 'method',\n                name: 'matchRow',\n                params: [\n                  {\n                    name: 'regexp',\n                    description: '<p>The regular expression to match</p>\\n',\n                    type: 'String|RegExp'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>The column ID (number) or\\n                                 title (string)</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                return: {\n                  description: 'TableRow object',\n                  type: 'p5.TableRow'\n                },\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\n// Given the CSV file \"mammals.csv\"\\n// in the project\\'s \"assets\" folder:\\n//\\n// id,species,name\\n// 0,Capra hircus,Goat\\n// 1,Panthera pardus,Leopard\\n// 2,Equus zebra,Zebra\\n\\nlet table;\\n\\nfunction preload() {\\n  //my table is comma separated value \"csv\"\\n  //and has a header specifying the columns labels\\n  table = loadTable(\\'assets/mammals.csv\\', \\'csv\\', \\'header\\');\\n}\\n\\nfunction setup() {\\n  //Search using specified regex on a given column, return TableRow object\\n  let mammal = table.matchRow(new RegExp(\\'ant\\'), 1);\\n  print(mammal.getString(1));\\n  //Output \"Panthera pardus\"\\n}\\n</code>\\n</div>\\n'\n                ],\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 456,\n                description:\n                  '<p>Finds the rows in the Table that match the regular expression provided,\\nand returns references to those rows. Returns an array, so for must be\\nused to iterate through all the rows, as shown in the example. The\\ncolumn to search may be specified by either its ID or title.</p>\\n',\n                itemtype: 'method',\n                name: 'matchRows',\n                params: [\n                  {\n                    name: 'regexp',\n                    description: '<p>The regular expression to match</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>The column ID (number) or\\n                                 title (string)</p>\\n',\n                    type: 'String|Integer',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'An Array of TableRow objects',\n                  type: 'p5.TableRow[]'\n                },\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nlet table;\\n\\nfunction setup() {\\n  table = new p5.Table();\\n\\n  table.addColumn('name');\\n  table.addColumn('type');\\n\\n  let newRow = table.addRow();\\n  newRow.setString('name', 'Lion');\\n  newRow.setString('type', 'Mammal');\\n\\n  newRow = table.addRow();\\n  newRow.setString('name', 'Snake');\\n  newRow.setString('type', 'Reptile');\\n\\n  newRow = table.addRow();\\n  newRow.setString('name', 'Mosquito');\\n  newRow.setString('type', 'Insect');\\n\\n  newRow = table.addRow();\\n  newRow.setString('name', 'Lizard');\\n  newRow.setString('type', 'Reptile');\\n\\n  let rows = table.matchRows('R.*', 'type');\\n  for (let i = 0; i < rows.length; i++) {\\n    print(rows[i].getString('name') + ': ' + rows[i].getString('type'));\\n  }\\n}\\n// Sketch prints:\\n// Snake: Reptile\\n// Lizard: Reptile\\n</code>\\n</div>\"\n                ],\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 523,\n                description:\n                  '<p>Retrieves all values in the specified column, and returns them\\nas an array. The column may be specified by either its ID or title.</p>\\n',\n                itemtype: 'method',\n                name: 'getColumn',\n                params: [\n                  {\n                    name: 'column',\n                    description: '<p>String or Number of the column to return</p>\\n',\n                    type: 'String|Number'\n                  }\n                ],\n                return: {\n                  description: 'Array of column values',\n                  type: 'Array'\n                },\n                example: [\n                  '\\n <div class=\"norender\">\\n <code>\\n // Given the CSV file \"mammals.csv\"\\n // in the project\\'s \"assets\" folder:\\n //\\n // id,species,name\\n // 0,Capra hircus,Goat\\n // 1,Panthera pardus,Leopard\\n // 2,Equus zebra,Zebra\\n\\n let table;\\n\\n function preload() {\\n //my table is comma separated value \"csv\"\\n //and has a header specifying the columns labels\\n table = loadTable(\\'assets/mammals.csv\\', \\'csv\\', \\'header\\');\\n }\\n\\n function setup() {\\n //getColumn returns an array that can be printed directly\\n print(table.getColumn(\\'species\\'));\\n //outputs [\"Capra hircus\", \"Panthera pardus\", \"Equus zebra\"]\\n }\\n </code>\\n </div>'\n                ],\n                alt: 'no image displayed',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 576,\n                description:\n                  '<p>Removes all rows from a Table. While all rows are removed,\\ncolumns and column titles are maintained.</p>\\n',\n                itemtype: 'method',\n                name: 'clearRows',\n                example: [\n                  \"\\n <div class=\\\"norender\\\">\\n <code>\\n // Given the CSV file \\\"mammals.csv\\\"\\n // in the project's \\\"assets\\\" folder:\\n //\\n // id,species,name\\n // 0,Capra hircus,Goat\\n // 1,Panthera pardus,Leopard\\n // 2,Equus zebra,Zebra\\n\\n let table;\\n\\n function preload() {\\n //my table is comma separated value \\\"csv\\\"\\n //and has a header specifying the columns labels\\n table = loadTable('assets/mammals.csv', 'csv', 'header');\\n }\\n\\n function setup() {\\n table.clearRows();\\n print(table.getRowCount() + ' total rows in table');\\n print(table.getColumnCount() + ' total columns in table');\\n }\\n </code>\\n </div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 618,\n                description:\n                  '<p>Use <a href=\"#/p5/addColumn\">addColumn()</a> to add a new column to a <a href=\"#/p5.Table\">Table</a> object.\\nTypically, you will want to specify a title, so the column\\nmay be easily referenced later by name. (If no title is\\nspecified, the new column&#39;s title will be null.)</p>\\n',\n                itemtype: 'method',\n                name: 'addColumn',\n                params: [\n                  {\n                    name: 'title',\n                    description: '<p>title of the given column</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n <div class=\\\"norender\\\">\\n <code>\\n // Given the CSV file \\\"mammals.csv\\\"\\n // in the project's \\\"assets\\\" folder:\\n //\\n // id,species,name\\n // 0,Capra hircus,Goat\\n // 1,Panthera pardus,Leopard\\n // 2,Equus zebra,Zebra\\n\\n let table;\\n\\n function preload() {\\n //my table is comma separated value \\\"csv\\\"\\n //and has a header specifying the columns labels\\n table = loadTable('assets/mammals.csv', 'csv', 'header');\\n }\\n\\n function setup() {\\n table.addColumn('carnivore');\\n table.set(0, 'carnivore', 'no');\\n table.set(1, 'carnivore', 'yes');\\n table.set(2, 'carnivore', 'no');\\n\\n //print the results\\n for (let r = 0; r < table.getRowCount(); r++)\\n   for (let c = 0; c < table.getColumnCount(); c++)\\n     print(table.getString(r, c));\\n }\\n </code>\\n </div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 669,\n                description: '<p>Returns the total number of columns in a Table.</p>\\n',\n                itemtype: 'method',\n                name: 'getColumnCount',\n                return: {\n                  description: 'Number of columns in this table',\n                  type: 'Integer'\n                },\n                example: [\n                  \"\\n <div>\\n <code>\\n // given the cvs file \\\"blobs.csv\\\" in /assets directory\\n // ID, Name, Flavor, Shape, Color\\n // Blob1, Blobby, Sweet, Blob, Pink\\n // Blob2, Saddy, Savory, Blob, Blue\\n\\n let table;\\n\\n function preload() {\\n table = loadTable('assets/blobs.csv');\\n }\\n\\n function setup() {\\n createCanvas(200, 100);\\n textAlign(CENTER);\\n background(255);\\n }\\n\\n function draw() {\\n let numOfColumn = table.getColumnCount();\\n text('There are ' + numOfColumn + ' columns in the table.', 100, 50);\\n }\\n </code>\\n </div>\"\n                ],\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 705,\n                description: '<p>Returns the total number of rows in a Table.</p>\\n',\n                itemtype: 'method',\n                name: 'getRowCount',\n                return: {\n                  description: 'Number of rows in this table',\n                  type: 'Integer'\n                },\n                example: [\n                  \"\\n <div>\\n <code>\\n // given the cvs file \\\"blobs.csv\\\" in /assets directory\\n //\\n // ID, Name, Flavor, Shape, Color\\n // Blob1, Blobby, Sweet, Blob, Pink\\n // Blob2, Saddy, Savory, Blob, Blue\\n\\n let table;\\n\\n function preload() {\\n table = loadTable('assets/blobs.csv');\\n }\\n\\n function setup() {\\n createCanvas(200, 100);\\n textAlign(CENTER);\\n background(255);\\n }\\n\\n function draw() {\\n text('There are ' + table.getRowCount() + ' rows in the table.', 100, 50);\\n }\\n </code>\\n </div>\"\n                ],\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 741,\n                description:\n                  '<p>Removes any of the specified characters (or &quot;tokens&quot;).</p>\\n\\n<p>If no column is specified, then the values in all columns and\\nrows are processed. A specific column may be referenced by\\neither its ID or title.</p>',\n                itemtype: 'method',\n                name: 'removeTokens',\n                params: [\n                  {\n                    name: 'chars',\n                    description: '<p>String listing characters to be removed</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>Column ID (number)\\n                                 or name (string)</p>\\n',\n                    type: 'String|Integer',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n <div class=\\\"norender\\\"><code>\\n function setup() {\\n let table = new p5.Table();\\n\\n table.addColumn('name');\\n table.addColumn('type');\\n\\n let newRow = table.addRow();\\n newRow.setString('name', '   $Lion  ,');\\n newRow.setString('type', ',,,Mammal');\\n\\n newRow = table.addRow();\\n newRow.setString('name', '$Snake  ');\\n newRow.setString('type', ',,,Reptile');\\n\\n table.removeTokens(',$ ');\\n print(table.getArray());\\n }\\n\\n // prints:\\n //  0  \\\"Lion\\\"   \\\"Mamal\\\"\\n //  1  \\\"Snake\\\"  \\\"Reptile\\\"\\n </code></div>\"\n                ],\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 815,\n                description:\n                  '<p>Trims leading and trailing whitespace, such as spaces and tabs,\\nfrom String table values. If no column is specified, then the\\nvalues in all columns and rows are trimmed. A specific column\\nmay be referenced by either its ID or title.</p>\\n',\n                itemtype: 'method',\n                name: 'trim',\n                params: [\n                  {\n                    name: 'column',\n                    description:\n                      '<p>Column ID (number)\\n                                 or name (string)</p>\\n',\n                    type: 'String|Integer',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n <div class=\\\"norender\\\"><code>\\n function setup() {\\n let table = new p5.Table();\\n\\n table.addColumn('name');\\n table.addColumn('type');\\n\\n let newRow = table.addRow();\\n newRow.setString('name', '   Lion  ,');\\n newRow.setString('type', ' Mammal  ');\\n\\n newRow = table.addRow();\\n newRow.setString('name', '  Snake  ');\\n newRow.setString('type', '  Reptile  ');\\n\\n table.trim();\\n print(table.getArray());\\n }\\n\\n // prints:\\n //  0  \\\"Lion\\\"   \\\"Mamal\\\"\\n //  1  \\\"Snake\\\"  \\\"Reptile\\\"\\n </code></div>\"\n                ],\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 879,\n                description:\n                  '<p>Use <a href=\"#/p5/removeColumn\">removeColumn()</a> to remove an existing column from a Table\\nobject. The column to be removed may be identified by either\\nits title (a String) or its index value (an int).\\nremoveColumn(0) would remove the first column, removeColumn(1)\\nwould remove the second column, and so on.</p>\\n',\n                itemtype: 'method',\n                name: 'removeColumn',\n                params: [\n                  {\n                    name: 'column',\n                    description: '<p>columnName (string) or ID (number)</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                example: [\n                  \"\\n <div class=\\\"norender\\\">\\n <code>\\n // Given the CSV file \\\"mammals.csv\\\"\\n // in the project's \\\"assets\\\" folder:\\n //\\n // id,species,name\\n // 0,Capra hircus,Goat\\n // 1,Panthera pardus,Leopard\\n // 2,Equus zebra,Zebra\\n\\n let table;\\n\\n function preload() {\\n //my table is comma separated value \\\"csv\\\"\\n //and has a header specifying the columns labels\\n table = loadTable('assets/mammals.csv', 'csv', 'header');\\n }\\n\\n function setup() {\\n table.removeColumn('id');\\n print(table.getColumnCount());\\n }\\n </code>\\n </div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 944,\n                description:\n                  '<p>Stores a value in the Table&#39;s specified row and column.\\nThe row is specified by its ID, while the column may be specified\\nby either its ID or title.</p>\\n',\n                itemtype: 'method',\n                name: 'set',\n                params: [\n                  {\n                    name: 'row',\n                    description: '<p>row ID</p>\\n',\n                    type: 'Integer'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>column ID (Number)\\n                              or title (String)</p>\\n',\n                    type: 'String|Integer'\n                  },\n                  {\n                    name: 'value',\n                    description: '<p>value to assign</p>\\n',\n                    type: 'String|Number'\n                  }\n                ],\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\n// Given the CSV file \\\"mammals.csv\\\"\\n// in the project's \\\"assets\\\" folder:\\n//\\n// id,species,name\\n// 0,Capra hircus,Goat\\n// 1,Panthera pardus,Leopard\\n// 2,Equus zebra,Zebra\\n\\nlet table;\\n\\nfunction preload() {\\n  //my table is comma separated value \\\"csv\\\"\\n  //and has a header specifying the columns labels\\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\\n}\\n\\nfunction setup() {\\n  table.set(0, 'species', 'Canis Lupus');\\n  table.set(0, 'name', 'Wolf');\\n\\n  //print the results\\n  for (let r = 0; r < table.getRowCount(); r++)\\n    for (let c = 0; c < table.getColumnCount(); c++)\\n      print(table.getString(r, c));\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 994,\n                description:\n                  '<p>Stores a Float value in the Table&#39;s specified row and column.\\nThe row is specified by its ID, while the column may be specified\\nby either its ID or title.</p>\\n',\n                itemtype: 'method',\n                name: 'setNum',\n                params: [\n                  {\n                    name: 'row',\n                    description: '<p>row ID</p>\\n',\n                    type: 'Integer'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>column ID (Number)\\n                              or title (String)</p>\\n',\n                    type: 'String|Integer'\n                  },\n                  {\n                    name: 'value',\n                    description: '<p>value to assign</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\n// Given the CSV file \"mammals.csv\"\\n// in the project\\'s \"assets\" folder:\\n//\\n// id,species,name\\n// 0,Capra hircus,Goat\\n// 1,Panthera pardus,Leopard\\n// 2,Equus zebra,Zebra\\n\\nlet table;\\n\\nfunction preload() {\\n  //my table is comma separated value \"csv\"\\n  //and has a header specifying the columns labels\\n  table = loadTable(\\'assets/mammals.csv\\', \\'csv\\', \\'header\\');\\n}\\n\\nfunction setup() {\\n  table.setNum(1, \\'id\\', 1);\\n\\n  print(table.getColumn(0));\\n  //[\"0\", 1, \"2\"]\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'no image displayed',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 1040,\n                description:\n                  '<p>Stores a String value in the Table&#39;s specified row and column.\\nThe row is specified by its ID, while the column may be specified\\nby either its ID or title.</p>\\n',\n                itemtype: 'method',\n                name: 'setString',\n                params: [\n                  {\n                    name: 'row',\n                    description: '<p>row ID</p>\\n',\n                    type: 'Integer'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>column ID (Number)\\n                              or title (String)</p>\\n',\n                    type: 'String|Integer'\n                  },\n                  {\n                    name: 'value',\n                    description: '<p>value to assign</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                example: [\n                  \"\\n<div class=\\\"norender\\\"><code>\\n// Given the CSV file \\\"mammals.csv\\\" in the project's \\\"assets\\\" folder:\\n//\\n// id,species,name\\n// 0,Capra hircus,Goat\\n// 1,Panthera pardus,Leopard\\n// 2,Equus zebra,Zebra\\n\\nlet table;\\n\\nfunction preload() {\\n  //my table is comma separated value \\\"csv\\\"\\n  //and has a header specifying the columns labels\\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\\n}\\n\\nfunction setup() {\\n  //add a row\\n  let newRow = table.addRow();\\n  newRow.setString('id', table.getRowCount() - 1);\\n  newRow.setString('species', 'Canis Lupus');\\n  newRow.setString('name', 'Wolf');\\n\\n  print(table.getArray());\\n}\\n</code></div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 1085,\n                description:\n                  '<p>Retrieves a value from the Table&#39;s specified row and column.\\nThe row is specified by its ID, while the column may be specified by\\neither its ID or title.</p>\\n',\n                itemtype: 'method',\n                name: 'get',\n                params: [\n                  {\n                    name: 'row',\n                    description: '<p>row ID</p>\\n',\n                    type: 'Integer'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>columnName (string) or\\n                                  ID (number)</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                return: {\n                  description: '',\n                  type: 'String|Number'\n                },\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\n// Given the CSV file \\\"mammals.csv\\\"\\n// in the project's \\\"assets\\\" folder:\\n//\\n// id,species,name\\n// 0,Capra hircus,Goat\\n// 1,Panthera pardus,Leopard\\n// 2,Equus zebra,Zebra\\n\\nlet table;\\n\\nfunction preload() {\\n  //my table is comma separated value \\\"csv\\\"\\n  //and has a header specifying the columns labels\\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\\n}\\n\\nfunction setup() {\\n  print(table.get(0, 1));\\n  //Capra hircus\\n  print(table.get(0, 'species'));\\n  //Capra hircus\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 1132,\n                description:\n                  '<p>Retrieves a Float value from the Table&#39;s specified row and column.\\nThe row is specified by its ID, while the column may be specified by\\neither its ID or title.</p>\\n',\n                itemtype: 'method',\n                name: 'getNum',\n                params: [\n                  {\n                    name: 'row',\n                    description: '<p>row ID</p>\\n',\n                    type: 'Integer'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>columnName (string) or\\n                                  ID (number)</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                return: {\n                  description: '',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\n// Given the CSV file \"mammals.csv\"\\n// in the project\\'s \"assets\" folder:\\n//\\n// id,species,name\\n// 0,Capra hircus,Goat\\n// 1,Panthera pardus,Leopard\\n// 2,Equus zebra,Zebra\\n\\nlet table;\\n\\nfunction preload() {\\n  //my table is comma separated value \"csv\"\\n  //and has a header specifying the columns labels\\n  table = loadTable(\\'assets/mammals.csv\\', \\'csv\\', \\'header\\');\\n}\\n\\nfunction setup() {\\n  print(table.getNum(1, 0) + 100);\\n  //id 1 + 100 = 101\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'no image displayed',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 1177,\n                description:\n                  '<p>Retrieves a String value from the Table&#39;s specified row and column.\\nThe row is specified by its ID, while the column may be specified by\\neither its ID or title.</p>\\n',\n                itemtype: 'method',\n                name: 'getString',\n                params: [\n                  {\n                    name: 'row',\n                    description: '<p>row ID</p>\\n',\n                    type: 'Integer'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>columnName (string) or\\n                                  ID (number)</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                return: {\n                  description: '',\n                  type: 'String'\n                },\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\n// Given the CSV file \"mammals.csv\"\\n// in the project\\'s \"assets\" folder:\\n//\\n// id,species,name\\n// 0,Capra hircus,Goat\\n// 1,Panthera pardus,Leopard\\n// 2,Equus zebra,Zebra\\n\\nlet table;\\n\\nfunction preload() {\\n  // table is comma separated value \"CSV\"\\n  // and has specifiying header for column labels\\n  table = loadTable(\\'assets/mammals.csv\\', \\'csv\\', \\'header\\');\\n}\\n\\nfunction setup() {\\n  print(table.getString(0, 0)); // 0\\n  print(table.getString(0, 1)); // Capra hircus\\n  print(table.getString(0, 2)); // Goat\\n  print(table.getString(1, 0)); // 1\\n  print(table.getString(1, 1)); // Panthera pardus\\n  print(table.getString(1, 2)); // Leopard\\n  print(table.getString(2, 0)); // 2\\n  print(table.getString(2, 1)); // Equus zebra\\n  print(table.getString(2, 2)); // Zebra\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'no image displayed',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 1230,\n                description:\n                  '<p>Retrieves all table data and returns as an object. If a column name is\\npassed in, each row object will be stored with that attribute as its\\ntitle.</p>\\n',\n                itemtype: 'method',\n                name: 'getObject',\n                params: [\n                  {\n                    name: 'headerColumn',\n                    description:\n                      '<p>Name of the column which should be used to\\n                             title each row object (optional)</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: '',\n                  type: 'Object'\n                },\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\n// Given the CSV file \"mammals.csv\"\\n// in the project\\'s \"assets\" folder:\\n//\\n// id,species,name\\n// 0,Capra hircus,Goat\\n// 1,Panthera pardus,Leopard\\n// 2,Equus zebra,Zebra\\n\\nlet table;\\n\\nfunction preload() {\\n  //my table is comma separated value \"csv\"\\n  //and has a header specifying the columns labels\\n  table = loadTable(\\'assets/mammals.csv\\', \\'csv\\', \\'header\\');\\n}\\n\\nfunction setup() {\\n  let tableObject = table.getObject();\\n\\n  print(tableObject);\\n  //outputs an object\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'no image displayed',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.Table.js',\n                line: 1296,\n                description:\n                  '<p>Retrieves all table data and returns it as a multidimensional array.</p>\\n',\n                itemtype: 'method',\n                name: 'getArray',\n                return: {\n                  description: '',\n                  type: 'Array'\n                },\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\n// Given the CSV file \"mammals.csv\"\\n// in the project\\'s \"assets\" folder\\n//\\n// id,species,name\\n// 0,Capra hircus,Goat\\n// 1,Panthera pardus,Leoperd\\n// 2,Equus zebra,Zebra\\n\\nlet table;\\n\\nfunction preload() {\\n  // table is comma separated value \"CSV\"\\n  // and has specifiying header for column labels\\n  table = loadTable(\\'assets/mammals.csv\\', \\'csv\\', \\'header\\');\\n}\\n\\nfunction setup() {\\n  let tableArray = table.getArray();\\n  for (let i = 0; i < tableArray.length; i++) {\\n    print(tableArray[i]);\\n  }\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'no image displayed',\n                class: 'p5.Table',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.TableRow.js',\n                line: 42,\n                description:\n                  '<p>Stores a value in the TableRow&#39;s specified column.\\nThe column may be specified by either its ID or title.</p>\\n',\n                itemtype: 'method',\n                name: 'set',\n                params: [\n                  {\n                    name: 'column',\n                    description:\n                      '<p>Column ID (Number)\\n                              or Title (String)</p>\\n',\n                    type: 'String|Integer'\n                  },\n                  {\n                    name: 'value',\n                    description: '<p>The value to be stored</p>\\n',\n                    type: 'String|Number'\n                  }\n                ],\n                example: [\n                  \"\\n <div class=\\\"norender\\\"><code>\\n // Given the CSV file \\\"mammals.csv\\\" in the project's \\\"assets\\\" folder:\\n //\\n // id,species,name\\n // 0,Capra hircus,Goat\\n // 1,Panthera pardus,Leopard\\n // 2,Equus zebra,Zebra\\n\\n let table;\\n\\n function preload() {\\n //my table is comma separated value \\\"csv\\\"\\n //and has a header specifying the columns labels\\n table = loadTable('assets/mammals.csv', 'csv', 'header');\\n }\\n\\n function setup() {\\n let rows = table.getRows();\\n for (let r = 0; r < rows.length; r++) {\\n   rows[r].set('name', 'Unicorn');\\n }\\n\\n //print the results\\n print(table.getArray());\\n }\\n </code></div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5.TableRow',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.TableRow.js',\n                line: 106,\n                description:\n                  '<p>Stores a Float value in the TableRow&#39;s specified column.\\nThe column may be specified by either its ID or title.</p>\\n',\n                itemtype: 'method',\n                name: 'setNum',\n                params: [\n                  {\n                    name: 'column',\n                    description:\n                      '<p>Column ID (Number)\\n                              or Title (String)</p>\\n',\n                    type: 'String|Integer'\n                  },\n                  {\n                    name: 'value',\n                    description:\n                      '<p>The value to be stored\\n                              as a Float</p>\\n',\n                    type: 'Number|String'\n                  }\n                ],\n                example: [\n                  \"\\n <div class=\\\"norender\\\"><code>\\n // Given the CSV file \\\"mammals.csv\\\" in the project's \\\"assets\\\" folder:\\n //\\n // id,species,name\\n // 0,Capra hircus,Goat\\n // 1,Panthera pardus,Leopard\\n // 2,Equus zebra,Zebra\\n\\n let table;\\n\\n function preload() {\\n //my table is comma separated value \\\"csv\\\"\\n //and has a header specifying the columns labels\\n table = loadTable('assets/mammals.csv', 'csv', 'header');\\n }\\n\\n function setup() {\\n let rows = table.getRows();\\n for (let r = 0; r < rows.length; r++) {\\n   rows[r].setNum('id', r + 10);\\n }\\n\\n print(table.getArray());\\n }\\n </code></div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5.TableRow',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.TableRow.js',\n                line: 150,\n                description:\n                  '<p>Stores a String value in the TableRow&#39;s specified column.\\nThe column may be specified by either its ID or title.</p>\\n',\n                itemtype: 'method',\n                name: 'setString',\n                params: [\n                  {\n                    name: 'column',\n                    description:\n                      '<p>Column ID (Number)\\n                              or Title (String)</p>\\n',\n                    type: 'String|Integer'\n                  },\n                  {\n                    name: 'value',\n                    description:\n                      '<p>The value to be stored\\n                              as a String</p>\\n',\n                    type: 'String|Number|Boolean|Object'\n                  }\n                ],\n                example: [\n                  \"\\n <div class=\\\"norender\\\"><code>\\n // Given the CSV file \\\"mammals.csv\\\" in the project's \\\"assets\\\" folder:\\n //\\n // id,species,name\\n // 0,Capra hircus,Goat\\n // 1,Panthera pardus,Leopard\\n // 2,Equus zebra,Zebra\\n\\n let table;\\n\\n function preload() {\\n //my table is comma separated value \\\"csv\\\"\\n //and has a header specifying the columns labels\\n table = loadTable('assets/mammals.csv', 'csv', 'header');\\n }\\n\\n function setup() {\\n let rows = table.getRows();\\n for (let r = 0; r < rows.length; r++) {\\n   let name = rows[r].getString('name');\\n   rows[r].setString('name', 'A ' + name + ' named George');\\n }\\n\\n print(table.getArray());\\n }\\n </code></div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5.TableRow',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.TableRow.js',\n                line: 195,\n                description:\n                  '<p>Retrieves a value from the TableRow&#39;s specified column.\\nThe column may be specified by either its ID or title.</p>\\n',\n                itemtype: 'method',\n                name: 'get',\n                params: [\n                  {\n                    name: 'column',\n                    description:\n                      '<p>columnName (string) or\\n                                 ID (number)</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                return: {\n                  description: '',\n                  type: 'String|Number'\n                },\n                example: [\n                  \"\\n <div class=\\\"norender\\\"><code>\\n // Given the CSV file \\\"mammals.csv\\\" in the project's \\\"assets\\\" folder:\\n //\\n // id,species,name\\n // 0,Capra hircus,Goat\\n // 1,Panthera pardus,Leopard\\n // 2,Equus zebra,Zebra\\n\\n let table;\\n\\n function preload() {\\n //my table is comma separated value \\\"csv\\\"\\n //and has a header specifying the columns labels\\n table = loadTable('assets/mammals.csv', 'csv', 'header');\\n }\\n\\n function setup() {\\n let names = [];\\n let rows = table.getRows();\\n for (let r = 0; r < rows.length; r++) {\\n   names.push(rows[r].get('name'));\\n }\\n\\n print(names);\\n }\\n </code></div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5.TableRow',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.TableRow.js',\n                line: 243,\n                description:\n                  '<p>Retrieves a Float value from the TableRow&#39;s specified\\ncolumn. The column may be specified by either its ID or\\ntitle.</p>\\n',\n                itemtype: 'method',\n                name: 'getNum',\n                params: [\n                  {\n                    name: 'column',\n                    description:\n                      '<p>columnName (string) or\\n                                 ID (number)</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                return: {\n                  description: 'Float Floating point number',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n <div class=\\\"norender\\\"><code>\\n // Given the CSV file \\\"mammals.csv\\\" in the project's \\\"assets\\\" folder:\\n //\\n // id,species,name\\n // 0,Capra hircus,Goat\\n // 1,Panthera pardus,Leopard\\n // 2,Equus zebra,Zebra\\n\\n let table;\\n\\n function preload() {\\n //my table is comma separated value \\\"csv\\\"\\n //and has a header specifying the columns labels\\n table = loadTable('assets/mammals.csv', 'csv', 'header');\\n }\\n\\n function setup() {\\n let rows = table.getRows();\\n let minId = Infinity;\\n let maxId = -Infinity;\\n for (let r = 0; r < rows.length; r++) {\\n   let id = rows[r].getNum('id');\\n   minId = min(minId, id);\\n   maxId = min(maxId, id);\\n }\\n print('minimum id = ' + minId + ', maximum id = ' + maxId);\\n }\\n </code></div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5.TableRow',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.TableRow.js',\n                line: 299,\n                description:\n                  '<p>Retrieves an String value from the TableRow&#39;s specified\\ncolumn. The column may be specified by either its ID or\\ntitle.</p>\\n',\n                itemtype: 'method',\n                name: 'getString',\n                params: [\n                  {\n                    name: 'column',\n                    description:\n                      '<p>columnName (string) or\\n                                 ID (number)</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                return: {\n                  description: 'String',\n                  type: 'String'\n                },\n                example: [\n                  \"\\n <div class=\\\"norender\\\"><code>\\n // Given the CSV file \\\"mammals.csv\\\" in the project's \\\"assets\\\" folder:\\n //\\n // id,species,name\\n // 0,Capra hircus,Goat\\n // 1,Panthera pardus,Leopard\\n // 2,Equus zebra,Zebra\\n\\n let table;\\n\\n function preload() {\\n //my table is comma separated value \\\"csv\\\"\\n //and has a header specifying the columns labels\\n table = loadTable('assets/mammals.csv', 'csv', 'header');\\n }\\n\\n function setup() {\\n let rows = table.getRows();\\n let longest = '';\\n for (let r = 0; r < rows.length; r++) {\\n   let species = rows[r].getString('species');\\n   if (longest.length < species.length) {\\n     longest = species;\\n   }\\n }\\n\\n print('longest: ' + longest);\\n }\\n </code></div>\"\n                ],\n                alt: 'no image displayed',\n                class: 'p5.TableRow',\n                module: 'IO',\n                submodule: 'Table'\n              },\n              {\n                file: 'src/io/p5.XML.js',\n                line: 65,\n                description:\n                  '<p>Gets a copy of the element&#39;s parent. Returns the parent as another\\n<a href=\"#/p5.XML\">p5.XML</a> object.</p>\\n',\n                itemtype: 'method',\n                name: 'getParent',\n                return: {\n                  description: 'element parent',\n                  type: 'p5.XML'\n                },\n                example: [\n                  '\\n<div class=\\'norender\\'><code>\\n// The following short XML file called \"mammals.xml\" is parsed\\n// in the code below.\\n//\\n// <?xml version=\"1.0\"?>\\n// &lt;mammals&gt;\\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n// &lt;/mammals&gt;\\n\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  let children = xml.getChildren(\\'animal\\');\\n  let parent = children[1].getParent();\\n  print(parent.getName());\\n}\\n\\n// Sketch prints:\\n// mammals\\n</code></div>'\n                ],\n                class: 'p5.XML',\n                module: 'IO',\n                submodule: 'XML'\n              },\n              {\n                file: 'src/io/p5.XML.js',\n                line: 103,\n                description:\n                  '<p>Gets the element&#39;s full name, which is returned as a String.</p>\\n',\n                itemtype: 'method',\n                name: 'getName',\n                return: {\n                  description: 'the name of the node',\n                  type: 'String'\n                },\n                example: [\n                  '&lt;animal\\n <div class=\\'norender\\'><code>\\n // The following short XML file called \"mammals.xml\" is parsed\\n // in the code below.\\n //\\n // <?xml version=\"1.0\"?>\\n // &lt;mammals&gt;\\n //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n // &lt;/mammals&gt;\\n\\n let xml;\\n\\n function preload() {\\n xml = loadXML(\\'assets/mammals.xml\\');\\n }\\n\\n function setup() {\\n print(xml.getName());\\n }\\n\\n // Sketch prints:\\n // mammals\\n </code></div>'\n                ],\n                class: 'p5.XML',\n                module: 'IO',\n                submodule: 'XML'\n              },\n              {\n                file: 'src/io/p5.XML.js',\n                line: 138,\n                description:\n                  '<p>Sets the element&#39;s name, which is specified as a String.</p>\\n',\n                itemtype: 'method',\n                name: 'setName',\n                params: [\n                  {\n                    name: 'the',\n                    description: '<p>new name of the node</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                example: [\n                  '&lt;animal\\n<div class=\\'norender\\'><code>\\n// The following short XML file called \"mammals.xml\" is parsed\\n// in the code below.\\n//\\n// <?xml version=\"1.0\"?>\\n// &lt;mammals&gt;\\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n// &lt;/mammals&gt;\\n\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  print(xml.getName());\\n  xml.setName(\\'fish\\');\\n  print(xml.getName());\\n}\\n\\n// Sketch prints:\\n// mammals\\n// fish\\n</code></div>'\n                ],\n                class: 'p5.XML',\n                module: 'IO',\n                submodule: 'XML'\n              },\n              {\n                file: 'src/io/p5.XML.js',\n                line: 184,\n                description:\n                  '<p>Checks whether or not the element has any children, and returns the result\\nas a boolean.</p>\\n',\n                itemtype: 'method',\n                name: 'hasChildren',\n                return: {\n                  description: '',\n                  type: 'Boolean'\n                },\n                example: [\n                  '&lt;animal\\n<div class=\\'norender\\'><code>\\n// The following short XML file called \"mammals.xml\" is parsed\\n// in the code below.\\n//\\n// <?xml version=\"1.0\"?>\\n// &lt;mammals&gt;\\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n// &lt;/mammals&gt;\\n\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  print(xml.hasChildren());\\n}\\n\\n// Sketch prints:\\n// true\\n</code></div>'\n                ],\n                class: 'p5.XML',\n                module: 'IO',\n                submodule: 'XML'\n              },\n              {\n                file: 'src/io/p5.XML.js',\n                line: 220,\n                description:\n                  '<p>Get the names of all of the element&#39;s children, and returns the names as an\\narray of Strings. This is the same as looping through and calling <a href=\"#/p5.XML/getName\">getName()</a>\\non each child element individually.</p>\\n',\n                itemtype: 'method',\n                name: 'listChildren',\n                return: {\n                  description: 'names of the children of the element',\n                  type: 'String[]'\n                },\n                example: [\n                  '&lt;animal\\n<div class=\\'norender\\'><code>\\n// The following short XML file called \"mammals.xml\" is parsed\\n// in the code below.\\n//\\n// <?xml version=\"1.0\"?>\\n// &lt;mammals&gt;\\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n// &lt;/mammals&gt;\\n\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  print(xml.listChildren());\\n}\\n\\n// Sketch prints:\\n// [\"animal\", \"animal\", \"animal\"]\\n</code></div>'\n                ],\n                class: 'p5.XML',\n                module: 'IO',\n                submodule: 'XML'\n              },\n              {\n                file: 'src/io/p5.XML.js',\n                line: 261,\n                description:\n                  '<p>Returns all of the element&#39;s children as an array of <a href=\"#/p5.XML\">p5.XML</a> objects. When\\nthe name parameter is specified, then it will return all children that match\\nthat name.</p>\\n',\n                itemtype: 'method',\n                name: 'getChildren',\n                params: [\n                  {\n                    name: 'name',\n                    description: '<p>element name</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'children of the element',\n                  type: 'p5.XML[]'\n                },\n                example: [\n                  '&lt;animal\\n<div class=\\'norender\\'><code>\\n// The following short XML file called \"mammals.xml\" is parsed\\n// in the code below.\\n//\\n// <?xml version=\"1.0\"?>\\n// &lt;mammals&gt;\\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n// &lt;/mammals&gt;\\n\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  let animals = xml.getChildren(\\'animal\\');\\n\\n  for (let i = 0; i < animals.length; i++) {\\n    print(animals[i].getContent());\\n  }\\n}\\n\\n// Sketch prints:\\n// \"Goat\"\\n// \"Leopard\"\\n// \"Zebra\"\\n</code></div>'\n                ],\n                class: 'p5.XML',\n                module: 'IO',\n                submodule: 'XML'\n              },\n              {\n                file: 'src/io/p5.XML.js',\n                line: 317,\n                description:\n                  '<p>Returns the first of the element&#39;s children that matches the name parameter\\nor the child of the given index.It returns undefined if no matching\\nchild is found.</p>\\n',\n                itemtype: 'method',\n                name: 'getChild',\n                params: [\n                  {\n                    name: 'name',\n                    description: '<p>element name or index</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                return: {\n                  description: '',\n                  type: 'p5.XML'\n                },\n                example: [\n                  '&lt;animal\\n<div class=\\'norender\\'><code>\\n// The following short XML file called \"mammals.xml\" is parsed\\n// in the code below.\\n//\\n// <?xml version=\"1.0\"?>\\n// &lt;mammals&gt;\\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n// &lt;/mammals&gt;\\n\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  let firstChild = xml.getChild(\\'animal\\');\\n  print(firstChild.getContent());\\n}\\n\\n// Sketch prints:\\n// \"Goat\"\\n</code></div>\\n<div class=\\'norender\\'><code>\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  let secondChild = xml.getChild(1);\\n  print(secondChild.getContent());\\n}\\n\\n// Sketch prints:\\n// \"Leopard\"\\n</code></div>'\n                ],\n                class: 'p5.XML',\n                module: 'IO',\n                submodule: 'XML'\n              },\n              {\n                file: 'src/io/p5.XML.js',\n                line: 378,\n                description:\n                  '<p>Appends a new child to the element. The child can be specified with\\neither a String, which will be used as the new tag&#39;s name, or as a\\nreference to an existing <a href=\"#/p5.XML\">p5.XML</a> object.\\nA reference to the newly created child is returned as an <a href=\"#/p5.XML\">p5.XML</a> object.</p>\\n',\n                itemtype: 'method',\n                name: 'addChild',\n                params: [\n                  {\n                    name: 'node',\n                    description:\n                      '<p>a <a href=\"#/p5.XML\">p5.XML</a> Object which will be the child to be added</p>\\n',\n                    type: 'p5.XML'\n                  }\n                ],\n                example: [\n                  '\\n<div class=\\'norender\\'><code>\\n// The following short XML file called \"mammals.xml\" is parsed\\n// in the code below.\\n//\\n// <?xml version=\"1.0\"?>\\n// &lt;mammals&gt;\\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n// &lt;/mammals&gt;\\n\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  let child = new p5.XML();\\n  child.setName(\\'animal\\');\\n  child.setAttribute(\\'id\\', \\'3\\');\\n  child.setAttribute(\\'species\\', \\'Ornithorhynchus anatinus\\');\\n  child.setContent(\\'Platypus\\');\\n  xml.addChild(child);\\n\\n  let animals = xml.getChildren(\\'animal\\');\\n  print(animals[animals.length - 1].getContent());\\n}\\n\\n// Sketch prints:\\n// \"Goat\"\\n// \"Leopard\"\\n// \"Zebra\"\\n</code></div>'\n                ],\n                class: 'p5.XML',\n                module: 'IO',\n                submodule: 'XML'\n              },\n              {\n                file: 'src/io/p5.XML.js',\n                line: 430,\n                description: '<p>Removes the element specified by name or index.</p>\\n',\n                itemtype: 'method',\n                name: 'removeChild',\n                params: [\n                  {\n                    name: 'name',\n                    description: '<p>element name or index</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                example: [\n                  '\\n<div class=\\'norender\\'><code>\\n// The following short XML file called \"mammals.xml\" is parsed\\n// in the code below.\\n//\\n// <?xml version=\"1.0\"?>\\n// &lt;mammals&gt;\\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n// &lt;/mammals&gt;\\n\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  xml.removeChild(\\'animal\\');\\n  let children = xml.getChildren();\\n  for (let i = 0; i < children.length; i++) {\\n    print(children[i].getContent());\\n  }\\n}\\n\\n// Sketch prints:\\n// \"Leopard\"\\n// \"Zebra\"\\n</code></div>\\n<div class=\\'norender\\'><code>\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  xml.removeChild(1);\\n  let children = xml.getChildren();\\n  for (let i = 0; i < children.length; i++) {\\n    print(children[i].getContent());\\n  }\\n}\\n\\n// Sketch prints:\\n// \"Goat\"\\n// \"Zebra\"\\n</code></div>'\n                ],\n                class: 'p5.XML',\n                module: 'IO',\n                submodule: 'XML'\n              },\n              {\n                file: 'src/io/p5.XML.js',\n                line: 502,\n                description:\n                  '<p>Counts the specified element&#39;s number of attributes, returned as an Number.</p>\\n',\n                itemtype: 'method',\n                name: 'getAttributeCount',\n                return: {\n                  description: '',\n                  type: 'Integer'\n                },\n                example: [\n                  '\\n<div class=\\'norender\\'><code>\\n// The following short XML file called \"mammals.xml\" is parsed\\n// in the code below.\\n//\\n// <?xml version=\"1.0\"?>\\n// &lt;mammals&gt;\\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n// &lt;/mammals&gt;\\n\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  let firstChild = xml.getChild(\\'animal\\');\\n  print(firstChild.getAttributeCount());\\n}\\n\\n// Sketch prints:\\n// 2\\n</code></div>'\n                ],\n                class: 'p5.XML',\n                module: 'IO',\n                submodule: 'XML'\n              },\n              {\n                file: 'src/io/p5.XML.js',\n                line: 538,\n                description:\n                  '<p>Gets all of the specified element&#39;s attributes, and returns them as an\\narray of Strings.</p>\\n',\n                itemtype: 'method',\n                name: 'listAttributes',\n                return: {\n                  description: 'an array of strings containing the names of attributes',\n                  type: 'String[]'\n                },\n                example: [\n                  '\\n<div class=\\'norender\\'><code>\\n// The following short XML file called \"mammals.xml\" is parsed\\n// in the code below.\\n//\\n// <?xml version=\"1.0\"?>\\n// &lt;mammals&gt;\\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n// &lt;/mammals&gt;\\n\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  let firstChild = xml.getChild(\\'animal\\');\\n  print(firstChild.listAttributes());\\n}\\n\\n// Sketch prints:\\n// [\"id\", \"species\"]\\n</code></div>'\n                ],\n                class: 'p5.XML',\n                module: 'IO',\n                submodule: 'XML'\n              },\n              {\n                file: 'src/io/p5.XML.js',\n                line: 580,\n                description:\n                  '<p>Checks whether or not an element has the specified attribute.</p>\\n',\n                itemtype: 'method',\n                name: 'hasAttribute',\n                params: [\n                  {\n                    name: 'the',\n                    description: '<p>attribute to be checked</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                return: {\n                  description: 'true if attribute found else false',\n                  type: 'Boolean'\n                },\n                example: [\n                  '\\n <div class=\\'norender\\'><code>\\n // The following short XML file called \"mammals.xml\" is parsed\\n // in the code below.\\n //\\n // <?xml version=\"1.0\"?>\\n // &lt;mammals&gt;\\n //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n // &lt;/mammals&gt;\\n\\n let xml;\\n\\n function preload() {\\n xml = loadXML(\\'assets/mammals.xml\\');\\n }\\n\\n function setup() {\\n let firstChild = xml.getChild(\\'animal\\');\\n print(firstChild.hasAttribute(\\'species\\'));\\n print(firstChild.hasAttribute(\\'color\\'));\\n }\\n\\n // Sketch prints:\\n // true\\n // false\\n </code></div>'\n                ],\n                class: 'p5.XML',\n                module: 'IO',\n                submodule: 'XML'\n              },\n              {\n                file: 'src/io/p5.XML.js',\n                line: 624,\n                description:\n                  '<p>Returns an attribute value of the element as an Number. If the defaultValue\\nparameter is specified and the attribute doesn&#39;t exist, then defaultValue\\nis returned. If no defaultValue is specified and the attribute doesn&#39;t\\nexist, the value 0 is returned.</p>\\n',\n                itemtype: 'method',\n                name: 'getNum',\n                params: [\n                  {\n                    name: 'name',\n                    description: '<p>the non-null full name of the attribute</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'defaultValue',\n                    description: '<p>the default value of the attribute</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: '',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div class=\\'norender\\'><code>\\n// The following short XML file called \"mammals.xml\" is parsed\\n// in the code below.\\n//\\n// <?xml version=\"1.0\"?>\\n// &lt;mammals&gt;\\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n// &lt;/mammals&gt;\\n\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  let firstChild = xml.getChild(\\'animal\\');\\n  print(firstChild.getNum(\\'id\\'));\\n}\\n\\n// Sketch prints:\\n// 0\\n</code></div>'\n                ],\n                class: 'p5.XML',\n                module: 'IO',\n                submodule: 'XML'\n              },\n              {\n                file: 'src/io/p5.XML.js',\n                line: 670,\n                description:\n                  '<p>Returns an attribute value of the element as an String. If the defaultValue\\nparameter is specified and the attribute doesn&#39;t exist, then defaultValue\\nis returned. If no defaultValue is specified and the attribute doesn&#39;t\\nexist, null is returned.</p>\\n',\n                itemtype: 'method',\n                name: 'getString',\n                params: [\n                  {\n                    name: 'name',\n                    description: '<p>the non-null full name of the attribute</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'defaultValue',\n                    description: '<p>the default value of the attribute</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: '',\n                  type: 'String'\n                },\n                example: [\n                  '\\n<div class=\\'norender\\'><code>\\n// The following short XML file called \"mammals.xml\" is parsed\\n// in the code below.\\n//\\n// <?xml version=\"1.0\"?>\\n// &lt;mammals&gt;\\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n// &lt;/mammals&gt;\\n\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  let firstChild = xml.getChild(\\'animal\\');\\n  print(firstChild.getString(\\'species\\'));\\n}\\n\\n// Sketch prints:\\n// \"Capra hircus\"\\n</code></div>'\n                ],\n                class: 'p5.XML',\n                module: 'IO',\n                submodule: 'XML'\n              },\n              {\n                file: 'src/io/p5.XML.js',\n                line: 716,\n                description:\n                  '<p>Sets the content of an element&#39;s attribute. The first parameter specifies\\nthe attribute name, while the second specifies the new content.</p>\\n',\n                itemtype: 'method',\n                name: 'setAttribute',\n                params: [\n                  {\n                    name: 'name',\n                    description: '<p>the full name of the attribute</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'value',\n                    description: '<p>the value of the attribute</p>\\n',\n                    type: 'Number|String|Boolean'\n                  }\n                ],\n                example: [\n                  '\\n<div class=\\'norender\\'><code>\\n// The following short XML file called \"mammals.xml\" is parsed\\n// in the code below.\\n//\\n// <?xml version=\"1.0\"?>\\n// &lt;mammals&gt;\\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n// &lt;/mammals&gt;\\n\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  let firstChild = xml.getChild(\\'animal\\');\\n  print(firstChild.getString(\\'species\\'));\\n  firstChild.setAttribute(\\'species\\', \\'Jamides zebra\\');\\n  print(firstChild.getString(\\'species\\'));\\n}\\n\\n// Sketch prints:\\n// \"Capra hircus\"\\n// \"Jamides zebra\"\\n</code></div>'\n                ],\n                class: 'p5.XML',\n                module: 'IO',\n                submodule: 'XML'\n              },\n              {\n                file: 'src/io/p5.XML.js',\n                line: 757,\n                description:\n                  '<p>Returns the content of an element. If there is no such content,\\ndefaultValue is returned if specified, otherwise null is returned.</p>\\n',\n                itemtype: 'method',\n                name: 'getContent',\n                params: [\n                  {\n                    name: 'defaultValue',\n                    description: '<p>value returned if no content is found</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: '',\n                  type: 'String'\n                },\n                example: [\n                  '\\n<div class=\\'norender\\'><code>\\n// The following short XML file called \"mammals.xml\" is parsed\\n// in the code below.\\n//\\n// <?xml version=\"1.0\"?>\\n// &lt;mammals&gt;\\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n// &lt;/mammals&gt;\\n\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  let firstChild = xml.getChild(\\'animal\\');\\n  print(firstChild.getContent());\\n}\\n\\n// Sketch prints:\\n// \"Goat\"\\n</code></div>'\n                ],\n                class: 'p5.XML',\n                module: 'IO',\n                submodule: 'XML'\n              },\n              {\n                file: 'src/io/p5.XML.js',\n                line: 798,\n                description: '<p>Sets the element&#39;s content.</p>\\n',\n                itemtype: 'method',\n                name: 'setContent',\n                params: [\n                  {\n                    name: 'text',\n                    description: '<p>the new content</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                example: [\n                  '\\n<div class=\\'norender\\'><code>\\n// The following short XML file called \"mammals.xml\" is parsed\\n// in the code below.\\n//\\n// <?xml version=\"1.0\"?>\\n// &lt;mammals&gt;\\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\\n// &lt;/mammals&gt;\\n\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  let firstChild = xml.getChild(\\'animal\\');\\n  print(firstChild.getContent());\\n  firstChild.setContent(\\'Mountain Goat\\');\\n  print(firstChild.getContent());\\n}\\n\\n// Sketch prints:\\n// \"Goat\"\\n// \"Mountain Goat\"\\n</code></div>'\n                ],\n                class: 'p5.XML',\n                module: 'IO',\n                submodule: 'XML'\n              },\n              {\n                file: 'src/io/p5.XML.js',\n                line: 839,\n                description:\n                  '<p>Serializes the element into a string. This function is useful for preparing\\nthe content to be sent over a http request or saved to file.</p>\\n',\n                itemtype: 'method',\n                name: 'serialize',\n                return: {\n                  description: 'Serialized string of the element',\n                  type: 'String'\n                },\n                example: [\n                  '\\n<div class=\\'norender\\'><code>\\nlet xml;\\n\\nfunction preload() {\\n  xml = loadXML(\\'assets/mammals.xml\\');\\n}\\n\\nfunction setup() {\\n  print(xml.serialize());\\n}\\n\\n// Sketch prints:\\n// <mammals>\\n//   <animal id=\"0\" species=\"Capra hircus\">Goat</animal>\\n//   <animal id=\"1\" species=\"Panthera pardus\">Leopard</animal>\\n//   <animal id=\"2\" species=\"Equus zebra\">Zebra</animal>\\n// </mammals>\\n</code></div>'\n                ],\n                class: 'p5.XML',\n                module: 'IO',\n                submodule: 'XML'\n              },\n              {\n                file: 'src/math/calculation.js',\n                line: 12,\n                description:\n                  '<p>Calculates the absolute value (magnitude) of a number. Maps to Math.abs().\\nThe absolute value of a number is always positive.</p>\\n',\n                itemtype: 'method',\n                name: 'abs',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>number to compute</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'absolute value of given number',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div class = \"norender\"><code>\\nfunction setup() {\\n  let x = -3;\\n  let y = abs(x);\\n\\n  print(x); // -3\\n  print(y); // 3\\n}\\n</code></div>'\n                ],\n                alt: 'no image displayed',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Calculation'\n              },\n              {\n                file: 'src/math/calculation.js',\n                line: 36,\n                description:\n                  '<p>Calculates the closest int value that is greater than or equal to the\\nvalue of the parameter. Maps to Math.ceil(). For example, ceil(9.03)\\nreturns the value 10.</p>\\n',\n                itemtype: 'method',\n                name: 'ceil',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>number to round up</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'rounded up number',\n                  type: 'Integer'\n                },\n                example: [\n                  '\\n<div><code>\\nfunction draw() {\\n  background(200);\\n  // map, mouseX between 0 and 5.\\n  let ax = map(mouseX, 0, 100, 0, 5);\\n  let ay = 66;\\n\\n  //Get the ceiling of the mapped number.\\n  let bx = ceil(map(mouseX, 0, 100, 0, 5));\\n  let by = 33;\\n\\n  // Multiply the mapped numbers by 20 to more easily\\n  // see the changes.\\n  stroke(0);\\n  fill(0);\\n  line(0, ay, ax * 20, ay);\\n  line(0, by, bx * 20, by);\\n\\n  // Reformat the float returned by map and draw it.\\n  noStroke();\\n  text(nfc(ax, 2), ax, ay - 5);\\n  text(nfc(bx, 1), bx, by - 5);\\n}\\n</code></div>'\n                ],\n                alt:\n                  '2 horizontal lines & number sets. increase with mouse x. bottom to 2 decimals',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Calculation'\n              },\n              {\n                file: 'src/math/calculation.js',\n                line: 76,\n                description:\n                  '<p>Constrains a value between a minimum and maximum value.</p>\\n',\n                itemtype: 'method',\n                name: 'constrain',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>number to constrain</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'low',\n                    description: '<p>minimum limit</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'high',\n                    description: '<p>maximum limit</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'constrained number',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div><code>\\nfunction draw() {\\n  background(200);\\n\\n  let leftWall = 25;\\n  let rightWall = 75;\\n\\n  // xm is just the mouseX, while\\n  // xc is the mouseX, but constrained\\n  // between the leftWall and rightWall!\\n  let xm = mouseX;\\n  let xc = constrain(mouseX, leftWall, rightWall);\\n\\n  // Draw the walls.\\n  stroke(150);\\n  line(leftWall, 0, leftWall, height);\\n  line(rightWall, 0, rightWall, height);\\n\\n  // Draw xm and xc as circles.\\n  noStroke();\\n  fill(150);\\n  ellipse(xm, 33, 9, 9); // Not Constrained\\n  fill(0);\\n  ellipse(xc, 66, 9, 9); // Constrained\\n}\\n</code></div>'\n                ],\n                alt:\n                  '2 vertical lines. 2 ellipses move with mouse X 1 does not move passed lines',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Calculation'\n              },\n              {\n                file: 'src/math/calculation.js',\n                line: 121,\n                description:\n                  '<p>Calculates the distance between two points, in either two or three dimensions.</p>\\n',\n                itemtype: 'method',\n                name: 'dist',\n                return: {\n                  description: 'distance between the two points',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div><code>\\n// Move your mouse inside the canvas to see the\\n// change in distance between two points!\\nfunction draw() {\\n  background(200);\\n  fill(0);\\n\\n  let x1 = 10;\\n  let y1 = 90;\\n  let x2 = mouseX;\\n  let y2 = mouseY;\\n\\n  line(x1, y1, x2, y2);\\n  ellipse(x1, y1, 7, 7);\\n  ellipse(x2, y2, 7, 7);\\n\\n  // d is the length of the line\\n  // the distance from point 1 to point 2.\\n  let d = int(dist(x1, y1, x2, y2));\\n\\n  // Let's write d along the line we are drawing!\\n  push();\\n  translate((x1 + x2) / 2, (y1 + y2) / 2);\\n  rotate(atan2(y2 - y1, x2 - x1));\\n  text(nfc(d, 1), 0, -5);\\n  pop();\\n  // Fancy!\\n}\\n</code></div>\"\n                ],\n                alt:\n                  '2 ellipses joined by line. 1 ellipse moves with mouse X&Y. Distance displayed.',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Calculation',\n                overloads: [\n                  {\n                    line: 121,\n                    params: [\n                      {\n                        name: 'x1',\n                        description: '<p>x-coordinate of the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description: '<p>y-coordinate of the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '<p>x-coordinate of the second point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '<p>y-coordinate of the second point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    return: {\n                      description: 'distance between the two points',\n                      type: 'Number'\n                    }\n                  },\n                  {\n                    line: 165,\n                    params: [\n                      {\n                        name: 'x1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z1',\n                        description: '<p>z-coordinate of the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z2',\n                        description: '<p>z-coordinate of the second point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    return: {\n                      description: 'distance between the two points',\n                      type: 'Number'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/math/calculation.js',\n                line: 190,\n                description:\n                  '<p>Returns Euler&#39;s number e (2.71828...) raised to the power of the n\\nparameter. Maps to Math.exp().</p>\\n',\n                itemtype: 'method',\n                name: 'exp',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>exponent to raise</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'e^n',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div><code>\\nfunction draw() {\\n  background(200);\\n\\n  // Compute the exp() function with a value between 0 and 2\\n  let xValue = map(mouseX, 0, width, 0, 2);\\n  let yValue = exp(xValue);\\n\\n  let y = map(yValue, 0, 8, height, 0);\\n\\n  let legend = 'exp (' + nfc(xValue, 3) + ')\\\\n= ' + nf(yValue, 1, 4);\\n  stroke(150);\\n  line(mouseX, y, mouseX, height);\\n  fill(0);\\n  text(legend, 5, 15);\\n  noStroke();\\n  ellipse(mouseX, y, 7, 7);\\n\\n  // Draw the exp(x) curve,\\n  // over the domain of x from 0 to 2\\n  noFill();\\n  stroke(0);\\n  beginShape();\\n  for (let x = 0; x < width; x++) {\\n    xValue = map(x, 0, width, 0, 2);\\n    yValue = exp(xValue);\\n    y = map(yValue, 0, 8, height, 0);\\n    vertex(x, y);\\n  }\\n\\n  endShape();\\n  line(0, 0, 0, height);\\n  line(0, height - 1, width, height - 1);\\n}\\n</code></div>\"\n                ],\n                alt: 'ellipse moves along a curve with mouse x. e^n displayed.',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Calculation'\n              },\n              {\n                file: 'src/math/calculation.js',\n                line: 240,\n                description:\n                  '<p>Calculates the closest int value that is less than or equal to the\\nvalue of the parameter. Maps to Math.floor().</p>\\n',\n                itemtype: 'method',\n                name: 'floor',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>number to round down</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'rounded down number',\n                  type: 'Integer'\n                },\n                example: [\n                  '\\n<div><code>\\nfunction draw() {\\n  background(200);\\n  //map, mouseX between 0 and 5.\\n  let ax = map(mouseX, 0, 100, 0, 5);\\n  let ay = 66;\\n\\n  //Get the floor of the mapped number.\\n  let bx = floor(map(mouseX, 0, 100, 0, 5));\\n  let by = 33;\\n\\n  // Multiply the mapped numbers by 20 to more easily\\n  // see the changes.\\n  stroke(0);\\n  fill(0);\\n  line(0, ay, ax * 20, ay);\\n  line(0, by, bx * 20, by);\\n\\n  // Reformat the float returned by map and draw it.\\n  noStroke();\\n  text(nfc(ax, 2), ax, ay - 5);\\n  text(nfc(bx, 1), bx, by - 5);\\n}\\n</code></div>'\n                ],\n                alt:\n                  '2 horizontal lines & number sets. increase with mouse x. bottom to 2 decimals',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Calculation'\n              },\n              {\n                file: 'src/math/calculation.js',\n                line: 279,\n                description:\n                  '<p>Calculates a number between two numbers at a specific increment. The amt\\nparameter is the amount to interpolate between the two values where 0.0\\nequal to the first point, 0.1 is very near the first point, 0.5 is\\nhalf-way in between, and 1.0 is equal to the second point. If the\\nvalue of amt is more than 1.0 or less than 0.0, the number will be\\ncalculated accordingly in the ratio of the two given numbers. The lerp\\nfunction is convenient for creating motion along a straight\\npath and for drawing dotted lines.</p>\\n',\n                itemtype: 'method',\n                name: 'lerp',\n                params: [\n                  {\n                    name: 'start',\n                    description: '<p>first value</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'stop',\n                    description: '<p>second value</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'amt',\n                    description: '<p>number</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'lerped value',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div><code>\\nfunction setup() {\\n  background(200);\\n  let a = 20;\\n  let b = 80;\\n  let c = lerp(a, b, 0.2);\\n  let d = lerp(a, b, 0.5);\\n  let e = lerp(a, b, 0.8);\\n\\n  let y = 50;\\n\\n  strokeWeight(5);\\n  stroke(0); // Draw the original points in black\\n  point(a, y);\\n  point(b, y);\\n\\n  stroke(100); // Draw the lerp points in gray\\n  point(c, y);\\n  point(d, y);\\n  point(e, y);\\n}\\n</code></div>'\n                ],\n                alt:\n                  '5 points horizontally staggered mid-canvas. mid 3 are grey, outer black',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Calculation'\n              },\n              {\n                file: 'src/math/calculation.js',\n                line: 327,\n                description:\n                  '<p>Calculates the natural logarithm (the base-e logarithm) of a number. This\\nfunction expects the n parameter to be a value greater than 0.0. Maps to\\nMath.log().</p>\\n',\n                itemtype: 'method',\n                name: 'log',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>number greater than 0</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'natural logarithm of n',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div><code>\\nfunction draw() {\\n  background(200);\\n  let maxX = 2.8;\\n  let maxY = 1.5;\\n\\n  // Compute the natural log of a value between 0 and maxX\\n  let xValue = map(mouseX, 0, width, 0, maxX);\\n  let yValue, y;\\n  if (xValue > 0) {\\n   // Cannot take the log of a negative number.\\n    yValue = log(xValue);\\n    y = map(yValue, -maxY, maxY, height, 0);\\n\\n    // Display the calculation occurring.\\n    let legend = 'log(' + nf(xValue, 1, 2) + ')\\\\n= ' + nf(yValue, 1, 3);\\n    stroke(150);\\n    line(mouseX, y, mouseX, height);\\n    fill(0);\\n    text(legend, 5, 15);\\n    noStroke();\\n    ellipse(mouseX, y, 7, 7);\\n  }\\n\\n  // Draw the log(x) curve,\\n  // over the domain of x from 0 to maxX\\n  noFill();\\n  stroke(0);\\n  beginShape();\\n  for (let x = 0; x < width; x++) {\\n    xValue = map(x, 0, width, 0, maxX);\\n    yValue = log(xValue);\\n    y = map(yValue, -maxY, maxY, height, 0);\\n    vertex(x, y);\\n  }\\n  endShape();\\n  line(0, 0, 0, height);\\n  line(0, height / 2, width, height / 2);\\n}\\n</code></div>\"\n                ],\n                alt:\n                  'ellipse moves along a curve with mouse x. natural logarithm of n displayed.',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Calculation'\n              },\n              {\n                file: 'src/math/calculation.js',\n                line: 383,\n                description:\n                  '<p>Calculates the magnitude (or length) of a vector. A vector is a direction\\nin space commonly used in computer graphics and linear algebra. Because it\\nhas no &quot;start&quot; position, the magnitude of a vector can be thought of as\\nthe distance from the coordinate 0,0 to its x,y value. Therefore, <a href=\"#/p5/mag\">mag()</a> is\\na shortcut for writing dist(0, 0, x, y).</p>\\n',\n                itemtype: 'method',\n                name: 'mag',\n                params: [\n                  {\n                    name: 'a',\n                    description: '<p>first value</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'b',\n                    description: '<p>second value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'magnitude of vector from (0,0) to (a,b)',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div><code>\\nfunction setup() {\\n  let x1 = 20;\\n  let x2 = 80;\\n  let y1 = 30;\\n  let y2 = 70;\\n\\n  line(0, 0, x1, y1);\\n  print(mag(x1, y1)); // Prints \"36.05551275463989\"\\n  line(0, 0, x2, y1);\\n  print(mag(x2, y1)); // Prints \"85.44003745317531\"\\n  line(0, 0, x1, y2);\\n  print(mag(x1, y2)); // Prints \"72.80109889280519\"\\n  line(0, 0, x2, y2);\\n  print(mag(x2, y2)); // Prints \"106.3014581273465\"\\n}\\n</code></div>'\n                ],\n                alt: '4 lines of different length radiate from top left of canvas.',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Calculation'\n              },\n              {\n                file: 'src/math/calculation.js',\n                line: 422,\n                description:\n                  '<p>Re-maps a number from one range to another.\\n<br><br>\\nIn the first example above, the number 25 is converted from a value in the\\nrange of 0 to 100 into a value that ranges from the left edge of the\\nwindow (0) to the right edge (width).</p>\\n',\n                itemtype: 'method',\n                name: 'map',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>the incoming value to be converted</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'start1',\n                    description: '<p>lower bound of the value&#39;s current range</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'stop1',\n                    description: '<p>upper bound of the value&#39;s current range</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'start2',\n                    description: '<p>lower bound of the value&#39;s target range</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'stop2',\n                    description: '<p>upper bound of the value&#39;s target range</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'withinBounds',\n                    description: '<p>constrain the value to the newly mapped range</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'remapped number',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n  <div><code>\\nlet value = 25;\\nlet m = map(value, 0, 100, 0, width);\\nellipse(m, 50, 10, 10);\\n</code></div>\\n\\n  <div><code>\\nfunction setup() {\\n  noStroke();\\n}\\n\\nfunction draw() {\\n  background(204);\\n  let x1 = map(mouseX, 0, width, 25, 75);\\n  ellipse(x1, 25, 25, 25);\\n  //This ellipse is constrained to the 0-100 range\\n  //after setting withinBounds to true\\n  let x2 = map(mouseX, 0, width, 0, 100, true);\\n  ellipse(x2, 75, 25, 25);\\n}\\n</code></div>'\n                ],\n                alt:\n                  '10 by 10 white ellipse with in mid left canvas\\n2 25 by 25 white ellipses move with mouse x. Bottom has more range from X',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Calculation'\n              },\n              {\n                file: 'src/math/calculation.js',\n                line: 478,\n                description:\n                  '<p>Determines the largest value in a sequence of numbers, and then returns\\nthat value. <a href=\"#/p5/max\">max()</a> accepts any number of Number parameters, or an Array\\nof any length.</p>\\n',\n                itemtype: 'method',\n                name: 'max',\n                return: {\n                  description: 'maximum Number',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div><code>\\nfunction setup() {\\n  // Change the elements in the array and run the sketch\\n  // to show how max() works!\\n  let numArray = [2, 1, 5, 4, 8, 9];\\n  fill(0);\\n  noStroke();\\n  text('Array Elements', 0, 10);\\n  // Draw all numbers in the array\\n  let spacing = 15;\\n  let elemsY = 25;\\n  for (let i = 0; i < numArray.length; i++) {\\n    text(numArray[i], i * spacing, elemsY);\\n  }\\n  let maxX = 33;\\n  let maxY = 80;\\n  // Draw the Maximum value in the array.\\n  textSize(32);\\n  text(max(numArray), maxX, maxY);\\n}\\n</code></div>\"\n                ],\n                alt:\n                  'Small text at top reads: Array Elements 2 1 5 4 8 9. Large text at center: 9',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Calculation',\n                overloads: [\n                  {\n                    line: 478,\n                    params: [\n                      {\n                        name: 'n0',\n                        description: '<p>Number to compare</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'n1',\n                        description: '<p>Number to compare</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    return: {\n                      description: 'maximum Number',\n                      type: 'Number'\n                    }\n                  },\n                  {\n                    line: 514,\n                    params: [\n                      {\n                        name: 'nums',\n                        description: '<p>Numbers to compare</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'Number'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/math/calculation.js',\n                line: 528,\n                description:\n                  '<p>Determines the smallest value in a sequence of numbers, and then returns\\nthat value. <a href=\"#/p5/min\">min()</a> accepts any number of Number parameters, or an Array\\nof any length.</p>\\n',\n                itemtype: 'method',\n                name: 'min',\n                return: {\n                  description: 'minimum Number',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div><code>\\nfunction setup() {\\n  // Change the elements in the array and run the sketch\\n  // to show how min() works!\\n  let numArray = [2, 1, 5, 4, 8, 9];\\n  fill(0);\\n  noStroke();\\n  text('Array Elements', 0, 10);\\n  // Draw all numbers in the array\\n  let spacing = 15;\\n  let elemsY = 25;\\n  for (let i = 0; i < numArray.length; i++) {\\n    text(numArray[i], i * spacing, elemsY);\\n  }\\n  let maxX = 33;\\n  let maxY = 80;\\n  // Draw the Minimum value in the array.\\n  textSize(32);\\n  text(min(numArray), maxX, maxY);\\n}\\n</code></div>\"\n                ],\n                alt:\n                  'Small text at top reads: Array Elements 2 1 5 4 8 9. Large text at center: 1',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Calculation',\n                overloads: [\n                  {\n                    line: 528,\n                    params: [\n                      {\n                        name: 'n0',\n                        description: '<p>Number to compare</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'n1',\n                        description: '<p>Number to compare</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    return: {\n                      description: 'minimum Number',\n                      type: 'Number'\n                    }\n                  },\n                  {\n                    line: 564,\n                    params: [\n                      {\n                        name: 'nums',\n                        description: '<p>Numbers to compare</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'Number'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/math/calculation.js',\n                line: 578,\n                description:\n                  '<p>Normalizes a number from another range into a value between 0 and 1.\\nIdentical to map(value, low, high, 0, 1).\\nNumbers outside of the range are not clamped to 0 and 1, because\\nout-of-range values are often intentional and useful. (See the example above.)</p>\\n',\n                itemtype: 'method',\n                name: 'norm',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>incoming value to be normalized</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'start',\n                    description: '<p>lower bound of the value&#39;s current range</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'stop',\n                    description: '<p>upper bound of the value&#39;s current range</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'normalized number',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div><code>\\nfunction draw() {\\n  background(200);\\n  let currentNum = mouseX;\\n  let lowerBound = 0;\\n  let upperBound = width; //100;\\n  let normalized = norm(currentNum, lowerBound, upperBound);\\n  let lineY = 70;\\n  stroke(3);\\n  line(0, lineY, width, lineY);\\n  //Draw an ellipse mapped to the non-normalized value.\\n  noStroke();\\n  fill(50);\\n  let s = 7; // ellipse size\\n  ellipse(currentNum, lineY, s, s);\\n\\n  // Draw the guide\\n  let guideY = lineY + 15;\\n  text('0', 0, guideY);\\n  textAlign(RIGHT);\\n  text('100', width, guideY);\\n\\n  // Draw the normalized value\\n  textAlign(LEFT);\\n  fill(0);\\n  textSize(32);\\n  let normalY = 40;\\n  let normalX = 20;\\n  text(normalized, normalX, normalY);\\n}\\n</code></div>\"\n                ],\n                alt:\n                  'ellipse moves with mouse. 0 shown left & 100 right and updating values center',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Calculation'\n              },\n              {\n                file: 'src/math/calculation.js',\n                line: 631,\n                description:\n                  '<p>Facilitates exponential expressions. The <a href=\"#/p5/pow\">pow()</a> function is an efficient\\nway of multiplying numbers by themselves (or their reciprocals) in large\\nquantities. For example, pow(3, 5) is equivalent to the expression\\n3<em>3</em>3<em>3</em>3 and pow(3, -5) is equivalent to 1 / 3<em>3</em>3<em>3</em>3. Maps to\\nMath.pow().</p>\\n',\n                itemtype: 'method',\n                name: 'pow',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>base of the exponential expression</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'e',\n                    description: '<p>power by which to raise the base</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'n^e',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div><code>\\nfunction setup() {\\n  //Exponentially increase the size of an ellipse.\\n  let eSize = 3; // Original Size\\n  let eLoc = 10; // Original Location\\n\\n  ellipse(eLoc, eLoc, eSize, eSize);\\n\\n  ellipse(eLoc * 2, eLoc * 2, pow(eSize, 2), pow(eSize, 2));\\n\\n  ellipse(eLoc * 4, eLoc * 4, pow(eSize, 3), pow(eSize, 3));\\n\\n  ellipse(eLoc * 8, eLoc * 8, pow(eSize, 4), pow(eSize, 4));\\n}\\n</code></div>'\n                ],\n                alt: 'small to large ellipses radiating from top left of canvas',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Calculation'\n              },\n              {\n                file: 'src/math/calculation.js',\n                line: 665,\n                description:\n                  '<p>Calculates the integer closest to the n parameter. For example,\\nround(133.8) returns the value 134. Maps to Math.round().</p>\\n',\n                itemtype: 'method',\n                name: 'round',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>number to round</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'rounded number',\n                  type: 'Integer'\n                },\n                example: [\n                  '\\n<div><code>\\nfunction draw() {\\n  background(200);\\n  //map, mouseX between 0 and 5.\\n  let ax = map(mouseX, 0, 100, 0, 5);\\n  let ay = 66;\\n\\n  // Round the mapped number.\\n  let bx = round(map(mouseX, 0, 100, 0, 5));\\n  let by = 33;\\n\\n  // Multiply the mapped numbers by 20 to more easily\\n  // see the changes.\\n  stroke(0);\\n  fill(0);\\n  line(0, ay, ax * 20, ay);\\n  line(0, by, bx * 20, by);\\n\\n  // Reformat the float returned by map and draw it.\\n  noStroke();\\n  text(nfc(ax, 2), ax, ay - 5);\\n  text(nfc(bx, 1), bx, by - 5);\\n}\\n</code></div>'\n                ],\n                alt:\n                  'horizontal center line squared values displayed on top and regular on bottom.',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Calculation'\n              },\n              {\n                file: 'src/math/calculation.js',\n                line: 704,\n                description:\n                  '<p>Squares a number (multiplies a number by itself). The result is always a\\npositive number, as multiplying two negative numbers always yields a\\npositive result. For example, -1 * -1 = 1.</p>\\n',\n                itemtype: 'method',\n                name: 'sq',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>number to square</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'squared number',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div><code>\\nfunction draw() {\\n  background(200);\\n  let eSize = 7;\\n  let x1 = map(mouseX, 0, width, 0, 10);\\n  let y1 = 80;\\n  let x2 = sq(x1);\\n  let y2 = 20;\\n\\n  // Draw the non-squared.\\n  line(0, y1, width, y1);\\n  ellipse(x1, y1, eSize, eSize);\\n\\n  // Draw the squared.\\n  line(0, y2, width, y2);\\n  ellipse(x2, y2, eSize, eSize);\\n\\n  // Draw dividing line.\\n  stroke(100);\\n  line(0, height / 2, width, height / 2);\\n\\n  // Draw text.\\n  let spacing = 15;\\n  noStroke();\\n  fill(0);\\n  text('x = ' + x1, 0, y1 + spacing);\\n  text('sq(x) = ' + x2, 0, y2 + spacing);\\n}\\n</code></div>\"\n                ],\n                alt:\n                  'horizontal center line squared values displayed on top and regular on bottom.',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Calculation'\n              },\n              {\n                file: 'src/math/calculation.js',\n                line: 751,\n                description:\n                  '<p>Calculates the square root of a number. The square root of a number is\\nalways positive, even though there may be a valid negative root. The\\nsquare root s of number a is such that s*s = a. It is the opposite of\\nsquaring. Maps to Math.sqrt().</p>\\n',\n                itemtype: 'method',\n                name: 'sqrt',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>non-negative number to square root</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'square root of number',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div><code>\\nfunction draw() {\\n  background(200);\\n  let eSize = 7;\\n  let x1 = mouseX;\\n  let y1 = 80;\\n  let x2 = sqrt(x1);\\n  let y2 = 20;\\n\\n  // Draw the non-squared.\\n  line(0, y1, width, y1);\\n  ellipse(x1, y1, eSize, eSize);\\n\\n  // Draw the squared.\\n  line(0, y2, width, y2);\\n  ellipse(x2, y2, eSize, eSize);\\n\\n  // Draw dividing line.\\n  stroke(100);\\n  line(0, height / 2, width, height / 2);\\n\\n  // Draw text.\\n  noStroke();\\n  fill(0);\\n  let spacing = 15;\\n  text('x = ' + x1, 0, y1 + spacing);\\n  text('sqrt(x) = ' + x2, 0, y2 + spacing);\\n}\\n</code></div>\"\n                ],\n                alt:\n                  'horizontal center line squareroot values displayed on top and regular on bottom.',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Calculation'\n              },\n              {\n                file: 'src/math/math.js',\n                line: 12,\n                description:\n                  '<p>Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\\ntwo or three dimensional vector, specifically a Euclidean (also known as\\ngeometric) vector. A vector is an entity that has both magnitude and\\ndirection.</p>\\n',\n                itemtype: 'method',\n                name: 'createVector',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>x component of the vector</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y component of the vector</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'z',\n                    description: '<p>z component of the vector</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: '',\n                  type: 'p5.Vector'\n                },\n                example: [\n                  \"\\n<div modernizr='webgl'><code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  noStroke();\\n  fill(255, 102, 204);\\n}\\n\\nfunction draw() {\\n  background(255);\\n  pointLight(color(255), createVector(sin(millis() / 1000) * 20, -40, -10));\\n  scale(0.75);\\n  sphere();\\n}\\n</code></div>\"\n                ],\n                alt: 'a purple sphere lit by a point light oscillating horizontally',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/noise.js',\n                line: 40,\n                description:\n                  '<p>Returns the Perlin noise value at specified coordinates. Perlin noise is\\na random sequence generator producing a more natural ordered, harmonic\\nsuccession of numbers compared to the standard <b>random()</b> function.\\nIt was invented by Ken Perlin in the 1980s and been used since in\\ngraphical applications to produce procedural textures, natural motion,\\nshapes, terrains etc.<br /><br /> The main difference to the\\n<b>random()</b> function is that Perlin noise is defined in an infinite\\nn-dimensional space where each pair of coordinates corresponds to a\\nfixed semi-random value (fixed only for the lifespan of the program; see\\nthe <a href=\"#/p5/noiseSeed\">noiseSeed()</a> function). p5.js can compute 1D, 2D and 3D noise,\\ndepending on the number of coordinates given. The resulting value will\\nalways be between 0.0 and 1.0. The noise value can be animated by moving\\nthrough the noise space as demonstrated in the example above. The 2nd\\nand 3rd dimension can also be interpreted as time.<br /><br />The actual\\nnoise is structured similar to an audio signal, in respect to the\\nfunction&#39;s use of frequencies. Similar to the concept of harmonics in\\nphysics, perlin noise is computed over several octaves which are added\\ntogether for the final result. <br /><br />Another way to adjust the\\ncharacter of the resulting sequence is the scale of the input\\ncoordinates. As the function works within an infinite space the value of\\nthe coordinates doesn&#39;t matter as such, only the distance between\\nsuccessive coordinates does (eg. when using <b>noise()</b> within a\\nloop). As a general rule the smaller the difference between coordinates,\\nthe smoother the resulting noise sequence will be. Steps of 0.005-0.03\\nwork best for most applications, but this will differ depending on use.</p>\\n',\n                itemtype: 'method',\n                name: 'noise',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>x-coordinate in noise space</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y-coordinate in noise space</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'z',\n                    description: '<p>z-coordinate in noise space</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'Perlin noise value (between 0 and 1) at specified\\n                     coordinates',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\nlet xoff = 0.0;\\n\\nfunction draw() {\\n  background(204);\\n  xoff = xoff + 0.01;\\n  let n = noise(xoff) * width;\\n  line(n, 0, n, height);\\n}\\n</code>\\n</div>\\n<div>\\n<code>let noiseScale=0.02;\\n\\nfunction draw() {\\n  background(0);\\n  for (let x=0; x < width; x++) {\\n    let noiseVal = noise((mouseX+x)*noiseScale, mouseY*noiseScale);\\n    stroke(noiseVal*255);\\n    line(x, mouseY+noiseVal*80, x, height);\\n  }\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'vertical line moves left to right with updating noise values.\\nhorizontal wave pattern effected by mouse x-position & updating noise values.',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Noise'\n              },\n              {\n                file: 'src/math/noise.js',\n                line: 187,\n                description:\n                  '<p>Adjusts the character and level of detail produced by the Perlin noise\\n function. Similar to harmonics in physics, noise is computed over\\n several octaves. Lower octaves contribute more to the output signal and\\n as such define the overall intensity of the noise, whereas higher octaves\\n create finer grained details in the noise sequence.\\n <br><br>\\n By default, noise is computed over 4 octaves with each octave contributing\\n exactly half than its predecessor, starting at 50% strength for the 1st\\n octave. This falloff amount can be changed by adding an additional function\\n parameter. Eg. a falloff factor of 0.75 means each octave will now have\\n 75% impact (25% less) of the previous lower octave. Any value between\\n 0.0 and 1.0 is valid, however note that values greater than 0.5 might\\n result in greater than 1.0 values returned by <b>noise()</b>.\\n <br><br>\\n By changing these parameters, the signal created by the <b>noise()</b>\\n function can be adapted to fit very specific needs and characteristics.</p>\\n',\n                itemtype: 'method',\n                name: 'noiseDetail',\n                params: [\n                  {\n                    name: 'lod',\n                    description: '<p>number of octaves to be used by the noise</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'falloff',\n                    description: '<p>falloff factor for each octave</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  '\\n <div>\\n <code>\\n let noiseVal;\\n let noiseScale = 0.02;\\nfunction setup() {\\n   createCanvas(100, 100);\\n }\\nfunction draw() {\\n   background(0);\\n   for (let y = 0; y < height; y++) {\\n     for (let x = 0; x < width / 2; x++) {\\n       noiseDetail(2, 0.2);\\n       noiseVal = noise((mouseX + x) * noiseScale, (mouseY + y) * noiseScale);\\n       stroke(noiseVal * 255);\\n       point(x, y);\\n       noiseDetail(8, 0.65);\\n       noiseVal = noise(\\n         (mouseX + x + width / 2) * noiseScale,\\n         (mouseY + y) * noiseScale\\n       );\\n       stroke(noiseVal * 255);\\n       point(x + width / 2, y);\\n     }\\n   }\\n }\\n </code>\\n </div>'\n                ],\n                alt:\n                  '2 vertical grey smokey patterns affected my mouse x-position and noise.',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Noise'\n              },\n              {\n                file: 'src/math/noise.js',\n                line: 253,\n                description:\n                  '<p>Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>\\nproduces different results each time the program is run. Set the\\n<b>value</b> parameter to a constant to return the same pseudo-random\\nnumbers each time the software is run.</p>\\n',\n                itemtype: 'method',\n                name: 'noiseSeed',\n                params: [\n                  {\n                    name: 'seed',\n                    description: '<p>the seed value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>let xoff = 0.0;\\n\\nfunction setup() {\\n  noiseSeed(99);\\n  stroke(0, 10);\\n}\\n\\nfunction draw() {\\n  xoff = xoff + .01;\\n  let n = noise(xoff) * width;\\n  line(n, 0, n, height);\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'vertical grey lines drawing in pattern affected by noise.',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Noise'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 67,\n                description: '<p>The x component of the vector</p>\\n',\n                itemtype: 'property',\n                name: 'x',\n                type: 'Number',\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 72,\n                description: '<p>The y component of the vector</p>\\n',\n                itemtype: 'property',\n                name: 'y',\n                type: 'Number',\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 77,\n                description: '<p>The z component of the vector</p>\\n',\n                itemtype: 'property',\n                name: 'z',\n                type: 'Number',\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 84,\n                description:\n                  '<p>Returns a string representation of a vector v by calling String(v)\\nor v.toString(). This method is useful for logging vectors in the\\nconsole.</p>\\n',\n                itemtype: 'method',\n                name: 'toString',\n                return: {\n                  description: '',\n                  type: 'String'\n                },\n                example: [\n                  '\\n<div class = \"norender\">\\n<code>\\nfunction setup() {\\n  let v = createVector(20, 30);\\n  print(String(v)); // prints \"p5.Vector Object : [20, 30, 0]\"\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nfunction draw() {\\n  background(240);\\n\\n  let v0 = createVector(0, 0);\\n  let v1 = createVector(mouseX, mouseY);\\n  drawArrow(v0, v1, \\'black\\');\\n\\n  noStroke();\\n  text(v1.toString(), 10, 25, 90, 75);\\n}\\n\\n// draw an arrow for a vector at a given base position\\nfunction drawArrow(base, vec, myColor) {\\n  push();\\n  stroke(myColor);\\n  strokeWeight(3);\\n  fill(myColor);\\n  translate(base.x, base.y);\\n  line(0, 0, vec.x, vec.y);\\n  rotate(vec.heading());\\n  let arrowSize = 7;\\n  translate(vec.mag() - arrowSize, 0);\\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\\n  pop();\\n}\\n</code>\\n</div>'\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 134,\n                description:\n                  '<p>Sets the x, y, and z component of the vector using two or three separate\\nvariables, the data from a <a href=\"#/p5.Vector\">p5.Vector</a>, or the values from a float array.</p>\\n',\n                itemtype: 'method',\n                name: 'set',\n                chainable: 1,\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nfunction setup() {\\n  let v = createVector(1, 2, 3);\\n  v.set(4, 5, 6); // Sets vector to [4, 5, 6]\\n\\n  let v1 = createVector(0, 0, 0);\\n  let arr = [1, 2, 3];\\n  v1.set(arr); // Sets vector to [1, 2, 3]\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet v0, v1;\\nfunction setup() {\\n  createCanvas(100, 100);\\n\\n  v0 = createVector(0, 0);\\n  v1 = createVector(50, 50);\\n}\\n\\nfunction draw() {\\n  background(240);\\n\\n  drawArrow(v0, v1, 'black');\\n  v1.set(v1.x + random(-1, 1), v1.y + random(-1, 1));\\n\\n  noStroke();\\n  text('x: ' + round(v1.x) + ' y: ' + round(v1.y), 20, 90);\\n}\\n\\n// draw an arrow for a vector at a given base position\\nfunction drawArrow(base, vec, myColor) {\\n  push();\\n  stroke(myColor);\\n  strokeWeight(3);\\n  fill(myColor);\\n  translate(base.x, base.y);\\n  line(0, 0, vec.x, vec.y);\\n  rotate(vec.heading());\\n  let arrowSize = 7;\\n  translate(vec.mag() - arrowSize, 0);\\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\\n  pop();\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math',\n                overloads: [\n                  {\n                    line: 134,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>the x component of the vector</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>the y component of the vector</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>the z component of the vector</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 193,\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>the vector to set</p>\\n',\n                        type: 'p5.Vector|Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 217,\n                description:\n                  '<p>Gets a copy of the vector, returns a <a href=\"#/p5.Vector\">p5.Vector</a> object.</p>\\n',\n                itemtype: 'method',\n                name: 'copy',\n                return: {\n                  description: 'the copy of the <a href=\"#/p5.Vector\">p5.Vector</a> object',\n                  type: 'p5.Vector'\n                },\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\nlet v1 = createVector(1, 2, 3);\\nlet v2 = v1.copy();\\nprint(v1.x === v2.x && v1.y === v2.y && v1.z === v2.z);\\n// Prints \"true\"\\n</code>\\n</div>'\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 240,\n                description:\n                  '<p>Adds x, y, and z components to a vector, adds one vector to another, or\\nadds two independent vectors together. The version of the method that adds\\ntwo vectors together is a static method and returns a <a href=\"#/p5.Vector\">p5.Vector</a>, the others\\nacts directly on the vector. See the examples for more context.</p>\\n',\n                itemtype: 'method',\n                name: 'add',\n                chainable: 1,\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nlet v = createVector(1, 2, 3);\\nv.add(4, 5, 6);\\n// v's components are set to [5, 7, 9]\\n</code>\\n</div>\\n\\n<div class=\\\"norender\\\">\\n<code>\\n// Static method\\nlet v1 = createVector(1, 2, 3);\\nlet v2 = createVector(2, 3, 4);\\n\\nlet v3 = p5.Vector.add(v1, v2);\\n// v3 has components [3, 5, 7]\\nprint(v3);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// red vector + blue vector = purple vector\\nfunction draw() {\\n  background(240);\\n\\n  let v0 = createVector(0, 0);\\n  let v1 = createVector(mouseX, mouseY);\\n  drawArrow(v0, v1, 'red');\\n\\n  let v2 = createVector(-30, 20);\\n  drawArrow(v1, v2, 'blue');\\n\\n  let v3 = p5.Vector.add(v1, v2);\\n  drawArrow(v0, v3, 'purple');\\n}\\n\\n// draw an arrow for a vector at a given base position\\nfunction drawArrow(base, vec, myColor) {\\n  push();\\n  stroke(myColor);\\n  strokeWeight(3);\\n  fill(myColor);\\n  translate(base.x, base.y);\\n  line(0, 0, vec.x, vec.y);\\n  rotate(vec.heading());\\n  let arrowSize = 7;\\n  translate(vec.mag() - arrowSize, 0);\\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\\n  pop();\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math',\n                overloads: [\n                  {\n                    line: 240,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>the x component of the vector to be added</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>the y component of the vector to be added</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>the z component of the vector to be added</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 306,\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>the vector to add</p>\\n',\n                        type: 'p5.Vector|Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 1555,\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>a <a href=\"#/p5.Vector\">p5.Vector</a> to add</p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>a <a href=\"#/p5.Vector\">p5.Vector</a> to add</p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'target',\n                        description: '<p>the vector to receive the result</p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    static: 1\n                  },\n                  {\n                    line: 1562,\n                    params: [\n                      {\n                        name: 'v1',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v2',\n                        description: '',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    static: 1,\n                    return: {\n                      description: 'the resulting <a href=\"#/p5.Vector\">p5.Vector</a>',\n                      type: 'p5.Vector'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 330,\n                description:\n                  '<p>Subtracts x, y, and z components from a vector, subtracts one vector from\\nanother, or subtracts two independent vectors. The version of the method\\nthat subtracts two vectors is a static method and returns a <a href=\"#/p5.Vector\">p5.Vector</a>, the\\nother acts directly on the vector. See the examples for more context.</p>\\n',\n                itemtype: 'method',\n                name: 'sub',\n                chainable: 1,\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nlet v = createVector(4, 5, 6);\\nv.sub(1, 1, 1);\\n// v's components are set to [3, 4, 5]\\n</code>\\n</div>\\n\\n<div class=\\\"norender\\\">\\n<code>\\n// Static method\\nlet v1 = createVector(2, 3, 4);\\nlet v2 = createVector(1, 2, 3);\\n\\nlet v3 = p5.Vector.sub(v1, v2);\\n// v3 has components [1, 1, 1]\\nprint(v3);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// red vector - blue vector = purple vector\\nfunction draw() {\\n  background(240);\\n\\n  let v0 = createVector(0, 0);\\n  let v1 = createVector(70, 50);\\n  drawArrow(v0, v1, 'red');\\n\\n  let v2 = createVector(mouseX, mouseY);\\n  drawArrow(v0, v2, 'blue');\\n\\n  let v3 = p5.Vector.sub(v1, v2);\\n  drawArrow(v2, v3, 'purple');\\n}\\n\\n// draw an arrow for a vector at a given base position\\nfunction drawArrow(base, vec, myColor) {\\n  push();\\n  stroke(myColor);\\n  strokeWeight(3);\\n  fill(myColor);\\n  translate(base.x, base.y);\\n  line(0, 0, vec.x, vec.y);\\n  rotate(vec.heading());\\n  let arrowSize = 7;\\n  translate(vec.mag() - arrowSize, 0);\\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\\n  pop();\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math',\n                overloads: [\n                  {\n                    line: 330,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>the x component of the vector to subtract</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>the y component of the vector to subtract</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>the z component of the vector to subtract</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 396,\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>the vector to subtract</p>\\n',\n                        type: 'p5.Vector|Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 1585,\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>a <a href=\"#/p5.Vector\">p5.Vector</a> to subtract from</p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>a <a href=\"#/p5.Vector\">p5.Vector</a> to subtract</p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'target',\n                        description: '<p>if undefined a new vector will be created</p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    static: 1\n                  },\n                  {\n                    line: 1592,\n                    params: [\n                      {\n                        name: 'v1',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v2',\n                        description: '',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    static: 1,\n                    return: {\n                      description: 'the resulting <a href=\"#/p5.Vector\">p5.Vector</a>',\n                      type: 'p5.Vector'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 420,\n                description:\n                  '<p>Multiply the vector by a scalar. The static version of this method\\ncreates a new <a href=\"#/p5.Vector\">p5.Vector</a> while the non static version acts on the vector\\ndirectly. See the examples for more context.</p>\\n',\n                itemtype: 'method',\n                name: 'mult',\n                chainable: 1,\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nlet v = createVector(1, 2, 3);\\nv.mult(2);\\n// v's components are set to [2, 4, 6]\\n</code>\\n</div>\\n\\n<div class=\\\"norender\\\">\\n<code>\\n// Static method\\nlet v1 = createVector(1, 2, 3);\\nlet v2 = p5.Vector.mult(v1, 2);\\n// v2 has components [2, 4, 6]\\nprint(v2);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nfunction draw() {\\n  background(240);\\n\\n  let v0 = createVector(50, 50);\\n  let v1 = createVector(25, -25);\\n  drawArrow(v0, v1, 'red');\\n\\n  let num = map(mouseX, 0, width, -2, 2, true);\\n  let v2 = p5.Vector.mult(v1, num);\\n  drawArrow(v0, v2, 'blue');\\n\\n  noStroke();\\n  text('multiplied by ' + num.toFixed(2), 5, 90);\\n}\\n\\n// draw an arrow for a vector at a given base position\\nfunction drawArrow(base, vec, myColor) {\\n  push();\\n  stroke(myColor);\\n  strokeWeight(3);\\n  fill(myColor);\\n  translate(base.x, base.y);\\n  line(0, 0, vec.x, vec.y);\\n  rotate(vec.heading());\\n  let arrowSize = 7;\\n  translate(vec.mag() - arrowSize, 0);\\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\\n  pop();\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math',\n                overloads: [\n                  {\n                    line: 420,\n                    params: [\n                      {\n                        name: 'n',\n                        description: '<p>the number to multiply with the vector</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 1613,\n                    params: [\n                      {\n                        name: 'v',\n                        description: '<p>the vector to multiply</p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'n',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'target',\n                        description: '<p>if undefined a new vector will be created</p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    static: 1\n                  },\n                  {\n                    line: 1620,\n                    params: [\n                      {\n                        name: 'v',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'n',\n                        description: '',\n                        type: 'Number'\n                      }\n                    ],\n                    static: 1,\n                    return: {\n                      description: 'the resulting new <a href=\"#/p5.Vector\">p5.Vector</a>',\n                      type: 'p5.Vector'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 495,\n                description:\n                  '<p>Divide the vector by a scalar. The static version of this method creates a\\nnew <a href=\"#/p5.Vector\">p5.Vector</a> while the non static version acts on the vector directly.\\nSee the examples for more context.</p>\\n',\n                itemtype: 'method',\n                name: 'div',\n                chainable: 1,\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nlet v = createVector(6, 4, 2);\\nv.div(2); //v's components are set to [3, 2, 1]\\n</code>\\n</div>\\n\\n<div class=\\\"norender\\\">\\n<code>\\n// Static method\\nlet v1 = createVector(6, 4, 2);\\nlet v2 = p5.Vector.div(v1, 2);\\n// v2 has components [3, 2, 1]\\nprint(v2);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nfunction draw() {\\n  background(240);\\n\\n  let v0 = createVector(0, 100);\\n  let v1 = createVector(50, -50);\\n  drawArrow(v0, v1, 'red');\\n\\n  let num = map(mouseX, 0, width, 10, 0.5, true);\\n  let v2 = p5.Vector.div(v1, num);\\n  drawArrow(v0, v2, 'blue');\\n\\n  noStroke();\\n  text('divided by ' + num.toFixed(2), 10, 90);\\n}\\n\\n// draw an arrow for a vector at a given base position\\nfunction drawArrow(base, vec, myColor) {\\n  push();\\n  stroke(myColor);\\n  strokeWeight(3);\\n  fill(myColor);\\n  translate(base.x, base.y);\\n  line(0, 0, vec.x, vec.y);\\n  rotate(vec.heading());\\n  let arrowSize = 7;\\n  translate(vec.mag() - arrowSize, 0);\\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\\n  pop();\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math',\n                overloads: [\n                  {\n                    line: 495,\n                    params: [\n                      {\n                        name: 'n',\n                        description: '<p>the number to divide the vector by</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 1640,\n                    params: [\n                      {\n                        name: 'v',\n                        description: '<p>the vector to divide</p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'n',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'target',\n                        description: '<p>if undefined a new vector will be created</p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    static: 1\n                  },\n                  {\n                    line: 1647,\n                    params: [\n                      {\n                        name: 'v',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'n',\n                        description: '',\n                        type: 'Number'\n                      }\n                    ],\n                    static: 1,\n                    return: {\n                      description: 'the resulting new <a href=\"#/p5.Vector\">p5.Vector</a>',\n                      type: 'p5.Vector'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 573,\n                description:\n                  '<p>Calculates the magnitude (length) of the vector and returns the result as\\na float (this is simply the equation sqrt(x<em>x + y</em>y + z*z).)</p>\\n',\n                itemtype: 'method',\n                name: 'mag',\n                return: {\n                  description: 'magnitude of the vector',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\nfunction draw() {\\n  background(240);\\n\\n  let v0 = createVector(0, 0);\\n  let v1 = createVector(mouseX, mouseY);\\n  drawArrow(v0, v1, \\'black\\');\\n\\n  noStroke();\\n  text(\\'vector length: \\' + v1.mag().toFixed(2), 10, 70, 90, 30);\\n}\\n\\n// draw an arrow for a vector at a given base position\\nfunction drawArrow(base, vec, myColor) {\\n  push();\\n  stroke(myColor);\\n  strokeWeight(3);\\n  fill(myColor);\\n  translate(base.x, base.y);\\n  line(0, 0, vec.x, vec.y);\\n  rotate(vec.heading());\\n  let arrowSize = 7;\\n  translate(vec.mag() - arrowSize, 0);\\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\\n  pop();\\n}\\n</code>\\n</div>\\n<div class=\"norender\">\\n<code>\\nlet v = createVector(20.0, 30.0, 40.0);\\nlet m = v.mag();\\nprint(m); // Prints \"53.85164807134504\"\\n</code>\\n</div>'\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math',\n                overloads: [\n                  {\n                    line: 573,\n                    params: [],\n                    return: {\n                      description: 'magnitude of the vector',\n                      type: 'Number'\n                    }\n                  },\n                  {\n                    line: 1737,\n                    params: [\n                      {\n                        name: 'vecT',\n                        description: '<p>the vector to return the magnitude of</p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    static: 1,\n                    return: {\n                      description: 'the magnitude of vecT',\n                      type: 'Number'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 621,\n                description:\n                  '<p>Calculates the squared magnitude of the vector and returns the result\\nas a float (this is simply the equation <em>(x<em>x + y</em>y + z*z)</em>.)\\nFaster if the real length is not required in the\\ncase of comparing vectors, etc.</p>\\n',\n                itemtype: 'method',\n                name: 'magSq',\n                return: {\n                  description: 'squared magnitude of the vector',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\n// Static method\\nlet v1 = createVector(6, 4, 2);\\nprint(v1.magSq()); // Prints \"56\"\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nfunction draw() {\\n  background(240);\\n\\n  let v0 = createVector(0, 0);\\n  let v1 = createVector(mouseX, mouseY);\\n  drawArrow(v0, v1, \\'black\\');\\n\\n  noStroke();\\n  text(\\'vector length squared: \\' + v1.magSq().toFixed(2), 10, 45, 90, 55);\\n}\\n\\n// draw an arrow for a vector at a given base position\\nfunction drawArrow(base, vec, myColor) {\\n  push();\\n  stroke(myColor);\\n  strokeWeight(3);\\n  fill(myColor);\\n  translate(base.x, base.y);\\n  line(0, 0, vec.x, vec.y);\\n  rotate(vec.heading());\\n  let arrowSize = 7;\\n  translate(vec.mag() - arrowSize, 0);\\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\\n  pop();\\n}\\n</code>\\n</div>'\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 675,\n                description:\n                  '<p>Calculates the dot product of two vectors. The version of the method\\nthat computes the dot product of two independent vectors is a static\\nmethod. See the examples for more context.</p>\\n',\n                itemtype: 'method',\n                name: 'dot',\n                return: {\n                  description: 'the dot product',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\nlet v1 = createVector(1, 2, 3);\\nlet v2 = createVector(2, 3, 4);\\n\\nprint(v1.dot(v2)); // Prints \"20\"\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\n//Static method\\nlet v1 = createVector(1, 2, 3);\\nlet v2 = createVector(3, 2, 1);\\nprint(p5.Vector.dot(v1, v2)); // Prints \"10\"\\n</code>\\n</div>'\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math',\n                overloads: [\n                  {\n                    line: 675,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>x component of the vector</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y component of the vector</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>z component of the vector</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: 'the dot product',\n                      type: 'Number'\n                    }\n                  },\n                  {\n                    line: 706,\n                    params: [\n                      {\n                        name: 'value',\n                        description:\n                          '<p>value component of the vector or a <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'Number'\n                    }\n                  },\n                  {\n                    line: 1667,\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>the first <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>the second <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    static: 1,\n                    return: {\n                      description: 'the dot product',\n                      type: 'Number'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 718,\n                description:\n                  '<p>Calculates and returns a vector composed of the cross product between\\ntwo vectors. Both the static and non static methods return a new <a href=\"#/p5.Vector\">p5.Vector</a>.\\nSee the examples for more context.</p>\\n',\n                itemtype: 'method',\n                name: 'cross',\n                return: {\n                  description:\n                    '<a href=\"#/p5.Vector\">p5.Vector</a> composed of cross product',\n                  type: 'p5.Vector'\n                },\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\nlet v1 = createVector(1, 2, 3);\\nlet v2 = createVector(1, 2, 3);\\n\\nv1.cross(v2); // v\\'s components are [0, 0, 0]\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\n// Static method\\nlet v1 = createVector(1, 0, 0);\\nlet v2 = createVector(0, 1, 0);\\n\\nlet crossProduct = p5.Vector.cross(v1, v2);\\n// crossProduct has components [0, 0, 1]\\nprint(crossProduct);\\n</code>\\n</div>'\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math',\n                overloads: [\n                  {\n                    line: 718,\n                    params: [\n                      {\n                        name: 'v',\n                        description:\n                          '<p><a href=\"#/p5.Vector\">p5.Vector</a> to be crossed</p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    return: {\n                      description:\n                        '<a href=\"#/p5.Vector\">p5.Vector</a> composed of cross product',\n                      type: 'p5.Vector'\n                    }\n                  },\n                  {\n                    line: 1681,\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>the first <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>the second <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    static: 1,\n                    return: {\n                      description: 'the cross product',\n                      type: 'Number'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 759,\n                description:\n                  '<p>Calculates the Euclidean distance between two points (considering a\\npoint as a vector object).</p>\\n',\n                itemtype: 'method',\n                name: 'dist',\n                return: {\n                  description: 'the distance',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nlet v1 = createVector(1, 0, 0);\\nlet v2 = createVector(0, 1, 0);\\n\\nlet distance = v1.dist(v2); // distance is 1.4142...\\nprint(distance);\\n</code>\\n</div>\\n\\n<div class=\\\"norender\\\">\\n<code>\\n// Static method\\nlet v1 = createVector(1, 0, 0);\\nlet v2 = createVector(0, 1, 0);\\n\\nlet distance = p5.Vector.dist(v1, v2);\\n// distance is 1.4142...\\nprint(distance);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nfunction draw() {\\n  background(240);\\n\\n  let v0 = createVector(0, 0);\\n\\n  let v1 = createVector(70, 50);\\n  drawArrow(v0, v1, 'red');\\n\\n  let v2 = createVector(mouseX, mouseY);\\n  drawArrow(v0, v2, 'blue');\\n\\n  noStroke();\\n  text('distance between vectors: ' + v2.dist(v1).toFixed(2), 5, 50, 95, 50);\\n}\\n\\n// draw an arrow for a vector at a given base position\\nfunction drawArrow(base, vec, myColor) {\\n  push();\\n  stroke(myColor);\\n  strokeWeight(3);\\n  fill(myColor);\\n  translate(base.x, base.y);\\n  line(0, 0, vec.x, vec.y);\\n  rotate(vec.heading());\\n  let arrowSize = 7;\\n  translate(vec.mag() - arrowSize, 0);\\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\\n  pop();\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math',\n                overloads: [\n                  {\n                    line: 759,\n                    params: [\n                      {\n                        name: 'v',\n                        description:\n                          '<p>the x, y, and z coordinates of a <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    return: {\n                      description: 'the distance',\n                      type: 'Number'\n                    }\n                  },\n                  {\n                    line: 1696,\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>the first <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>the second <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    static: 1,\n                    return: {\n                      description: 'the distance',\n                      type: 'Number'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 830,\n                description:\n                  '<p>Normalize the vector to length 1 (make it a unit vector).</p>\\n',\n                itemtype: 'method',\n                name: 'normalize',\n                return: {\n                  description: 'normalized <a href=\"#/p5.Vector\">p5.Vector</a>',\n                  type: 'p5.Vector'\n                },\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nlet v = createVector(10, 20, 2);\\n// v has components [10.0, 20.0, 2.0]\\nv.normalize();\\n// v's components are set to\\n// [0.4454354, 0.8908708, 0.089087084]\\n</code>\\n</div>\\n<div>\\n<code>\\nfunction draw() {\\n  background(240);\\n\\n  let v0 = createVector(50, 50);\\n  let v1 = createVector(mouseX - 50, mouseY - 50);\\n\\n  drawArrow(v0, v1, 'red');\\n  v1.normalize();\\n  drawArrow(v0, v1.mult(35), 'blue');\\n\\n  noFill();\\n  ellipse(50, 50, 35 * 2);\\n}\\n\\n// draw an arrow for a vector at a given base position\\nfunction drawArrow(base, vec, myColor) {\\n  push();\\n  stroke(myColor);\\n  strokeWeight(3);\\n  fill(myColor);\\n  translate(base.x, base.y);\\n  line(0, 0, vec.x, vec.y);\\n  rotate(vec.heading());\\n  let arrowSize = 7;\\n  translate(vec.mag() - arrowSize, 0);\\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\\n  pop();\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 886,\n                description:\n                  '<p>Limit the magnitude of this vector to the value used for the <b>max</b>\\nparameter.</p>\\n',\n                itemtype: 'method',\n                name: 'limit',\n                params: [\n                  {\n                    name: 'max',\n                    description: '<p>the maximum magnitude for the vector</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nlet v = createVector(10, 20, 2);\\n// v has components [10.0, 20.0, 2.0]\\nv.limit(5);\\n// v's components are set to\\n// [2.2271771, 4.4543543, 0.4454354]\\n</code>\\n</div>\\n<div>\\n<code>\\nfunction draw() {\\n  background(240);\\n\\n  let v0 = createVector(50, 50);\\n  let v1 = createVector(mouseX - 50, mouseY - 50);\\n\\n  drawArrow(v0, v1, 'red');\\n  drawArrow(v0, v1.limit(35), 'blue');\\n\\n  noFill();\\n  ellipse(50, 50, 35 * 2);\\n}\\n\\n// draw an arrow for a vector at a given base position\\nfunction drawArrow(base, vec, myColor) {\\n  push();\\n  stroke(myColor);\\n  strokeWeight(3);\\n  fill(myColor);\\n  translate(base.x, base.y);\\n  line(0, 0, vec.x, vec.y);\\n  rotate(vec.heading());\\n  let arrowSize = 7;\\n  translate(vec.mag() - arrowSize, 0);\\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\\n  pop();\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 944,\n                description:\n                  '<p>Set the magnitude of this vector to the value used for the <b>len</b>\\nparameter.</p>\\n',\n                itemtype: 'method',\n                name: 'setMag',\n                params: [\n                  {\n                    name: 'len',\n                    description: '<p>the new length for this vector</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nlet v = createVector(10, 20, 2);\\n// v has components [10.0, 20.0, 2.0]\\nv.setMag(10);\\n// v's components are set to [6.0, 8.0, 0.0]\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nfunction draw() {\\n  background(240);\\n\\n  let v0 = createVector(0, 0);\\n  let v1 = createVector(50, 50);\\n\\n  drawArrow(v0, v1, 'red');\\n\\n  let length = map(mouseX, 0, width, 0, 141, true);\\n  v1.setMag(length);\\n  drawArrow(v0, v1, 'blue');\\n\\n  noStroke();\\n  text('magnitude set to: ' + length.toFixed(2), 10, 70, 90, 30);\\n}\\n\\n// draw an arrow for a vector at a given base position\\nfunction drawArrow(base, vec, myColor) {\\n  push();\\n  stroke(myColor);\\n  strokeWeight(3);\\n  fill(myColor);\\n  translate(base.x, base.y);\\n  line(0, 0, vec.x, vec.y);\\n  rotate(vec.heading());\\n  let arrowSize = 7;\\n  translate(vec.mag() - arrowSize, 0);\\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\\n  pop();\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 1000,\n                description:\n                  '<p>Calculate the angle of rotation for this vector (only 2D vectors)</p>\\n',\n                itemtype: 'method',\n                name: 'heading',\n                return: {\n                  description: 'the angle of rotation',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div class = \\\"norender\\\">\\n<code>\\nfunction setup() {\\n  let v1 = createVector(30, 50);\\n  print(v1.heading()); // 1.0303768265243125\\n\\n  v1 = createVector(40, 50);\\n  print(v1.heading()); // 0.8960553845713439\\n\\n  v1 = createVector(30, 70);\\n  print(v1.heading()); // 1.1659045405098132\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nfunction draw() {\\n  background(240);\\n\\n  let v0 = createVector(50, 50);\\n  let v1 = createVector(mouseX - 50, mouseY - 50);\\n\\n  drawArrow(v0, v1, 'black');\\n\\n  let myHeading = v1.heading();\\n  noStroke();\\n  text(\\n    'vector heading: ' +\\n      myHeading.toFixed(2) +\\n      ' radians or ' +\\n      degrees(myHeading).toFixed(2) +\\n      ' degrees',\\n    10,\\n    50,\\n    90,\\n    50\\n  );\\n}\\n\\n// draw an arrow for a vector at a given base position\\nfunction drawArrow(base, vec, myColor) {\\n  push();\\n  stroke(myColor);\\n  strokeWeight(3);\\n  fill(myColor);\\n  translate(base.x, base.y);\\n  line(0, 0, vec.x, vec.y);\\n  rotate(vec.heading());\\n  let arrowSize = 7;\\n  translate(vec.mag() - arrowSize, 0);\\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\\n  pop();\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 1069,\n                description:\n                  '<p>Rotate the vector by an angle (only 2D vectors), magnitude remains the\\nsame</p>\\n',\n                itemtype: 'method',\n                name: 'rotate',\n                params: [\n                  {\n                    name: 'angle',\n                    description: '<p>the angle of rotation</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nlet v = createVector(10.0, 20.0);\\n// v has components [10.0, 20.0, 0.0]\\nv.rotate(HALF_PI);\\n// v's components are set to [-20.0, 9.999999, 0.0]\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet angle = 0;\\nfunction draw() {\\n  background(240);\\n\\n  let v0 = createVector(50, 50);\\n  let v1 = createVector(50, 0);\\n\\n  drawArrow(v0, v1.rotate(angle), 'black');\\n  angle += 0.01;\\n}\\n\\n// draw an arrow for a vector at a given base position\\nfunction drawArrow(base, vec, myColor) {\\n  push();\\n  stroke(myColor);\\n  strokeWeight(3);\\n  fill(myColor);\\n  translate(base.x, base.y);\\n  line(0, 0, vec.x, vec.y);\\n  rotate(vec.heading());\\n  let arrowSize = 7;\\n  translate(vec.mag() - arrowSize, 0);\\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\\n  pop();\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 1125,\n                description:\n                  '<p>Calculates and returns the angle (in radians) between two vectors.</p>\\n',\n                itemtype: 'method',\n                name: 'angleBetween',\n                params: [\n                  {\n                    name: 'value',\n                    description:\n                      '<p>the x, y, and z components of a <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                    type: 'p5.Vector'\n                  }\n                ],\n                return: {\n                  description: 'the angle between (in radians)',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nlet v1 = createVector(1, 0, 0);\\nlet v2 = createVector(0, 1, 0);\\n\\nlet angle = v1.angleBetween(v2);\\n// angle is PI/2\\nprint(angle);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nfunction draw() {\\n  background(240);\\n  let v0 = createVector(50, 50);\\n\\n  let v1 = createVector(50, 0);\\n  drawArrow(v0, v1, 'red');\\n\\n  let v2 = createVector(mouseX - 50, mouseY - 50);\\n  drawArrow(v0, v2, 'blue');\\n\\n  let angleBetween = v1.angleBetween(v2);\\n  noStroke();\\n  text(\\n    'angle between: ' +\\n      angleBetween.toFixed(2) +\\n      ' radians or ' +\\n      degrees(angleBetween).toFixed(2) +\\n      ' degrees',\\n    10,\\n    50,\\n    90,\\n    50\\n  );\\n}\\n\\n// draw an arrow for a vector at a given base position\\nfunction drawArrow(base, vec, myColor) {\\n  push();\\n  stroke(myColor);\\n  strokeWeight(3);\\n  fill(myColor);\\n  translate(base.x, base.y);\\n  line(0, 0, vec.x, vec.y);\\n  rotate(vec.heading());\\n  let arrowSize = 7;\\n  translate(vec.mag() - arrowSize, 0);\\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\\n  pop();\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 1198,\n                description: '<p>Linear interpolate the vector to another vector</p>\\n',\n                itemtype: 'method',\n                name: 'lerp',\n                chainable: 1,\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nlet v = createVector(1, 1, 0);\\n\\nv.lerp(3, 3, 0, 0.5); // v now has components [2,2,0]\\n</code>\\n</div>\\n\\n<div class=\\\"norender\\\">\\n<code>\\nlet v1 = createVector(0, 0, 0);\\nlet v2 = createVector(100, 100, 0);\\n\\nlet v3 = p5.Vector.lerp(v1, v2, 0.5);\\n// v3 has components [50,50,0]\\nprint(v3);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet step = 0.01;\\nlet amount = 0;\\n\\nfunction draw() {\\n  background(240);\\n  let v0 = createVector(0, 0);\\n\\n  let v1 = createVector(mouseX, mouseY);\\n  drawArrow(v0, v1, 'red');\\n\\n  let v2 = createVector(90, 90);\\n  drawArrow(v0, v2, 'blue');\\n\\n  if (amount > 1 || amount < 0) {\\n    step *= -1;\\n  }\\n  amount += step;\\n  let v3 = p5.Vector.lerp(v1, v2, amount);\\n\\n  drawArrow(v0, v3, 'purple');\\n}\\n\\n// draw an arrow for a vector at a given base position\\nfunction drawArrow(base, vec, myColor) {\\n  push();\\n  stroke(myColor);\\n  strokeWeight(3);\\n  fill(myColor);\\n  translate(base.x, base.y);\\n  line(0, 0, vec.x, vec.y);\\n  rotate(vec.heading());\\n  let arrowSize = 7;\\n  translate(vec.mag() - arrowSize, 0);\\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\\n  pop();\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math',\n                overloads: [\n                  {\n                    line: 1198,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>the x component</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>the y component</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>the z component</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'amt',\n                        description:\n                          '<p>the amount of interpolation; some value between 0.0\\n                        (old vector) and 1.0 (new vector). 0.9 is very near\\n                        the new vector. 0.5 is halfway in between.</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 1271,\n                    params: [\n                      {\n                        name: 'v',\n                        description:\n                          '<p>the <a href=\"#/p5.Vector\">p5.Vector</a> to lerp to</p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'amt',\n                        description: '',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 1711,\n                    params: [\n                      {\n                        name: 'v1',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v2',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'amt',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'target',\n                        description: '<p>if undefined a new vector will be created</p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    static: 1\n                  },\n                  {\n                    line: 1719,\n                    params: [\n                      {\n                        name: 'v1',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v2',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'amt',\n                        description: '',\n                        type: 'Number'\n                      }\n                    ],\n                    static: 1,\n                    return: {\n                      description: 'the lerped value',\n                      type: 'Number'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 1287,\n                description:\n                  '<p>Return a representation of this vector as a float array. This is only\\nfor temporary use. If used in any other fashion, the contents should be\\ncopied by using the <b>p5.Vector.<a href=\"#/p5.Vector/copy\">copy()</a></b> method to copy into your own\\narray.</p>\\n',\n                itemtype: 'method',\n                name: 'array',\n                return: {\n                  description: 'an Array with the 3 values',\n                  type: 'Number[]'\n                },\n                example: [\n                  '\\n<div class = \"norender\">\\n<code>\\nfunction setup() {\\n  let v = createVector(20, 30);\\n  print(v.array()); // Prints : Array [20, 30, 0]\\n}\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\nlet v = createVector(10.0, 20.0, 30.0);\\nlet f = v.array();\\nprint(f[0]); // Prints \"10.0\"\\nprint(f[1]); // Prints \"20.0\"\\nprint(f[2]); // Prints \"30.0\"\\n</code>\\n</div>'\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 1319,\n                description:\n                  '<p>Equality check against a <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                itemtype: 'method',\n                name: 'equals',\n                return: {\n                  description: 'whether the vectors are equals',\n                  type: 'Boolean'\n                },\n                example: [\n                  '\\n<div class = \"norender\">\\n<code>\\nlet v1 = createVector(5, 10, 20);\\nlet v2 = createVector(5, 10, 20);\\nlet v3 = createVector(13, 10, 19);\\n\\nprint(v1.equals(v2.x, v2.y, v2.z)); // true\\nprint(v1.equals(v3.x, v3.y, v3.z)); // false\\n</code>\\n</div>\\n\\n<div class=\"norender\">\\n<code>\\nlet v1 = createVector(10.0, 20.0, 30.0);\\nlet v2 = createVector(10.0, 20.0, 30.0);\\nlet v3 = createVector(0.0, 0.0, 0.0);\\nprint(v1.equals(v2)); // true\\nprint(v1.equals(v3)); // false\\n</code>\\n</div>'\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math',\n                overloads: [\n                  {\n                    line: 1319,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>the x component of the vector</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>the y component of the vector</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>the z component of the vector</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: 'whether the vectors are equals',\n                      type: 'Boolean'\n                    }\n                  },\n                  {\n                    line: 1349,\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>the vector to compare</p>\\n',\n                        type: 'p5.Vector|Array'\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'Boolean'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 1374,\n                description: '<p>Make a new 2D vector from an angle</p>\\n',\n                itemtype: 'method',\n                name: 'fromAngle',\n                static: 1,\n                params: [\n                  {\n                    name: 'angle',\n                    description:\n                      '<p>the desired angle, in radians (unaffected by <a href=\"#/p5/angleMode\">angleMode</a>)</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'length',\n                    description: '<p>the length of the new vector (defaults to 1)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'the new <a href=\"#/p5.Vector\">p5.Vector</a> object',\n                  type: 'p5.Vector'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nfunction draw() {\\n  background(200);\\n\\n  // Create a variable, proportional to the mouseX,\\n  // varying from 0-360, to represent an angle in degrees.\\n  let myDegrees = map(mouseX, 0, width, 0, 360);\\n\\n  // Display that variable in an onscreen text.\\n  // (Note the nfc() function to truncate additional decimal places,\\n  // and the \\\"\\\\xB0\\\" character for the degree symbol.)\\n  let readout = 'angle = ' + nfc(myDegrees, 1) + '\\\\xB0';\\n  noStroke();\\n  fill(0);\\n  text(readout, 5, 15);\\n\\n  // Create a p5.Vector using the fromAngle function,\\n  // and extract its x and y components.\\n  let v = p5.Vector.fromAngle(radians(myDegrees), 30);\\n  let vx = v.x;\\n  let vy = v.y;\\n\\n  push();\\n  translate(width / 2, height / 2);\\n  noFill();\\n  stroke(150);\\n  line(0, 0, 30, 0);\\n  stroke(0);\\n  line(0, 0, vx, vy);\\n  pop();\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 1425,\n                description:\n                  '<p>Make a new 3D vector from a pair of ISO spherical angles</p>\\n',\n                itemtype: 'method',\n                name: 'fromAngles',\n                static: 1,\n                params: [\n                  {\n                    name: 'theta',\n                    description: '<p>the polar angle, in radians (zero is up)</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'phi',\n                    description:\n                      '<p>the azimuthal angle, in radians\\n                              (zero is out of the screen)</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'length',\n                    description: '<p>the length of the new vector (defaults to 1)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'the new <a href=\"#/p5.Vector\">p5.Vector</a> object',\n                  type: 'p5.Vector'\n                },\n                example: [\n                  \"\\n<div modernizr='webgl'>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  fill(255);\\n  noStroke();\\n}\\nfunction draw() {\\n  background(255);\\n\\n  let t = millis() / 1000;\\n\\n  // add three point lights\\n  pointLight(color('#f00'), p5.Vector.fromAngles(t * 1.0, t * 1.3, 100));\\n  pointLight(color('#0f0'), p5.Vector.fromAngles(t * 1.1, t * 1.2, 100));\\n  pointLight(color('#00f'), p5.Vector.fromAngles(t * 1.2, t * 1.1, 100));\\n\\n  sphere(35);\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 1474,\n                description: '<p>Make a new 2D unit vector from a random angle</p>\\n',\n                itemtype: 'method',\n                name: 'random2D',\n                static: 1,\n                return: {\n                  description: 'the new <a href=\"#/p5.Vector\">p5.Vector</a> object',\n                  type: 'p5.Vector'\n                },\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nlet v = p5.Vector.random2D();\\n// May make v's attributes something like:\\n// [0.61554617, -0.51195765, 0.0] or\\n// [-0.4695841, -0.14366731, 0.0] or\\n// [0.6091097, -0.22805278, 0.0]\\nprint(v);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nfunction setup() {\\n  frameRate(1);\\n}\\n\\nfunction draw() {\\n  background(240);\\n\\n  let v0 = createVector(50, 50);\\n  let v1 = p5.Vector.random2D();\\n  drawArrow(v0, v1.mult(50), 'black');\\n}\\n\\n// draw an arrow for a vector at a given base position\\nfunction drawArrow(base, vec, myColor) {\\n  push();\\n  stroke(myColor);\\n  strokeWeight(3);\\n  fill(myColor);\\n  translate(base.x, base.y);\\n  line(0, 0, vec.x, vec.y);\\n  rotate(vec.heading());\\n  let arrowSize = 7;\\n  translate(vec.mag() - arrowSize, 0);\\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\\n  pop();\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 1527,\n                description: '<p>Make a new random 3D unit vector.</p>\\n',\n                itemtype: 'method',\n                name: 'random3D',\n                static: 1,\n                return: {\n                  description: 'the new <a href=\"#/p5.Vector\">p5.Vector</a> object',\n                  type: 'p5.Vector'\n                },\n                example: [\n                  '\\n<div class=\"norender\">\\n<code>\\nlet v = p5.Vector.random3D();\\n// May make v\\'s attributes something like:\\n// [0.61554617, -0.51195765, 0.599168] or\\n// [-0.4695841, -0.14366731, -0.8711202] or\\n// [0.6091097, -0.22805278, -0.7595902]\\nprint(v);\\n</code>\\n</div>'\n                ],\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 1610,\n                description:\n                  '<p>Multiplies a vector by a scalar and returns a new vector.</p>\\n',\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 1637,\n                description:\n                  '<p>Divides a vector by a scalar and returns a new vector.</p>\\n',\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 1664,\n                description: '<p>Calculates the dot product of two vectors.</p>\\n',\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 1678,\n                description: '<p>Calculates the cross product of two vectors.</p>\\n',\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 1692,\n                description:\n                  '<p>Calculates the Euclidean distance between two points (considering a\\npoint as a vector object).</p>\\n',\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/p5.Vector.js',\n                line: 1707,\n                description:\n                  '<p>Linear interpolate a vector to another vector and return the result as a\\nnew vector.</p>\\n',\n                class: 'p5.Vector',\n                module: 'Math',\n                submodule: 'Math'\n              },\n              {\n                file: 'src/math/random.js',\n                line: 48,\n                description:\n                  '<p>Sets the seed value for <a href=\"#/p5/random\">random()</a>.</p>\\n<p>By default, <a href=\"#/p5/random\">random()</a> produces different results each time the program\\nis run. Set the seed parameter to a constant to return the same\\npseudo-random numbers each time the software is run.</p>\\n',\n                itemtype: 'method',\n                name: 'randomSeed',\n                params: [\n                  {\n                    name: 'seed',\n                    description: '<p>the seed value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\nrandomSeed(99);\\nfor (let i = 0; i < 100; i++) {\\n  let r = random(0, 255);\\n  stroke(r);\\n  line(i, 0, i, 100);\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'many vertical lines drawn in white, black or grey.',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Random'\n              },\n              {\n                file: 'src/math/random.js',\n                line: 79,\n                description:\n                  '<p>Return a random floating-point number.</p>\\n<p>Takes either 0, 1 or 2 arguments.</p>\\n<p>If no argument is given, returns a random number from 0\\nup to (but not including) 1.</p>\\n<p>If one argument is given and it is a number, returns a random number from 0\\nup to (but not including) the number.</p>\\n<p>If one argument is given and it is an array, returns a random element from\\nthat array.</p>\\n<p>If two arguments are given, returns a random number from the\\nfirst argument up to (but not including) the second argument.</p>\\n',\n                itemtype: 'method',\n                name: 'random',\n                return: {\n                  description: 'the random number',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nfor (let i = 0; i < 100; i++) {\\n  let r = random(50);\\n  stroke(r * 5);\\n  line(50, i, 50 + r, i);\\n}\\n</code>\\n</div>\\n<div>\\n<code>\\nfor (let i = 0; i < 100; i++) {\\n  let r = random(-50, 50);\\n  line(50, i, 50 + r, i);\\n}\\n</code>\\n</div>\\n<div>\\n<code>\\n// Get a random element from an array using the random(Array) syntax\\nlet words = ['apple', 'bear', 'cat', 'dog'];\\nlet word = random(words); // select random word\\ntext(word, 10, 50); // draw the word\\n</code>\\n</div>\"\n                ],\n                alt:\n                  '100 horizontal lines from center canvas to right. size+fill change each time\\n100 horizontal lines from center of canvas. height & side change each render\\nword displayed at random. Either apple, bear, cat, or dog',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Random',\n                overloads: [\n                  {\n                    line: 79,\n                    params: [\n                      {\n                        name: 'min',\n                        description: '<p>the lower bound (inclusive)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'max',\n                        description: '<p>the upper bound (exclusive)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: 'the random number',\n                      type: 'Number'\n                    }\n                  },\n                  {\n                    line: 133,\n                    params: [\n                      {\n                        name: 'choices',\n                        description: '<p>the array to choose from</p>\\n',\n                        type: 'Array'\n                      }\n                    ],\n                    return: {\n                      description: 'the random element from the array',\n                      type: '*'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/math/random.js',\n                line: 166,\n                description:\n                  '<p>Returns a random number fitting a Gaussian, or\\n normal, distribution. There is theoretically no minimum or maximum\\n value that <a href=\"#/p5/randomGaussian\">randomGaussian()</a> might return. Rather, there is\\n just a very low probability that values far from the mean will be\\n returned; and a higher probability that numbers near the mean will\\n be returned.\\n <br><br>\\n Takes either 0, 1 or 2 arguments.<br>\\n If no args, returns a mean of 0 and standard deviation of 1.<br>\\n If one arg, that arg is the mean (standard deviation is 1).<br>\\n If two args, first is mean, second is standard deviation.</p>\\n',\n                itemtype: 'method',\n                name: 'randomGaussian',\n                params: [\n                  {\n                    name: 'mean',\n                    description: '<p>the mean</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'sd',\n                    description: '<p>the standard deviation</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'the random number',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n <div>\\n <code>\\n for (let y = 0; y < 100; y++) {\\n   let x = randomGaussian(50, 15);\\n   line(50, y, x, y);\\n }\\n </code>\\n </div>\\n <div>\\n <code>\\n let distribution = new Array(360);\\nfunction setup() {\\n   createCanvas(100, 100);\\n   for (let i = 0; i < distribution.length; i++) {\\n     distribution[i] = floor(randomGaussian(0, 15));\\n   }\\n }\\nfunction draw() {\\n   background(204);\\n  translate(width / 2, width / 2);\\n  for (let i = 0; i < distribution.length; i++) {\\n     rotate(TWO_PI / distribution.length);\\n     stroke(0);\\n     let dist = abs(distribution[i]);\\n     line(0, 0, dist, 0);\\n   }\\n }\\n </code>\\n </div>'\n                ],\n                alt:\n                  '100 horizontal lines from center of canvas. height & side change each render\\n black lines radiate from center of canvas. size determined each render',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Random'\n              },\n              {\n                file: 'src/math/trigonometry.js',\n                line: 20,\n                description:\n                  '<p>The inverse of <a href=\"#/p5/cos\">cos()</a>, returns the arc cosine of a value. This function\\nexpects the values in the range of -1 to 1 and values are returned in\\nthe range 0 to PI (3.1415927).</p>\\n',\n                itemtype: 'method',\n                name: 'acos',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>the value whose arc cosine is to be returned</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'the arc cosine of the given value',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div class= “norender\\\">\\n<code>\\nlet a = PI;\\nlet c = cos(a);\\nlet ac = acos(c);\\n// Prints: \\\"3.1415927 : -1.0 : 3.1415927\\\"\\nprint(a + ' : ' + c + ' : ' + ac);\\n</code>\\n</div>\\n\\n<div class= “norender\\\">\\n<code>\\nlet a = PI + PI / 4.0;\\nlet c = cos(a);\\nlet ac = acos(c);\\n// Prints: \\\"3.926991 : -0.70710665 : 2.3561943\\\"\\nprint(a + ' : ' + c + ' : ' + ac);\\n</code>\\n</div>\"\n                ],\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Trigonometry'\n              },\n              {\n                file: 'src/math/trigonometry.js',\n                line: 54,\n                description:\n                  '<p>The inverse of <a href=\"#/p5/sin\">sin()</a>, returns the arc sine of a value. This function\\nexpects the values in the range of -1 to 1 and values are returned\\nin the range -PI/2 to PI/2.</p>\\n',\n                itemtype: 'method',\n                name: 'asin',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>the value whose arc sine is to be returned</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'the arc sine of the given value',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div class= “norender\\\">\\n<code>\\nlet a = PI + PI / 3;\\nlet s = sin(a);\\nlet as = asin(s);\\n// Prints: \\\"1.0471976 : 0.86602545 : 1.0471976\\\"\\nprint(a + ' : ' + s + ' : ' + as);\\n</code>\\n</div>\\n\\n<div class= “norender\\\">\\n<code>\\nlet a = PI + PI / 3.0;\\nlet s = sin(a);\\nlet as = asin(s);\\n// Prints: \\\"4.1887903 : -0.86602545 : -1.0471976\\\"\\nprint(a + ' : ' + s + ' : ' + as);\\n</code>\\n</div>\\n\"\n                ],\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Trigonometry'\n              },\n              {\n                file: 'src/math/trigonometry.js',\n                line: 89,\n                description:\n                  '<p>The inverse of <a href=\"#/p5/tan\">tan()</a>, returns the arc tangent of a value. This function\\nexpects the values in the range of -Infinity to Infinity (exclusive) and\\nvalues are returned in the range -PI/2 to PI/2.</p>\\n',\n                itemtype: 'method',\n                name: 'atan',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>the value whose arc tangent is to be returned</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'the arc tangent of the given value',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div class= “norender\\\">\\n<code>\\nlet a = PI + PI / 3;\\nlet t = tan(a);\\nlet at = atan(t);\\n// Prints: \\\"1.0471976 : 1.7320509 : 1.0471976\\\"\\nprint(a + ' : ' + t + ' : ' + at);\\n</code>\\n</div>\\n\\n<div class= “norender\\\">\\n<code>\\nlet a = PI + PI / 3.0;\\nlet t = tan(a);\\nlet at = atan(t);\\n// Prints: \\\"4.1887903 : 1.7320513 : 1.0471977\\\"\\nprint(a + ' : ' + t + ' : ' + at);\\n</code>\\n</div>\\n\"\n                ],\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Trigonometry'\n              },\n              {\n                file: 'src/math/trigonometry.js',\n                line: 124,\n                description:\n                  '<p>Calculates the angle (in radians) from a specified point to the coordinate\\norigin as measured from the positive x-axis. Values are returned as a\\nfloat in the range from PI to -PI. The atan2<a href=\"#/p5/\">()</a> function is most often used\\nfor orienting geometry to the position of the cursor.\\n<br><br>\\nNote: The y-coordinate of the point is the first parameter, and the\\nx-coordinate is the second parameter, due the the structure of calculating\\nthe tangent.</p>\\n',\n                itemtype: 'method',\n                name: 'atan2',\n                params: [\n                  {\n                    name: 'y',\n                    description: '<p>y-coordinate of the point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'x',\n                    description: '<p>x-coordinate of the point</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'the arc tangent of the given point',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\nfunction draw() {\\n  background(204);\\n  translate(width / 2, height / 2);\\n  let a = atan2(mouseY - height / 2, mouseX - width / 2);\\n  rotate(a);\\n  rect(-30, -5, 60, 10);\\n}\\n</code>\\n</div>'\n                ],\n                alt: '60 by 10 rect at center of canvas rotates with mouse movements',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Trigonometry'\n              },\n              {\n                file: 'src/math/trigonometry.js',\n                line: 160,\n                description:\n                  '<p>Calculates the cosine of an angle. This function takes into account the\\ncurrent <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1.</p>\\n',\n                itemtype: 'method',\n                name: 'cos',\n                params: [\n                  {\n                    name: 'angle',\n                    description: '<p>the angle</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'the cosine of the angle',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\nlet a = 0.0;\\nlet inc = TWO_PI / 25.0;\\nfor (let i = 0; i < 25; i++) {\\n  line(i * 4, 50, i * 4, 50 + cos(a) * 40.0);\\n  a = a + inc;\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'vertical black lines form wave patterns, extend-down on left and right side',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Trigonometry'\n              },\n              {\n                file: 'src/math/trigonometry.js',\n                line: 188,\n                description:\n                  '<p>Calculates the sine of an angle. This function takes into account the\\ncurrent <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1.</p>\\n',\n                itemtype: 'method',\n                name: 'sin',\n                params: [\n                  {\n                    name: 'angle',\n                    description: '<p>the angle</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'the sine of the angle',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\nlet a = 0.0;\\nlet inc = TWO_PI / 25.0;\\nfor (let i = 0; i < 25; i++) {\\n  line(i * 4, 50, i * 4, 50 + sin(a) * 40.0);\\n  a = a + inc;\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'vertical black lines extend down and up from center to form wave pattern',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Trigonometry'\n              },\n              {\n                file: 'src/math/trigonometry.js',\n                line: 216,\n                description:\n                  '<p>Calculates the tangent of an angle. This function takes into account\\nthe current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1.</p>\\n',\n                itemtype: 'method',\n                name: 'tan',\n                params: [\n                  {\n                    name: 'angle',\n                    description: '<p>the angle</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'the tangent of the angle',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\nlet a = 0.0;\\nlet inc = TWO_PI / 50.0;\\nfor (let i = 0; i < 100; i = i + 2) {\\n  line(i, 50, i, 50 + tan(a) * 2.0);\\n  a = a + inc;\\n}\\n</code>'\n                ],\n                alt:\n                  'vertical black lines end down and up from center to form spike pattern',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Trigonometry'\n              },\n              {\n                file: 'src/math/trigonometry.js',\n                line: 244,\n                description:\n                  '<p>Converts a radian measurement to its corresponding value in degrees.\\nRadians and degrees are two ways of measuring the same thing. There are\\n360 degrees in a circle and 2*PI radians in a circle. For example,\\n90° = PI/2 = 1.5707964. This function does not take into account the\\ncurrent <a href=\"#/p5/angleMode\">angleMode</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'degrees',\n                params: [\n                  {\n                    name: 'radians',\n                    description: '<p>the radians value to convert to degrees</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'the converted angle',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div class= “norender\\\">\\n<code>\\nlet rad = PI / 4;\\nlet deg = degrees(rad);\\nprint(rad + ' radians is ' + deg + ' degrees');\\n// Prints: 0.7853981633974483 radians is 45 degrees\\n</code>\\n</div>\\n\"\n                ],\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Trigonometry'\n              },\n              {\n                file: 'src/math/trigonometry.js',\n                line: 271,\n                description:\n                  '<p>Converts a degree measurement to its corresponding value in radians.\\nRadians and degrees are two ways of measuring the same thing. There are\\n360 degrees in a circle and 2*PI radians in a circle. For example,\\n90° = PI/2 = 1.5707964. This function does not take into account the\\ncurrent <a href=\"#/p5/angleMode\">angleMode</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'radians',\n                params: [\n                  {\n                    name: 'degrees',\n                    description: '<p>the degree value to convert to radians</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'the converted angle',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div class= “norender\\\">\\n<code>\\nlet deg = 45.0;\\nlet rad = radians(deg);\\nprint(deg + ' degrees is ' + rad + ' radians');\\n// Prints: 45 degrees is 0.7853981633974483 radians\\n</code>\\n</div>\"\n                ],\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Trigonometry'\n              },\n              {\n                file: 'src/math/trigonometry.js',\n                line: 296,\n                description:\n                  '<p>Sets the current mode of p5 to given mode. Default mode is RADIANS.</p>\\n',\n                itemtype: 'method',\n                name: 'angleMode',\n                params: [\n                  {\n                    name: 'mode',\n                    description: '<p>either RADIANS or DEGREES</p>\\n',\n                    type: 'Constant'\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\nfunction draw() {\\n  background(204);\\n  angleMode(DEGREES); // Change the mode to DEGREES\\n  let a = atan2(mouseY - height / 2, mouseX - width / 2);\\n  translate(width / 2, height / 2);\\n  push();\\n  rotate(a);\\n  rect(-20, -5, 40, 10); // Larger rectangle is rotating in degrees\\n  pop();\\n  angleMode(RADIANS); // Change the mode to RADIANS\\n  rotate(a); // variable a stays the same\\n  rect(-40, -5, 20, 10); // Smaller rectangle is rotating in radians\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  '40 by 10 rect in center rotates with mouse moves. 20 by 10 rect moves faster.',\n                class: 'p5',\n                module: 'Math',\n                submodule: 'Trigonometry'\n              },\n              {\n                file: 'src/typography/attributes.js',\n                line: 13,\n                description:\n                  '<p>Sets the current alignment for drawing text. Accepts two\\narguments: horizAlign (LEFT, CENTER, or RIGHT) and\\nvertAlign (TOP, BOTTOM, CENTER, or BASELINE).</p>\\n<p>The horizAlign parameter is in reference to the x value\\nof the <a href=\"#/p5/text\">text()</a> function, while the vertAlign parameter is\\nin reference to the y value.</p>\\n<p>So if you write textAlign(LEFT), you are aligning the left\\nedge of your text to the x value you give in <a href=\"#/p5/text\">text()</a>. If you\\nwrite textAlign(RIGHT, TOP), you are aligning the right edge\\nof your text to the x value and the top of edge of the text\\nto the y value.</p>\\n',\n                itemtype: 'method',\n                name: 'textAlign',\n                chainable: 1,\n                example: [\n                  \"\\n<div>\\n<code>\\ntextSize(16);\\ntextAlign(RIGHT);\\ntext('ABCD', 50, 30);\\ntextAlign(CENTER);\\ntext('EFGH', 50, 50);\\ntextAlign(LEFT);\\ntext('IJKL', 50, 70);\\n</code>\\n</div>\\n\\n<div>\\n<code>\\ntextSize(16);\\nstrokeWeight(0.5);\\n\\nline(0, 12, width, 12);\\ntextAlign(CENTER, TOP);\\ntext('TOP', 0, 12, width);\\n\\nline(0, 37, width, 37);\\ntextAlign(CENTER, CENTER);\\ntext('CENTER', 0, 37, width);\\n\\nline(0, 62, width, 62);\\ntextAlign(CENTER, BASELINE);\\ntext('BASELINE', 0, 62, width);\\n\\nline(0, 87, width, 87);\\ntextAlign(CENTER, BOTTOM);\\ntext('BOTTOM', 0, 87, width);\\n</code>\\n</div>\"\n                ],\n                alt:\n                  \"Letters ABCD displayed at top right, EFGH at center and IJKL at bottom left.\\nThe names of the four vertical alignments rendered each showing that alignment's placement relative to a horizontal line.\",\n                class: 'p5',\n                module: 'Typography',\n                submodule: 'Attributes',\n                overloads: [\n                  {\n                    line: 13,\n                    params: [\n                      {\n                        name: 'horizAlign',\n                        description:\n                          '<p>horizontal alignment, either LEFT,\\n                           CENTER, or RIGHT</p>\\n',\n                        type: 'Constant'\n                      },\n                      {\n                        name: 'vertAlign',\n                        description:\n                          '<p>vertical alignment, either TOP,\\n                           BOTTOM, CENTER, or BASELINE</p>\\n',\n                        type: 'Constant',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 75,\n                    params: [],\n                    return: {\n                      description: '',\n                      type: 'Object'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/typography/attributes.js',\n                line: 84,\n                description:\n                  '<p>Sets/gets the spacing, in pixels, between lines of text. This\\nsetting will be used in all subsequent calls to the <a href=\"#/p5/text\">text()</a> function.</p>\\n',\n                itemtype: 'method',\n                name: 'textLeading',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\n// Text to display. The \"\\\\n\" is a \"new line\" character\\nlet lines = \\'L1\\\\nL2\\\\nL3\\';\\ntextSize(12);\\n\\ntextLeading(10); // Set leading to 10\\ntext(lines, 10, 25);\\n\\ntextLeading(20); // Set leading to 20\\ntext(lines, 40, 25);\\n\\ntextLeading(30); // Set leading to 30\\ntext(lines, 70, 25);\\n</code>\\n</div>'\n                ],\n                alt:\n                  'set L1 L2 & L3 displayed vertically 3 times. spacing increases for each set',\n                class: 'p5',\n                module: 'Typography',\n                submodule: 'Attributes',\n                overloads: [\n                  {\n                    line: 84,\n                    params: [\n                      {\n                        name: 'leading',\n                        description:\n                          '<p>the size in pixels for spacing between lines</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 113,\n                    params: [],\n                    return: {\n                      description: '',\n                      type: 'Number'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/typography/attributes.js',\n                line: 122,\n                description:\n                  '<p>Sets/gets the current font size. This size will be used in all subsequent\\ncalls to the <a href=\"#/p5/text\">text()</a> function. Font size is measured in pixels.</p>\\n',\n                itemtype: 'method',\n                name: 'textSize',\n                chainable: 1,\n                example: [\n                  \"\\n<div>\\n<code>\\ntextSize(12);\\ntext('Font Size 12', 10, 30);\\ntextSize(14);\\ntext('Font Size 14', 10, 60);\\ntextSize(16);\\ntext('Font Size 16', 10, 90);\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'Font Size 12 displayed small, Font Size 14 medium & Font Size 16 large',\n                class: 'p5',\n                module: 'Typography',\n                submodule: 'Attributes',\n                overloads: [\n                  {\n                    line: 122,\n                    params: [\n                      {\n                        name: 'theSize',\n                        description: '<p>the size of the letters in units of pixels</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 145,\n                    params: [],\n                    return: {\n                      description: '',\n                      type: 'Number'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/typography/attributes.js',\n                line: 154,\n                description:\n                  '<p>Sets/gets the style of the text for system fonts to NORMAL, ITALIC, BOLD or BOLDITALIC.\\nNote: this may be is overridden by CSS styling. For non-system fonts\\n(opentype, truetype, etc.) please load styled fonts instead.</p>\\n',\n                itemtype: 'method',\n                name: 'textStyle',\n                chainable: 1,\n                example: [\n                  \"\\n<div>\\n<code>\\nstrokeWeight(0);\\ntextSize(12);\\ntextStyle(NORMAL);\\ntext('Font Style Normal', 10, 15);\\ntextStyle(ITALIC);\\ntext('Font Style Italic', 10, 40);\\ntextStyle(BOLD);\\ntext('Font Style Bold', 10, 65);\\ntextStyle(BOLDITALIC);\\ntext('Font Style Bold Italic', 10, 90);\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'words Font Style Normal displayed normally, Italic in italic, bold in bold and bold italic in bold italics.',\n                class: 'p5',\n                module: 'Typography',\n                submodule: 'Attributes',\n                overloads: [\n                  {\n                    line: 154,\n                    params: [\n                      {\n                        name: 'theStyle',\n                        description:\n                          '<p>styling for text, either NORMAL,\\n                           ITALIC, BOLD or BOLDITALIC</p>\\n',\n                        type: 'Constant'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 182,\n                    params: [],\n                    return: {\n                      description: '',\n                      type: 'String'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/typography/attributes.js',\n                line: 191,\n                description:\n                  '<p>Calculates and returns the width of any character or text string.</p>\\n',\n                itemtype: 'method',\n                name: 'textWidth',\n                params: [\n                  {\n                    name: 'theText',\n                    description: '<p>the String of characters to measure</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                return: {\n                  description: '',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\ntextSize(28);\\n\\nlet aChar = 'P';\\nlet cWidth = textWidth(aChar);\\ntext(aChar, 0, 40);\\nline(cWidth, 0, cWidth, 50);\\n\\nlet aString = 'p5.js';\\nlet sWidth = textWidth(aString);\\ntext(aString, 0, 85);\\nline(sWidth, 50, sWidth, 100);\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'Letter P and p5.js are displayed with vertical lines at end. P is wide',\n                class: 'p5',\n                module: 'Typography',\n                submodule: 'Attributes'\n              },\n              {\n                file: 'src/typography/attributes.js',\n                line: 226,\n                description:\n                  '<p>Returns the ascent of the current font at its current size. The ascent\\nrepresents the distance, in pixels, of the tallest character above\\nthe baseline.</p>\\n',\n                itemtype: 'method',\n                name: 'textAscent',\n                return: {\n                  description: '',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nlet base = height * 0.75;\\nlet scalar = 0.8; // Different for each font\\n\\ntextSize(32); // Set initial text size\\nlet asc = textAscent() * scalar; // Calc ascent\\nline(0, base - asc, width, base - asc);\\ntext('dp', 0, base); // Draw text on baseline\\n\\ntextSize(64); // Increase text size\\nasc = textAscent() * scalar; // Recalc ascent\\nline(40, base - asc, width, base - asc);\\ntext('dp', 40, base); // Draw text on baseline\\n</code>\\n</div>\"\n                ],\n                class: 'p5',\n                module: 'Typography',\n                submodule: 'Attributes'\n              },\n              {\n                file: 'src/typography/attributes.js',\n                line: 255,\n                description:\n                  '<p>Returns the descent of the current font at its current size. The descent\\nrepresents the distance, in pixels, of the character with the longest\\ndescender below the baseline.</p>\\n',\n                itemtype: 'method',\n                name: 'textDescent',\n                return: {\n                  description: '',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nlet base = height * 0.75;\\nlet scalar = 0.8; // Different for each font\\n\\ntextSize(32); // Set initial text size\\nlet desc = textDescent() * scalar; // Calc ascent\\nline(0, base + desc, width, base + desc);\\ntext('dp', 0, base); // Draw text on baseline\\n\\ntextSize(64); // Increase text size\\ndesc = textDescent() * scalar; // Recalc ascent\\nline(40, base + desc, width, base + desc);\\ntext('dp', 40, base); // Draw text on baseline\\n</code>\\n</div>\"\n                ],\n                class: 'p5',\n                module: 'Typography',\n                submodule: 'Attributes'\n              },\n              {\n                file: 'src/typography/attributes.js',\n                line: 284,\n                description: '<p>Helper function to measure ascent and descent.</p>\\n',\n                class: 'p5',\n                module: 'Typography',\n                submodule: 'Attributes'\n              },\n              {\n                file: 'src/typography/loading_displaying.js',\n                line: 16,\n                description:\n                  '<p>Loads an opentype font file (.otf, .ttf) from a file or a URL,\\nand returns a PFont Object. This method is asynchronous,\\nmeaning it may not finish before the next line in your sketch\\nis executed.\\n<br><br>\\nThe path to the font should be relative to the HTML file\\nthat links in your sketch. Loading fonts from a URL or other\\nremote location may be blocked due to your browser&#39;s built-in\\nsecurity.</p>\\n',\n                itemtype: 'method',\n                name: 'loadFont',\n                params: [\n                  {\n                    name: 'path',\n                    description: '<p>name of the file or url to load</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>function to be executed after\\n                                   <a href=\"#/p5/loadFont\">loadFont()</a> completes</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'onError',\n                    description:\n                      '<p>function to be executed if\\n                                   an error occurs</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: '<a href=\"#/p5.Font\">p5.Font</a> object',\n                  type: 'p5.Font'\n                },\n                example: [\n                  \"\\n\\n<p>Calling loadFont() inside <a href=\\\"#/p5/preload\\\">preload()</a> guarantees that the load\\noperation will have completed before <a href=\\\"#/p5/setup\\\">setup()</a> and <a href=\\\"#/p5/draw\\\">draw()</a> are called.</p>\\n\\n<div><code>\\nlet myFont;\\nfunction preload() {\\n  myFont = loadFont('assets/inconsolata.otf');\\n}\\n\\nfunction setup() {\\n  fill('#ED225D');\\n  textFont(myFont);\\n  textSize(36);\\n  text('p5*js', 10, 50);\\n}\\n</code></div>\\n\\nOutside of <a href=\\\"#/p5/preload\\\">preload()</a>, you may supply a callback function to handle the\\nobject:\\n\\n<div><code>\\nfunction setup() {\\n  loadFont('assets/inconsolata.otf', drawText);\\n}\\n\\nfunction drawText(font) {\\n  fill('#ED225D');\\n  textFont(font, 36);\\n  text('p5*js', 10, 50);\\n}\\n</code></div>\\n\\n<p>You can also use the font filename string (without the file extension) to style other HTML\\nelements.</p>\\n\\n<div><code>\\nfunction preload() {\\n  loadFont('assets/inconsolata.otf');\\n}\\n\\nfunction setup() {\\n  let myDiv = createDiv('hello there');\\n  myDiv.style('font-family', 'Inconsolata');\\n}\\n</code></div>\"\n                ],\n                alt: \"p5*js in p5's theme dark pink\\np5*js in p5's theme dark pink\",\n                class: 'p5',\n                module: 'Typography',\n                submodule: 'Loading & Displaying'\n              },\n              {\n                file: 'src/typography/loading_displaying.js',\n                line: 143,\n                description:\n                  '<p>Draws text to the screen. Displays the information specified in the first\\nparameter on the screen in the position specified by the additional\\nparameters. A default font will be used unless a font is set with the\\n<a href=\"#/p5/textFont\">textFont()</a> function and a default size will be used unless a font is set\\nwith <a href=\"#/p5/textSize\">textSize()</a>. Change the color of the text with the <a href=\"#/p5/fill\">fill()</a> function.\\nChange the outline of the text with the <a href=\"#/p5/stroke\">stroke()</a> and <a href=\"#/p5/strokeWeight\">strokeWeight()</a>\\nfunctions.\\n<br><br>\\nThe text displays in relation to the <a href=\"#/p5/textAlign\">textAlign()</a> function, which gives the\\noption to draw to the left, right, and center of the coordinates.\\n<br><br>\\nThe x2 and y2 parameters define a rectangular area to display within and\\nmay only be used with string data. When these parameters are specified,\\nthey are interpreted based on the current <a href=\"#/p5/rectMode\">rectMode()</a> setting. Text that\\ndoes not fit completely within the rectangle specified will not be drawn\\nto the screen. If x2 and y2 are not specified, the baseline alignment is the\\ndefault, which means that the text will be drawn upwards from x and y.\\n<br><br>\\n<b>WEBGL</b>: Only opentype/truetype fonts are supported. You must load a font using the\\n<a href=\"#/p5/loadFont\">loadFont()</a> method (see the example above).\\n<a href=\"#/p5/stroke\">stroke()</a> currently has no effect in webgl mode.</p>\\n',\n                itemtype: 'method',\n                name: 'text',\n                params: [\n                  {\n                    name: 'str',\n                    description:\n                      '<p>the alphanumeric\\n                                            symbols to be displayed</p>\\n',\n                    type: 'String|Object|Array|Number|Boolean'\n                  },\n                  {\n                    name: 'x',\n                    description: '<p>x-coordinate of text</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y-coordinate of text</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'x2',\n                    description:\n                      '<p>by default, the width of the text box,\\n                    see <a href=\"#/p5/rectMode\">rectMode()</a> for more info</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'y2',\n                    description:\n                      '<p>by default, the height of the text box,\\n                    see <a href=\"#/p5/rectMode\">rectMode()</a> for more info</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div>\\n<code>\\ntextSize(32);\\ntext('word', 10, 30);\\nfill(0, 102, 153);\\ntext('word', 10, 60);\\nfill(0, 102, 153, 51);\\ntext('word', 10, 90);\\n</code>\\n</div>\\n<div>\\n<code>\\nlet s = 'The quick brown fox jumped over the lazy dog.';\\nfill(50);\\ntext(s, 10, 10, 70, 80); // Text wraps within text box\\n</code>\\n</div>\\n\\n<div modernizr='webgl'>\\n<code>\\nlet inconsolata;\\nfunction preload() {\\n  inconsolata = loadFont('assets/inconsolata.otf');\\n}\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  textFont(inconsolata);\\n  textSize(width / 3);\\n  textAlign(CENTER, CENTER);\\n}\\nfunction draw() {\\n  background(0);\\n  let time = millis();\\n  rotateX(time / 1000);\\n  rotateZ(time / 1234);\\n  text('p5.js', 0, 0);\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  \"'word' displayed 3 times going from black, blue to translucent blue\\nThe quick brown fox jumped over the lazy dog.\\nthe text 'p5.js' spinning in 3d\",\n                class: 'p5',\n                module: 'Typography',\n                submodule: 'Loading & Displaying'\n              },\n              {\n                file: 'src/typography/loading_displaying.js',\n                line: 230,\n                description:\n                  '<p>Sets the current font that will be drawn with the <a href=\"#/p5/text\">text()</a> function.\\n<br><br>\\n<b>WEBGL</b>: Only fonts loaded via <a href=\"#/p5/loadFont\">loadFont()</a> are supported.</p>\\n',\n                itemtype: 'method',\n                name: 'textFont',\n                return: {\n                  description: 'the current font',\n                  type: 'Object'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nfill(0);\\ntextSize(12);\\ntextFont('Georgia');\\ntext('Georgia', 12, 30);\\ntextFont('Helvetica');\\ntext('Helvetica', 12, 60);\\n</code>\\n</div>\\n<div>\\n<code>\\nlet fontRegular, fontItalic, fontBold;\\nfunction preload() {\\n  fontRegular = loadFont('assets/Regular.otf');\\n  fontItalic = loadFont('assets/Italic.ttf');\\n  fontBold = loadFont('assets/Bold.ttf');\\n}\\nfunction setup() {\\n  background(210);\\n  fill(0)\\n   .strokeWeight(0)\\n   .textSize(10);\\n  textFont(fontRegular);\\n  text('Font Style Normal', 10, 30);\\n  textFont(fontItalic);\\n  text('Font Style Italic', 10, 50);\\n  textFont(fontBold);\\n  text('Font Style Bold', 10, 70);\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'words Font Style Normal displayed normally, Italic in italic and bold in bold',\n                class: 'p5',\n                module: 'Typography',\n                submodule: 'Loading & Displaying',\n                overloads: [\n                  {\n                    line: 230,\n                    params: [],\n                    return: {\n                      description: 'the current font',\n                      type: 'Object'\n                    }\n                  },\n                  {\n                    line: 275,\n                    params: [\n                      {\n                        name: 'font',\n                        description:\n                          '<p>a font loaded via <a href=\"#/p5/loadFont\">loadFont()</a>, or a String\\nrepresenting a <a href=\"https://mzl.la/2dOw8WD\">web safe font</a> (a font\\nthat is generally available across all systems)</p>\\n',\n                        type: 'Object|String'\n                      },\n                      {\n                        name: 'size',\n                        description: '<p>the font size to use</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/typography/p5.Font.js',\n                line: 25,\n                description: '<p>Underlying opentype font implementation</p>\\n',\n                itemtype: 'property',\n                name: 'font',\n                class: 'p5.Font',\n                module: 'Typography',\n                submodule: 'Font'\n              },\n              {\n                file: 'src/typography/p5.Font.js',\n                line: 32,\n                description:\n                  '<p>Returns a tight bounding box for the given text string using this\\nfont (currently only supports single lines)</p>\\n',\n                itemtype: 'method',\n                name: 'textBounds',\n                params: [\n                  {\n                    name: 'line',\n                    description: '<p>a line of text</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'x',\n                    description: '<p>x-position</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y-position</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'fontSize',\n                    description: '<p>font size to use (optional) Default is 12.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'options',\n                    description:\n                      '<p>opentype options (optional)\\n                           opentype fonts contains alignment and baseline options.\\n                           Default is &#39;LEFT&#39; and &#39;alphabetic&#39;</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'a rectangle object with properties: x, y, w, h',\n                  type: 'Object'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nlet font;\\nlet textString = 'Lorem ipsum dolor sit amet.';\\nfunction preload() {\\n  font = loadFont('./assets/Regular.otf');\\n}\\nfunction setup() {\\n  background(210);\\n\\n  let bbox = font.textBounds(textString, 10, 30, 12);\\n  fill(255);\\n  stroke(0);\\n  rect(bbox.x, bbox.y, bbox.w, bbox.h);\\n  fill(0);\\n  noStroke();\\n\\n  textFont(font);\\n  textSize(12);\\n  text(textString, 10, 30);\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'words Lorem ipsum dol go off canvas and contained by white bounding box',\n                class: 'p5.Font',\n                module: 'Typography',\n                submodule: 'Font'\n              },\n              {\n                file: 'src/typography/p5.Font.js',\n                line: 156,\n                description:\n                  '<p>Computes an array of points following the path for specified text</p>\\n',\n                itemtype: 'method',\n                name: 'textToPoints',\n                params: [\n                  {\n                    name: 'txt',\n                    description: '<p>a line of text</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'x',\n                    description: '<p>x-position</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y-position</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'fontSize',\n                    description: '<p>font size to use (optional)</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'options',\n                    description:\n                      '<p>an (optional) object that can contain:</p>\\n<p><br>sampleFactor - the ratio of path-length to number of samples\\n(default=.1); higher values yield more points and are therefore\\nmore precise</p>\\n<p><br>simplifyThreshold - if set to a non-zero value, collinear points will be\\nbe removed from the polygon; the value represents the threshold angle to use\\nwhen determining whether two edges are collinear</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'an array of points, each with x, y, alpha (the path angle)',\n                  type: 'Array'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nlet font;\\nfunction preload() {\\n  font = loadFont('assets/inconsolata.otf');\\n}\\n\\nlet points;\\nlet bounds;\\nfunction setup() {\\n  createCanvas(100, 100);\\n  stroke(0);\\n  fill(255, 104, 204);\\n\\n  points = font.textToPoints('p5', 0, 0, 10, {\\n    sampleFactor: 5,\\n    simplifyThreshold: 0\\n  });\\n  bounds = font.textBounds(' p5 ', 0, 0, 10);\\n}\\n\\nfunction draw() {\\n  background(255);\\n  beginShape();\\n  translate(-bounds.x * width / bounds.w, -bounds.y * height / bounds.h);\\n  for (let i = 0; i < points.length; i++) {\\n    let p = points[i];\\n    vertex(\\n      p.x * width / bounds.w +\\n        sin(20 * p.y / bounds.h + millis() / 1000) * width / 30,\\n      p.y * height / bounds.h\\n    );\\n  }\\n  endShape(CLOSE);\\n}\\n</code>\\n</div>\\n\"\n                ],\n                class: 'p5.Font',\n                module: 'Typography',\n                submodule: 'Font'\n              },\n              {\n                file: 'src/utilities/array_functions.js',\n                line: 12,\n                description:\n                  '<p>Adds a value to the end of an array. Extends the length of\\nthe array by one. Maps to Array.push().</p>\\n',\n                itemtype: 'method',\n                name: 'append',\n                deprecated: true,\n                deprecationMessage:\n                  'Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\">array.push(value)</a> instead.',\n                params: [\n                  {\n                    name: 'array',\n                    description: '<p>Array to append</p>\\n',\n                    type: 'Array'\n                  },\n                  {\n                    name: 'value',\n                    description: '<p>to be added to the Array</p>\\n',\n                    type: 'Any'\n                  }\n                ],\n                return: {\n                  description: 'the array that was appended to',\n                  type: 'Array'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\nfunction setup() {\\n  var myArray = ['Mango', 'Apple', 'Papaya'];\\n  print(myArray); // ['Mango', 'Apple', 'Papaya']\\n\\n  append(myArray, 'Peach');\\n  print(myArray); // ['Mango', 'Apple', 'Papaya', 'Peach']\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Array Functions'\n              },\n              {\n                file: 'src/utilities/array_functions.js',\n                line: 37,\n                description:\n                  '<p>Copies an array (or part of an array) to another array. The src array is\\ncopied to the dst array, beginning at the position specified by\\nsrcPosition and into the position specified by dstPosition. The number of\\nelements to copy is determined by length. Note that copying values\\noverwrites existing values in the destination array. To append values\\ninstead of overwriting them, use <a href=\"#/p5/concat\">concat()</a>.\\n<br><br>\\nThe simplified version with only two arguments, arrayCopy(src, dst),\\ncopies an entire array to another of the same size. It is equivalent to\\narrayCopy(src, 0, dst, 0, src.length).\\n<br><br>\\nUsing this function is far more efficient for copying array data than\\niterating through a for() loop and copying each element individually.</p>\\n',\n                itemtype: 'method',\n                name: 'arrayCopy',\n                deprecated: true,\n                example: [\n                  \"\\n<div class='norender'><code>\\nvar src = ['A', 'B', 'C'];\\nvar dst = [1, 2, 3];\\nvar srcPosition = 1;\\nvar dstPosition = 0;\\nvar length = 2;\\n\\nprint(src); // ['A', 'B', 'C']\\nprint(dst); // [ 1 ,  2 ,  3 ]\\n\\narrayCopy(src, srcPosition, dst, dstPosition, length);\\nprint(dst); // ['B', 'C', 3]\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Array Functions',\n                overloads: [\n                  {\n                    line: 37,\n                    params: [\n                      {\n                        name: 'src',\n                        description: '<p>the source Array</p>\\n',\n                        type: 'Array'\n                      },\n                      {\n                        name: 'srcPosition',\n                        description: '<p>starting position in the source Array</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dst',\n                        description: '<p>the destination Array</p>\\n',\n                        type: 'Array'\n                      },\n                      {\n                        name: 'dstPosition',\n                        description: '<p>starting position in the destination Array</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'length',\n                        description: '<p>number of Array elements to be copied</p>\\n',\n                        type: 'Integer'\n                      }\n                    ]\n                  },\n                  {\n                    line: 75,\n                    params: [\n                      {\n                        name: 'src',\n                        description: '',\n                        type: 'Array'\n                      },\n                      {\n                        name: 'dst',\n                        description: '',\n                        type: 'Array'\n                      },\n                      {\n                        name: 'length',\n                        description: '',\n                        type: 'Integer',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              {\n                file: 'src/utilities/array_functions.js',\n                line: 114,\n                description:\n                  '<p>Concatenates two arrays, maps to Array.concat(). Does not modify the\\ninput arrays.</p>\\n',\n                itemtype: 'method',\n                name: 'concat',\n                deprecated: true,\n                deprecationMessage:\n                  'Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">arr1.concat(arr2)</a> instead.',\n                params: [\n                  {\n                    name: 'a',\n                    description: '<p>first Array to concatenate</p>\\n',\n                    type: 'Array'\n                  },\n                  {\n                    name: 'b',\n                    description: '<p>second Array to concatenate</p>\\n',\n                    type: 'Array'\n                  }\n                ],\n                return: {\n                  description: 'concatenated array',\n                  type: 'Array'\n                },\n                example: [\n                  \"\\n<div class = 'norender'><code>\\nfunction setup() {\\n  var arr1 = ['A', 'B', 'C'];\\n  var arr2 = [1, 2, 3];\\n\\n  print(arr1); // ['A','B','C']\\n  print(arr2); // [1,2,3]\\n\\n  var arr3 = concat(arr1, arr2);\\n\\n  print(arr1); // ['A','B','C']\\n  print(arr2); // [1, 2, 3]\\n  print(arr3); // ['A','B','C', 1, 2, 3]\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Array Functions'\n              },\n              {\n                file: 'src/utilities/array_functions.js',\n                line: 145,\n                description:\n                  '<p>Reverses the order of an array, maps to Array.reverse()</p>\\n',\n                itemtype: 'method',\n                name: 'reverse',\n                deprecated: true,\n                deprecationMessage:\n                  'Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\">array.reverse()</a> instead.',\n                params: [\n                  {\n                    name: 'list',\n                    description: '<p>Array to reverse</p>\\n',\n                    type: 'Array'\n                  }\n                ],\n                return: {\n                  description: 'the reversed list',\n                  type: 'Array'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\nfunction setup() {\\n  var myArray = ['A', 'B', 'C'];\\n  print(myArray); // ['A','B','C']\\n\\n  reverse(myArray);\\n  print(myArray); // ['C','B','A']\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Array Functions'\n              },\n              {\n                file: 'src/utilities/array_functions.js',\n                line: 167,\n                description:\n                  '<p>Decreases an array by one element and returns the shortened array,\\nmaps to Array.pop().</p>\\n',\n                itemtype: 'method',\n                name: 'shorten',\n                deprecated: true,\n                deprecationMessage:\n                  'Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\">array.pop()</a> instead.',\n                params: [\n                  {\n                    name: 'list',\n                    description: '<p>Array to shorten</p>\\n',\n                    type: 'Array'\n                  }\n                ],\n                return: {\n                  description: 'shortened Array',\n                  type: 'Array'\n                },\n                example: [\n                  \"\\n<div class = 'norender'><code>\\nfunction setup() {\\n  var myArray = ['A', 'B', 'C'];\\n  print(myArray); // ['A', 'B', 'C']\\n  var newArray = shorten(myArray);\\n  print(myArray); // ['A','B','C']\\n  print(newArray); // ['A','B']\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Array Functions'\n              },\n              {\n                file: 'src/utilities/array_functions.js',\n                line: 191,\n                description:\n                  \"<p>Randomizes the order of the elements of an array. Implements\\n<a href='http://Bost.Ocks.org/mike/shuffle/' target=_blank>\\nFisher-Yates Shuffle Algorithm</a>.</p>\\n\",\n                itemtype: 'method',\n                name: 'shuffle',\n                params: [\n                  {\n                    name: 'array',\n                    description: '<p>Array to shuffle</p>\\n',\n                    type: 'Array'\n                  },\n                  {\n                    name: 'bool',\n                    description: '<p>modify passed array</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'shuffled Array',\n                  type: 'Array'\n                },\n                example: [\n                  \"\\n<div><code>\\nfunction setup() {\\n  var regularArr = ['ABC', 'def', createVector(), TAU, Math.E];\\n  print(regularArr);\\n  shuffle(regularArr, true); // force modifications to passed array\\n  print(regularArr);\\n\\n  // By default shuffle() returns a shuffled cloned array:\\n  var newArr = shuffle(regularArr);\\n  print(regularArr);\\n  print(newArr);\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Array Functions'\n              },\n              {\n                file: 'src/utilities/array_functions.js',\n                line: 233,\n                description:\n                  '<p>Sorts an array of numbers from smallest to largest, or puts an array of\\nwords in alphabetical order. The original array is not modified; a\\nre-ordered array is returned. The count parameter states the number of\\nelements to sort. For example, if there are 12 elements in an array and\\ncount is set to 5, only the first 5 elements in the array will be sorted.</p>\\n',\n                itemtype: 'method',\n                name: 'sort',\n                deprecated: true,\n                deprecationMessage:\n                  'Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">array.sort()</a> instead.',\n                params: [\n                  {\n                    name: 'list',\n                    description: '<p>Array to sort</p>\\n',\n                    type: 'Array'\n                  },\n                  {\n                    name: 'count',\n                    description: '<p>number of elements to sort, starting from 0</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'the sorted list',\n                  type: 'Array'\n                },\n                example: [\n                  \"\\n<div class = 'norender'><code>\\nfunction setup() {\\n  var words = ['banana', 'apple', 'pear', 'lime'];\\n  print(words); // ['banana', 'apple', 'pear', 'lime']\\n  var count = 4; // length of array\\n\\n  words = sort(words, count);\\n  print(words); // ['apple', 'banana', 'lime', 'pear']\\n}\\n</code></div>\\n<div class = 'norender'><code>\\nfunction setup() {\\n  var numbers = [2, 6, 1, 5, 14, 9, 8, 12];\\n  print(numbers); // [2, 6, 1, 5, 14, 9, 8, 12]\\n  var count = 5; // Less than the length of the array\\n\\n  numbers = sort(numbers, count);\\n  print(numbers); // [1,2,5,6,14,9,8,12]\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Array Functions'\n              },\n              {\n                file: 'src/utilities/array_functions.js',\n                line: 281,\n                description:\n                  '<p>Inserts a value or an array of values into an existing array. The first\\nparameter specifies the initial array to be modified, and the second\\nparameter defines the data to be inserted. The third parameter is an index\\nvalue which specifies the array position from which to insert data.\\n(Remember that array index numbering starts at zero, so the first position\\nis 0, the second position is 1, and so on.)</p>\\n',\n                itemtype: 'method',\n                name: 'splice',\n                deprecated: true,\n                deprecationMessage:\n                  'Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">array.splice()</a> instead.',\n                params: [\n                  {\n                    name: 'list',\n                    description: '<p>Array to splice into</p>\\n',\n                    type: 'Array'\n                  },\n                  {\n                    name: 'value',\n                    description: '<p>value to be spliced in</p>\\n',\n                    type: 'Any'\n                  },\n                  {\n                    name: 'position',\n                    description: '<p>in the array from which to insert data</p>\\n',\n                    type: 'Integer'\n                  }\n                ],\n                return: {\n                  description: 'the list',\n                  type: 'Array'\n                },\n                example: [\n                  \"\\n<div class = 'norender'><code>\\nfunction setup() {\\n  var myArray = [0, 1, 2, 3, 4];\\n  var insArray = ['A', 'B', 'C'];\\n  print(myArray); // [0, 1, 2, 3, 4]\\n  print(insArray); // ['A','B','C']\\n\\n  splice(myArray, insArray, 3);\\n  print(myArray); // [0,1,2,'A','B','C',3,4]\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Array Functions'\n              },\n              {\n                file: 'src/utilities/array_functions.js',\n                line: 316,\n                description:\n                  '<p>Extracts an array of elements from an existing array. The list parameter\\ndefines the array from which the elements will be copied, and the start\\nand count parameters specify which elements to extract. If no count is\\ngiven, elements will be extracted from the start to the end of the array.\\nWhen specifying the start, remember that the first array element is 0.\\nThis function does not change the source array.</p>\\n',\n                itemtype: 'method',\n                name: 'subset',\n                deprecated: true,\n                deprecationMessage:\n                  'Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">array.slice()</a> instead.',\n                params: [\n                  {\n                    name: 'list',\n                    description: '<p>Array to extract from</p>\\n',\n                    type: 'Array'\n                  },\n                  {\n                    name: 'start',\n                    description: '<p>position to begin</p>\\n',\n                    type: 'Integer'\n                  },\n                  {\n                    name: 'count',\n                    description: '<p>number of values to extract</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'Array of extracted elements',\n                  type: 'Array'\n                },\n                example: [\n                  \"\\n<div class = 'norender'><code>\\nfunction setup() {\\n  var myArray = [1, 2, 3, 4, 5];\\n  print(myArray); // [1, 2, 3, 4, 5]\\n\\n  var sub1 = subset(myArray, 0, 3);\\n  var sub2 = subset(myArray, 2, 2);\\n  print(sub1); // [1,2,3]\\n  print(sub2); // [3,4]\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Array Functions'\n              },\n              {\n                file: 'src/utilities/conversion.js',\n                line: 12,\n                description:\n                  '<p>Converts a string to its floating point representation. The contents of a\\nstring must resemble a number, or NaN (not a number) will be returned.\\nFor example, float(&quot;1234.56&quot;) evaluates to 1234.56, but float(&quot;giraffe&quot;)\\nwill return NaN.</p>\\n<p>When an array of values is passed in, then an array of floats of the same\\nlength is returned.</p>\\n',\n                itemtype: 'method',\n                name: 'float',\n                params: [\n                  {\n                    name: 'str',\n                    description: '<p>float string to parse</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                return: {\n                  description: 'floating point representation of string',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div><code>\\nvar str = '20';\\nvar diameter = float(str);\\nellipse(width / 2, height / 2, diameter, diameter);\\n</code></div>\\n<div class='norender'><code>\\nprint(float('10.31')); // 10.31\\nprint(float('Infinity')); // Infinity\\nprint(float('-Infinity')); // -Infinity\\n</code></div>\"\n                ],\n                alt: '20 by 20 white ellipse in the center of the canvas',\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Conversion'\n              },\n              {\n                file: 'src/utilities/conversion.js',\n                line: 47,\n                description:\n                  '<p>Converts a boolean, string, or float to its integer representation.\\nWhen an array of values is passed in, then an int array of the same length\\nis returned.</p>\\n',\n                itemtype: 'method',\n                name: 'int',\n                return: {\n                  description: 'integer representation of value',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\nprint(int('10')); // 10\\nprint(int(10.31)); // 10\\nprint(int(-10)); // -10\\nprint(int(true)); // 1\\nprint(int(false)); // 0\\nprint(int([false, true, '10.3', 9.8])); // [0, 1, 10, 9]\\nprint(int(Infinity)); // Infinity\\nprint(int('-Infinity')); // -Infinity\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Conversion',\n                overloads: [\n                  {\n                    line: 47,\n                    params: [\n                      {\n                        name: 'n',\n                        description: '<p>value to parse</p>\\n',\n                        type: 'String|Boolean|Number'\n                      },\n                      {\n                        name: 'radix',\n                        description: '<p>the radix to convert to (default: 10)</p>\\n',\n                        type: 'Integer',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: 'integer representation of value',\n                      type: 'Number'\n                    }\n                  },\n                  {\n                    line: 69,\n                    params: [\n                      {\n                        name: 'ns',\n                        description: '<p>values to parse</p>\\n',\n                        type: 'Array'\n                      }\n                    ],\n                    return: {\n                      description: 'integer representation of values',\n                      type: 'Number[]'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/utilities/conversion.js',\n                line: 93,\n                description:\n                  '<p>Converts a boolean, string or number to its string representation.\\nWhen an array of values is passed in, then an array of strings of the same\\nlength is returned.</p>\\n',\n                itemtype: 'method',\n                name: 'str',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>value to parse</p>\\n',\n                    type: 'String|Boolean|Number|Array'\n                  }\n                ],\n                return: {\n                  description: 'string representation of value',\n                  type: 'String'\n                },\n                example: [\n                  '\\n<div class=\\'norender\\'><code>\\nprint(str(\\'10\\')); // \"10\"\\nprint(str(10.31)); // \"10.31\"\\nprint(str(-10)); // \"-10\"\\nprint(str(true)); // \"true\"\\nprint(str(false)); // \"false\"\\nprint(str([true, \\'10.3\\', 9.8])); // [ \"true\", \"10.3\", \"9.8\" ]\\n</code></div>'\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Conversion'\n              },\n              {\n                file: 'src/utilities/conversion.js',\n                line: 119,\n                description:\n                  '<p>Converts a number or string to its boolean representation.\\nFor a number, any non-zero value (positive or negative) evaluates to true,\\nwhile zero evaluates to false. For a string, the value &quot;true&quot; evaluates to\\ntrue, while any other value evaluates to false. When an array of number or\\nstring values is passed in, then a array of booleans of the same length is\\nreturned.</p>\\n',\n                itemtype: 'method',\n                name: 'boolean',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>value to parse</p>\\n',\n                    type: 'String|Boolean|Number|Array'\n                  }\n                ],\n                return: {\n                  description: 'boolean representation of value',\n                  type: 'Boolean'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\nprint(boolean(0)); // false\\nprint(boolean(1)); // true\\nprint(boolean('true')); // true\\nprint(boolean('abcd')); // false\\nprint(boolean([0, 12, 'true'])); // [false, true, true]\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Conversion'\n              },\n              {\n                file: 'src/utilities/conversion.js',\n                line: 151,\n                description:\n                  '<p>Converts a number, string representation of a number, or boolean to its byte\\nrepresentation. A byte can be only a whole number between -128 and 127, so\\nwhen a value outside of this range is converted, it wraps around to the\\ncorresponding byte representation. When an array of number, string or boolean\\nvalues is passed in, then an array of bytes the same length is returned.</p>\\n',\n                itemtype: 'method',\n                name: 'byte',\n                return: {\n                  description: 'byte representation of value',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\nprint(byte(127)); // 127\\nprint(byte(128)); // -128\\nprint(byte(23.4)); // 23\\nprint(byte('23.4')); // 23\\nprint(byte('hello')); // NaN\\nprint(byte(true)); // 1\\nprint(byte([0, 255, '100'])); // [0, -1, 100]\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Conversion',\n                overloads: [\n                  {\n                    line: 151,\n                    params: [\n                      {\n                        name: 'n',\n                        description: '<p>value to parse</p>\\n',\n                        type: 'String|Boolean|Number'\n                      }\n                    ],\n                    return: {\n                      description: 'byte representation of value',\n                      type: 'Number'\n                    }\n                  },\n                  {\n                    line: 173,\n                    params: [\n                      {\n                        name: 'ns',\n                        description: '<p>values to parse</p>\\n',\n                        type: 'Array'\n                      }\n                    ],\n                    return: {\n                      description: 'array of byte representation of values',\n                      type: 'Number[]'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/utilities/conversion.js',\n                line: 187,\n                description:\n                  '<p>Converts a number or string to its corresponding single-character\\nstring representation. If a string parameter is provided, it is first\\nparsed as an integer and then translated into a single-character string.\\nWhen an array of number or string values is passed in, then an array of\\nsingle-character strings of the same length is returned.</p>\\n',\n                itemtype: 'method',\n                name: 'char',\n                return: {\n                  description: 'string representation of value',\n                  type: 'String'\n                },\n                example: [\n                  '\\n<div class=\\'norender\\'><code>\\nprint(char(65)); // \"A\"\\nprint(char(\\'65\\')); // \"A\"\\nprint(char([65, 66, 67])); // [ \"A\", \"B\", \"C\" ]\\nprint(join(char([65, 66, 67]), \\'\\')); // \"ABC\"\\n</code></div>'\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Conversion',\n                overloads: [\n                  {\n                    line: 187,\n                    params: [\n                      {\n                        name: 'n',\n                        description: '<p>value to parse</p>\\n',\n                        type: 'String|Number'\n                      }\n                    ],\n                    return: {\n                      description: 'string representation of value',\n                      type: 'String'\n                    }\n                  },\n                  {\n                    line: 206,\n                    params: [\n                      {\n                        name: 'ns',\n                        description: '<p>values to parse</p>\\n',\n                        type: 'Array'\n                      }\n                    ],\n                    return: {\n                      description: 'array of string representation of values',\n                      type: 'String[]'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/utilities/conversion.js',\n                line: 221,\n                description:\n                  '<p>Converts a single-character string to its corresponding integer\\nrepresentation. When an array of single-character string values is passed\\nin, then an array of integers of the same length is returned.</p>\\n',\n                itemtype: 'method',\n                name: 'unchar',\n                return: {\n                  description: 'integer representation of value',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\nprint(unchar('A')); // 65\\nprint(unchar(['A', 'B', 'C'])); // [ 65, 66, 67 ]\\nprint(unchar(split('ABC', ''))); // [ 65, 66, 67 ]\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Conversion',\n                overloads: [\n                  {\n                    line: 221,\n                    params: [\n                      {\n                        name: 'n',\n                        description: '<p>value to parse</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    return: {\n                      description: 'integer representation of value',\n                      type: 'Number'\n                    }\n                  },\n                  {\n                    line: 237,\n                    params: [\n                      {\n                        name: 'ns',\n                        description: '<p>values to parse</p>\\n',\n                        type: 'Array'\n                      }\n                    ],\n                    return: {\n                      description: 'integer representation of values',\n                      type: 'Number[]'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/utilities/conversion.js',\n                line: 250,\n                description:\n                  '<p>Converts a number to a string in its equivalent hexadecimal notation. If a\\nsecond parameter is passed, it is used to set the number of characters to\\ngenerate in the hexadecimal notation. When an array is passed in, an\\narray of strings in hexadecimal notation of the same length is returned.</p>\\n',\n                itemtype: 'method',\n                name: 'hex',\n                return: {\n                  description: 'hexadecimal string representation of value',\n                  type: 'String'\n                },\n                example: [\n                  '\\n<div class=\\'norender\\'><code>\\nprint(hex(255)); // \"000000FF\"\\nprint(hex(255, 6)); // \"0000FF\"\\nprint(hex([0, 127, 255], 6)); // [ \"000000\", \"00007F\", \"0000FF\" ]\\nprint(Infinity); // \"FFFFFFFF\"\\nprint(-Infinity); // \"00000000\"\\n</code></div>'\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Conversion',\n                overloads: [\n                  {\n                    line: 250,\n                    params: [\n                      {\n                        name: 'n',\n                        description: '<p>value to parse</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'digits',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: 'hexadecimal string representation of value',\n                      type: 'String'\n                    }\n                  },\n                  {\n                    line: 270,\n                    params: [\n                      {\n                        name: 'ns',\n                        description: '<p>array of values to parse</p>\\n',\n                        type: 'Number[]'\n                      },\n                      {\n                        name: 'digits',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: 'hexadecimal string representation of values',\n                      type: 'String[]'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/utilities/conversion.js',\n                line: 302,\n                description:\n                  '<p>Converts a string representation of a hexadecimal number to its equivalent\\ninteger value. When an array of strings in hexadecimal notation is passed\\nin, an array of integers of the same length is returned.</p>\\n',\n                itemtype: 'method',\n                name: 'unhex',\n                return: {\n                  description: 'integer representation of hexadecimal value',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\nprint(unhex('A')); // 10\\nprint(unhex('FF')); // 255\\nprint(unhex(['FF', 'AA', '00'])); // [ 255, 170, 0 ]\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'Conversion',\n                overloads: [\n                  {\n                    line: 302,\n                    params: [\n                      {\n                        name: 'n',\n                        description: '<p>value to parse</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    return: {\n                      description: 'integer representation of hexadecimal value',\n                      type: 'Number'\n                    }\n                  },\n                  {\n                    line: 318,\n                    params: [\n                      {\n                        name: 'ns',\n                        description: '<p>values to parse</p>\\n',\n                        type: 'Array'\n                      }\n                    ],\n                    return: {\n                      description: 'integer representations of hexadecimal value',\n                      type: 'Number[]'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/utilities/string_functions.js',\n                line: 15,\n                description:\n                  '<p>Combines an array of Strings into one String, each separated by the\\ncharacter(s) used for the separator parameter. To join arrays of ints or\\nfloats, it&#39;s necessary to first convert them to Strings using <a href=\"#/p5/nf\">nf()</a> or\\nnfs().</p>\\n',\n                itemtype: 'method',\n                name: 'join',\n                params: [\n                  {\n                    name: 'list',\n                    description: '<p>array of Strings to be joined</p>\\n',\n                    type: 'Array'\n                  },\n                  {\n                    name: 'separator',\n                    description: '<p>String to be placed between each item</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                return: {\n                  description: 'joined String',\n                  type: 'String'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nvar array = ['Hello', 'world!'];\\nvar separator = ' ';\\nvar message = join(array, separator);\\ntext(message, 5, 50);\\n</code>\\n</div>\"\n                ],\n                alt: '\"hello world!\" displayed middle left of canvas.',\n                class: 'p5',\n                module: 'Data',\n                submodule: 'String Functions'\n              },\n              {\n                file: 'src/utilities/string_functions.js',\n                line: 44,\n                description:\n                  '<p>This function is used to apply a regular expression to a piece of text,\\nand return matching groups (elements found inside parentheses) as a\\nString array. If there are no matches, a null value will be returned.\\nIf no groups are specified in the regular expression, but the sequence\\nmatches, an array of length 1 (with the matched text as the first element\\nof the array) will be returned.\\n<br><br>\\nTo use the function, first check to see if the result is null. If the\\nresult is null, then the sequence did not match at all. If the sequence\\ndid match, an array is returned.\\n<br><br>\\nIf there are groups (specified by sets of parentheses) in the regular\\nexpression, then the contents of each will be returned in the array.\\nElement [0] of a regular expression match returns the entire matching\\nstring, and the match groups start at element [1] (the first group is [1],\\nthe second [2], and so on).</p>\\n',\n                itemtype: 'method',\n                name: 'match',\n                params: [\n                  {\n                    name: 'str',\n                    description: '<p>the String to be searched</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'regexp',\n                    description: '<p>the regexp to be used for matching</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                return: {\n                  description: 'Array of Strings found',\n                  type: 'String[]'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nvar string = 'Hello p5js*!';\\nvar regexp = 'p5js\\\\\\\\*';\\nvar m = match(string, regexp);\\ntext(m, 5, 50);\\n</code>\\n</div>\"\n                ],\n                alt: '\"p5js*\" displayed middle left of canvas.',\n                class: 'p5',\n                module: 'Data',\n                submodule: 'String Functions'\n              },\n              {\n                file: 'src/utilities/string_functions.js',\n                line: 85,\n                description:\n                  '<p>This function is used to apply a regular expression to a piece of text,\\nand return a list of matching groups (elements found inside parentheses)\\nas a two-dimensional String array. If there are no matches, a null value\\nwill be returned. If no groups are specified in the regular expression,\\nbut the sequence matches, a two dimensional array is still returned, but\\nthe second dimension is only of length one.\\n<br><br>\\nTo use the function, first check to see if the result is null. If the\\nresult is null, then the sequence did not match at all. If the sequence\\ndid match, a 2D array is returned.\\n<br><br>\\nIf there are groups (specified by sets of parentheses) in the regular\\nexpression, then the contents of each will be returned in the array.\\nAssuming a loop with counter variable i, element [i][0] of a regular\\nexpression match returns the entire matching string, and the match groups\\nstart at element [i][1] (the first group is [i][1], the second [i][2],\\nand so on).</p>\\n',\n                itemtype: 'method',\n                name: 'matchAll',\n                params: [\n                  {\n                    name: 'str',\n                    description: '<p>the String to be searched</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'regexp',\n                    description: '<p>the regexp to be used for matching</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                return: {\n                  description: '2d Array of Strings found',\n                  type: 'String[]'\n                },\n                example: [\n                  \"\\n<div class=\\\"norender\\\">\\n<code>\\nvar string = 'Hello p5js*! Hello world!';\\nvar regexp = 'Hello';\\nmatchAll(string, regexp);\\n</code>\\n</div>\"\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'String Functions'\n              },\n              {\n                file: 'src/utilities/string_functions.js',\n                line: 132,\n                description:\n                  '<p>Utility function for formatting numbers into strings. There are two\\nversions: one for formatting floats, and one for formatting ints.\\nThe values for the digits, left, and right parameters should always\\nbe positive integers.\\n(NOTE): Be cautious when using left and right parameters as it prepends numbers of 0&#39;s if the parameter\\nif greater than the current length of the number.\\nFor example if number is 123.2 and left parameter passed is 4 which is greater than length of 123\\n(integer part) i.e 3 than result will be 0123.2. Same case for right parameter i.e. if right is 3 than\\nthe result will be 123.200.</p>\\n',\n                itemtype: 'method',\n                name: 'nf',\n                return: {\n                  description: 'formatted String',\n                  type: 'String'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nvar myFont;\\nfunction preload() {\\n  myFont = loadFont('assets/fonts/inconsolata.ttf');\\n}\\nfunction setup() {\\n  background(200);\\n  var num1 = 321;\\n  var num2 = -1321;\\n\\n  noStroke();\\n  fill(0);\\n  textFont(myFont);\\n  textSize(22);\\n\\n  text(nf(num1, 4, 2), 10, 30);\\n  text(nf(num2, 4, 2), 10, 80);\\n  // Draw dividing line\\n  stroke(120);\\n  line(0, 50, width, 50);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: '\"0321.00\" middle top, -1321.00\" middle bottom canvas',\n                class: 'p5',\n                module: 'Data',\n                submodule: 'String Functions',\n                overloads: [\n                  {\n                    line: 132,\n                    params: [\n                      {\n                        name: 'num',\n                        description: '<p>the Number to format</p>\\n',\n                        type: 'Number|String'\n                      },\n                      {\n                        name: 'left',\n                        description:\n                          '<p>number of digits to the left of the\\n                               decimal point</p>\\n',\n                        type: 'Integer|String',\n                        optional: true\n                      },\n                      {\n                        name: 'right',\n                        description:\n                          '<p>number of digits to the right of the\\n                               decimal point</p>\\n',\n                        type: 'Integer|String',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: 'formatted String',\n                      type: 'String'\n                    }\n                  },\n                  {\n                    line: 180,\n                    params: [\n                      {\n                        name: 'nums',\n                        description: '<p>the Numbers to format</p>\\n',\n                        type: 'Array'\n                      },\n                      {\n                        name: 'left',\n                        description: '',\n                        type: 'Integer|String',\n                        optional: true\n                      },\n                      {\n                        name: 'right',\n                        description: '',\n                        type: 'Integer|String',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: 'formatted Strings',\n                      type: 'String[]'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/utilities/string_functions.js',\n                line: 243,\n                description:\n                  '<p>Utility function for formatting numbers into strings and placing\\nappropriate commas to mark units of 1000. There are two versions: one\\nfor formatting ints, and one for formatting an array of ints. The value\\nfor the right parameter should always be a positive integer.</p>\\n',\n                itemtype: 'method',\n                name: 'nfc',\n                return: {\n                  description: 'formatted String',\n                  type: 'String'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  background(200);\\n  var num = 11253106.115;\\n  var numArr = [1, 1, 2];\\n\\n  noStroke();\\n  fill(0);\\n  textSize(12);\\n\\n  // Draw formatted numbers\\n  text(nfc(num, 4), 10, 30);\\n  text(nfc(numArr, 2), 10, 80);\\n\\n  // Draw dividing line\\n  stroke(120);\\n  line(0, 50, width, 50);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  '\"11,253,106.115\" top middle and \"1.00,1.00,2.00\" displayed bottom mid',\n                class: 'p5',\n                module: 'Data',\n                submodule: 'String Functions',\n                overloads: [\n                  {\n                    line: 243,\n                    params: [\n                      {\n                        name: 'num',\n                        description: '<p>the Number to format</p>\\n',\n                        type: 'Number|String'\n                      },\n                      {\n                        name: 'right',\n                        description:\n                          '<p>number of digits to the right of the\\n                                 decimal point</p>\\n',\n                        type: 'Integer|String',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: 'formatted String',\n                      type: 'String'\n                    }\n                  },\n                  {\n                    line: 281,\n                    params: [\n                      {\n                        name: 'nums',\n                        description: '<p>the Numbers to format</p>\\n',\n                        type: 'Array'\n                      },\n                      {\n                        name: 'right',\n                        description: '',\n                        type: 'Integer|String',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: 'formatted Strings',\n                      type: 'String[]'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/utilities/string_functions.js',\n                line: 319,\n                description:\n                  '<p>Utility function for formatting numbers into strings. Similar to <a href=\"#/p5/nf\">nf()</a> but\\nputs a &quot;+&quot; in front of positive numbers and a &quot;-&quot; in front of negative\\nnumbers. There are two versions: one for formatting floats, and one for\\nformatting ints. The values for left, and right parameters\\nshould always be positive integers.</p>\\n',\n                itemtype: 'method',\n                name: 'nfp',\n                return: {\n                  description: 'formatted String',\n                  type: 'String'\n                },\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  background(200);\\n  var num1 = 11253106.115;\\n  var num2 = -11253106.115;\\n\\n  noStroke();\\n  fill(0);\\n  textSize(12);\\n\\n  // Draw formatted numbers\\n  text(nfp(num1, 4, 2), 10, 30);\\n  text(nfp(num2, 4, 2), 10, 80);\\n\\n  // Draw dividing line\\n  stroke(120);\\n  line(0, 50, width, 50);\\n}\\n</code>\\n</div>'\n                ],\n                alt: '\"+11253106.11\" top middle and \"-11253106.11\" displayed bottom middle',\n                class: 'p5',\n                module: 'Data',\n                submodule: 'String Functions',\n                overloads: [\n                  {\n                    line: 319,\n                    params: [\n                      {\n                        name: 'num',\n                        description: '<p>the Number to format</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'left',\n                        description:\n                          '<p>number of digits to the left of the decimal\\n                               point</p>\\n',\n                        type: 'Integer',\n                        optional: true\n                      },\n                      {\n                        name: 'right',\n                        description:\n                          '<p>number of digits to the right of the\\n                               decimal point</p>\\n',\n                        type: 'Integer',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: 'formatted String',\n                      type: 'String'\n                    }\n                  },\n                  {\n                    line: 360,\n                    params: [\n                      {\n                        name: 'nums',\n                        description: '<p>the Numbers to format</p>\\n',\n                        type: 'Number[]'\n                      },\n                      {\n                        name: 'left',\n                        description: '',\n                        type: 'Integer',\n                        optional: true\n                      },\n                      {\n                        name: 'right',\n                        description: '',\n                        type: 'Integer',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: 'formatted Strings',\n                      type: 'String[]'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/utilities/string_functions.js',\n                line: 381,\n                description:\n                  '<p>Utility function for formatting numbers into strings. Similar to <a href=\"#/p5/nf\">nf()</a> but\\nputs an additional &quot;_&quot; (space) in front of positive numbers just in case to align it with negative\\nnumbers which includes &quot;-&quot; (minus) sign.\\nThe main usecase of nfs() can be seen when one wants to align the digits (place values) of a non-negative\\nnumber with some negative number (See the example to get a clear picture).\\nThere are two versions: one for formatting float, and one for formatting int.\\nThe values for the digits, left, and right parameters should always be positive integers.\\n(IMP): The result on the canvas basically the expected alignment can vary based on the typeface you are using.\\n(NOTE): Be cautious when using left and right parameters as it prepends numbers of 0&#39;s if the parameter\\nif greater than the current length of the number.\\nFor example if number is 123.2 and left parameter passed is 4 which is greater than length of 123\\n(integer part) i.e 3 than result will be 0123.2. Same case for right parameter i.e. if right is 3 than\\nthe result will be 123.200.</p>\\n',\n                itemtype: 'method',\n                name: 'nfs',\n                return: {\n                  description: 'formatted String',\n                  type: 'String'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nvar myFont;\\nfunction preload() {\\n  myFont = loadFont('assets/fonts/inconsolata.ttf');\\n}\\nfunction setup() {\\n  background(200);\\n  var num1 = 321;\\n  var num2 = -1321;\\n\\n  noStroke();\\n  fill(0);\\n  textFont(myFont);\\n  textSize(22);\\n\\n  // nfs() aligns num1 (positive number) with num2 (negative number) by\\n  // adding a blank space in front of the num1 (positive number)\\n  // [left = 4] in num1 add one 0 in front, to align the digits with num2\\n  // [right = 2] in num1 and num2 adds two 0's after both numbers\\n  // To see the differences check the example of nf() too.\\n  text(nfs(num1, 4, 2), 10, 30);\\n  text(nfs(num2, 4, 2), 10, 80);\\n  // Draw dividing line\\n  stroke(120);\\n  line(0, 50, width, 50);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: '\"0321.00\" top middle and \"-1321.00\" displayed bottom middle',\n                class: 'p5',\n                module: 'Data',\n                submodule: 'String Functions',\n                overloads: [\n                  {\n                    line: 381,\n                    params: [\n                      {\n                        name: 'num',\n                        description: '<p>the Number to format</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'left',\n                        description:\n                          '<p>number of digits to the left of the decimal\\n                               point</p>\\n',\n                        type: 'Integer',\n                        optional: true\n                      },\n                      {\n                        name: 'right',\n                        description:\n                          '<p>number of digits to the right of the\\n                               decimal point</p>\\n',\n                        type: 'Integer',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: 'formatted String',\n                      type: 'String'\n                    }\n                  },\n                  {\n                    line: 438,\n                    params: [\n                      {\n                        name: 'nums',\n                        description: '<p>the Numbers to format</p>\\n',\n                        type: 'Array'\n                      },\n                      {\n                        name: 'left',\n                        description: '',\n                        type: 'Integer',\n                        optional: true\n                      },\n                      {\n                        name: 'right',\n                        description: '',\n                        type: 'Integer',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: 'formatted Strings',\n                      type: 'String[]'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/utilities/string_functions.js',\n                line: 459,\n                description:\n                  '<p>The <a href=\"#/p5/split\">split()</a> function maps to String.split(), it breaks a String into\\npieces using a character or string as the delimiter. The delim parameter\\nspecifies the character or characters that mark the boundaries between\\neach piece. A String[] array is returned that contains each of the pieces.</p>\\n<p>The <a href=\"#/p5/splitTokens\">splitTokens()</a> function works in a similar fashion, except that it\\nsplits using a range of characters instead of a specific character or\\nsequence.</p>\\n',\n                itemtype: 'method',\n                name: 'split',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>the String to be split</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'delim',\n                    description: '<p>the String used to separate the data</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                return: {\n                  description: 'Array of Strings',\n                  type: 'String[]'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nvar names = 'Pat,Xio,Alex';\\nvar splitString = split(names, ',');\\ntext(splitString[0], 5, 30);\\ntext(splitString[1], 5, 50);\\ntext(splitString[2], 5, 70);\\n</code>\\n</div>\"\n                ],\n                alt: '\"pat\" top left, \"Xio\" mid left and \"Alex\" displayed bottom left',\n                class: 'p5',\n                module: 'Data',\n                submodule: 'String Functions'\n              },\n              {\n                file: 'src/utilities/string_functions.js',\n                line: 493,\n                description:\n                  '<p>The <a href=\"#/p5/splitTokens\">splitTokens()</a> function splits a String at one or many character\\ndelimiters or &quot;tokens.&quot; The delim parameter specifies the character or\\ncharacters to be used as a boundary.\\n<br><br>\\nIf no delim characters are specified, any whitespace character is used to\\nsplit. Whitespace characters include tab (\\\\t), line feed (\\\\n), carriage\\nreturn (\\\\r), form feed (\\\\f), and space.</p>\\n',\n                itemtype: 'method',\n                name: 'splitTokens',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>the String to be split</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'delim',\n                    description:\n                      '<p>list of individual Strings that will be used as\\n                         separators</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'Array of Strings',\n                  type: 'String[]'\n                },\n                example: [\n                  '\\n<div class = \"norender\">\\n<code>\\nfunction setup() {\\n  var myStr = \\'Mango, Banana, Lime\\';\\n  var myStrArr = splitTokens(myStr, \\',\\');\\n\\n  print(myStrArr); // prints : [\"Mango\",\" Banana\",\" Lime\"]\\n}\\n</code>\\n</div>'\n                ],\n                class: 'p5',\n                module: 'Data',\n                submodule: 'String Functions'\n              },\n              {\n                file: 'src/utilities/string_functions.js',\n                line: 548,\n                description:\n                  '<p>Removes whitespace characters from the beginning and end of a String. In\\naddition to standard whitespace characters such as space, carriage return,\\nand tab, this function also removes the Unicode &quot;nbsp&quot; character.</p>\\n',\n                itemtype: 'method',\n                name: 'trim',\n                return: {\n                  description: 'a trimmed String',\n                  type: 'String'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nvar string = trim('  No new lines\\\\n   ');\\ntext(string + ' here', 2, 50);\\n</code>\\n</div>\"\n                ],\n                alt: '\"No new lines here\" displayed center canvas',\n                class: 'p5',\n                module: 'Data',\n                submodule: 'String Functions',\n                overloads: [\n                  {\n                    line: 548,\n                    params: [\n                      {\n                        name: 'str',\n                        description: '<p>a String to be trimmed</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    return: {\n                      description: 'a trimmed String',\n                      type: 'String'\n                    }\n                  },\n                  {\n                    line: 568,\n                    params: [\n                      {\n                        name: 'strs',\n                        description: '<p>an Array of Strings to be trimmed</p>\\n',\n                        type: 'Array'\n                      }\n                    ],\n                    return: {\n                      description: 'an Array of trimmed Strings',\n                      type: 'String[]'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/utilities/time_date.js',\n                line: 12,\n                description:\n                  '<p>p5.js communicates with the clock on your computer. The <a href=\"#/p5/day\">day()</a> function\\nreturns the current day as a value from 1 - 31.</p>\\n',\n                itemtype: 'method',\n                name: 'day',\n                return: {\n                  description: 'the current day',\n                  type: 'Integer'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nvar d = day();\\ntext('Current day: \\\\n' + d, 5, 50);\\n</code>\\n</div>\"\n                ],\n                alt: 'Current day is displayed',\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Time & Date'\n              },\n              {\n                file: 'src/utilities/time_date.js',\n                line: 34,\n                description:\n                  '<p>p5.js communicates with the clock on your computer. The <a href=\"#/p5/hour\">hour()</a> function\\nreturns the current hour as a value from 0 - 23.</p>\\n',\n                itemtype: 'method',\n                name: 'hour',\n                return: {\n                  description: 'the current hour',\n                  type: 'Integer'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nvar h = hour();\\ntext('Current hour:\\\\n' + h, 5, 50);\\n</code>\\n</div>\"\n                ],\n                alt: 'Current hour is displayed',\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Time & Date'\n              },\n              {\n                file: 'src/utilities/time_date.js',\n                line: 56,\n                description:\n                  '<p>p5.js communicates with the clock on your computer. The <a href=\"#/p5/minute\">minute()</a> function\\nreturns the current minute as a value from 0 - 59.</p>\\n',\n                itemtype: 'method',\n                name: 'minute',\n                return: {\n                  description: 'the current minute',\n                  type: 'Integer'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nvar m = minute();\\ntext('Current minute: \\\\n' + m, 5, 50);\\n</code>\\n</div>\"\n                ],\n                alt: 'Current minute is displayed',\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Time & Date'\n              },\n              {\n                file: 'src/utilities/time_date.js',\n                line: 78,\n                description:\n                  '<p>Returns the number of milliseconds (thousandths of a second) since\\nstarting the program. This information is often used for timing events and\\nanimation sequences.</p>\\n',\n                itemtype: 'method',\n                name: 'millis',\n                return: {\n                  description: 'the number of milliseconds since starting the program',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nvar millisecond = millis();\\ntext('Milliseconds \\\\nrunning: \\\\n' + millisecond, 5, 40);\\n</code>\\n</div>\"\n                ],\n                alt: 'number of milliseconds since program has started displayed',\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Time & Date'\n              },\n              {\n                file: 'src/utilities/time_date.js',\n                line: 101,\n                description:\n                  '<p>p5.js communicates with the clock on your computer. The <a href=\"#/p5/month\">month()</a> function\\nreturns the current month as a value from 1 - 12.</p>\\n',\n                itemtype: 'method',\n                name: 'month',\n                return: {\n                  description: 'the current month',\n                  type: 'Integer'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nvar m = month();\\ntext('Current month: \\\\n' + m, 5, 50);\\n</code>\\n</div>\"\n                ],\n                alt: 'Current month is displayed',\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Time & Date'\n              },\n              {\n                file: 'src/utilities/time_date.js',\n                line: 123,\n                description:\n                  '<p>p5.js communicates with the clock on your computer. The <a href=\"#/p5/second\">second()</a> function\\nreturns the current second as a value from 0 - 59.</p>\\n',\n                itemtype: 'method',\n                name: 'second',\n                return: {\n                  description: 'the current second',\n                  type: 'Integer'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nvar s = second();\\ntext('Current second: \\\\n' + s, 5, 50);\\n</code>\\n</div>\"\n                ],\n                alt: 'Current second is displayed',\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Time & Date'\n              },\n              {\n                file: 'src/utilities/time_date.js',\n                line: 145,\n                description:\n                  '<p>p5.js communicates with the clock on your computer. The <a href=\"#/p5/year\">year()</a> function\\nreturns the current year as an integer (2014, 2015, 2016, etc).</p>\\n',\n                itemtype: 'method',\n                name: 'year',\n                return: {\n                  description: 'the current year',\n                  type: 'Integer'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nvar y = year();\\ntext('Current year: \\\\n' + y, 5, 50);\\n</code>\\n</div>\"\n                ],\n                alt: 'Current year is displayed',\n                class: 'p5',\n                module: 'IO',\n                submodule: 'Time & Date'\n              },\n              {\n                file: 'src/webgl/3d_primitives.js',\n                line: 14,\n                description: '<p>Draw a plane with given a width and height</p>\\n',\n                itemtype: 'method',\n                name: 'plane',\n                params: [\n                  {\n                    name: 'width',\n                    description: '<p>width of the plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'height',\n                    description: '<p>height of the plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'detailX',\n                    description:\n                      '<p>Optional number of triangle\\n                            subdivisions in x-dimension</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'detailY',\n                    description:\n                      '<p>Optional number of triangle\\n                            subdivisions in y-dimension</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\n// draw a plane\\n// with width 50 and height 50\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  plane(50, 50);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'Nothing displayed on canvas\\nRotating interior view of a box with sides that change color.\\n3d red and green gradient.\\nRotating interior view of a cylinder with sides that change color.\\nRotating view of a cylinder with sides that change color.\\n3d red and green gradient.\\nrotating view of a multi-colored cylinder with concave sides.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '3D Primitives'\n              },\n              {\n                file: 'src/webgl/3d_primitives.js',\n                line: 98,\n                description: '<p>Draw a box with given width, height and depth</p>\\n',\n                itemtype: 'method',\n                name: 'box',\n                params: [\n                  {\n                    name: 'width',\n                    description: '<p>width of the box</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'Height',\n                    description: '<p>height of the box</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'depth',\n                    description: '<p>depth of the box</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'detailX',\n                    description:\n                      '<p>Optional number of triangle\\n                           subdivisions in x-dimension</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'detailY',\n                    description:\n                      '<p>Optional number of triangle\\n                           subdivisions in y-dimension</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\n// draw a spinning box\\n// with width, height and depth of 50\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  rotateX(frameCount * 0.01);\\n  rotateY(frameCount * 0.01);\\n  box(50);\\n}\\n</code>\\n</div>'\n                ],\n                class: 'p5',\n                module: 'Shape',\n                submodule: '3D Primitives'\n              },\n              {\n                file: 'src/webgl/3d_primitives.js',\n                line: 216,\n                description: '<p>Draw a sphere with given radius</p>\\n',\n                itemtype: 'method',\n                name: 'sphere',\n                params: [\n                  {\n                    name: 'radius',\n                    description: '<p>radius of circle</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'detailX',\n                    description:\n                      '<p>number of segments,\\n                                   the more segments the smoother geometry\\n                                   default is 24</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'detailY',\n                    description:\n                      '<p>number of segments,\\n                                   the more segments the smoother geometry\\n                                   default is 16</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\n// draw a sphere with radius 40\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  sphere(40);\\n}\\n</code>\\n</div>'\n                ],\n                class: 'p5',\n                module: 'Shape',\n                submodule: '3D Primitives'\n              },\n              {\n                file: 'src/webgl/3d_primitives.js',\n                line: 378,\n                description: '<p>Draw a cylinder with given radius and height</p>\\n',\n                itemtype: 'method',\n                name: 'cylinder',\n                params: [\n                  {\n                    name: 'radius',\n                    description: '<p>radius of the surface</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'height',\n                    description: '<p>height of the cylinder</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'detailX',\n                    description:\n                      '<p>number of segments,\\n                              the more segments the smoother geometry\\n                              default is 24</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'detailY',\n                    description:\n                      '<p>number of segments in y-dimension,\\n                              the more segments the smoother geometry\\n                              default is 1</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'bottomCap',\n                    description: '<p>whether to draw the bottom of the cylinder</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  },\n                  {\n                    name: 'topCap',\n                    description: '<p>whether to draw the top of the cylinder</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\n// draw a spinning cylinder\\n// with radius 20 and height 50\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  rotateX(frameCount * 0.01);\\n  rotateZ(frameCount * 0.01);\\n  cylinder(20, 50);\\n}\\n</code>\\n</div>'\n                ],\n                class: 'p5',\n                module: 'Shape',\n                submodule: '3D Primitives'\n              },\n              {\n                file: 'src/webgl/3d_primitives.js',\n                line: 470,\n                description: '<p>Draw a cone with given radius and height</p>\\n',\n                itemtype: 'method',\n                name: 'cone',\n                params: [\n                  {\n                    name: 'radius',\n                    description: '<p>radius of the bottom surface</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'height',\n                    description: '<p>height of the cone</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'detailX',\n                    description:\n                      '<p>number of segments,\\n                            the more segments the smoother geometry\\n                            default is 24</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'detailY',\n                    description:\n                      '<p>number of segments,\\n                            the more segments the smoother geometry\\n                            default is 1</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'cap',\n                    description: '<p>whether to draw the base of the cone</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\n// draw a spinning cone\\n// with radius 40 and height 70\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  rotateX(frameCount * 0.01);\\n  rotateZ(frameCount * 0.01);\\n  cone(40, 70);\\n}\\n</code>\\n</div>'\n                ],\n                class: 'p5',\n                module: 'Shape',\n                submodule: '3D Primitives'\n              },\n              {\n                file: 'src/webgl/3d_primitives.js',\n                line: 540,\n                description: '<p>Draw an ellipsoid with given radius</p>\\n',\n                itemtype: 'method',\n                name: 'ellipsoid',\n                params: [\n                  {\n                    name: 'radiusx',\n                    description: '<p>x-radius of ellipsoid</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'radiusy',\n                    description: '<p>y-radius of ellipsoid</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'radiusz',\n                    description: '<p>z-radius of ellipsoid</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'detailX',\n                    description:\n                      '<p>number of segments,\\n                                   the more segments the smoother geometry\\n                                   default is 24. Avoid detail number above\\n                                   150, it may crash the browser.</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'detailY',\n                    description:\n                      '<p>number of segments,\\n                                   the more segments the smoother geometry\\n                                   default is 16. Avoid detail number above\\n                                   150, it may crash the browser.</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\n// draw an ellipsoid\\n// with radius 30, 40 and 40.\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  ellipsoid(30, 40, 40);\\n}\\n</code>\\n</div>'\n                ],\n                class: 'p5',\n                module: 'Shape',\n                submodule: '3D Primitives'\n              },\n              {\n                file: 'src/webgl/3d_primitives.js',\n                line: 631,\n                description: '<p>Draw a torus with given radius and tube radius</p>\\n',\n                itemtype: 'method',\n                name: 'torus',\n                params: [\n                  {\n                    name: 'radius',\n                    description: '<p>radius of the whole ring</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'tubeRadius',\n                    description: '<p>radius of the tube</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'detailX',\n                    description:\n                      '<p>number of segments in x-dimension,\\n                               the more segments the smoother geometry\\n                               default is 24</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'detailY',\n                    description:\n                      '<p>number of segments in y-dimension,\\n                               the more segments the smoother geometry\\n                               default is 16</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\n// draw a spinning torus\\n// with ring radius 30 and tube radius 15\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  rotateX(frameCount * 0.01);\\n  rotateY(frameCount * 0.01);\\n  torus(30, 15);\\n}\\n</code>\\n</div>'\n                ],\n                class: 'p5',\n                module: 'Shape',\n                submodule: '3D Primitives'\n              },\n              {\n                file: 'src/webgl/interaction.js',\n                line: 13,\n                description:\n                  '<p>Allows movement around a 3D sketch using a mouse or trackpad.  Left-clicking\\nand dragging will rotate the camera position about the center of the sketch,\\nright-clicking and dragging will pan the camera position without rotation,\\nand using the mouse wheel (scrolling) will move the camera closer or further\\nfrom the center of the sketch. This function can be called with parameters\\ndictating sensitivity to mouse movement along the X and Y axes.  Calling\\nthis function without parameters is equivalent to calling orbitControl(1,1).\\nTo reverse direction of movement in either axis, enter a negative number\\nfor sensitivity.</p>\\n',\n                itemtype: 'method',\n                name: 'orbitControl',\n                params: [\n                  {\n                    name: 'sensitivityX',\n                    description: '<p>sensitivity to mouse movement along X axis</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'sensitivityY',\n                    description: '<p>sensitivity to mouse movement along Y axis</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  normalMaterial();\\n}\\nfunction draw() {\\n  background(200);\\n  orbitControl();\\n  rotateY(0.5);\\n  box(30, 50);\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'Camera orbits around a box when mouse is hold-clicked & then moved.',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Interaction'\n              },\n              {\n                file: 'src/webgl/interaction.js',\n                line: 146,\n                description:\n                  '<p>debugMode() helps visualize 3D space by adding a grid to indicate where the\\n‘ground’ is in a sketch and an axes icon which indicates the +X, +Y, and +Z\\ndirections. This function can be called without parameters to create a\\ndefault grid and axes icon, or it can be called according to the examples\\nabove to customize the size and position of the grid and/or axes icon.  The\\ngrid is drawn using the most recently set stroke color and weight.  To\\nspecify these parameters, add a call to stroke() and strokeWeight()\\njust before the end of the draw() loop.</p>\\n<p>By default, the grid will run through the origin (0,0,0) of the sketch\\nalong the XZ plane\\nand the axes icon will be offset from the origin.  Both the grid and axes\\nicon will be sized according to the current canvas size.  Note that because the\\ngrid runs parallel to the default camera view, it is often helpful to use\\ndebugMode along with orbitControl to allow full view of the grid.</p>\\n',\n                itemtype: 'method',\n                name: 'debugMode',\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\\n  normalMaterial();\\n  debugMode();\\n}\\n\\nfunction draw() {\\n  background(200);\\n  orbitControl();\\n  box(15, 30);\\n  // Press the spacebar to turn debugMode off!\\n  if (keyIsDown(32)) {\\n    noDebugMode();\\n  }\\n}\\n</code>\\n</div>',\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\\n  normalMaterial();\\n  debugMode(GRID);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  orbitControl();\\n  box(15, 30);\\n}\\n</code>\\n</div>',\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\\n  normalMaterial();\\n  debugMode(AXES);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  orbitControl();\\n  box(15, 30);\\n}\\n</code>\\n</div>',\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\\n  normalMaterial();\\n  debugMode(GRID, 100, 10, 0, 0, 0);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  orbitControl();\\n  box(15, 30);\\n}\\n</code>\\n</div>',\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\\n  normalMaterial();\\n  debugMode(100, 10, 0, 0, 0, 20, 0, -40, 0);\\n}\\n\\nfunction draw() {\\n  noStroke();\\n  background(200);\\n  orbitControl();\\n  box(15, 30);\\n  // set the stroke color and weight for the grid!\\n  stroke(255, 0, 150);\\n  strokeWeight(0.8);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'a 3D box is centered on a grid in a 3D sketch. an icon\\nindicates the direction of each axis: a red line points +X,\\na green line +Y, and a blue line +Z.',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Interaction',\n                overloads: [\n                  {\n                    line: 146,\n                    params: []\n                  },\n                  {\n                    line: 279,\n                    params: [\n                      {\n                        name: 'mode',\n                        description: '<p>either GRID or AXES</p>\\n',\n                        type: 'Constant'\n                      }\n                    ]\n                  },\n                  {\n                    line: 284,\n                    params: [\n                      {\n                        name: 'mode',\n                        description: '',\n                        type: 'Constant'\n                      },\n                      {\n                        name: 'gridSize',\n                        description: '<p>size of one side of the grid</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'gridDivisions',\n                        description: '<p>number of divisions in the grid</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'xOff',\n                        description: '<p>X axis offset from origin (0,0,0)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'yOff',\n                        description: '<p>Y axis offset from origin (0,0,0)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'zOff',\n                        description: '<p>Z axis offset from origin (0,0,0)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    line: 294,\n                    params: [\n                      {\n                        name: 'mode',\n                        description: '',\n                        type: 'Constant'\n                      },\n                      {\n                        name: 'axesSize',\n                        description: '<p>size of axes icon</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'xOff',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'yOff',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'zOff',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    line: 303,\n                    params: [\n                      {\n                        name: 'gridSize',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'gridDivisions',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'gridXOff',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'gridYOff',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'gridZOff',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'axesSize',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'axesXOff',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'axesYOff',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'axesZOff',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              {\n                file: 'src/webgl/interaction.js',\n                line: 380,\n                description: '<p>Turns off debugMode() in a 3D sketch.</p>\\n',\n                itemtype: 'method',\n                name: 'noDebugMode',\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\\n  normalMaterial();\\n  debugMode();\\n}\\n\\nfunction draw() {\\n  background(200);\\n  orbitControl();\\n  box(15, 30);\\n  // Press the spacebar to turn debugMode off!\\n  if (keyIsDown(32)) {\\n    noDebugMode();\\n  }\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'a 3D box is centered on a grid in a 3D sketch. an icon\\nindicates the direction of each axis: a red line points +X,\\na green line +Y, and a blue line +Z. the grid and icon disappear when the\\nspacebar is pressed.',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Interaction'\n              },\n              {\n                file: 'src/webgl/light.js',\n                line: 12,\n                description: '<p>Creates an ambient light with a color</p>\\n',\n                itemtype: 'method',\n                name: 'ambientLight',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\nfunction draw() {\\n  background(0);\\n  ambientLight(150);\\n  ambientMaterial(250);\\n  noStroke();\\n  sphere(40);\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'evenly distributed light across a sphere',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Lights',\n                overloads: [\n                  {\n                    line: 12,\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value relative to\\n                                the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>green or saturation value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description:\n                          '<p>blue or brightness value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '<p>the alpha value</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 46,\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>a color string</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 52,\n                    params: [\n                      {\n                        name: 'gray',\n                        description: '<p>a gray value</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 59,\n                    params: [\n                      {\n                        name: 'values',\n                        description:\n                          '<p>an array containing the red,green,blue &amp;\\n                                and alpha components of the color</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 66,\n                    params: [\n                      {\n                        name: 'color',\n                        description: '<p>the ambient light color</p>\\n',\n                        type: 'p5.Color'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/webgl/light.js',\n                line: 87,\n                description:\n                  '<p>Creates a directional light with a color and a direction</p>\\n',\n                itemtype: 'method',\n                name: 'directionalLight',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\nfunction draw() {\\n  background(0);\\n  //move your mouse to change light direction\\n  let dirX = (mouseX / width - 0.5) * 2;\\n  let dirY = (mouseY / height - 0.5) * 2;\\n  directionalLight(250, 250, 250, -dirX, -dirY, -1);\\n  noStroke();\\n  sphere(40);\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'light source on canvas changeable with mouse position',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Lights',\n                overloads: [\n                  {\n                    line: 87,\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value (depending on the current\\ncolor mode),</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description: '<p>green or saturation value</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description: '<p>blue or brightness value</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'position',\n                        description: '<p>the direction of the light</p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 119,\n                    params: [\n                      {\n                        name: 'color',\n                        description:\n                          '<p>color Array, CSS color string,\\n                                            or <a href=\"#/p5.Color\">p5.Color</a> value</p>\\n',\n                        type: 'Number[]|String|p5.Color'\n                      },\n                      {\n                        name: 'x',\n                        description: '<p>x axis direction</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y axis direction</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>z axis direction</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 129,\n                    params: [\n                      {\n                        name: 'color',\n                        description: '',\n                        type: 'Number[]|String|p5.Color'\n                      },\n                      {\n                        name: 'position',\n                        description: '',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 136,\n                    params: [\n                      {\n                        name: 'v1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/webgl/light.js',\n                line: 185,\n                description:\n                  '<p>Creates a point light with a color and a light position</p>\\n',\n                itemtype: 'method',\n                name: 'pointLight',\n                chainable: 1,\n                example: [\n                  \"\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\nfunction draw() {\\n  background(0);\\n  //move your mouse to change light position\\n  let locX = mouseX - width / 2;\\n  let locY = mouseY - height / 2;\\n  // to set the light position,\\n  // think of the world's coordinate as:\\n  // -width/2,-height/2 -------- width/2,-height/2\\n  //                |            |\\n  //                |     0,0    |\\n  //                |            |\\n  // -width/2,height/2--------width/2,height/2\\n  pointLight(250, 250, 250, locX, locY, 50);\\n  noStroke();\\n  sphere(40);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'spot light on canvas changes position with mouse',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Lights',\n                overloads: [\n                  {\n                    line: 185,\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value (depending on the current\\ncolor mode),</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description: '<p>green or saturation value</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description: '<p>blue or brightness value</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x',\n                        description: '<p>x axis position</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y axis position</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>z axis position</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 226,\n                    params: [\n                      {\n                        name: 'v1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'position',\n                        description: '<p>the position of the light</p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 235,\n                    params: [\n                      {\n                        name: 'color',\n                        description:\n                          '<p>color Array, CSS color string,\\nor <a href=\"#/p5.Color\">p5.Color</a> value</p>\\n',\n                        type: 'Number[]|String|p5.Color'\n                      },\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 245,\n                    params: [\n                      {\n                        name: 'color',\n                        description: '',\n                        type: 'Number[]|String|p5.Color'\n                      },\n                      {\n                        name: 'position',\n                        description: '',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/webgl/light.js',\n                line: 287,\n                description:\n                  '<p>Sets the default ambient and directional light. The defaults are <a href=\"#/p5/ambientLight\">ambientLight(128, 128, 128)</a> and <a href=\"#/p5/directionalLight\">directionalLight(128, 128, 128, 0, 0, -1)</a>. Lights need to be included in the <a href=\"#/p5/draw\">draw()</a> to remain persistent in a looping program. Placing them in the <a href=\"#/p5/setup\">setup()</a> of a looping program will cause them to only have an effect the first time through the loop.</p>\\n',\n                itemtype: 'method',\n                name: 'lights',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\nfunction draw() {\\n  background(0);\\n  lights();\\n  rotateX(millis() / 1000);\\n  rotateY(millis() / 1000);\\n  rotateZ(millis() / 1000);\\n  box();\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'the light is partially ambient and partially directional',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Lights'\n              },\n              {\n                file: 'src/webgl/light.js',\n                line: 318,\n                description:\n                  '<p>Sets the falloff rates for point lights. It affects only the elements which are created after it in the code.\\nThe default value is lightFalloff(1.0, 0.0, 0.0), and the parameters are used to calculate the falloff with the following equation:</p>\\n<p>d = distance from light position to vertex position</p>\\n<p>falloff = 1 / (CONSTANT + d * LINEAR + ( d * d ) * QUADRATIC)</p>\\n',\n                itemtype: 'method',\n                name: 'lightFalloff',\n                params: [\n                  {\n                    name: 'constant',\n                    description: '<p>constant value for determining falloff</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'linear',\n                    description: '<p>linear value for determining falloff</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'quadratic',\n                    description: '<p>quadratic value for determining falloff</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  noStroke();\\n}\\nfunction draw() {\\n  background(0);\\n  let locX = mouseX - width / 2;\\n  let locY = mouseY - height / 2;\\n  translate(-25, 0, 0);\\n  lightFalloff(1, 0, 0);\\n  pointLight(250, 250, 250, locX, locY, 50);\\n  sphere(20);\\n  translate(50, 0, 0);\\n  lightFalloff(0.9, 0.01, 0);\\n  pointLight(250, 250, 250, locX, locY, 50);\\n  sphere(20);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'Two spheres with different falloff values show different intensity of light',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Lights'\n              },\n              {\n                file: 'src/webgl/loading.js',\n                line: 14,\n                description:\n                  '<p>Load a 3d model from an OBJ or STL file.\\n<br><br>\\nOne of the limitations of the OBJ and STL format is that it doesn&#39;t have a built-in\\nsense of scale. This means that models exported from different programs might\\nbe very different sizes. If your model isn&#39;t displaying, try calling\\n<a href=\"#/p5/loadModel\">loadModel()</a> with the normalized parameter set to true. This will resize the\\nmodel to a scale appropriate for p5. You can also make additional changes to\\nthe final size of your model with the <a href=\"#/p5/scale\">scale()</a> function.</p>\\n<p>Also, the support for colored STL files is not present. STL files with color will be\\nrendered without color properties.</p>\\n',\n                itemtype: 'method',\n                name: 'loadModel',\n                return: {\n                  description: 'the <a href=\"#/p5.Geometry\">p5.Geometry</a> object',\n                  type: 'p5.Geometry'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\n//draw a spinning octahedron\\nlet octahedron;\\n\\nfunction preload() {\\n  octahedron = loadModel('assets/octahedron.obj');\\n}\\n\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  rotateX(frameCount * 0.01);\\n  rotateY(frameCount * 0.01);\\n  model(octahedron);\\n}\\n</code>\\n</div>\",\n                  \"\\n<div>\\n<code>\\n//draw a spinning teapot\\nlet teapot;\\n\\nfunction preload() {\\n  // Load model with normalise parameter set to true\\n  teapot = loadModel('assets/teapot.obj', true);\\n}\\n\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  scale(0.4); // Scaled to make model fit into canvas\\n  rotateX(frameCount * 0.01);\\n  rotateY(frameCount * 0.01);\\n  normalMaterial(); // For effect\\n  model(teapot);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'Vertically rotating 3-d teapot with red, green and blue gradient.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '3D Models',\n                overloads: [\n                  {\n                    line: 14,\n                    params: [\n                      {\n                        name: 'path',\n                        description: '<p>Path of the model to be loaded</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'normalize',\n                        description:\n                          '<p>If true, scale the model to a\\n                                     standardized size when loading</p>\\n',\n                        type: 'Boolean'\n                      },\n                      {\n                        name: 'successCallback',\n                        description:\n                          '<p>Function to be called\\n                                    once the model is loaded. Will be passed\\n                                    the 3D model object.</p>\\n',\n                        type: 'function(p5.Geometry)',\n                        optional: true\n                      },\n                      {\n                        name: 'failureCallback',\n                        description:\n                          '<p>called with event error if\\n                                        the model fails to load.</p>\\n',\n                        type: 'Function(Event)',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: 'the <a href=\"#/p5.Geometry\">p5.Geometry</a> object',\n                      type: 'p5.Geometry'\n                    }\n                  },\n                  {\n                    line: 93,\n                    params: [\n                      {\n                        name: 'path',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'successCallback',\n                        description: '',\n                        type: 'function(p5.Geometry)',\n                        optional: true\n                      },\n                      {\n                        name: 'failureCallback',\n                        description: '',\n                        type: 'Function(Event)',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: 'the <a href=\"#/p5.Geometry\">p5.Geometry</a> object',\n                      type: 'p5.Geometry'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'src/webgl/loading.js',\n                line: 169,\n                description:\n                  '<p>Parse OBJ lines into model. For reference, this is what a simple model of a\\nsquare might look like:</p>\\n<p>v -0.5 -0.5 0.5\\nv -0.5 -0.5 -0.5\\nv -0.5 0.5 -0.5\\nv -0.5 0.5 0.5</p>\\n<p>f 4 3 2 1</p>\\n',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '3D Models'\n              },\n              {\n                file: 'src/webgl/loading.js',\n                line: 278,\n                description:\n                  '<p>STL files can be of two types, ASCII and Binary,</p>\\n<p>We need to convert the arrayBuffer to an array of strings,\\nto parse it as an ASCII file.</p>\\n',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '3D Models'\n              },\n              {\n                file: 'src/webgl/loading.js',\n                line: 305,\n                description:\n                  '<p>This function checks if the file is in ASCII format or in Binary format</p>\\n<p>It is done by searching keyword <code>solid</code> at the start of the file.</p>\\n<p>An ASCII STL data must begin with <code>solid</code> as the first six bytes.\\nHowever, ASCII STLs lacking the SPACE after the <code>d</code> are known to be\\nplentiful. So, check the first 5 bytes for <code>solid</code>.</p>\\n<p>Several encodings, such as UTF-8, precede the text with up to 5 bytes:\\n<a href=\"https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\">https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding</a>\\nSearch for <code>solid</code> to start anywhere after those prefixes.</p>\\n',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '3D Models'\n              },\n              {\n                file: 'src/webgl/loading.js',\n                line: 332,\n                description:\n                  '<p>This function matches the <code>query</code> at the provided <code>offset</code></p>\\n',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '3D Models'\n              },\n              {\n                file: 'src/webgl/loading.js',\n                line: 344,\n                description:\n                  '<p>This function parses the Binary STL files.\\n<a href=\"https://en.wikipedia.org/wiki/STL_%28file_format%29#Binary_STL\">https://en.wikipedia.org/wiki/STL_%28file_format%29#Binary_STL</a></p>\\n<p>Currently there is no support for the colors provided in STL files.</p>\\n',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '3D Models'\n              },\n              {\n                file: 'src/webgl/loading.js',\n                line: 433,\n                description:\n                  '<p>ASCII STL file starts with <code>solid &#39;nameOfFile&#39;</code>\\nThen contain the normal of the face, starting with <code>facet normal</code>\\nNext contain a keyword indicating the start of face vertex, <code>outer loop</code>\\nNext comes the three vertex, starting with <code>vertex x y z</code>\\nVertices ends with <code>endloop</code>\\nFace ends with <code>endfacet</code>\\nNext face starts with <code>facet normal</code>\\nThe end of the file is indicated by <code>endsolid</code></p>\\n',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '3D Models'\n              },\n              {\n                file: 'src/webgl/loading.js',\n                line: 580,\n                description: '<p>Render a 3d model to the screen.</p>\\n',\n                itemtype: 'method',\n                name: 'model',\n                params: [\n                  {\n                    name: 'model',\n                    description: '<p>Loaded 3d model to be rendered</p>\\n',\n                    type: 'p5.Geometry'\n                  }\n                ],\n                example: [\n                  \"\\n<div>\\n<code>\\n//draw a spinning octahedron\\nlet octahedron;\\n\\nfunction preload() {\\n  octahedron = loadModel('assets/octahedron.obj');\\n}\\n\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  rotateX(frameCount * 0.01);\\n  rotateY(frameCount * 0.01);\\n  model(octahedron);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'Vertically rotating 3-d octahedron.',\n                class: 'p5',\n                module: 'Shape',\n                submodule: '3D Models'\n              },\n              {\n                file: 'src/webgl/material.js',\n                line: 14,\n                description:\n                  '<p>Loads a custom shader from the provided vertex and fragment\\nshader paths. The shader files are loaded asynchronously in the\\nbackground, so this method should be used in <a href=\"#/p5/preload\">preload()</a>.</p>\\n<p>For now, there are three main types of shaders. p5 will automatically\\nsupply appropriate vertices, normals, colors, and lighting attributes\\nif the parameters defined in the shader match the names.</p>\\n',\n                itemtype: 'method',\n                name: 'loadShader',\n                params: [\n                  {\n                    name: 'vertFilename',\n                    description:\n                      '<p>path to file containing vertex shader\\nsource code</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'fragFilename',\n                    description:\n                      '<p>path to file containing fragment shader\\nsource code</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>callback to be executed after loadShader\\ncompletes. On success, the Shader object is passed as the first argument.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>callback to be executed when an error\\noccurs inside loadShader. On error, the error is passed as the first\\nargument.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'a shader object created from the provided\\nvertex and fragment shader files.',\n                  type: 'p5.Shader'\n                },\n                example: [\n                  \"\\n<div modernizr='webgl'>\\n<code>\\nlet mandel;\\nfunction preload() {\\n  // load the shader definitions from files\\n  mandel = loadShader('assets/shader.vert', 'assets/shader.frag');\\n}\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  // use the shader\\n  shader(mandel);\\n  noStroke();\\n  mandel.setUniform('p', [-0.74364388703, 0.13182590421]);\\n}\\n\\nfunction draw() {\\n  mandel.setUniform('r', 1.5 * exp(-6.5 * (1 + sin(millis() / 2000))));\\n  quad(-1, -1, 1, -1, 1, 1, -1, 1);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'zooming Mandelbrot set. a colorful, infinitely detailed fractal.',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Material'\n              },\n              {\n                file: 'src/webgl/material.js',\n                line: 113,\n                itemtype: 'method',\n                name: 'createShader',\n                params: [\n                  {\n                    name: 'vertSrc',\n                    description: '<p>source code for the vertex shader</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'fragSrc',\n                    description: '<p>source code for the fragment shader</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                return: {\n                  description:\n                    'a shader object created from the provided\\nvertex and fragment shaders.',\n                  type: 'p5.Shader'\n                },\n                example: [\n                  \"\\n<div modernizr='webgl'>\\n<code>\\n// the 'varying's are shared between both vertex & fragment shaders\\nlet varying = 'precision highp float; varying vec2 vPos;';\\n\\n// the vertex shader is called for each vertex\\nlet vs =\\n  varying +\\n  'attribute vec3 aPosition;' +\\n  'void main() { vPos = (gl_Position = vec4(aPosition,1.0)).xy; }';\\n\\n// the fragment shader is called for each pixel\\nlet fs =\\n  varying +\\n  'uniform vec2 p;' +\\n  'uniform float r;' +\\n  'const int I = 500;' +\\n  'void main() {' +\\n  '  vec2 c = p + vPos * r, z = c;' +\\n  '  float n = 0.0;' +\\n  '  for (int i = I; i > 0; i --) {' +\\n  '    if(z.x*z.x+z.y*z.y > 4.0) {' +\\n  '      n = float(i)/float(I);' +\\n  '      break;' +\\n  '    }' +\\n  '    z = vec2(z.x*z.x-z.y*z.y, 2.0*z.x*z.y) + c;' +\\n  '  }' +\\n  '  gl_FragColor = vec4(0.5-cos(n*17.0)/2.0,0.5-cos(n*13.0)/2.0,0.5-cos(n*23.0)/2.0,1.0);' +\\n  '}';\\n\\nlet mandel;\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n\\n  // create and initialize the shader\\n  mandel = createShader(vs, fs);\\n  shader(mandel);\\n  noStroke();\\n\\n  // 'p' is the center point of the Mandelbrot image\\n  mandel.setUniform('p', [-0.74364388703, 0.13182590421]);\\n}\\n\\nfunction draw() {\\n  // 'r' is the size of the image in Mandelbrot-space\\n  mandel.setUniform('r', 1.5 * exp(-6.5 * (1 + sin(millis() / 2000))));\\n  quad(-1, -1, 1, -1, 1, 1, -1, 1);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'zooming Mandelbrot set. a colorful, infinitely detailed fractal.',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Material'\n              },\n              {\n                file: 'src/webgl/material.js',\n                line: 181,\n                description:\n                  '<p>The <a href=\"#/p5/shader\">shader()</a> function lets the user provide a custom shader\\nto fill in shapes in WEBGL mode. Users can create their\\nown shaders by loading vertex and fragment shaders with\\n<a href=\"#/p5/loadShader\">loadShader()</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'shader',\n                chainable: 1,\n                params: [\n                  {\n                    name: 's',\n                    description:\n                      '<p>the desired <a href=\"#/p5.Shader\">p5.Shader</a> to use for rendering\\nshapes.</p>\\n',\n                    type: 'p5.Shader',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div modernizr='webgl'>\\n<code>\\n// Click within the image to toggle\\n// the shader used by the quad shape\\n// Note: for an alternative approach to the same example,\\n// involving changing uniforms please refer to:\\n// https://p5js.org/reference/#/p5.Shader/setUniform\\n\\nlet redGreen;\\nlet orangeBlue;\\nlet showRedGreen = false;\\n\\nfunction preload() {\\n  // note that we are using two instances\\n  // of the same vertex and fragment shaders\\n  redGreen = loadShader('assets/shader.vert', 'assets/shader-gradient.frag');\\n  orangeBlue = loadShader('assets/shader.vert', 'assets/shader-gradient.frag');\\n}\\n\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n\\n  // initialize the colors for redGreen shader\\n  shader(redGreen);\\n  redGreen.setUniform('colorCenter', [1.0, 0.0, 0.0]);\\n  redGreen.setUniform('colorBackground', [0.0, 1.0, 0.0]);\\n\\n  // initialize the colors for orangeBlue shader\\n  shader(orangeBlue);\\n  orangeBlue.setUniform('colorCenter', [1.0, 0.5, 0.0]);\\n  orangeBlue.setUniform('colorBackground', [0.226, 0.0, 0.615]);\\n\\n  noStroke();\\n}\\n\\nfunction draw() {\\n  // update the offset values for each shader,\\n  // moving orangeBlue in vertical and redGreen\\n  // in horizontal direction\\n  orangeBlue.setUniform('offset', [0, sin(millis() / 2000) + 1]);\\n  redGreen.setUniform('offset', [sin(millis() / 2000), 1]);\\n\\n  if (showRedGreen === true) {\\n    shader(redGreen);\\n  } else {\\n    shader(orangeBlue);\\n  }\\n  quad(-1, -1, 1, -1, 1, 1, -1, 1);\\n}\\n\\nfunction mouseClicked() {\\n  showRedGreen = !showRedGreen;\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'canvas toggles between a circular gradient of orange and blue vertically. and a circular gradient of red and green moving horizontally when mouse is clicked/pressed.',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Material'\n              },\n              {\n                file: 'src/webgl/material.js',\n                line: 272,\n                description:\n                  '<p>This function restores the default shaders in WEBGL mode. Code that runs\\nafter resetShader() will not be affected by previously defined\\nshaders. Should be run after <a href=\"#/p5/shader\">shader()</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'resetShader',\n                chainable: 1,\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Material'\n              },\n              {\n                file: 'src/webgl/material.js',\n                line: 285,\n                description:\n                  '<p>Normal material for geometry. You can view all\\npossible materials in this\\n<a href=\"https://p5js.org/examples/3d-materials.html\">example</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'normalMaterial',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  normalMaterial();\\n  sphere(40);\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'Red, green and blue gradient.',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Material'\n              },\n              {\n                file: 'src/webgl/material.js',\n                line: 322,\n                description:\n                  '<p>Texture for geometry.  You can view other possible materials in this\\n<a href=\"https://p5js.org/examples/3d-materials.html\">example</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'texture',\n                params: [\n                  {\n                    name: 'tex',\n                    description:\n                      '<p>2-dimensional graphics\\n                   to render as texture</p>\\n',\n                    type: 'p5.Image|p5.MediaElement|p5.Graphics'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/laDefense.jpg');\\n}\\n\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(0);\\n  rotateZ(frameCount * 0.01);\\n  rotateX(frameCount * 0.01);\\n  rotateY(frameCount * 0.01);\\n  //pass image as texture\\n  texture(img);\\n  box(200, 200, 200);\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet pg;\\n\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  pg = createGraphics(200, 200);\\n  pg.textSize(75);\\n}\\n\\nfunction draw() {\\n  background(0);\\n  pg.background(255);\\n  pg.text('hello!', 0, 100);\\n  //pass image as texture\\n  texture(pg);\\n  rotateX(0.5);\\n  noStroke();\\n  plane(50);\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\nlet vid;\\nfunction preload() {\\n  vid = createVideo('assets/fingers.mov');\\n  vid.hide();\\n}\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(0);\\n  //pass video frame as texture\\n  texture(vid);\\n  rect(-40, -40, 80, 80);\\n}\\n\\nfunction mousePressed() {\\n  vid.loop();\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'Rotating view of many images umbrella and grid roof on a 3d plane\\nblack canvas\\nblack canvas',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Material'\n              },\n              {\n                file: 'src/webgl/material.js',\n                line: 419,\n                description:\n                  '<p>Sets the coordinate space for texture mapping. The default mode is IMAGE\\nwhich refers to the actual coordinates of the image.\\nNORMAL refers to a normalized space of values ranging from 0 to 1.\\nThis function only works in WEBGL mode.</p>\\n<p>With IMAGE, if an image is 100 x 200 pixels, mapping the image onto the entire\\nsize of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\\nThe same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).</p>\\n',\n                itemtype: 'method',\n                name: 'textureMode',\n                params: [\n                  {\n                    name: 'mode',\n                    description: '<p>either IMAGE or NORMAL</p>\\n',\n                    type: 'Constant'\n                  }\n                ],\n                example: [\n                  \"\\n<div>\\n<code>\\nlet img;\\n\\nfunction preload() {\\n  img = loadImage('assets/laDefense.jpg');\\n}\\n\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  texture(img);\\n  textureMode(NORMAL);\\n  beginShape();\\n  vertex(-50, -50, 0, 0);\\n  vertex(50, -50, 1, 0);\\n  vertex(50, 50, 1, 1);\\n  vertex(-50, 50, 0, 1);\\n  endShape();\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'the underside of a white umbrella and gridded ceiling above',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Material'\n              },\n              {\n                file: 'src/webgl/material.js',\n                line: 498,\n                description:\n                  '<p>Sets the global texture wrapping mode. This controls how textures behave\\nwhen their uv&#39;s go outside of the 0 - 1 range. There are three options:\\nCLAMP, REPEAT, and MIRROR.</p>\\n<p>CLAMP causes the pixels at the edge of the texture to extend to the bounds\\nREPEAT causes the texture to tile repeatedly until reaching the bounds\\nMIRROR works similarly to REPEAT but it flips the texture with every new tile</p>\\n<p>REPEAT &amp; MIRROR are only available if the texture\\nis a power of two size (128, 256, 512, 1024, etc.).</p>\\n<p>This method will affect all textures in your sketch until a subsequent\\ntextureWrap call is made.</p>\\n<p>If only one argument is provided, it will be applied to both the\\nhorizontal and vertical axes.</p>\\n',\n                itemtype: 'method',\n                name: 'textureWrap',\n                params: [\n                  {\n                    name: 'wrapX',\n                    description: '<p>either CLAMP, REPEAT, or MIRROR</p>\\n',\n                    type: 'Constant'\n                  },\n                  {\n                    name: 'wrapY',\n                    description: '<p>either CLAMP, REPEAT, or MIRROR</p>\\n',\n                    type: 'Constant',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div>\\n<code>\\nlet img;\\nfunction preload() {\\n  img = loadImage('assets/rockies128.jpg');\\n}\\n\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  textureWrap(MIRROR);\\n}\\n\\nfunction draw() {\\n  background(0);\\n\\n  let dX = mouseX;\\n  let dY = mouseY;\\n\\n  let u = lerp(1.0, 2.0, dX);\\n  let v = lerp(1.0, 2.0, dY);\\n\\n  scale(width / 2);\\n\\n  texture(img);\\n\\n  beginShape(TRIANGLES);\\n  vertex(-1, -1, 0, 0, 0);\\n  vertex(1, -1, 0, u, 0);\\n  vertex(1, 1, 0, u, v);\\n\\n  vertex(1, 1, 0, u, v);\\n  vertex(-1, 1, 0, 0, v);\\n  vertex(-1, -1, 0, 0, 0);\\n  endShape();\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'an image of the rocky mountains repeated in mirrored tiles',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Material'\n              },\n              {\n                file: 'src/webgl/material.js',\n                line: 573,\n                description:\n                  '<p>Ambient material for geometry with a given color. You can view all\\npossible materials in this\\n<a href=\"https://p5js.org/examples/3d-materials.html\">example</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'ambientMaterial',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\nfunction draw() {\\n  background(0);\\n  noStroke();\\n  ambientLight(200);\\n  ambientMaterial(70, 130, 230);\\n  sphere(40);\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'radiating light source from top right of canvas',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Material',\n                overloads: [\n                  {\n                    line: 573,\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>gray value, red or hue value\\n                        (depending on the current color mode),</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description: '<p>green or saturation value</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'v3',\n                        description: '<p>blue or brightness value</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'a',\n                        description: '<p>opacity</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 604,\n                    params: [\n                      {\n                        name: 'color',\n                        description: '<p>color, color Array, or CSS color string</p>\\n',\n                        type: 'Number[]|String|p5.Color'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/webgl/material.js',\n                line: 623,\n                description:\n                  '<p>Specular material for geometry with a given color. You can view all\\npossible materials in this\\n<a href=\"https://p5js.org/examples/3d-materials.html\">example</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'specularMaterial',\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\nfunction draw() {\\n  background(0);\\n  noStroke();\\n  ambientLight(50);\\n  pointLight(250, 250, 250, 100, 100, 30);\\n  specularMaterial(250);\\n  sphere(40);\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'diffused radiating light source from top right of canvas',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Material',\n                overloads: [\n                  {\n                    line: 623,\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>gray value, red or hue value\\n                      (depending on the current color mode),</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description: '<p>green or saturation value</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'v3',\n                        description: '<p>blue or brightness value</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'a',\n                        description: '<p>opacity</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    line: 655,\n                    params: [\n                      {\n                        name: 'color',\n                        description: '<p>color Array, or CSS color string</p>\\n',\n                        type: 'Number[]|String|p5.Color'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'src/webgl/material.js',\n                line: 674,\n                description:\n                  '<p>Sets the amount of gloss in the surface of shapes.\\nUsed in combination with specularMaterial() in setting\\nthe material properties of shapes. The default and minimum value is 1.</p>\\n',\n                itemtype: 'method',\n                name: 'shininess',\n                params: [\n                  {\n                    name: 'shine',\n                    description:\n                      '<p>Degree of Shininess.\\n                      Defaults to 1.</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\nfunction draw() {\\n  background(0);\\n  noStroke();\\n  let locX = mouseX - width / 2;\\n  let locY = mouseY - height / 2;\\n  ambientLight(60, 60, 60);\\n  pointLight(255, 255, 255, locX, locY, 50);\\n  specularMaterial(250);\\n  translate(-25, 0, 0);\\n  shininess(1);\\n  sphere(20);\\n  translate(50, 0, 0);\\n  shininess(20);\\n  sphere(20);\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'Shininess on Camera changes position with mouse',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Material'\n              },\n              {\n                file: 'src/webgl/p5.Camera.js',\n                line: 15,\n                description:\n                  '<p>Sets the camera position for a 3D sketch. Parameters for this function define\\nthe position for the camera, the center of the sketch (where the camera is\\npointing), and an up direction (the orientation of the camera).</p>\\n<p>When called with no arguments, this function creates a default camera\\nequivalent to\\ncamera(0, 0, (height/2.0) / tan(PI*30.0 / 180.0), 0, 0, 0, 0, 1, 0);</p>\\n',\n                itemtype: 'method',\n                name: 'camera',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>camera position value on x axis</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>camera position value on y axis</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'z',\n                    description: '<p>camera position value on z axis</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'centerX',\n                    description: '<p>x coordinate representing center of the sketch</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'centerY',\n                    description: '<p>y coordinate representing center of the sketch</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'centerZ',\n                    description: '<p>z coordinate representing center of the sketch</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'upX',\n                    description:\n                      '<p>x component of direction &#39;up&#39; from camera</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'upY',\n                    description:\n                      '<p>y component of direction &#39;up&#39; from camera</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'upZ',\n                    description:\n                      '<p>z component of direction &#39;up&#39; from camera</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  '\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\nfunction draw() {\\n  background(204);\\n  //move the camera away from the plane by a sin wave\\n  camera(0, 0, 20 + sin(frameCount * 0.01) * 10, 0, 0, 0, 0, 1, 0);\\n  plane(10, 10);\\n}\\n</code>\\n</div>'\n                ],\n                alt: 'White square repeatedly grows to fill canvas and then shrinks.',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Camera'\n              },\n              {\n                file: 'src/webgl/p5.Camera.js',\n                line: 61,\n                description:\n                  '<p>Sets a perspective projection for the camera in a 3D sketch. This projection\\nrepresents depth through foreshortening: objects that are close to the camera\\nappear their actual size while those that are further away from the camera\\nappear smaller. The parameters to this function define the viewing frustum\\n(the truncated pyramid within which objects are seen by the camera) through\\nvertical field of view, aspect ratio (usually width/height), and near and far\\nclipping planes.</p>\\n<p>When called with no arguments, the defaults\\nprovided are equivalent to\\nperspective(PI/3.0, width/height, eyeZ/10.0, eyeZ<em>10.0), where eyeZ\\nis equal to ((height/2.0) / tan(PI</em>60.0/360.0));</p>\\n',\n                itemtype: 'method',\n                name: 'perspective',\n                params: [\n                  {\n                    name: 'fovy',\n                    description:\n                      '<p>camera frustum vertical field of view,\\n                          from bottom to top of view, in <a href=\"#/p5/angleMode\">angleMode</a> units</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'aspect',\n                    description: '<p>camera frustum aspect ratio</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'near',\n                    description: '<p>frustum near plane length</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'far',\n                    description: '<p>frustum far plane length</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div>\\n<code>\\n//drag the mouse to look around!\\n//you will see there's a vanishing point\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  perspective(PI / 3.0, width / height, 0.1, 500);\\n}\\nfunction draw() {\\n  background(200);\\n  orbitControl();\\n  normalMaterial();\\n\\n  rotateX(-0.3);\\n  rotateY(-0.2);\\n  translate(0, 0, -50);\\n\\n  push();\\n  translate(-15, 0, sin(frameCount / 30) * 95);\\n  box(30);\\n  pop();\\n  push();\\n  translate(15, 0, sin(frameCount / 30 + PI) * 95);\\n  box(30);\\n  pop();\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'two colored 3D boxes move back and forth, rotating as mouse is dragged.',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Camera'\n              },\n              {\n                file: 'src/webgl/p5.Camera.js',\n                line: 126,\n                description:\n                  '<p>Sets an orthographic projection for the camera in a 3D sketch and defines a\\nbox-shaped viewing frustum within which objects are seen. In this projection,\\nall objects with the same dimension appear the same size, regardless of\\nwhether they are near or far from the camera. The parameters to this\\nfunction specify the viewing frustum where left and right are the minimum and\\nmaximum x values, top and bottom are the minimum and maximum y values, and near\\nand far are the minimum and maximum z values. If no parameters are given, the\\ndefault is used: ortho(-width/2, width/2, -height/2, height/2).</p>\\n',\n                itemtype: 'method',\n                name: 'ortho',\n                params: [\n                  {\n                    name: 'left',\n                    description: '<p>camera frustum left plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'right',\n                    description: '<p>camera frustum right plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'bottom',\n                    description: '<p>camera frustum bottom plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'top',\n                    description: '<p>camera frustum top plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'near',\n                    description: '<p>camera frustum near plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'far',\n                    description: '<p>camera frustum far plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div>\\n<code>\\n//drag the mouse to look around!\\n//there's no vanishing point\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  ortho(-width / 2, width / 2, height / 2, -height / 2, 0, 500);\\n}\\nfunction draw() {\\n  background(200);\\n  orbitControl();\\n  normalMaterial();\\n\\n  rotateX(0.2);\\n  rotateY(-0.2);\\n  push();\\n  translate(-15, 0, sin(frameCount / 30) * 65);\\n  box(30);\\n  pop();\\n  push();\\n  translate(15, 0, sin(frameCount / 30 + PI) * 65);\\n  box(30);\\n  pop();\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'two 3D boxes move back and forth along same plane, rotating as mouse is dragged.',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Camera'\n              },\n              {\n                file: 'src/webgl/p5.Camera.js',\n                line: 187,\n                description:\n                  '<p>Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and tells the\\nrenderer to use that camera.\\nReturns the p5.Camera object.</p>\\n',\n                itemtype: 'method',\n                name: 'createCamera',\n                return: {\n                  description: 'The newly created camera object.',\n                  type: 'p5.Camera'\n                },\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Camera'\n              },\n              {\n                file: 'src/webgl/p5.Camera.js',\n                line: 298,\n                description:\n                  '<p>Sets a perspective projection for a p5.Camera object and sets parameters\\nfor that projection according to <a href=\"#/p5/perspective\">perspective()</a>\\nsyntax.</p>\\n',\n                itemtype: 'method',\n                name: 'perspective',\n                class: 'p5.Camera',\n                module: 'Lights, Camera',\n                submodule: 'Camera'\n              },\n              {\n                file: 'src/webgl/p5.Camera.js',\n                line: 379,\n                description:\n                  '<p>Sets an orthographic projection for a p5.Camera object and sets parameters\\nfor that projection according to <a href=\"#/p5/ortho\">ortho()</a> syntax.</p>\\n',\n                itemtype: 'method',\n                name: 'ortho',\n                class: 'p5.Camera',\n                module: 'Lights, Camera',\n                submodule: 'Camera'\n              },\n              {\n                file: 'src/webgl/p5.Camera.js',\n                line: 486,\n                description:\n                  '<p>Panning rotates the camera view to the left and right.</p>\\n',\n                itemtype: 'method',\n                name: 'pan',\n                params: [\n                  {\n                    name: 'angle',\n                    description:\n                      '<p>amount to rotate camera in current\\n<a href=\"#/p5/angleMode\">angleMode</a> units.\\nGreater than 0 values rotate counterclockwise (to the left).</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  \"\\n<div>\\n<code>\\nlet cam;\\nlet delta = 0.01;\\n\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  normalMaterial();\\n  cam = createCamera();\\n  // set initial pan angle\\n  cam.pan(-0.8);\\n}\\n\\nfunction draw() {\\n  background(200);\\n\\n  // pan camera according to angle 'delta'\\n  cam.pan(delta);\\n\\n  // every 160 frames, switch direction\\n  if (frameCount % 160 === 0) {\\n    delta *= -1;\\n  }\\n\\n  rotateX(frameCount * 0.01);\\n  translate(-100, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'camera view pans left and right across a series of rotating 3D boxes.',\n                class: 'p5.Camera',\n                module: 'Lights, Camera',\n                submodule: 'Camera'\n              },\n              {\n                file: 'src/webgl/p5.Camera.js',\n                line: 545,\n                description: '<p>Tilting rotates the camera view up and down.</p>\\n',\n                itemtype: 'method',\n                name: 'tilt',\n                params: [\n                  {\n                    name: 'angle',\n                    description:\n                      '<p>amount to rotate camera in current\\n<a href=\"#/p5/angleMode\">angleMode</a> units.\\nGreater than 0 values rotate counterclockwise (to the left).</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  \"\\n<div>\\n<code>\\nlet cam;\\nlet delta = 0.01;\\n\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  normalMaterial();\\n  cam = createCamera();\\n  // set initial tilt\\n  cam.tilt(-0.8);\\n}\\n\\nfunction draw() {\\n  background(200);\\n\\n  // pan camera according to angle 'delta'\\n  cam.tilt(delta);\\n\\n  // every 160 frames, switch direction\\n  if (frameCount % 160 === 0) {\\n    delta *= -1;\\n  }\\n\\n  rotateY(frameCount * 0.01);\\n  translate(0, -100, 0);\\n  box(20);\\n  translate(0, 35, 0);\\n  box(20);\\n  translate(0, 35, 0);\\n  box(20);\\n  translate(0, 35, 0);\\n  box(20);\\n  translate(0, 35, 0);\\n  box(20);\\n  translate(0, 35, 0);\\n  box(20);\\n  translate(0, 35, 0);\\n  box(20);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'camera view tilts up and down across a series of rotating 3D boxes.',\n                class: 'p5.Camera',\n                module: 'Lights, Camera',\n                submodule: 'Camera'\n              },\n              {\n                file: 'src/webgl/p5.Camera.js',\n                line: 603,\n                description:\n                  '<p>Reorients the camera to look at a position in world space.</p>\\n',\n                itemtype: 'method',\n                name: 'lookAt',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>x position of a point in world space</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y position of a point in world space</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'z',\n                    description: '<p>z position of a point in world space</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\nlet cam;\\n\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  normalMaterial();\\n  cam = createCamera();\\n}\\n\\nfunction draw() {\\n  background(200);\\n\\n  // look at a new random point every 60 frames\\n  if (frameCount % 60 === 0) {\\n    cam.lookAt(random(-100, 100), random(-50, 50), 0);\\n  }\\n\\n  rotateX(frameCount * 0.01);\\n  translate(-100, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'camera view of rotating 3D cubes changes to look at a new random\\npoint every second .',\n                class: 'p5.Camera',\n                module: 'Lights, Camera',\n                submodule: 'Camera'\n              },\n              {\n                file: 'src/webgl/p5.Camera.js',\n                line: 670,\n                description:\n                  '<p>Sets a camera&#39;s position and orientation.  This is equivalent to calling\\n<a href=\"#/p5/camera\">camera()</a> on a p5.Camera object.</p>\\n',\n                itemtype: 'method',\n                name: 'camera',\n                class: 'p5.Camera',\n                module: 'Lights, Camera',\n                submodule: 'Camera'\n              },\n              {\n                file: 'src/webgl/p5.Camera.js',\n                line: 751,\n                description:\n                  '<p>Move camera along its local axes while maintaining current camera orientation.</p>\\n',\n                itemtype: 'method',\n                name: 'move',\n                params: [\n                  {\n                    name: 'x',\n                    description:\n                      '<p>amount to move along camera&#39;s left-right axis</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>amount to move along camera&#39;s up-down axis</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'z',\n                    description:\n                      '<p>amount to move along camera&#39;s forward-backward axis</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\n// see the camera move along its own axes while maintaining its orientation\\nlet cam;\\nlet delta = 0.5;\\n\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  normalMaterial();\\n  cam = createCamera();\\n}\\n\\nfunction draw() {\\n  background(200);\\n\\n  // move the camera along its local axes\\n  cam.move(delta, delta, 0);\\n\\n  // every 100 frames, switch direction\\n  if (frameCount % 150 === 0) {\\n    delta *= -1;\\n  }\\n\\n  translate(-10, -10, 0);\\n  box(50, 8, 50);\\n  translate(15, 15, 0);\\n  box(50, 8, 50);\\n  translate(15, 15, 0);\\n  box(50, 8, 50);\\n  translate(15, 15, 0);\\n  box(50, 8, 50);\\n  translate(15, 15, 0);\\n  box(50, 8, 50);\\n  translate(15, 15, 0);\\n  box(50, 8, 50);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'camera view moves along a series of 3D boxes, maintaining the same\\norientation throughout the move',\n                class: 'p5.Camera',\n                module: 'Lights, Camera',\n                submodule: 'Camera'\n              },\n              {\n                file: 'src/webgl/p5.Camera.js',\n                line: 823,\n                description:\n                  '<p>Set camera position in world-space while maintaining current camera\\norientation.</p>\\n',\n                itemtype: 'method',\n                name: 'setPosition',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>x position of a point in world space</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y position of a point in world space</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'z',\n                    description: '<p>z position of a point in world space</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  \"\\n<div>\\n<code>\\n// press '1' '2' or '3' keys to set camera position\\n\\nlet cam;\\n\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  normalMaterial();\\n  cam = createCamera();\\n}\\n\\nfunction draw() {\\n  background(200);\\n\\n  // '1' key\\n  if (keyIsDown(49)) {\\n    cam.setPosition(30, 0, 80);\\n  }\\n  // '2' key\\n  if (keyIsDown(50)) {\\n    cam.setPosition(0, 0, 80);\\n  }\\n  // '3' key\\n  if (keyIsDown(51)) {\\n    cam.setPosition(-30, 0, 80);\\n  }\\n\\n  box(20);\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'camera position changes as the user presses keys, altering view of a 3D box',\n                class: 'p5.Camera',\n                module: 'Lights, Camera',\n                submodule: 'Camera'\n              },\n              {\n                file: 'src/webgl/p5.Camera.js',\n                line: 1088,\n                description:\n                  '<p>Sets rendererGL&#39;s current camera to a p5.Camera object.  Allows switching\\nbetween multiple cameras.</p>\\n',\n                itemtype: 'method',\n                name: 'setCamera',\n                params: [\n                  {\n                    name: 'cam',\n                    description: '<p>p5.Camera object</p>\\n',\n                    type: 'p5.Camera'\n                  }\n                ],\n                example: [\n                  '\\n<div>\\n<code>\\nlet cam1, cam2;\\nlet currentCamera;\\n\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  normalMaterial();\\n\\n  cam1 = createCamera();\\n  cam2 = createCamera();\\n  cam2.setPosition(30, 0, 50);\\n  cam2.lookAt(0, 0, 0);\\n  cam2.ortho();\\n\\n  // set variable for previously active camera:\\n  currentCamera = 1;\\n}\\n\\nfunction draw() {\\n  background(200);\\n\\n  // camera 1:\\n  cam1.lookAt(0, 0, 0);\\n  cam1.setPosition(sin(frameCount / 60) * 200, 0, 100);\\n\\n  // every 100 frames, switch between the two cameras\\n  if (frameCount % 100 === 0) {\\n    if (currentCamera === 1) {\\n      setCamera(cam1);\\n      currentCamera = 0;\\n    } else {\\n      setCamera(cam2);\\n      currentCamera = 1;\\n    }\\n  }\\n\\n  drawBoxes();\\n}\\n\\nfunction drawBoxes() {\\n  rotateX(frameCount * 0.01);\\n  translate(-100, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n  translate(35, 0, 0);\\n  box(20);\\n}\\n</code>\\n</div>'\n                ],\n                alt:\n                  'Canvas switches between two camera views, each showing a series of spinning\\n3D boxes.',\n                class: 'p5',\n                module: 'Lights, Camera',\n                submodule: 'Camera'\n              },\n              {\n                file: 'src/webgl/p5.Geometry.js',\n                line: 66,\n                itemtype: 'method',\n                name: 'computeFaces',\n                chainable: 1,\n                class: 'p5.Geometry',\n                module: 'Lights, Camera'\n              },\n              {\n                file: 'src/webgl/p5.Geometry.js',\n                line: 108,\n                description:\n                  '<p>computes smooth normals per vertex as an average of each\\nface.</p>\\n',\n                itemtype: 'method',\n                name: 'computeNormals',\n                chainable: 1,\n                class: 'p5.Geometry',\n                module: 'Lights, Camera'\n              },\n              {\n                file: 'src/webgl/p5.Geometry.js',\n                line: 147,\n                description:\n                  '<p>Averages the vertex normals. Used in curved\\nsurfaces</p>\\n',\n                itemtype: 'method',\n                name: 'averageNormals',\n                chainable: 1,\n                class: 'p5.Geometry',\n                module: 'Lights, Camera'\n              },\n              {\n                file: 'src/webgl/p5.Geometry.js',\n                line: 168,\n                description:\n                  '<p>Averages pole normals.  Used in spherical primitives</p>\\n',\n                itemtype: 'method',\n                name: 'averagePoleNormals',\n                chainable: 1,\n                class: 'p5.Geometry',\n                module: 'Lights, Camera'\n              },\n              {\n                file: 'src/webgl/p5.Geometry.js',\n                line: 261,\n                description:\n                  '<p>Modifies all vertices to be centered within the range -100 to 100.</p>\\n',\n                itemtype: 'method',\n                name: 'normalize',\n                chainable: 1,\n                class: 'p5.Geometry',\n                module: 'Lights, Camera'\n              },\n              {\n                file: 'src/webgl/p5.RendererGL.js',\n                line: 263,\n                description:\n                  '<p>Set attributes for the WebGL Drawing context.\\nThis is a way of adjusting how the WebGL\\nrenderer works to fine-tune the display and performance.\\n<br><br>\\nNote that this will reinitialize the drawing context\\nif called after the WebGL canvas is made.\\n<br><br>\\nIf an object is passed as the parameter, all attributes\\nnot declared in the object will be set to defaults.\\n<br><br>\\nThe available attributes are:\\n<br>\\nalpha - indicates if the canvas contains an alpha buffer\\ndefault is true\\n<br><br>\\ndepth - indicates whether the drawing buffer has a depth buffer\\nof at least 16 bits - default is true\\n<br><br>\\nstencil - indicates whether the drawing buffer has a stencil buffer\\nof at least 8 bits\\n<br><br>\\nantialias - indicates whether or not to perform anti-aliasing\\ndefault is false\\n<br><br>\\npremultipliedAlpha - indicates that the page compositor will assume\\nthe drawing buffer contains colors with pre-multiplied alpha\\ndefault is false\\n<br><br>\\npreserveDrawingBuffer - if true the buffers will not be cleared and\\nand will preserve their values until cleared or overwritten by author\\n(note that p5 clears automatically on draw loop)\\ndefault is true\\n<br><br>\\nperPixelLighting - if true, per-pixel lighting will be used in the\\nlighting shader.\\ndefault is false\\n<br><br></p>\\n',\n                itemtype: 'method',\n                name: 'setAttributes',\n                example: [\n                  \"\\n<div>\\n<code>\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(255);\\n  push();\\n  rotateZ(frameCount * 0.02);\\n  rotateX(frameCount * 0.02);\\n  rotateY(frameCount * 0.02);\\n  fill(0, 0, 0);\\n  box(50);\\n  pop();\\n}\\n</code>\\n</div>\\n<br>\\nNow with the antialias attribute set to true.\\n<br>\\n<div>\\n<code>\\nfunction setup() {\\n  setAttributes('antialias', true);\\n  createCanvas(100, 100, WEBGL);\\n}\\n\\nfunction draw() {\\n  background(255);\\n  push();\\n  rotateZ(frameCount * 0.02);\\n  rotateX(frameCount * 0.02);\\n  rotateY(frameCount * 0.02);\\n  fill(0, 0, 0);\\n  box(50);\\n  pop();\\n}\\n</code>\\n</div>\\n\\n<div>\\n<code>\\n// press the mouse button to enable perPixelLighting\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  noStroke();\\n  fill(255);\\n}\\n\\nvar lights = [\\n  { c: '#f00', t: 1.12, p: 1.91, r: 0.2 },\\n  { c: '#0f0', t: 1.21, p: 1.31, r: 0.2 },\\n  { c: '#00f', t: 1.37, p: 1.57, r: 0.2 },\\n  { c: '#ff0', t: 1.12, p: 1.91, r: 0.7 },\\n  { c: '#0ff', t: 1.21, p: 1.31, r: 0.7 },\\n  { c: '#f0f', t: 1.37, p: 1.57, r: 0.7 }\\n];\\n\\nfunction draw() {\\n  var t = millis() / 1000 + 1000;\\n  background(0);\\n  directionalLight(color('#222'), 1, 1, 1);\\n\\n  for (var i = 0; i < lights.length; i++) {\\n    var light = lights[i];\\n    pointLight(\\n      color(light.c),\\n      p5.Vector.fromAngles(t * light.t, t * light.p, width * light.r)\\n    );\\n  }\\n\\n  specularMaterial(255);\\n  sphere(width * 0.1);\\n\\n  rotateX(t * 0.77);\\n  rotateY(t * 0.83);\\n  rotateZ(t * 0.91);\\n  torus(width * 0.3, width * 0.07, 24, 10);\\n}\\n\\nfunction mousePressed() {\\n  setAttributes('perPixelLighting', true);\\n  noStroke();\\n  fill(255);\\n}\\nfunction mouseReleased() {\\n  setAttributes('perPixelLighting', false);\\n  noStroke();\\n  fill(255);\\n}\\n</code>\\n</div>\"\n                ],\n                alt: 'a rotating cube with smoother edges',\n                class: 'p5',\n                module: 'Rendering',\n                submodule: 'Rendering',\n                overloads: [\n                  {\n                    line: 263,\n                    params: [\n                      {\n                        name: 'key',\n                        description: '<p>Name of attribute</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'value',\n                        description: '<p>New value of named attribute</p>\\n',\n                        type: 'Boolean'\n                      }\n                    ]\n                  },\n                  {\n                    line: 402,\n                    params: [\n                      {\n                        name: 'obj',\n                        description: '<p>object with key-value pairs</p>\\n',\n                        type: 'Object'\n                      }\n                    ]\n                  }\n                ]\n              },\n              {\n                file: 'src/webgl/p5.Shader.js',\n                line: 269,\n                description:\n                  '<p>Wrapper around gl.uniform functions.\\nAs we store uniform info in the shader we can use that\\nto do type checking on the supplied data and call\\nthe appropriate function.</p>\\n',\n                itemtype: 'method',\n                name: 'setUniform',\n                chainable: 1,\n                params: [\n                  {\n                    name: 'uniformName',\n                    description: '<p>the name of the uniform in the\\nshader program</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'data',\n                    description:\n                      '<p>the data to be associated\\nwith that uniform; type varies (could be a single numerical value, array,\\nmatrix, or texture / sampler reference)</p>\\n',\n                    type: 'Object|Number|Boolean|Number[]'\n                  }\n                ],\n                example: [\n                  \"\\n<div modernizr='webgl'>\\n<code>\\n// Click within the image to toggle the value of uniforms\\n// Note: for an alternative approach to the same example,\\n// involving toggling between shaders please refer to:\\n// https://p5js.org/reference/#/p5/shader\\n\\nlet grad;\\nlet showRedGreen = false;\\n\\nfunction preload() {\\n  // note that we are using two instances\\n  // of the same vertex and fragment shaders\\n  grad = loadShader('assets/shader.vert', 'assets/shader-gradient.frag');\\n}\\n\\nfunction setup() {\\n  createCanvas(100, 100, WEBGL);\\n  shader(grad);\\n  noStroke();\\n}\\n\\nfunction draw() {\\n  // update the offset values for each scenario,\\n  // moving the \\\"grad\\\" shader in either vertical or\\n  // horizontal direction each with differing colors\\n\\n  if (showRedGreen === true) {\\n    grad.setUniform('colorCenter', [1, 0, 0]);\\n    grad.setUniform('colorBackground', [0, 1, 0]);\\n    grad.setUniform('offset', [sin(millis() / 2000), 1]);\\n  } else {\\n    grad.setUniform('colorCenter', [1, 0.5, 0]);\\n    grad.setUniform('colorBackground', [0.226, 0, 0.615]);\\n    grad.setUniform('offset', [0, sin(millis() / 2000) + 1]);\\n  }\\n  quad(-1, -1, 1, -1, 1, 1, -1, 1);\\n}\\n\\nfunction mouseClicked() {\\n  showRedGreen = !showRedGreen;\\n}\\n</code>\\n</div>\"\n                ],\n                alt:\n                  'canvas toggles between a circular gradient of orange and blue vertically. and a circular gradient of red and green moving horizontally when mouse is clicked/pressed.',\n                class: 'p5.Shader',\n                module: 'Lights, Camera',\n                submodule: 'Shaders'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 40,\n                description:\n                  '<p>Searches the page for an element with the given ID, class, or tag name (using the &#39;#&#39; or &#39;.&#39;\\nprefixes to specify an ID or class respectively, and none for a tag) and returns it as\\na <a href=\"#/p5.Element\">p5.Element</a>. If a class or tag name is given with more than 1 element,\\nonly the first element will be returned.\\nThe DOM node itself can be accessed with .elt.\\nReturns null if none found. You can also specify a container to search within.</p>\\n',\n                itemtype: 'method',\n                name: 'select',\n                params: [\n                  {\n                    name: 'name',\n                    description: '<p>id, class, or tag name of element to search for</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'container',\n                    description:\n                      '<p>id, <a href=\"#/p5.Element\">p5.Element</a>, or\\n                                            HTML element to search within</p>\\n',\n                    type: 'String|p5.Element|HTMLElement',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    '<a href=\"#/p5.Element\">p5.Element</a> containing node found',\n                  type: 'p5.Element|null'\n                },\n                example: [\n                  \"\\n<div ><code class='norender'>\\nfunction setup() {\\n  createCanvas(100, 100);\\n  //translates canvas 50px down\\n  select('canvas').position(100, 100);\\n}\\n</code></div>\\n<div><code class='norender'>\\n// these are all valid calls to select()\\nvar a = select('#moo');\\nvar b = select('#blah', '#myContainer');\\nvar c, e;\\nif (b) {\\n  c = select('#foo', b);\\n}\\nvar d = document.getElementById('beep');\\nif (d) {\\n  e = select('p', d);\\n}\\n[a, b, c, d, e]; // unused\\n</code></div>\\n\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 107,\n                description:\n                  '<p>Searches the page for elements with the given class or tag name (using the &#39;.&#39; prefix\\nto specify a class and no prefix for a tag) and returns them as <a href=\"#/p5.Element\">p5.Element</a>s\\nin an array.\\nThe DOM node itself can be accessed with .elt.\\nReturns an empty array if none found.\\nYou can also specify a container to search within.</p>\\n',\n                itemtype: 'method',\n                name: 'selectAll',\n                params: [\n                  {\n                    name: 'name',\n                    description: '<p>class or tag name of elements to search for</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'container',\n                    description:\n                      '<p>id, <a href=\"#/p5.Element\">p5.Element</a>, or HTML element to search within</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'Array of <a href=\"#/p5.Element\">p5.Element</a>s containing nodes found',\n                  type: 'p5.Element[]'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\nfunction setup() {\\n  createButton('btn');\\n  createButton('2nd btn');\\n  createButton('3rd btn');\\n  var buttons = selectAll('button');\\n\\n  for (var i = 0; i < buttons.length; i++) {\\n    buttons[i].size(100, 100);\\n  }\\n}\\n</code></div>\\n<div class='norender'><code>\\n// these are all valid calls to selectAll()\\nvar a = selectAll('.moo');\\na = selectAll('div');\\na = selectAll('button', '#myContainer');\\n\\nvar d = select('#container');\\na = selectAll('p', d);\\n\\nvar f = document.getElementById('beep');\\na = select('.blah', f);\\n\\na; // unused\\n</code></div>\\n\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 168,\n                description: '<p>Helper function for select and selectAll</p>\\n',\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 184,\n                description: '<p>Helper function for getElement and getElements.</p>\\n',\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 218,\n                description:\n                  '<p>Removes all elements created by p5, except any canvas / graphics\\nelements created by <a href=\"#/p5/createCanvas\">createCanvas</a> or <a href=\"#/p5/createGraphics\">createGraphics</a>.\\nEvent handlers are removed, and element is removed from the DOM.</p>\\n',\n                itemtype: 'method',\n                name: 'removeElements',\n                example: [\n                  \"\\n<div class='norender'><code>\\nfunction setup() {\\n  createCanvas(100, 100);\\n  createDiv('this is some text');\\n  createP('this is a paragraph');\\n}\\nfunction mousePressed() {\\n  removeElements(); // this will remove the div and p, not canvas\\n}\\n</code></div>\\n\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 245,\n                description:\n                  '<p>The .<a href=\"#/p5.Element/changed\">changed()</a> function is called when the value of an\\nelement changes.\\nThis can be used to attach an element specific event listener.</p>\\n',\n                itemtype: 'method',\n                name: 'changed',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when the value of\\n                               an element changes.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div><code>\\nvar sel;\\n\\nfunction setup() {\\n  textAlign(CENTER);\\n  background(200);\\n  sel = createSelect();\\n  sel.position(10, 10);\\n  sel.option('pear');\\n  sel.option('kiwi');\\n  sel.option('grape');\\n  sel.changed(mySelectEvent);\\n}\\n\\nfunction mySelectEvent() {\\n  var item = sel.value();\\n  background(200);\\n  text(\\\"it's a \\\" + item + '!', 50, 50);\\n}\\n</code></div>\\n\\n<div><code>\\nvar checkbox;\\nvar cnv;\\n\\nfunction setup() {\\n  checkbox = createCheckbox(' fill');\\n  checkbox.changed(changeFill);\\n  cnv = createCanvas(100, 100);\\n  cnv.position(0, 30);\\n  noFill();\\n}\\n\\nfunction draw() {\\n  background(200);\\n  ellipse(50, 50, 50, 50);\\n}\\n\\nfunction changeFill() {\\n  if (checkbox.checked()) {\\n    fill(0);\\n  } else {\\n    noFill();\\n  }\\n}\\n</code></div>\"\n                ],\n                alt:\n                  'dropdown: pear, kiwi, grape. When selected text \"its a\" + selection shown.',\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 313,\n                description:\n                  '<p>The .<a href=\"#/p5.Element/input\">input()</a> function is called when any user input is\\ndetected with an element. The input event is often used\\nto detect keystrokes in a input element, or changes on a\\nslider element. This can be used to attach an element specific\\nevent listener.</p>\\n',\n                itemtype: 'method',\n                name: 'input',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when any user input is\\n                               detected within the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div class='norender'><code>\\n// Open your console to see the output\\nfunction setup() {\\n  var inp = createInput('');\\n  inp.input(myInputEvent);\\n}\\n\\nfunction myInputEvent() {\\n  console.log('you are typing: ', this.value());\\n}\\n</code></div>\"\n                ],\n                alt: 'no display.',\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 348,\n                description: '<p>Helpers for create methods.</p>\\n',\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 361,\n                description:\n                  '<p>Creates a &lt;div&gt;&lt;/div&gt; element in the DOM with given inner HTML.\\nAppends to the container node if one is specified, otherwise\\nappends to body.</p>\\n',\n                itemtype: 'method',\n                name: 'createDiv',\n                params: [\n                  {\n                    name: 'html',\n                    description: '<p>inner HTML for element created</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node',\n                  type: 'p5.Element'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\ncreateDiv('this is some text');\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 375,\n                description:\n                  '<p>Creates a &lt;p&gt;&lt;/p&gt; element in the DOM with given inner HTML. Used\\nfor paragraph length text.\\nAppends to the container node if one is specified, otherwise\\nappends to body.</p>\\n',\n                itemtype: 'method',\n                name: 'createP',\n                params: [\n                  {\n                    name: 'html',\n                    description: '<p>inner HTML for element created</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node',\n                  type: 'p5.Element'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\ncreateP('this is some text');\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 390,\n                description:\n                  '<p>Creates a &lt;span&gt;&lt;/span&gt; element in the DOM with given inner HTML.\\nAppends to the container node if one is specified, otherwise\\nappends to body.</p>\\n',\n                itemtype: 'method',\n                name: 'createSpan',\n                params: [\n                  {\n                    name: 'html',\n                    description: '<p>inner HTML for element created</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node',\n                  type: 'p5.Element'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\ncreateSpan('this is some text');\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 413,\n                description:\n                  '<p>Creates an &lt;img&gt; element in the DOM with given src and\\nalternate text.\\nAppends to the container node if one is specified, otherwise\\nappends to body.</p>\\n',\n                itemtype: 'method',\n                name: 'createImg',\n                return: {\n                  description:\n                    'pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node',\n                  type: 'p5.Element'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\ncreateImg('http://p5js.org/img/asterisk-01.png');\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom',\n                overloads: [\n                  {\n                    line: 413,\n                    params: [\n                      {\n                        name: 'src',\n                        description: '<p>src path or url for image</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'alt',\n                        description:\n                          '<p>alternate text to be used if image does not load</p>\\n',\n                        type: 'String',\n                        optional: true\n                      },\n                      {\n                        name: 'successCallback',\n                        description:\n                          '<p>callback to be called once image data is loaded</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description:\n                        'pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node',\n                      type: 'p5.Element'\n                    }\n                  },\n                  {\n                    line: 429,\n                    params: [\n                      {\n                        name: 'src',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'successCallback',\n                        description: '',\n                        type: 'Function'\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'Object|p5.Element'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 463,\n                description:\n                  '<p>Creates an &lt;a&gt;&lt;/a&gt; element in the DOM for including a hyperlink.\\nAppends to the container node if one is specified, otherwise\\nappends to body.</p>\\n',\n                itemtype: 'method',\n                name: 'createA',\n                params: [\n                  {\n                    name: 'href',\n                    description: '<p>url of page to link to</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'html',\n                    description: '<p>inner html of link element to display</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'target',\n                    description:\n                      '<p>target where new link should open,\\n                            could be _blank, _self, _parent, _top.</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node',\n                  type: 'p5.Element'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\ncreateA('http://p5js.org/', 'this is a link');\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 488,\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 490,\n                description:\n                  '<p>Creates a slider &lt;input&gt;&lt;/input&gt; element in the DOM.\\nUse .size() to set the display length of the slider.\\nAppends to the container node if one is specified, otherwise\\nappends to body.</p>\\n',\n                itemtype: 'method',\n                name: 'createSlider',\n                params: [\n                  {\n                    name: 'min',\n                    description: '<p>minimum value of the slider</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'max',\n                    description: '<p>maximum value of the slider</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'value',\n                    description: '<p>default value of the slider</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'step',\n                    description:\n                      '<p>step size for each tick of the slider (if step is set to 0, the slider will move continuously from the minimum to the maximum value)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node',\n                  type: 'p5.Element'\n                },\n                example: [\n                  \"\\n<div><code>\\nvar slider;\\nfunction setup() {\\n  slider = createSlider(0, 255, 100);\\n  slider.position(10, 10);\\n  slider.style('width', '80px');\\n}\\n\\nfunction draw() {\\n  var val = slider.value();\\n  background(val);\\n}\\n</code></div>\\n\\n<div><code>\\nvar slider;\\nfunction setup() {\\n  colorMode(HSB);\\n  slider = createSlider(0, 360, 60, 40);\\n  slider.position(10, 10);\\n  slider.style('width', '80px');\\n}\\n\\nfunction draw() {\\n  var val = slider.value();\\n  background(val, 100, 100, 1);\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 547,\n                description:\n                  '<p>Creates a &lt;button&gt;&lt;/button&gt; element in the DOM.\\nUse .size() to set the display size of the button.\\nUse .mousePressed() to specify behavior on press.\\nAppends to the container node if one is specified, otherwise\\nappends to body.</p>\\n',\n                itemtype: 'method',\n                name: 'createButton',\n                params: [\n                  {\n                    name: 'label',\n                    description: '<p>label displayed on the button</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'value',\n                    description: '<p>value of the button</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node',\n                  type: 'p5.Element'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\nvar button;\\nfunction setup() {\\n  createCanvas(100, 100);\\n  background(0);\\n  button = createButton('click me');\\n  button.position(19, 19);\\n  button.mousePressed(changeBG);\\n}\\n\\nfunction changeBG() {\\n  var val = random(255);\\n  background(val);\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 583,\n                description:\n                  '<p>Creates a checkbox &lt;input&gt;&lt;/input&gt; element in the DOM.\\nCalling .checked() on a checkbox returns if it is checked or not</p>\\n',\n                itemtype: 'method',\n                name: 'createCheckbox',\n                params: [\n                  {\n                    name: 'label',\n                    description: '<p>label displayed after checkbox</p>\\n',\n                    type: 'String',\n                    optional: true\n                  },\n                  {\n                    name: 'value',\n                    description:\n                      '<p>value of the checkbox; checked is true, unchecked is false</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node',\n                  type: 'p5.Element'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\nvar checkbox;\\n\\nfunction setup() {\\n  checkbox = createCheckbox('label', false);\\n  checkbox.changed(myCheckedEvent);\\n}\\n\\nfunction myCheckedEvent() {\\n  if (this.checked()) {\\n    console.log('Checking!');\\n  } else {\\n    console.log('Unchecking!');\\n  }\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 651,\n                description:\n                  '<p>Creates a dropdown menu &lt;select&gt;&lt;/select&gt; element in the DOM.\\nIt also helps to assign select-box methods to <a href=\"#/p5.Element\">p5.Element</a> when selecting existing select box</p>\\n',\n                itemtype: 'method',\n                name: 'createSelect',\n                return: {\n                  description: '',\n                  type: 'p5.Element'\n                },\n                example: [\n                  \"\\n<div><code>\\nvar sel;\\n\\nfunction setup() {\\n  textAlign(CENTER);\\n  background(200);\\n  sel = createSelect();\\n  sel.position(10, 10);\\n  sel.option('pear');\\n  sel.option('kiwi');\\n  sel.option('grape');\\n  sel.changed(mySelectEvent);\\n}\\n\\nfunction mySelectEvent() {\\n  var item = sel.value();\\n  background(200);\\n  text('It is a ' + item + '!', 50, 50);\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom',\n                overloads: [\n                  {\n                    line: 651,\n                    params: [\n                      {\n                        name: 'multiple',\n                        description:\n                          '<p>true if dropdown should support multiple selections</p>\\n',\n                        type: 'Boolean',\n                        optional: true\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'p5.Element'\n                    }\n                  },\n                  {\n                    line: 679,\n                    params: [\n                      {\n                        name: 'existing',\n                        description: '<p>DOM select element</p>\\n',\n                        type: 'Object'\n                      }\n                    ],\n                    return: {\n                      description: '',\n                      type: 'p5.Element'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 755,\n                description:\n                  '<p>Creates a radio button &lt;input&gt;&lt;/input&gt; element in the DOM.\\nThe .option() method can be used to set options for the radio after it is\\ncreated. The .value() method will return the currently selected option.</p>\\n',\n                itemtype: 'method',\n                name: 'createRadio',\n                params: [\n                  {\n                    name: 'divId',\n                    description:\n                      '<p>the id and name of the created div and input field respectively</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node',\n                  type: 'p5.Element'\n                },\n                example: [\n                  \"\\n<div><code>\\nvar radio;\\n\\nfunction setup() {\\n  radio = createRadio();\\n  radio.option('black');\\n  radio.option('white');\\n  radio.option('gray');\\n  radio.style('width', '60px');\\n  textAlign(CENTER);\\n  fill(255, 0, 0);\\n}\\n\\nfunction draw() {\\n  var val = radio.value();\\n  background(val);\\n  text(val, width / 2, height / 2);\\n}\\n</code></div>\\n<div><code>\\nvar radio;\\n\\nfunction setup() {\\n  radio = createRadio();\\n  radio.option('apple', 1);\\n  radio.option('bread', 2);\\n  radio.option('juice', 3);\\n  radio.style('width', '60px');\\n  textAlign(CENTER);\\n}\\n\\nfunction draw() {\\n  background(200);\\n  var val = radio.value();\\n  if (val) {\\n    text('item cost is $' + val, width / 2, height / 2);\\n  }\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 893,\n                description:\n                  '<p>Creates a colorPicker element in the DOM for color input.\\nThe .value() method will return a hex string (#rrggbb) of the color.\\nThe .color() method will return a p5.Color object with the current chosen color.</p>\\n',\n                itemtype: 'method',\n                name: 'createColorPicker',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>default color of element</p>\\n',\n                    type: 'String|p5.Color',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node',\n                  type: 'p5.Element'\n                },\n                example: [\n                  \"\\n<div>\\n<code>\\nvar inp1, inp2;\\nfunction setup() {\\n  createCanvas(100, 100);\\n  background('grey');\\n  inp1 = createColorPicker('#ff0000');\\n  inp2 = createColorPicker(color('yellow'));\\n  inp1.input(setShade1);\\n  inp2.input(setShade2);\\n  setMidShade();\\n}\\n\\nfunction setMidShade() {\\n  // Finding a shade between the two\\n  var commonShade = lerpColor(inp1.color(), inp2.color(), 0.5);\\n  fill(commonShade);\\n  rect(20, 20, 60, 60);\\n}\\n\\nfunction setShade1() {\\n  setMidShade();\\n  console.log('You are choosing shade 1 to be : ', this.value());\\n}\\nfunction setShade2() {\\n  setMidShade();\\n  console.log('You are choosing shade 2 to be : ', this.value());\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 967,\n                description:\n                  '<p>Creates an &lt;input&gt;&lt;/input&gt; element in the DOM for text input.\\nUse .<a href=\"#/p5.Element/size\">size()</a> to set the display length of the box.\\nAppends to the container node if one is specified, otherwise\\nappends to body.</p>\\n',\n                itemtype: 'method',\n                name: 'createInput',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>default value of the input box</p>\\n',\n                    type: 'String',\n                    optional: true\n                  },\n                  {\n                    name: 'type',\n                    description:\n                      '<p>type of text, ie text, password etc. Defaults to text</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node',\n                  type: 'p5.Element'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\nfunction setup() {\\n  var inp = createInput('');\\n  inp.input(myInputEvent);\\n}\\n\\nfunction myInputEvent() {\\n  console.log('you are typing: ', this.value());\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 997,\n                description:\n                  '<p>Creates an &lt;input&gt;&lt;/input&gt; element in the DOM of type &#39;file&#39;.\\nThis allows users to select local files for use in a sketch.</p>\\n',\n                itemtype: 'method',\n                name: 'createFileInput',\n                params: [\n                  {\n                    name: 'callback',\n                    description: '<p>callback function for when a file loaded</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'multiple',\n                    description: '<p>optional to allow multiple files selected</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created DOM element',\n                  type: 'p5.Element'\n                },\n                example: [\n                  \"\\n<div><code>\\nlet input;\\nlet img;\\n\\nfunction setup() {\\n  input = createFileInput(handleFile);\\n  input.position(0, 0);\\n}\\n\\nfunction draw() {\\n  background(255);\\n  if (img) {\\n    image(img, 0, 0, width, height);\\n  }\\n}\\n\\nfunction handleFile(file) {\\n  print(file);\\n  if (file.type === 'image') {\\n    img = createImg(file.data);\\n    img.hide();\\n  } else {\\n    img = null;\\n  }\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1070,\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1112,\n                description:\n                  '<p>Creates an HTML5 &lt;video&gt; element in the DOM for simple playback\\nof audio/video. Shown by default, can be hidden with .<a href=\"#/p5.Element/hide\">hide()</a>\\nand drawn into canvas using video(). Appends to the container\\nnode if one is specified, otherwise appends to body. The first parameter\\ncan be either a single string path to a video file, or an array of string\\npaths to different formats of the same video. This is useful for ensuring\\nthat your video can play across different browsers, as each supports\\ndifferent formats. See <a href=\\'https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats\\'>this\\npage</a> for further information about supported formats.</p>\\n',\n                itemtype: 'method',\n                name: 'createVideo',\n                params: [\n                  {\n                    name: 'src',\n                    description:\n                      '<p>path to a video file, or array of paths for\\n                            supporting different browsers</p>\\n',\n                    type: 'String|String[]'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>callback function to be called upon\\n                            &#39;canplaythrough&#39; event fire, that is, when the\\n                            browser can play the media, and estimates that\\n                            enough data has been loaded to play the media\\n                            up to its end without having to stop for\\n                            further buffering of content</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'pointer to video <a href=\"#/p5.Element\">p5.Element</a>',\n                  type: 'p5.MediaElement'\n                },\n                example: [\n                  \"\\n<div><code>\\nvar vid;\\nfunction setup() {\\n  noCanvas();\\n\\n  vid = createVideo(\\n    ['assets/small.mp4', 'assets/small.ogv', 'assets/small.webm'],\\n    vidLoad\\n  );\\n\\n  vid.size(100, 100);\\n}\\n\\n// This function is called when the video loads\\nfunction vidLoad() {\\n  vid.loop();\\n  vid.volume(0);\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1159,\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1161,\n                description:\n                  \"<p>Creates a hidden HTML5 &lt;audio&gt; element in the DOM for simple audio\\nplayback. Appends to the container node if one is specified,\\notherwise appends to body. The first parameter\\ncan be either a single string path to a audio file, or an array of string\\npaths to different formats of the same audio. This is useful for ensuring\\nthat your audio can play across different browsers, as each supports\\ndifferent formats. See <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats'>this\\npage for further information about supported formats</a>.</p>\\n\",\n                itemtype: 'method',\n                name: 'createAudio',\n                params: [\n                  {\n                    name: 'src',\n                    description:\n                      '<p>path to an audio file, or array of paths\\n                            for supporting different browsers</p>\\n',\n                    type: 'String|String[]',\n                    optional: true\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>callback function to be called upon\\n                            &#39;canplaythrough&#39; event fire, that is, when the\\n                            browser can play the media, and estimates that\\n                            enough data has been loaded to play the media\\n                            up to its end without having to stop for\\n                            further buffering of content</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'pointer to audio <a href=\"#/p5.Element\">p5.Element</a>',\n                  type: 'p5.MediaElement'\n                },\n                example: [\n                  \"\\n<div><code>\\nvar ele;\\nfunction setup() {\\n  ele = createAudio('assets/beat.mp3');\\n\\n  // here we set the element to autoplay\\n  // The element will play as soon\\n  // as it is able to do so.\\n  ele.autoplay(true);\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1199,\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1201,\n                itemtype: 'property',\n                name: 'VIDEO',\n                type: 'String',\n                final: 1,\n                category: ['Constants'],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1207,\n                itemtype: 'property',\n                name: 'AUDIO',\n                type: 'String',\n                final: 1,\n                category: ['Constants'],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1244,\n                description:\n                  '<p>Creates a new HTML5 &lt;video&gt; element that contains the audio/video\\nfeed from a webcam. The element is separate from the canvas and is\\ndisplayed by default. The element can be hidden using .<a href=\"#/p5.Element/hide\">hide()</a>. The feed\\ncan be drawn onto the canvas using <a href=\"#/p5/image\">image()</a>. The loadedmetadata property can\\nbe used to detect when the element has fully loaded (see second example).</p>\\n<p>More specific properties of the feed can be passing in a Constraints object.\\nSee the\\n<a href=\\'http://w3c.github.io/mediacapture-main/getusermedia.html#media-track-constraints\\'> W3C\\nspec</a> for possible properties. Note that not all of these are supported\\nby all browsers.</p>\\n<p>Security note: A new browser security specification requires that getUserMedia,\\nwhich is behind <a href=\"#/p5/createCapture\">createCapture()</a>, only works when you&#39;re running the code locally,\\nor on HTTPS. Learn more <a href=\\'http://stackoverflow.com/questions/34197653/getusermedia-in-chrome-47-without-using-https\\'>here</a>\\nand <a href=\\'https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\\'>here</a>.</p>',\n                itemtype: 'method',\n                name: 'createCapture',\n                params: [\n                  {\n                    name: 'type',\n                    description:\n                      '<p>type of capture, either VIDEO or\\n                                  AUDIO if none specified, default both,\\n                                  or a Constraints object</p>\\n',\n                    type: 'String|Constant|Object'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>function to be called once\\n                                  stream has loaded</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'capture video <a href=\"#/p5.Element\">p5.Element</a>',\n                  type: 'p5.Element'\n                },\n                example: [\n                  \"\\n<div class='norender notest'><code>\\nvar capture;\\n\\nfunction setup() {\\n  createCanvas(480, 480);\\n  capture = createCapture(VIDEO);\\n  capture.hide();\\n}\\n\\nfunction draw() {\\n  image(capture, 0, 0, width, width * capture.height / capture.width);\\n  filter(INVERT);\\n}\\n</code></div>\\n<div class='norender notest'><code>\\nfunction setup() {\\n  createCanvas(480, 120);\\n  var constraints = {\\n    video: {\\n      mandatory: {\\n        minWidth: 1280,\\n        minHeight: 720\\n      },\\n      optional: [{ maxFrameRate: 10 }]\\n    },\\n    audio: true\\n  };\\n  createCapture(constraints, function(stream) {\\n    console.log(stream);\\n  });\\n}\\n</code></div>\\n<code><div class='norender notest'>\\nvar capture;\\n\\nfunction setup() {\\n  createCanvas(640, 480);\\n  capture = createCapture(VIDEO);\\n}\\nfunction draw() {\\n  background(0);\\n  if (capture.loadedmetadata) {\\n    var c = capture.get(0, 0, 100, 100);\\n    image(c, 0, 0);\\n  }\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1381,\n                description:\n                  '<p>Creates element with given tag in the DOM with given content.\\nAppends to the container node if one is specified, otherwise\\nappends to body.</p>\\n',\n                itemtype: 'method',\n                name: 'createElement',\n                params: [\n                  {\n                    name: 'tag',\n                    description: '<p>tag for the new element</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'content',\n                    description: '<p>html content to be inserted into the element</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node',\n                  type: 'p5.Element'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\ncreateElement('h2', 'im an h2 p5.element!');\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1407,\n                description: '<p>Adds specified class to the element.</p>\\n',\n                itemtype: 'method',\n                name: 'addClass',\n                params: [\n                  {\n                    name: 'class',\n                    description: '<p>name of class to add</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n <div class='norender'><code>\\n var div = createDiv('div');\\n div.addClass('myClass');\\n </code></div>\"\n                ],\n                class: 'p5.Element',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1432,\n                description: '<p>Removes specified class from the element.</p>\\n',\n                itemtype: 'method',\n                name: 'removeClass',\n                params: [\n                  {\n                    name: 'class',\n                    description: '<p>name of class to remove</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n <div class='norender'><code>\\n // In this example, a class is set when the div is created\\n // and removed when mouse is pressed. This could link up\\n // with a CSS style rule to toggle style properties.\\nvar div;\\nfunction setup() {\\n   div = createDiv('div');\\n   div.addClass('myClass');\\n }\\nfunction mousePressed() {\\n   div.removeClass('myClass');\\n }\\n </code></div>\"\n                ],\n                class: 'p5.Element',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1463,\n                description: '<p>Checks if specified class already set to element</p>\\n',\n                itemtype: 'method',\n                name: 'hasClass',\n                return: {\n                  description: 'a boolean value if element has specified class',\n                  type: 'Boolean'\n                },\n                params: [\n                  {\n                    name: 'c',\n                    description: '<p>class name of class to check</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                example: [\n                  \"\\n <div class='norender'><code>\\n var div;\\nfunction setup() {\\n   div = createDiv('div');\\n   div.addClass('show');\\n }\\nfunction mousePressed() {\\n   if (div.hasClass('show')) {\\n     div.addClass('show');\\n   } else {\\n     div.removeClass('show');\\n   }\\n }\\n </code></div>\"\n                ],\n                class: 'p5.Element',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1492,\n                description: '<p>Toggles element class</p>\\n',\n                itemtype: 'method',\n                name: 'toggleClass',\n                params: [\n                  {\n                    name: 'c',\n                    description: '<p>class name to toggle</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n <div class='norender'><code>\\n var div;\\nfunction setup() {\\n   div = createDiv('div');\\n   div.addClass('show');\\n }\\nfunction mousePressed() {\\n   div.toggleClass('show');\\n }\\n </code></div>\"\n                ],\n                class: 'p5.Element',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1525,\n                description:\n                  '<p>Attaches the element  as a child to the parent specified.\\n Accepts either a string ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>.\\n If no argument is specified, an array of children DOM nodes is returned.</p>\\n',\n                itemtype: 'method',\n                name: 'child',\n                return: {\n                  description: 'an array of child nodes',\n                  type: 'Node[]'\n                },\n                example: [\n                  \"\\n <div class='norender'><code>\\n var div0 = createDiv('this is the parent');\\n var div1 = createDiv('this is the child');\\n div0.child(div1); // use p5.Element\\n </code></div>\\n <div class='norender'><code>\\n var div0 = createDiv('this is the parent');\\n var div1 = createDiv('this is the child');\\n div1.id('apples');\\n div0.child('apples'); // use id\\n </code></div>\\n <div class='norender notest'><code>\\n // this example assumes there is a div already on the page\\n // with id \\\"myChildDiv\\\"\\n var div0 = createDiv('this is the parent');\\n var elt = document.getElementById('myChildDiv');\\n div0.child(elt); // use element from page\\n </code></div>\"\n                ],\n                class: 'p5.Element',\n                module: 'p5.dom',\n                submodule: 'p5.dom',\n                overloads: [\n                  {\n                    line: 1525,\n                    params: [],\n                    return: {\n                      description: 'an array of child nodes',\n                      type: 'Node[]'\n                    }\n                  },\n                  {\n                    line: 1553,\n                    params: [\n                      {\n                        name: 'child',\n                        description:\n                          '<p>the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>\\n                        to add to the current element</p>\\n',\n                        type: 'String|p5.Element',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1575,\n                description:\n                  '<p>Centers a p5 Element either vertically, horizontally,\\nor both, relative to its parent or according to\\nthe body if the Element has no parent. If no argument is passed\\nthe Element is aligned both vertically and horizontally.</p>\\n',\n                itemtype: 'method',\n                name: 'center',\n                params: [\n                  {\n                    name: 'align',\n                    description:\n                      '<p>passing &#39;vertical&#39;, &#39;horizontal&#39; aligns element accordingly</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div><code>\\nfunction setup() {\\n  var div = createDiv('').size(10, 10);\\n  div.style('background-color', 'orange');\\n  div.center();\\n}\\n</code></div>\"\n                ],\n                class: 'p5.Element',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1629,\n                description:\n                  '<p>If an argument is given, sets the inner HTML of the element,\\n replacing any existing html. If true is included as a second\\n argument, html is appended instead of replacing existing html.\\n If no arguments are given, returns\\n the inner HTML of the element.</p>\\n',\n                itemtype: 'method',\n                name: 'html',\n                return: {\n                  description: 'the inner HTML of the element',\n                  type: 'String'\n                },\n                example: [\n                  \"\\n <div class='norender'><code>\\n var div = createDiv('').size(100, 100);\\n div.html('hi');\\n </code></div>\\n <div class='norender'><code>\\n var div = createDiv('Hello ').size(100, 100);\\n div.html('World', true);\\n </code></div>\"\n                ],\n                class: 'p5.Element',\n                module: 'p5.dom',\n                submodule: 'p5.dom',\n                overloads: [\n                  {\n                    line: 1629,\n                    params: [],\n                    return: {\n                      description: 'the inner HTML of the element',\n                      type: 'String'\n                    }\n                  },\n                  {\n                    line: 1650,\n                    params: [\n                      {\n                        name: 'html',\n                        description: '<p>the HTML to be placed inside the element</p>\\n',\n                        type: 'String',\n                        optional: true\n                      },\n                      {\n                        name: 'append',\n                        description: '<p>whether to append HTML to existing</p>\\n',\n                        type: 'Boolean',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1668,\n                description:\n                  '<p>Sets the position of the element relative to (0, 0) of the\\n window. Essentially, sets position:absolute and left and top\\n properties of style. If no arguments given returns the x and y position\\n of the element in an object.</p>\\n',\n                itemtype: 'method',\n                name: 'position',\n                return: {\n                  description: 'the x and y position of the element in an object',\n                  type: 'Object'\n                },\n                example: [\n                  \"\\n <div><code class='norender'>\\n function setup() {\\n   var cnv = createCanvas(100, 100);\\n   // positions canvas 50px to the right and 100px\\n   // below upper left corner of the window\\n   cnv.position(50, 100);\\n }\\n </code></div>\"\n                ],\n                class: 'p5.Element',\n                module: 'p5.dom',\n                submodule: 'p5.dom',\n                overloads: [\n                  {\n                    line: 1668,\n                    params: [],\n                    return: {\n                      description: 'the x and y position of the element in an object',\n                      type: 'Object'\n                    }\n                  },\n                  {\n                    line: 1687,\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>x-position relative to upper left of window</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y-position relative to upper left of window</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1762,\n                description:\n                  '<p>Sets the given style (css) property (1st arg) of the element with the\\ngiven value (2nd arg). If a single argument is given, .style()\\nreturns the value of the given property; however, if the single argument\\nis given in css syntax (&#39;text-align:center&#39;), .style() sets the css\\nappropriately.</p>\\n',\n                itemtype: 'method',\n                name: 'style',\n                return: {\n                  description: 'value of property',\n                  type: 'String'\n                },\n                example: [\n                  \"\\n<div><code class='norender'>\\nvar myDiv = createDiv('I like pandas.');\\nmyDiv.style('font-size', '18px');\\nmyDiv.style('color', '#ff0000');\\n</code></div>\\n<div><code class='norender'>\\nvar col = color(25, 23, 200, 50);\\nvar button = createButton('button');\\nbutton.style('background-color', col);\\nbutton.position(10, 10);\\n</code></div>\\n<div><code class='norender'>\\nvar myDiv;\\nfunction setup() {\\n  background(200);\\n  myDiv = createDiv('I like gray.');\\n  myDiv.position(20, 20);\\n}\\n\\nfunction draw() {\\n  myDiv.style('font-size', mouseX + 'px');\\n}\\n</code></div>\"\n                ],\n                class: 'p5.Element',\n                module: 'p5.dom',\n                submodule: 'p5.dom',\n                overloads: [\n                  {\n                    line: 1762,\n                    params: [\n                      {\n                        name: 'property',\n                        description: '<p>property to be set</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    return: {\n                      description: 'value of property',\n                      type: 'String'\n                    }\n                  },\n                  {\n                    line: 1797,\n                    params: [\n                      {\n                        name: 'property',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'value',\n                        description: '<p>value to assign to property</p>\\n',\n                        type: 'String|Number|p5.Color'\n                      }\n                    ],\n                    chainable: 1,\n                    return: {\n                      description:\n                        'current value of property, if no value is given as second argument',\n                      type: 'String'\n                    }\n                  }\n                ]\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1851,\n                description:\n                  '<p>Adds a new attribute or changes the value of an existing attribute\\n on the specified element. If no value is specified, returns the\\n value of the given attribute, or null if attribute is not set.</p>\\n',\n                itemtype: 'method',\n                name: 'attribute',\n                return: {\n                  description: 'value of attribute',\n                  type: 'String'\n                },\n                example: [\n                  \"\\n <div class='norender'><code>\\n var myDiv = createDiv('I like pandas.');\\n myDiv.attribute('align', 'center');\\n </code></div>\"\n                ],\n                class: 'p5.Element',\n                module: 'p5.dom',\n                submodule: 'p5.dom',\n                overloads: [\n                  {\n                    line: 1851,\n                    params: [],\n                    return: {\n                      description: 'value of attribute',\n                      type: 'String'\n                    }\n                  },\n                  {\n                    line: 1866,\n                    params: [\n                      {\n                        name: 'attr',\n                        description: '<p>attribute to set</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'value',\n                        description: '<p>value to assign to attribute</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1895,\n                description: '<p>Removes an attribute on the specified element.</p>\\n',\n                itemtype: 'method',\n                name: 'removeAttribute',\n                params: [\n                  {\n                    name: 'attr',\n                    description: '<p>attribute to remove</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n <div><code>\\n var button;\\n var checkbox;\\nfunction setup() {\\n   checkbox = createCheckbox('enable', true);\\n   checkbox.changed(enableButton);\\n   button = createButton('button');\\n   button.position(10, 10);\\n }\\nfunction enableButton() {\\n   if (this.checked()) {\\n     // Re-enable the button\\n     button.removeAttribute('disabled');\\n   } else {\\n     // Disable the button\\n     button.attribute('disabled', '');\\n   }\\n }\\n </code></div>\"\n                ],\n                class: 'p5.Element',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1940,\n                description:\n                  '<p>Either returns the value of the element if no arguments\\ngiven, or sets the value of the element.</p>\\n',\n                itemtype: 'method',\n                name: 'value',\n                return: {\n                  description: 'value of the element',\n                  type: 'String|Number'\n                },\n                example: [\n                  \"\\n<div class='norender'><code>\\n// gets the value\\nvar inp;\\nfunction setup() {\\n  inp = createInput('');\\n}\\n\\nfunction mousePressed() {\\n  print(inp.value());\\n}\\n</code></div>\\n<div class='norender'><code>\\n// sets the value\\nvar inp;\\nfunction setup() {\\n  inp = createInput('myValue');\\n}\\n\\nfunction mousePressed() {\\n  inp.value('myValue');\\n}\\n</code></div>\"\n                ],\n                class: 'p5.Element',\n                module: 'p5.dom',\n                submodule: 'p5.dom',\n                overloads: [\n                  {\n                    line: 1940,\n                    params: [],\n                    return: {\n                      description: 'value of the element',\n                      type: 'String|Number'\n                    }\n                  },\n                  {\n                    line: 1970,\n                    params: [\n                      {\n                        name: 'value',\n                        description: '',\n                        type: 'String|Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 1986,\n                description:\n                  '<p>Shows the current element. Essentially, setting display:block for the style.</p>\\n',\n                itemtype: 'method',\n                name: 'show',\n                chainable: 1,\n                example: [\n                  \"\\n <div class='norender'><code>\\n var div = createDiv('div');\\n div.style('display', 'none');\\n div.show(); // turns display to block\\n </code></div>\"\n                ],\n                class: 'p5.Element',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 2004,\n                description:\n                  '<p>Hides the current element. Essentially, setting display:none for the style.</p>\\n',\n                itemtype: 'method',\n                name: 'hide',\n                chainable: 1,\n                example: [\n                  \"\\n<div class='norender'><code>\\nvar div = createDiv('this is a div');\\ndiv.hide();\\n</code></div>\"\n                ],\n                class: 'p5.Element',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 2020,\n                description:\n                  '<p>Sets the width and height of the element. AUTO can be used to\\n only adjust one dimension at a time. If no arguments are given, it\\n returns the width and height of the element in an object. In case of\\n elements which need to be loaded, such as images, it is recommended\\n to call the function after the element has finished loading.</p>\\n',\n                itemtype: 'method',\n                name: 'size',\n                return: {\n                  description: 'the width and height of the element in an object',\n                  type: 'Object'\n                },\n                example: [\n                  \"\\n <div class='norender'><code>\\n let div = createDiv('this is a div');\\n div.size(100, 100);\\n let img = createImg('assets/laDefense.jpg', () => {\\n   img.size(10, AUTO);\\n });\\n </code></div>\"\n                ],\n                class: 'p5.Element',\n                module: 'p5.dom',\n                submodule: 'p5.dom',\n                overloads: [\n                  {\n                    line: 2020,\n                    params: [],\n                    return: {\n                      description: 'the width and height of the element in an object',\n                      type: 'Object'\n                    }\n                  },\n                  {\n                    line: 2039,\n                    params: [\n                      {\n                        name: 'w',\n                        description:\n                          '<p>width of the element, either AUTO, or a number</p>\\n',\n                        type: 'Number|Constant'\n                      },\n                      {\n                        name: 'h',\n                        description:\n                          '<p>height of the element, either AUTO, or a number</p>\\n',\n                        type: 'Number|Constant',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 2099,\n                description: '<p>Removes the element and deregisters all listeners.</p>\\n',\n                itemtype: 'method',\n                name: 'remove',\n                example: [\n                  \"\\n<div class='norender'><code>\\nvar myDiv = createDiv('this is some text');\\nmyDiv.remove();\\n</code></div>\"\n                ],\n                class: 'p5.Element',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 2119,\n                description:\n                  '<p>Registers a callback that gets called every time a file that is\\ndropped on the element has been loaded.\\np5 will load every dropped file into memory and pass it as a p5.File object to the callback.\\nMultiple files dropped at the same time will result in multiple calls to the callback.</p>\\n<p>You can optionally pass a second callback which will be registered to the raw\\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/drop\">drop</a> event.\\nThe callback will thus be provided the original\\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DragEvent\">DragEvent</a>.\\nDropping multiple files at the same time will trigger the second callback once per drop,\\nwhereas the first callback will trigger for each loaded file.</p>\\n',\n                itemtype: 'method',\n                name: 'drop',\n                params: [\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>callback to receive loaded file, called for each file dropped.</p>\\n',\n                    type: 'Function'\n                  },\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>callback triggered once when files are dropped with the drop event.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div><code>\\nfunction setup() {\\n  var c = createCanvas(100, 100);\\n  background(200);\\n  textAlign(CENTER);\\n  text('drop file', width / 2, height / 2);\\n  c.drop(gotFile);\\n}\\n\\nfunction gotFile(file) {\\n  background(200);\\n  text('received file:', width / 2, height / 2);\\n  text(file.name, width / 2, height / 2 + 50);\\n}\\n</code></div>\\n\\n<div><code>\\nvar img;\\n\\nfunction setup() {\\n  var c = createCanvas(100, 100);\\n  background(200);\\n  textAlign(CENTER);\\n  text('drop image', width / 2, height / 2);\\n  c.drop(gotFile);\\n}\\n\\nfunction draw() {\\n  if (img) {\\n    image(img, 0, 0, width, height);\\n  }\\n}\\n\\nfunction gotFile(file) {\\n  img = createImg(file.data).hide();\\n}\\n</code></div>\"\n                ],\n                alt: 'Canvas turns into whatever image is dragged/dropped onto it.',\n                class: 'p5.Element',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 2253,\n                description: '<p>Path to the media element source.</p>\\n',\n                itemtype: 'property',\n                name: 'src',\n                return: {\n                  description: 'src',\n                  type: 'String'\n                },\n                example: [\n                  \"\\n<div><code>\\nvar ele;\\n\\nfunction setup() {\\n  background(250);\\n\\n  //p5.MediaElement objects are usually created\\n  //by calling the createAudio(), createVideo(),\\n  //and createCapture() functions.\\n\\n  //In this example we create\\n  //a new p5.MediaElement via createAudio().\\n  ele = createAudio('assets/beat.mp3');\\n\\n  //We'll set up our example so that\\n  //when you click on the text,\\n  //an alert box displays the MediaElement's\\n  //src field.\\n  textAlign(CENTER);\\n  text('Click Me!', width / 2, height / 2);\\n}\\n\\nfunction mouseClicked() {\\n  //here we test if the mouse is over the\\n  //canvas element when it's clicked\\n  if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\\n    //Show our p5.MediaElement's src field\\n    alert(ele.src);\\n  }\\n}\\n</code></div>\"\n                ],\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 2319,\n                description: '<p>Play an HTML5 media element.</p>\\n',\n                itemtype: 'method',\n                name: 'play',\n                chainable: 1,\n                example: [\n                  \"\\n<div><code>\\nvar ele;\\n\\nfunction setup() {\\n  //p5.MediaElement objects are usually created\\n  //by calling the createAudio(), createVideo(),\\n  //and createCapture() functions.\\n\\n  //In this example we create\\n  //a new p5.MediaElement via createAudio().\\n  ele = createAudio('assets/beat.mp3');\\n\\n  background(250);\\n  textAlign(CENTER);\\n  text('Click to Play!', width / 2, height / 2);\\n}\\n\\nfunction mouseClicked() {\\n  //here we test if the mouse is over the\\n  //canvas element when it's clicked\\n  if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\\n    //Here we call the play() function on\\n    //the p5.MediaElement we created above.\\n    //This will start the audio sample.\\n    ele.play();\\n\\n    background(200);\\n    text('You clicked Play!', width / 2, height / 2);\\n  }\\n}\\n</code></div>\"\n                ],\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 2380,\n                description:\n                  '<p>Stops an HTML5 media element (sets current time to zero).</p>\\n',\n                itemtype: 'method',\n                name: 'stop',\n                chainable: 1,\n                example: [\n                  \"\\n<div><code>\\n//This example both starts\\n//and stops a sound sample\\n//when the user clicks the canvas\\n\\n//We will store the p5.MediaElement\\n//object in here\\nvar ele;\\n\\n//while our audio is playing,\\n//this will be set to true\\nvar sampleIsPlaying = false;\\n\\nfunction setup() {\\n  //Here we create a p5.MediaElement object\\n  //using the createAudio() function.\\n  ele = createAudio('assets/beat.mp3');\\n  background(200);\\n  textAlign(CENTER);\\n  text('Click to play!', width / 2, height / 2);\\n}\\n\\nfunction mouseClicked() {\\n  //here we test if the mouse is over the\\n  //canvas element when it's clicked\\n  if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\\n    background(200);\\n\\n    if (sampleIsPlaying) {\\n      //if the sample is currently playing\\n      //calling the stop() function on\\n      //our p5.MediaElement will stop\\n      //it and reset its current\\n      //time to 0 (i.e. it will start\\n      //at the beginning the next time\\n      //you play it)\\n      ele.stop();\\n\\n      sampleIsPlaying = false;\\n      text('Click to play!', width / 2, height / 2);\\n    } else {\\n      //loop our sound element until we\\n      //call ele.stop() on it.\\n      ele.loop();\\n\\n      sampleIsPlaying = true;\\n      text('Click to stop!', width / 2, height / 2);\\n    }\\n  }\\n}\\n</code></div>\"\n                ],\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 2444,\n                description: '<p>Pauses an HTML5 media element.</p>\\n',\n                itemtype: 'method',\n                name: 'pause',\n                chainable: 1,\n                example: [\n                  \"\\n<div><code>\\n//This example both starts\\n//and pauses a sound sample\\n//when the user clicks the canvas\\n\\n//We will store the p5.MediaElement\\n//object in here\\nvar ele;\\n\\n//while our audio is playing,\\n//this will be set to true\\nvar sampleIsPlaying = false;\\n\\nfunction setup() {\\n  //Here we create a p5.MediaElement object\\n  //using the createAudio() function.\\n  ele = createAudio('assets/lucky_dragons.mp3');\\n  background(200);\\n  textAlign(CENTER);\\n  text('Click to play!', width / 2, height / 2);\\n}\\n\\nfunction mouseClicked() {\\n  //here we test if the mouse is over the\\n  //canvas element when it's clicked\\n  if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\\n    background(200);\\n\\n    if (sampleIsPlaying) {\\n      //Calling pause() on our\\n      //p5.MediaElement will stop it\\n      //playing, but when we call the\\n      //loop() or play() functions\\n      //the sample will start from\\n      //where we paused it.\\n      ele.pause();\\n\\n      sampleIsPlaying = false;\\n      text('Click to resume!', width / 2, height / 2);\\n    } else {\\n      //loop our sound element until we\\n      //call ele.pause() on it.\\n      ele.loop();\\n\\n      sampleIsPlaying = true;\\n      text('Click to pause!', width / 2, height / 2);\\n    }\\n  }\\n}\\n</code></div>\"\n                ],\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 2506,\n                description:\n                  '<p>Set &#39;loop&#39; to true for an HTML5 media element, and starts playing.</p>\\n',\n                itemtype: 'method',\n                name: 'loop',\n                chainable: 1,\n                example: [\n                  \"\\n<div><code>\\n//Clicking the canvas will loop\\n//the audio sample until the user\\n//clicks again to stop it\\n\\n//We will store the p5.MediaElement\\n//object in here\\nvar ele;\\n\\n//while our audio is playing,\\n//this will be set to true\\nvar sampleIsLooping = false;\\n\\nfunction setup() {\\n  //Here we create a p5.MediaElement object\\n  //using the createAudio() function.\\n  ele = createAudio('assets/lucky_dragons.mp3');\\n  background(200);\\n  textAlign(CENTER);\\n  text('Click to loop!', width / 2, height / 2);\\n}\\n\\nfunction mouseClicked() {\\n  //here we test if the mouse is over the\\n  //canvas element when it's clicked\\n  if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\\n    background(200);\\n\\n    if (!sampleIsLooping) {\\n      //loop our sound element until we\\n      //call ele.stop() on it.\\n      ele.loop();\\n\\n      sampleIsLooping = true;\\n      text('Click to stop!', width / 2, height / 2);\\n    } else {\\n      ele.stop();\\n\\n      sampleIsLooping = false;\\n      text('Click to loop!', width / 2, height / 2);\\n    }\\n  }\\n}\\n</code></div>\"\n                ],\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 2562,\n                description:\n                  '<p>Set &#39;loop&#39; to false for an HTML5 media element. Element will stop\\nwhen it reaches the end.</p>\\n',\n                itemtype: 'method',\n                name: 'noLoop',\n                chainable: 1,\n                example: [\n                  \"\\n<div><code>\\n//This example both starts\\n//and stops loop of sound sample\\n//when the user clicks the canvas\\n\\n//We will store the p5.MediaElement\\n//object in here\\nvar ele;\\n//while our audio is playing,\\n//this will be set to true\\nvar sampleIsPlaying = false;\\n\\nfunction setup() {\\n  //Here we create a p5.MediaElement object\\n  //using the createAudio() function.\\n  ele = createAudio('assets/beat.mp3');\\n  background(200);\\n  textAlign(CENTER);\\n  text('Click to play!', width / 2, height / 2);\\n}\\n\\nfunction mouseClicked() {\\n  //here we test if the mouse is over the\\n  //canvas element when it's clicked\\n  if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\\n    background(200);\\n\\n    if (sampleIsPlaying) {\\n      ele.noLoop();\\n      text('No more Loops!', width / 2, height / 2);\\n    } else {\\n      ele.loop();\\n      sampleIsPlaying = true;\\n      text('Click to stop looping!', width / 2, height / 2);\\n    }\\n  }\\n}\\n</code></div>\\n\"\n                ],\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 2614,\n                description: '<p>Set HTML5 media element to autoplay or not.</p>\\n',\n                itemtype: 'method',\n                name: 'autoplay',\n                params: [\n                  {\n                    name: 'autoplay',\n                    description: '<p>whether the element should autoplay</p>\\n',\n                    type: 'Boolean'\n                  }\n                ],\n                chainable: 1,\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 2626,\n                description:\n                  '<p>Sets volume for this HTML5 media element. If no argument is given,\\nreturns the current volume.</p>\\n',\n                itemtype: 'method',\n                name: 'volume',\n                return: {\n                  description: 'current volume',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div><code>\\nvar ele;\\nfunction setup() {\\n  // p5.MediaElement objects are usually created\\n  // by calling the createAudio(), createVideo(),\\n  // and createCapture() functions.\\n  // In this example we create\\n  // a new p5.MediaElement via createAudio().\\n  ele = createAudio('assets/lucky_dragons.mp3');\\n  background(250);\\n  textAlign(CENTER);\\n  text('Click to Play!', width / 2, height / 2);\\n}\\nfunction mouseClicked() {\\n  // Here we call the volume() function\\n  // on the sound element to set its volume\\n  // Volume must be between 0.0 and 1.0\\n  ele.volume(0.2);\\n  ele.play();\\n  background(200);\\n  text('You clicked Play!', width / 2, height / 2);\\n}\\n</code></div>\\n<div><code>\\nvar audio;\\nvar counter = 0;\\n\\nfunction loaded() {\\n  audio.play();\\n}\\n\\nfunction setup() {\\n  audio = createAudio('assets/lucky_dragons.mp3', loaded);\\n  textAlign(CENTER);\\n}\\n\\nfunction draw() {\\n  if (counter === 0) {\\n    background(0, 255, 0);\\n    text('volume(0.9)', width / 2, height / 2);\\n  } else if (counter === 1) {\\n    background(255, 255, 0);\\n    text('volume(0.5)', width / 2, height / 2);\\n  } else if (counter === 2) {\\n    background(255, 0, 0);\\n    text('volume(0.1)', width / 2, height / 2);\\n  }\\n}\\n\\nfunction mousePressed() {\\n  counter++;\\n  if (counter === 0) {\\n    audio.volume(0.9);\\n  } else if (counter === 1) {\\n    audio.volume(0.5);\\n  } else if (counter === 2) {\\n    audio.volume(0.1);\\n  } else {\\n    counter = 0;\\n    audio.volume(0.9);\\n  }\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom',\n                overloads: [\n                  {\n                    line: 2626,\n                    params: [],\n                    return: {\n                      description: 'current volume',\n                      type: 'Number'\n                    }\n                  },\n                  {\n                    line: 2699,\n                    params: [\n                      {\n                        name: 'val',\n                        description: '<p>volume between 0.0 and 1.0</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 2712,\n                description:\n                  '<p>If no arguments are given, returns the current playback speed of the\\nelement. The speed parameter sets the speed where 2.0 will play the\\nelement twice as fast, 0.5 will play at half the speed, and -1 will play\\nthe element in normal speed in reverse.(Note that not all browsers support\\nbackward playback and even if they do, playback might not be smooth.)</p>\\n',\n                itemtype: 'method',\n                name: 'speed',\n                return: {\n                  description: 'current playback speed of the element',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div class='norender notest'><code>\\n//Clicking the canvas will loop\\n//the audio sample until the user\\n//clicks again to stop it\\n\\n//We will store the p5.MediaElement\\n//object in here\\nvar ele;\\nvar button;\\n\\nfunction setup() {\\n  createCanvas(710, 400);\\n  //Here we create a p5.MediaElement object\\n  //using the createAudio() function.\\n  ele = createAudio('assets/beat.mp3');\\n  ele.loop();\\n  background(200);\\n\\n  button = createButton('2x speed');\\n  button.position(100, 68);\\n  button.mousePressed(twice_speed);\\n\\n  button = createButton('half speed');\\n  button.position(200, 68);\\n  button.mousePressed(half_speed);\\n\\n  button = createButton('reverse play');\\n  button.position(300, 68);\\n  button.mousePressed(reverse_speed);\\n\\n  button = createButton('STOP');\\n  button.position(400, 68);\\n  button.mousePressed(stop_song);\\n\\n  button = createButton('PLAY!');\\n  button.position(500, 68);\\n  button.mousePressed(play_speed);\\n}\\n\\nfunction twice_speed() {\\n  ele.speed(2);\\n}\\n\\nfunction half_speed() {\\n  ele.speed(0.5);\\n}\\n\\nfunction reverse_speed() {\\n  ele.speed(-1);\\n}\\n\\nfunction stop_song() {\\n  ele.stop();\\n}\\n\\nfunction play_speed() {\\n  ele.play();\\n}\\n</code></div>\"\n                ],\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom',\n                overloads: [\n                  {\n                    line: 2712,\n                    params: [],\n                    return: {\n                      description: 'current playback speed of the element',\n                      type: 'Number'\n                    }\n                  },\n                  {\n                    line: 2783,\n                    params: [\n                      {\n                        name: 'speed',\n                        description: '<p>speed multiplier for element playback</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 2800,\n                description:\n                  '<p>If no arguments are given, returns the current time of the element.\\nIf an argument is given the current time of the element is set to it.</p>\\n',\n                itemtype: 'method',\n                name: 'time',\n                return: {\n                  description: 'current time (in seconds)',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div><code>\\nvar ele;\\nvar beginning = true;\\nfunction setup() {\\n  //p5.MediaElement objects are usually created\\n  //by calling the createAudio(), createVideo(),\\n  //and createCapture() functions.\\n\\n  //In this example we create\\n  //a new p5.MediaElement via createAudio().\\n  ele = createAudio('assets/lucky_dragons.mp3');\\n  background(250);\\n  textAlign(CENTER);\\n  text('start at beginning', width / 2, height / 2);\\n}\\n\\n// this function fires with click anywhere\\nfunction mousePressed() {\\n  if (beginning === true) {\\n    // here we start the sound at the beginning\\n    // time(0) is not necessary here\\n    // as this produces the same result as\\n    // play()\\n    ele.play().time(0);\\n    background(200);\\n    text('jump 2 sec in', width / 2, height / 2);\\n    beginning = false;\\n  } else {\\n    // here we jump 2 seconds into the sound\\n    ele.play().time(2);\\n    background(250);\\n    text('start at beginning', width / 2, height / 2);\\n    beginning = true;\\n  }\\n}\\n</code></div>\"\n                ],\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom',\n                overloads: [\n                  {\n                    line: 2800,\n                    params: [],\n                    return: {\n                      description: 'current time (in seconds)',\n                      type: 'Number'\n                    }\n                  },\n                  {\n                    line: 2845,\n                    params: [\n                      {\n                        name: 'time',\n                        description: '<p>time to jump to (in seconds)</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 2859,\n                description: '<p>Returns the duration of the HTML5 media element.</p>\\n',\n                itemtype: 'method',\n                name: 'duration',\n                return: {\n                  description: 'duration',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div><code>\\nvar ele;\\nfunction setup() {\\n  //p5.MediaElement objects are usually created\\n  //by calling the createAudio(), createVideo(),\\n  //and createCapture() functions.\\n  //In this example we create\\n  //a new p5.MediaElement via createAudio().\\n  ele = createAudio('assets/doorbell.mp3');\\n  background(250);\\n  textAlign(CENTER);\\n  text('Click to know the duration!', 10, 25, 70, 80);\\n}\\nfunction mouseClicked() {\\n  ele.play();\\n  background(200);\\n  //ele.duration dislpays the duration\\n  text(ele.duration() + ' seconds', width / 2, height / 2);\\n}\\n</code></div>\"\n                ],\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 2990,\n                description:\n                  '<p>Schedule an event to be called when the audio or video\\nelement reaches the end. If the element is looping,\\nthis will not be called. The element is passed in\\nas the argument to the onended callback.</p>\\n',\n                itemtype: 'method',\n                name: 'onended',\n                params: [\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>function to call when the\\n                            soundfile has ended. The\\n                            media element will be passed\\n                            in as the argument to the\\n                            callback.</p>\\n',\n                    type: 'Function'\n                  }\n                ],\n                chainable: 1,\n                example: [\n                  \"\\n<div><code>\\nfunction setup() {\\n  var audioEl = createAudio('assets/beat.mp3');\\n  audioEl.showControls();\\n  audioEl.onended(sayDone);\\n}\\n\\nfunction sayDone(elt) {\\n  alert('done playing ' + elt.src);\\n}\\n</code></div>\"\n                ],\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 3021,\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 3023,\n                description:\n                  '<p>Send the audio output of this element to a specified audioNode or\\np5.sound object. If no element is provided, connects to p5&#39;s master\\noutput. That connection is established when this method is first called.\\nAll connections are removed by the .disconnect() method.</p>\\n<p>This method is meant to be used with the p5.sound.js addon library.</p>\\n',\n                itemtype: 'method',\n                name: 'connect',\n                params: [\n                  {\n                    name: 'audioNode',\n                    description:\n                      '<p>AudioNode from the Web Audio API,\\nor an object from the p5.sound library</p>\\n',\n                    type: 'AudioNode|Object'\n                  }\n                ],\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 3072,\n                description:\n                  '<p>Disconnect all Web Audio routing, including to master output.\\nThis is useful if you want to re-route the output through\\naudio effects, for example.</p>\\n',\n                itemtype: 'method',\n                name: 'disconnect',\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 3087,\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 3089,\n                description:\n                  '<p>Show the default MediaElement controls, as determined by the web browser.</p>\\n',\n                itemtype: 'method',\n                name: 'showControls',\n                example: [\n                  \"\\n<div><code>\\nvar ele;\\nfunction setup() {\\n  //p5.MediaElement objects are usually created\\n  //by calling the createAudio(), createVideo(),\\n  //and createCapture() functions.\\n  //In this example we create\\n  //a new p5.MediaElement via createAudio()\\n  ele = createAudio('assets/lucky_dragons.mp3');\\n  background(200);\\n  textAlign(CENTER);\\n  text('Click to Show Controls!', 10, 25, 70, 80);\\n}\\nfunction mousePressed() {\\n  ele.showControls();\\n  background(200);\\n  text('Controls Shown', width / 2, height / 2);\\n}\\n</code></div>\"\n                ],\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 3120,\n                description: '<p>Hide the default mediaElement controls.</p>\\n',\n                itemtype: 'method',\n                name: 'hideControls',\n                example: [\n                  \"\\n<div><code>\\nvar ele;\\nfunction setup() {\\n  //p5.MediaElement objects are usually created\\n  //by calling the createAudio(), createVideo(),\\n  //and createCapture() functions.\\n  //In this example we create\\n  //a new p5.MediaElement via createAudio()\\n  ele = createAudio('assets/lucky_dragons.mp3');\\n  ele.showControls();\\n  background(200);\\n  textAlign(CENTER);\\n  text('Click to hide Controls!', 10, 25, 70, 80);\\n}\\nfunction mousePressed() {\\n  ele.hideControls();\\n  background(200);\\n  text('Controls hidden', width / 2, height / 2);\\n}\\n</code></div>\"\n                ],\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 3149,\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 3160,\n                description:\n                  '<p>Schedule events to trigger every time a MediaElement\\n(audio/video) reaches a playback cue point.</p>\\n<p>Accepts a callback function, a time (in seconds) at which to trigger\\nthe callback, and an optional parameter for the callback.</p>\\n<p>Time will be passed as the first parameter to the callback function,\\nand param will be the second parameter.</p>\\n',\n                itemtype: 'method',\n                name: 'addCue',\n                params: [\n                  {\n                    name: 'time',\n                    description:\n                      '<p>Time in seconds, relative to this media\\n                            element&#39;s playback. For example, to trigger\\n                            an event every time playback reaches two\\n                            seconds, pass in the number 2. This will be\\n                            passed as the first parameter to\\n                            the callback function.</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>Name of a function that will be\\n                            called at the given time. The callback will\\n                            receive time and (optionally) param as its\\n                            two parameters.</p>\\n',\n                    type: 'Function'\n                  },\n                  {\n                    name: 'value',\n                    description:\n                      '<p>An object to be passed as the\\n                            second parameter to the\\n                            callback function.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'id ID of this cue,\\n                    useful for removeCue(id)',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div><code>\\n//\\n//\\nfunction setup() {\\n  noCanvas();\\n\\n  var audioEl = createAudio('assets/beat.mp3');\\n  audioEl.showControls();\\n\\n  // schedule three calls to changeBackground\\n  audioEl.addCue(0.5, changeBackground, color(255, 0, 0));\\n  audioEl.addCue(1.0, changeBackground, color(0, 255, 0));\\n  audioEl.addCue(2.5, changeBackground, color(0, 0, 255));\\n  audioEl.addCue(3.0, changeBackground, color(0, 255, 255));\\n  audioEl.addCue(4.2, changeBackground, color(255, 255, 0));\\n  audioEl.addCue(5.0, changeBackground, color(255, 255, 0));\\n}\\n\\nfunction changeBackground(val) {\\n  background(val);\\n}\\n</code></div>\"\n                ],\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 3224,\n                description:\n                  '<p>Remove a callback based on its ID. The ID is returned by the\\naddCue method.</p>\\n',\n                itemtype: 'method',\n                name: 'removeCue',\n                params: [\n                  {\n                    name: 'id',\n                    description: '<p>ID of the cue, as returned by addCue</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nvar audioEl, id1, id2;\\nfunction setup() {\\n  background(255, 255, 255);\\n  audioEl = createAudio('assets/beat.mp3');\\n  audioEl.showControls();\\n  // schedule five calls to changeBackground\\n  id1 = audioEl.addCue(0.5, changeBackground, color(255, 0, 0));\\n  audioEl.addCue(1.0, changeBackground, color(0, 255, 0));\\n  audioEl.addCue(2.5, changeBackground, color(0, 0, 255));\\n  audioEl.addCue(3.0, changeBackground, color(0, 255, 255));\\n  id2 = audioEl.addCue(4.2, changeBackground, color(255, 255, 0));\\n  text('Click to remove first and last Cue!', 10, 25, 70, 80);\\n}\\nfunction mousePressed() {\\n  audioEl.removeCue(id1);\\n  audioEl.removeCue(id2);\\n}\\nfunction changeBackground(val) {\\n  background(val);\\n}\\n</code></div>\"\n                ],\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 3266,\n                description:\n                  '<p>Remove all of the callbacks that had originally been scheduled\\nvia the addCue method.</p>\\n',\n                itemtype: 'method',\n                name: 'clearCues',\n                params: [\n                  {\n                    name: 'id',\n                    description: '<p>ID of the cue, as returned by addCue</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nvar audioEl;\\nfunction setup() {\\n  background(255, 255, 255);\\n  audioEl = createAudio('assets/beat.mp3');\\n  //Show the default MediaElement controls, as determined by the web browser\\n  audioEl.showControls();\\n  // schedule calls to changeBackground\\n  background(200);\\n  text('Click to change Cue!', 10, 25, 70, 80);\\n  audioEl.addCue(0.5, changeBackground, color(255, 0, 0));\\n  audioEl.addCue(1.0, changeBackground, color(0, 255, 0));\\n  audioEl.addCue(2.5, changeBackground, color(0, 0, 255));\\n  audioEl.addCue(3.0, changeBackground, color(0, 255, 255));\\n  audioEl.addCue(4.2, changeBackground, color(255, 255, 0));\\n}\\nfunction mousePressed() {\\n  // here we clear the scheduled callbacks\\n  audioEl.clearCues();\\n  // then we add some more callbacks\\n  audioEl.addCue(1, changeBackground, color(2, 2, 2));\\n  audioEl.addCue(3, changeBackground, color(255, 255, 0));\\n}\\nfunction changeBackground(val) {\\n  background(val);\\n}\\n</code></div>\"\n                ],\n                class: 'p5.MediaElement',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 3332,\n                description:\n                  '<p>Underlying File object. All normal File methods can be called on this.</p>\\n',\n                itemtype: 'property',\n                name: 'file',\n                class: 'p5.File',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 3344,\n                description: '<p>File type (image, text, etc.)</p>\\n',\n                itemtype: 'property',\n                name: 'type',\n                class: 'p5.File',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 3350,\n                description:\n                  '<p>File subtype (usually the file extension jpg, png, xml, etc.)</p>\\n',\n                itemtype: 'property',\n                name: 'subtype',\n                class: 'p5.File',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 3356,\n                description: '<p>File name</p>\\n',\n                itemtype: 'property',\n                name: 'name',\n                class: 'p5.File',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 3362,\n                description: '<p>File size</p>\\n',\n                itemtype: 'property',\n                name: 'size',\n                class: 'p5.File',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.dom.js',\n                line: 3369,\n                description: '<p>URL string containing image data.</p>\\n',\n                itemtype: 'property',\n                name: 'data',\n                class: 'p5.File',\n                module: 'p5.dom',\n                submodule: 'p5.dom'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 46,\n                description:\n                  '<p>p5.sound \\n<a href=\"https://p5js.org/reference/#/libraries/p5.sound\">https://p5js.org/reference/#/libraries/p5.sound</a></p>\\n<p>From the Processing Foundation and contributors\\n<a href=\"https://github.com/processing/p5.js-sound/graphs/contributors\">https://github.com/processing/p5.js-sound/graphs/contributors</a></p>\\n<p>MIT License (MIT)\\n<a href=\"https://github.com/processing/p5.js-sound/blob/master/LICENSE\">https://github.com/processing/p5.js-sound/blob/master/LICENSE</a></p>\\n<p>Some of the many audio libraries &amp; resources that inspire p5.sound:</p>\\n<ul>\\n<li>TONE.js (c) Yotam Mann. Licensed under The MIT License (MIT). <a href=\"https://github.com/TONEnoTONE/Tone.js\">https://github.com/TONEnoTONE/Tone.js</a></li>\\n<li>buzz.js (c) Jay Salvat. Licensed under The MIT License (MIT). <a href=\"http://buzz.jaysalvat.com/\">http://buzz.jaysalvat.com/</a></li>\\n<li>Boris Smus Web Audio API book, 2013. Licensed under the Apache License <a href=\"http://www.apache.org/licenses/LICENSE-2.0\">http://www.apache.org/licenses/LICENSE-2.0</a></li>\\n<li>wavesurfer.js <a href=\"https://github.com/katspaugh/wavesurfer.js\">https://github.com/katspaugh/wavesurfer.js</a></li>\\n<li>Web Audio Components by Jordan Santell <a href=\"https://github.com/web-audio-components\">https://github.com/web-audio-components</a></li>\\n<li><p>Wilm Thoben&#39;s Sound library for Processing <a href=\"https://github.com/processing/processing/tree/master/java/libraries/sound\">https://github.com/processing/processing/tree/master/java/libraries/sound</a></p>\\n<p>Web Audio API: <a href=\"http://w3.org/TR/webaudio/\">http://w3.org/TR/webaudio/</a></p>\\n</li>\\n</ul>\\n',\n                class: 'p5.sound',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 214,\n                description:\n                  '<p>Determine which filetypes are supported (inspired by buzz.js)\\nThe audio element (el) will only be used to test browser support for various audio formats</p>\\n',\n                class: 'p5.sound',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 363,\n                class: 'p5.sound',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 740,\n                class: 'p5.sound',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 810,\n                class: 'p5.sound',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 1005,\n                description:\n                  \"<p>Returns the Audio Context for this sketch. Useful for users\\nwho would like to dig deeper into the <a target='_blank' href=\\n'http://webaudio.github.io/web-audio-api/'>Web Audio API\\n</a>.</p>\\n\\n<p>Some browsers require users to startAudioContext\\nwith a user gesture, such as touchStarted in the example below.</p>\",\n                itemtype: 'method',\n                name: 'getAudioContext',\n                return: {\n                  description: 'AudioContext for this sketch',\n                  type: 'Object'\n                },\n                example: [\n                  \"\\n<div><code>\\n function draw() {\\n   background(255);\\n   textAlign(CENTER);\\n\\n   if (getAudioContext().state !== 'running') {\\n     text('click to start audio', width/2, height/2);\\n   } else {\\n     text('audio is enabled', width/2, height/2);\\n   }\\n }\\n\\n function touchStarted() {\\n   if (getAudioContext().state !== 'running') {\\n     getAudioContext().resume();\\n   }\\n   var synth = new p5.MonoSynth();\\n   synth.play('A4', 0.5, 0, 0.2);\\n }\\n\\n</div></code>\"\n                ],\n                class: 'p5.sound',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 1042,\n                description:\n                  '<p>It is a good practice to give users control over starting audio playback.\\nThis practice is enforced by Google Chrome&#39;s autoplay policy as of r70\\n(<a href=\"https://goo.gl/7K7WLu\">info</a>), iOS Safari, and other browsers.\\n</p>\\n\\n<p>\\nuserStartAudio() starts the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\"\\ntarget=\"_blank\" title=\"Audio Context @ MDN\">Audio Context</a> on a user gesture. It utilizes\\nthe <a href=\"https://github.com/tambien/StartAudioContext\">StartAudioContext</a> library by\\nYotam Mann (MIT Licence, 2016). Read more at <a href=\"https://github.com/tambien/StartAudioContext\">https://github.com/tambien/StartAudioContext</a>.\\n</p>\\n\\n<p>Starting the audio context on a user gesture can be as simple as <code>userStartAudio()</code>.\\nOptional parameters let you decide on a specific element that will start the audio context,\\nand/or call a function once the audio context is started.</p>',\n                params: [\n                  {\n                    name: 'element(s)',\n                    description:\n                      '<p>This argument can be an Element,\\n                              Selector String, NodeList, p5.Element,\\n                              jQuery Element, or an Array of any of those.</p>\\n',\n                    type: 'Element|Array',\n                    optional: true\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>Callback to invoke when the AudioContext has started</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    \"Returns a Promise which is resolved when\\n                                     the AudioContext state is 'running'\",\n                  type: 'Promise'\n                },\n                itemtype: 'method',\n                name: 'userStartAudio',\n                example: [\n                  \"\\n<div><code>\\nfunction setup() {\\n  var myDiv = createDiv('click to start audio');\\n  myDiv.position(0, 0);\\n\\n  var mySynth = new p5.MonoSynth();\\n\\n  // This won't play until the context has started\\n  mySynth.play('A6');\\n\\n  // Start the audio context on a click/touch event\\n  userStartAudio().then(function() {\\n     myDiv.remove();\\n   });\\n}\\n</code></div>\"\n                ],\n                class: 'p5.sound',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 1099,\n                description:\n                  '<p>Master contains AudioContext and the master sound output.</p>\\n',\n                class: 'p5.sound',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 1132,\n                description:\n                  '<p>Returns a number representing the master amplitude (volume) for sound\\nin this sketch.</p>\\n',\n                itemtype: 'method',\n                name: 'getMasterVolume',\n                return: {\n                  description:\n                    'Master amplitude (volume) for sound in this sketch.\\n                 Should be between 0.0 (silence) and 1.0.',\n                  type: 'Number'\n                },\n                class: 'p5.sound',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 1143,\n                description:\n                  '<p>Scale the output of all sound in this sketch</p>\\nScaled between 0.0 (silence) and 1.0 (full volume).\\n1.0 is the maximum amplitude of a digital sound, so multiplying\\nby greater than 1.0 may cause digital distortion. To\\nfade, provide a <code>rampTime</code> parameter. For more\\ncomplex fades, see the Envelope class.\\n\\nAlternately, you can pass in a signal source such as an\\noscillator to modulate the amplitude with an audio signal.\\n\\n<p><b>How This Works</b>: When you load the p5.sound module, it\\ncreates a single instance of p5sound. All sound objects in this\\nmodule output to p5sound before reaching your computer&#39;s output.\\nSo if you change the amplitude of p5sound, it impacts all of the\\nsound in this module.</p>\\n\\n<p>If no value is provided, returns a Web Audio API Gain Node</p>',\n                itemtype: 'method',\n                name: 'masterVolume',\n                params: [\n                  {\n                    name: 'volume',\n                    description:\n                      '<p>Volume (amplitude) between 0.0\\n                                   and 1.0 or modulating signal/oscillator</p>\\n',\n                    type: 'Number|Object'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>Fade for t seconds</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>Schedule this event to happen at\\n                               t seconds in the future</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.sound',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 1185,\n                description:\n                  '<p><code>p5.soundOut</code> is the p5.sound master output. It sends output to\\nthe destination of this window&#39;s web audio context. It contains\\nWeb Audio API nodes including a dyanmicsCompressor (<code>.limiter</code>),\\nand Gain Nodes for <code>.input</code> and <code>.output</code>.</p>\\n',\n                itemtype: 'property',\n                name: 'soundOut',\n                type: 'Object',\n                class: 'p5.sound',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 1210,\n                class: 'p5',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 1213,\n                description:\n                  '<p>Returns a number representing the sample rate, in samples per second,\\nof all sound objects in this audio context. It is determined by the\\nsampling rate of your operating system&#39;s sound card, and it is not\\ncurrently possile to change.\\nIt is often 44100, or twice the range of human hearing.</p>\\n',\n                itemtype: 'method',\n                name: 'sampleRate',\n                return: {\n                  description: 'samplerate samples per second',\n                  type: 'Number'\n                },\n                class: 'p5',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 1226,\n                description:\n                  '<p>Returns the closest MIDI note value for\\na given frequency.</p>\\n',\n                itemtype: 'method',\n                name: 'freqToMidi',\n                params: [\n                  {\n                    name: 'frequency',\n                    description:\n                      '<p>A freqeuncy, for example, the &quot;A&quot;\\n                           above Middle C is 440Hz</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'MIDI note value',\n                  type: 'Number'\n                },\n                class: 'p5',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 1240,\n                description:\n                  '<p>Returns the frequency value of a MIDI note value.\\nGeneral MIDI treats notes as integers where middle C\\nis 60, C# is 61, D is 62 etc. Useful for generating\\nmusical frequencies with oscillators.</p>\\n',\n                itemtype: 'method',\n                name: 'midiToFreq',\n                params: [\n                  {\n                    name: 'midiNote',\n                    description: '<p>The number of a MIDI note</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'Frequency value of the given MIDI note',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div><code>\\nvar notes = [60, 64, 67, 72];\\nvar i = 0;\\n\\nfunction setup() {\\n  osc = new p5.Oscillator('Triangle');\\n  osc.start();\\n  frameRate(1);\\n}\\n\\nfunction draw() {\\n  var freq = midiToFreq(notes[i]);\\n  osc.freq(freq);\\n  i++;\\n  if (i >= notes.length){\\n    i = 0;\\n  }\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 1302,\n                description:\n                  '<p>List the SoundFile formats that you will include. LoadSound\\nwill search your directory for these extensions, and will pick\\na format that is compatable with the client&#39;s web browser.\\n<a href=\"http://media.io/\">Here</a> is a free online file\\nconverter.</p>\\n',\n                itemtype: 'method',\n                name: 'soundFormats',\n                params: [\n                  {\n                    name: 'formats',\n                    description:\n                      '<p>i.e. &#39;mp3&#39;, &#39;wav&#39;, &#39;ogg&#39;</p>\\n',\n                    type: 'String',\n                    optional: true,\n                    multiple: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nfunction preload() {\\n  // set the global sound formats\\n  soundFormats('mp3', 'ogg');\\n\\n  // load either beatbox.mp3, or .ogg, depending on browser\\n  mySound = loadSound('assets/beatbox.mp3');\\n}\\n\\nfunction setup() {\\n  mySound.play();\\n}\\n</code></div>\"\n                ],\n                class: 'p5',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 1415,\n                description: '<p>Used by Osc and Envelope to chain signal math</p>\\n',\n                class: 'p5',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 1763,\n                description:\n                  '<p>loadSound() returns a new p5.SoundFile from a specified\\npath. If called during preload(), the p5.SoundFile will be ready\\nto play in time for setup() and draw(). If called outside of\\npreload, the p5.SoundFile will not be ready immediately, so\\nloadSound accepts a callback as the second parameter. Using a\\n<a href=\"https://github.com/processing/p5.js/wiki/Local-server\">\\nlocal server</a> is recommended when loading external files.</p>\\n',\n                itemtype: 'method',\n                name: 'loadSound',\n                params: [\n                  {\n                    name: 'path',\n                    description:\n                      '<p>Path to the sound file, or an array with\\n                                  paths to soundfiles in multiple formats\\n                                  i.e. [&#39;sound.ogg&#39;, &#39;sound.mp3&#39;].\\n                                  Alternately, accepts an object: either\\n                                  from the HTML5 File API, or a p5.File.</p>\\n',\n                    type: 'String|Array'\n                  },\n                  {\n                    name: 'successCallback',\n                    description: '<p>Name of a function to call once file loads</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>Name of a function to call if there is\\n                                    an error loading the file.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'whileLoading',\n                    description:\n                      '<p>Name of a function to call while file is loading.\\n                               This function will receive the percentage loaded\\n                               so far, from 0.0 to 1.0.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'Returns a p5.SoundFile',\n                  type: 'SoundFile'\n                },\n                example: [\n                  \"\\n<div><code>\\nfunction preload() {\\n mySound = loadSound('assets/doorbell.mp3');\\n}\\n\\nfunction setup() {\\n  mySound.setVolume(0.1);\\n  mySound.play();\\n}\\n</code></div>\"\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 1919,\n                description:\n                  '<p>Returns true if the sound file finished loading successfully.</p>\\n',\n                itemtype: 'method',\n                name: 'isLoaded',\n                return: {\n                  description: '',\n                  type: 'Boolean'\n                },\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 1932,\n                description: '<p>Play the p5.SoundFile</p>\\n',\n                itemtype: 'method',\n                name: 'play',\n                params: [\n                  {\n                    name: 'startTime',\n                    description:\n                      '<p>(optional) schedule playback to start (in seconds from now).</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'rate',\n                    description: '<p>(optional) playback rate</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'amp',\n                    description:\n                      '<p>(optional) amplitude (volume)\\n                                    of playback</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'cueStart',\n                    description: '<p>(optional) cue start time in seconds</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'duration',\n                    description: '<p>(optional) duration of playback in seconds</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2022,\n                description:\n                  '<p>p5.SoundFile has two play modes: <code>restart</code> and\\n<code>sustain</code>. Play Mode determines what happens to a\\np5.SoundFile if it is triggered while in the middle of playback.\\nIn sustain mode, playback will continue simultaneous to the\\nnew playback. In restart mode, play() will stop playback\\nand start over. With untilDone, a sound will play only if it&#39;s\\nnot already playing. Sustain is the default mode.</p>\\n',\n                itemtype: 'method',\n                name: 'playMode',\n                params: [\n                  {\n                    name: 'str',\n                    description:\n                      '<p>&#39;restart&#39; or &#39;sustain&#39; or &#39;untilDone&#39;</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nvar mySound;\\nfunction preload(){\\n  mySound = loadSound('assets/Damscray_DancingTiger.mp3');\\n}\\nfunction mouseClicked() {\\n  mySound.playMode('sustain');\\n  mySound.play();\\n}\\nfunction keyPressed() {\\n  mySound.playMode('restart');\\n  mySound.play();\\n}\\n\\n </code></div>\"\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2066,\n                description:\n                  '<p>Pauses a file that is currently playing. If the file is not\\nplaying, then nothing will happen.</p>\\n<p>After pausing, .play() will resume from the paused\\nposition.\\nIf p5.SoundFile had been set to loop before it was paused,\\nit will continue to loop after it is unpaused with .play().</p>\\n',\n                itemtype: 'method',\n                name: 'pause',\n                params: [\n                  {\n                    name: 'startTime',\n                    description:\n                      '<p>(optional) schedule event to occur\\n                             seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nvar soundFile;\\n\\nfunction preload() {\\n  soundFormats('ogg', 'mp3');\\n  soundFile = loadSound('assets/Damscray_-_Dancing_Tiger_02.mp3');\\n}\\nfunction setup() {\\n  background(0, 255, 0);\\n  soundFile.setVolume(0.1);\\n  soundFile.loop();\\n}\\nfunction keyTyped() {\\n  if (key == 'p') {\\n    soundFile.pause();\\n    background(255, 0, 0);\\n  }\\n}\\n\\nfunction keyReleased() {\\n  if (key == 'p') {\\n    soundFile.play();\\n    background(0, 255, 0);\\n  }\\n}\\n</code>\\n</div>\"\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2122,\n                description:\n                  '<p>Loop the p5.SoundFile. Accepts optional parameters to set the\\nplayback rate, playback volume, loopStart, loopEnd.</p>\\n',\n                itemtype: 'method',\n                name: 'loop',\n                params: [\n                  {\n                    name: 'startTime',\n                    description:\n                      '<p>(optional) schedule event to occur\\n                            seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'rate',\n                    description: '<p>(optional) playback rate</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'amp',\n                    description: '<p>(optional) playback volume</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'cueLoopStart',\n                    description: '<p>(optional) startTime in seconds</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'duration',\n                    description: '<p>(optional) loop duration in seconds</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2138,\n                description:\n                  '<p>Set a p5.SoundFile&#39;s looping flag to true or false. If the sound\\nis currently playing, this change will take effect when it\\nreaches the end of the current playback.</p>\\n',\n                itemtype: 'method',\n                name: 'setLoop',\n                params: [\n                  {\n                    name: 'Boolean',\n                    description: '<p>set looping to true or false</p>\\n',\n                    type: 'Boolean'\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2159,\n                description:\n                  '<p>Returns &#39;true&#39; if a p5.SoundFile is currently looping and playing, &#39;false&#39; if not.</p>\\n',\n                itemtype: 'method',\n                name: 'isLooping',\n                return: {\n                  description: '',\n                  type: 'Boolean'\n                },\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2174,\n                description:\n                  '<p>Returns true if a p5.SoundFile is playing, false if not (i.e.\\npaused or stopped).</p>\\n',\n                itemtype: 'method',\n                name: 'isPlaying',\n                return: {\n                  description: '',\n                  type: 'Boolean'\n                },\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2184,\n                description:\n                  '<p>Returns true if a p5.SoundFile is paused, false if not (i.e.\\nplaying or stopped).</p>\\n',\n                itemtype: 'method',\n                name: 'isPaused',\n                return: {\n                  description: '',\n                  type: 'Boolean'\n                },\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2194,\n                description: '<p>Stop soundfile playback.</p>\\n',\n                itemtype: 'method',\n                name: 'stop',\n                params: [\n                  {\n                    name: 'startTime',\n                    description:\n                      '<p>(optional) schedule event to occur\\n                            in seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2239,\n                description:\n                  '<p>Multiply the output volume (amplitude) of a sound file\\nbetween 0.0 (silence) and 1.0 (full volume).\\n1.0 is the maximum amplitude of a digital sound, so multiplying\\nby greater than 1.0 may cause digital distortion. To\\nfade, provide a <code>rampTime</code> parameter. For more\\ncomplex fades, see the Envelope class.</p>\\n<p>Alternately, you can pass in a signal source such as an\\noscillator to modulate the amplitude with an audio signal.</p>\\n',\n                itemtype: 'method',\n                name: 'setVolume',\n                params: [\n                  {\n                    name: 'volume',\n                    description:\n                      '<p>Volume (amplitude) between 0.0\\n                                   and 1.0 or modulating signal/oscillator</p>\\n',\n                    type: 'Number|Object'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>Fade for t seconds</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>Schedule this event to happen at\\n                               t seconds in the future</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2280,\n                description:\n                  '<p>Set the stereo panning of a p5.sound object to\\na floating point number between -1.0 (left) and 1.0 (right).\\nDefault is 0.0 (center).</p>\\n',\n                itemtype: 'method',\n                name: 'pan',\n                params: [\n                  {\n                    name: 'panValue',\n                    description: '<p>Set the stereo panner</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>schedule this event to happen\\n                                seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\n\\n var ball = {};\\n var soundFile;\\n\\n function preload() {\\n   soundFormats('ogg', 'mp3');\\n   soundFile = loadSound('assets/beatbox.mp3');\\n }\\n\\n function draw() {\\n   background(0);\\n   ball.x = constrain(mouseX, 0, width);\\n   ellipse(ball.x, height/2, 20, 20)\\n }\\n\\n function mousePressed(){\\n   // map the ball's x location to a panning degree\\n   // between -1.0 (left) and 1.0 (right)\\n   var panning = map(ball.x, 0., width,-1.0, 1.0);\\n   soundFile.pan(panning);\\n   soundFile.play();\\n }\\n </div></code>\"\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2319,\n                description:\n                  '<p>Returns the current stereo pan position (-1.0 to 1.0)</p>\\n',\n                itemtype: 'method',\n                name: 'getPan',\n                return: {\n                  description:\n                    'Returns the stereo pan setting of the Oscillator\\n                         as a number between -1.0 (left) and 1.0 (right).\\n                         0.0 is center and default.',\n                  type: 'Number'\n                },\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2330,\n                description:\n                  '<p>Set the playback rate of a sound file. Will change the speed and the pitch.\\nValues less than zero will reverse the audio buffer.</p>\\n',\n                itemtype: 'method',\n                name: 'rate',\n                params: [\n                  {\n                    name: 'playbackRate',\n                    description:\n                      '<p>Set the playback rate. 1.0 is normal,\\n                                   .5 is half-speed, 2.0 is twice as fast.\\n                                   Values less than zero play backwards.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nvar song;\\n\\nfunction preload() {\\n  song = loadSound('assets/Damscray_DancingTiger.mp3');\\n}\\n\\nfunction setup() {\\n  song.loop();\\n}\\n\\nfunction draw() {\\n  background(200);\\n\\n  // Set the rate to a range between 0.1 and 4\\n  // Changing the rate also alters the pitch\\n  var speed = map(mouseY, 0.1, height, 0, 2);\\n  speed = constrain(speed, 0.01, 4);\\n  song.rate(speed);\\n\\n  // Draw a circle to show what is going on\\n  stroke(0);\\n  fill(51, 100);\\n  ellipse(mouseX, 100, 48, 48);\\n}\\n\\n </code>\\n </div>\\n\"\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2403,\n                description: '<p>Returns the duration of a sound file in seconds.</p>\\n',\n                itemtype: 'method',\n                name: 'duration',\n                return: {\n                  description: 'The duration of the soundFile in seconds.',\n                  type: 'Number'\n                },\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2417,\n                description:\n                  '<p>Return the current position of the p5.SoundFile playhead, in seconds.\\nTime is relative to the normal buffer direction, so if <code>reverseBuffer</code>\\nhas been called, currentTime will count backwards.</p>\\n',\n                itemtype: 'method',\n                name: 'currentTime',\n                return: {\n                  description: 'currentTime of the soundFile in seconds.',\n                  type: 'Number'\n                },\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2428,\n                description:\n                  '<p>Move the playhead of the song to a position, in seconds. Start timing\\nand playback duration. If none are given, will reset the file to play\\nentire duration from start to finish.</p>\\n',\n                itemtype: 'method',\n                name: 'jump',\n                params: [\n                  {\n                    name: 'cueTime',\n                    description: '<p>cueTime of the soundFile in seconds.</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'duration',\n                    description: '<p>duration in seconds.</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2451,\n                description:\n                  '<p>Return the number of channels in a sound file.\\nFor example, Mono = 1, Stereo = 2.</p>\\n',\n                itemtype: 'method',\n                name: 'channels',\n                return: {\n                  description: '[channels]',\n                  type: 'Number'\n                },\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2461,\n                description: '<p>Return the sample rate of the sound file.</p>\\n',\n                itemtype: 'method',\n                name: 'sampleRate',\n                return: {\n                  description: '[sampleRate]',\n                  type: 'Number'\n                },\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2470,\n                description:\n                  '<p>Return the number of samples in a sound file.\\nEqual to sampleRate * duration.</p>\\n',\n                itemtype: 'method',\n                name: 'frames',\n                return: {\n                  description: '[sampleCount]',\n                  type: 'Number'\n                },\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2480,\n                description:\n                  '<p>Returns an array of amplitude peaks in a p5.SoundFile that can be\\nused to draw a static waveform. Scans through the p5.SoundFile&#39;s\\naudio buffer to find the greatest amplitudes. Accepts one\\nparameter, &#39;length&#39;, which determines size of the array.\\nLarger arrays result in more precise waveform visualizations.</p>\\n<p>Inspired by Wavesurfer.js.</p>\\n',\n                itemtype: 'method',\n                name: 'getPeaks',\n                params: [\n                  {\n                    name: 'length',\n                    description:\n                      '<p>length is the size of the returned array.\\n                         Larger length results in more precision.\\n                         Defaults to 5*width of the browser window.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'Array of peaks.',\n                  type: 'Float32Array'\n                },\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2532,\n                description:\n                  '<p>Reverses the p5.SoundFile&#39;s buffer source.\\nPlayback must be handled separately (see example).</p>\\n',\n                itemtype: 'method',\n                name: 'reverseBuffer',\n                example: [\n                  \"\\n<div><code>\\nvar drum;\\n\\nfunction preload() {\\n  drum = loadSound('assets/drum.mp3');\\n}\\n\\nfunction setup() {\\n  drum.reverseBuffer();\\n  drum.play();\\n}\\n\\n </code>\\n </div>\"\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2572,\n                description:\n                  '<p>Schedule an event to be called when the soundfile\\nreaches the end of a buffer. If the soundfile is\\nplaying through once, this will be called when it\\nends. If it is looping, it will be called when\\nstop is called.</p>\\n',\n                itemtype: 'method',\n                name: 'onended',\n                params: [\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>function to call when the\\n                            soundfile has ended.</p>\\n',\n                    type: 'Function'\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2625,\n                description:\n                  '<p>Connects the output of a p5sound object to input of another\\np5.sound object. For example, you may connect a p5.SoundFile to an\\nFFT or an Effect. If no parameter is given, it will connect to\\nthe master output. Most p5sound objects connect to the master\\noutput when they are created.</p>\\n',\n                itemtype: 'method',\n                name: 'connect',\n                params: [\n                  {\n                    name: 'object',\n                    description: '<p>Audio object that accepts an input</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2646,\n                description: '<p>Disconnects the output of this p5sound object.</p>\\n',\n                itemtype: 'method',\n                name: 'disconnect',\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2656,\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2661,\n                description:\n                  '<p>Reset the source for this SoundFile to a\\nnew path (URL).</p>\\n',\n                itemtype: 'method',\n                name: 'setPath',\n                params: [\n                  {\n                    name: 'path',\n                    description: '<p>path to audio file</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description: '<p>Callback</p>\\n',\n                    type: 'Function'\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2674,\n                description: '<p>Replace the current Audio Buffer with a new Buffer.</p>\\n',\n                itemtype: 'method',\n                name: 'setBuffer',\n                params: [\n                  {\n                    name: 'buf',\n                    description:\n                      '<p>Array of Float32 Array(s). 2 Float32 Arrays\\n                   will create a stereo source. 1 will create\\n                   a mono source.</p>\\n',\n                    type: 'Array'\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2741,\n                description:\n                  '<p>processPeaks returns an array of timestamps where it thinks there is a beat.</p>\\n<p>This is an asynchronous function that processes the soundfile in an offline audio context,\\nand sends the results to your callback function.</p>\\n<p>The process involves running the soundfile through a lowpass filter, and finding all of the\\npeaks above the initial threshold. If the total number of peaks are below the minimum number of peaks,\\nit decreases the threshold and re-runs the analysis until either minPeaks or minThreshold are reached.</p>\\n',\n                itemtype: 'method',\n                name: 'processPeaks',\n                params: [\n                  {\n                    name: 'callback',\n                    description: '<p>a function to call once this data is returned</p>\\n',\n                    type: 'Function'\n                  },\n                  {\n                    name: 'initThreshold',\n                    description: '<p>initial threshold defaults to 0.9</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'minThreshold',\n                    description: '<p>minimum threshold defaults to 0.22</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'minPeaks',\n                    description: '<p>minimum number of peaks defaults to 200</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'Array of timestamped peaks',\n                  type: 'Array'\n                },\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2934,\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 2943,\n                description:\n                  '<p>Schedule events to trigger every time a MediaElement\\n(audio/video) reaches a playback cue point.</p>\\n<p>Accepts a callback function, a time (in seconds) at which to trigger\\nthe callback, and an optional parameter for the callback.</p>\\n<p>Time will be passed as the first parameter to the callback function,\\nand param will be the second parameter.</p>\\n',\n                itemtype: 'method',\n                name: 'addCue',\n                params: [\n                  {\n                    name: 'time',\n                    description:\n                      '<p>Time in seconds, relative to this media\\n                           element&#39;s playback. For example, to trigger\\n                           an event every time playback reaches two\\n                           seconds, pass in the number 2. This will be\\n                           passed as the first parameter to\\n                           the callback function.</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>Name of a function that will be\\n                           called at the given time. The callback will\\n                           receive time and (optionally) param as its\\n                           two parameters.</p>\\n',\n                    type: 'Function'\n                  },\n                  {\n                    name: 'value',\n                    description:\n                      '<p>An object to be passed as the\\n                           second parameter to the\\n                           callback function.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'id ID of this cue,\\n                    useful for removeCue(id)',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div><code>\\nvar mySound;\\nfunction preload() {\\n  mySound = loadSound(\\'assets/beat.mp3\\');\\n}\\n\\nfunction setup() {\\n  background(0);\\n  noStroke();\\n  fill(255);\\n  textAlign(CENTER);\\n  text(\\'click to play\\', width/2, height/2);\\n\\n  // schedule calls to changeText\\n  mySound.addCue(0.50, changeText, \"hello\" );\\n  mySound.addCue(1.00, changeText, \"p5\" );\\n  mySound.addCue(1.50, changeText, \"what\" );\\n  mySound.addCue(2.00, changeText, \"do\" );\\n  mySound.addCue(2.50, changeText, \"you\" );\\n  mySound.addCue(3.00, changeText, \"want\" );\\n  mySound.addCue(4.00, changeText, \"to\" );\\n  mySound.addCue(5.00, changeText, \"make\" );\\n  mySound.addCue(6.00, changeText, \"?\" );\\n}\\n\\nfunction changeText(val) {\\n  background(0);\\n  text(val, width/2, height/2);\\n}\\n\\nfunction mouseClicked() {\\n  if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\\n    if (mySound.isPlaying() ) {\\n      mySound.stop();\\n    } else {\\n      mySound.play();\\n    }\\n  }\\n}\\n</code></div>'\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 3021,\n                description:\n                  '<p>Remove a callback based on its ID. The ID is returned by the\\naddCue method.</p>\\n',\n                itemtype: 'method',\n                name: 'removeCue',\n                params: [\n                  {\n                    name: 'id',\n                    description: '<p>ID of the cue, as returned by addCue</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 3040,\n                description:\n                  '<p>Remove all of the callbacks that had originally been scheduled\\nvia the addCue method.</p>\\n',\n                itemtype: 'method',\n                name: 'clearCues',\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 3065,\n                description:\n                  '<p>Save a p5.SoundFile as a .wav file. The browser will prompt the user\\nto download the file to their device. To upload a file to a server, see\\n<a href=\"/docs/reference/#/p5.SoundFile/getBlob\">getBlob</a></p>\\n',\n                itemtype: 'method',\n                name: 'save',\n                params: [\n                  {\n                    name: 'fileName',\n                    description: '<p>name of the resulting .wav file.</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n <div><code>\\n var inp, button, mySound;\\n var fileName = 'cool';\\n function preload() {\\n   mySound = loadSound('assets/doorbell.mp3');\\n }\\n function setup() {\\n   btn = createButton('click to save file');\\n   btn.position(0, 0);\\n   btn.mouseClicked(handleMouseClick);\\n }\\n\\n function handleMouseClick() {\\n   mySound.save(fileName);\\n }\\n</code></div>\"\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 3094,\n                description:\n                  '<p>This method is useful for sending a SoundFile to a server. It returns the\\n.wav-encoded audio data as a &quot;<a target=\"_blank\" title=\"Blob reference at\\nMDN\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Blob\">Blob</a>&quot;.\\nA Blob is a file-like data object that can be uploaded to a server\\nwith an <a href=\"/docs/reference/#/p5/httpDo\">http</a> request. We&#39;ll\\nuse the <code>httpDo</code> options object to send a POST request with some\\nspecific options: we encode the request as <code>multipart/form-data</code>,\\nand attach the blob as one of the form values using <code>FormData</code>.</p>\\n',\n                itemtype: 'method',\n                name: 'getBlob',\n                return: {\n                  description: 'A file-like data object',\n                  type: 'Blob'\n                },\n                example: [\n                  \"\\n <div><code>\\n\\n function preload() {\\n   mySound = loadSound('assets/doorbell.mp3');\\n }\\n\\n function setup() {\\n   noCanvas();\\n   var soundBlob = mySound.getBlob();\\n\\n   // Now we can send the blob to a server...\\n   var serverUrl = 'https://jsonplaceholder.typicode.com/posts';\\n   var httpRequestOptions = {\\n     method: 'POST',\\n     body: new FormData().append('soundBlob', soundBlob),\\n     headers: new Headers({\\n       'Content-Type': 'multipart/form-data'\\n     })\\n   };\\n   httpDo(serverUrl, httpRequestOptions);\\n\\n   // We can also create an `ObjectURL` pointing to the Blob\\n   var blobUrl = URL.createObjectURL(soundBlob);\\n\\n   // The `<Audio>` Element accepts Object URL's\\n   var htmlAudioElt = createAudio(blobUrl).showControls();\\n\\n   createDiv();\\n\\n   // The ObjectURL exists as long as this tab is open\\n   var input = createInput(blobUrl);\\n   input.attribute('readonly', true);\\n   input.mouseClicked(function() { input.elt.select() });\\n }\\n\\n</code></div>\"\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 3257,\n                description:\n                  '<p>Connects to the p5sound instance (master output) by default.\\nOptionally, you can pass in a specific source (i.e. a soundfile).</p>\\n',\n                itemtype: 'method',\n                name: 'setInput',\n                params: [\n                  {\n                    name: 'snd',\n                    description:\n                      '<p>set the sound source\\n                                     (optional, defaults to\\n                                     master output)</p>\\n',\n                    type: 'SoundObject|undefined',\n                    optional: true\n                  },\n                  {\n                    name: 'smoothing',\n                    description:\n                      '<p>a range between 0.0 and 1.0\\n                                      to smooth amplitude readings</p>\\n',\n                    type: 'Number|undefined',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nfunction preload(){\\n  sound1 = loadSound('assets/beat.mp3');\\n  sound2 = loadSound('assets/drum.mp3');\\n}\\nfunction setup(){\\n  amplitude = new p5.Amplitude();\\n  sound1.play();\\n  sound2.play();\\n  amplitude.setInput(sound2);\\n}\\nfunction draw() {\\n  background(0);\\n  fill(255);\\n  var level = amplitude.getLevel();\\n  var size = map(level, 0, 1, 0, 200);\\n  ellipse(width/2, height/2, size, size);\\n}\\nfunction mouseClicked(){\\n  sound1.stop();\\n  sound2.stop();\\n}\\n</code></div>\"\n                ],\n                class: 'p5.Amplitude',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 3364,\n                description:\n                  '<p>Returns a single Amplitude reading at the moment it is called.\\nFor continuous readings, run in the draw loop.</p>\\n',\n                itemtype: 'method',\n                name: 'getLevel',\n                params: [\n                  {\n                    name: 'channel',\n                    description:\n                      '<p>Optionally return only channel 0 (left) or 1 (right)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'Amplitude as a number between 0.0 and 1.0',\n                  type: 'Number'\n                },\n                example: [\n                  \"\\n<div><code>\\nfunction preload(){\\n  sound = loadSound('assets/beat.mp3');\\n}\\nfunction setup() {\\n  amplitude = new p5.Amplitude();\\n  sound.play();\\n}\\nfunction draw() {\\n  background(0);\\n  fill(255);\\n  var level = amplitude.getLevel();\\n  var size = map(level, 0, 1, 0, 200);\\n  ellipse(width/2, height/2, size, size);\\n}\\nfunction mouseClicked(){\\n  sound.stop();\\n}\\n</code></div>\"\n                ],\n                class: 'p5.Amplitude',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 3405,\n                description:\n                  '<p>Determines whether the results of Amplitude.process() will be\\nNormalized. To normalize, Amplitude finds the difference the\\nloudest reading it has processed and the maximum amplitude of\\n1.0. Amplitude adds this difference to all values to produce\\nresults that will reliably map between 0.0 and 1.0. However,\\nif a louder moment occurs, the amount that Normalize adds to\\nall the values will change. Accepts an optional boolean parameter\\n(true or false). Normalizing is off by default.</p>\\n',\n                itemtype: 'method',\n                name: 'toggleNormalize',\n                params: [\n                  {\n                    name: 'boolean',\n                    description: '<p>set normalize to true (1) or false (0)</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Amplitude',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 3425,\n                description:\n                  '<p>Smooth Amplitude analysis by averaging with the last analysis\\nframe. Off by default.</p>\\n',\n                itemtype: 'method',\n                name: 'smooth',\n                params: [\n                  {\n                    name: 'set',\n                    description: '<p>smoothing from 0.0 &lt;= 1</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Amplitude',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 3599,\n                description:\n                  '<p>Set the input source for the FFT analysis. If no source is\\nprovided, FFT will analyze all sound in the sketch.</p>\\n',\n                itemtype: 'method',\n                name: 'setInput',\n                params: [\n                  {\n                    name: 'source',\n                    description: '<p>p5.sound object (or web audio API source node)</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 3618,\n                description:\n                  '<p>Returns an array of amplitude values (between -1.0 and +1.0) that represent\\na snapshot of amplitude readings in a single buffer. Length will be\\nequal to bins (defaults to 1024). Can be used to draw the waveform\\nof a sound.</p>\\n',\n                itemtype: 'method',\n                name: 'waveform',\n                params: [\n                  {\n                    name: 'bins',\n                    description:\n                      '<p>Must be a power of two between\\n                          16 and 1024. Defaults to 1024.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'precision',\n                    description:\n                      '<p>If any value is provided, will return results\\n                            in a Float32 Array which is more precise\\n                            than a regular array.</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'Array    Array of amplitude values (-1 to 1)\\n                          over time. Array length = bins.',\n                  type: 'Array'\n                },\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 3661,\n                description:\n                  '<p>Returns an array of amplitude values (between 0 and 255)\\nacross the frequency spectrum. Length is equal to FFT bins\\n(1024 by default). The array indices correspond to frequencies\\n(i.e. pitches), from the lowest to the highest that humans can\\nhear. Each value represents amplitude at that slice of the\\nfrequency spectrum. Must be called prior to using\\n<code>getEnergy()</code>.</p>\\n',\n                itemtype: 'method',\n                name: 'analyze',\n                params: [\n                  {\n                    name: 'bins',\n                    description:\n                      '<p>Must be a power of two between\\n                           16 and 1024. Defaults to 1024.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'scale',\n                    description:\n                      '<p>If &quot;dB,&quot; returns decibel\\n                           float measurements between\\n                           -140 and 0 (max).\\n                           Otherwise returns integers from 0-255.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'spectrum    Array of energy (amplitude/volume)\\n                            values across the frequency spectrum.\\n                            Lowest energy (silence) = 0, highest\\n                            possible is 255.',\n                  type: 'Array'\n                },\n                example: [\n                  \"\\n<div><code>\\nvar osc;\\nvar fft;\\n\\nfunction setup(){\\n  createCanvas(100,100);\\n  osc = new p5.Oscillator();\\n  osc.amp(0);\\n  osc.start();\\n  fft = new p5.FFT();\\n}\\n\\nfunction draw(){\\n  background(0);\\n\\n  var freq = map(mouseX, 0, 800, 20, 15000);\\n  freq = constrain(freq, 1, 20000);\\n  osc.freq(freq);\\n\\n  var spectrum = fft.analyze();\\n  noStroke();\\n  fill(0,255,0); // spectrum is green\\n  for (var i = 0; i< spectrum.length; i++){\\n    var x = map(i, 0, spectrum.length, 0, width);\\n    var h = -height + map(spectrum[i], 0, 255, height, 0);\\n    rect(x, height, width / spectrum.length, h );\\n  }\\n\\n  stroke(255);\\n  text('Freq: ' + round(freq)+'Hz', 10, 10);\\n\\n  isMouseOverCanvas();\\n}\\n\\n// only play sound when mouse is over canvas\\nfunction isMouseOverCanvas() {\\n  var mX = mouseX, mY = mouseY;\\n  if (mX > 0 && mX < width && mY < height && mY > 0) {\\n    osc.amp(0.5, 0.2);\\n  } else {\\n    osc.amp(0, 0.2);\\n  }\\n}\\n</code></div>\\n\\n\"\n                ],\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 3753,\n                description:\n                  '<p>Returns the amount of energy (volume) at a specific\\n<a href=\"https://en.wikipedia.org/wiki/Audio_frequency\" target=\"_blank\">\\nfrequency</a>, or the average amount of energy between two\\nfrequencies. Accepts Number(s) corresponding\\nto frequency (in Hz), or a String corresponding to predefined\\nfrequency ranges (&quot;bass&quot;, &quot;lowMid&quot;, &quot;mid&quot;, &quot;highMid&quot;, &quot;treble&quot;).\\nReturns a range between 0 (no energy/volume at that frequency) and\\n255 (maximum energy).\\n<em>NOTE: analyze() must be called prior to getEnergy(). Analyze()\\ntells the FFT to analyze frequency data, and getEnergy() uses\\nthe results determine the value at a specific frequency or\\nrange of frequencies.</em></p></p>\\n',\n                itemtype: 'method',\n                name: 'getEnergy',\n                params: [\n                  {\n                    name: 'frequency1',\n                    description:\n                      '<p>Will return a value representing\\n                              energy at this frequency. Alternately,\\n                              the strings &quot;bass&quot;, &quot;lowMid&quot; &quot;mid&quot;,\\n                              &quot;highMid&quot;, and &quot;treble&quot; will return\\n                              predefined frequency ranges.</p>\\n',\n                    type: 'Number|String'\n                  },\n                  {\n                    name: 'frequency2',\n                    description:\n                      '<p>If a second frequency is given,\\n                              will return average amount of\\n                              energy that exists between the\\n                              two frequencies.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'Energy   Energy (volume/amplitude) from\\n                            0 and 255.',\n                  type: 'Number'\n                },\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 3835,\n                description:\n                  '<p>Returns the\\n<a href=\"http://en.wikipedia.org/wiki/Spectral_centroid\" target=\"_blank\">\\nspectral centroid</a> of the input signal.\\n<em>NOTE: analyze() must be called prior to getCentroid(). Analyze()\\ntells the FFT to analyze frequency data, and getCentroid() uses\\nthe results determine the spectral centroid.</em></p></p>\\n',\n                itemtype: 'method',\n                name: 'getCentroid',\n                return: {\n                  description:\n                    'Spectral Centroid Frequency   Frequency of the spectral centroid in Hz.',\n                  type: 'Number'\n                },\n                example: [\n                  '\\n<div><code>\\n\\n\\nfunction setup(){\\ncnv = createCanvas(100,100);\\nsound = new p5.AudioIn();\\nsound.start();\\nfft = new p5.FFT();\\nsound.connect(fft);\\n}\\n\\n\\nfunction draw(){\\n\\nvar centroidplot = 0.0;\\nvar spectralCentroid = 0;\\n\\n\\nbackground(0);\\nstroke(0,255,0);\\nvar spectrum = fft.analyze();\\nfill(0,255,0); // spectrum is green\\n\\n//draw the spectrum\\nfor (var i = 0; i< spectrum.length; i++){\\n  var x = map(log(i), 0, log(spectrum.length), 0, width);\\n  var h = map(spectrum[i], 0, 255, 0, height);\\n  var rectangle_width = (log(i+1)-log(i))*(width/log(spectrum.length));\\n  rect(x, height, rectangle_width, -h )\\n}\\n\\nvar nyquist = 22050;\\n\\n// get the centroid\\nspectralCentroid = fft.getCentroid();\\n\\n// the mean_freq_index calculation is for the display.\\nvar mean_freq_index = spectralCentroid/(nyquist/spectrum.length);\\n\\ncentroidplot = map(log(mean_freq_index), 0, log(spectrum.length), 0, width);\\n\\n\\nstroke(255,0,0); // the line showing where the centroid is will be red\\n\\nrect(centroidplot, 0, width / spectrum.length, height)\\nnoStroke();\\nfill(255,255,255);  // text is white\\ntext(\"centroid: \", 10, 20);\\ntext(round(spectralCentroid)+\" Hz\", 10, 40);\\n}\\n </code></div>'\n                ],\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 3915,\n                description:\n                  '<p>Smooth FFT analysis by averaging with the last analysis frame.</p>\\n',\n                itemtype: 'method',\n                name: 'smooth',\n                params: [\n                  {\n                    name: 'smoothing',\n                    description:\n                      '<p>0.0 &lt; smoothing &lt; 1.0.\\n                             Defaults to 0.8.</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 3937,\n                description:\n                  '<p>Returns an array of average amplitude values for a given number\\nof frequency bands split equally. N defaults to 16.\\n<em>NOTE: analyze() must be called prior to linAverages(). Analyze()\\ntells the FFT to analyze frequency data, and linAverages() uses\\nthe results to group them into a smaller set of averages.</em></p></p>\\n',\n                itemtype: 'method',\n                name: 'linAverages',\n                params: [\n                  {\n                    name: 'N',\n                    description: '<p>Number of returned frequency groups</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description:\n                    'linearAverages   Array of average amplitude values for each group',\n                  type: 'Array'\n                },\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 3967,\n                description:\n                  '<p>Returns an array of average amplitude values of the spectrum, for a given\\nset of <a href=\"https://en.wikipedia.org/wiki/Octave_band\" target=\"_blank\">\\nOctave Bands</a>\\n<em>NOTE: analyze() must be called prior to logAverages(). Analyze()\\ntells the FFT to analyze frequency data, and logAverages() uses\\nthe results to group them into a smaller set of averages.</em></p></p>\\n',\n                itemtype: 'method',\n                name: 'logAverages',\n                params: [\n                  {\n                    name: 'octaveBands',\n                    description: '<p>Array of Octave Bands objects for grouping</p>\\n',\n                    type: 'Array'\n                  }\n                ],\n                return: {\n                  description:\n                    'logAverages    Array of average amplitude values for each group',\n                  type: 'Array'\n                },\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 3997,\n                description:\n                  '<p>Calculates and Returns the 1/N\\n<a href=\"https://en.wikipedia.org/wiki/Octave_band\" target=\"_blank\">Octave Bands</a>\\nN defaults to 3 and minimum central frequency to 15.625Hz.\\n(1/3 Octave Bands ~= 31 Frequency Bands)\\nSetting fCtr0 to a central value of a higher octave will ignore the lower bands\\nand produce less frequency groups.</p>\\n',\n                itemtype: 'method',\n                name: 'getOctaveBands',\n                params: [\n                  {\n                    name: 'N',\n                    description:\n                      '<p>Specifies the 1/N type of generated octave bands</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'fCtr0',\n                    description: '<p>Minimum central frequency for the lowest band</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description:\n                    'octaveBands   Array of octave band objects with their bounds',\n                  type: 'Array'\n                },\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 4055,\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 4076,\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 4135,\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 4453,\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 4625,\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 4783,\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 4824,\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 4881,\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5049,\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5097,\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5128,\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5149,\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5169,\n                class: 'p5.FFT',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5268,\n                description: '<p>Fade to value, for smooth transitions</p>\\n',\n                itemtype: 'method',\n                name: 'fade',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>Value to set this signal</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>Length of fade, in seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Signal',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5279,\n                description:\n                  '<p>Connect a p5.sound object or Web Audio node to this\\np5.Signal so that its amplitude values can be scaled.</p>\\n',\n                itemtype: 'method',\n                name: 'setInput',\n                params: [\n                  {\n                    name: 'input',\n                    description: '',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.Signal',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5293,\n                description:\n                  '<p>Add a constant value to this audio signal,\\nand return the resulting audio signal. Does\\nnot change the value of the original signal,\\ninstead it returns a new p5.SignalAdd.</p>\\n',\n                itemtype: 'method',\n                name: 'add',\n                params: [\n                  {\n                    name: 'number',\n                    description: '',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'object',\n                  type: 'p5.Signal'\n                },\n                class: 'p5.Signal',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5312,\n                description:\n                  '<p>Multiply this signal by a constant value,\\nand return the resulting audio signal. Does\\nnot change the value of the original signal,\\ninstead it returns a new p5.SignalMult.</p>\\n',\n                itemtype: 'method',\n                name: 'mult',\n                params: [\n                  {\n                    name: 'number',\n                    description: '<p>to multiply</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'object',\n                  type: 'p5.Signal'\n                },\n                class: 'p5.Signal',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5331,\n                description:\n                  '<p>Scale this signal value to a given range,\\nand return the result as an audio signal. Does\\nnot change the value of the original signal,\\ninstead it returns a new p5.SignalScale.</p>\\n',\n                itemtype: 'method',\n                name: 'scale',\n                params: [\n                  {\n                    name: 'number',\n                    description: '<p>to multiply</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'inMin',\n                    description: '<p>input range minumum</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'inMax',\n                    description: '<p>input range maximum</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'outMin',\n                    description: '<p>input range minumum</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'outMax',\n                    description: '<p>input range maximum</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'object',\n                  type: 'p5.Signal'\n                },\n                class: 'p5.Signal',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5465,\n                description:\n                  '<p>Start an oscillator. Accepts an optional parameter to\\ndetermine how long (in seconds from now) until the\\noscillator starts.</p>\\n',\n                itemtype: 'method',\n                name: 'start',\n                params: [\n                  {\n                    name: 'time',\n                    description: '<p>startTime in seconds from now.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'frequency',\n                    description: '<p>frequency in Hz.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Oscillator',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5505,\n                description:\n                  '<p>Stop an oscillator. Accepts an optional parameter\\nto determine how long (in seconds from now) until the\\noscillator stops.</p>\\n',\n                itemtype: 'method',\n                name: 'stop',\n                params: [\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>Time, in seconds from now.</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Oscillator',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5521,\n                description:\n                  '<p>Set the amplitude between 0 and 1.0. Or, pass in an object\\nsuch as an oscillator to modulate amplitude with an audio signal.</p>\\n',\n                itemtype: 'method',\n                name: 'amp',\n                params: [\n                  {\n                    name: 'vol',\n                    description:\n                      '<p>between 0 and 1.0\\n                            or a modulating signal/oscillator</p>\\n',\n                    type: 'Number|Object'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>create a fade that lasts rampTime</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>schedule this event to happen\\n                              seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    \"gain  If no value is provided,\\n                            returns the Web Audio API\\n                            AudioParam that controls\\n                            this oscillator's\\n                            gain/amplitude/volume)\",\n                  type: 'AudioParam'\n                },\n                class: 'p5.Oscillator',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5556,\n                description:\n                  '<p>Set frequency of an oscillator to a value. Or, pass in an object\\nsuch as an oscillator to modulate the frequency with an audio signal.</p>\\n',\n                itemtype: 'method',\n                name: 'freq',\n                params: [\n                  {\n                    name: 'Frequency',\n                    description:\n                      '<p>Frequency in Hz\\n                                      or modulating signal/oscillator</p>\\n',\n                    type: 'Number|Object'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>Ramp time (in seconds)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>Schedule this event to happen\\n                                 at x seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    \"Frequency If no value is provided,\\n                                returns the Web Audio API\\n                                AudioParam that controls\\n                                this oscillator's frequency\",\n                  type: 'AudioParam'\n                },\n                example: [\n                  '\\n<div><code>\\nvar osc = new p5.Oscillator(300);\\nosc.start();\\nosc.freq(40, 10);\\n</code></div>'\n                ],\n                class: 'p5.Oscillator',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5615,\n                description:\n                  '<p>Set type to &#39;sine&#39;, &#39;triangle&#39;, &#39;sawtooth&#39; or &#39;square&#39;.</p>\\n',\n                itemtype: 'method',\n                name: 'setType',\n                params: [\n                  {\n                    name: 'type',\n                    description:\n                      '<p>&#39;sine&#39;, &#39;triangle&#39;, &#39;sawtooth&#39; or &#39;square&#39;.</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.Oscillator',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5627,\n                description: '<p>Connect to a p5.sound / Web Audio object.</p>\\n',\n                itemtype: 'method',\n                name: 'connect',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '<p>A p5.sound or Web Audio object</p>\\n',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.Oscillator',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5644,\n                description: '<p>Disconnect all outputs</p>\\n',\n                itemtype: 'method',\n                name: 'disconnect',\n                class: 'p5.Oscillator',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5661,\n                description: '<p>Pan between Left (-1) and Right (1)</p>\\n',\n                itemtype: 'method',\n                name: 'pan',\n                params: [\n                  {\n                    name: 'panning',\n                    description: '<p>Number between -1 and 1</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>schedule this event to happen\\n                              seconds from now</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Oscillator',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5693,\n                description:\n                  '<p>Set the phase of an oscillator between 0.0 and 1.0.\\nIn this implementation, phase is a delay time\\nbased on the oscillator&#39;s current frequency.</p>\\n',\n                itemtype: 'method',\n                name: 'phase',\n                params: [\n                  {\n                    name: 'phase',\n                    description: '<p>float between 0.0 and 1.0</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Oscillator',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5747,\n                description:\n                  '<p>Add a value to the p5.Oscillator&#39;s output amplitude,\\nand return the oscillator. Calling this method again\\nwill override the initial add() with a new value.</p>\\n',\n                itemtype: 'method',\n                name: 'add',\n                params: [\n                  {\n                    name: 'number',\n                    description: '<p>Constant number to add</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description:\n                    'Oscillator Returns this oscillator\\n                                   with scaled output',\n                  type: 'p5.Oscillator'\n                },\n                class: 'p5.Oscillator',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5764,\n                description:\n                  '<p>Multiply the p5.Oscillator&#39;s output amplitude\\nby a fixed value (i.e. turn it up!). Calling this method\\nagain will override the initial mult() with a new value.</p>\\n',\n                itemtype: 'method',\n                name: 'mult',\n                params: [\n                  {\n                    name: 'number',\n                    description: '<p>Constant number to multiply</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description:\n                    'Oscillator Returns this oscillator\\n                                   with multiplied output',\n                  type: 'p5.Oscillator'\n                },\n                class: 'p5.Oscillator',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5780,\n                description:\n                  '<p>Scale this oscillator&#39;s amplitude values to a given\\nrange, and return the oscillator. Calling this method\\nagain will override the initial scale() with new values.</p>\\n',\n                itemtype: 'method',\n                name: 'scale',\n                params: [\n                  {\n                    name: 'inMin',\n                    description: '<p>input range minumum</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'inMax',\n                    description: '<p>input range maximum</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'outMin',\n                    description: '<p>input range minumum</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'outMax',\n                    description: '<p>input range maximum</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description:\n                    'Oscillator Returns this oscillator\\n                                   with scaled output',\n                  type: 'p5.Oscillator'\n                },\n                class: 'p5.Oscillator',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 5879,\n                class: 'p5.SqrOsc',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 6082,\n                class: 'p5.SqrOsc',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 6369,\n                description: '<p>Time until envelope reaches attackLevel</p>\\n',\n                itemtype: 'property',\n                name: 'attackTime',\n                class: 'p5.Envelope',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 6374,\n                description: '<p>Level once attack is complete.</p>\\n',\n                itemtype: 'property',\n                name: 'attackLevel',\n                class: 'p5.Envelope',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 6379,\n                description: '<p>Time until envelope reaches decayLevel.</p>\\n',\n                itemtype: 'property',\n                name: 'decayTime',\n                class: 'p5.Envelope',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 6384,\n                description:\n                  '<p>Level after decay. The envelope will sustain here until it is released.</p>\\n',\n                itemtype: 'property',\n                name: 'decayLevel',\n                class: 'p5.Envelope',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 6389,\n                description: '<p>Duration of the release portion of the envelope.</p>\\n',\n                itemtype: 'property',\n                name: 'releaseTime',\n                class: 'p5.Envelope',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 6394,\n                description: '<p>Level at the end of the release.</p>\\n',\n                itemtype: 'property',\n                name: 'releaseLevel',\n                class: 'p5.Envelope',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 6430,\n                description:\n                  '<p>Reset the envelope with a series of time/value pairs.</p>\\n',\n                itemtype: 'method',\n                name: 'set',\n                params: [\n                  {\n                    name: 'attackTime',\n                    description:\n                      '<p>Time (in seconds) before level\\n                               reaches attackLevel</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'attackLevel',\n                    description:\n                      '<p>Typically an amplitude between\\n                               0.0 and 1.0</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'decayTime',\n                    description: '<p>Time</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'decayLevel',\n                    description:\n                      '<p>Amplitude (In a standard ADSR envelope,\\n                               decayLevel = sustainLevel)</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'releaseTime',\n                    description: '<p>Release Time (in seconds)</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'releaseLevel',\n                    description: '<p>Amplitude</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nvar t1 = 0.1; // attack time in seconds\\nvar l1 = 0.7; // attack level 0.0 to 1.0\\nvar t2 = 0.3; // decay time in seconds\\nvar l2 = 0.1; // decay level  0.0 to 1.0\\nvar t3 = 0.2; // sustain time in seconds\\nvar l3 = 0.5; // sustain level  0.0 to 1.0\\n// release level defaults to zero\\n\\nvar env;\\nvar triOsc;\\n\\nfunction setup() {\\n  background(0);\\n  noStroke();\\n  fill(255);\\n  textAlign(CENTER);\\n  text('click to play', width/2, height/2);\\n\\n  env = new p5.Envelope(t1, l1, t2, l2, t3, l3);\\n  triOsc = new p5.Oscillator('triangle');\\n  triOsc.amp(env); // give the env control of the triOsc's amp\\n  triOsc.start();\\n}\\n\\n// mouseClick triggers envelope if over canvas\\nfunction mouseClicked() {\\n  // is mouse over canvas?\\n  if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\\n    env.play(triOsc);\\n  }\\n}\\n</code></div>\\n\"\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 6489,\n                description:\n                  '<p>Set values like a traditional\\n<a href=\"https://en.wikipedia.org/wiki/Synthesizer#/media/File:ADSR_parameter.svg\">\\nADSR envelope\\n</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'setADSR',\n                params: [\n                  {\n                    name: 'attackTime',\n                    description:\n                      '<p>Time (in seconds before envelope\\n                              reaches Attack Level</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'decayTime',\n                    description:\n                      '<p>Time (in seconds) before envelope\\n                              reaches Decay/Sustain Level</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'susRatio',\n                    description:\n                      '<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\\n                              where 1.0 = attackLevel, 0.0 = releaseLevel.\\n                              The susRatio determines the decayLevel and the level at which the\\n                              sustain portion of the envelope will sustain.\\n                              For example, if attackLevel is 0.4, releaseLevel is 0,\\n                              and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\\n                              increased to 1.0 (using <code>setRange</code>),\\n                              then decayLevel would increase proportionally, to become 0.5.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'releaseTime',\n                    description: '<p>Time in seconds from now (defaults to 0)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nvar attackLevel = 1.0;\\nvar releaseLevel = 0;\\n\\nvar attackTime = 0.001;\\nvar decayTime = 0.2;\\nvar susPercent = 0.2;\\nvar releaseTime = 0.5;\\n\\nvar env, triOsc;\\n\\nfunction setup() {\\n  var cnv = createCanvas(100, 100);\\n\\n  textAlign(CENTER);\\n  text('click to play', width/2, height/2);\\n\\n  env = new p5.Envelope();\\n  env.setADSR(attackTime, decayTime, susPercent, releaseTime);\\n  env.setRange(attackLevel, releaseLevel);\\n\\n  triOsc = new p5.Oscillator('triangle');\\n  triOsc.amp(env);\\n  triOsc.start();\\n  triOsc.freq(220);\\n\\n  cnv.mousePressed(playEnv);\\n}\\n\\nfunction playEnv()  {\\n  env.play();\\n}\\n</code></div>\"\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 6554,\n                description:\n                  '<p>Set max (attackLevel) and min (releaseLevel) of envelope.</p>\\n',\n                itemtype: 'method',\n                name: 'setRange',\n                params: [\n                  {\n                    name: 'aLevel',\n                    description: '<p>attack level (defaults to 1)</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'rLevel',\n                    description: '<p>release level (defaults to 0)</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nvar attackLevel = 1.0;\\nvar releaseLevel = 0;\\n\\nvar attackTime = 0.001;\\nvar decayTime = 0.2;\\nvar susPercent = 0.2;\\nvar releaseTime = 0.5;\\n\\nvar env, triOsc;\\n\\nfunction setup() {\\n  var cnv = createCanvas(100, 100);\\n\\n  textAlign(CENTER);\\n  text('click to play', width/2, height/2);\\n\\n  env = new p5.Envelope();\\n  env.setADSR(attackTime, decayTime, susPercent, releaseTime);\\n  env.setRange(attackLevel, releaseLevel);\\n\\n  triOsc = new p5.Oscillator('triangle');\\n  triOsc.amp(env);\\n  triOsc.start();\\n  triOsc.freq(220);\\n\\n  cnv.mousePressed(playEnv);\\n}\\n\\nfunction playEnv()  {\\n  env.play();\\n}\\n</code></div>\"\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 6633,\n                description:\n                  '<p>Assign a parameter to be controlled by this envelope.\\nIf a p5.Sound object is given, then the p5.Envelope will control its\\noutput gain. If multiple inputs are provided, the env will\\ncontrol all of them.</p>\\n',\n                itemtype: 'method',\n                name: 'setInput',\n                params: [\n                  {\n                    name: 'inputs',\n                    description:\n                      '<p>A p5.sound object or\\n                              Web Audio Param.</p>\\n',\n                    type: 'Object',\n                    optional: true,\n                    multiple: true\n                  }\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 6648,\n                description:\n                  '<p>Set whether the envelope ramp is linear (default) or exponential.\\nExponential ramps can be useful because we perceive amplitude\\nand frequency logarithmically.</p>\\n',\n                itemtype: 'method',\n                name: 'setExp',\n                params: [\n                  {\n                    name: 'isExp',\n                    description: '<p>true is exponential, false is linear</p>\\n',\n                    type: 'Boolean'\n                  }\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 6666,\n                description:\n                  '<p>Play tells the envelope to start acting on a given input.\\nIf the input is a p5.sound object (i.e. AudioIn, Oscillator,\\nSoundFile), then Envelope will control its output volume.\\nEnvelopes can also be used to control any <a href=\"\\nhttp://docs.webplatform.org/wiki/apis/webaudio/AudioParam\">\\nWeb Audio Audio Param.</a></p>\\n',\n                itemtype: 'method',\n                name: 'play',\n                params: [\n                  {\n                    name: 'unit',\n                    description:\n                      '<p>A p5.sound object or\\n                              Web Audio Param.</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'startTime',\n                    description: '<p>time from now (in seconds) at which to play</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'sustainTime',\n                    description: '<p>time to sustain before releasing the envelope</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nvar attackLevel = 1.0;\\nvar releaseLevel = 0;\\n\\nvar attackTime = 0.001;\\nvar decayTime = 0.2;\\nvar susPercent = 0.2;\\nvar releaseTime = 0.5;\\n\\nvar env, triOsc;\\n\\nfunction setup() {\\n  var cnv = createCanvas(100, 100);\\n\\n  textAlign(CENTER);\\n  text('click to play', width/2, height/2);\\n\\n  env = new p5.Envelope();\\n  env.setADSR(attackTime, decayTime, susPercent, releaseTime);\\n  env.setRange(attackLevel, releaseLevel);\\n\\n  triOsc = new p5.Oscillator('triangle');\\n  triOsc.amp(env);\\n  triOsc.start();\\n  triOsc.freq(220);\\n\\n  cnv.mousePressed(playEnv);\\n}\\n\\nfunction playEnv()  {\\n  // trigger env on triOsc, 0 seconds from now\\n  // After decay, sustain for 0.2 seconds before release\\n  env.play(triOsc, 0, 0.2);\\n}\\n</code></div>\"\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 6727,\n                description:\n                  '<p>Trigger the Attack, and Decay portion of the Envelope.\\nSimilar to holding down a key on a piano, but it will\\nhold the sustain level until you let go. Input can be\\nany p5.sound object, or a <a href=\"\\nhttp://docs.webplatform.org/wiki/apis/webaudio/AudioParam\">\\nWeb Audio Param</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'triggerAttack',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '<p>p5.sound Object or Web Audio Param</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>time from now (in seconds)</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\n\\nvar attackLevel = 1.0;\\nvar releaseLevel = 0;\\n\\nvar attackTime = 0.001;\\nvar decayTime = 0.3;\\nvar susPercent = 0.4;\\nvar releaseTime = 0.5;\\n\\nvar env, triOsc;\\n\\nfunction setup() {\\n  var cnv = createCanvas(100, 100);\\n  background(200);\\n  textAlign(CENTER);\\n  text('click to play', width/2, height/2);\\n\\n  env = new p5.Envelope();\\n  env.setADSR(attackTime, decayTime, susPercent, releaseTime);\\n  env.setRange(attackLevel, releaseLevel);\\n\\n  triOsc = new p5.Oscillator('triangle');\\n  triOsc.amp(env);\\n  triOsc.start();\\n  triOsc.freq(220);\\n\\n  cnv.mousePressed(envAttack);\\n}\\n\\nfunction envAttack()  {\\n  console.log('trigger attack');\\n  env.triggerAttack();\\n\\n  background(0,255,0);\\n  text('attack!', width/2, height/2);\\n}\\n\\nfunction mouseReleased() {\\n  env.triggerRelease();\\n\\n  background(200);\\n  text('click to play', width/2, height/2);\\n}\\n</code></div>\"\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 6834,\n                description:\n                  '<p>Trigger the Release of the Envelope. This is similar to releasing\\nthe key on a piano and letting the sound fade according to the\\nrelease level and release time.</p>\\n',\n                itemtype: 'method',\n                name: 'triggerRelease',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '<p>p5.sound Object or Web Audio Param</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>time to trigger the release</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\n\\nvar attackLevel = 1.0;\\nvar releaseLevel = 0;\\n\\nvar attackTime = 0.001;\\nvar decayTime = 0.3;\\nvar susPercent = 0.4;\\nvar releaseTime = 0.5;\\n\\nvar env, triOsc;\\n\\nfunction setup() {\\n  var cnv = createCanvas(100, 100);\\n  background(200);\\n  textAlign(CENTER);\\n  text('click to play', width/2, height/2);\\n\\n  env = new p5.Envelope();\\n  env.setADSR(attackTime, decayTime, susPercent, releaseTime);\\n  env.setRange(attackLevel, releaseLevel);\\n\\n  triOsc = new p5.Oscillator('triangle');\\n  triOsc.amp(env);\\n  triOsc.start();\\n  triOsc.freq(220);\\n\\n  cnv.mousePressed(envAttack);\\n}\\n\\nfunction envAttack()  {\\n  console.log('trigger attack');\\n  env.triggerAttack();\\n\\n  background(0,255,0);\\n  text('attack!', width/2, height/2);\\n}\\n\\nfunction mouseReleased() {\\n  env.triggerRelease();\\n\\n  background(200);\\n  text('click to play', width/2, height/2);\\n}\\n</code></div>\"\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 6931,\n                description:\n                  '<p>Exponentially ramp to a value using the first two\\nvalues from <code><a href=\"#/p5.Envelope/setADSR\">setADSR(attackTime, decayTime)</a></code>\\nas <a href=\"https://en.wikipedia.org/wiki/RC_time_constant\">\\ntime constants</a> for simple exponential ramps.\\nIf the value is higher than current value, it uses attackTime,\\nwhile a decrease uses decayTime.</p>\\n',\n                itemtype: 'method',\n                name: 'ramp',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '<p>p5.sound Object or Web Audio Param</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>When to trigger the ramp</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'v',\n                    description: '<p>Target value</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'v2',\n                    description: '<p>Second target value (optional)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nvar env, osc, amp, cnv;\\n\\nvar attackTime = 0.001;\\nvar decayTime = 0.2;\\nvar attackLevel = 1;\\nvar decayLevel = 0;\\n\\nfunction setup() {\\n  cnv = createCanvas(100, 100);\\n  fill(0,255,0);\\n  noStroke();\\n\\n  env = new p5.Envelope();\\n  env.setADSR(attackTime, decayTime);\\n\\n  osc = new p5.Oscillator();\\n  osc.amp(env);\\n  osc.start();\\n\\n  amp = new p5.Amplitude();\\n\\n  cnv.mousePressed(triggerRamp);\\n}\\n\\nfunction triggerRamp() {\\n  env.ramp(osc, 0, attackLevel, decayLevel);\\n}\\n\\nfunction draw() {\\n  background(20,20,20);\\n  text('click me', 10, 20);\\n  var h = map(amp.getLevel(), 0, 0.4, 0, height);;\\n\\n  rect(0, height, width, -h);\\n}\\n</code></div>\"\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7038,\n                description:\n                  '<p>Add a value to the p5.Oscillator&#39;s output amplitude,\\nand return the oscillator. Calling this method\\nagain will override the initial add() with new values.</p>\\n',\n                itemtype: 'method',\n                name: 'add',\n                params: [\n                  {\n                    name: 'number',\n                    description: '<p>Constant number to add</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description:\n                    'Envelope Returns this envelope\\n                                   with scaled output',\n                  type: 'p5.Envelope'\n                },\n                class: 'p5.Envelope',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7054,\n                description:\n                  '<p>Multiply the p5.Envelope&#39;s output amplitude\\nby a fixed value. Calling this method\\nagain will override the initial mult() with new values.</p>\\n',\n                itemtype: 'method',\n                name: 'mult',\n                params: [\n                  {\n                    name: 'number',\n                    description: '<p>Constant number to multiply</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description:\n                    'Envelope Returns this envelope\\n                                   with scaled output',\n                  type: 'p5.Envelope'\n                },\n                class: 'p5.Envelope',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7070,\n                description:\n                  '<p>Scale this envelope&#39;s amplitude values to a given\\nrange, and return the envelope. Calling this method\\nagain will override the initial scale() with new values.</p>\\n',\n                itemtype: 'method',\n                name: 'scale',\n                params: [\n                  {\n                    name: 'inMin',\n                    description: '<p>input range minumum</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'inMax',\n                    description: '<p>input range maximum</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'outMin',\n                    description: '<p>input range minumum</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'outMax',\n                    description: '<p>input range maximum</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description:\n                    'Envelope Returns this envelope\\n                                   with scaled output',\n                  type: 'p5.Envelope'\n                },\n                class: 'p5.Envelope',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7178,\n                description:\n                  '<p>Set the width of a Pulse object (an oscillator that implements\\nPulse Width Modulation).</p>\\n',\n                itemtype: 'method',\n                name: 'width',\n                params: [\n                  {\n                    name: 'width',\n                    description:\n                      '<p>Width between the pulses (0 to 1.0,\\n                       defaults to 0)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Pulse',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7365,\n                description:\n                  '<p>Set type of noise to &#39;white&#39;, &#39;pink&#39; or &#39;brown&#39;.\\nWhite is the default.</p>\\n',\n                itemtype: 'method',\n                name: 'setType',\n                params: [\n                  {\n                    name: 'type',\n                    description:\n                      '<p>&#39;white&#39;, &#39;pink&#39; or &#39;brown&#39;</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Noise',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7478,\n                itemtype: 'property',\n                name: 'input',\n                type: 'GainNode',\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7482,\n                itemtype: 'property',\n                name: 'output',\n                type: 'GainNode',\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7486,\n                itemtype: 'property',\n                name: 'stream',\n                type: 'MediaStream|null',\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7490,\n                itemtype: 'property',\n                name: 'mediaStream',\n                type: 'MediaStreamAudioSourceNode|null',\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7494,\n                itemtype: 'property',\n                name: 'currentSource',\n                type: 'Number|null',\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7498,\n                description:\n                  '<p>Client must allow browser to access their microphone / audioin source.\\nDefault: false. Will become true when the client enables acces.</p>\\n',\n                itemtype: 'property',\n                name: 'enabled',\n                type: 'Boolean',\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7505,\n                description:\n                  '<p>Input amplitude, connect to it by default but not to master out</p>\\n',\n                itemtype: 'property',\n                name: 'amplitude',\n                type: 'p5.Amplitude',\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7518,\n                description:\n                  '<p>Start processing audio input. This enables the use of other\\nAudioIn methods like getLevel(). Note that by default, AudioIn\\nis not connected to p5.sound&#39;s output. So you won&#39;t hear\\nanything unless you use the connect() method.<br/></p>\\n<p>Certain browsers limit access to the user&#39;s microphone. For example,\\nChrome only allows access from localhost and over https. For this reason,\\nyou may want to include an errorCallback—a function that is called in case\\nthe browser won&#39;t provide mic access.</p>\\n',\n                itemtype: 'method',\n                name: 'start',\n                params: [\n                  {\n                    name: 'successCallback',\n                    description:\n                      '<p>Name of a function to call on\\n                                  success.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>Name of a function to call if\\n                                  there was an error. For example,\\n                                  some browsers do not support\\n                                  getUserMedia.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7571,\n                description:\n                  '<p>Turn the AudioIn off. If the AudioIn is stopped, it cannot getLevel().\\nIf re-starting, the user may be prompted for permission access.</p>\\n',\n                itemtype: 'method',\n                name: 'stop',\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7587,\n                description:\n                  '<p>Connect to an audio unit. If no parameter is provided, will\\nconnect to the master output (i.e. your speakers).<br/></p>\\n',\n                itemtype: 'method',\n                name: 'connect',\n                params: [\n                  {\n                    name: 'unit',\n                    description:\n                      '<p>An object that accepts audio input,\\n                        such as an FFT</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7608,\n                description:\n                  '<p>Disconnect the AudioIn from all audio units. For example, if\\nconnect() had been called, disconnect() will stop sending\\nsignal to your speakers.<br/></p>\\n',\n                itemtype: 'method',\n                name: 'disconnect',\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7622,\n                description:\n                  '<p>Read the Amplitude (volume level) of an AudioIn. The AudioIn\\nclass contains its own instance of the Amplitude class to help\\nmake it easy to get a microphone&#39;s volume level. Accepts an\\noptional smoothing value (0.0 &lt; 1.0). <em>NOTE: AudioIn must\\n.start() before using .getLevel().</em><br/></p>\\n',\n                itemtype: 'method',\n                name: 'getLevel',\n                params: [\n                  {\n                    name: 'smoothing',\n                    description:\n                      '<p>Smoothing is 0.0 by default.\\n                             Smooths values based on previous values.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'Volume level (between 0.0 and 1.0)',\n                  type: 'Number'\n                },\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7640,\n                description:\n                  '<p>Set amplitude (volume) of a mic input between 0 and 1.0. <br/></p>\\n',\n                itemtype: 'method',\n                name: 'amp',\n                params: [\n                  {\n                    name: 'vol',\n                    description: '<p>between 0 and 1.0</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'time',\n                    description: '<p>ramp time (optional)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7659,\n                description:\n                  '<p>Returns a list of available input sources. This is a wrapper\\nfor &lt;a title=&quot;MediaDevices.enumerateDevices() - Web APIs | MDN&quot; target=&quot;_blank&quot; href=\\n &quot;<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices&quot;\">https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices&quot;</a></p>\\n<blockquote>\\n<p>and it returns a Promise.</p>\\n</blockquote>\\n',\n                itemtype: 'method',\n                name: 'getSources',\n                params: [\n                  {\n                    name: 'successCallback',\n                    description:\n                      '<p>This callback function handles the sources when they\\n                                     have been enumerated. The callback function\\n                                     receives the deviceList array as its only argument</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>This optional callback receives the error\\n                                   message as its argument.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description:\n                    'Returns a Promise that can be used in place of the callbacks, similar\\n                           to the enumerateDevices() method',\n                  type: 'Promise'\n                },\n                example: [\n                  '\\n <div><code>\\n var audiograb;\\n\\n function setup(){\\n   //new audioIn\\n   audioGrab = new p5.AudioIn();\\n\\n   audioGrab.getSources(function(deviceList) {\\n     //print out the array of available sources\\n     console.log(deviceList);\\n     //set the source to the first item in the deviceList array\\n     audioGrab.setSource(0);\\n   });\\n }\\n </code></div>'\n                ],\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7710,\n                description:\n                  '<p>Set the input source. Accepts a number representing a\\nposition in the array returned by getSources().\\nThis is only available in browsers that support\\n&lt;a title=&quot;MediaDevices.enumerateDevices() - Web APIs | MDN&quot; target=&quot;_blank&quot; href=\\n&quot;<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices&quot;\">https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices&quot;</a></p>\\n<blockquote>\\n<p>navigator.mediaDevices.enumerateDevices()</a>.<br/></p>\\n</blockquote>\\n',\n                itemtype: 'method',\n                name: 'setSource',\n                params: [\n                  {\n                    name: 'num',\n                    description: '<p>position of input source in the array</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7750,\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7766,\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7790,\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7816,\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7838,\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7860,\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7906,\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7937,\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 7955,\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 8292,\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 8314,\n                class: 'p5.AudioIn',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 8390,\n                description:\n                  '<p>In classes that extend\\np5.Effect, connect effect nodes\\nto the wet parameter</p>\\n',\n                class: 'p5.Effect',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 8403,\n                description: '<p>Set the output volume of the filter.</p>\\n',\n                itemtype: 'method',\n                name: 'amp',\n                params: [\n                  {\n                    name: 'vol',\n                    description: '<p>amplitude between 0 and 1.0</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>create a fade that lasts until rampTime</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'tFromNow',\n                    description:\n                      '<p>schedule this event to happen in tFromNow seconds</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Effect',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 8420,\n                description:\n                  '<p>Link effects together in a chain<br>Example usage: filter.chain(reverb, delay, panner);\\nMay be used with an open-ended number of arguments</p>\\n',\n                itemtype: 'method',\n                name: 'chain',\n                params: [\n                  {\n                    name: 'arguments',\n                    description: '<p>Chain together multiple sound objects</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Effect',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 8437,\n                description: '<p>Adjust the dry/wet value.</p>\\n',\n                itemtype: 'method',\n                name: 'drywet',\n                params: [\n                  {\n                    name: 'fade',\n                    description: '<p>The desired drywet value (0 - 1.0)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Effect',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 8449,\n                description:\n                  '<p>Send output to a p5.js-sound, Web Audio Node, or use signal to\\ncontrol an AudioParam</p>\\n',\n                itemtype: 'method',\n                name: 'connect',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.Effect',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 8460,\n                description: '<p>Disconnect all output.</p>\\n',\n                itemtype: 'method',\n                name: 'disconnect',\n                class: 'p5.Effect',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 8578,\n                description:\n                  '<p>The p5.Filter is built with a\\n<a href=\"http://www.w3.org/TR/webaudio/#BiquadFilterNode\">\\nWeb Audio BiquadFilter Node</a>.</p>\\n',\n                itemtype: 'property',\n                name: 'biquadFilter',\n                type: 'DelayNode',\n                class: 'p5.Filter',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 8596,\n                description:\n                  '<p>Filter an audio signal according to a set\\nof filter parameters.</p>\\n',\n                itemtype: 'method',\n                name: 'process',\n                params: [\n                  {\n                    name: 'Signal',\n                    description: '<p>An object that outputs audio</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'freq',\n                    description: '<p>Frequency in Hz, from 10 to 22050</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'res',\n                    description:\n                      '<p>Resonance/Width of the filter frequency\\n                      from 0.001 to 1000</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Filter',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 8610,\n                description: '<p>Set the frequency and the resonance of the filter.</p>\\n',\n                itemtype: 'method',\n                name: 'set',\n                params: [\n                  {\n                    name: 'freq',\n                    description: '<p>Frequency in Hz, from 10 to 22050</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'res',\n                    description: '<p>Resonance (Q) from 0.001 to 1000</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>schedule this event to happen\\n                              seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Filter',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 8627,\n                description:\n                  '<p>Set the filter frequency, in Hz, from 10 to 22050 (the range of\\nhuman hearing, although in reality most people hear in a narrower\\nrange).</p>\\n',\n                itemtype: 'method',\n                name: 'freq',\n                params: [\n                  {\n                    name: 'freq',\n                    description: '<p>Filter Frequency</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>schedule this event to happen\\n                              seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'value  Returns the current frequency value',\n                  type: 'Number'\n                },\n                class: 'p5.Filter',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 8651,\n                description:\n                  '<p>Controls either width of a bandpass frequency,\\nor the resonance of a low/highpass cutoff frequency.</p>\\n',\n                itemtype: 'method',\n                name: 'res',\n                params: [\n                  {\n                    name: 'res',\n                    description:\n                      '<p>Resonance/Width of filter freq\\n                     from 0.001 to 1000</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>schedule this event to happen\\n                              seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'value Returns the current res value',\n                  type: 'Number'\n                },\n                class: 'p5.Filter',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 8673,\n                description:\n                  '<p>Controls the gain attribute of a Biquad Filter.\\nThis is distinctly different from .amp() which is inherited from p5.Effect\\n.amp() controls the volume via the output gain node\\np5.Filter.gain() controls the gain parameter of a Biquad Filter node.</p>\\n',\n                itemtype: 'method',\n                name: 'gain',\n                params: [\n                  {\n                    name: 'gain',\n                    description: '',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'Returns the current or updated gain value',\n                  type: 'Number'\n                },\n                class: 'p5.Filter',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 8694,\n                description:\n                  '<p>Toggle function. Switches between the specified type and allpass</p>\\n',\n                itemtype: 'method',\n                name: 'toggle',\n                return: {\n                  description: '[Toggle value]',\n                  type: 'Boolean'\n                },\n                class: 'p5.Filter',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 8709,\n                description:\n                  '<p>Set the type of a p5.Filter. Possible types include:\\n&quot;lowpass&quot; (default), &quot;highpass&quot;, &quot;bandpass&quot;,\\n&quot;lowshelf&quot;, &quot;highshelf&quot;, &quot;peaking&quot;, &quot;notch&quot;,\\n&quot;allpass&quot;.</p>\\n',\n                itemtype: 'method',\n                name: 'setType',\n                params: [\n                  {\n                    name: 't',\n                    description: '',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.Filter',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 8916,\n                description:\n                  '<p>The p5.EQ is built with abstracted p5.Filter objects.\\nTo modify any bands, use methods of the <a \\nhref=\"/reference/#/p5.Filter\" title=\"p5.Filter reference\">\\np5.Filter</a> API, especially <code>gain</code> and <code>freq</code>.\\nBands are stored in an array, with indices 0 - 3, or 0 - 7</p>\\n',\n                itemtype: 'property',\n                name: 'bands',\n                type: 'Array',\n                class: 'p5.EQ',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 8951,\n                description: '<p>Process an input by connecting it to the EQ</p>\\n',\n                itemtype: 'method',\n                name: 'process',\n                params: [\n                  {\n                    name: 'src',\n                    description: '<p>Audio source</p>\\n',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.EQ',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9039,\n                description:\n                  '<p><a title=\"Web Audio Panner docs\"  href=\\n\"https://developer.mozilla.org/en-US/docs/Web/API/PannerNode\">\\nWeb Audio Spatial Panner Node</a></p>\\n<p>Properties include</p>\\n<ul>\\n<li>&lt;a title=&quot;w3 spec for Panning Model&quot;\\nhref=&quot;<a href=\"https://www.w3.org/TR/webaudio/#idl-def-PanningModelType&quot;\">https://www.w3.org/TR/webaudio/#idl-def-PanningModelType&quot;</a><blockquote>\\n<p>panningModel</a>: &quot;equal power&quot; or &quot;HRTF&quot;</p>\\n</blockquote>\\n</li>\\n<li>&lt;a title=&quot;w3 spec for Distance Model&quot;\\nhref=&quot;<a href=\"https://www.w3.org/TR/webaudio/#idl-def-DistanceModelType&quot;\">https://www.w3.org/TR/webaudio/#idl-def-DistanceModelType&quot;</a><blockquote>\\n<p>distanceModel</a>: &quot;linear&quot;, &quot;inverse&quot;, or &quot;exponential&quot;</p>\\n</blockquote>\\n</li>\\n</ul>\\n',\n                itemtype: 'property',\n                name: 'panner',\n                type: 'AudioNode',\n                class: 'p5.Panner3D',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9062,\n                description: '<p>Connect an audio sorce</p>\\n',\n                itemtype: 'method',\n                name: 'process',\n                params: [\n                  {\n                    name: 'src',\n                    description: '<p>Input source</p>\\n',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.Panner3D',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9071,\n                description: '<p>Set the X,Y,Z position of the Panner</p>\\n',\n                itemtype: 'method',\n                name: 'set',\n                params: [\n                  {\n                    name: 'xVal',\n                    description: '',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'yVal',\n                    description: '',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'zVal',\n                    description: '',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'time',\n                    description: '',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'Updated x, y, z values as an array',\n                  type: 'Array'\n                },\n                class: 'p5.Panner3D',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9090,\n                description: '<p>Getter and setter methods for position coordinates</p>\\n',\n                itemtype: 'method',\n                name: 'positionX',\n                return: {\n                  description: 'updated coordinate value',\n                  type: 'Number'\n                },\n                class: 'p5.Panner3D',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9095,\n                description: '<p>Getter and setter methods for position coordinates</p>\\n',\n                itemtype: 'method',\n                name: 'positionY',\n                return: {\n                  description: 'updated coordinate value',\n                  type: 'Number'\n                },\n                class: 'p5.Panner3D',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9100,\n                description: '<p>Getter and setter methods for position coordinates</p>\\n',\n                itemtype: 'method',\n                name: 'positionZ',\n                return: {\n                  description: 'updated coordinate value',\n                  type: 'Number'\n                },\n                class: 'p5.Panner3D',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9138,\n                description: '<p>Set the X,Y,Z position of the Panner</p>\\n',\n                itemtype: 'method',\n                name: 'orient',\n                params: [\n                  {\n                    name: 'xVal',\n                    description: '',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'yVal',\n                    description: '',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'zVal',\n                    description: '',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'time',\n                    description: '',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'Updated x, y, z values as an array',\n                  type: 'Array'\n                },\n                class: 'p5.Panner3D',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9157,\n                description: '<p>Getter and setter methods for orient coordinates</p>\\n',\n                itemtype: 'method',\n                name: 'orientX',\n                return: {\n                  description: 'updated coordinate value',\n                  type: 'Number'\n                },\n                class: 'p5.Panner3D',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9162,\n                description: '<p>Getter and setter methods for orient coordinates</p>\\n',\n                itemtype: 'method',\n                name: 'orientY',\n                return: {\n                  description: 'updated coordinate value',\n                  type: 'Number'\n                },\n                class: 'p5.Panner3D',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9167,\n                description: '<p>Getter and setter methods for orient coordinates</p>\\n',\n                itemtype: 'method',\n                name: 'orientZ',\n                return: {\n                  description: 'updated coordinate value',\n                  type: 'Number'\n                },\n                class: 'p5.Panner3D',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9205,\n                description: '<p>Set the rolloff factor and max distance</p>\\n',\n                itemtype: 'method',\n                name: 'setFalloff',\n                params: [\n                  {\n                    name: 'maxDistance',\n                    description: '',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'rolloffFactor',\n                    description: '',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Panner3D',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9215,\n                description: '<p>Maxium distance between the source and the listener</p>\\n',\n                itemtype: 'method',\n                name: 'maxDist',\n                params: [\n                  {\n                    name: 'maxDistance',\n                    description: '',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'updated value',\n                  type: 'Number'\n                },\n                class: 'p5.Panner3D',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9227,\n                description:\n                  '<p>How quickly the volume is reduced as the source moves away from the listener</p>\\n',\n                itemtype: 'method',\n                name: 'rollof',\n                params: [\n                  {\n                    name: 'rolloffFactor',\n                    description: '',\n                    type: 'Number'\n                  }\n                ],\n                return: {\n                  description: 'updated value',\n                  type: 'Number'\n                },\n                class: 'p5.Panner3D',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9532,\n                description:\n                  '<p>The p5.Delay is built with two\\n<a href=\"http://www.w3.org/TR/webaudio/#DelayNode\">\\nWeb Audio Delay Nodes</a>, one for each stereo channel.</p>\\n',\n                itemtype: 'property',\n                name: 'leftDelay',\n                type: 'DelayNode',\n                class: 'p5.Delay',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9540,\n                description:\n                  '<p>The p5.Delay is built with two\\n<a href=\"http://www.w3.org/TR/webaudio/#DelayNode\">\\nWeb Audio Delay Nodes</a>, one for each stereo channel.</p>\\n',\n                itemtype: 'property',\n                name: 'rightDelay',\n                type: 'DelayNode',\n                class: 'p5.Delay',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9572,\n                description:\n                  '<p>Add delay to an audio signal according to a set\\nof delay parameters.</p>\\n',\n                itemtype: 'method',\n                name: 'process',\n                params: [\n                  {\n                    name: 'Signal',\n                    description: '<p>An object that outputs audio</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'delayTime',\n                    description:\n                      '<p>Time (in seconds) of the delay/echo.\\n                             Some browsers limit delayTime to\\n                             1 second.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'feedback',\n                    description:\n                      '<p>sends the delay back through itself\\n                             in a loop that decreases in volume\\n                             each time.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'lowPass',\n                    description:\n                      '<p>Cutoff frequency. Only frequencies\\n                             below the lowPass will be part of the\\n                             delay.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Delay',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9607,\n                description:\n                  '<p>Set the delay (echo) time, in seconds. Usually this value will be\\na floating point number between 0.0 and 1.0.</p>\\n',\n                itemtype: 'method',\n                name: 'delayTime',\n                params: [\n                  {\n                    name: 'delayTime',\n                    description: '<p>Time (in seconds) of the delay</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Delay',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9626,\n                description:\n                  '<p>Feedback occurs when Delay sends its signal back through its input\\nin a loop. The feedback amount determines how much signal to send each\\ntime through the loop. A feedback greater than 1.0 is not desirable because\\nit will increase the overall output each time through the loop,\\ncreating an infinite feedback loop. The default value is 0.5</p>\\n',\n                itemtype: 'method',\n                name: 'feedback',\n                params: [\n                  {\n                    name: 'feedback',\n                    description:\n                      '<p>0.0 to 1.0, or an object such as an\\n                                Oscillator that can be used to\\n                                modulate this param</p>\\n',\n                    type: 'Number|Object'\n                  }\n                ],\n                return: {\n                  description: 'Feedback value',\n                  type: 'Number'\n                },\n                class: 'p5.Delay',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9654,\n                description:\n                  '<p>Set a lowpass filter frequency for the delay. A lowpass filter\\nwill cut off any frequencies higher than the filter frequency.</p>\\n',\n                itemtype: 'method',\n                name: 'filter',\n                params: [\n                  {\n                    name: 'cutoffFreq',\n                    description:\n                      '<p>A lowpass filter will cut off any\\n                            frequencies higher than the filter frequency.</p>\\n',\n                    type: 'Number|Object'\n                  },\n                  {\n                    name: 'res',\n                    description:\n                      '<p>Resonance of the filter frequency\\n                            cutoff, or an object (i.e. a p5.Oscillator)\\n                            that can be used to modulate this parameter.\\n                            High numbers (i.e. 15) will produce a resonance,\\n                            low numbers (i.e. .2) will produce a slope.</p>\\n',\n                    type: 'Number|Object'\n                  }\n                ],\n                class: 'p5.Delay',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9671,\n                description:\n                  '<p>Choose a preset type of delay. &#39;pingPong&#39; bounces the signal\\nfrom the left to the right channel to produce a stereo effect.\\nAny other parameter will revert to the default delay setting.</p>\\n',\n                itemtype: 'method',\n                name: 'setType',\n                params: [\n                  {\n                    name: 'type',\n                    description: '<p>&#39;pingPong&#39; (1) or &#39;default&#39; (0)</p>\\n',\n                    type: 'String|Number'\n                  }\n                ],\n                class: 'p5.Delay',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9704,\n                description: '<p>Set the output level of the delay effect.</p>\\n',\n                itemtype: 'method',\n                name: 'amp',\n                params: [\n                  {\n                    name: 'volume',\n                    description: '<p>amplitude between 0 and 1.0</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>create a fade that lasts rampTime</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>schedule this event to happen\\n                              seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Delay',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9713,\n                description: '<p>Send output to a p5.sound or web audio object</p>\\n',\n                itemtype: 'method',\n                name: 'connect',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.Delay',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9719,\n                description: '<p>Disconnect all output.</p>\\n',\n                itemtype: 'method',\n                name: 'disconnect',\n                class: 'p5.Delay',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9812,\n                description:\n                  '<p>Connect a source to the reverb, and assign reverb parameters.</p>\\n',\n                itemtype: 'method',\n                name: 'process',\n                params: [\n                  {\n                    name: 'src',\n                    description:\n                      '<p>p5.sound / Web Audio object with a sound\\n                         output.</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'seconds',\n                    description:\n                      '<p>Duration of the reverb, in seconds.\\n                         Min: 0, Max: 10. Defaults to 3.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'decayRate',\n                    description:\n                      '<p>Percentage of decay with each echo.\\n                          Min: 0, Max: 100. Defaults to 2.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'reverse',\n                    description: '<p>Play the reverb backwards or forwards.</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Reverb',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9841,\n                description:\n                  '<p>Set the reverb settings. Similar to .process(), but without\\nassigning a new input.</p>\\n',\n                itemtype: 'method',\n                name: 'set',\n                params: [\n                  {\n                    name: 'seconds',\n                    description:\n                      '<p>Duration of the reverb, in seconds.\\n                         Min: 0, Max: 10. Defaults to 3.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'decayRate',\n                    description:\n                      '<p>Percentage of decay with each echo.\\n                          Min: 0, Max: 100. Defaults to 2.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'reverse',\n                    description: '<p>Play the reverb backwards or forwards.</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Reverb',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9869,\n                description: '<p>Set the output level of the reverb effect.</p>\\n',\n                itemtype: 'method',\n                name: 'amp',\n                params: [\n                  {\n                    name: 'volume',\n                    description: '<p>amplitude between 0 and 1.0</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>create a fade that lasts rampTime</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>schedule this event to happen\\n                              seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Reverb',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9878,\n                description: '<p>Send output to a p5.sound or web audio object</p>\\n',\n                itemtype: 'method',\n                name: 'connect',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.Reverb',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9884,\n                description: '<p>Disconnect all output.</p>\\n',\n                itemtype: 'method',\n                name: 'disconnect',\n                class: 'p5.Reverb',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9975,\n                description:\n                  '<p>Internally, the p5.Convolver uses the a\\n<a href=\"http://www.w3.org/TR/webaudio/#ConvolverNode\">\\nWeb Audio Convolver Node</a>.</p>\\n',\n                itemtype: 'property',\n                name: 'convolverNode',\n                type: 'ConvolverNode',\n                class: 'p5.Convolver',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 9998,\n                description:\n                  '<p>Create a p5.Convolver. Accepts a path to a soundfile\\nthat will be used to generate an impulse response.</p>\\n',\n                itemtype: 'method',\n                name: 'createConvolver',\n                params: [\n                  {\n                    name: 'path',\n                    description: '<p>path to a sound file</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>function to call if loading is successful.\\n                              The object will be passed in as the argument\\n                              to the callback function.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>function to call if loading is not successful.\\n                              A custom error will be passed in as the argument\\n                              to the callback function.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: '',\n                  type: 'p5.Convolver'\n                },\n                example: [\n                  \"\\n<div><code>\\nvar cVerb, sound;\\nfunction preload() {\\n  // We have both MP3 and OGG versions of all sound assets\\n  soundFormats('ogg', 'mp3');\\n\\n  // Try replacing 'bx-spring' with other soundfiles like\\n  // 'concrete-tunnel' 'small-plate' 'drum' 'beatbox'\\n  cVerb = createConvolver('assets/bx-spring.mp3');\\n\\n  // Try replacing 'Damscray_DancingTiger' with\\n  // 'beat', 'doorbell', lucky_dragons_-_power_melody'\\n  sound = loadSound('assets/Damscray_DancingTiger.mp3');\\n}\\n\\nfunction setup() {\\n  // disconnect from master output...\\n  sound.disconnect();\\n\\n  // ...and process with cVerb\\n  // so that we only hear the convolution\\n  cVerb.process(sound);\\n\\n  sound.play();\\n}\\n</code></div>\"\n                ],\n                class: 'p5.Convolver',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10122,\n                description:\n                  '<p>Connect a source to the reverb, and assign reverb parameters.</p>\\n',\n                itemtype: 'method',\n                name: 'process',\n                params: [\n                  {\n                    name: 'src',\n                    description:\n                      '<p>p5.sound / Web Audio object with a sound\\n                         output.</p>\\n',\n                    type: 'Object'\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nvar cVerb, sound;\\nfunction preload() {\\n  soundFormats('ogg', 'mp3');\\n\\n  cVerb = createConvolver('assets/concrete-tunnel.mp3');\\n\\n  sound = loadSound('assets/beat.mp3');\\n}\\n\\nfunction setup() {\\n  // disconnect from master output...\\n  sound.disconnect();\\n\\n  // ...and process with (i.e. connect to) cVerb\\n  // so that we only hear the convolution\\n  cVerb.process(sound);\\n\\n  sound.play();\\n}\\n</code></div>\"\n                ],\n                class: 'p5.Convolver',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10154,\n                description:\n                  '<p>If you load multiple impulse files using the .addImpulse method,\\nthey will be stored as Objects in this Array. Toggle between them\\nwith the <code>toggleImpulse(id)</code> method.</p>\\n',\n                itemtype: 'property',\n                name: 'impulses',\n                type: 'Array',\n                class: 'p5.Convolver',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10162,\n                description:\n                  '<p>Load and assign a new Impulse Response to the p5.Convolver.\\nThe impulse is added to the <code>.impulses</code> array. Previous\\nimpulses can be accessed with the <code>.toggleImpulse(id)</code>\\nmethod.</p>\\n',\n                itemtype: 'method',\n                name: 'addImpulse',\n                params: [\n                  {\n                    name: 'path',\n                    description: '<p>path to a sound file</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description: '<p>function (optional)</p>\\n',\n                    type: 'Function'\n                  },\n                  {\n                    name: 'errorCallback',\n                    description: '<p>function (optional)</p>\\n',\n                    type: 'Function'\n                  }\n                ],\n                class: 'p5.Convolver',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10180,\n                description:\n                  '<p>Similar to .addImpulse, except that the <code>.impulses</code>\\nArray is reset to save memory. A new <code>.impulses</code>\\narray is created with this impulse as the only item.</p>\\n',\n                itemtype: 'method',\n                name: 'resetImpulse',\n                params: [\n                  {\n                    name: 'path',\n                    description: '<p>path to a sound file</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description: '<p>function (optional)</p>\\n',\n                    type: 'Function'\n                  },\n                  {\n                    name: 'errorCallback',\n                    description: '<p>function (optional)</p>\\n',\n                    type: 'Function'\n                  }\n                ],\n                class: 'p5.Convolver',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10198,\n                description:\n                  '<p>If you have used <code>.addImpulse()</code> to add multiple impulses\\nto a p5.Convolver, then you can use this method to toggle between\\nthe items in the <code>.impulses</code> Array. Accepts a parameter\\nto identify which impulse you wish to use, identified either by its\\noriginal filename (String) or by its position in the <code>.impulses\\n</code> Array (Number).<br/>\\nYou can access the objects in the .impulses Array directly. Each\\nObject has two attributes: an <code>.audioBuffer</code> (type:\\nWeb Audio <a href=\"\\nhttp://webaudio.github.io/web-audio-api/#the-audiobuffer-interface\">\\nAudioBuffer)</a> and a <code>.name</code>, a String that corresponds\\nwith the original filename.</p>\\n',\n                itemtype: 'method',\n                name: 'toggleImpulse',\n                params: [\n                  {\n                    name: 'id',\n                    description:\n                      '<p>Identify the impulse by its original filename\\n                          (String), or by its position in the\\n                          <code>.impulses</code> Array (Number).</p>\\n',\n                    type: 'String|Number'\n                  }\n                ],\n                class: 'p5.Convolver',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10240,\n                class: 'p5.Convolver',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10265,\n                class: 'p5.Convolver',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10460,\n                description:\n                  '<p>Set the global tempo, in beats per minute, for all\\np5.Parts. This method will impact all active p5.Parts.</p>\\n',\n                itemtype: 'method',\n                name: 'setBPM',\n                params: [\n                  {\n                    name: 'BPM',\n                    description: '<p>Beats Per Minute</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>Seconds from now</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Convolver',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10550,\n                description:\n                  '<p>Array of values to pass into the callback\\nat each step of the phrase. Depending on the callback\\nfunction&#39;s requirements, these values may be numbers,\\nstrings, or an object with multiple parameters.\\nZero (0) indicates a rest.</p>\\n',\n                itemtype: 'property',\n                name: 'sequence',\n                type: 'Array',\n                class: 'p5.Phrase',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10638,\n                description: '<p>Set the tempo of this part, in Beats Per Minute.</p>\\n',\n                itemtype: 'method',\n                name: 'setBPM',\n                params: [\n                  {\n                    name: 'BPM',\n                    description: '<p>Beats Per Minute</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>Seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10648,\n                description:\n                  '<p>Returns the tempo, in Beats Per Minute, of this part.</p>\\n',\n                itemtype: 'method',\n                name: 'getBPM',\n                return: {\n                  description: '',\n                  type: 'Number'\n                },\n                class: 'p5.Part',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10657,\n                description:\n                  '<p>Start playback of this part. It will play\\nthrough all of its phrases at a speed\\ndetermined by setBPM.</p>\\n',\n                itemtype: 'method',\n                name: 'start',\n                params: [\n                  {\n                    name: 'time',\n                    description: '<p>seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10673,\n                description:\n                  '<p>Loop playback of this part. It will begin\\nlooping through all of its phrases at a speed\\ndetermined by setBPM.</p>\\n',\n                itemtype: 'method',\n                name: 'loop',\n                params: [\n                  {\n                    name: 'time',\n                    description: '<p>seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10690,\n                description: '<p>Tell the part to stop looping.</p>\\n',\n                itemtype: 'method',\n                name: 'noLoop',\n                class: 'p5.Part',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10702,\n                description:\n                  '<p>Stop the part and cue it to step 0. Playback will resume from the begining of the Part when it is played again.</p>\\n',\n                itemtype: 'method',\n                name: 'stop',\n                params: [\n                  {\n                    name: 'time',\n                    description: '<p>seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10712,\n                description:\n                  '<p>Pause the part. Playback will resume\\nfrom the current step.</p>\\n',\n                itemtype: 'method',\n                name: 'pause',\n                params: [\n                  {\n                    name: 'time',\n                    description: '<p>seconds from now</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10724,\n                description: '<p>Add a p5.Phrase to this Part.</p>\\n',\n                itemtype: 'method',\n                name: 'addPhrase',\n                params: [\n                  {\n                    name: 'phrase',\n                    description: '<p>reference to a p5.Phrase</p>\\n',\n                    type: 'p5.Phrase'\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10745,\n                description:\n                  '<p>Remove a phrase from this part, based on the name it was\\ngiven when it was created.</p>\\n',\n                itemtype: 'method',\n                name: 'removePhrase',\n                params: [\n                  {\n                    name: 'phraseName',\n                    description: '',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10759,\n                description:\n                  '<p>Get a phrase from this part, based on the name it was\\ngiven when it was created. Now you can modify its array.</p>\\n',\n                itemtype: 'method',\n                name: 'getPhrase',\n                params: [\n                  {\n                    name: 'phraseName',\n                    description: '',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10773,\n                description:\n                  '<p>Find all sequences with the specified name, and replace their patterns with the specified array.</p>\\n',\n                itemtype: 'method',\n                name: 'replaceSequence',\n                params: [\n                  {\n                    name: 'phraseName',\n                    description: '',\n                    type: 'String'\n                  },\n                  {\n                    name: 'sequence',\n                    description:\n                      '<p>Array of values to pass into the callback\\n                          at each step of the phrase.</p>\\n',\n                    type: 'Array'\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10800,\n                description:\n                  '<p>Set the function that will be called at every step. This will clear the previous function.</p>\\n',\n                itemtype: 'method',\n                name: 'onStep',\n                params: [\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>The name of the callback\\n                            you want to fire\\n                            on every beat/tatum.</p>\\n',\n                    type: 'Function'\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10853,\n                description: '<p>Start playback of the score.</p>\\n',\n                itemtype: 'method',\n                name: 'start',\n                class: 'p5.Score',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10862,\n                description: '<p>Stop playback of the score.</p>\\n',\n                itemtype: 'method',\n                name: 'stop',\n                class: 'p5.Score',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10872,\n                description: '<p>Pause playback of the score.</p>\\n',\n                itemtype: 'method',\n                name: 'pause',\n                class: 'p5.Score',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10880,\n                description: '<p>Loop playback of the score.</p>\\n',\n                itemtype: 'method',\n                name: 'loop',\n                class: 'p5.Score',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10889,\n                description:\n                  '<p>Stop looping playback of the score. If it\\nis currently playing, this will go into effect\\nafter the current round of playback completes.</p>\\n',\n                itemtype: 'method',\n                name: 'noLoop',\n                class: 'p5.Score',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10914,\n                description: '<p>Set the tempo for all parts in the score</p>\\n',\n                itemtype: 'method',\n                name: 'setBPM',\n                params: [\n                  {\n                    name: 'BPM',\n                    description: '<p>Beats Per Minute</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>Seconds from now</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Score',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10982,\n                description:\n                  '<p>musicalTimeMode uses <a href = \"https://github.com/Tonejs/Tone.js/wiki/Time\">Tone.Time</a> convention\\ntrue if string, false if number</p>\\n',\n                itemtype: 'property',\n                name: 'musicalTimeMode',\n                type: 'Boolean',\n                class: 'p5.SoundLoop',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10989,\n                description:\n                  '<p>musicalTimeMode variables\\nmodify these only when the interval is specified in musicalTime format as a string</p>\\n',\n                class: 'p5.SoundLoop',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 10996,\n                description:\n                  '<p>Set a limit to the number of loops to play. defaults to Infinity</p>\\n',\n                itemtype: 'property',\n                name: 'maxIterations',\n                type: 'Number',\n                class: 'p5.SoundLoop',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11005,\n                description:\n                  '<p>Do not initiate the callback if timeFromNow is &lt; 0\\nThis ususually occurs for a few milliseconds when the page\\nis not fully loaded</p>\\n<p>The callback should only be called until maxIterations is reached</p>\\n',\n                class: 'p5.SoundLoop',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11019,\n                description: '<p>Start the loop</p>\\n',\n                itemtype: 'method',\n                name: 'start',\n                params: [\n                  {\n                    name: 'timeFromNow',\n                    description: '<p>schedule a starting time</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundLoop',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11032,\n                description: '<p>Stop the loop</p>\\n',\n                itemtype: 'method',\n                name: 'stop',\n                params: [\n                  {\n                    name: 'timeFromNow',\n                    description: '<p>schedule a stopping time</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundLoop',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11045,\n                description: '<p>Pause the loop</p>\\n',\n                itemtype: 'method',\n                name: 'pause',\n                params: [\n                  {\n                    name: 'timeFromNow',\n                    description: '<p>schedule a pausing time</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundLoop',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11058,\n                description:\n                  '<p>Synchronize loops. Use this method to start two more more loops in synchronization\\nor to start a loop in synchronization with a loop that is already playing\\nThis method will schedule the implicit loop in sync with the explicit master loop\\ni.e. loopToStart.syncedStart(loopToSyncWith)</p>\\n',\n                itemtype: 'method',\n                name: 'syncedStart',\n                params: [\n                  {\n                    name: 'otherLoop',\n                    description: '<p>a p5.SoundLoop to sync with</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>Start the loops in sync after timeFromNow seconds</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundLoop',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11139,\n                description:\n                  '<p>Getters and Setters, setting any paramter will result in a change in the clock&#39;s\\nfrequency, that will be reflected after the next callback\\nbeats per minute (defaults to 60)</p>\\n',\n                itemtype: 'property',\n                name: 'bpm',\n                type: 'Number',\n                class: 'p5.SoundLoop',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11157,\n                description:\n                  '<p>number of quarter notes in a measure (defaults to 4)</p>\\n',\n                itemtype: 'property',\n                name: 'timeSignature',\n                type: 'Number',\n                class: 'p5.SoundLoop',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11173,\n                description: '<p>length of the loops interval</p>\\n',\n                itemtype: 'property',\n                name: 'interval',\n                type: 'Number|String',\n                class: 'p5.SoundLoop',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11187,\n                description: '<p>how many times the callback has been called so far</p>\\n',\n                itemtype: 'property',\n                name: 'iterations',\n                type: 'Number',\n                readonly: '',\n                class: 'p5.SoundLoop',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11228,\n                description:\n                  '<p>The p5.Compressor is built with a <a href=\"https://www.w3.org/TR/webaudio/#the-dynamicscompressornode-interface\" \\n  target=\"_blank\" title=\"W3 spec for Dynamics Compressor Node\">Web Audio Dynamics Compressor Node\\n  </a></p>\\n',\n                itemtype: 'property',\n                name: 'compressor',\n                type: 'AudioNode',\n                class: 'p5.Compressor',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11239,\n                description:\n                  '<p>Performs the same function as .connect, but also accepts\\noptional parameters to set compressor&#39;s audioParams</p>\\n',\n                itemtype: 'method',\n                name: 'process',\n                params: [\n                  {\n                    name: 'src',\n                    description: '<p>Sound source to be connected</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'attack',\n                    description:\n                      '<p>The amount of time (in seconds) to reduce the gain by 10dB,\\n                           default = .003, range 0 - 1</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'knee',\n                    description:\n                      '<p>A decibel value representing the range above the \\n                           threshold where the curve smoothly transitions to the &quot;ratio&quot; portion.\\n                           default = 30, range 0 - 40</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'ratio',\n                    description:\n                      '<p>The amount of dB change in input for a 1 dB change in output\\n                           default = 12, range 1 - 20</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'threshold',\n                    description:\n                      '<p>The decibel value above which the compression will start taking effect\\n                           default = -24, range -100 - 0</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'release',\n                    description:\n                      '<p>The amount of time (in seconds) to increase the gain by 10dB\\n                           default = .25, range 0 - 1</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Compressor',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11262,\n                description: '<p>Set the paramters of a compressor.</p>\\n',\n                itemtype: 'method',\n                name: 'set',\n                params: [\n                  {\n                    name: 'attack',\n                    description:\n                      '<p>The amount of time (in seconds) to reduce the gain by 10dB,\\n                           default = .003, range 0 - 1</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'knee',\n                    description:\n                      '<p>A decibel value representing the range above the \\n                           threshold where the curve smoothly transitions to the &quot;ratio&quot; portion.\\n                           default = 30, range 0 - 40</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'ratio',\n                    description:\n                      '<p>The amount of dB change in input for a 1 dB change in output\\n                           default = 12, range 1 - 20</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'threshold',\n                    description:\n                      '<p>The decibel value above which the compression will start taking effect\\n                           default = -24, range -100 - 0</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'release',\n                    description:\n                      '<p>The amount of time (in seconds) to increase the gain by 10dB\\n                           default = .25, range 0 - 1</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Compressor',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11294,\n                description: '<p>Get current attack or set value w/ time ramp</p>\\n',\n                itemtype: 'method',\n                name: 'attack',\n                params: [\n                  {\n                    name: 'attack',\n                    description:\n                      '<p>Attack is the amount of time (in seconds) to reduce the gain by 10dB,\\n                         default = .003, range 0 - 1</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'time',\n                    description:\n                      '<p>Assign time value to schedule the change in value</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Compressor',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11314,\n                description: '<p>Get current knee or set value w/ time ramp</p>\\n',\n                itemtype: 'method',\n                name: 'knee',\n                params: [\n                  {\n                    name: 'knee',\n                    description:\n                      '<p>A decibel value representing the range above the \\n                       threshold where the curve smoothly transitions to the &quot;ratio&quot; portion.\\n                       default = 30, range 0 - 40</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'time',\n                    description:\n                      '<p>Assign time value to schedule the change in value</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Compressor',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11334,\n                description: '<p>Get current ratio or set value w/ time ramp</p>\\n',\n                itemtype: 'method',\n                name: 'ratio',\n                params: [\n                  {\n                    name: 'ratio',\n                    description:\n                      '<p>The amount of dB change in input for a 1 dB change in output\\n                           default = 12, range 1 - 20</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'time',\n                    description:\n                      '<p>Assign time value to schedule the change in value</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Compressor',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11353,\n                description: '<p>Get current threshold or set value w/ time ramp</p>\\n',\n                itemtype: 'method',\n                name: 'threshold',\n                params: [\n                  {\n                    name: 'threshold',\n                    description:\n                      '<p>The decibel value above which the compression will start taking effect\\n                           default = -24, range -100 - 0</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'time',\n                    description:\n                      '<p>Assign time value to schedule the change in value</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Compressor',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11372,\n                description: '<p>Get current release or set value w/ time ramp</p>\\n',\n                itemtype: 'method',\n                name: 'release',\n                params: [\n                  {\n                    name: 'release',\n                    description:\n                      '<p>The amount of time (in seconds) to increase the gain by 10dB\\n                           default = .25, range 0 - 1</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'time',\n                    description:\n                      '<p>Assign time value to schedule the change in value</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Compressor',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11392,\n                description: '<p>Return the current reduction value</p>\\n',\n                itemtype: 'method',\n                name: 'reduction',\n                return: {\n                  description:\n                    'Value of the amount of gain reduction that is applied to the signal',\n                  type: 'Number'\n                },\n                class: 'p5.Compressor',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11508,\n                description:\n                  '<p>Connect a specific device to the p5.SoundRecorder.\\nIf no parameter is given, p5.SoundRecorer will record\\nall audible p5.sound from your sketch.</p>\\n',\n                itemtype: 'method',\n                name: 'setInput',\n                params: [\n                  {\n                    name: 'unit',\n                    description:\n                      '<p>p5.sound object or a web audio unit\\n                       that outputs sound</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundRecorder',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11529,\n                description:\n                  '<p>Start recording. To access the recording, provide\\na p5.SoundFile as the first parameter. The p5.SoundRecorder\\nwill send its recording to that p5.SoundFile for playback once\\nrecording is complete. Optional parameters include duration\\n(in seconds) of the recording, and a callback function that\\nwill be called once the complete recording has been\\ntransfered to the p5.SoundFile.</p>\\n',\n                itemtype: 'method',\n                name: 'record',\n                params: [\n                  {\n                    name: 'soundFile',\n                    description: '<p>p5.SoundFile</p>\\n',\n                    type: 'p5.SoundFile'\n                  },\n                  {\n                    name: 'duration',\n                    description: '<p>Time (in seconds)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>The name of a function that will be\\n                              called once the recording completes</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundRecorder',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11562,\n                description:\n                  '<p>Stop the recording. Once the recording is stopped,\\nthe results will be sent to the p5.SoundFile that\\nwas given on .record(), and if a callback function\\nwas provided on record, that function will be called.</p>\\n',\n                itemtype: 'method',\n                name: 'stop',\n                class: 'p5.SoundRecorder',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11635,\n                description:\n                  '<p>Save a p5.SoundFile as a .wav file. The browser will prompt the user\\nto download the file to their device.\\nFor uploading audio to a server, use\\n<a href=\"/docs/reference/#/p5.SoundFile/saveBlob\"><code>p5.SoundFile.saveBlob</code></a>.</p>\\n',\n                itemtype: 'method',\n                name: 'saveSound',\n                params: [\n                  {\n                    name: 'soundFile',\n                    description: '<p>p5.SoundFile that you wish to save</p>\\n',\n                    type: 'p5.SoundFile'\n                  },\n                  {\n                    name: 'fileName',\n                    description: '<p>name of the resulting .wav file.</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11761,\n                description: '<p>isDetected is set to true when a peak is detected.</p>\\n',\n                itemtype: 'attribute',\n                name: 'isDetected',\n                type: 'Boolean',\n                default: 'false',\n                class: 'p5.PeakDetect',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11774,\n                description:\n                  '<p>The update method is run in the draw loop.</p>\\n<p>Accepts an FFT object. You must call .analyze()\\non the FFT object prior to updating the peakDetect\\nbecause it relies on a completed FFT analysis.</p>\\n',\n                itemtype: 'method',\n                name: 'update',\n                params: [\n                  {\n                    name: 'fftObject',\n                    description: '<p>A p5.FFT object</p>\\n',\n                    type: 'p5.FFT'\n                  }\n                ],\n                class: 'p5.PeakDetect',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11805,\n                description:\n                  '<p>onPeak accepts two arguments: a function to call when\\na peak is detected. The value of the peak,\\nbetween 0.0 and 1.0, is passed to the callback.</p>\\n',\n                itemtype: 'method',\n                name: 'onPeak',\n                params: [\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>Name of a function that will\\n                            be called when a peak is\\n                            detected.</p>\\n',\n                    type: 'Function'\n                  },\n                  {\n                    name: 'val',\n                    description:\n                      '<p>Optional value to pass\\n                            into the function when\\n                            a peak is detected.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                example: [\n                  \"\\n<div><code>\\nvar cnv, soundFile, fft, peakDetect;\\nvar ellipseWidth = 0;\\n\\nfunction preload() {\\n  soundFile = loadSound('assets/beat.mp3');\\n}\\n\\nfunction setup() {\\n  cnv = createCanvas(100,100);\\n  textAlign(CENTER);\\n\\n  fft = new p5.FFT();\\n  peakDetect = new p5.PeakDetect();\\n\\n  setupSound();\\n\\n  // when a beat is detected, call triggerBeat()\\n  peakDetect.onPeak(triggerBeat);\\n}\\n\\nfunction draw() {\\n  background(0);\\n  fill(255);\\n  text('click to play', width/2, height/2);\\n\\n  fft.analyze();\\n  peakDetect.update(fft);\\n\\n  ellipseWidth *= 0.95;\\n  ellipse(width/2, height/2, ellipseWidth, ellipseWidth);\\n}\\n\\n// this function is called by peakDetect.onPeak\\nfunction triggerBeat() {\\n  ellipseWidth = 50;\\n}\\n\\n// mouseclick starts/stops sound\\nfunction setupSound() {\\n  cnv.mouseClicked( function() {\\n    if (soundFile.isPlaying() ) {\\n      soundFile.stop();\\n    } else {\\n      soundFile.play();\\n    }\\n  });\\n}\\n</code></div>\"\n                ],\n                class: 'p5.PeakDetect',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11954,\n                description: '<p>Connect a source to the gain node.</p>\\n',\n                itemtype: 'method',\n                name: 'setInput',\n                params: [\n                  {\n                    name: 'src',\n                    description:\n                      '<p>p5.sound / Web Audio object with a sound\\n                         output.</p>\\n',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.Gain',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11964,\n                description: '<p>Send output to a p5.sound or web audio object</p>\\n',\n                itemtype: 'method',\n                name: 'connect',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.Gain',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11974,\n                description: '<p>Disconnect all output.</p>\\n',\n                itemtype: 'method',\n                name: 'disconnect',\n                class: 'p5.Gain',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 11984,\n                description: '<p>Set the output level of the gain node.</p>\\n',\n                itemtype: 'method',\n                name: 'amp',\n                params: [\n                  {\n                    name: 'volume',\n                    description: '<p>amplitude between 0 and 1.0</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>create a fade that lasts rampTime</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>schedule this event to happen\\n                              seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Gain',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12042,\n                description: '<p>Connect to p5 objects or Web Audio Nodes</p>\\n',\n                itemtype: 'method',\n                name: 'connect',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.AudioVoice',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12051,\n                description: '<p>Disconnect from soundOut</p>\\n',\n                itemtype: 'method',\n                name: 'disconnect',\n                class: 'p5.AudioVoice',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12131,\n                description:\n                  '<p>Play tells the MonoSynth to start playing a note. This method schedules\\nthe calling of .triggerAttack and .triggerRelease.</p>\\n',\n                itemtype: 'method',\n                name: 'play',\n                params: [\n                  {\n                    name: 'note',\n                    description:\n                      '<p>the note you want to play, specified as a\\n                               frequency in Hertz (Number) or as a midi\\n                               value in Note/Octave format (&quot;C4&quot;, &quot;Eb3&quot;...etc&quot;)\\n                               See <a href = \"https://github.com/Tonejs/Tone.js/wiki/Instruments\">\\n                               Tone</a>. Defaults to 440 hz.</p>\\n',\n                    type: 'String | Number'\n                  },\n                  {\n                    name: 'velocity',\n                    description:\n                      '<p>velocity of the note to play (ranging from 0 to 1)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>time from now (in seconds) at which to play</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'sustainTime',\n                    description: '<p>time to sustain before releasing the envelope</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div><code>\\nvar monoSynth;\\n\\nfunction setup() {\\n  var cnv = createCanvas(100, 100);\\n  cnv.mousePressed(playSynth);\\n\\n  monoSynth = new p5.MonoSynth();\\n\\n  textAlign(CENTER);\\n  text(\\'click to play\\', width/2, height/2);\\n}\\n\\nfunction playSynth() {\\n  // time from now (in seconds)\\n  var time = 0;\\n  // note duration (in seconds)\\n  var dur = 1/6;\\n  // note velocity (volume, from 0 to 1)\\n  var v = random();\\n\\n  monoSynth.play(\"Fb3\", v, 0, dur);\\n  monoSynth.play(\"Gb3\", v, time += dur, dur);\\n\\n  background(random(255), random(255), 255);\\n  text(\\'click to play\\', width/2, height/2);\\n}\\n</code></div>\\n'\n                ],\n                class: 'p5.MonoSynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12179,\n                description:\n                  '<p>Trigger the Attack, and Decay portion of the Envelope.\\nSimilar to holding down a key on a piano, but it will\\nhold the sustain level until you let go.</p>\\n',\n                params: [\n                  {\n                    name: 'note',\n                    description:\n                      '<p>the note you want to play, specified as a\\n                               frequency in Hertz (Number) or as a midi\\n                               value in Note/Octave format (&quot;C4&quot;, &quot;Eb3&quot;...etc&quot;)\\n                               See <a href = \"https://github.com/Tonejs/Tone.js/wiki/Instruments\">\\n                               Tone</a>. Defaults to 440 hz</p>\\n',\n                    type: 'String | Number'\n                  },\n                  {\n                    name: 'velocity',\n                    description:\n                      '<p>velocity of the note to play (ranging from 0 to 1)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>time from now (in seconds) at which to play</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                itemtype: 'method',\n                name: 'triggerAttack',\n                example: [\n                  '\\n<div><code>\\nvar monoSynth = new p5.MonoSynth();\\n\\nfunction mousePressed() {\\n  monoSynth.triggerAttack(\"E3\");\\n}\\n\\nfunction mouseReleased() {\\n  monoSynth.triggerRelease();\\n}\\n</code></div>'\n                ],\n                class: 'p5.MonoSynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12212,\n                description:\n                  '<p>Trigger the release of the Envelope. This is similar to releasing\\nthe key on a piano and letting the sound fade according to the\\nrelease level and release time.</p>\\n',\n                params: [\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>time to trigger the release</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                itemtype: 'method',\n                name: 'triggerRelease',\n                example: [\n                  '\\n<div><code>\\nvar monoSynth = new p5.MonoSynth();\\n\\nfunction mousePressed() {\\n  monoSynth.triggerAttack(\"E3\");\\n}\\n\\nfunction mouseReleased() {\\n  monoSynth.triggerRelease();\\n}\\n</code></div>'\n                ],\n                class: 'p5.MonoSynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12236,\n                description:\n                  '<p>Set values like a traditional\\n<a href=\"https://en.wikipedia.org/wiki/Synthesizer#/media/File:ADSR_parameter.svg\">\\nADSR envelope\\n</a>.</p>\\n',\n                itemtype: 'method',\n                name: 'setADSR',\n                params: [\n                  {\n                    name: 'attackTime',\n                    description:\n                      '<p>Time (in seconds before envelope\\n                              reaches Attack Level</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'decayTime',\n                    description:\n                      '<p>Time (in seconds) before envelope\\n                              reaches Decay/Sustain Level</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'susRatio',\n                    description:\n                      '<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\\n                              where 1.0 = attackLevel, 0.0 = releaseLevel.\\n                              The susRatio determines the decayLevel and the level at which the\\n                              sustain portion of the envelope will sustain.\\n                              For example, if attackLevel is 0.4, releaseLevel is 0,\\n                              and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\\n                              increased to 1.0 (using <code>setRange</code>),\\n                              then decayLevel would increase proportionally, to become 0.5.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'releaseTime',\n                    description: '<p>Time in seconds from now (defaults to 0)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.MonoSynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12260,\n                description: '<p>Getters and Setters</p>\\n',\n                itemtype: 'property',\n                name: 'attack',\n                type: 'Number',\n                class: 'p5.MonoSynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12264,\n                itemtype: 'property',\n                name: 'decay',\n                type: 'Number',\n                class: 'p5.MonoSynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12267,\n                itemtype: 'property',\n                name: 'sustain',\n                type: 'Number',\n                class: 'p5.MonoSynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12270,\n                itemtype: 'property',\n                name: 'release',\n                type: 'Number',\n                class: 'p5.MonoSynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12307,\n                description: '<p>MonoSynth amp</p>\\n',\n                itemtype: 'method',\n                name: 'amp',\n                params: [\n                  {\n                    name: 'vol',\n                    description: '<p>desired volume</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>Time to reach new volume</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                return: {\n                  description: 'new volume value',\n                  type: 'Number'\n                },\n                class: 'p5.MonoSynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12321,\n                description: '<p>Connect to a p5.sound / Web Audio object.</p>\\n',\n                itemtype: 'method',\n                name: 'connect',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '<p>A p5.sound or Web Audio object</p>\\n',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.MonoSynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12331,\n                description: '<p>Disconnect all outputs</p>\\n',\n                itemtype: 'method',\n                name: 'disconnect',\n                class: 'p5.MonoSynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12341,\n                description:\n                  '<p>Get rid of the MonoSynth and free up its resources / memory.</p>\\n',\n                itemtype: 'method',\n                name: 'dispose',\n                class: 'p5.MonoSynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12411,\n                description:\n                  '<p>An object that holds information about which notes have been played and\\nwhich notes are currently being played. New notes are added as keys\\non the fly. While a note has been attacked, but not released, the value of the\\nkey is the audiovoice which is generating that note. When notes are released,\\nthe value of the key becomes undefined.</p>\\n',\n                itemtype: 'property',\n                name: 'notes',\n                class: 'p5.PolySynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12423,\n                description:\n                  '<p>A PolySynth must have at least 1 voice, defaults to 8</p>\\n',\n                itemtype: 'property',\n                name: 'polyvalue',\n                class: 'p5.PolySynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12428,\n                description:\n                  '<p>Monosynth that generates the sound for each note that is triggered. The\\np5.PolySynth defaults to using the p5.MonoSynth as its voice.</p>\\n',\n                itemtype: 'property',\n                name: 'AudioVoice',\n                class: 'p5.PolySynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12459,\n                description:\n                  '<p>Play a note by triggering noteAttack and noteRelease with sustain time</p>\\n',\n                itemtype: 'method',\n                name: 'play',\n                params: [\n                  {\n                    name: 'note',\n                    description:\n                      '<p>midi note to play (ranging from 0 to 127 - 60 being a middle C)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'velocity',\n                    description:\n                      '<p>velocity of the note to play (ranging from 0 to 1)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>time from now (in seconds) at which to play</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'sustainTime',\n                    description: '<p>time to sustain before releasing the envelope</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div><code>\\nvar polySynth;\\n\\nfunction setup() {\\n  var cnv = createCanvas(100, 100);\\n  cnv.mousePressed(playSynth);\\n\\n  polySynth = new p5.PolySynth();\\n\\n  textAlign(CENTER);\\n  text(\\'click to play\\', width/2, height/2);\\n}\\n\\nfunction playSynth() {\\n  // note duration (in seconds)\\n  var dur = 0.1;\\n\\n  // time from now (in seconds)\\n  var time = 0;\\n\\n  // velocity (volume, from 0 to 1)\\n  var vel = 0.1;\\n\\n  polySynth.play(\"G2\", vel, 0, dur);\\n  polySynth.play(\"C3\", vel, 0, dur);\\n  polySynth.play(\"G3\", vel, 0, dur);\\n\\n  background(random(255), random(255), 255);\\n  text(\\'click to play\\', width/2, height/2);\\n}\\n</code></div>'\n                ],\n                class: 'p5.PolySynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12505,\n                description:\n                  '<p>noteADSR sets the envelope for a specific note that has just been triggered.\\nUsing this method modifies the envelope of whichever audiovoice is being used\\nto play the desired note. The envelope should be reset before noteRelease is called\\nin order to prevent the modified envelope from being used on other notes.</p>\\n',\n                itemtype: 'method',\n                name: 'noteADSR',\n                params: [\n                  {\n                    name: 'note',\n                    description: '<p>Midi note on which ADSR should be set.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'attackTime',\n                    description:\n                      '<p>Time (in seconds before envelope\\n                              reaches Attack Level</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'decayTime',\n                    description:\n                      '<p>Time (in seconds) before envelope\\n                              reaches Decay/Sustain Level</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'susRatio',\n                    description:\n                      '<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\\n                              where 1.0 = attackLevel, 0.0 = releaseLevel.\\n                              The susRatio determines the decayLevel and the level at which the\\n                              sustain portion of the envelope will sustain.\\n                              For example, if attackLevel is 0.4, releaseLevel is 0,\\n                              and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\\n                              increased to 1.0 (using <code>setRange</code>),\\n                              then decayLevel would increase proportionally, to become 0.5.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'releaseTime',\n                    description: '<p>Time in seconds from now (defaults to 0)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.PolySynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12533,\n                description:\n                  '<p>Set the PolySynths global envelope. This method modifies the envelopes of each\\nmonosynth so that all notes are played with this envelope.</p>\\n',\n                itemtype: 'method',\n                name: 'setADSR',\n                params: [\n                  {\n                    name: 'attackTime',\n                    description:\n                      '<p>Time (in seconds before envelope\\n                               reaches Attack Level</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'decayTime',\n                    description:\n                      '<p>Time (in seconds) before envelope\\n                               reaches Decay/Sustain Level</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'susRatio',\n                    description:\n                      '<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\\n                               where 1.0 = attackLevel, 0.0 = releaseLevel.\\n                               The susRatio determines the decayLevel and the level at which the\\n                               sustain portion of the envelope will sustain.\\n                               For example, if attackLevel is 0.4, releaseLevel is 0,\\n                               and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\\n                               increased to 1.0 (using <code>setRange</code>),\\n                               then decayLevel would increase proportionally, to become 0.5.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'releaseTime',\n                    description: '<p>Time in seconds from now (defaults to 0)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.PolySynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12557,\n                description:\n                  '<p>Trigger the Attack, and Decay portion of a MonoSynth.\\nSimilar to holding down a key on a piano, but it will\\nhold the sustain level until you let go.</p>\\n',\n                itemtype: 'method',\n                name: 'noteAttack',\n                params: [\n                  {\n                    name: 'note',\n                    description: '<p>midi note on which attack should be triggered.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'velocity',\n                    description:\n                      '<p>velocity of the note to play (ranging from 0 to 1)/</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>time from now (in seconds)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div><code>\\nvar polySynth = new p5.PolySynth();\\nvar pitches = [\"G\", \"D\", \"G\", \"C\"];\\nvar octaves = [2, 3, 4];\\n\\nfunction mousePressed() {\\n  // play a chord: multiple notes at the same time\\n  for (var i = 0; i < 4; i++) {\\n    var note = random(pitches) + random(octaves);\\n    polySynth.noteAttack(note, 0.1);\\n  }\\n}\\n\\nfunction mouseReleased() {\\n  // release all voices\\n  polySynth.noteRelease();\\n}\\n</code></div>'\n                ],\n                class: 'p5.PolySynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12647,\n                description:\n                  '<p>Trigger the Release of an AudioVoice note. This is similar to releasing\\nthe key on a piano and letting the sound fade according to the\\nrelease level and release time.</p>\\n',\n                itemtype: 'method',\n                name: 'noteRelease',\n                params: [\n                  {\n                    name: 'note',\n                    description:\n                      '<p>midi note on which attack should be triggered.\\n                                  If no value is provided, all notes will be released.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>time to trigger the release</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                example: [\n                  '\\n<div><code>\\nvar pitches = [\"G\", \"D\", \"G\", \"C\"];\\nvar octaves = [2, 3, 4];\\nvar polySynth = new p5.PolySynth();\\n\\nfunction mousePressed() {\\n  // play a chord: multiple notes at the same time\\n  for (var i = 0; i < 4; i++) {\\n    var note = random(pitches) + random(octaves);\\n    polySynth.noteAttack(note, 0.1);\\n  }\\n}\\n\\nfunction mouseReleased() {\\n  // release all voices\\n  polySynth.noteRelease();\\n}\\n</code></div>\\n'\n                ],\n                class: 'p5.PolySynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12712,\n                description: '<p>Connect to a p5.sound / Web Audio object.</p>\\n',\n                itemtype: 'method',\n                name: 'connect',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '<p>A p5.sound or Web Audio object</p>\\n',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.PolySynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12722,\n                description: '<p>Disconnect all outputs</p>\\n',\n                itemtype: 'method',\n                name: 'disconnect',\n                class: 'p5.PolySynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12732,\n                description:\n                  '<p>Get rid of the MonoSynth and free up its resources / memory.</p>\\n',\n                itemtype: 'method',\n                name: 'dispose',\n                class: 'p5.PolySynth',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12800,\n                description:\n                  '<p>The p5.Distortion is built with a\\n<a href=\"http://www.w3.org/TR/webaudio/#WaveShaperNode\">\\nWeb Audio WaveShaper Node</a>.</p>\\n',\n                itemtype: 'property',\n                name: 'WaveShaperNode',\n                type: 'AudioNode',\n                class: 'p5.Distortion',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12815,\n                description:\n                  '<p>Process a sound source, optionally specify amount and oversample values.</p>\\n',\n                itemtype: 'method',\n                name: 'process',\n                params: [\n                  {\n                    name: 'amount',\n                    description:\n                      '<p>Unbounded distortion amount.\\n                               Normal values range from 0-1.</p>\\n',\n                    type: 'Number',\n                    optional: true,\n                    optdefault: '0.25'\n                  },\n                  {\n                    name: 'oversample',\n                    description: '<p>&#39;none&#39;, &#39;2x&#39;, or &#39;4x&#39;.</p>\\n',\n                    type: 'String',\n                    optional: true,\n                    optdefault: \"'none'\"\n                  }\n                ],\n                class: 'p5.Distortion',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12827,\n                description:\n                  '<p>Set the amount and oversample of the waveshaper distortion.</p>\\n',\n                itemtype: 'method',\n                name: 'set',\n                params: [\n                  {\n                    name: 'amount',\n                    description:\n                      '<p>Unbounded distortion amount.\\n                               Normal values range from 0-1.</p>\\n',\n                    type: 'Number',\n                    optional: true,\n                    optdefault: '0.25'\n                  },\n                  {\n                    name: 'oversample',\n                    description: '<p>&#39;none&#39;, &#39;2x&#39;, or &#39;4x&#39;.</p>\\n',\n                    type: 'String',\n                    optional: true,\n                    optdefault: \"'none'\"\n                  }\n                ],\n                class: 'p5.Distortion',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12845,\n                description:\n                  '<p>Return the distortion amount, typically between 0-1.</p>\\n',\n                itemtype: 'method',\n                name: 'getAmount',\n                return: {\n                  description:\n                    'Unbounded distortion amount.\\n                 Normal values range from 0-1.',\n                  type: 'Number'\n                },\n                class: 'p5.Distortion',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              },\n              {\n                file: 'lib/addons/p5.sound.js',\n                line: 12855,\n                description: '<p>Return the oversampling.</p>\\n',\n                itemtype: 'method',\n                name: 'getOversample',\n                return: {\n                  description: \"Oversample can either be 'none', '2x', or '4x'.\",\n                  type: 'String'\n                },\n                class: 'p5.Distortion',\n                module: 'p5.sound',\n                submodule: 'p5.sound'\n              }\n            ],\n            warnings: [\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/creating_reading.js:16'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/creating_reading.js:61'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/creating_reading.js:91'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/creating_reading.js:134'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/creating_reading.js:332'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/creating_reading.js:363'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/creating_reading.js:400'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/creating_reading.js:497'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/creating_reading.js:527'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/creating_reading.js:567'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/p5.Color.js:52'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/p5.Color.js:253'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/p5.Color.js:280'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/p5.Color.js:307'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/p5.Color.js:334'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/p5.Color.js:768'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/setting.js:15'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/setting.js:181'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/setting.js:220'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/setting.js:341'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/setting.js:498'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/setting.js:539'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/color/setting.js:579'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/2d_primitives.js:102'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/2d_primitives.js:210'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/2d_primitives.js:270'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/2d_primitives.js:300'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/2d_primitives.js:356'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/2d_primitives.js:391'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/2d_primitives.js:458'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/2d_primitives.js:541'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/2d_primitives.js:595'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/attributes.js:14'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/attributes.js:83'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/attributes.js:116'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/attributes.js:185'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/attributes.js:219'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/attributes.js:256'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/attributes.js:323'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/curves.js:13'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/curves.js:96'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/curves.js:139'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/curves.js:194'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/curves.js:273'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/curves.js:364'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/curves.js:406'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/curves.js:502'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/vertex.js:22'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/vertex.js:70'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/vertex.js:270'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/vertex.js:270'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/vertex.js:270'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/vertex.js:398'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/vertex.js:443'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/vertex.js:508'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/vertex.js:568'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/vertex.js:654'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/vertex.js:720'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/shape/vertex.js:813'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/constants.js:61'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/constants.js:80'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/constants.js:99'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/constants.js:118'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/constants.js:137'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/environment.js:22'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/environment.js:53'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/environment.js:80'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/environment.js:131'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/environment.js:163'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/environment.js:232'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/environment.js:332'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/environment.js:357'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/environment.js:376'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/environment.js:395'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/environment.js:411'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/environment.js:427'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/environment.js:505'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/environment.js:556'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' src/core/environment.js:591'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' src/core/environment.js:611'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/environment.js:611'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/environment.js:668'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/environment.js:699'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/environment.js:722'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/main.js:42'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/main.js:83'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/main.js:114'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/main.js:396'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/p5.Element.js:52'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/p5.Element.js:122'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/p5.Element.js:162'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/p5.Element.js:197'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/p5.Element.js:258'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/p5.Element.js:307'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/p5.Element.js:373'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/p5.Element.js:427'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/p5.Element.js:483'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/p5.Element.js:541'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/p5.Element.js:584'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/p5.Element.js:626'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/p5.Element.js:674'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/p5.Element.js:714'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/p5.Element.js:763'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/p5.Element.js:801'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/p5.Graphics.js:65'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/p5.Graphics.js:117'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/rendering.js:17'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/rendering.js:119'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/rendering.js:174'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/rendering.js:197'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/rendering.js:236'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/structure.js:12'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/structure.js:74'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/structure.js:122'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/structure.js:191'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/structure.js:261'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/transform.js:13'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/transform.js:150'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/transform.js:176'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/transform.js:216'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/transform.js:246'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/transform.js:276'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/transform.js:306'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/transform.js:381'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/transform.js:421'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/core/transform.js:461'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/data/local_storage.js:11'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/data/local_storage.js:88'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/acceleration.js:23'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/acceleration.js:46'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/acceleration.js:69'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/acceleration.js:135'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/acceleration.js:166'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/acceleration.js:197'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/acceleration.js:233'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/acceleration.js:278'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/acceleration.js:322'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/acceleration.js:380'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/acceleration.js:419'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/acceleration.js:462'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/acceleration.js:506'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/acceleration.js:538'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/acceleration.js:597'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/keyboard.js:12'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/keyboard.js:39'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/keyboard.js:68'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/keyboard.js:109'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/keyboard.js:196'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/keyboard.js:248'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/keyboard.js:312'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/mouse.js:22'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/mouse.js:49'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/mouse.js:76'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/mouse.js:109'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/mouse.js:141'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/mouse.js:180'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/mouse.js:219'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/mouse.js:260'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/mouse.js:302'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/mouse.js:341'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/mouse.js:432'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/mouse.js:487'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/mouse.js:568'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/mouse.js:650'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/mouse.js:728'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/mouse.js:798'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/mouse.js:883'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/touch.js:12'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/touch.js:74'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/touch.js:154'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/events/touch.js:227'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/image.js:22'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/image.js:102'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/image.js:195'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/loading_displaying.js:17'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' src/image/loading_displaying.js:110'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/loading_displaying.js:127'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/loading_displaying.js:298'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/loading_displaying.js:398'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/loading_displaying.js:464'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/p5.Image.js:90'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/p5.Image.js:117'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/p5.Image.js:153'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/p5.Image.js:232'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/p5.Image.js:268'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/p5.Image.js:316'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/p5.Image.js:371'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/p5.Image.js:409'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/p5.Image.js:494'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/p5.Image.js:575'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/p5.Image.js:638'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/p5.Image.js:674'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/p5.Image.js:796'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/pixels.js:14'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/pixels.js:83'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/pixels.js:177'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/pixels.js:236'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/pixels.js:415'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/pixels.js:503'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/pixels.js:540'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/image/pixels.js:614'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/files.js:19'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/files.js:184'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/files.js:297'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/files.js:607'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' src/io/files.js:718'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/files.js:718'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/files.js:1526'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/files.js:1584'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/files.js:1652'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.Table.js:56'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.Table.js:120'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.Table.js:168'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.Table.js:214'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.Table.js:263'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.Table.js:328'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.Table.js:523'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.Table.js:576'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.Table.js:618'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.Table.js:879'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.Table.js:944'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.Table.js:994'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.Table.js:1040'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.Table.js:1085'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.Table.js:1132'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.Table.js:1177'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.Table.js:1230'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.Table.js:1296'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.TableRow.js:42'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.TableRow.js:106'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.TableRow.js:150'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.TableRow.js:195'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.TableRow.js:243'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.TableRow.js:299'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/io/p5.XML.js:11'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/calculation.js:12'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/calculation.js:36'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/calculation.js:76'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/calculation.js:121'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/calculation.js:190'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/calculation.js:240'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/calculation.js:279'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/calculation.js:327'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/calculation.js:383'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/calculation.js:422'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/calculation.js:478'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/calculation.js:528'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/calculation.js:578'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/calculation.js:631'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/calculation.js:665'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/calculation.js:704'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/calculation.js:751'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/math.js:12'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/noise.js:40'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/noise.js:187'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/noise.js:253'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/p5.Vector.js:12'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/random.js:48'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/random.js:79'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/random.js:166'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/trigonometry.js:124'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/trigonometry.js:160'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/trigonometry.js:188'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/trigonometry.js:216'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/math/trigonometry.js:296'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' src/math/trigonometry.js:332'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' src/math/trigonometry.js:347'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' src/math/trigonometry.js:362'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/typography/attributes.js:13'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/typography/attributes.js:84'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/typography/attributes.js:122'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/typography/attributes.js:154'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/typography/attributes.js:191'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/typography/loading_displaying.js:16'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/typography/loading_displaying.js:143'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/typography/loading_displaying.js:230'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/typography/p5.Font.js:32'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/utilities/conversion.js:12'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/utilities/string_functions.js:15'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/utilities/string_functions.js:44'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/utilities/string_functions.js:132'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/utilities/string_functions.js:243'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/utilities/string_functions.js:319'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/utilities/string_functions.js:381'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/utilities/string_functions.js:459'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/utilities/string_functions.js:548'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/utilities/time_date.js:12'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/utilities/time_date.js:34'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/utilities/time_date.js:56'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/utilities/time_date.js:78'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/utilities/time_date.js:101'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/utilities/time_date.js:123'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/utilities/time_date.js:145'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/3d_primitives.js:14'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/interaction.js:13'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/interaction.js:146'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/interaction.js:146'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/interaction.js:146'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/interaction.js:146'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/interaction.js:146'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/interaction.js:380'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/light.js:12'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/light.js:87'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/light.js:185'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/light.js:287'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/light.js:318'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/loading.js:14'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/loading.js:14'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/loading.js:580'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/material.js:14'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' src/webgl/material.js:113'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/material.js:113'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/material.js:181'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/material.js:285'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/material.js:322'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/material.js:419'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/material.js:419'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/material.js:498'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/material.js:573'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/material.js:623'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/material.js:674'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/p5.Camera.js:15'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/p5.Camera.js:61'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/p5.Camera.js:126'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/p5.Camera.js:209'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/p5.Camera.js:486'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/p5.Camera.js:545'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/p5.Camera.js:603'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/p5.Camera.js:751'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/p5.Camera.js:823'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/p5.Camera.js:1088'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' src/webgl/p5.RendererGL.Retained.js:40'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/p5.RendererGL.js:263'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/p5.RendererGL.js:519'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/p5.RendererGL.js:561'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/p5.RendererGL.js:631'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' src/webgl/p5.Shader.js:269'\n              },\n              {\n                message: 'replacing incorrect tag: function with method',\n                line: ' src/webgl/text.js:117'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' src/webgl/text.js:160'\n              },\n              {\n                message: 'replacing incorrect tag: function with method',\n                line: ' src/webgl/text.js:193'\n              },\n              {\n                message: 'replacing incorrect tag: function with method',\n                line: ' src/webgl/text.js:205'\n              },\n              {\n                message: 'replacing incorrect tag: function with method',\n                line: ' src/webgl/text.js:235'\n              },\n              {\n                message: 'replacing incorrect tag: function with method',\n                line: ' src/webgl/text.js:249'\n              },\n              {\n                message: 'replacing incorrect tag: function with method',\n                line: ' src/webgl/text.js:387'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' src/webgl/text.js:387'\n              },\n              {\n                message: 'replacing incorrect tag: function with method',\n                line: ' src/webgl/text.js:457'\n              },\n              {\n                message: 'replacing incorrect tag: function with method',\n                line: ' src/webgl/text.js:472'\n              },\n              {\n                message: 'replacing incorrect tag: function with method',\n                line: ' src/webgl/text.js:547'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' lib/addons/p5.dom.js:245'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' lib/addons/p5.dom.js:313'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' lib/addons/p5.dom.js:1463'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' lib/addons/p5.dom.js:1525'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' lib/addons/p5.dom.js:1629'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' lib/addons/p5.dom.js:1668'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' lib/addons/p5.dom.js:1762'\n              },\n              {\n                message: 'unknown tag: alt',\n                line: ' lib/addons/p5.dom.js:2119'\n              },\n              {\n                message: 'replacing incorrect tag: params with param',\n                line: ' lib/addons/p5.sound.js:2480'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' lib/addons/p5.sound.js:2480'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' lib/addons/p5.sound.js:3094'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' lib/addons/p5.sound.js:7659'\n              },\n              {\n                message: 'replacing incorrect tag: returns with return',\n                line: ' lib/addons/p5.sound.js:9626'\n              },\n              {\n                message:\n                  \"Missing item type\\nConversions adapted from <http://www.easyrgb.com/en/math.php>.\\n\\nIn these functions, hue is always in the range [0, 1], just like all other\\ncomponents are in the range [0, 1]. 'Brightness' and 'value' are used\\ninterchangeably.\",\n                line: ' src/color/color_conversion.js:10'\n              },\n              {\n                message: 'Missing item type\\nConvert an HSBA array to HSLA.',\n                line: ' src/color/color_conversion.js:21'\n              },\n              {\n                message: 'Missing item type\\nConvert an HSBA array to RGBA.',\n                line: ' src/color/color_conversion.js:47'\n              },\n              {\n                message: 'Missing item type\\nConvert an HSLA array to HSBA.',\n                line: ' src/color/color_conversion.js:102'\n              },\n              {\n                message:\n                  \"Missing item type\\nConvert an HSLA array to RGBA.\\n\\nWe need to change basis from HSLA to something that can be more easily be\\nprojected onto RGBA. We will choose hue and brightness as our first two\\ncomponents, and pick a convenient third one ('zest') so that we don't need\\nto calculate formal HSBA saturation.\",\n                line: ' src/color/color_conversion.js:125'\n              },\n              {\n                message: 'Missing item type\\nConvert an RGBA array to HSBA.',\n                line: ' src/color/color_conversion.js:189'\n              },\n              {\n                message: 'Missing item type\\nConvert an RGBA array to HSLA.',\n                line: ' src/color/color_conversion.js:228'\n              },\n              {\n                message:\n                  'Missing item type\\nHue is the same in HSB and HSL, but the maximum value may be different.\\nThis function will return the HSB-normalized saturation when supplied with\\nan HSB color object, but will default to the HSL-normalized saturation\\notherwise.',\n                line: ' src/color/p5.Color.js:415'\n              },\n              {\n                message:\n                  'Missing item type\\nSaturation is scaled differently in HSB and HSL. This function will return\\nthe HSB saturation when supplied with an HSB color object, but will default\\nto the HSL saturation otherwise.',\n                line: ' src/color/p5.Color.js:446'\n              },\n              {\n                message: 'Missing item type\\nCSS named colors.',\n                line: ' src/color/p5.Color.js:465'\n              },\n              {\n                message:\n                  'Missing item type\\nThese regular expressions are used to build up the patterns for matching\\nviable CSS color strings: fragmenting the regexes in this way increases the\\nlegibility and comprehensibility of the code.\\n\\nNote that RGB values of .9 are not parsed by IE, but are supported here for\\ncolor string consistency.',\n                line: ' src/color/p5.Color.js:618'\n              },\n              {\n                message:\n                  'Missing item type\\nFull color string patterns. The capture groups are necessary.',\n                line: ' src/color/p5.Color.js:631'\n              },\n              {\n                message:\n                  'Missing item type\\nFor a number of different inputs, returns a color formatted as [r, g, b, a]\\narrays, with each component normalized between 0 and 1.',\n                line: ' src/color/p5.Color.js:768'\n              },\n              {\n                message:\n                  'Missing item type\\nFor HSB and HSL, interpret the gray level as a brightness/lightness\\nvalue (they are equivalent when chroma is zero). For RGB, normalize the\\ngray level according to the blue maximum.',\n                line: ' src/color/p5.Color.js:994'\n              },\n              {\n                message:\n                  \"Missing item type\\nThis function does 3 things:\\n\\n  1. Bounds the desired start/stop angles for an arc (in radians) so that:\\n\\n         0 <= start < TWO_PI ;    start <= stop < start + TWO_PI\\n\\n     This means that the arc rendering functions don't have to be concerned\\n     with what happens if stop is smaller than start, or if the arc 'goes\\n     round more than once', etc.: they can just start at start and increase\\n     until stop and the correct arc will be drawn.\\n\\n  2. Optionally adjusts the angles within each quadrant to counter the naive\\n     scaling of the underlying ellipse up from the unit circle.  Without\\n     this, the angles become arbitrary when width != height: 45 degrees\\n     might be drawn at 5 degrees on a 'wide' ellipse, or at 85 degrees on\\n     a 'tall' ellipse.\\n\\n  3. Flags up when start and stop correspond to the same place on the\\n     underlying ellipse.  This is useful if you want to do something special\\n     there (like rendering a whole ellipse instead).\",\n                line: ' src/core/shape/2d_primitives.js:16'\n              },\n              {\n                message: 'Missing item type\\nReturns the current framerate.',\n                line: ' src/core/environment.js:306'\n              },\n              {\n                message:\n                  'Missing item type\\nSpecifies the number of frames to be displayed every second. For example,\\nthe function call frameRate(30) will attempt to refresh 30 times a second.\\nIf the processor is not fast enough to maintain the specified rate, the\\nframe rate will not be achieved. Setting the frame rate within <a href=\"#/p5/setup\">setup()</a> is\\nrecommended. The default rate is 60 frames per second.\\n\\nCalling <a href=\"#/p5/frameRate\">frameRate()</a> with no arguments returns the current framerate.',\n                line: ' src/core/environment.js:316'\n              },\n              {\n                message: 'Missing item type',\n                line: ' src/core/error_helpers.js:1'\n              },\n              {\n                message:\n                  'Missing item type\\nValidates parameters\\nparam  {String}               func    the name of the function\\nparam  {Array}                args    user input arguments\\n\\nexample:\\n var a;\\n ellipse(10,10,a,5);\\nconsole ouput:\\n \"It looks like ellipse received an empty variable in spot #2.\"\\n\\nexample:\\n ellipse(10,\"foo\",5,5);\\nconsole output:\\n \"ellipse was expecting a number for parameter #1,\\n          received \"foo\" instead.\"',\n                line: ' src/core/error_helpers.js:584'\n              },\n              {\n                message:\n                  'Missing item type\\nPrints out all the colors in the color pallete with white text.\\nFor color blindness testing.',\n                line: ' src/core/error_helpers.js:645'\n              },\n              {\n                message: 'Missing item type',\n                line: ' src/core/helpers.js:1'\n              },\n              {\n                message:\n                  'Missing item type\\n_globalInit\\n\\nTODO: ???\\nif sketch is on window\\nassume \"global\" mode\\nand instantiate p5 automatically\\notherwise do nothing',\n                line: ' src/core/init.js:5'\n              },\n              {\n                message: 'Missing item type',\n                line: ' src/core/legacy.js:1'\n              },\n              {\n                message: 'Missing item type\\nHelper fxn for sharing pixel methods',\n                line: ' src/core/p5.Element.js:865'\n              },\n              {\n                message: 'Missing item type\\nResize our canvas element.',\n                line: ' src/core/p5.Renderer.js:97'\n              },\n              {\n                message: 'Missing item type\\nHelper fxn to check font type (system or otf)',\n                line: ' src/core/p5.Renderer.js:335'\n              },\n              {\n                message:\n                  'Missing item type\\nHelper fxn to measure ascent and descent.\\nAdapted from http://stackoverflow.com/a/25355178',\n                line: ' src/core/p5.Renderer.js:388'\n              },\n              {\n                message:\n                  'Missing item type\\np5.Renderer2D\\nThe 2D graphics canvas renderer class.\\nextends p5.Renderer',\n                line: ' src/core/p5.Renderer2D.js:9'\n              },\n              {\n                message:\n                  'Missing item type\\nGenerate a cubic Bezier representing an arc on the unit circle of total\\nangle `size` radians, beginning `start` radians above the x-axis. Up to\\nfour of these curves are combined to make a full arc.\\n\\nSee www.joecridge.me/bezier.pdf for an explanation of the method.',\n                line: ' src/core/p5.Renderer2D.js:407'\n              },\n              {\n                message:\n                  'Missing item type\\nshim for Uint8ClampedArray.slice\\n(allows arrayCopy to work with pixels[])\\nwith thanks to http://halfpapstudios.com/blog/tag/html5-canvas/\\nEnumerable set to false to protect for...in from\\nUint8ClampedArray.prototype pollution.',\n                line: ' src/core/shim.js:23'\n              },\n              {\n                message:\n                  'Missing item type\\nthis is implementation of Object.assign() which is unavailable in\\nIE11 and (non-Chrome) Android browsers.\\nThe assign() method is used to copy the values of all enumerable\\nown properties from one or more source objects to a target object.\\nIt will return the target object.\\nModified from https://github.com/ljharb/object.assign',\n                line: ' src/core/shim.js:45'\n              },\n              {\n                message:\n                  'Missing item type\\nprivate helper function to handle the user passing in objects\\nduring construction or calls to create()',\n                line: ' src/data/p5.TypedDict.js:203'\n              },\n              {\n                message:\n                  'Missing item type\\nprivate helper function to ensure that the user passed in valid\\nvalues for the Dictionary type',\n                line: ' src/data/p5.TypedDict.js:394'\n              },\n              {\n                message:\n                  'Missing item type\\nprivate helper function to ensure that the user passed in valid\\nvalues for the Dictionary type',\n                line: ' src/data/p5.TypedDict.js:437'\n              },\n              {\n                message:\n                  \"Missing item type\\nprivate helper function for finding lowest or highest value\\nthe argument 'flip' is used to flip the comparison arrow\\nfrom 'less than' to 'greater than'\",\n                line: ' src/data/p5.TypedDict.js:554'\n              },\n              {\n                message:\n                  \"Missing item type\\nprivate helper function for finding lowest or highest key\\nthe argument 'flip' is used to flip the comparison arrow\\nfrom 'less than' to 'greater than'\",\n                line: ' src/data/p5.TypedDict.js:621'\n              },\n              {\n                message:\n                  'Missing item type\\n_updatePAccelerations updates the pAcceleration values',\n                line: ' src/events/acceleration.js:124'\n              },\n              {\n                message:\n                  'Missing item type\\nThe onblur function is called when the user is no longer focused\\non the p5 element. Because the keyup events will not fire if the user is\\nnot focused on the element we must assume all keys currently down have\\nbeen released.',\n                line: ' src/events/keyboard.js:302'\n              },\n              {\n                message:\n                  'Missing item type\\nThe _areDownKeys function returns a boolean true if any keys pressed\\nand a false if no keys are currently pressed.\\n\\nHelps avoid instances where multiple keys are pressed simultaneously and\\nreleasing a single key will then switch the\\nkeyIsPressed property to true.',\n                line: ' src/events/keyboard.js:389'\n              },\n              {\n                message:\n                  'Missing item type\\nThis module defines the filters for use with image buffers.\\n\\nThis module is basically a collection of functions stored in an object\\nas opposed to modules. The functions are destructive, modifying\\nthe passed in canvas rather than creating a copy.\\n\\nGenerally speaking users of this module will use the Filters.apply method\\non a canvas to create an effect.\\n\\nA number of functions are borrowed/adapted from\\nhttp://www.html5rocks.com/en/tutorials/canvas/imagefilters/\\nor the java processing implementation.',\n                line: ' src/image/filters.js:3'\n              },\n              {\n                message: 'Missing item type\\nReturns the pixel buffer for a canvas',\n                line: ' src/image/filters.js:26'\n              },\n              {\n                message:\n                  'Missing item type\\nReturns a 32 bit number containing ARGB data at ith pixel in the\\n1D array containing pixels data.',\n                line: ' src/image/filters.js:46'\n              },\n              {\n                message:\n                  'Missing item type\\nModifies pixels RGBA values to values contained in the data object.',\n                line: ' src/image/filters.js:67'\n              },\n              {\n                message:\n                  'Missing item type\\nReturns the ImageData object for a canvas\\nhttps://developer.mozilla.org/en-US/docs/Web/API/ImageData',\n                line: ' src/image/filters.js:87'\n              },\n              {\n                message: 'Missing item type\\nReturns a blank ImageData object.',\n                line: ' src/image/filters.js:107'\n              },\n              {\n                message:\n                  'Missing item type\\nApplys a filter function to a canvas.\\n\\nThe difference between this and the actual filter functions defined below\\nis that the filter functions generally modify the pixel buffer but do\\nnot actually put that data back to the canvas (where it would actually\\nupdate what is visible). By contrast this method does make the changes\\nactually visible in the canvas.\\n\\nThe apply method is the method that callers of this module would generally\\nuse. It has been separated from the actual filters to support an advanced\\nuse case of creating a filter chain that executes without actually updating\\nthe canvas in between everystep.',\n                line: ' src/image/filters.js:122'\n              },\n              {\n                message:\n                  'Missing item type\\nConverts the image to black and white pixels depending if they are above or\\nbelow the threshold defined by the level parameter. The parameter must be\\nbetween 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\\n\\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/',\n                line: ' src/image/filters.js:175'\n              },\n              {\n                message:\n                  'Missing item type\\nConverts any colors in the image to grayscale equivalents.\\nNo parameter is used.\\n\\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/',\n                line: ' src/image/filters.js:209'\n              },\n              {\n                message:\n                  'Missing item type\\nSets the alpha channel to entirely opaque. No parameter is used.',\n                line: ' src/image/filters.js:232'\n              },\n              {\n                message:\n                  'Missing item type\\nSets each pixel to its inverse value. No parameter is used.',\n                line: ' src/image/filters.js:248'\n              },\n              {\n                message:\n                  'Missing item type\\nLimits each channel of the image to the number of colors specified as\\nthe parameter. The parameter can be set to values between 2 and 255, but\\nresults are most noticeable in the lower ranges.\\n\\nAdapted from java based processing implementation',\n                line: ' src/image/filters.js:263'\n              },\n              {\n                message: 'Missing item type\\nreduces the bright areas in an image',\n                line: ' src/image/filters.js:295'\n              },\n              {\n                message: 'Missing item type\\nincreases the bright areas in an image',\n                line: ' src/image/filters.js:383'\n              },\n              {\n                message:\n                  'Missing item type\\nThis module defines the p5 methods for the <a href=\"#/p5.Image\">p5.Image</a> class\\nfor drawing images to the main display canvas.',\n                line: ' src/image/image.js:8'\n              },\n              {\n                message:\n                  'Missing item type\\nValidates clipping params. Per drawImage spec sWidth and sHight cannot be\\nnegative or greater than image intrinsic width and height',\n                line: ' src/image/loading_displaying.js:110'\n              },\n              {\n                message:\n                  'Missing item type\\nApply the current tint color to the input image, return the resulting\\ncanvas.',\n                line: ' src/image/loading_displaying.js:427'\n              },\n              {\n                message:\n                  'Missing item type\\nThis module defines the <a href=\"#/p5.Image\">p5.Image</a> class and P5 methods for\\ndrawing images to the main display canvas.',\n                line: ' src/image/p5.Image.js:9'\n              },\n              {\n                message: 'Missing item type\\nHelper fxn for sharing pixel methods',\n                line: ' src/image/p5.Image.js:223'\n              },\n              {\n                message:\n                  'Missing item type\\nGenerate a blob of file data as a url to prepare for download.\\nAccepts an array of data, a filename, and an extension (optional).\\nThis is a private function because it does not do any formatting,\\nbut it is used by <a href=\"#/p5/saveStrings\">saveStrings</a>, <a href=\"#/p5/saveJSON\">saveJSON</a>, <a href=\"#/p5/saveTable\">saveTable</a> etc.',\n                line: ' src/io/files.js:1778'\n              },\n              {\n                message:\n                  'Missing item type\\nReturns a file extension, or another string\\nif the provided parameter has no extension.',\n                line: ' src/io/files.js:1847'\n              },\n              {\n                message:\n                  'Missing item type\\nReturns true if the browser is Safari, false if not.\\nSafari makes trouble for downloading files.',\n                line: ' src/io/files.js:1880'\n              },\n              {\n                message:\n                  'Missing item type\\nHelper function, a callback for download that deletes\\nan invisible anchor element from the DOM once the file\\nhas been automatically downloaded.',\n                line: ' src/io/files.js:1892'\n              },\n              {\n                message:\n                  'Missing item type\\nTable Options\\n<p>Generic class for handling tabular data, typically from a\\nCSV, TSV, or other sort of spreadsheet file.</p>\\n<p>CSV files are\\n<a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">\\ncomma separated values</a>, often with the data in quotes. TSV\\nfiles use tabs as separators, and usually don\\'t bother with the\\nquotes.</p>\\n<p>File names should end with .csv if they\\'re comma separated.</p>\\n<p>A rough \"spec\" for CSV can be found\\n<a href=\"http://tools.ietf.org/html/rfc4180\">here</a>.</p>\\n<p>To load files, use the <a href=\"#/p5/loadTable\">loadTable</a> method.</p>\\n<p>To save tables to your computer, use the <a href=\"#/p5/save\">save</a> method\\n or the <a href=\"#/p5/saveTable\">saveTable</a> method.</p>\\n\\nPossible options include:\\n<ul>\\n<li>csv - parse the table as comma-separated values\\n<li>tsv - parse the table as tab-separated values\\n<li>header - this table has a header (title) row\\n</ul>',\n                line: ' src/io/p5.Table.js:11'\n              },\n              {\n                message:\n                  'Missing item type\\nMultiplies a vector by a scalar and returns a new vector.',\n                line: ' src/math/p5.Vector.js:1610'\n              },\n              {\n                message:\n                  'Missing item type\\nDivides a vector by a scalar and returns a new vector.',\n                line: ' src/math/p5.Vector.js:1637'\n              },\n              {\n                message: 'Missing item type\\nCalculates the dot product of two vectors.',\n                line: ' src/math/p5.Vector.js:1664'\n              },\n              {\n                message: 'Missing item type\\nCalculates the cross product of two vectors.',\n                line: ' src/math/p5.Vector.js:1678'\n              },\n              {\n                message:\n                  'Missing item type\\nCalculates the Euclidean distance between two points (considering a\\npoint as a vector object).',\n                line: ' src/math/p5.Vector.js:1692'\n              },\n              {\n                message:\n                  'Missing item type\\nLinear interpolate a vector to another vector and return the result as a\\nnew vector.',\n                line: ' src/math/p5.Vector.js:1707'\n              },\n              {\n                message:\n                  'Missing item type\\nHelper function to measure ascent and descent.',\n                line: ' src/typography/attributes.js:284'\n              },\n              {\n                message:\n                  'Missing item type\\nReturns the set of opentype glyphs for the supplied string.\\n\\nNote that there is not a strict one-to-one mapping between characters\\nand glyphs, so the list of returned glyphs can be larger or smaller\\n than the length of the given string.',\n                line: ' src/typography/p5.Font.js:255'\n              },\n              {\n                message:\n                  'Missing item type\\nReturns an opentype path for the supplied string and position.',\n                line: ' src/typography/p5.Font.js:270'\n              },\n              {\n                message: 'Missing item type',\n                line: ' src/webgl/3d_primitives.js:260'\n              },\n              {\n                message:\n                  'Missing item type\\nDraws a point, a coordinate in space at the dimension of one pixel,\\ngiven x, y and z coordinates. The color of the point is determined\\nby the current stroke, while the point size is determined by current\\nstroke weight.',\n                line: ' src/webgl/3d_primitives.js:732'\n              },\n              {\n                message: 'Missing item type\\nDraw a line given two points',\n                line: ' src/webgl/3d_primitives.js:1155'\n              },\n              {\n                message:\n                  'Missing item type\\nParse OBJ lines into model. For reference, this is what a simple model of a\\nsquare might look like:\\n\\nv -0.5 -0.5 0.5\\nv -0.5 -0.5 -0.5\\nv -0.5 0.5 -0.5\\nv -0.5 0.5 0.5\\n\\nf 4 3 2 1',\n                line: ' src/webgl/loading.js:169'\n              },\n              {\n                message:\n                  'Missing item type\\nSTL files can be of two types, ASCII and Binary,\\n\\nWe need to convert the arrayBuffer to an array of strings,\\nto parse it as an ASCII file.',\n                line: ' src/webgl/loading.js:278'\n              },\n              {\n                message:\n                  'Missing item type\\nThis function checks if the file is in ASCII format or in Binary format\\n\\nIt is done by searching keyword `solid` at the start of the file.\\n\\nAn ASCII STL data must begin with `solid` as the first six bytes.\\nHowever, ASCII STLs lacking the SPACE after the `d` are known to be\\nplentiful. So, check the first 5 bytes for `solid`.\\n\\nSeveral encodings, such as UTF-8, precede the text with up to 5 bytes:\\nhttps://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\\nSearch for `solid` to start anywhere after those prefixes.',\n                line: ' src/webgl/loading.js:305'\n              },\n              {\n                message:\n                  'Missing item type\\nThis function matches the `query` at the provided `offset`',\n                line: ' src/webgl/loading.js:332'\n              },\n              {\n                message:\n                  'Missing item type\\nThis function parses the Binary STL files.\\nhttps://en.wikipedia.org/wiki/STL_%28file_format%29#Binary_STL\\n\\nCurrently there is no support for the colors provided in STL files.',\n                line: ' src/webgl/loading.js:344'\n              },\n              {\n                message:\n                  \"Missing item type\\nASCII STL file starts with `solid 'nameOfFile'`\\nThen contain the normal of the face, starting with `facet normal`\\nNext contain a keyword indicating the start of face vertex, `outer loop`\\nNext comes the three vertex, starting with `vertex x y z`\\nVertices ends with `endloop`\\nFace ends with `endfacet`\\nNext face starts with `facet normal`\\nThe end of the file is indicated by `endsolid`\",\n                line: ' src/webgl/loading.js:433'\n              },\n              {\n                message: 'Missing item type',\n                line: ' src/webgl/material.js:719'\n              },\n              {\n                message: 'Missing item type',\n                line: ' src/webgl/material.js:741'\n              },\n              {\n                message:\n                  'Missing item type\\nCreate a 2D array for establishing stroke connections',\n                line: ' src/webgl/p5.Geometry.js:206'\n              },\n              {\n                message:\n                  \"Missing item type\\nCreate 4 vertices for each stroke line, two at the beginning position\\nand two at the end position. These vertices are displaced relative to\\nthat line's normal on the GPU\",\n                line: ' src/webgl/p5.Geometry.js:227'\n              },\n              {\n                message: 'Missing item type',\n                line: ' src/webgl/p5.Matrix.js:1'\n              },\n              {\n                message: 'Missing item type\\nPRIVATE',\n                line: ' src/webgl/p5.Matrix.js:730'\n              },\n              {\n                message:\n                  'Missing item type\\nWelcome to RendererGL Immediate Mode.\\nImmediate mode is used for drawing custom shapes\\nfrom a set of vertices.  Immediate Mode is activated\\nwhen you call <a href=\"#/p5/beginShape\">beginShape()</a> & de-activated when you call <a href=\"#/p5/endShape\">endShape()</a>.\\nImmediate mode is a style of programming borrowed\\nfrom OpenGL\\'s (now-deprecated) immediate mode.\\nIt differs from p5.js\\' default, Retained Mode, which caches\\ngeometries and buffers on the CPU to reduce the number of webgl\\ndraw calls. Retained mode is more efficient & performative,\\nhowever, Immediate Mode is useful for sketching quick\\ngeometric ideas.',\n                line: ' src/webgl/p5.RendererGL.Immediate.js:1'\n              },\n              {\n                message:\n                  'Missing item type\\nEnd shape drawing and render vertices to screen.',\n                line: ' src/webgl/p5.RendererGL.Immediate.js:140'\n              },\n              {\n                message:\n                  'Missing item type\\ninitializes buffer defaults. runs each time a new geometry is\\nregistered',\n                line: ' src/webgl/p5.RendererGL.Retained.js:40'\n              },\n              {\n                message:\n                  'Missing item type\\ncreates a buffers object that holds the WebGL render buffers\\nfor a geometry.',\n                line: ' src/webgl/p5.RendererGL.Retained.js:144'\n              },\n              {\n                message: 'Missing item type\\nDraws buffers given a geometry key ID',\n                line: ' src/webgl/p5.RendererGL.Retained.js:182'\n              },\n              {\n                message: 'Missing item type\\nmodel view, projection, & normal\\nmatrices',\n                line: ' src/webgl/p5.RendererGL.js:96'\n              },\n              {\n                message: 'Missing item type\\n[background description]',\n                line: ' src/webgl/p5.RendererGL.js:501'\n              },\n              {\n                message: 'Missing item type\\n[resize description]',\n                line: ' src/webgl/p5.RendererGL.js:752'\n              },\n              {\n                message: 'Missing item type\\nclears color and depth buffers\\nwith r,g,b,a',\n                line: ' src/webgl/p5.RendererGL.js:783'\n              },\n              {\n                message: 'Missing item type\\n[translate description]',\n                line: ' src/webgl/p5.RendererGL.js:816'\n              },\n              {\n                message: 'Missing item type\\nScales the Model View Matrix by a vector',\n                line: ' src/webgl/p5.RendererGL.js:835'\n              },\n              {\n                message:\n                  'Missing item type\\nturn a two dimensional array into one dimensional array',\n                line: ' src/webgl/p5.RendererGL.js:1200'\n              },\n              {\n                message:\n                  'Missing item type\\nturn a p5.Vector Array into a one dimensional number array',\n                line: ' src/webgl/p5.RendererGL.js:1237'\n              },\n              {\n                message:\n                  'Missing item type\\nensures that p5 is using a 3d renderer. throws an error if not.',\n                line: ' src/webgl/p5.RendererGL.js:1254'\n              },\n              {\n                message: 'Missing item type\\nHelper function for select and selectAll',\n                line: ' lib/addons/p5.dom.js:168'\n              },\n              {\n                message:\n                  'Missing item type\\nHelper function for getElement and getElements.',\n                line: ' lib/addons/p5.dom.js:184'\n              },\n              {\n                message: 'Missing item type\\nHelpers for create methods.',\n                line: ' lib/addons/p5.dom.js:348'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.dom.js:488'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.dom.js:1070'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.dom.js:1159'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.dom.js:1199'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.dom.js:3021'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.dom.js:3087'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.dom.js:3149'\n              },\n              {\n                message:\n                  \"Missing item type\\np5.sound \\nhttps://p5js.org/reference/#/libraries/p5.sound\\n\\nFrom the Processing Foundation and contributors\\nhttps://github.com/processing/p5.js-sound/graphs/contributors\\n\\nMIT License (MIT)\\nhttps://github.com/processing/p5.js-sound/blob/master/LICENSE\\n\\nSome of the many audio libraries & resources that inspire p5.sound:\\n - TONE.js (c) Yotam Mann. Licensed under The MIT License (MIT). https://github.com/TONEnoTONE/Tone.js\\n - buzz.js (c) Jay Salvat. Licensed under The MIT License (MIT). http://buzz.jaysalvat.com/\\n - Boris Smus Web Audio API book, 2013. Licensed under the Apache License http://www.apache.org/licenses/LICENSE-2.0\\n - wavesurfer.js https://github.com/katspaugh/wavesurfer.js\\n - Web Audio Components by Jordan Santell https://github.com/web-audio-components\\n - Wilm Thoben's Sound library for Processing https://github.com/processing/processing/tree/master/java/libraries/sound\\n\\n Web Audio API: http://w3.org/TR/webaudio/\",\n                line: ' lib/addons/p5.sound.js:46'\n              },\n              {\n                message:\n                  'Missing item type\\nDetermine which filetypes are supported (inspired by buzz.js)\\nThe audio element (el) will only be used to test browser support for various audio formats',\n                line: ' lib/addons/p5.sound.js:214'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:363'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:740'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:810'\n              },\n              {\n                message:\n                  'Missing item type\\nMaster contains AudioContext and the master sound output.',\n                line: ' lib/addons/p5.sound.js:1099'\n              },\n              {\n                message:\n                  'Missing item type\\na silent connection to the DesinationNode\\nwhich will ensure that anything connected to it\\nwill not be garbage collected',\n                line: ' lib/addons/p5.sound.js:1194'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:1210'\n              },\n              {\n                message: 'Missing item type\\nUsed by Osc and Envelope to chain signal math',\n                line: ' lib/addons/p5.sound.js:1415'\n              },\n              {\n                message:\n                  'Missing item type\\nThis is a helper function that the p5.SoundFile calls to load\\nitself. Accepts a callback (the name of another function)\\nas an optional parameter.',\n                line: ' lib/addons/p5.sound.js:1813'\n              },\n              {\n                message:\n                  \"Missing item type\\nStop playback on all of this soundfile's sources.\",\n                line: ' lib/addons/p5.sound.js:2218'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:2656'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:2934'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:4055'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:4076'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:4135'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:4453'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:4625'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:4783'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:4824'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:4881'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:5049'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:5097'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:5128'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:5149'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:5169'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:5879'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:6082'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:7750'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:7766'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:7790'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:7816'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:7838'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:7860'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:7906'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:7937'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:7955'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:8292'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:8314'\n              },\n              {\n                message:\n                  'Missing item type\\nThe p5.Effect class is built\\n \\tusing Tone.js CrossFade',\n                line: ' lib/addons/p5.sound.js:8384'\n              },\n              {\n                message:\n                  'Missing item type\\nIn classes that extend\\np5.Effect, connect effect nodes\\nto the wet parameter',\n                line: ' lib/addons/p5.sound.js:8390'\n              },\n              {\n                message:\n                  'Missing item type\\nEQFilter extends p5.Filter with constraints\\nnecessary for the p5.EQ',\n                line: ' lib/addons/p5.sound.js:8779'\n              },\n              {\n                message:\n                  'Missing item type\\nInspired by Simple Reverb by Jordan Santell\\nhttps://github.com/web-audio-components/simple-reverb/blob/master/index.js\\n\\nUtility function for building an impulse response\\nbased on the module parameters.',\n                line: ' lib/addons/p5.sound.js:9889'\n              },\n              {\n                message:\n                  'Missing item type\\nPrivate method to load a buffer as an Impulse Response,\\nassign it to the convolverNode, and add to the Array of .impulses.',\n                line: ' lib/addons/p5.sound.js:10056'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:10240'\n              },\n              {\n                message: 'Missing item type',\n                line: ' lib/addons/p5.sound.js:10265'\n              },\n              {\n                message:\n                  'Missing item type\\nmusicalTimeMode variables\\nmodify these only when the interval is specified in musicalTime format as a string',\n                line: ' lib/addons/p5.sound.js:10989'\n              },\n              {\n                message:\n                  'Missing item type\\nDo not initiate the callback if timeFromNow is < 0\\nThis ususually occurs for a few milliseconds when the page\\nis not fully loaded\\n\\nThe callback should only be called until maxIterations is reached',\n                line: ' lib/addons/p5.sound.js:11005'\n              },\n              {\n                message: 'Missing item type\\ncallback invoked when the recording is over',\n                line: ' lib/addons/p5.sound.js:11495'\n              },\n              {\n                message: 'Missing item type\\ninternal method called on audio process',\n                line: ' lib/addons/p5.sound.js:11581'\n              },\n              {\n                message:\n                  'Missing item type\\nPrivate method to ensure accurate values of this._voicesInUse\\nAny time a new value is scheduled, it is necessary to increment all subsequent\\nscheduledValues after attack, and decrement all subsequent\\nscheduledValues after release',\n                line: ' lib/addons/p5.sound.js:12627'\n              },\n              {\n                message:\n                  \"Missing item type\\np5.sound \\nhttps://p5js.org/reference/#/libraries/p5.sound\\n\\nFrom the Processing Foundation and contributors\\nhttps://github.com/processing/p5.js-sound/graphs/contributors\\n\\nMIT License (MIT)\\nhttps://github.com/processing/p5.js-sound/blob/master/LICENSE\\n\\nSome of the many audio libraries & resources that inspire p5.sound:\\n - TONE.js (c) Yotam Mann. Licensed under The MIT License (MIT). https://github.com/TONEnoTONE/Tone.js\\n - buzz.js (c) Jay Salvat. Licensed under The MIT License (MIT). http://buzz.jaysalvat.com/\\n - Boris Smus Web Audio API book, 2013. Licensed under the Apache License http://www.apache.org/licenses/LICENSE-2.0\\n - wavesurfer.js https://github.com/katspaugh/wavesurfer.js\\n - Web Audio Components by Jordan Santell https://github.com/web-audio-components\\n - Wilm Thoben's Sound library for Processing https://github.com/processing/processing/tree/master/java/libraries/sound\\n\\n Web Audio API: http://w3.org/TR/webaudio/\",\n                line: ' lib/addons/p5.sound.min.js:3'\n              }\n            ],\n            consts: {\n              RGB: ['p5.colorMode'],\n              HSB: ['p5.colorMode'],\n              HSL: ['p5.colorMode'],\n              CHORD: ['p5.arc'],\n              PIE: ['p5.arc'],\n              OPEN: ['p5.arc'],\n              CENTER: ['p5.ellipseMode', 'p5.rectMode', 'p5.imageMode', 'p5.textAlign'],\n              RADIUS: ['p5.ellipseMode', 'p5.rectMode'],\n              CORNER: ['p5.ellipseMode', 'p5.rectMode', 'p5.imageMode'],\n              CORNERS: ['p5.ellipseMode', 'p5.rectMode', 'p5.imageMode'],\n              SQUARE: ['p5.strokeCap'],\n              PROJECT: ['p5.strokeCap'],\n              ROUND: ['p5.strokeCap', 'p5.strokeJoin'],\n              MITER: ['p5.strokeJoin'],\n              BEVEL: ['p5.strokeJoin'],\n              POINTS: ['p5.beginShape'],\n              LINES: ['p5.beginShape'],\n              TRIANGLES: ['p5.beginShape'],\n              TRIANGLE_FAN: ['p5.beginShape'],\n              TRIANGLE_STRIP: ['p5.beginShape'],\n              QUADS: ['p5.beginShape'],\n              QUAD_STRIP: ['p5.beginShape'],\n              CLOSE: ['p5.endShape'],\n              ARROW: ['p5.cursor'],\n              CROSS: ['p5.cursor'],\n              HAND: ['p5.cursor'],\n              MOVE: ['p5.cursor'],\n              TEXT: ['p5.cursor'],\n              P2D: ['p5.createCanvas', 'p5.createGraphics'],\n              WEBGL: ['p5.createCanvas', 'p5.createGraphics'],\n              BLEND: ['p5.blendMode', 'p5.Image.blend', 'p5.blend'],\n              DARKEST: ['p5.blendMode', 'p5.Image.blend', 'p5.blend'],\n              LIGHTEST: ['p5.blendMode', 'p5.Image.blend', 'p5.blend'],\n              DIFFERENCE: ['p5.blendMode', 'p5.Image.blend', 'p5.blend'],\n              MULTIPLY: ['p5.blendMode', 'p5.Image.blend', 'p5.blend'],\n              EXCLUSION: ['p5.blendMode', 'p5.Image.blend', 'p5.blend'],\n              SCREEN: ['p5.blendMode', 'p5.Image.blend', 'p5.blend'],\n              REPLACE: ['p5.blendMode', 'p5.Image.blend', 'p5.blend'],\n              OVERLAY: ['p5.blendMode', 'p5.Image.blend', 'p5.blend'],\n              HARD_LIGHT: ['p5.blendMode', 'p5.Image.blend', 'p5.blend'],\n              SOFT_LIGHT: ['p5.blendMode', 'p5.Image.blend', 'p5.blend'],\n              DODGE: ['p5.blendMode', 'p5.Image.blend', 'p5.blend'],\n              BURN: ['p5.blendMode', 'p5.Image.blend', 'p5.blend'],\n              ADD: ['p5.blendMode', 'p5.Image.blend', 'p5.blend'],\n              SUBTRACT: ['p5.blendMode'],\n              THRESHOLD: ['p5.Image.filter', 'p5.filter'],\n              GRAY: ['p5.Image.filter', 'p5.filter'],\n              OPAQUE: ['p5.Image.filter', 'p5.filter'],\n              INVERT: ['p5.Image.filter', 'p5.filter'],\n              POSTERIZE: ['p5.Image.filter', 'p5.filter'],\n              BLUR: ['p5.Image.filter', 'p5.filter'],\n              ERODE: ['p5.Image.filter', 'p5.filter'],\n              DILATE: ['p5.Image.filter', 'p5.filter'],\n              NORMAL: ['p5.Image.blend', 'p5.blend', 'p5.textStyle', 'p5.textureMode'],\n              RADIANS: ['p5.angleMode'],\n              DEGREES: ['p5.angleMode'],\n              LEFT: ['p5.textAlign'],\n              RIGHT: ['p5.textAlign'],\n              TOP: ['p5.textAlign'],\n              BOTTOM: ['p5.textAlign'],\n              BASELINE: ['p5.textAlign'],\n              ITALIC: ['p5.textStyle'],\n              BOLD: ['p5.textStyle'],\n              BOLDITALIC: ['p5.textStyle'],\n              IMAGE: ['p5.textureMode'],\n              CLAMP: ['p5.textureWrap'],\n              REPEAT: ['p5.textureWrap'],\n              MIRROR: ['p5.textureWrap'],\n              VIDEO: ['p5.createCapture'],\n              AUDIO: ['p5.createCapture']\n            }\n          };\n        },\n        {}\n      ],\n      2: [\n        function(_dereq_, module, exports) {\n          'use strict';\n\n          exports.byteLength = byteLength;\n          exports.toByteArray = toByteArray;\n          exports.fromByteArray = fromByteArray;\n\n          var lookup = [];\n          var revLookup = [];\n          var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n\n          var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n          for (var i = 0, len = code.length; i < len; ++i) {\n            lookup[i] = code[i];\n            revLookup[code.charCodeAt(i)] = i;\n          }\n\n          // Support decoding URL-safe base64 strings, as Node.js does.\n          // See: https://en.wikipedia.org/wiki/Base64#URL_applications\n          revLookup['-'.charCodeAt(0)] = 62;\n          revLookup['_'.charCodeAt(0)] = 63;\n\n          function getLens(b64) {\n            var len = b64.length;\n\n            if (len % 4 > 0) {\n              throw new Error('Invalid string. Length must be a multiple of 4');\n            }\n\n            // Trim off extra bytes after placeholder bytes are found\n            // See: https://github.com/beatgammit/base64-js/issues/42\n            var validLen = b64.indexOf('=');\n            if (validLen === -1) validLen = len;\n\n            var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n\n            return [validLen, placeHoldersLen];\n          }\n\n          // base64 is 4/3 + up to two characters of the original data\n          function byteLength(b64) {\n            var lens = getLens(b64);\n            var validLen = lens[0];\n            var placeHoldersLen = lens[1];\n            return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n          }\n\n          function _byteLength(b64, validLen, placeHoldersLen) {\n            return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n          }\n\n          function toByteArray(b64) {\n            var tmp;\n            var lens = getLens(b64);\n            var validLen = lens[0];\n            var placeHoldersLen = lens[1];\n\n            var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n\n            var curByte = 0;\n\n            // if there are placeholders, only get up to the last complete 4 chars\n            var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n\n            for (var i = 0; i < len; i += 4) {\n              tmp =\n                (revLookup[b64.charCodeAt(i)] << 18) |\n                (revLookup[b64.charCodeAt(i + 1)] << 12) |\n                (revLookup[b64.charCodeAt(i + 2)] << 6) |\n                revLookup[b64.charCodeAt(i + 3)];\n              arr[curByte++] = (tmp >> 16) & 0xff;\n              arr[curByte++] = (tmp >> 8) & 0xff;\n              arr[curByte++] = tmp & 0xff;\n            }\n\n            if (placeHoldersLen === 2) {\n              tmp =\n                (revLookup[b64.charCodeAt(i)] << 2) |\n                (revLookup[b64.charCodeAt(i + 1)] >> 4);\n              arr[curByte++] = tmp & 0xff;\n            }\n\n            if (placeHoldersLen === 1) {\n              tmp =\n                (revLookup[b64.charCodeAt(i)] << 10) |\n                (revLookup[b64.charCodeAt(i + 1)] << 4) |\n                (revLookup[b64.charCodeAt(i + 2)] >> 2);\n              arr[curByte++] = (tmp >> 8) & 0xff;\n              arr[curByte++] = tmp & 0xff;\n            }\n\n            return arr;\n          }\n\n          function tripletToBase64(num) {\n            return (\n              lookup[(num >> 18) & 0x3f] +\n              lookup[(num >> 12) & 0x3f] +\n              lookup[(num >> 6) & 0x3f] +\n              lookup[num & 0x3f]\n            );\n          }\n\n          function encodeChunk(uint8, start, end) {\n            var tmp;\n            var output = [];\n            for (var i = start; i < end; i += 3) {\n              tmp =\n                ((uint8[i] << 16) & 0xff0000) +\n                ((uint8[i + 1] << 8) & 0xff00) +\n                (uint8[i + 2] & 0xff);\n              output.push(tripletToBase64(tmp));\n            }\n            return output.join('');\n          }\n\n          function fromByteArray(uint8) {\n            var tmp;\n            var len = uint8.length;\n            var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n            var parts = [];\n            var maxChunkLength = 16383; // must be multiple of 3\n\n            // go through the array every three bytes, we'll deal with trailing stuff later\n            for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n              parts.push(\n                encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength)\n              );\n            }\n\n            // pad the end with zeros, but make sure to not forget the extra bytes\n            if (extraBytes === 1) {\n              tmp = uint8[len - 1];\n              parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 0x3f] + '==');\n            } else if (extraBytes === 2) {\n              tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n              parts.push(\n                lookup[tmp >> 10] +\n                  lookup[(tmp >> 4) & 0x3f] +\n                  lookup[(tmp << 2) & 0x3f] +\n                  '='\n              );\n            }\n\n            return parts.join('');\n          }\n        },\n        {}\n      ],\n      3: [function(_dereq_, module, exports) {}, {}],\n      4: [\n        function(_dereq_, module, exports) {\n          /*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n          /* eslint-disable no-proto */\n\n          'use strict';\n\n          var base64 = _dereq_('base64-js');\n          var ieee754 = _dereq_('ieee754');\n\n          exports.Buffer = Buffer;\n          exports.SlowBuffer = SlowBuffer;\n          exports.INSPECT_MAX_BYTES = 50;\n\n          var K_MAX_LENGTH = 0x7fffffff;\n          exports.kMaxLength = K_MAX_LENGTH;\n\n          /**\n           * If `Buffer.TYPED_ARRAY_SUPPORT`:\n           *   === true    Use Uint8Array implementation (fastest)\n           *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n           *               implementation (most compatible, even IE6)\n           *\n           * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n           * Opera 11.6+, iOS 4.2+.\n           *\n           * We report that the browser does not support typed arrays if the are not subclassable\n           * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n           * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n           * for __proto__ and has a buggy typed array implementation.\n           */\n          Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\n\n          if (\n            !Buffer.TYPED_ARRAY_SUPPORT &&\n            typeof console !== 'undefined' &&\n            typeof console.error === 'function'\n          ) {\n            console.error(\n              'This browser lacks typed array (Uint8Array) support which is required by ' +\n                '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n            );\n          }\n\n          function typedArraySupport() {\n            // Can typed array instances can be augmented?\n            try {\n              var arr = new Uint8Array(1);\n              arr.__proto__ = {\n                __proto__: Uint8Array.prototype,\n                foo: function() {\n                  return 42;\n                }\n              };\n              return arr.foo() === 42;\n            } catch (e) {\n              return false;\n            }\n          }\n\n          Object.defineProperty(Buffer.prototype, 'parent', {\n            enumerable: true,\n            get: function() {\n              if (!Buffer.isBuffer(this)) return undefined;\n              return this.buffer;\n            }\n          });\n\n          Object.defineProperty(Buffer.prototype, 'offset', {\n            enumerable: true,\n            get: function() {\n              if (!Buffer.isBuffer(this)) return undefined;\n              return this.byteOffset;\n            }\n          });\n\n          function createBuffer(length) {\n            if (length > K_MAX_LENGTH) {\n              throw new RangeError(\n                'The value \"' + length + '\" is invalid for option \"size\"'\n              );\n            }\n            // Return an augmented `Uint8Array` instance\n            var buf = new Uint8Array(length);\n            buf.__proto__ = Buffer.prototype;\n            return buf;\n          }\n\n          /**\n           * The Buffer constructor returns instances of `Uint8Array` that have their\n           * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n           * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n           * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n           * returns a single octet.\n           *\n           * The `Uint8Array` prototype remains unmodified.\n           */\n\n          function Buffer(arg, encodingOrOffset, length) {\n            // Common case.\n            if (typeof arg === 'number') {\n              if (typeof encodingOrOffset === 'string') {\n                throw new TypeError(\n                  'The \"string\" argument must be of type string. Received type number'\n                );\n              }\n              return allocUnsafe(arg);\n            }\n            return from(arg, encodingOrOffset, length);\n          }\n\n          // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n          if (\n            typeof Symbol !== 'undefined' &&\n            Symbol.species != null &&\n            Buffer[Symbol.species] === Buffer\n          ) {\n            Object.defineProperty(Buffer, Symbol.species, {\n              value: null,\n              configurable: true,\n              enumerable: false,\n              writable: false\n            });\n          }\n\n          Buffer.poolSize = 8192; // not used by this implementation\n\n          function from(value, encodingOrOffset, length) {\n            if (typeof value === 'string') {\n              return fromString(value, encodingOrOffset);\n            }\n\n            if (ArrayBuffer.isView(value)) {\n              return fromArrayLike(value);\n            }\n\n            if (value == null) {\n              throw TypeError(\n                'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n                  'or Array-like Object. Received type ' +\n                  typeof value\n              );\n            }\n\n            if (\n              isInstance(value, ArrayBuffer) ||\n              (value && isInstance(value.buffer, ArrayBuffer))\n            ) {\n              return fromArrayBuffer(value, encodingOrOffset, length);\n            }\n\n            if (typeof value === 'number') {\n              throw new TypeError(\n                'The \"value\" argument must not be of type number. Received type number'\n              );\n            }\n\n            var valueOf = value.valueOf && value.valueOf();\n            if (valueOf != null && valueOf !== value) {\n              return Buffer.from(valueOf, encodingOrOffset, length);\n            }\n\n            var b = fromObject(value);\n            if (b) return b;\n\n            if (\n              typeof Symbol !== 'undefined' &&\n              Symbol.toPrimitive != null &&\n              typeof value[Symbol.toPrimitive] === 'function'\n            ) {\n              return Buffer.from(\n                value[Symbol.toPrimitive]('string'),\n                encodingOrOffset,\n                length\n              );\n            }\n\n            throw new TypeError(\n              'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n                'or Array-like Object. Received type ' +\n                typeof value\n            );\n          }\n\n          /**\n           * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n           * if value is a number.\n           * Buffer.from(str[, encoding])\n           * Buffer.from(array)\n           * Buffer.from(buffer)\n           * Buffer.from(arrayBuffer[, byteOffset[, length]])\n           **/\n          Buffer.from = function(value, encodingOrOffset, length) {\n            return from(value, encodingOrOffset, length);\n          };\n\n          // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n          // https://github.com/feross/buffer/pull/148\n          Buffer.prototype.__proto__ = Uint8Array.prototype;\n          Buffer.__proto__ = Uint8Array;\n\n          function assertSize(size) {\n            if (typeof size !== 'number') {\n              throw new TypeError('\"size\" argument must be of type number');\n            } else if (size < 0) {\n              throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n            }\n          }\n\n          function alloc(size, fill, encoding) {\n            assertSize(size);\n            if (size <= 0) {\n              return createBuffer(size);\n            }\n            if (fill !== undefined) {\n              // Only pay attention to encoding if it's a string. This\n              // prevents accidentally sending in a number that would\n              // be interpretted as a start offset.\n              return typeof encoding === 'string'\n                ? createBuffer(size).fill(fill, encoding)\n                : createBuffer(size).fill(fill);\n            }\n            return createBuffer(size);\n          }\n\n          /**\n           * Creates a new filled Buffer instance.\n           * alloc(size[, fill[, encoding]])\n           **/\n          Buffer.alloc = function(size, fill, encoding) {\n            return alloc(size, fill, encoding);\n          };\n\n          function allocUnsafe(size) {\n            assertSize(size);\n            return createBuffer(size < 0 ? 0 : checked(size) | 0);\n          }\n\n          /**\n           * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n           * */\n          Buffer.allocUnsafe = function(size) {\n            return allocUnsafe(size);\n          };\n          /**\n           * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n           */\n          Buffer.allocUnsafeSlow = function(size) {\n            return allocUnsafe(size);\n          };\n\n          function fromString(string, encoding) {\n            if (typeof encoding !== 'string' || encoding === '') {\n              encoding = 'utf8';\n            }\n\n            if (!Buffer.isEncoding(encoding)) {\n              throw new TypeError('Unknown encoding: ' + encoding);\n            }\n\n            var length = byteLength(string, encoding) | 0;\n            var buf = createBuffer(length);\n\n            var actual = buf.write(string, encoding);\n\n            if (actual !== length) {\n              // Writing a hex string, for example, that contains invalid characters will\n              // cause everything after the first invalid character to be ignored. (e.g.\n              // 'abxxcd' will be treated as 'ab')\n              buf = buf.slice(0, actual);\n            }\n\n            return buf;\n          }\n\n          function fromArrayLike(array) {\n            var length = array.length < 0 ? 0 : checked(array.length) | 0;\n            var buf = createBuffer(length);\n            for (var i = 0; i < length; i += 1) {\n              buf[i] = array[i] & 255;\n            }\n            return buf;\n          }\n\n          function fromArrayBuffer(array, byteOffset, length) {\n            if (byteOffset < 0 || array.byteLength < byteOffset) {\n              throw new RangeError('\"offset\" is outside of buffer bounds');\n            }\n\n            if (array.byteLength < byteOffset + (length || 0)) {\n              throw new RangeError('\"length\" is outside of buffer bounds');\n            }\n\n            var buf;\n            if (byteOffset === undefined && length === undefined) {\n              buf = new Uint8Array(array);\n            } else if (length === undefined) {\n              buf = new Uint8Array(array, byteOffset);\n            } else {\n              buf = new Uint8Array(array, byteOffset, length);\n            }\n\n            // Return an augmented `Uint8Array` instance\n            buf.__proto__ = Buffer.prototype;\n            return buf;\n          }\n\n          function fromObject(obj) {\n            if (Buffer.isBuffer(obj)) {\n              var len = checked(obj.length) | 0;\n              var buf = createBuffer(len);\n\n              if (buf.length === 0) {\n                return buf;\n              }\n\n              obj.copy(buf, 0, 0, len);\n              return buf;\n            }\n\n            if (obj.length !== undefined) {\n              if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n                return createBuffer(0);\n              }\n              return fromArrayLike(obj);\n            }\n\n            if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n              return fromArrayLike(obj.data);\n            }\n          }\n\n          function checked(length) {\n            // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n            // length is NaN (which is otherwise coerced to zero.)\n            if (length >= K_MAX_LENGTH) {\n              throw new RangeError(\n                'Attempt to allocate Buffer larger than maximum ' +\n                  'size: 0x' +\n                  K_MAX_LENGTH.toString(16) +\n                  ' bytes'\n              );\n            }\n            return length | 0;\n          }\n\n          function SlowBuffer(length) {\n            if (+length != length) {\n              // eslint-disable-line eqeqeq\n              length = 0;\n            }\n            return Buffer.alloc(+length);\n          }\n\n          Buffer.isBuffer = function isBuffer(b) {\n            return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false\n          };\n\n          Buffer.compare = function compare(a, b) {\n            if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);\n            if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);\n            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n              throw new TypeError(\n                'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n              );\n            }\n\n            if (a === b) return 0;\n\n            var x = a.length;\n            var y = b.length;\n\n            for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n              if (a[i] !== b[i]) {\n                x = a[i];\n                y = b[i];\n                break;\n              }\n            }\n\n            if (x < y) return -1;\n            if (y < x) return 1;\n            return 0;\n          };\n\n          Buffer.isEncoding = function isEncoding(encoding) {\n            switch (String(encoding).toLowerCase()) {\n              case 'hex':\n              case 'utf8':\n              case 'utf-8':\n              case 'ascii':\n              case 'latin1':\n              case 'binary':\n              case 'base64':\n              case 'ucs2':\n              case 'ucs-2':\n              case 'utf16le':\n              case 'utf-16le':\n                return true;\n              default:\n                return false;\n            }\n          };\n\n          Buffer.concat = function concat(list, length) {\n            if (!Array.isArray(list)) {\n              throw new TypeError('\"list\" argument must be an Array of Buffers');\n            }\n\n            if (list.length === 0) {\n              return Buffer.alloc(0);\n            }\n\n            var i;\n            if (length === undefined) {\n              length = 0;\n              for (i = 0; i < list.length; ++i) {\n                length += list[i].length;\n              }\n            }\n\n            var buffer = Buffer.allocUnsafe(length);\n            var pos = 0;\n            for (i = 0; i < list.length; ++i) {\n              var buf = list[i];\n              if (isInstance(buf, Uint8Array)) {\n                buf = Buffer.from(buf);\n              }\n              if (!Buffer.isBuffer(buf)) {\n                throw new TypeError('\"list\" argument must be an Array of Buffers');\n              }\n              buf.copy(buffer, pos);\n              pos += buf.length;\n            }\n            return buffer;\n          };\n\n          function byteLength(string, encoding) {\n            if (Buffer.isBuffer(string)) {\n              return string.length;\n            }\n            if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n              return string.byteLength;\n            }\n            if (typeof string !== 'string') {\n              throw new TypeError(\n                'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n                  'Received type ' +\n                  typeof string\n              );\n            }\n\n            var len = string.length;\n            var mustMatch = arguments.length > 2 && arguments[2] === true;\n            if (!mustMatch && len === 0) return 0;\n\n            // Use a for loop to avoid recursion\n            var loweredCase = false;\n            for (;;) {\n              switch (encoding) {\n                case 'ascii':\n                case 'latin1':\n                case 'binary':\n                  return len;\n                case 'utf8':\n                case 'utf-8':\n                  return utf8ToBytes(string).length;\n                case 'ucs2':\n                case 'ucs-2':\n                case 'utf16le':\n                case 'utf-16le':\n                  return len * 2;\n                case 'hex':\n                  return len >>> 1;\n                case 'base64':\n                  return base64ToBytes(string).length;\n                default:\n                  if (loweredCase) {\n                    return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8\n                  }\n                  encoding = ('' + encoding).toLowerCase();\n                  loweredCase = true;\n              }\n            }\n          }\n          Buffer.byteLength = byteLength;\n\n          function slowToString(encoding, start, end) {\n            var loweredCase = false;\n\n            // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n            // property of a typed array.\n\n            // This behaves neither like String nor Uint8Array in that we set start/end\n            // to their upper/lower bounds if the value passed is out of range.\n            // undefined is handled specially as per ECMA-262 6th Edition,\n            // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n            if (start === undefined || start < 0) {\n              start = 0;\n            }\n            // Return early if start > this.length. Done here to prevent potential uint32\n            // coercion fail below.\n            if (start > this.length) {\n              return '';\n            }\n\n            if (end === undefined || end > this.length) {\n              end = this.length;\n            }\n\n            if (end <= 0) {\n              return '';\n            }\n\n            // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n            end >>>= 0;\n            start >>>= 0;\n\n            if (end <= start) {\n              return '';\n            }\n\n            if (!encoding) encoding = 'utf8';\n\n            while (true) {\n              switch (encoding) {\n                case 'hex':\n                  return hexSlice(this, start, end);\n\n                case 'utf8':\n                case 'utf-8':\n                  return utf8Slice(this, start, end);\n\n                case 'ascii':\n                  return asciiSlice(this, start, end);\n\n                case 'latin1':\n                case 'binary':\n                  return latin1Slice(this, start, end);\n\n                case 'base64':\n                  return base64Slice(this, start, end);\n\n                case 'ucs2':\n                case 'ucs-2':\n                case 'utf16le':\n                case 'utf-16le':\n                  return utf16leSlice(this, start, end);\n\n                default:\n                  if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n                  encoding = (encoding + '').toLowerCase();\n                  loweredCase = true;\n              }\n            }\n          }\n\n          // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n          // to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n          // reliably in a browserify context because there could be multiple different\n          // copies of the 'buffer' package in use. This method works even for Buffer\n          // instances that were created from another copy of the `buffer` package.\n          // See: https://github.com/feross/buffer/issues/154\n          Buffer.prototype._isBuffer = true;\n\n          function swap(b, n, m) {\n            var i = b[n];\n            b[n] = b[m];\n            b[m] = i;\n          }\n\n          Buffer.prototype.swap16 = function swap16() {\n            var len = this.length;\n            if (len % 2 !== 0) {\n              throw new RangeError('Buffer size must be a multiple of 16-bits');\n            }\n            for (var i = 0; i < len; i += 2) {\n              swap(this, i, i + 1);\n            }\n            return this;\n          };\n\n          Buffer.prototype.swap32 = function swap32() {\n            var len = this.length;\n            if (len % 4 !== 0) {\n              throw new RangeError('Buffer size must be a multiple of 32-bits');\n            }\n            for (var i = 0; i < len; i += 4) {\n              swap(this, i, i + 3);\n              swap(this, i + 1, i + 2);\n            }\n            return this;\n          };\n\n          Buffer.prototype.swap64 = function swap64() {\n            var len = this.length;\n            if (len % 8 !== 0) {\n              throw new RangeError('Buffer size must be a multiple of 64-bits');\n            }\n            for (var i = 0; i < len; i += 8) {\n              swap(this, i, i + 7);\n              swap(this, i + 1, i + 6);\n              swap(this, i + 2, i + 5);\n              swap(this, i + 3, i + 4);\n            }\n            return this;\n          };\n\n          Buffer.prototype.toString = function toString() {\n            var length = this.length;\n            if (length === 0) return '';\n            if (arguments.length === 0) return utf8Slice(this, 0, length);\n            return slowToString.apply(this, arguments);\n          };\n\n          Buffer.prototype.toLocaleString = Buffer.prototype.toString;\n\n          Buffer.prototype.equals = function equals(b) {\n            if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n            if (this === b) return true;\n            return Buffer.compare(this, b) === 0;\n          };\n\n          Buffer.prototype.inspect = function inspect() {\n            var str = '';\n            var max = exports.INSPECT_MAX_BYTES;\n            str = this.toString('hex', 0, max)\n              .replace(/(.{2})/g, '$1 ')\n              .trim();\n            if (this.length > max) str += ' ... ';\n            return '<Buffer ' + str + '>';\n          };\n\n          Buffer.prototype.compare = function compare(\n            target,\n            start,\n            end,\n            thisStart,\n            thisEnd\n          ) {\n            if (isInstance(target, Uint8Array)) {\n              target = Buffer.from(target, target.offset, target.byteLength);\n            }\n            if (!Buffer.isBuffer(target)) {\n              throw new TypeError(\n                'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n                  'Received type ' +\n                  typeof target\n              );\n            }\n\n            if (start === undefined) {\n              start = 0;\n            }\n            if (end === undefined) {\n              end = target ? target.length : 0;\n            }\n            if (thisStart === undefined) {\n              thisStart = 0;\n            }\n            if (thisEnd === undefined) {\n              thisEnd = this.length;\n            }\n\n            if (\n              start < 0 ||\n              end > target.length ||\n              thisStart < 0 ||\n              thisEnd > this.length\n            ) {\n              throw new RangeError('out of range index');\n            }\n\n            if (thisStart >= thisEnd && start >= end) {\n              return 0;\n            }\n            if (thisStart >= thisEnd) {\n              return -1;\n            }\n            if (start >= end) {\n              return 1;\n            }\n\n            start >>>= 0;\n            end >>>= 0;\n            thisStart >>>= 0;\n            thisEnd >>>= 0;\n\n            if (this === target) return 0;\n\n            var x = thisEnd - thisStart;\n            var y = end - start;\n            var len = Math.min(x, y);\n\n            var thisCopy = this.slice(thisStart, thisEnd);\n            var targetCopy = target.slice(start, end);\n\n            for (var i = 0; i < len; ++i) {\n              if (thisCopy[i] !== targetCopy[i]) {\n                x = thisCopy[i];\n                y = targetCopy[i];\n                break;\n              }\n            }\n\n            if (x < y) return -1;\n            if (y < x) return 1;\n            return 0;\n          };\n\n          // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n          // OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n          //\n          // Arguments:\n          // - buffer - a Buffer to search\n          // - val - a string, Buffer, or number\n          // - byteOffset - an index into `buffer`; will be clamped to an int32\n          // - encoding - an optional encoding, relevant is val is a string\n          // - dir - true for indexOf, false for lastIndexOf\n          function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n            // Empty buffer means no match\n            if (buffer.length === 0) return -1;\n\n            // Normalize byteOffset\n            if (typeof byteOffset === 'string') {\n              encoding = byteOffset;\n              byteOffset = 0;\n            } else if (byteOffset > 0x7fffffff) {\n              byteOffset = 0x7fffffff;\n            } else if (byteOffset < -0x80000000) {\n              byteOffset = -0x80000000;\n            }\n            byteOffset = +byteOffset; // Coerce to Number.\n            if (numberIsNaN(byteOffset)) {\n              // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n              byteOffset = dir ? 0 : buffer.length - 1;\n            }\n\n            // Normalize byteOffset: negative offsets start from the end of the buffer\n            if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n            if (byteOffset >= buffer.length) {\n              if (dir) return -1;\n              else byteOffset = buffer.length - 1;\n            } else if (byteOffset < 0) {\n              if (dir) byteOffset = 0;\n              else return -1;\n            }\n\n            // Normalize val\n            if (typeof val === 'string') {\n              val = Buffer.from(val, encoding);\n            }\n\n            // Finally, search either indexOf (if dir is true) or lastIndexOf\n            if (Buffer.isBuffer(val)) {\n              // Special case: looking for empty string/buffer always fails\n              if (val.length === 0) {\n                return -1;\n              }\n              return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n            } else if (typeof val === 'number') {\n              val = val & 0xff; // Search for a byte value [0-255]\n              if (typeof Uint8Array.prototype.indexOf === 'function') {\n                if (dir) {\n                  return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n                } else {\n                  return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n                }\n              }\n              return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n            }\n\n            throw new TypeError('val must be string, number or Buffer');\n          }\n\n          function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n            var indexSize = 1;\n            var arrLength = arr.length;\n            var valLength = val.length;\n\n            if (encoding !== undefined) {\n              encoding = String(encoding).toLowerCase();\n              if (\n                encoding === 'ucs2' ||\n                encoding === 'ucs-2' ||\n                encoding === 'utf16le' ||\n                encoding === 'utf-16le'\n              ) {\n                if (arr.length < 2 || val.length < 2) {\n                  return -1;\n                }\n                indexSize = 2;\n                arrLength /= 2;\n                valLength /= 2;\n                byteOffset /= 2;\n              }\n            }\n\n            function read(buf, i) {\n              if (indexSize === 1) {\n                return buf[i];\n              } else {\n                return buf.readUInt16BE(i * indexSize);\n              }\n            }\n\n            var i;\n            if (dir) {\n              var foundIndex = -1;\n              for (i = byteOffset; i < arrLength; i++) {\n                if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n                  if (foundIndex === -1) foundIndex = i;\n                  if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n                } else {\n                  if (foundIndex !== -1) i -= i - foundIndex;\n                  foundIndex = -1;\n                }\n              }\n            } else {\n              if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n              for (i = byteOffset; i >= 0; i--) {\n                var found = true;\n                for (var j = 0; j < valLength; j++) {\n                  if (read(arr, i + j) !== read(val, j)) {\n                    found = false;\n                    break;\n                  }\n                }\n                if (found) return i;\n              }\n            }\n\n            return -1;\n          }\n\n          Buffer.prototype.includes = function includes(val, byteOffset, encoding) {\n            return this.indexOf(val, byteOffset, encoding) !== -1;\n          };\n\n          Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n            return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n          };\n\n          Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n            return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n          };\n\n          function hexWrite(buf, string, offset, length) {\n            offset = Number(offset) || 0;\n            var remaining = buf.length - offset;\n            if (!length) {\n              length = remaining;\n            } else {\n              length = Number(length);\n              if (length > remaining) {\n                length = remaining;\n              }\n            }\n\n            var strLen = string.length;\n\n            if (length > strLen / 2) {\n              length = strLen / 2;\n            }\n            for (var i = 0; i < length; ++i) {\n              var parsed = parseInt(string.substr(i * 2, 2), 16);\n              if (numberIsNaN(parsed)) return i;\n              buf[offset + i] = parsed;\n            }\n            return i;\n          }\n\n          function utf8Write(buf, string, offset, length) {\n            return blitBuffer(\n              utf8ToBytes(string, buf.length - offset),\n              buf,\n              offset,\n              length\n            );\n          }\n\n          function asciiWrite(buf, string, offset, length) {\n            return blitBuffer(asciiToBytes(string), buf, offset, length);\n          }\n\n          function latin1Write(buf, string, offset, length) {\n            return asciiWrite(buf, string, offset, length);\n          }\n\n          function base64Write(buf, string, offset, length) {\n            return blitBuffer(base64ToBytes(string), buf, offset, length);\n          }\n\n          function ucs2Write(buf, string, offset, length) {\n            return blitBuffer(\n              utf16leToBytes(string, buf.length - offset),\n              buf,\n              offset,\n              length\n            );\n          }\n\n          Buffer.prototype.write = function write(string, offset, length, encoding) {\n            // Buffer#write(string)\n            if (offset === undefined) {\n              encoding = 'utf8';\n              length = this.length;\n              offset = 0;\n              // Buffer#write(string, encoding)\n            } else if (length === undefined && typeof offset === 'string') {\n              encoding = offset;\n              length = this.length;\n              offset = 0;\n              // Buffer#write(string, offset[, length][, encoding])\n            } else if (isFinite(offset)) {\n              offset = offset >>> 0;\n              if (isFinite(length)) {\n                length = length >>> 0;\n                if (encoding === undefined) encoding = 'utf8';\n              } else {\n                encoding = length;\n                length = undefined;\n              }\n            } else {\n              throw new Error(\n                'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n              );\n            }\n\n            var remaining = this.length - offset;\n            if (length === undefined || length > remaining) length = remaining;\n\n            if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n              throw new RangeError('Attempt to write outside buffer bounds');\n            }\n\n            if (!encoding) encoding = 'utf8';\n\n            var loweredCase = false;\n            for (;;) {\n              switch (encoding) {\n                case 'hex':\n                  return hexWrite(this, string, offset, length);\n\n                case 'utf8':\n                case 'utf-8':\n                  return utf8Write(this, string, offset, length);\n\n                case 'ascii':\n                  return asciiWrite(this, string, offset, length);\n\n                case 'latin1':\n                case 'binary':\n                  return latin1Write(this, string, offset, length);\n\n                case 'base64':\n                  // Warning: maxLength not taken into account in base64Write\n                  return base64Write(this, string, offset, length);\n\n                case 'ucs2':\n                case 'ucs-2':\n                case 'utf16le':\n                case 'utf-16le':\n                  return ucs2Write(this, string, offset, length);\n\n                default:\n                  if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n                  encoding = ('' + encoding).toLowerCase();\n                  loweredCase = true;\n              }\n            }\n          };\n\n          Buffer.prototype.toJSON = function toJSON() {\n            return {\n              type: 'Buffer',\n              data: Array.prototype.slice.call(this._arr || this, 0)\n            };\n          };\n\n          function base64Slice(buf, start, end) {\n            if (start === 0 && end === buf.length) {\n              return base64.fromByteArray(buf);\n            } else {\n              return base64.fromByteArray(buf.slice(start, end));\n            }\n          }\n\n          function utf8Slice(buf, start, end) {\n            end = Math.min(buf.length, end);\n            var res = [];\n\n            var i = start;\n            while (i < end) {\n              var firstByte = buf[i];\n              var codePoint = null;\n              var bytesPerSequence =\n                firstByte > 0xef ? 4 : firstByte > 0xdf ? 3 : firstByte > 0xbf ? 2 : 1;\n\n              if (i + bytesPerSequence <= end) {\n                var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n                switch (bytesPerSequence) {\n                  case 1:\n                    if (firstByte < 0x80) {\n                      codePoint = firstByte;\n                    }\n                    break;\n                  case 2:\n                    secondByte = buf[i + 1];\n                    if ((secondByte & 0xc0) === 0x80) {\n                      tempCodePoint = ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f);\n                      if (tempCodePoint > 0x7f) {\n                        codePoint = tempCodePoint;\n                      }\n                    }\n                    break;\n                  case 3:\n                    secondByte = buf[i + 1];\n                    thirdByte = buf[i + 2];\n                    if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80) {\n                      tempCodePoint =\n                        ((firstByte & 0xf) << 0xc) |\n                        ((secondByte & 0x3f) << 0x6) |\n                        (thirdByte & 0x3f);\n                      if (\n                        tempCodePoint > 0x7ff &&\n                        (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)\n                      ) {\n                        codePoint = tempCodePoint;\n                      }\n                    }\n                    break;\n                  case 4:\n                    secondByte = buf[i + 1];\n                    thirdByte = buf[i + 2];\n                    fourthByte = buf[i + 3];\n                    if (\n                      (secondByte & 0xc0) === 0x80 &&\n                      (thirdByte & 0xc0) === 0x80 &&\n                      (fourthByte & 0xc0) === 0x80\n                    ) {\n                      tempCodePoint =\n                        ((firstByte & 0xf) << 0x12) |\n                        ((secondByte & 0x3f) << 0xc) |\n                        ((thirdByte & 0x3f) << 0x6) |\n                        (fourthByte & 0x3f);\n                      if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {\n                        codePoint = tempCodePoint;\n                      }\n                    }\n                }\n              }\n\n              if (codePoint === null) {\n                // we did not generate a valid codePoint so insert a\n                // replacement char (U+FFFD) and advance only 1 byte\n                codePoint = 0xfffd;\n                bytesPerSequence = 1;\n              } else if (codePoint > 0xffff) {\n                // encode to utf16 (surrogate pair dance)\n                codePoint -= 0x10000;\n                res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);\n                codePoint = 0xdc00 | (codePoint & 0x3ff);\n              }\n\n              res.push(codePoint);\n              i += bytesPerSequence;\n            }\n\n            return decodeCodePointsArray(res);\n          }\n\n          // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n          // the lowest limit is Chrome, with 0x10000 args.\n          // We go 1 magnitude less, for safety\n          var MAX_ARGUMENTS_LENGTH = 0x1000;\n\n          function decodeCodePointsArray(codePoints) {\n            var len = codePoints.length;\n            if (len <= MAX_ARGUMENTS_LENGTH) {\n              return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n            }\n\n            // Decode in chunks to avoid \"call stack size exceeded\".\n            var res = '';\n            var i = 0;\n            while (i < len) {\n              res += String.fromCharCode.apply(\n                String,\n                codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))\n              );\n            }\n            return res;\n          }\n\n          function asciiSlice(buf, start, end) {\n            var ret = '';\n            end = Math.min(buf.length, end);\n\n            for (var i = start; i < end; ++i) {\n              ret += String.fromCharCode(buf[i] & 0x7f);\n            }\n            return ret;\n          }\n\n          function latin1Slice(buf, start, end) {\n            var ret = '';\n            end = Math.min(buf.length, end);\n\n            for (var i = start; i < end; ++i) {\n              ret += String.fromCharCode(buf[i]);\n            }\n            return ret;\n          }\n\n          function hexSlice(buf, start, end) {\n            var len = buf.length;\n\n            if (!start || start < 0) start = 0;\n            if (!end || end < 0 || end > len) end = len;\n\n            var out = '';\n            for (var i = start; i < end; ++i) {\n              out += toHex(buf[i]);\n            }\n            return out;\n          }\n\n          function utf16leSlice(buf, start, end) {\n            var bytes = buf.slice(start, end);\n            var res = '';\n            for (var i = 0; i < bytes.length; i += 2) {\n              res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n            }\n            return res;\n          }\n\n          Buffer.prototype.slice = function slice(start, end) {\n            var len = this.length;\n            start = ~~start;\n            end = end === undefined ? len : ~~end;\n\n            if (start < 0) {\n              start += len;\n              if (start < 0) start = 0;\n            } else if (start > len) {\n              start = len;\n            }\n\n            if (end < 0) {\n              end += len;\n              if (end < 0) end = 0;\n            } else if (end > len) {\n              end = len;\n            }\n\n            if (end < start) end = start;\n\n            var newBuf = this.subarray(start, end);\n            // Return an augmented `Uint8Array` instance\n            newBuf.__proto__ = Buffer.prototype;\n            return newBuf;\n          };\n\n          /*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\n          function checkOffset(offset, ext, length) {\n            if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n            if (offset + ext > length)\n              throw new RangeError('Trying to access beyond buffer length');\n          }\n\n          Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n            offset = offset >>> 0;\n            byteLength = byteLength >>> 0;\n            if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n            var val = this[offset];\n            var mul = 1;\n            var i = 0;\n            while (++i < byteLength && (mul *= 0x100)) {\n              val += this[offset + i] * mul;\n            }\n\n            return val;\n          };\n\n          Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n            offset = offset >>> 0;\n            byteLength = byteLength >>> 0;\n            if (!noAssert) {\n              checkOffset(offset, byteLength, this.length);\n            }\n\n            var val = this[offset + --byteLength];\n            var mul = 1;\n            while (byteLength > 0 && (mul *= 0x100)) {\n              val += this[offset + --byteLength] * mul;\n            }\n\n            return val;\n          };\n\n          Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 1, this.length);\n            return this[offset];\n          };\n\n          Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 2, this.length);\n            return this[offset] | (this[offset + 1] << 8);\n          };\n\n          Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 2, this.length);\n            return (this[offset] << 8) | this[offset + 1];\n          };\n\n          Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 4, this.length);\n\n            return (\n              (this[offset] | (this[offset + 1] << 8) | (this[offset + 2] << 16)) +\n              this[offset + 3] * 0x1000000\n            );\n          };\n\n          Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 4, this.length);\n\n            return (\n              this[offset] * 0x1000000 +\n              ((this[offset + 1] << 16) | (this[offset + 2] << 8) | this[offset + 3])\n            );\n          };\n\n          Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n            offset = offset >>> 0;\n            byteLength = byteLength >>> 0;\n            if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n            var val = this[offset];\n            var mul = 1;\n            var i = 0;\n            while (++i < byteLength && (mul *= 0x100)) {\n              val += this[offset + i] * mul;\n            }\n            mul *= 0x80;\n\n            if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n            return val;\n          };\n\n          Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n            offset = offset >>> 0;\n            byteLength = byteLength >>> 0;\n            if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n            var i = byteLength;\n            var mul = 1;\n            var val = this[offset + --i];\n            while (i > 0 && (mul *= 0x100)) {\n              val += this[offset + --i] * mul;\n            }\n            mul *= 0x80;\n\n            if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n            return val;\n          };\n\n          Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 1, this.length);\n            if (!(this[offset] & 0x80)) return this[offset];\n            return (0xff - this[offset] + 1) * -1;\n          };\n\n          Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 2, this.length);\n            var val = this[offset] | (this[offset + 1] << 8);\n            return val & 0x8000 ? val | 0xffff0000 : val;\n          };\n\n          Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 2, this.length);\n            var val = this[offset + 1] | (this[offset] << 8);\n            return val & 0x8000 ? val | 0xffff0000 : val;\n          };\n\n          Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 4, this.length);\n\n            return (\n              this[offset] |\n              (this[offset + 1] << 8) |\n              (this[offset + 2] << 16) |\n              (this[offset + 3] << 24)\n            );\n          };\n\n          Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 4, this.length);\n\n            return (\n              (this[offset] << 24) |\n              (this[offset + 1] << 16) |\n              (this[offset + 2] << 8) |\n              this[offset + 3]\n            );\n          };\n\n          Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return ieee754.read(this, offset, true, 23, 4);\n          };\n\n          Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return ieee754.read(this, offset, false, 23, 4);\n          };\n\n          Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 8, this.length);\n            return ieee754.read(this, offset, true, 52, 8);\n          };\n\n          Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 8, this.length);\n            return ieee754.read(this, offset, false, 52, 8);\n          };\n\n          function checkInt(buf, value, offset, ext, max, min) {\n            if (!Buffer.isBuffer(buf))\n              throw new TypeError('\"buffer\" argument must be a Buffer instance');\n            if (value > max || value < min)\n              throw new RangeError('\"value\" argument is out of bounds');\n            if (offset + ext > buf.length) throw new RangeError('Index out of range');\n          }\n\n          Buffer.prototype.writeUIntLE = function writeUIntLE(\n            value,\n            offset,\n            byteLength,\n            noAssert\n          ) {\n            value = +value;\n            offset = offset >>> 0;\n            byteLength = byteLength >>> 0;\n            if (!noAssert) {\n              var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n              checkInt(this, value, offset, byteLength, maxBytes, 0);\n            }\n\n            var mul = 1;\n            var i = 0;\n            this[offset] = value & 0xff;\n            while (++i < byteLength && (mul *= 0x100)) {\n              this[offset + i] = (value / mul) & 0xff;\n            }\n\n            return offset + byteLength;\n          };\n\n          Buffer.prototype.writeUIntBE = function writeUIntBE(\n            value,\n            offset,\n            byteLength,\n            noAssert\n          ) {\n            value = +value;\n            offset = offset >>> 0;\n            byteLength = byteLength >>> 0;\n            if (!noAssert) {\n              var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n              checkInt(this, value, offset, byteLength, maxBytes, 0);\n            }\n\n            var i = byteLength - 1;\n            var mul = 1;\n            this[offset + i] = value & 0xff;\n            while (--i >= 0 && (mul *= 0x100)) {\n              this[offset + i] = (value / mul) & 0xff;\n            }\n\n            return offset + byteLength;\n          };\n\n          Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n            this[offset] = value & 0xff;\n            return offset + 1;\n          };\n\n          Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n            this[offset] = value & 0xff;\n            this[offset + 1] = value >>> 8;\n            return offset + 2;\n          };\n\n          Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n            this[offset] = value >>> 8;\n            this[offset + 1] = value & 0xff;\n            return offset + 2;\n          };\n\n          Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n            this[offset + 3] = value >>> 24;\n            this[offset + 2] = value >>> 16;\n            this[offset + 1] = value >>> 8;\n            this[offset] = value & 0xff;\n            return offset + 4;\n          };\n\n          Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n            this[offset] = value >>> 24;\n            this[offset + 1] = value >>> 16;\n            this[offset + 2] = value >>> 8;\n            this[offset + 3] = value & 0xff;\n            return offset + 4;\n          };\n\n          Buffer.prototype.writeIntLE = function writeIntLE(\n            value,\n            offset,\n            byteLength,\n            noAssert\n          ) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) {\n              var limit = Math.pow(2, 8 * byteLength - 1);\n\n              checkInt(this, value, offset, byteLength, limit - 1, -limit);\n            }\n\n            var i = 0;\n            var mul = 1;\n            var sub = 0;\n            this[offset] = value & 0xff;\n            while (++i < byteLength && (mul *= 0x100)) {\n              if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n                sub = 1;\n              }\n              this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;\n            }\n\n            return offset + byteLength;\n          };\n\n          Buffer.prototype.writeIntBE = function writeIntBE(\n            value,\n            offset,\n            byteLength,\n            noAssert\n          ) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) {\n              var limit = Math.pow(2, 8 * byteLength - 1);\n\n              checkInt(this, value, offset, byteLength, limit - 1, -limit);\n            }\n\n            var i = byteLength - 1;\n            var mul = 1;\n            var sub = 0;\n            this[offset + i] = value & 0xff;\n            while (--i >= 0 && (mul *= 0x100)) {\n              if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n                sub = 1;\n              }\n              this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;\n            }\n\n            return offset + byteLength;\n          };\n\n          Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n            if (value < 0) value = 0xff + value + 1;\n            this[offset] = value & 0xff;\n            return offset + 1;\n          };\n\n          Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n            this[offset] = value & 0xff;\n            this[offset + 1] = value >>> 8;\n            return offset + 2;\n          };\n\n          Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n            this[offset] = value >>> 8;\n            this[offset + 1] = value & 0xff;\n            return offset + 2;\n          };\n\n          Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n            this[offset] = value & 0xff;\n            this[offset + 1] = value >>> 8;\n            this[offset + 2] = value >>> 16;\n            this[offset + 3] = value >>> 24;\n            return offset + 4;\n          };\n\n          Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n            if (value < 0) value = 0xffffffff + value + 1;\n            this[offset] = value >>> 24;\n            this[offset + 1] = value >>> 16;\n            this[offset + 2] = value >>> 8;\n            this[offset + 3] = value & 0xff;\n            return offset + 4;\n          };\n\n          function checkIEEE754(buf, value, offset, ext, max, min) {\n            if (offset + ext > buf.length) throw new RangeError('Index out of range');\n            if (offset < 0) throw new RangeError('Index out of range');\n          }\n\n          function writeFloat(buf, value, offset, littleEndian, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) {\n              checkIEEE754(\n                buf,\n                value,\n                offset,\n                4,\n                3.4028234663852886e38,\n                -3.4028234663852886e38\n              );\n            }\n            ieee754.write(buf, value, offset, littleEndian, 23, 4);\n            return offset + 4;\n          }\n\n          Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n            return writeFloat(this, value, offset, true, noAssert);\n          };\n\n          Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n            return writeFloat(this, value, offset, false, noAssert);\n          };\n\n          function writeDouble(buf, value, offset, littleEndian, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) {\n              checkIEEE754(\n                buf,\n                value,\n                offset,\n                8,\n                1.7976931348623157e308,\n                -1.7976931348623157e308\n              );\n            }\n            ieee754.write(buf, value, offset, littleEndian, 52, 8);\n            return offset + 8;\n          }\n\n          Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n            return writeDouble(this, value, offset, true, noAssert);\n          };\n\n          Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n            return writeDouble(this, value, offset, false, noAssert);\n          };\n\n          // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n          Buffer.prototype.copy = function copy(target, targetStart, start, end) {\n            if (!Buffer.isBuffer(target))\n              throw new TypeError('argument should be a Buffer');\n            if (!start) start = 0;\n            if (!end && end !== 0) end = this.length;\n            if (targetStart >= target.length) targetStart = target.length;\n            if (!targetStart) targetStart = 0;\n            if (end > 0 && end < start) end = start;\n\n            // Copy 0 bytes; we're done\n            if (end === start) return 0;\n            if (target.length === 0 || this.length === 0) return 0;\n\n            // Fatal error conditions\n            if (targetStart < 0) {\n              throw new RangeError('targetStart out of bounds');\n            }\n            if (start < 0 || start >= this.length)\n              throw new RangeError('Index out of range');\n            if (end < 0) throw new RangeError('sourceEnd out of bounds');\n\n            // Are we oob?\n            if (end > this.length) end = this.length;\n            if (target.length - targetStart < end - start) {\n              end = target.length - targetStart + start;\n            }\n\n            var len = end - start;\n\n            if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n              // Use built-in when available, missing from IE11\n              this.copyWithin(targetStart, start, end);\n            } else if (this === target && start < targetStart && targetStart < end) {\n              // descending copy from end\n              for (var i = len - 1; i >= 0; --i) {\n                target[i + targetStart] = this[i + start];\n              }\n            } else {\n              Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);\n            }\n\n            return len;\n          };\n\n          // Usage:\n          //    buffer.fill(number[, offset[, end]])\n          //    buffer.fill(buffer[, offset[, end]])\n          //    buffer.fill(string[, offset[, end]][, encoding])\n          Buffer.prototype.fill = function fill(val, start, end, encoding) {\n            // Handle string cases:\n            if (typeof val === 'string') {\n              if (typeof start === 'string') {\n                encoding = start;\n                start = 0;\n                end = this.length;\n              } else if (typeof end === 'string') {\n                encoding = end;\n                end = this.length;\n              }\n              if (encoding !== undefined && typeof encoding !== 'string') {\n                throw new TypeError('encoding must be a string');\n              }\n              if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n                throw new TypeError('Unknown encoding: ' + encoding);\n              }\n              if (val.length === 1) {\n                var code = val.charCodeAt(0);\n                if ((encoding === 'utf8' && code < 128) || encoding === 'latin1') {\n                  // Fast path: If `val` fits into a single byte, use that numeric value.\n                  val = code;\n                }\n              }\n            } else if (typeof val === 'number') {\n              val = val & 255;\n            }\n\n            // Invalid ranges are not set to a default, so can range check early.\n            if (start < 0 || this.length < start || this.length < end) {\n              throw new RangeError('Out of range index');\n            }\n\n            if (end <= start) {\n              return this;\n            }\n\n            start = start >>> 0;\n            end = end === undefined ? this.length : end >>> 0;\n\n            if (!val) val = 0;\n\n            var i;\n            if (typeof val === 'number') {\n              for (i = start; i < end; ++i) {\n                this[i] = val;\n              }\n            } else {\n              var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);\n              var len = bytes.length;\n              if (len === 0) {\n                throw new TypeError(\n                  'The value \"' + val + '\" is invalid for argument \"value\"'\n                );\n              }\n              for (i = 0; i < end - start; ++i) {\n                this[i + start] = bytes[i % len];\n              }\n            }\n\n            return this;\n          };\n\n          // HELPER FUNCTIONS\n          // ================\n\n          var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n\n          function base64clean(str) {\n            // Node takes equal signs as end of the Base64 encoding\n            str = str.split('=')[0];\n            // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n            str = str.trim().replace(INVALID_BASE64_RE, '');\n            // Node converts strings with length < 2 to ''\n            if (str.length < 2) return '';\n            // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n            while (str.length % 4 !== 0) {\n              str = str + '=';\n            }\n            return str;\n          }\n\n          function toHex(n) {\n            if (n < 16) return '0' + n.toString(16);\n            return n.toString(16);\n          }\n\n          function utf8ToBytes(string, units) {\n            units = units || Infinity;\n            var codePoint;\n            var length = string.length;\n            var leadSurrogate = null;\n            var bytes = [];\n\n            for (var i = 0; i < length; ++i) {\n              codePoint = string.charCodeAt(i);\n\n              // is surrogate component\n              if (codePoint > 0xd7ff && codePoint < 0xe000) {\n                // last char was a lead\n                if (!leadSurrogate) {\n                  // no lead yet\n                  if (codePoint > 0xdbff) {\n                    // unexpected trail\n                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);\n                    continue;\n                  } else if (i + 1 === length) {\n                    // unpaired lead\n                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);\n                    continue;\n                  }\n\n                  // valid lead\n                  leadSurrogate = codePoint;\n\n                  continue;\n                }\n\n                // 2 leads in a row\n                if (codePoint < 0xdc00) {\n                  if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);\n                  leadSurrogate = codePoint;\n                  continue;\n                }\n\n                // valid surrogate pair\n                codePoint =\n                  (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) + 0x10000;\n              } else if (leadSurrogate) {\n                // valid bmp char, but last char was a lead\n                if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);\n              }\n\n              leadSurrogate = null;\n\n              // encode utf8\n              if (codePoint < 0x80) {\n                if ((units -= 1) < 0) break;\n                bytes.push(codePoint);\n              } else if (codePoint < 0x800) {\n                if ((units -= 2) < 0) break;\n                bytes.push((codePoint >> 0x6) | 0xc0, (codePoint & 0x3f) | 0x80);\n              } else if (codePoint < 0x10000) {\n                if ((units -= 3) < 0) break;\n                bytes.push(\n                  (codePoint >> 0xc) | 0xe0,\n                  ((codePoint >> 0x6) & 0x3f) | 0x80,\n                  (codePoint & 0x3f) | 0x80\n                );\n              } else if (codePoint < 0x110000) {\n                if ((units -= 4) < 0) break;\n                bytes.push(\n                  (codePoint >> 0x12) | 0xf0,\n                  ((codePoint >> 0xc) & 0x3f) | 0x80,\n                  ((codePoint >> 0x6) & 0x3f) | 0x80,\n                  (codePoint & 0x3f) | 0x80\n                );\n              } else {\n                throw new Error('Invalid code point');\n              }\n            }\n\n            return bytes;\n          }\n\n          function asciiToBytes(str) {\n            var byteArray = [];\n            for (var i = 0; i < str.length; ++i) {\n              // Node's code seems to be doing this and not & 0x7F..\n              byteArray.push(str.charCodeAt(i) & 0xff);\n            }\n            return byteArray;\n          }\n\n          function utf16leToBytes(str, units) {\n            var c, hi, lo;\n            var byteArray = [];\n            for (var i = 0; i < str.length; ++i) {\n              if ((units -= 2) < 0) break;\n\n              c = str.charCodeAt(i);\n              hi = c >> 8;\n              lo = c % 256;\n              byteArray.push(lo);\n              byteArray.push(hi);\n            }\n\n            return byteArray;\n          }\n\n          function base64ToBytes(str) {\n            return base64.toByteArray(base64clean(str));\n          }\n\n          function blitBuffer(src, dst, offset, length) {\n            for (var i = 0; i < length; ++i) {\n              if (i + offset >= dst.length || i >= src.length) break;\n              dst[i + offset] = src[i];\n            }\n            return i;\n          }\n\n          // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n          // the `instanceof` check but they should be treated as of that type.\n          // See: https://github.com/feross/buffer/issues/166\n          function isInstance(obj, type) {\n            return (\n              obj instanceof type ||\n              (obj != null &&\n                obj.constructor != null &&\n                obj.constructor.name != null &&\n                obj.constructor.name === type.name)\n            );\n          }\n          function numberIsNaN(obj) {\n            // For IE11 support\n            return obj !== obj; // eslint-disable-line no-self-compare\n          }\n        },\n        { 'base64-js': 2, ieee754: 8 }\n      ],\n      5: [\n        function(_dereq_, module, exports) {\n          (function(process, global) {\n            /*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.6+9869a4bc\n */\n\n            (function(global, factory) {\n              typeof exports === 'object' && typeof module !== 'undefined'\n                ? (module.exports = factory())\n                : typeof define === 'function' && define.amd\n                  ? define(factory)\n                  : (global.ES6Promise = factory());\n            })(this, function() {\n              'use strict';\n\n              function objectOrFunction(x) {\n                var type = typeof x;\n                return x !== null && (type === 'object' || type === 'function');\n              }\n\n              function isFunction(x) {\n                return typeof x === 'function';\n              }\n\n              var _isArray = void 0;\n              if (Array.isArray) {\n                _isArray = Array.isArray;\n              } else {\n                _isArray = function(x) {\n                  return Object.prototype.toString.call(x) === '[object Array]';\n                };\n              }\n\n              var isArray = _isArray;\n\n              var len = 0;\n              var vertxNext = void 0;\n              var customSchedulerFn = void 0;\n\n              var asap = function asap(callback, arg) {\n                queue[len] = callback;\n                queue[len + 1] = arg;\n                len += 2;\n                if (len === 2) {\n                  // If len is 2, that means that we need to schedule an async flush.\n                  // If additional callbacks are queued before the queue is flushed, they\n                  // will be processed by this flush that we are scheduling.\n                  if (customSchedulerFn) {\n                    customSchedulerFn(flush);\n                  } else {\n                    scheduleFlush();\n                  }\n                }\n              };\n\n              function setScheduler(scheduleFn) {\n                customSchedulerFn = scheduleFn;\n              }\n\n              function setAsap(asapFn) {\n                asap = asapFn;\n              }\n\n              var browserWindow = typeof window !== 'undefined' ? window : undefined;\n              var browserGlobal = browserWindow || {};\n              var BrowserMutationObserver =\n                browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\n              var isNode =\n                typeof self === 'undefined' &&\n                typeof process !== 'undefined' &&\n                {}.toString.call(process) === '[object process]';\n\n              // test for web worker but not in IE10\n              var isWorker =\n                typeof Uint8ClampedArray !== 'undefined' &&\n                typeof importScripts !== 'undefined' &&\n                typeof MessageChannel !== 'undefined';\n\n              // node\n              function useNextTick() {\n                // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n                // see https://github.com/cujojs/when/issues/410 for details\n                return function() {\n                  return process.nextTick(flush);\n                };\n              }\n\n              // vertx\n              function useVertxTimer() {\n                if (typeof vertxNext !== 'undefined') {\n                  return function() {\n                    vertxNext(flush);\n                  };\n                }\n\n                return useSetTimeout();\n              }\n\n              function useMutationObserver() {\n                var iterations = 0;\n                var observer = new BrowserMutationObserver(flush);\n                var node = document.createTextNode('');\n                observer.observe(node, { characterData: true });\n\n                return function() {\n                  node.data = iterations = ++iterations % 2;\n                };\n              }\n\n              // web worker\n              function useMessageChannel() {\n                var channel = new MessageChannel();\n                channel.port1.onmessage = flush;\n                return function() {\n                  return channel.port2.postMessage(0);\n                };\n              }\n\n              function useSetTimeout() {\n                // Store setTimeout reference so es6-promise will be unaffected by\n                // other code modifying setTimeout (like sinon.useFakeTimers())\n                var globalSetTimeout = setTimeout;\n                return function() {\n                  return globalSetTimeout(flush, 1);\n                };\n              }\n\n              var queue = new Array(1000);\n              function flush() {\n                for (var i = 0; i < len; i += 2) {\n                  var callback = queue[i];\n                  var arg = queue[i + 1];\n\n                  callback(arg);\n\n                  queue[i] = undefined;\n                  queue[i + 1] = undefined;\n                }\n\n                len = 0;\n              }\n\n              function attemptVertx() {\n                try {\n                  var vertx = Function('return this')().require('vertx');\n                  vertxNext = vertx.runOnLoop || vertx.runOnContext;\n                  return useVertxTimer();\n                } catch (e) {\n                  return useSetTimeout();\n                }\n              }\n\n              var scheduleFlush = void 0;\n              // Decide what async method to use to triggering processing of queued callbacks:\n              if (isNode) {\n                scheduleFlush = useNextTick();\n              } else if (BrowserMutationObserver) {\n                scheduleFlush = useMutationObserver();\n              } else if (isWorker) {\n                scheduleFlush = useMessageChannel();\n              } else if (browserWindow === undefined && typeof _dereq_ === 'function') {\n                scheduleFlush = attemptVertx();\n              } else {\n                scheduleFlush = useSetTimeout();\n              }\n\n              function then(onFulfillment, onRejection) {\n                var parent = this;\n\n                var child = new this.constructor(noop);\n\n                if (child[PROMISE_ID] === undefined) {\n                  makePromise(child);\n                }\n\n                var _state = parent._state;\n\n                if (_state) {\n                  var callback = arguments[_state - 1];\n                  asap(function() {\n                    return invokeCallback(_state, child, callback, parent._result);\n                  });\n                } else {\n                  subscribe(parent, child, onFulfillment, onRejection);\n                }\n\n                return child;\n              }\n\n              /**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\n              function resolve$1(object) {\n                /*jshint validthis:true */\n                var Constructor = this;\n\n                if (\n                  object &&\n                  typeof object === 'object' &&\n                  object.constructor === Constructor\n                ) {\n                  return object;\n                }\n\n                var promise = new Constructor(noop);\n                resolve(promise, object);\n                return promise;\n              }\n\n              var PROMISE_ID = Math.random()\n                .toString(36)\n                .substring(2);\n\n              function noop() {}\n\n              var PENDING = void 0;\n              var FULFILLED = 1;\n              var REJECTED = 2;\n\n              var TRY_CATCH_ERROR = { error: null };\n\n              function selfFulfillment() {\n                return new TypeError('You cannot resolve a promise with itself');\n              }\n\n              function cannotReturnOwn() {\n                return new TypeError(\n                  'A promises callback cannot return that same promise.'\n                );\n              }\n\n              function getThen(promise) {\n                try {\n                  return promise.then;\n                } catch (error) {\n                  TRY_CATCH_ERROR.error = error;\n                  return TRY_CATCH_ERROR;\n                }\n              }\n\n              function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n                try {\n                  then$$1.call(value, fulfillmentHandler, rejectionHandler);\n                } catch (e) {\n                  return e;\n                }\n              }\n\n              function handleForeignThenable(promise, thenable, then$$1) {\n                asap(function(promise) {\n                  var sealed = false;\n                  var error = tryThen(\n                    then$$1,\n                    thenable,\n                    function(value) {\n                      if (sealed) {\n                        return;\n                      }\n                      sealed = true;\n                      if (thenable !== value) {\n                        resolve(promise, value);\n                      } else {\n                        fulfill(promise, value);\n                      }\n                    },\n                    function(reason) {\n                      if (sealed) {\n                        return;\n                      }\n                      sealed = true;\n\n                      reject(promise, reason);\n                    },\n                    'Settle: ' + (promise._label || ' unknown promise')\n                  );\n\n                  if (!sealed && error) {\n                    sealed = true;\n                    reject(promise, error);\n                  }\n                }, promise);\n              }\n\n              function handleOwnThenable(promise, thenable) {\n                if (thenable._state === FULFILLED) {\n                  fulfill(promise, thenable._result);\n                } else if (thenable._state === REJECTED) {\n                  reject(promise, thenable._result);\n                } else {\n                  subscribe(\n                    thenable,\n                    undefined,\n                    function(value) {\n                      return resolve(promise, value);\n                    },\n                    function(reason) {\n                      return reject(promise, reason);\n                    }\n                  );\n                }\n              }\n\n              function handleMaybeThenable(promise, maybeThenable, then$$1) {\n                if (\n                  maybeThenable.constructor === promise.constructor &&\n                  then$$1 === then &&\n                  maybeThenable.constructor.resolve === resolve$1\n                ) {\n                  handleOwnThenable(promise, maybeThenable);\n                } else {\n                  if (then$$1 === TRY_CATCH_ERROR) {\n                    reject(promise, TRY_CATCH_ERROR.error);\n                    TRY_CATCH_ERROR.error = null;\n                  } else if (then$$1 === undefined) {\n                    fulfill(promise, maybeThenable);\n                  } else if (isFunction(then$$1)) {\n                    handleForeignThenable(promise, maybeThenable, then$$1);\n                  } else {\n                    fulfill(promise, maybeThenable);\n                  }\n                }\n              }\n\n              function resolve(promise, value) {\n                if (promise === value) {\n                  reject(promise, selfFulfillment());\n                } else if (objectOrFunction(value)) {\n                  handleMaybeThenable(promise, value, getThen(value));\n                } else {\n                  fulfill(promise, value);\n                }\n              }\n\n              function publishRejection(promise) {\n                if (promise._onerror) {\n                  promise._onerror(promise._result);\n                }\n\n                publish(promise);\n              }\n\n              function fulfill(promise, value) {\n                if (promise._state !== PENDING) {\n                  return;\n                }\n\n                promise._result = value;\n                promise._state = FULFILLED;\n\n                if (promise._subscribers.length !== 0) {\n                  asap(publish, promise);\n                }\n              }\n\n              function reject(promise, reason) {\n                if (promise._state !== PENDING) {\n                  return;\n                }\n                promise._state = REJECTED;\n                promise._result = reason;\n\n                asap(publishRejection, promise);\n              }\n\n              function subscribe(parent, child, onFulfillment, onRejection) {\n                var _subscribers = parent._subscribers;\n                var length = _subscribers.length;\n\n                parent._onerror = null;\n\n                _subscribers[length] = child;\n                _subscribers[length + FULFILLED] = onFulfillment;\n                _subscribers[length + REJECTED] = onRejection;\n\n                if (length === 0 && parent._state) {\n                  asap(publish, parent);\n                }\n              }\n\n              function publish(promise) {\n                var subscribers = promise._subscribers;\n                var settled = promise._state;\n\n                if (subscribers.length === 0) {\n                  return;\n                }\n\n                var child = void 0,\n                  callback = void 0,\n                  detail = promise._result;\n\n                for (var i = 0; i < subscribers.length; i += 3) {\n                  child = subscribers[i];\n                  callback = subscribers[i + settled];\n\n                  if (child) {\n                    invokeCallback(settled, child, callback, detail);\n                  } else {\n                    callback(detail);\n                  }\n                }\n\n                promise._subscribers.length = 0;\n              }\n\n              function tryCatch(callback, detail) {\n                try {\n                  return callback(detail);\n                } catch (e) {\n                  TRY_CATCH_ERROR.error = e;\n                  return TRY_CATCH_ERROR;\n                }\n              }\n\n              function invokeCallback(settled, promise, callback, detail) {\n                var hasCallback = isFunction(callback),\n                  value = void 0,\n                  error = void 0,\n                  succeeded = void 0,\n                  failed = void 0;\n\n                if (hasCallback) {\n                  value = tryCatch(callback, detail);\n\n                  if (value === TRY_CATCH_ERROR) {\n                    failed = true;\n                    error = value.error;\n                    value.error = null;\n                  } else {\n                    succeeded = true;\n                  }\n\n                  if (promise === value) {\n                    reject(promise, cannotReturnOwn());\n                    return;\n                  }\n                } else {\n                  value = detail;\n                  succeeded = true;\n                }\n\n                if (promise._state !== PENDING) {\n                  // noop\n                } else if (hasCallback && succeeded) {\n                  resolve(promise, value);\n                } else if (failed) {\n                  reject(promise, error);\n                } else if (settled === FULFILLED) {\n                  fulfill(promise, value);\n                } else if (settled === REJECTED) {\n                  reject(promise, value);\n                }\n              }\n\n              function initializePromise(promise, resolver) {\n                try {\n                  resolver(\n                    function resolvePromise(value) {\n                      resolve(promise, value);\n                    },\n                    function rejectPromise(reason) {\n                      reject(promise, reason);\n                    }\n                  );\n                } catch (e) {\n                  reject(promise, e);\n                }\n              }\n\n              var id = 0;\n              function nextId() {\n                return id++;\n              }\n\n              function makePromise(promise) {\n                promise[PROMISE_ID] = id++;\n                promise._state = undefined;\n                promise._result = undefined;\n                promise._subscribers = [];\n              }\n\n              function validationError() {\n                return new Error('Array Methods must be provided an Array');\n              }\n\n              var Enumerator = (function() {\n                function Enumerator(Constructor, input) {\n                  this._instanceConstructor = Constructor;\n                  this.promise = new Constructor(noop);\n\n                  if (!this.promise[PROMISE_ID]) {\n                    makePromise(this.promise);\n                  }\n\n                  if (isArray(input)) {\n                    this.length = input.length;\n                    this._remaining = input.length;\n\n                    this._result = new Array(this.length);\n\n                    if (this.length === 0) {\n                      fulfill(this.promise, this._result);\n                    } else {\n                      this.length = this.length || 0;\n                      this._enumerate(input);\n                      if (this._remaining === 0) {\n                        fulfill(this.promise, this._result);\n                      }\n                    }\n                  } else {\n                    reject(this.promise, validationError());\n                  }\n                }\n\n                Enumerator.prototype._enumerate = function _enumerate(input) {\n                  for (var i = 0; this._state === PENDING && i < input.length; i++) {\n                    this._eachEntry(input[i], i);\n                  }\n                };\n\n                Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n                  var c = this._instanceConstructor;\n                  var resolve$$1 = c.resolve;\n\n                  if (resolve$$1 === resolve$1) {\n                    var _then = getThen(entry);\n\n                    if (_then === then && entry._state !== PENDING) {\n                      this._settledAt(entry._state, i, entry._result);\n                    } else if (typeof _then !== 'function') {\n                      this._remaining--;\n                      this._result[i] = entry;\n                    } else if (c === Promise$1) {\n                      var promise = new c(noop);\n                      handleMaybeThenable(promise, entry, _then);\n                      this._willSettleAt(promise, i);\n                    } else {\n                      this._willSettleAt(\n                        new c(function(resolve$$1) {\n                          return resolve$$1(entry);\n                        }),\n                        i\n                      );\n                    }\n                  } else {\n                    this._willSettleAt(resolve$$1(entry), i);\n                  }\n                };\n\n                Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n                  var promise = this.promise;\n\n                  if (promise._state === PENDING) {\n                    this._remaining--;\n\n                    if (state === REJECTED) {\n                      reject(promise, value);\n                    } else {\n                      this._result[i] = value;\n                    }\n                  }\n\n                  if (this._remaining === 0) {\n                    fulfill(promise, this._result);\n                  }\n                };\n\n                Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n                  var enumerator = this;\n\n                  subscribe(\n                    promise,\n                    undefined,\n                    function(value) {\n                      return enumerator._settledAt(FULFILLED, i, value);\n                    },\n                    function(reason) {\n                      return enumerator._settledAt(REJECTED, i, reason);\n                    }\n                  );\n                };\n\n                return Enumerator;\n              })();\n\n              /**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\n              function all(entries) {\n                return new Enumerator(this, entries).promise;\n              }\n\n              /**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\n              function race(entries) {\n                /*jshint validthis:true */\n                var Constructor = this;\n\n                if (!isArray(entries)) {\n                  return new Constructor(function(_, reject) {\n                    return reject(new TypeError('You must pass an array to race.'));\n                  });\n                } else {\n                  return new Constructor(function(resolve, reject) {\n                    var length = entries.length;\n                    for (var i = 0; i < length; i++) {\n                      Constructor.resolve(entries[i]).then(resolve, reject);\n                    }\n                  });\n                }\n              }\n\n              /**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\n              function reject$1(reason) {\n                /*jshint validthis:true */\n                var Constructor = this;\n                var promise = new Constructor(noop);\n                reject(promise, reason);\n                return promise;\n              }\n\n              function needsResolver() {\n                throw new TypeError(\n                  'You must pass a resolver function as the first argument to the promise constructor'\n                );\n              }\n\n              function needsNew() {\n                throw new TypeError(\n                  \"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\"\n                );\n              }\n\n              /**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\n              var Promise$1 = (function() {\n                function Promise(resolver) {\n                  this[PROMISE_ID] = nextId();\n                  this._result = this._state = undefined;\n                  this._subscribers = [];\n\n                  if (noop !== resolver) {\n                    typeof resolver !== 'function' && needsResolver();\n                    this instanceof Promise\n                      ? initializePromise(this, resolver)\n                      : needsNew();\n                  }\n                }\n\n                /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n                /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n                Promise.prototype.catch = function _catch(onRejection) {\n                  return this.then(null, onRejection);\n                };\n\n                /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n                Promise.prototype.finally = function _finally(callback) {\n                  var promise = this;\n                  var constructor = promise.constructor;\n\n                  if (isFunction(callback)) {\n                    return promise.then(\n                      function(value) {\n                        return constructor.resolve(callback()).then(function() {\n                          return value;\n                        });\n                      },\n                      function(reason) {\n                        return constructor.resolve(callback()).then(function() {\n                          throw reason;\n                        });\n                      }\n                    );\n                  }\n\n                  return promise.then(callback, callback);\n                };\n\n                return Promise;\n              })();\n\n              Promise$1.prototype.then = then;\n              Promise$1.all = all;\n              Promise$1.race = race;\n              Promise$1.resolve = resolve$1;\n              Promise$1.reject = reject$1;\n              Promise$1._setScheduler = setScheduler;\n              Promise$1._setAsap = setAsap;\n              Promise$1._asap = asap;\n\n              /*global self*/\n              function polyfill() {\n                var local = void 0;\n\n                if (typeof global !== 'undefined') {\n                  local = global;\n                } else if (typeof self !== 'undefined') {\n                  local = self;\n                } else {\n                  try {\n                    local = Function('return this')();\n                  } catch (e) {\n                    throw new Error(\n                      'polyfill failed because global object is unavailable in this environment'\n                    );\n                  }\n                }\n\n                var P = local.Promise;\n\n                if (P) {\n                  var promiseToString = null;\n                  try {\n                    promiseToString = Object.prototype.toString.call(P.resolve());\n                  } catch (e) {\n                    // silently ignored\n                  }\n\n                  if (promiseToString === '[object Promise]' && !P.cast) {\n                    return;\n                  }\n                }\n\n                local.Promise = Promise$1;\n              }\n\n              // Strange compat..\n              Promise$1.polyfill = polyfill;\n              Promise$1.Promise = Promise$1;\n\n              return Promise$1;\n            });\n          }.call(\n            this,\n            _dereq_('_process'),\n            typeof global !== 'undefined'\n              ? global\n              : typeof self !== 'undefined'\n                ? self\n                : typeof window !== 'undefined' ? window : {}\n          ));\n        },\n        { _process: 11 }\n      ],\n      6: [\n        function(_dereq_, module, exports) {\n          (function(global, factory) {\n            if (typeof define === 'function' && define.amd) {\n              define(['exports', 'module'], factory);\n            } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {\n              factory(exports, module);\n            } else {\n              var mod = {\n                exports: {}\n              };\n              factory(mod.exports, mod);\n              global.fetchJsonp = mod.exports;\n            }\n          })(this, function(exports, module) {\n            'use strict';\n\n            var defaultOptions = {\n              timeout: 5000,\n              jsonpCallback: 'callback',\n              jsonpCallbackFunction: null\n            };\n\n            function generateCallbackFunction() {\n              return 'jsonp_' + Date.now() + '_' + Math.ceil(Math.random() * 100000);\n            }\n\n            function clearFunction(functionName) {\n              // IE8 throws an exception when you try to delete a property on window\n              // http://stackoverflow.com/a/1824228/751089\n              try {\n                delete window[functionName];\n              } catch (e) {\n                window[functionName] = undefined;\n              }\n            }\n\n            function removeScript(scriptId) {\n              var script = document.getElementById(scriptId);\n              if (script) {\n                document.getElementsByTagName('head')[0].removeChild(script);\n              }\n            }\n\n            function fetchJsonp(_url) {\n              var options =\n                arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n              // to avoid param reassign\n              var url = _url;\n              var timeout = options.timeout || defaultOptions.timeout;\n              var jsonpCallback = options.jsonpCallback || defaultOptions.jsonpCallback;\n\n              var timeoutId = undefined;\n\n              return new Promise(function(resolve, reject) {\n                var callbackFunction =\n                  options.jsonpCallbackFunction || generateCallbackFunction();\n                var scriptId = jsonpCallback + '_' + callbackFunction;\n\n                window[callbackFunction] = function(response) {\n                  resolve({\n                    ok: true,\n                    // keep consistent with fetch API\n                    json: function json() {\n                      return Promise.resolve(response);\n                    }\n                  });\n\n                  if (timeoutId) clearTimeout(timeoutId);\n\n                  removeScript(scriptId);\n\n                  clearFunction(callbackFunction);\n                };\n\n                // Check if the user set their own params, and if not add a ? to start a list of params\n                url += url.indexOf('?') === -1 ? '?' : '&';\n\n                var jsonpScript = document.createElement('script');\n                jsonpScript.setAttribute(\n                  'src',\n                  '' + url + jsonpCallback + '=' + callbackFunction\n                );\n                if (options.charset) {\n                  jsonpScript.setAttribute('charset', options.charset);\n                }\n                jsonpScript.id = scriptId;\n                document.getElementsByTagName('head')[0].appendChild(jsonpScript);\n\n                timeoutId = setTimeout(function() {\n                  reject(new Error('JSONP request to ' + _url + ' timed out'));\n\n                  clearFunction(callbackFunction);\n                  removeScript(scriptId);\n                  window[callbackFunction] = function() {\n                    clearFunction(callbackFunction);\n                  };\n                }, timeout);\n\n                // Caught if got 404/500\n                jsonpScript.onerror = function() {\n                  reject(new Error('JSONP request to ' + _url + ' failed'));\n\n                  clearFunction(callbackFunction);\n                  removeScript(scriptId);\n                  if (timeoutId) clearTimeout(timeoutId);\n                };\n              });\n            }\n\n            // export as global function\n            /*\n  let local;\n  if (typeof global !== 'undefined') {\n    local = global;\n  } else if (typeof self !== 'undefined') {\n    local = self;\n  } else {\n    try {\n      local = Function('return this')();\n    } catch (e) {\n      throw new Error('polyfill failed because global object is unavailable in this environment');\n    }\n  }\n  local.fetchJsonp = fetchJsonp;\n  */\n\n            module.exports = fetchJsonp;\n          });\n        },\n        {}\n      ],\n      7: [\n        function(_dereq_, module, exports) {\n          /* FileSaver.js\n * A saveAs() FileSaver implementation.\n * 1.3.2\n * 2016-06-16 18:25:19\n *\n * By Eli Grey, http://eligrey.com\n * License: MIT\n *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md\n */\n\n          /*global self */\n          /*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */\n\n          /*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */\n\n          var saveAs =\n            saveAs ||\n            (function(view) {\n              'use strict';\n              // IE <10 is explicitly unsupported\n              if (\n                typeof view === 'undefined' ||\n                (typeof navigator !== 'undefined' &&\n                  /MSIE [1-9]\\./.test(navigator.userAgent))\n              ) {\n                return;\n              }\n              var doc = view.document,\n                // only get URL when necessary in case Blob.js hasn't overridden it yet\n                get_URL = function() {\n                  return view.URL || view.webkitURL || view;\n                },\n                save_link = doc.createElementNS('http://www.w3.org/1999/xhtml', 'a'),\n                can_use_save_link = 'download' in save_link,\n                click = function(node) {\n                  var event = new MouseEvent('click');\n                  node.dispatchEvent(event);\n                },\n                is_safari = /constructor/i.test(view.HTMLElement) || view.safari,\n                is_chrome_ios = /CriOS\\/[\\d]+/.test(navigator.userAgent),\n                throw_outside = function(ex) {\n                  (view.setImmediate || view.setTimeout)(function() {\n                    throw ex;\n                  }, 0);\n                },\n                force_saveable_type = 'application/octet-stream',\n                // the Blob API is fundamentally broken as there is no \"downloadfinished\" event to subscribe to\n                arbitrary_revoke_timeout = 1000 * 40, // in ms\n                revoke = function(file) {\n                  var revoker = function() {\n                    if (typeof file === 'string') {\n                      // file is an object URL\n                      get_URL().revokeObjectURL(file);\n                    } else {\n                      // file is a File\n                      file.remove();\n                    }\n                  };\n                  setTimeout(revoker, arbitrary_revoke_timeout);\n                },\n                dispatch = function(filesaver, event_types, event) {\n                  event_types = [].concat(event_types);\n                  var i = event_types.length;\n                  while (i--) {\n                    var listener = filesaver['on' + event_types[i]];\n                    if (typeof listener === 'function') {\n                      try {\n                        listener.call(filesaver, event || filesaver);\n                      } catch (ex) {\n                        throw_outside(ex);\n                      }\n                    }\n                  }\n                },\n                auto_bom = function(blob) {\n                  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n                  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n                  if (\n                    /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(\n                      blob.type\n                    )\n                  ) {\n                    return new Blob([String.fromCharCode(0xfeff), blob], {\n                      type: blob.type\n                    });\n                  }\n                  return blob;\n                },\n                FileSaver = function(blob, name, no_auto_bom) {\n                  if (!no_auto_bom) {\n                    blob = auto_bom(blob);\n                  }\n                  // First try a.download, then web filesystem, then object URLs\n                  var filesaver = this,\n                    type = blob.type,\n                    force = type === force_saveable_type,\n                    object_url,\n                    dispatch_all = function() {\n                      dispatch(filesaver, 'writestart progress write writeend'.split(' '));\n                    },\n                    // on any filesys errors revert to saving with object URLs\n                    fs_error = function() {\n                      if ((is_chrome_ios || (force && is_safari)) && view.FileReader) {\n                        // Safari doesn't allow downloading of blob urls\n                        var reader = new FileReader();\n                        reader.onloadend = function() {\n                          var url = is_chrome_ios\n                            ? reader.result\n                            : reader.result.replace(\n                                /^data:[^;]*;/,\n                                'data:attachment/file;'\n                              );\n                          var popup = view.open(url, '_blank');\n                          if (!popup) view.location.href = url;\n                          url = undefined; // release reference before dispatching\n                          filesaver.readyState = filesaver.DONE;\n                          dispatch_all();\n                        };\n                        reader.readAsDataURL(blob);\n                        filesaver.readyState = filesaver.INIT;\n                        return;\n                      }\n                      // don't create more object URLs than needed\n                      if (!object_url) {\n                        object_url = get_URL().createObjectURL(blob);\n                      }\n                      if (force) {\n                        view.location.href = object_url;\n                      } else {\n                        var opened = view.open(object_url, '_blank');\n                        if (!opened) {\n                          // Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html\n                          view.location.href = object_url;\n                        }\n                      }\n                      filesaver.readyState = filesaver.DONE;\n                      dispatch_all();\n                      revoke(object_url);\n                    };\n                  filesaver.readyState = filesaver.INIT;\n\n                  if (can_use_save_link) {\n                    object_url = get_URL().createObjectURL(blob);\n                    setTimeout(function() {\n                      save_link.href = object_url;\n                      save_link.download = name;\n                      click(save_link);\n                      dispatch_all();\n                      revoke(object_url);\n                      filesaver.readyState = filesaver.DONE;\n                    });\n                    return;\n                  }\n\n                  fs_error();\n                },\n                FS_proto = FileSaver.prototype,\n                saveAs = function(blob, name, no_auto_bom) {\n                  return new FileSaver(blob, name || blob.name || 'download', no_auto_bom);\n                };\n              // IE 10+ (native saveAs)\n              if (typeof navigator !== 'undefined' && navigator.msSaveOrOpenBlob) {\n                return function(blob, name, no_auto_bom) {\n                  name = name || blob.name || 'download';\n\n                  if (!no_auto_bom) {\n                    blob = auto_bom(blob);\n                  }\n                  return navigator.msSaveOrOpenBlob(blob, name);\n                };\n              }\n\n              FS_proto.abort = function() {};\n              FS_proto.readyState = FS_proto.INIT = 0;\n              FS_proto.WRITING = 1;\n              FS_proto.DONE = 2;\n\n              FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;\n\n              return saveAs;\n            })(\n              (typeof self !== 'undefined' && self) ||\n                (typeof window !== 'undefined' && window) ||\n                this.content\n            );\n          // `self` is undefined in Firefox for Android content script context\n          // while `this` is nsIContentFrameMessageManager\n          // with an attribute `content` that corresponds to the window\n\n          if (typeof module !== 'undefined' && module.exports) {\n            module.exports.saveAs = saveAs;\n          } else if (\n            typeof define !== 'undefined' &&\n            define !== null &&\n            define.amd !== null\n          ) {\n            define('FileSaver.js', function() {\n              return saveAs;\n            });\n          }\n        },\n        {}\n      ],\n      8: [\n        function(_dereq_, module, exports) {\n          exports.read = function(buffer, offset, isLE, mLen, nBytes) {\n            var e, m;\n            var eLen = nBytes * 8 - mLen - 1;\n            var eMax = (1 << eLen) - 1;\n            var eBias = eMax >> 1;\n            var nBits = -7;\n            var i = isLE ? nBytes - 1 : 0;\n            var d = isLE ? -1 : 1;\n            var s = buffer[offset + i];\n\n            i += d;\n\n            e = s & ((1 << -nBits) - 1);\n            s >>= -nBits;\n            nBits += eLen;\n            for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n            m = e & ((1 << -nBits) - 1);\n            e >>= -nBits;\n            nBits += mLen;\n            for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n            if (e === 0) {\n              e = 1 - eBias;\n            } else if (e === eMax) {\n              return m ? NaN : (s ? -1 : 1) * Infinity;\n            } else {\n              m = m + Math.pow(2, mLen);\n              e = e - eBias;\n            }\n            return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n          };\n\n          exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n            var e, m, c;\n            var eLen = nBytes * 8 - mLen - 1;\n            var eMax = (1 << eLen) - 1;\n            var eBias = eMax >> 1;\n            var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n            var i = isLE ? 0 : nBytes - 1;\n            var d = isLE ? 1 : -1;\n            var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n            value = Math.abs(value);\n\n            if (isNaN(value) || value === Infinity) {\n              m = isNaN(value) ? 1 : 0;\n              e = eMax;\n            } else {\n              e = Math.floor(Math.log(value) / Math.LN2);\n              if (value * (c = Math.pow(2, -e)) < 1) {\n                e--;\n                c *= 2;\n              }\n              if (e + eBias >= 1) {\n                value += rt / c;\n              } else {\n                value += rt * Math.pow(2, 1 - eBias);\n              }\n              if (value * c >= 2) {\n                e++;\n                c /= 2;\n              }\n\n              if (e + eBias >= eMax) {\n                m = 0;\n                e = eMax;\n              } else if (e + eBias >= 1) {\n                m = (value * c - 1) * Math.pow(2, mLen);\n                e = e + eBias;\n              } else {\n                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n                e = 0;\n              }\n            }\n\n            for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n            e = (e << mLen) | m;\n            eLen += mLen;\n            for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n            buffer[offset + i - d] |= s * 128;\n          };\n        },\n        {}\n      ],\n      9: [\n        function(_dereq_, module, exports) {\n          /*\n\n Copyright 2000, Silicon Graphics, Inc. All Rights Reserved.\n Copyright 2015, Google Inc. All Rights Reserved.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to\n deal in the Software without restriction, including without limitation the\n rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n sell copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice including the dates of first publication and\n either this permission notice or a reference to http://oss.sgi.com/projects/FreeB/\n shall be included in all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\n IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n Original Code. The Original Code is: OpenGL Sample Implementation,\n Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n Copyright in any portions created by third parties is as indicated\n elsewhere herein. All Rights Reserved.\n*/\n          'use strict';\n          var n;\n          function t(a, b) {\n            return a.b === b.b && a.a === b.a;\n          }\n          function u(a, b) {\n            return a.b < b.b || (a.b === b.b && a.a <= b.a);\n          }\n          function v(a, b, c) {\n            var d = b.b - a.b,\n              e = c.b - b.b;\n            return 0 < d + e\n              ? d < e\n                ? b.a - a.a + d / (d + e) * (a.a - c.a)\n                : b.a - c.a + e / (d + e) * (c.a - a.a)\n              : 0;\n          }\n          function x(a, b, c) {\n            var d = b.b - a.b,\n              e = c.b - b.b;\n            return 0 < d + e ? (b.a - c.a) * d + (b.a - a.a) * e : 0;\n          }\n          function z(a, b) {\n            return a.a < b.a || (a.a === b.a && a.b <= b.b);\n          }\n          function aa(a, b, c) {\n            var d = b.a - a.a,\n              e = c.a - b.a;\n            return 0 < d + e\n              ? d < e\n                ? b.b - a.b + d / (d + e) * (a.b - c.b)\n                : b.b - c.b + e / (d + e) * (c.b - a.b)\n              : 0;\n          }\n          function ba(a, b, c) {\n            var d = b.a - a.a,\n              e = c.a - b.a;\n            return 0 < d + e ? (b.b - c.b) * d + (b.b - a.b) * e : 0;\n          }\n          function ca(a) {\n            return u(a.b.a, a.a);\n          }\n          function da(a) {\n            return u(a.a, a.b.a);\n          }\n          function A(a, b, c, d) {\n            a = 0 > a ? 0 : a;\n            c = 0 > c ? 0 : c;\n            return a <= c\n              ? 0 === c ? (b + d) / 2 : b + a / (a + c) * (d - b)\n              : d + c / (a + c) * (b - d);\n          }\n          function ea(a) {\n            var b = B(a.b);\n            C(b, a.c);\n            C(b.b, a.c);\n            D(b, a.a);\n            return b;\n          }\n          function E(a, b) {\n            var c = !1,\n              d = !1;\n            a !== b &&\n              (b.a !== a.a && ((d = !0), F(b.a, a.a)),\n              b.d !== a.d && ((c = !0), G(b.d, a.d)),\n              H(b, a),\n              d || (C(b, a.a), (a.a.c = a)),\n              c || (D(b, a.d), (a.d.a = a)));\n          }\n          function I(a) {\n            var b = a.b,\n              c = !1;\n            a.d !== a.b.d && ((c = !0), G(a.d, a.b.d));\n            a.c === a\n              ? F(a.a, null)\n              : ((a.b.d.a = J(a)), (a.a.c = a.c), H(a, J(a)), c || D(a, a.d));\n            b.c === b\n              ? (F(b.a, null), G(b.d, null))\n              : ((a.d.a = J(b)), (b.a.c = b.c), H(b, J(b)));\n            fa(a);\n          }\n          function K(a) {\n            var b = B(a),\n              c = b.b;\n            H(b, a.e);\n            b.a = a.b.a;\n            C(c, b.a);\n            b.d = c.d = a.d;\n            b = b.b;\n            H(a.b, J(a.b));\n            H(a.b, b);\n            a.b.a = b.a;\n            b.b.a.c = b.b;\n            b.b.d = a.b.d;\n            b.f = a.f;\n            b.b.f = a.b.f;\n            return b;\n          }\n          function L(a, b) {\n            var c = !1,\n              d = B(a),\n              e = d.b;\n            b.d !== a.d && ((c = !0), G(b.d, a.d));\n            H(d, a.e);\n            H(e, b);\n            d.a = a.b.a;\n            e.a = b.a;\n            d.d = e.d = a.d;\n            a.d.a = e;\n            c || D(d, a.d);\n            return d;\n          }\n          function B(a) {\n            var b = new M(),\n              c = new M(),\n              d = a.b.h;\n            c.h = d;\n            d.b.h = b;\n            b.h = a;\n            a.b.h = c;\n            b.b = c;\n            b.c = b;\n            b.e = c;\n            c.b = b;\n            c.c = c;\n            return (c.e = b);\n          }\n          function H(a, b) {\n            var c = a.c,\n              d = b.c;\n            c.b.e = b;\n            d.b.e = a;\n            a.c = d;\n            b.c = c;\n          }\n          function C(a, b) {\n            var c = b.f,\n              d = new N(b, c);\n            c.e = d;\n            b.f = d;\n            c = d.c = a;\n            do (c.a = d), (c = c.c);\n            while (c !== a);\n          }\n          function D(a, b) {\n            var c = b.d,\n              d = new ga(b, c);\n            c.b = d;\n            b.d = d;\n            d.a = a;\n            d.c = b.c;\n            c = a;\n            do (c.d = d), (c = c.e);\n            while (c !== a);\n          }\n          function fa(a) {\n            var b = a.h;\n            a = a.b.h;\n            b.b.h = a;\n            a.b.h = b;\n          }\n          function F(a, b) {\n            var c = a.c,\n              d = c;\n            do (d.a = b), (d = d.c);\n            while (d !== c);\n            c = a.f;\n            d = a.e;\n            d.f = c;\n            c.e = d;\n          }\n          function G(a, b) {\n            var c = a.a,\n              d = c;\n            do (d.d = b), (d = d.e);\n            while (d !== c);\n            c = a.d;\n            d = a.b;\n            d.d = c;\n            c.b = d;\n          }\n          function ha(a) {\n            var b = 0;\n            Math.abs(a[1]) > Math.abs(a[0]) && (b = 1);\n            Math.abs(a[2]) > Math.abs(a[b]) && (b = 2);\n            return b;\n          }\n          var O = 4 * 1e150;\n          function P(a, b) {\n            a.f += b.f;\n            a.b.f += b.b.f;\n          }\n          function ia(a, b, c) {\n            a = a.a;\n            b = b.a;\n            c = c.a;\n            if (b.b.a === a)\n              return c.b.a === a\n                ? u(b.a, c.a) ? 0 >= x(c.b.a, b.a, c.a) : 0 <= x(b.b.a, c.a, b.a)\n                : 0 >= x(c.b.a, a, c.a);\n            if (c.b.a === a) return 0 <= x(b.b.a, a, b.a);\n            b = v(b.b.a, a, b.a);\n            a = v(c.b.a, a, c.a);\n            return b >= a;\n          }\n          function Q(a) {\n            a.a.i = null;\n            var b = a.e;\n            b.a.c = b.c;\n            b.c.a = b.a;\n            a.e = null;\n          }\n          function ja(a, b) {\n            I(a.a);\n            a.c = !1;\n            a.a = b;\n            b.i = a;\n          }\n          function ka(a) {\n            var b = a.a.a;\n            do a = R(a);\n            while (a.a.a === b);\n            a.c && ((b = L(S(a).a.b, a.a.e)), ja(a, b), (a = R(a)));\n            return a;\n          }\n          function la(a, b, c) {\n            var d = new ma();\n            d.a = c;\n            d.e = na(a.f, b.e, d);\n            return (c.i = d);\n          }\n          function oa(a, b) {\n            switch (a.s) {\n              case 100130:\n                return 0 !== (b & 1);\n              case 100131:\n                return 0 !== b;\n              case 100132:\n                return 0 < b;\n              case 100133:\n                return 0 > b;\n              case 100134:\n                return 2 <= b || -2 >= b;\n            }\n            return !1;\n          }\n          function pa(a) {\n            var b = a.a,\n              c = b.d;\n            c.c = a.d;\n            c.a = b;\n            Q(a);\n          }\n          function T(a, b, c) {\n            a = b;\n            for (b = b.a; a !== c; ) {\n              a.c = !1;\n              var d = S(a),\n                e = d.a;\n              if (e.a !== b.a) {\n                if (!d.c) {\n                  pa(a);\n                  break;\n                }\n                e = L(b.c.b, e.b);\n                ja(d, e);\n              }\n              b.c !== e && (E(J(e), e), E(b, e));\n              pa(a);\n              b = d.a;\n              a = d;\n            }\n            return b;\n          }\n          function U(a, b, c, d, e, f) {\n            var g = !0;\n            do la(a, b, c.b), (c = c.c);\n            while (c !== d);\n            for (null === e && (e = S(b).a.b.c); ; ) {\n              d = S(b);\n              c = d.a.b;\n              if (c.a !== e.a) break;\n              c.c !== e && (E(J(c), c), E(J(e), c));\n              d.f = b.f - c.f;\n              d.d = oa(a, d.f);\n              b.b = !0;\n              !g && qa(a, b) && (P(c, e), Q(b), I(e));\n              g = !1;\n              b = d;\n              e = c;\n            }\n            b.b = !0;\n            f && ra(a, b);\n          }\n          function sa(a, b, c, d, e) {\n            var f = [b.g[0], b.g[1], b.g[2]];\n            b.d = null;\n            b.d = a.o ? a.o(f, c, d, a.c) || null : null;\n            null === b.d && (e ? a.n || (V(a, 100156), (a.n = !0)) : (b.d = c[0]));\n          }\n          function ta(a, b, c) {\n            var d = [null, null, null, null];\n            d[0] = b.a.d;\n            d[1] = c.a.d;\n            sa(a, b.a, d, [0.5, 0.5, 0, 0], !1);\n            E(b, c);\n          }\n          function ua(a, b, c, d, e) {\n            var f = Math.abs(b.b - a.b) + Math.abs(b.a - a.a),\n              g = Math.abs(c.b - a.b) + Math.abs(c.a - a.a),\n              h = e + 1;\n            d[e] = 0.5 * g / (f + g);\n            d[h] = 0.5 * f / (f + g);\n            a.g[0] += d[e] * b.g[0] + d[h] * c.g[0];\n            a.g[1] += d[e] * b.g[1] + d[h] * c.g[1];\n            a.g[2] += d[e] * b.g[2] + d[h] * c.g[2];\n          }\n          function qa(a, b) {\n            var c = S(b),\n              d = b.a,\n              e = c.a;\n            if (u(d.a, e.a)) {\n              if (0 < x(e.b.a, d.a, e.a)) return !1;\n              if (!t(d.a, e.a)) K(e.b), E(d, J(e)), (b.b = c.b = !0);\n              else if (d.a !== e.a) {\n                var c = a.e,\n                  f = d.a.h;\n                if (0 <= f) {\n                  var c = c.b,\n                    g = c.d,\n                    h = c.e,\n                    k = c.c,\n                    l = k[f];\n                  g[l] = g[c.a];\n                  k[g[l]] = l;\n                  l <= --c.a &&\n                    (1 >= l ? W(c, l) : u(h[g[l >> 1]], h[g[l]]) ? W(c, l) : va(c, l));\n                  h[f] = null;\n                  k[f] = c.b;\n                  c.b = f;\n                } else\n                  for (c.c[-(f + 1)] = null; 0 < c.a && null === c.c[c.d[c.a - 1]]; ) --c.a;\n                ta(a, J(e), d);\n              }\n            } else {\n              if (0 > x(d.b.a, e.a, d.a)) return !1;\n              R(b).b = b.b = !0;\n              K(d.b);\n              E(J(e), d);\n            }\n            return !0;\n          }\n          function wa(a, b) {\n            var c = S(b),\n              d = b.a,\n              e = c.a,\n              f = d.a,\n              g = e.a,\n              h = d.b.a,\n              k = e.b.a,\n              l = new N();\n            x(h, a.a, f);\n            x(k, a.a, g);\n            if (f === g || Math.min(f.a, h.a) > Math.max(g.a, k.a)) return !1;\n            if (u(f, g)) {\n              if (0 < x(k, f, g)) return !1;\n            } else if (0 > x(h, g, f)) return !1;\n            var r = h,\n              p = f,\n              q = k,\n              y = g,\n              m,\n              w;\n            u(r, p) || ((m = r), (r = p), (p = m));\n            u(q, y) || ((m = q), (q = y), (y = m));\n            u(r, q) || ((m = r), (r = q), (q = m), (m = p), (p = y), (y = m));\n            u(q, p)\n              ? u(p, y)\n                ? ((m = v(r, q, p)),\n                  (w = v(q, p, y)),\n                  0 > m + w && ((m = -m), (w = -w)),\n                  (l.b = A(m, q.b, w, p.b)))\n                : ((m = x(r, q, p)),\n                  (w = -x(r, y, p)),\n                  0 > m + w && ((m = -m), (w = -w)),\n                  (l.b = A(m, q.b, w, y.b)))\n              : (l.b = (q.b + p.b) / 2);\n            z(r, p) || ((m = r), (r = p), (p = m));\n            z(q, y) || ((m = q), (q = y), (y = m));\n            z(r, q) || ((m = r), (r = q), (q = m), (m = p), (p = y), (y = m));\n            z(q, p)\n              ? z(p, y)\n                ? ((m = aa(r, q, p)),\n                  (w = aa(q, p, y)),\n                  0 > m + w && ((m = -m), (w = -w)),\n                  (l.a = A(m, q.a, w, p.a)))\n                : ((m = ba(r, q, p)),\n                  (w = -ba(r, y, p)),\n                  0 > m + w && ((m = -m), (w = -w)),\n                  (l.a = A(m, q.a, w, y.a)))\n              : (l.a = (q.a + p.a) / 2);\n            u(l, a.a) && ((l.b = a.a.b), (l.a = a.a.a));\n            r = u(f, g) ? f : g;\n            u(r, l) && ((l.b = r.b), (l.a = r.a));\n            if (t(l, f) || t(l, g)) return qa(a, b), !1;\n            if ((!t(h, a.a) && 0 <= x(h, a.a, l)) || (!t(k, a.a) && 0 >= x(k, a.a, l))) {\n              if (k === a.a)\n                return (\n                  K(d.b),\n                  E(e.b, d),\n                  (b = ka(b)),\n                  (d = S(b).a),\n                  T(a, S(b), c),\n                  U(a, b, J(d), d, d, !0),\n                  !0\n                );\n              if (h === a.a) {\n                K(e.b);\n                E(d.e, J(e));\n                f = c = b;\n                g = f.a.b.a;\n                do f = R(f);\n                while (f.a.b.a === g);\n                b = f;\n                f = S(b).a.b.c;\n                c.a = J(e);\n                e = T(a, c, null);\n                U(a, b, e.c, d.b.c, f, !0);\n                return !0;\n              }\n              0 <= x(h, a.a, l) &&\n                ((R(b).b = b.b = !0), K(d.b), (d.a.b = a.a.b), (d.a.a = a.a.a));\n              0 >= x(k, a.a, l) &&\n                ((b.b = c.b = !0), K(e.b), (e.a.b = a.a.b), (e.a.a = a.a.a));\n              return !1;\n            }\n            K(d.b);\n            K(e.b);\n            E(J(e), d);\n            d.a.b = l.b;\n            d.a.a = l.a;\n            d.a.h = xa(a.e, d.a);\n            d = d.a;\n            e = [0, 0, 0, 0];\n            l = [f.d, h.d, g.d, k.d];\n            d.g[0] = d.g[1] = d.g[2] = 0;\n            ua(d, f, h, e, 0);\n            ua(d, g, k, e, 2);\n            sa(a, d, l, e, !0);\n            R(b).b = b.b = c.b = !0;\n            return !1;\n          }\n          function ra(a, b) {\n            for (var c = S(b); ; ) {\n              for (; c.b; ) (b = c), (c = S(c));\n              if (!b.b && ((c = b), (b = R(b)), null === b || !b.b)) break;\n              b.b = !1;\n              var d = b.a,\n                e = c.a,\n                f;\n              if ((f = d.b.a !== e.b.a))\n                a: {\n                  f = b;\n                  var g = S(f),\n                    h = f.a,\n                    k = g.a,\n                    l = void 0;\n                  if (u(h.b.a, k.b.a)) {\n                    if (0 > x(h.b.a, k.b.a, h.a)) {\n                      f = !1;\n                      break a;\n                    }\n                    R(f).b = f.b = !0;\n                    l = K(h);\n                    E(k.b, l);\n                    l.d.c = f.d;\n                  } else {\n                    if (0 < x(k.b.a, h.b.a, k.a)) {\n                      f = !1;\n                      break a;\n                    }\n                    f.b = g.b = !0;\n                    l = K(k);\n                    E(h.e, k.b);\n                    l.b.d.c = f.d;\n                  }\n                  f = !0;\n                }\n              f &&\n                (c.c\n                  ? (Q(c), I(e), (c = S(b)), (e = c.a))\n                  : b.c && (Q(b), I(d), (b = R(c)), (d = b.a)));\n              if (d.a !== e.a)\n                if (d.b.a === e.b.a || b.c || c.c || (d.b.a !== a.a && e.b.a !== a.a))\n                  qa(a, b);\n                else if (wa(a, b)) break;\n              d.a === e.a && d.b.a === e.b.a && (P(e, d), Q(b), I(d), (b = R(c)));\n            }\n          }\n          function ya(a, b) {\n            a.a = b;\n            for (var c = b.c; null === c.i; )\n              if (((c = c.c), c === b.c)) {\n                var c = a,\n                  d = b,\n                  e = new ma();\n                e.a = d.c.b;\n                var f = c.f,\n                  g = f.a;\n                do g = g.a;\n                while (null !== g.b && !f.c(f.b, e, g.b));\n                var f = g.b,\n                  h = S(f),\n                  e = f.a,\n                  g = h.a;\n                if (0 === x(e.b.a, d, e.a))\n                  (e = f.a),\n                    t(e.a, d) ||\n                      t(e.b.a, d) ||\n                      (K(e.b), f.c && (I(e.c), (f.c = !1)), E(d.c, e), ya(c, d));\n                else {\n                  var k = u(g.b.a, e.b.a) ? f : h,\n                    h = void 0;\n                  f.d || k.c\n                    ? (k === f ? (h = L(d.c.b, e.e)) : (h = L(g.b.c.b, d.c).b),\n                      k.c\n                        ? ja(k, h)\n                        : ((e = c),\n                          (f = la(c, f, h)),\n                          (f.f = R(f).f + f.a.f),\n                          (f.d = oa(e, f.f))),\n                      ya(c, d))\n                    : U(c, f, d.c, d.c, null, !0);\n                }\n                return;\n              }\n            c = ka(c.i);\n            e = S(c);\n            f = e.a;\n            e = T(a, e, null);\n            if (e.c === f) {\n              var f = e,\n                e = f.c,\n                g = S(c),\n                h = c.a,\n                k = g.a,\n                l = !1;\n              h.b.a !== k.b.a && wa(a, c);\n              t(h.a, a.a) &&\n                (E(J(e), h), (c = ka(c)), (e = S(c).a), T(a, S(c), g), (l = !0));\n              t(k.a, a.a) && (E(f, J(k)), (f = T(a, g, null)), (l = !0));\n              l\n                ? U(a, c, f.c, e, e, !0)\n                : (u(k.a, h.a) ? (d = J(k)) : (d = h),\n                  (d = L(f.c.b, d)),\n                  U(a, c, d, d.c, d.c, !1),\n                  (d.b.i.c = !0),\n                  ra(a, c));\n            } else U(a, c, e.c, f, f, !0);\n          }\n          function za(a, b) {\n            var c = new ma(),\n              d = ea(a.b);\n            d.a.b = O;\n            d.a.a = b;\n            d.b.a.b = -O;\n            d.b.a.a = b;\n            a.a = d.b.a;\n            c.a = d;\n            c.f = 0;\n            c.d = !1;\n            c.c = !1;\n            c.h = !0;\n            c.b = !1;\n            d = a.f;\n            d = na(d, d.a, c);\n            c.e = d;\n          }\n          function Aa(a) {\n            this.a = new Ba();\n            this.b = a;\n            this.c = ia;\n          }\n          function na(a, b, c) {\n            do b = b.c;\n            while (null !== b.b && !a.c(a.b, b.b, c));\n            a = new Ba(c, b.a, b);\n            b.a.c = a;\n            return (b.a = a);\n          }\n          function Ba(a, b, c) {\n            this.b = a || null;\n            this.a = b || this;\n            this.c = c || this;\n          }\n          function X() {\n            this.d = Y;\n            this.p = this.b = this.q = null;\n            this.j = [0, 0, 0];\n            this.s = 100130;\n            this.n = !1;\n            this.o = this.a = this.e = this.f = null;\n            this.m = !1;\n            this.c = this.r = this.i = this.k = this.l = this.h = null;\n          }\n          var Y = 0;\n          n = X.prototype;\n          n.x = function() {\n            Z(this, Y);\n          };\n          n.B = function(a, b) {\n            switch (a) {\n              case 100142:\n                return;\n              case 100140:\n                switch (b) {\n                  case 100130:\n                  case 100131:\n                  case 100132:\n                  case 100133:\n                  case 100134:\n                    this.s = b;\n                    return;\n                }\n                break;\n              case 100141:\n                this.m = !!b;\n                return;\n              default:\n                V(this, 100900);\n                return;\n            }\n            V(this, 100901);\n          };\n          n.y = function(a) {\n            switch (a) {\n              case 100142:\n                return 0;\n              case 100140:\n                return this.s;\n              case 100141:\n                return this.m;\n              default:\n                V(this, 100900);\n            }\n            return !1;\n          };\n          n.A = function(a, b, c) {\n            this.j[0] = a;\n            this.j[1] = b;\n            this.j[2] = c;\n          };\n          n.z = function(a, b) {\n            var c = b ? b : null;\n            switch (a) {\n              case 100100:\n              case 100106:\n                this.h = c;\n                break;\n              case 100104:\n              case 100110:\n                this.l = c;\n                break;\n              case 100101:\n              case 100107:\n                this.k = c;\n                break;\n              case 100102:\n              case 100108:\n                this.i = c;\n                break;\n              case 100103:\n              case 100109:\n                this.p = c;\n                break;\n              case 100105:\n              case 100111:\n                this.o = c;\n                break;\n              case 100112:\n                this.r = c;\n                break;\n              default:\n                V(this, 100900);\n            }\n          };\n          n.C = function(a, b) {\n            var c = !1,\n              d = [0, 0, 0];\n            Z(this, 2);\n            for (var e = 0; 3 > e; ++e) {\n              var f = a[e];\n              -1e150 > f && ((f = -1e150), (c = !0));\n              1e150 < f && ((f = 1e150), (c = !0));\n              d[e] = f;\n            }\n            c && V(this, 100155);\n            c = this.q;\n            null === c ? ((c = ea(this.b)), E(c, c.b)) : (K(c), (c = c.e));\n            c.a.d = b;\n            c.a.g[0] = d[0];\n            c.a.g[1] = d[1];\n            c.a.g[2] = d[2];\n            c.f = 1;\n            c.b.f = -1;\n            this.q = c;\n          };\n          n.u = function(a) {\n            Z(this, Y);\n            this.d = 1;\n            this.b = new Ca();\n            this.c = a;\n          };\n          n.t = function() {\n            Z(this, 1);\n            this.d = 2;\n            this.q = null;\n          };\n          n.v = function() {\n            Z(this, 2);\n            this.d = 1;\n          };\n          n.w = function() {\n            Z(this, 1);\n            this.d = Y;\n            var a = this.j[0],\n              b = this.j[1],\n              c = this.j[2],\n              d = !1,\n              e = [a, b, c];\n            if (0 === a && 0 === b && 0 === c) {\n              for (\n                var b = [-2 * 1e150, -2 * 1e150, -2 * 1e150],\n                  f = [2 * 1e150, 2 * 1e150, 2 * 1e150],\n                  c = [],\n                  g = [],\n                  d = this.b.c,\n                  a = d.e;\n                a !== d;\n                a = a.e\n              )\n                for (var h = 0; 3 > h; ++h) {\n                  var k = a.g[h];\n                  k < f[h] && ((f[h] = k), (g[h] = a));\n                  k > b[h] && ((b[h] = k), (c[h] = a));\n                }\n              a = 0;\n              b[1] - f[1] > b[0] - f[0] && (a = 1);\n              b[2] - f[2] > b[a] - f[a] && (a = 2);\n              if (f[a] >= b[a]) (e[0] = 0), (e[1] = 0), (e[2] = 1);\n              else {\n                b = 0;\n                f = g[a];\n                c = c[a];\n                g = [0, 0, 0];\n                f = [f.g[0] - c.g[0], f.g[1] - c.g[1], f.g[2] - c.g[2]];\n                h = [0, 0, 0];\n                for (a = d.e; a !== d; a = a.e)\n                  (h[0] = a.g[0] - c.g[0]),\n                    (h[1] = a.g[1] - c.g[1]),\n                    (h[2] = a.g[2] - c.g[2]),\n                    (g[0] = f[1] * h[2] - f[2] * h[1]),\n                    (g[1] = f[2] * h[0] - f[0] * h[2]),\n                    (g[2] = f[0] * h[1] - f[1] * h[0]),\n                    (k = g[0] * g[0] + g[1] * g[1] + g[2] * g[2]),\n                    k > b && ((b = k), (e[0] = g[0]), (e[1] = g[1]), (e[2] = g[2]));\n                0 >= b && ((e[0] = e[1] = e[2] = 0), (e[ha(f)] = 1));\n              }\n              d = !0;\n            }\n            g = ha(e);\n            a = this.b.c;\n            b = (g + 1) % 3;\n            c = (g + 2) % 3;\n            g = 0 < e[g] ? 1 : -1;\n            for (e = a.e; e !== a; e = e.e) (e.b = e.g[b]), (e.a = g * e.g[c]);\n            if (d) {\n              e = 0;\n              d = this.b.a;\n              for (a = d.b; a !== d; a = a.b)\n                if (((b = a.a), !(0 >= b.f))) {\n                  do (e += (b.a.b - b.b.a.b) * (b.a.a + b.b.a.a)), (b = b.e);\n                  while (b !== a.a);\n                }\n              if (0 > e) for (e = this.b.c, d = e.e; d !== e; d = d.e) d.a = -d.a;\n            }\n            this.n = !1;\n            e = this.b.b;\n            for (a = e.h; a !== e; a = d)\n              if (\n                ((d = a.h),\n                (b = a.e),\n                t(a.a, a.b.a) && a.e.e !== a && (ta(this, b, a), I(a), (a = b), (b = a.e)),\n                b.e === a)\n              ) {\n                if (b !== a) {\n                  if (b === d || b === d.b) d = d.h;\n                  I(b);\n                }\n                if (a === d || a === d.b) d = d.h;\n                I(a);\n              }\n            this.e = e = new Da();\n            d = this.b.c;\n            for (a = d.e; a !== d; a = a.e) a.h = xa(e, a);\n            Ea(e);\n            this.f = new Aa(this);\n            za(this, -O);\n            for (za(this, O); null !== (e = Fa(this.e)); ) {\n              for (;;) {\n                a: if (((a = this.e), 0 === a.a)) d = Ga(a.b);\n                else if (\n                  ((d = a.c[a.d[a.a - 1]]), 0 !== a.b.a && ((a = Ga(a.b)), u(a, d)))\n                ) {\n                  d = a;\n                  break a;\n                }\n                if (null === d || !t(d, e)) break;\n                d = Fa(this.e);\n                ta(this, e.c, d.c);\n              }\n              ya(this, e);\n            }\n            this.a = this.f.a.a.b.a.a;\n            for (e = 0; null !== (d = this.f.a.a.b); ) d.h || ++e, Q(d);\n            this.f = null;\n            e = this.e;\n            e.b = null;\n            e.d = null;\n            this.e = e.c = null;\n            e = this.b;\n            for (a = e.a.b; a !== e.a; a = d)\n              (d = a.b), (a = a.a), a.e.e === a && (P(a.c, a), I(a));\n            if (!this.n) {\n              e = this.b;\n              if (this.m)\n                for (a = e.b.h; a !== e.b; a = d)\n                  (d = a.h), a.b.d.c !== a.d.c ? (a.f = a.d.c ? 1 : -1) : I(a);\n              else\n                for (a = e.a.b; a !== e.a; a = d)\n                  if (((d = a.b), a.c)) {\n                    for (a = a.a; u(a.b.a, a.a); a = a.c.b);\n                    for (; u(a.a, a.b.a); a = a.e);\n                    b = a.c.b;\n                    for (c = void 0; a.e !== b; )\n                      if (u(a.b.a, b.a)) {\n                        for (; b.e !== a && (ca(b.e) || 0 >= x(b.a, b.b.a, b.e.b.a)); )\n                          (c = L(b.e, b)), (b = c.b);\n                        b = b.c.b;\n                      } else {\n                        for (; b.e !== a && (da(a.c.b) || 0 <= x(a.b.a, a.a, a.c.b.a)); )\n                          (c = L(a, a.c.b)), (a = c.b);\n                        a = a.e;\n                      }\n                    for (; b.e.e !== a; ) (c = L(b.e, b)), (b = c.b);\n                  }\n              if (this.h || this.i || this.k || this.l)\n                if (this.m)\n                  for (e = this.b, d = e.a.b; d !== e.a; d = d.b) {\n                    if (d.c) {\n                      this.h && this.h(2, this.c);\n                      a = d.a;\n                      do this.k && this.k(a.a.d, this.c), (a = a.e);\n                      while (a !== d.a);\n                      this.i && this.i(this.c);\n                    }\n                  }\n                else {\n                  e = this.b;\n                  d = !!this.l;\n                  a = !1;\n                  b = -1;\n                  for (c = e.a.d; c !== e.a; c = c.d)\n                    if (c.c) {\n                      a || (this.h && this.h(4, this.c), (a = !0));\n                      g = c.a;\n                      do\n                        d &&\n                          ((f = g.b.d.c ? 0 : 1),\n                          b !== f && ((b = f), this.l && this.l(!!b, this.c))),\n                          this.k && this.k(g.a.d, this.c),\n                          (g = g.e);\n                      while (g !== c.a);\n                    }\n                  a && this.i && this.i(this.c);\n                }\n              if (this.r) {\n                e = this.b;\n                for (a = e.a.b; a !== e.a; a = d)\n                  if (((d = a.b), !a.c)) {\n                    b = a.a;\n                    c = b.e;\n                    g = void 0;\n                    do\n                      (g = c),\n                        (c = g.e),\n                        (g.d = null),\n                        null === g.b.d &&\n                          (g.c === g ? F(g.a, null) : ((g.a.c = g.c), H(g, J(g))),\n                          (f = g.b),\n                          f.c === f ? F(f.a, null) : ((f.a.c = f.c), H(f, J(f))),\n                          fa(g));\n                    while (g !== b);\n                    b = a.d;\n                    a = a.b;\n                    a.d = b;\n                    b.b = a;\n                  }\n                this.r(this.b);\n                this.c = this.b = null;\n                return;\n              }\n            }\n            this.b = this.c = null;\n          };\n          function Z(a, b) {\n            if (a.d !== b)\n              for (; a.d !== b; )\n                if (a.d < b)\n                  switch (a.d) {\n                    case Y:\n                      V(a, 100151);\n                      a.u(null);\n                      break;\n                    case 1:\n                      V(a, 100152), a.t();\n                  }\n                else\n                  switch (a.d) {\n                    case 2:\n                      V(a, 100154);\n                      a.v();\n                      break;\n                    case 1:\n                      V(a, 100153), a.w();\n                  }\n          }\n          function V(a, b) {\n            a.p && a.p(b, a.c);\n          }\n          function ga(a, b) {\n            this.b = a || this;\n            this.d = b || this;\n            this.a = null;\n            this.c = !1;\n          }\n          function M() {\n            this.h = this;\n            this.i = this.d = this.a = this.e = this.c = this.b = null;\n            this.f = 0;\n          }\n          function J(a) {\n            return a.b.e;\n          }\n          function Ca() {\n            this.c = new N();\n            this.a = new ga();\n            this.b = new M();\n            this.d = new M();\n            this.b.b = this.d;\n            this.d.b = this.b;\n          }\n          function N(a, b) {\n            this.e = a || this;\n            this.f = b || this;\n            this.d = this.c = null;\n            this.g = [0, 0, 0];\n            this.h = this.a = this.b = 0;\n          }\n          function Da() {\n            this.c = [];\n            this.d = null;\n            this.a = 0;\n            this.e = !1;\n            this.b = new Ha();\n          }\n          function Ea(a) {\n            a.d = [];\n            for (var b = 0; b < a.a; b++) a.d[b] = b;\n            a.d.sort(\n              (function(a) {\n                return function(b, e) {\n                  return u(a[b], a[e]) ? 1 : -1;\n                };\n              })(a.c)\n            );\n            a.e = !0;\n            Ia(a.b);\n          }\n          function xa(a, b) {\n            if (a.e) {\n              var c = a.b,\n                d = ++c.a;\n              2 * d > c.f && ((c.f *= 2), (c.c = Ja(c.c, c.f + 1)));\n              var e;\n              0 === c.b ? (e = d) : ((e = c.b), (c.b = c.c[c.b]));\n              c.e[e] = b;\n              c.c[e] = d;\n              c.d[d] = e;\n              c.h && va(c, d);\n              return e;\n            }\n            c = a.a++;\n            a.c[c] = b;\n            return -(c + 1);\n          }\n          function Fa(a) {\n            if (0 === a.a) return Ka(a.b);\n            var b = a.c[a.d[a.a - 1]];\n            if (0 !== a.b.a && u(Ga(a.b), b)) return Ka(a.b);\n            do --a.a;\n            while (0 < a.a && null === a.c[a.d[a.a - 1]]);\n            return b;\n          }\n          function Ha() {\n            this.d = Ja([0], 33);\n            this.e = [null, null];\n            this.c = [0, 0];\n            this.a = 0;\n            this.f = 32;\n            this.b = 0;\n            this.h = !1;\n            this.d[1] = 1;\n          }\n          function Ja(a, b) {\n            for (var c = Array(b), d = 0; d < a.length; d++) c[d] = a[d];\n            for (; d < b; d++) c[d] = 0;\n            return c;\n          }\n          function Ia(a) {\n            for (var b = a.a; 1 <= b; --b) W(a, b);\n            a.h = !0;\n          }\n          function Ga(a) {\n            return a.e[a.d[1]];\n          }\n          function Ka(a) {\n            var b = a.d,\n              c = a.e,\n              d = a.c,\n              e = b[1],\n              f = c[e];\n            0 < a.a &&\n              ((b[1] = b[a.a]),\n              (d[b[1]] = 1),\n              (c[e] = null),\n              (d[e] = a.b),\n              (a.b = e),\n              0 < --a.a && W(a, 1));\n            return f;\n          }\n          function W(a, b) {\n            for (var c = a.d, d = a.e, e = a.c, f = b, g = c[f]; ; ) {\n              var h = f << 1;\n              h < a.a && u(d[c[h + 1]], d[c[h]]) && (h += 1);\n              var k = c[h];\n              if (h > a.a || u(d[g], d[k])) {\n                c[f] = g;\n                e[g] = f;\n                break;\n              }\n              c[f] = k;\n              e[k] = f;\n              f = h;\n            }\n          }\n          function va(a, b) {\n            for (var c = a.d, d = a.e, e = a.c, f = b, g = c[f]; ; ) {\n              var h = f >> 1,\n                k = c[h];\n              if (0 === h || u(d[k], d[g])) {\n                c[f] = g;\n                e[g] = f;\n                break;\n              }\n              c[f] = k;\n              e[k] = f;\n              f = h;\n            }\n          }\n          function ma() {\n            this.e = this.a = null;\n            this.f = 0;\n            this.c = this.b = this.h = this.d = !1;\n          }\n          function S(a) {\n            return a.e.c.b;\n          }\n          function R(a) {\n            return a.e.a.b;\n          }\n          this.libtess = {\n            GluTesselator: X,\n            windingRule: {\n              GLU_TESS_WINDING_ODD: 100130,\n              GLU_TESS_WINDING_NONZERO: 100131,\n              GLU_TESS_WINDING_POSITIVE: 100132,\n              GLU_TESS_WINDING_NEGATIVE: 100133,\n              GLU_TESS_WINDING_ABS_GEQ_TWO: 100134\n            },\n            primitiveType: {\n              GL_LINE_LOOP: 2,\n              GL_TRIANGLES: 4,\n              GL_TRIANGLE_STRIP: 5,\n              GL_TRIANGLE_FAN: 6\n            },\n            errorType: {\n              GLU_TESS_MISSING_BEGIN_POLYGON: 100151,\n              GLU_TESS_MISSING_END_POLYGON: 100153,\n              GLU_TESS_MISSING_BEGIN_CONTOUR: 100152,\n              GLU_TESS_MISSING_END_CONTOUR: 100154,\n              GLU_TESS_COORD_TOO_LARGE: 100155,\n              GLU_TESS_NEED_COMBINE_CALLBACK: 100156\n            },\n            gluEnum: {\n              GLU_TESS_MESH: 100112,\n              GLU_TESS_TOLERANCE: 100142,\n              GLU_TESS_WINDING_RULE: 100140,\n              GLU_TESS_BOUNDARY_ONLY: 100141,\n              GLU_INVALID_ENUM: 100900,\n              GLU_INVALID_VALUE: 100901,\n              GLU_TESS_BEGIN: 100100,\n              GLU_TESS_VERTEX: 100101,\n              GLU_TESS_END: 100102,\n              GLU_TESS_ERROR: 100103,\n              GLU_TESS_EDGE_FLAG: 100104,\n              GLU_TESS_COMBINE: 100105,\n              GLU_TESS_BEGIN_DATA: 100106,\n              GLU_TESS_VERTEX_DATA: 100107,\n              GLU_TESS_END_DATA: 100108,\n              GLU_TESS_ERROR_DATA: 100109,\n              GLU_TESS_EDGE_FLAG_DATA: 100110,\n              GLU_TESS_COMBINE_DATA: 100111\n            }\n          };\n          X.prototype.gluDeleteTess = X.prototype.x;\n          X.prototype.gluTessProperty = X.prototype.B;\n          X.prototype.gluGetTessProperty = X.prototype.y;\n          X.prototype.gluTessNormal = X.prototype.A;\n          X.prototype.gluTessCallback = X.prototype.z;\n          X.prototype.gluTessVertex = X.prototype.C;\n          X.prototype.gluTessBeginPolygon = X.prototype.u;\n          X.prototype.gluTessBeginContour = X.prototype.t;\n          X.prototype.gluTessEndContour = X.prototype.v;\n          X.prototype.gluTessEndPolygon = X.prototype.w;\n          if (typeof module !== 'undefined') {\n            module.exports = this.libtess;\n          }\n        },\n        {}\n      ],\n      10: [\n        function(_dereq_, module, exports) {\n          (function(Buffer) {\n            /**\n             * https://opentype.js.org v0.9.0 | (c) Frederik De Bleser and other contributors | MIT License | Uses tiny-inflate by Devon Govett and string.prototype.codepointat polyfill by Mathias Bynens\n             */\n\n            (function(global, factory) {\n              typeof exports === 'object' && typeof module !== 'undefined'\n                ? factory(exports)\n                : typeof define === 'function' && define.amd\n                  ? define(['exports'], factory)\n                  : factory((global.opentype = {}));\n            })(this, function(exports) {\n              'use strict';\n\n              /*! https://mths.be/codepointat v0.2.0 by @mathias */\n              if (!String.prototype.codePointAt) {\n                (function() {\n                  var defineProperty = (function() {\n                    // IE 8 only supports `Object.defineProperty` on DOM elements\n                    try {\n                      var object = {};\n                      var $defineProperty = Object.defineProperty;\n                      var result =\n                        $defineProperty(object, object, object) && $defineProperty;\n                    } catch (error) {}\n                    return result;\n                  })();\n                  var codePointAt = function(position) {\n                    if (this == null) {\n                      throw TypeError();\n                    }\n                    var string = String(this);\n                    var size = string.length;\n                    // `ToInteger`\n                    var index = position ? Number(position) : 0;\n                    if (index != index) {\n                      // better `isNaN`\n                      index = 0;\n                    }\n                    // Account for out-of-bounds indices:\n                    if (index < 0 || index >= size) {\n                      return undefined;\n                    }\n                    // Get the first code unit\n                    var first = string.charCodeAt(index);\n                    var second;\n                    if (\n                      // check if it’s the start of a surrogate pair\n                      first >= 0xd800 &&\n                      first <= 0xdbff && // high surrogate\n                      size > index + 1 // there is a next code unit\n                    ) {\n                      second = string.charCodeAt(index + 1);\n                      if (second >= 0xdc00 && second <= 0xdfff) {\n                        // low surrogate\n                        // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n                        return (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;\n                      }\n                    }\n                    return first;\n                  };\n                  if (defineProperty) {\n                    defineProperty(String.prototype, 'codePointAt', {\n                      value: codePointAt,\n                      configurable: true,\n                      writable: true\n                    });\n                  } else {\n                    String.prototype.codePointAt = codePointAt;\n                  }\n                })();\n              }\n\n              var TINF_OK = 0;\n              var TINF_DATA_ERROR = -3;\n\n              function Tree() {\n                this.table = new Uint16Array(16); /* table of code length counts */\n                this.trans = new Uint16Array(288); /* code -> symbol translation table */\n              }\n\n              function Data(source, dest) {\n                this.source = source;\n                this.sourceIndex = 0;\n                this.tag = 0;\n                this.bitcount = 0;\n\n                this.dest = dest;\n                this.destLen = 0;\n\n                this.ltree = new Tree(); /* dynamic length/symbol tree */\n                this.dtree = new Tree(); /* dynamic distance tree */\n              }\n\n              /* --------------------------------------------------- *\n\t * -- uninitialized global data (static structures) -- *\n\t * --------------------------------------------------- */\n\n              var sltree = new Tree();\n              var sdtree = new Tree();\n\n              /* extra bits and base tables for length codes */\n              var length_bits = new Uint8Array(30);\n              var length_base = new Uint16Array(30);\n\n              /* extra bits and base tables for distance codes */\n              var dist_bits = new Uint8Array(30);\n              var dist_base = new Uint16Array(30);\n\n              /* special ordering of code length codes */\n              var clcidx = new Uint8Array([\n                16,\n                17,\n                18,\n                0,\n                8,\n                7,\n                9,\n                6,\n                10,\n                5,\n                11,\n                4,\n                12,\n                3,\n                13,\n                2,\n                14,\n                1,\n                15\n              ]);\n\n              /* used by tinf_decode_trees, avoids allocations every call */\n              var code_tree = new Tree();\n              var lengths = new Uint8Array(288 + 32);\n\n              /* ----------------------- *\n\t * -- utility functions -- *\n\t * ----------------------- */\n\n              /* build extra bits and base tables */\n              function tinf_build_bits_base(bits, base, delta, first) {\n                var i, sum;\n\n                /* build bits table */\n                for (i = 0; i < delta; ++i) {\n                  bits[i] = 0;\n                }\n                for (i = 0; i < 30 - delta; ++i) {\n                  bits[i + delta] = (i / delta) | 0;\n                }\n\n                /* build base table */\n                for (sum = first, i = 0; i < 30; ++i) {\n                  base[i] = sum;\n                  sum += 1 << bits[i];\n                }\n              }\n\n              /* build the fixed huffman trees */\n              function tinf_build_fixed_trees(lt, dt) {\n                var i;\n\n                /* build fixed length tree */\n                for (i = 0; i < 7; ++i) {\n                  lt.table[i] = 0;\n                }\n\n                lt.table[7] = 24;\n                lt.table[8] = 152;\n                lt.table[9] = 112;\n\n                for (i = 0; i < 24; ++i) {\n                  lt.trans[i] = 256 + i;\n                }\n                for (i = 0; i < 144; ++i) {\n                  lt.trans[24 + i] = i;\n                }\n                for (i = 0; i < 8; ++i) {\n                  lt.trans[24 + 144 + i] = 280 + i;\n                }\n                for (i = 0; i < 112; ++i) {\n                  lt.trans[24 + 144 + 8 + i] = 144 + i;\n                }\n\n                /* build fixed distance tree */\n                for (i = 0; i < 5; ++i) {\n                  dt.table[i] = 0;\n                }\n\n                dt.table[5] = 32;\n\n                for (i = 0; i < 32; ++i) {\n                  dt.trans[i] = i;\n                }\n              }\n\n              /* given an array of code lengths, build a tree */\n              var offs = new Uint16Array(16);\n\n              function tinf_build_tree(t, lengths, off, num) {\n                var i, sum;\n\n                /* clear code length count table */\n                for (i = 0; i < 16; ++i) {\n                  t.table[i] = 0;\n                }\n\n                /* scan symbol lengths, and sum code length counts */\n                for (i = 0; i < num; ++i) {\n                  t.table[lengths[off + i]]++;\n                }\n\n                t.table[0] = 0;\n\n                /* compute offset table for distribution sort */\n                for (sum = 0, i = 0; i < 16; ++i) {\n                  offs[i] = sum;\n                  sum += t.table[i];\n                }\n\n                /* create code->symbol translation table (symbols sorted by code) */\n                for (i = 0; i < num; ++i) {\n                  if (lengths[off + i]) {\n                    t.trans[offs[lengths[off + i]]++] = i;\n                  }\n                }\n              }\n\n              /* ---------------------- *\n\t * -- decode functions -- *\n\t * ---------------------- */\n\n              /* get one bit from source stream */\n              function tinf_getbit(d) {\n                /* check if tag is empty */\n                if (!d.bitcount--) {\n                  /* load next tag */\n                  d.tag = d.source[d.sourceIndex++];\n                  d.bitcount = 7;\n                }\n\n                /* shift bit out of tag */\n                var bit = d.tag & 1;\n                d.tag >>>= 1;\n\n                return bit;\n              }\n\n              /* read a num bit value from a stream and add base */\n              function tinf_read_bits(d, num, base) {\n                if (!num) {\n                  return base;\n                }\n\n                while (d.bitcount < 24) {\n                  d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n                  d.bitcount += 8;\n                }\n\n                var val = d.tag & (0xffff >>> (16 - num));\n                d.tag >>>= num;\n                d.bitcount -= num;\n                return val + base;\n              }\n\n              /* given a data stream and a tree, decode a symbol */\n              function tinf_decode_symbol(d, t) {\n                while (d.bitcount < 24) {\n                  d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n                  d.bitcount += 8;\n                }\n\n                var sum = 0,\n                  cur = 0,\n                  len = 0;\n                var tag = d.tag;\n\n                /* get more bits while code value is above sum */\n                do {\n                  cur = 2 * cur + (tag & 1);\n                  tag >>>= 1;\n                  ++len;\n\n                  sum += t.table[len];\n                  cur -= t.table[len];\n                } while (cur >= 0);\n\n                d.tag = tag;\n                d.bitcount -= len;\n\n                return t.trans[sum + cur];\n              }\n\n              /* given a data stream, decode dynamic trees from it */\n              function tinf_decode_trees(d, lt, dt) {\n                var hlit, hdist, hclen;\n                var i, num, length;\n\n                /* get 5 bits HLIT (257-286) */\n                hlit = tinf_read_bits(d, 5, 257);\n\n                /* get 5 bits HDIST (1-32) */\n                hdist = tinf_read_bits(d, 5, 1);\n\n                /* get 4 bits HCLEN (4-19) */\n                hclen = tinf_read_bits(d, 4, 4);\n\n                for (i = 0; i < 19; ++i) {\n                  lengths[i] = 0;\n                }\n\n                /* read code lengths for code length alphabet */\n                for (i = 0; i < hclen; ++i) {\n                  /* get 3 bits code length (0-7) */\n                  var clen = tinf_read_bits(d, 3, 0);\n                  lengths[clcidx[i]] = clen;\n                }\n\n                /* build code length tree */\n                tinf_build_tree(code_tree, lengths, 0, 19);\n\n                /* decode code lengths for the dynamic trees */\n                for (num = 0; num < hlit + hdist; ) {\n                  var sym = tinf_decode_symbol(d, code_tree);\n\n                  switch (sym) {\n                    case 16:\n                      /* copy previous code length 3-6 times (read 2 bits) */\n                      var prev = lengths[num - 1];\n                      for (length = tinf_read_bits(d, 2, 3); length; --length) {\n                        lengths[num++] = prev;\n                      }\n                      break;\n                    case 17:\n                      /* repeat code length 0 for 3-10 times (read 3 bits) */\n                      for (length = tinf_read_bits(d, 3, 3); length; --length) {\n                        lengths[num++] = 0;\n                      }\n                      break;\n                    case 18:\n                      /* repeat code length 0 for 11-138 times (read 7 bits) */\n                      for (length = tinf_read_bits(d, 7, 11); length; --length) {\n                        lengths[num++] = 0;\n                      }\n                      break;\n                    default:\n                      /* values 0-15 represent the actual code lengths */\n                      lengths[num++] = sym;\n                      break;\n                  }\n                }\n\n                /* build dynamic trees */\n                tinf_build_tree(lt, lengths, 0, hlit);\n                tinf_build_tree(dt, lengths, hlit, hdist);\n              }\n\n              /* ----------------------------- *\n\t * -- block inflate functions -- *\n\t * ----------------------------- */\n\n              /* given a stream and two trees, inflate a block of data */\n              function tinf_inflate_block_data(d, lt, dt) {\n                while (1) {\n                  var sym = tinf_decode_symbol(d, lt);\n\n                  /* check for end of block */\n                  if (sym === 256) {\n                    return TINF_OK;\n                  }\n\n                  if (sym < 256) {\n                    d.dest[d.destLen++] = sym;\n                  } else {\n                    var length, dist, offs;\n                    var i;\n\n                    sym -= 257;\n\n                    /* possibly get more bits from length code */\n                    length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\n                    dist = tinf_decode_symbol(d, dt);\n\n                    /* possibly get more bits from distance code */\n                    offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\n                    /* copy match */\n                    for (i = offs; i < offs + length; ++i) {\n                      d.dest[d.destLen++] = d.dest[i];\n                    }\n                  }\n                }\n              }\n\n              /* inflate an uncompressed block of data */\n              function tinf_inflate_uncompressed_block(d) {\n                var length, invlength;\n                var i;\n\n                /* unread from bitbuffer */\n                while (d.bitcount > 8) {\n                  d.sourceIndex--;\n                  d.bitcount -= 8;\n                }\n\n                /* get length */\n                length = d.source[d.sourceIndex + 1];\n                length = 256 * length + d.source[d.sourceIndex];\n\n                /* get one's complement of length */\n                invlength = d.source[d.sourceIndex + 3];\n                invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\n                /* check length */\n                if (length !== (~invlength & 0x0000ffff)) {\n                  return TINF_DATA_ERROR;\n                }\n\n                d.sourceIndex += 4;\n\n                /* copy block */\n                for (i = length; i; --i) {\n                  d.dest[d.destLen++] = d.source[d.sourceIndex++];\n                }\n\n                /* make sure we start next block on a byte boundary */\n                d.bitcount = 0;\n\n                return TINF_OK;\n              }\n\n              /* inflate stream from source to dest */\n              function tinf_uncompress(source, dest) {\n                var d = new Data(source, dest);\n                var bfinal, btype, res;\n\n                do {\n                  /* read final block flag */\n                  bfinal = tinf_getbit(d);\n\n                  /* read block type (2 bits) */\n                  btype = tinf_read_bits(d, 2, 0);\n\n                  /* decompress block */\n                  switch (btype) {\n                    case 0:\n                      /* decompress uncompressed block */\n                      res = tinf_inflate_uncompressed_block(d);\n                      break;\n                    case 1:\n                      /* decompress block with fixed huffman trees */\n                      res = tinf_inflate_block_data(d, sltree, sdtree);\n                      break;\n                    case 2:\n                      /* decompress block with dynamic huffman trees */\n                      tinf_decode_trees(d, d.ltree, d.dtree);\n                      res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n                      break;\n                    default:\n                      res = TINF_DATA_ERROR;\n                  }\n\n                  if (res !== TINF_OK) {\n                    throw new Error('Data error');\n                  }\n                } while (!bfinal);\n\n                if (d.destLen < d.dest.length) {\n                  if (typeof d.dest.slice === 'function') {\n                    return d.dest.slice(0, d.destLen);\n                  } else {\n                    return d.dest.subarray(0, d.destLen);\n                  }\n                }\n\n                return d.dest;\n              }\n\n              /* -------------------- *\n\t * -- initialization -- *\n\t * -------------------- */\n\n              /* build fixed huffman trees */\n              tinf_build_fixed_trees(sltree, sdtree);\n\n              /* build extra bits and base tables */\n              tinf_build_bits_base(length_bits, length_base, 4, 3);\n              tinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\n              /* fix a special case */\n              length_bits[28] = 0;\n              length_base[28] = 258;\n\n              var tinyInflate = tinf_uncompress;\n\n              // The Bounding Box object\n\n              function derive(v0, v1, v2, v3, t) {\n                return (\n                  Math.pow(1 - t, 3) * v0 +\n                  3 * Math.pow(1 - t, 2) * t * v1 +\n                  3 * (1 - t) * Math.pow(t, 2) * v2 +\n                  Math.pow(t, 3) * v3\n                );\n              }\n              /**\n               * A bounding box is an enclosing box that describes the smallest measure within which all the points lie.\n               * It is used to calculate the bounding box of a glyph or text path.\n               *\n               * On initialization, x1/y1/x2/y2 will be NaN. Check if the bounding box is empty using `isEmpty()`.\n               *\n               * @exports opentype.BoundingBox\n               * @class\n               * @constructor\n               */\n              function BoundingBox() {\n                this.x1 = Number.NaN;\n                this.y1 = Number.NaN;\n                this.x2 = Number.NaN;\n                this.y2 = Number.NaN;\n              }\n\n              /**\n               * Returns true if the bounding box is empty, that is, no points have been added to the box yet.\n               */\n              BoundingBox.prototype.isEmpty = function() {\n                return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);\n              };\n\n              /**\n               * Add the point to the bounding box.\n               * The x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.\n               * @param {number} x - The X coordinate of the point.\n               * @param {number} y - The Y coordinate of the point.\n               */\n              BoundingBox.prototype.addPoint = function(x, y) {\n                if (typeof x === 'number') {\n                  if (isNaN(this.x1) || isNaN(this.x2)) {\n                    this.x1 = x;\n                    this.x2 = x;\n                  }\n                  if (x < this.x1) {\n                    this.x1 = x;\n                  }\n                  if (x > this.x2) {\n                    this.x2 = x;\n                  }\n                }\n                if (typeof y === 'number') {\n                  if (isNaN(this.y1) || isNaN(this.y2)) {\n                    this.y1 = y;\n                    this.y2 = y;\n                  }\n                  if (y < this.y1) {\n                    this.y1 = y;\n                  }\n                  if (y > this.y2) {\n                    this.y2 = y;\n                  }\n                }\n              };\n\n              /**\n               * Add a X coordinate to the bounding box.\n               * This extends the bounding box to include the X coordinate.\n               * This function is used internally inside of addBezier.\n               * @param {number} x - The X coordinate of the point.\n               */\n              BoundingBox.prototype.addX = function(x) {\n                this.addPoint(x, null);\n              };\n\n              /**\n               * Add a Y coordinate to the bounding box.\n               * This extends the bounding box to include the Y coordinate.\n               * This function is used internally inside of addBezier.\n               * @param {number} y - The Y coordinate of the point.\n               */\n              BoundingBox.prototype.addY = function(y) {\n                this.addPoint(null, y);\n              };\n\n              /**\n               * Add a Bézier curve to the bounding box.\n               * This extends the bounding box to include the entire Bézier.\n               * @param {number} x0 - The starting X coordinate.\n               * @param {number} y0 - The starting Y coordinate.\n               * @param {number} x1 - The X coordinate of the first control point.\n               * @param {number} y1 - The Y coordinate of the first control point.\n               * @param {number} x2 - The X coordinate of the second control point.\n               * @param {number} y2 - The Y coordinate of the second control point.\n               * @param {number} x - The ending X coordinate.\n               * @param {number} y - The ending Y coordinate.\n               */\n              BoundingBox.prototype.addBezier = function(x0, y0, x1, y1, x2, y2, x, y) {\n                var this$1 = this;\n\n                // This code is based on http://nishiohirokazu.blogspot.com/2009/06/how-to-calculate-bezier-curves-bounding.html\n                // and https://github.com/icons8/svg-path-bounding-box\n\n                var p0 = [x0, y0];\n                var p1 = [x1, y1];\n                var p2 = [x2, y2];\n                var p3 = [x, y];\n\n                this.addPoint(x0, y0);\n                this.addPoint(x, y);\n\n                for (var i = 0; i <= 1; i++) {\n                  var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n                  var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n                  var c = 3 * p1[i] - 3 * p0[i];\n\n                  if (a === 0) {\n                    if (b === 0) {\n                      continue;\n                    }\n                    var t = -c / b;\n                    if (0 < t && t < 1) {\n                      if (i === 0) {\n                        this$1.addX(derive(p0[i], p1[i], p2[i], p3[i], t));\n                      }\n                      if (i === 1) {\n                        this$1.addY(derive(p0[i], p1[i], p2[i], p3[i], t));\n                      }\n                    }\n                    continue;\n                  }\n\n                  var b2ac = Math.pow(b, 2) - 4 * c * a;\n                  if (b2ac < 0) {\n                    continue;\n                  }\n                  var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n                  if (0 < t1 && t1 < 1) {\n                    if (i === 0) {\n                      this$1.addX(derive(p0[i], p1[i], p2[i], p3[i], t1));\n                    }\n                    if (i === 1) {\n                      this$1.addY(derive(p0[i], p1[i], p2[i], p3[i], t1));\n                    }\n                  }\n                  var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n                  if (0 < t2 && t2 < 1) {\n                    if (i === 0) {\n                      this$1.addX(derive(p0[i], p1[i], p2[i], p3[i], t2));\n                    }\n                    if (i === 1) {\n                      this$1.addY(derive(p0[i], p1[i], p2[i], p3[i], t2));\n                    }\n                  }\n                }\n              };\n\n              /**\n               * Add a quadratic curve to the bounding box.\n               * This extends the bounding box to include the entire quadratic curve.\n               * @param {number} x0 - The starting X coordinate.\n               * @param {number} y0 - The starting Y coordinate.\n               * @param {number} x1 - The X coordinate of the control point.\n               * @param {number} y1 - The Y coordinate of the control point.\n               * @param {number} x - The ending X coordinate.\n               * @param {number} y - The ending Y coordinate.\n               */\n              BoundingBox.prototype.addQuad = function(x0, y0, x1, y1, x, y) {\n                var cp1x = x0 + 2 / 3 * (x1 - x0);\n                var cp1y = y0 + 2 / 3 * (y1 - y0);\n                var cp2x = cp1x + 1 / 3 * (x - x0);\n                var cp2y = cp1y + 1 / 3 * (y - y0);\n                this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);\n              };\n\n              // Geometric objects\n\n              /**\n               * A bézier path containing a set of path commands similar to a SVG path.\n               * Paths can be drawn on a context using `draw`.\n               * @exports opentype.Path\n               * @class\n               * @constructor\n               */\n              function Path() {\n                this.commands = [];\n                this.fill = 'black';\n                this.stroke = null;\n                this.strokeWidth = 1;\n              }\n\n              /**\n               * @param  {number} x\n               * @param  {number} y\n               */\n              Path.prototype.moveTo = function(x, y) {\n                this.commands.push({\n                  type: 'M',\n                  x: x,\n                  y: y\n                });\n              };\n\n              /**\n               * @param  {number} x\n               * @param  {number} y\n               */\n              Path.prototype.lineTo = function(x, y) {\n                this.commands.push({\n                  type: 'L',\n                  x: x,\n                  y: y\n                });\n              };\n\n              /**\n               * Draws cubic curve\n               * @function\n               * curveTo\n               * @memberof opentype.Path.prototype\n               * @param  {number} x1 - x of control 1\n               * @param  {number} y1 - y of control 1\n               * @param  {number} x2 - x of control 2\n               * @param  {number} y2 - y of control 2\n               * @param  {number} x - x of path point\n               * @param  {number} y - y of path point\n               */\n\n              /**\n               * Draws cubic curve\n               * @function\n               * bezierCurveTo\n               * @memberof opentype.Path.prototype\n               * @param  {number} x1 - x of control 1\n               * @param  {number} y1 - y of control 1\n               * @param  {number} x2 - x of control 2\n               * @param  {number} y2 - y of control 2\n               * @param  {number} x - x of path point\n               * @param  {number} y - y of path point\n               * @see curveTo\n               */\n              Path.prototype.curveTo = Path.prototype.bezierCurveTo = function(\n                x1,\n                y1,\n                x2,\n                y2,\n                x,\n                y\n              ) {\n                this.commands.push({\n                  type: 'C',\n                  x1: x1,\n                  y1: y1,\n                  x2: x2,\n                  y2: y2,\n                  x: x,\n                  y: y\n                });\n              };\n\n              /**\n               * Draws quadratic curve\n               * @function\n               * quadraticCurveTo\n               * @memberof opentype.Path.prototype\n               * @param  {number} x1 - x of control\n               * @param  {number} y1 - y of control\n               * @param  {number} x - x of path point\n               * @param  {number} y - y of path point\n               */\n\n              /**\n               * Draws quadratic curve\n               * @function\n               * quadTo\n               * @memberof opentype.Path.prototype\n               * @param  {number} x1 - x of control\n               * @param  {number} y1 - y of control\n               * @param  {number} x - x of path point\n               * @param  {number} y - y of path point\n               */\n              Path.prototype.quadTo = Path.prototype.quadraticCurveTo = function(\n                x1,\n                y1,\n                x,\n                y\n              ) {\n                this.commands.push({\n                  type: 'Q',\n                  x1: x1,\n                  y1: y1,\n                  x: x,\n                  y: y\n                });\n              };\n\n              /**\n               * Closes the path\n               * @function closePath\n               * @memberof opentype.Path.prototype\n               */\n\n              /**\n               * Close the path\n               * @function close\n               * @memberof opentype.Path.prototype\n               */\n              Path.prototype.close = Path.prototype.closePath = function() {\n                this.commands.push({\n                  type: 'Z'\n                });\n              };\n\n              /**\n               * Add the given path or list of commands to the commands of this path.\n               * @param  {Array} pathOrCommands - another opentype.Path, an opentype.BoundingBox, or an array of commands.\n               */\n              Path.prototype.extend = function(pathOrCommands) {\n                if (pathOrCommands.commands) {\n                  pathOrCommands = pathOrCommands.commands;\n                } else if (pathOrCommands instanceof BoundingBox) {\n                  var box = pathOrCommands;\n                  this.moveTo(box.x1, box.y1);\n                  this.lineTo(box.x2, box.y1);\n                  this.lineTo(box.x2, box.y2);\n                  this.lineTo(box.x1, box.y2);\n                  this.close();\n                  return;\n                }\n\n                Array.prototype.push.apply(this.commands, pathOrCommands);\n              };\n\n              /**\n               * Calculate the bounding box of the path.\n               * @returns {opentype.BoundingBox}\n               */\n              Path.prototype.getBoundingBox = function() {\n                var this$1 = this;\n\n                var box = new BoundingBox();\n\n                var startX = 0;\n                var startY = 0;\n                var prevX = 0;\n                var prevY = 0;\n                for (var i = 0; i < this.commands.length; i++) {\n                  var cmd = this$1.commands[i];\n                  switch (cmd.type) {\n                    case 'M':\n                      box.addPoint(cmd.x, cmd.y);\n                      startX = prevX = cmd.x;\n                      startY = prevY = cmd.y;\n                      break;\n                    case 'L':\n                      box.addPoint(cmd.x, cmd.y);\n                      prevX = cmd.x;\n                      prevY = cmd.y;\n                      break;\n                    case 'Q':\n                      box.addQuad(prevX, prevY, cmd.x1, cmd.y1, cmd.x, cmd.y);\n                      prevX = cmd.x;\n                      prevY = cmd.y;\n                      break;\n                    case 'C':\n                      box.addBezier(\n                        prevX,\n                        prevY,\n                        cmd.x1,\n                        cmd.y1,\n                        cmd.x2,\n                        cmd.y2,\n                        cmd.x,\n                        cmd.y\n                      );\n                      prevX = cmd.x;\n                      prevY = cmd.y;\n                      break;\n                    case 'Z':\n                      prevX = startX;\n                      prevY = startY;\n                      break;\n                    default:\n                      throw new Error('Unexpected path command ' + cmd.type);\n                  }\n                }\n                if (box.isEmpty()) {\n                  box.addPoint(0, 0);\n                }\n                return box;\n              };\n\n              /**\n               * Draw the path to a 2D context.\n               * @param {CanvasRenderingContext2D} ctx - A 2D drawing context.\n               */\n              Path.prototype.draw = function(ctx) {\n                var this$1 = this;\n\n                ctx.beginPath();\n                for (var i = 0; i < this.commands.length; i += 1) {\n                  var cmd = this$1.commands[i];\n                  if (cmd.type === 'M') {\n                    ctx.moveTo(cmd.x, cmd.y);\n                  } else if (cmd.type === 'L') {\n                    ctx.lineTo(cmd.x, cmd.y);\n                  } else if (cmd.type === 'C') {\n                    ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n                  } else if (cmd.type === 'Q') {\n                    ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);\n                  } else if (cmd.type === 'Z') {\n                    ctx.closePath();\n                  }\n                }\n\n                if (this.fill) {\n                  ctx.fillStyle = this.fill;\n                  ctx.fill();\n                }\n\n                if (this.stroke) {\n                  ctx.strokeStyle = this.stroke;\n                  ctx.lineWidth = this.strokeWidth;\n                  ctx.stroke();\n                }\n              };\n\n              /**\n               * Convert the Path to a string of path data instructions\n               * See http://www.w3.org/TR/SVG/paths.html#PathData\n               * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n               * @return {string}\n               */\n              Path.prototype.toPathData = function(decimalPlaces) {\n                var this$1 = this;\n\n                decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;\n\n                function floatToString(v) {\n                  if (Math.round(v) === v) {\n                    return '' + Math.round(v);\n                  } else {\n                    return v.toFixed(decimalPlaces);\n                  }\n                }\n\n                function packValues() {\n                  var arguments$1 = arguments;\n\n                  var s = '';\n                  for (var i = 0; i < arguments.length; i += 1) {\n                    var v = arguments$1[i];\n                    if (v >= 0 && i > 0) {\n                      s += ' ';\n                    }\n\n                    s += floatToString(v);\n                  }\n\n                  return s;\n                }\n\n                var d = '';\n                for (var i = 0; i < this.commands.length; i += 1) {\n                  var cmd = this$1.commands[i];\n                  if (cmd.type === 'M') {\n                    d += 'M' + packValues(cmd.x, cmd.y);\n                  } else if (cmd.type === 'L') {\n                    d += 'L' + packValues(cmd.x, cmd.y);\n                  } else if (cmd.type === 'C') {\n                    d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n                  } else if (cmd.type === 'Q') {\n                    d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);\n                  } else if (cmd.type === 'Z') {\n                    d += 'Z';\n                  }\n                }\n\n                return d;\n              };\n\n              /**\n               * Convert the path to an SVG <path> element, as a string.\n               * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n               * @return {string}\n               */\n              Path.prototype.toSVG = function(decimalPlaces) {\n                var svg = '<path d=\"';\n                svg += this.toPathData(decimalPlaces);\n                svg += '\"';\n                if (this.fill && this.fill !== 'black') {\n                  if (this.fill === null) {\n                    svg += ' fill=\"none\"';\n                  } else {\n                    svg += ' fill=\"' + this.fill + '\"';\n                  }\n                }\n\n                if (this.stroke) {\n                  svg +=\n                    ' stroke=\"' + this.stroke + '\" stroke-width=\"' + this.strokeWidth + '\"';\n                }\n\n                svg += '/>';\n                return svg;\n              };\n\n              /**\n               * Convert the path to a DOM element.\n               * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n               * @return {SVGPathElement}\n               */\n              Path.prototype.toDOMElement = function(decimalPlaces) {\n                var temporaryPath = this.toPathData(decimalPlaces);\n                var newPath = document.createElementNS(\n                  'http://www.w3.org/2000/svg',\n                  'path'\n                );\n\n                newPath.setAttribute('d', temporaryPath);\n\n                return newPath;\n              };\n\n              // Run-time checking of preconditions.\n\n              function fail(message) {\n                throw new Error(message);\n              }\n\n              // Precondition function that checks if the given predicate is true.\n              // If not, it will throw an error.\n              function argument(predicate, message) {\n                if (!predicate) {\n                  fail(message);\n                }\n              }\n              var check = { fail: fail, argument: argument, assert: argument };\n\n              // Data types used in the OpenType font file.\n\n              var LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15\n              var LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31\n\n              /**\n               * @exports opentype.decode\n               * @class\n               */\n              var decode = {};\n              /**\n               * @exports opentype.encode\n               * @class\n               */\n              var encode = {};\n              /**\n               * @exports opentype.sizeOf\n               * @class\n               */\n              var sizeOf = {};\n\n              // Return a function that always returns the same value.\n              function constant(v) {\n                return function() {\n                  return v;\n                };\n              }\n\n              // OpenType data types //////////////////////////////////////////////////////\n\n              /**\n               * Convert an 8-bit unsigned integer to a list of 1 byte.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.BYTE = function(v) {\n                check.argument(\n                  v >= 0 && v <= 255,\n                  'Byte value should be between 0 and 255.'\n                );\n                return [v];\n              };\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.BYTE = constant(1);\n\n              /**\n               * Convert a 8-bit signed integer to a list of 1 byte.\n               * @param {string}\n               * @returns {Array}\n               */\n              encode.CHAR = function(v) {\n                return [v.charCodeAt(0)];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.CHAR = constant(1);\n\n              /**\n               * Convert an ASCII string to a list of bytes.\n               * @param {string}\n               * @returns {Array}\n               */\n              encode.CHARARRAY = function(v) {\n                var b = [];\n                for (var i = 0; i < v.length; i += 1) {\n                  b[i] = v.charCodeAt(i);\n                }\n\n                return b;\n              };\n\n              /**\n               * @param {Array}\n               * @returns {number}\n               */\n              sizeOf.CHARARRAY = function(v) {\n                return v.length;\n              };\n\n              /**\n               * Convert a 16-bit unsigned integer to a list of 2 bytes.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.USHORT = function(v) {\n                return [(v >> 8) & 0xff, v & 0xff];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.USHORT = constant(2);\n\n              /**\n               * Convert a 16-bit signed integer to a list of 2 bytes.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.SHORT = function(v) {\n                // Two's complement\n                if (v >= LIMIT16) {\n                  v = -(2 * LIMIT16 - v);\n                }\n\n                return [(v >> 8) & 0xff, v & 0xff];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.SHORT = constant(2);\n\n              /**\n               * Convert a 24-bit unsigned integer to a list of 3 bytes.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.UINT24 = function(v) {\n                return [(v >> 16) & 0xff, (v >> 8) & 0xff, v & 0xff];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.UINT24 = constant(3);\n\n              /**\n               * Convert a 32-bit unsigned integer to a list of 4 bytes.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.ULONG = function(v) {\n                return [(v >> 24) & 0xff, (v >> 16) & 0xff, (v >> 8) & 0xff, v & 0xff];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.ULONG = constant(4);\n\n              /**\n               * Convert a 32-bit unsigned integer to a list of 4 bytes.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.LONG = function(v) {\n                // Two's complement\n                if (v >= LIMIT32) {\n                  v = -(2 * LIMIT32 - v);\n                }\n\n                return [(v >> 24) & 0xff, (v >> 16) & 0xff, (v >> 8) & 0xff, v & 0xff];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.LONG = constant(4);\n\n              encode.FIXED = encode.ULONG;\n              sizeOf.FIXED = sizeOf.ULONG;\n\n              encode.FWORD = encode.SHORT;\n              sizeOf.FWORD = sizeOf.SHORT;\n\n              encode.UFWORD = encode.USHORT;\n              sizeOf.UFWORD = sizeOf.USHORT;\n\n              /**\n               * Convert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.LONGDATETIME = function(v) {\n                return [\n                  0,\n                  0,\n                  0,\n                  0,\n                  (v >> 24) & 0xff,\n                  (v >> 16) & 0xff,\n                  (v >> 8) & 0xff,\n                  v & 0xff\n                ];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.LONGDATETIME = constant(8);\n\n              /**\n               * Convert a 4-char tag to a list of 4 bytes.\n               * @param {string}\n               * @returns {Array}\n               */\n              encode.TAG = function(v) {\n                check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');\n                return [v.charCodeAt(0), v.charCodeAt(1), v.charCodeAt(2), v.charCodeAt(3)];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.TAG = constant(4);\n\n              // CFF data types ///////////////////////////////////////////////////////////\n\n              encode.Card8 = encode.BYTE;\n              sizeOf.Card8 = sizeOf.BYTE;\n\n              encode.Card16 = encode.USHORT;\n              sizeOf.Card16 = sizeOf.USHORT;\n\n              encode.OffSize = encode.BYTE;\n              sizeOf.OffSize = sizeOf.BYTE;\n\n              encode.SID = encode.USHORT;\n              sizeOf.SID = sizeOf.USHORT;\n\n              // Convert a numeric operand or charstring number to a variable-size list of bytes.\n              /**\n               * Convert a numeric operand or charstring number to a variable-size list of bytes.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.NUMBER = function(v) {\n                if (v >= -107 && v <= 107) {\n                  return [v + 139];\n                } else if (v >= 108 && v <= 1131) {\n                  v = v - 108;\n                  return [(v >> 8) + 247, v & 0xff];\n                } else if (v >= -1131 && v <= -108) {\n                  v = -v - 108;\n                  return [(v >> 8) + 251, v & 0xff];\n                } else if (v >= -32768 && v <= 32767) {\n                  return encode.NUMBER16(v);\n                } else {\n                  return encode.NUMBER32(v);\n                }\n              };\n\n              /**\n               * @param {number}\n               * @returns {number}\n               */\n              sizeOf.NUMBER = function(v) {\n                return encode.NUMBER(v).length;\n              };\n\n              /**\n               * Convert a signed number between -32768 and +32767 to a three-byte value.\n               * This ensures we always use three bytes, but is not the most compact format.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.NUMBER16 = function(v) {\n                return [28, (v >> 8) & 0xff, v & 0xff];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.NUMBER16 = constant(3);\n\n              /**\n               * Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.\n               * This is useful if you want to be sure you always use four bytes,\n               * at the expense of wasting a few bytes for smaller numbers.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.NUMBER32 = function(v) {\n                return [29, (v >> 24) & 0xff, (v >> 16) & 0xff, (v >> 8) & 0xff, v & 0xff];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.NUMBER32 = constant(5);\n\n              /**\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.REAL = function(v) {\n                var value = v.toString();\n\n                // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)\n                // This code converts it back to a number without the epsilon.\n                var m = /\\.(\\d*?)(?:9{5,20}|0{5,20})\\d{0,2}(?:e(.+)|$)/.exec(value);\n                if (m) {\n                  var epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));\n                  value = (Math.round(v * epsilon) / epsilon).toString();\n                }\n\n                var nibbles = '';\n                for (var i = 0, ii = value.length; i < ii; i += 1) {\n                  var c = value[i];\n                  if (c === 'e') {\n                    nibbles += value[++i] === '-' ? 'c' : 'b';\n                  } else if (c === '.') {\n                    nibbles += 'a';\n                  } else if (c === '-') {\n                    nibbles += 'e';\n                  } else {\n                    nibbles += c;\n                  }\n                }\n\n                nibbles += nibbles.length & 1 ? 'f' : 'ff';\n                var out = [30];\n                for (var i$1 = 0, ii$1 = nibbles.length; i$1 < ii$1; i$1 += 2) {\n                  out.push(parseInt(nibbles.substr(i$1, 2), 16));\n                }\n\n                return out;\n              };\n\n              /**\n               * @param {number}\n               * @returns {number}\n               */\n              sizeOf.REAL = function(v) {\n                return encode.REAL(v).length;\n              };\n\n              encode.NAME = encode.CHARARRAY;\n              sizeOf.NAME = sizeOf.CHARARRAY;\n\n              encode.STRING = encode.CHARARRAY;\n              sizeOf.STRING = sizeOf.CHARARRAY;\n\n              /**\n               * @param {DataView} data\n               * @param {number} offset\n               * @param {number} numBytes\n               * @returns {string}\n               */\n              decode.UTF8 = function(data, offset, numBytes) {\n                var codePoints = [];\n                var numChars = numBytes;\n                for (var j = 0; j < numChars; j++, offset += 1) {\n                  codePoints[j] = data.getUint8(offset);\n                }\n\n                return String.fromCharCode.apply(null, codePoints);\n              };\n\n              /**\n               * @param {DataView} data\n               * @param {number} offset\n               * @param {number} numBytes\n               * @returns {string}\n               */\n              decode.UTF16 = function(data, offset, numBytes) {\n                var codePoints = [];\n                var numChars = numBytes / 2;\n                for (var j = 0; j < numChars; j++, offset += 2) {\n                  codePoints[j] = data.getUint16(offset);\n                }\n\n                return String.fromCharCode.apply(null, codePoints);\n              };\n\n              /**\n               * Convert a JavaScript string to UTF16-BE.\n               * @param {string}\n               * @returns {Array}\n               */\n              encode.UTF16 = function(v) {\n                var b = [];\n                for (var i = 0; i < v.length; i += 1) {\n                  var codepoint = v.charCodeAt(i);\n                  b[b.length] = (codepoint >> 8) & 0xff;\n                  b[b.length] = codepoint & 0xff;\n                }\n\n                return b;\n              };\n\n              /**\n               * @param {string}\n               * @returns {number}\n               */\n              sizeOf.UTF16 = function(v) {\n                return v.length * 2;\n              };\n\n              // Data for converting old eight-bit Macintosh encodings to Unicode.\n              // This representation is optimized for decoding; encoding is slower\n              // and needs more memory. The assumption is that all opentype.js users\n              // want to open fonts, but saving a font will be comparatively rare\n              // so it can be more expensive. Keyed by IANA character set name.\n              //\n              // Python script for generating these strings:\n              //\n              //     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])\n              //     print(s.encode('utf-8'))\n              /**\n               * @private\n               */\n              var eightBitMacEncodings = {\n                // Python: 'mac_croatian'\n                'x-mac-croatian':\n                  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' +\n                  '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',\n                // Python: 'mac_cyrillic'\n                'x-mac-cyrillic':\n                  'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' +\n                  'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',\n                // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT\n                'x-mac-gaelic':\n                  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' +\n                  'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',\n                // Python: 'mac_greek'\n                'x-mac-greek':\n                  'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' +\n                  'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\\u00AD',\n                // Python: 'mac_iceland'\n                'x-mac-icelandic':\n                  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n                  '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n                // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT\n                'x-mac-inuit':\n                  'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' +\n                  'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',\n                // Python: 'mac_latin2'\n                'x-mac-ce':\n                  'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' +\n                  'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',\n                // Python: 'mac_roman'\n                macintosh:\n                  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n                  '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n                // Python: 'mac_romanian'\n                'x-mac-romanian':\n                  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' +\n                  '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n                // Python: 'mac_turkish'\n                'x-mac-turkish':\n                  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n                  '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'\n              };\n\n              /**\n               * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript\n               * string, or 'undefined' if the encoding is unsupported. For example, we do\n               * not support Chinese, Japanese or Korean because these would need large\n               * mapping tables.\n               * @param {DataView} dataView\n               * @param {number} offset\n               * @param {number} dataLength\n               * @param {string} encoding\n               * @returns {string}\n               */\n              decode.MACSTRING = function(dataView, offset, dataLength, encoding) {\n                var table = eightBitMacEncodings[encoding];\n                if (table === undefined) {\n                  return undefined;\n                }\n\n                var result = '';\n                for (var i = 0; i < dataLength; i++) {\n                  var c = dataView.getUint8(offset + i);\n                  // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n                  // mapped to U+0000..U+007F; we only need to look up the others.\n                  if (c <= 0x7f) {\n                    result += String.fromCharCode(c);\n                  } else {\n                    result += table[c & 0x7f];\n                  }\n                }\n\n                return result;\n              };\n\n              // Helper function for encode.MACSTRING. Returns a dictionary for mapping\n              // Unicode character codes to their 8-bit MacOS equivalent. This table\n              // is not exactly a super cheap data structure, but we do not care because\n              // encoding Macintosh strings is only rarely needed in typical applications.\n              var macEncodingTableCache = typeof WeakMap === 'function' && new WeakMap();\n              var macEncodingCacheKeys;\n              var getMacEncodingTable = function(encoding) {\n                // Since we use encoding as a cache key for WeakMap, it has to be\n                // a String object and not a literal. And at least on NodeJS 2.10.1,\n                // WeakMap requires that the same String instance is passed for cache hits.\n                if (!macEncodingCacheKeys) {\n                  macEncodingCacheKeys = {};\n                  for (var e in eightBitMacEncodings) {\n                    /*jshint -W053 */ // Suppress \"Do not use String as a constructor.\"\n                    macEncodingCacheKeys[e] = new String(e);\n                  }\n                }\n\n                var cacheKey = macEncodingCacheKeys[encoding];\n                if (cacheKey === undefined) {\n                  return undefined;\n                }\n\n                // We can't do \"if (cache.has(key)) {return cache.get(key)}\" here:\n                // since garbage collection may run at any time, it could also kick in\n                // between the calls to cache.has() and cache.get(). In that case,\n                // we would return 'undefined' even though we do support the encoding.\n                if (macEncodingTableCache) {\n                  var cachedTable = macEncodingTableCache.get(cacheKey);\n                  if (cachedTable !== undefined) {\n                    return cachedTable;\n                  }\n                }\n\n                var decodingTable = eightBitMacEncodings[encoding];\n                if (decodingTable === undefined) {\n                  return undefined;\n                }\n\n                var encodingTable = {};\n                for (var i = 0; i < decodingTable.length; i++) {\n                  encodingTable[decodingTable.charCodeAt(i)] = i + 0x80;\n                }\n\n                if (macEncodingTableCache) {\n                  macEncodingTableCache.set(cacheKey, encodingTable);\n                }\n\n                return encodingTable;\n              };\n\n              /**\n               * Encodes an old-style Macintosh string. Returns a byte array upon success.\n               * If the requested encoding is unsupported, or if the input string contains\n               * a character that cannot be expressed in the encoding, the function returns\n               * 'undefined'.\n               * @param {string} str\n               * @param {string} encoding\n               * @returns {Array}\n               */\n              encode.MACSTRING = function(str, encoding) {\n                var table = getMacEncodingTable(encoding);\n                if (table === undefined) {\n                  return undefined;\n                }\n\n                var result = [];\n                for (var i = 0; i < str.length; i++) {\n                  var c = str.charCodeAt(i);\n\n                  // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n                  // mapped to U+0000..U+007F; we only need to look up the others.\n                  if (c >= 0x80) {\n                    c = table[c];\n                    if (c === undefined) {\n                      // str contains a Unicode character that cannot be encoded\n                      // in the requested encoding.\n                      return undefined;\n                    }\n                  }\n                  result[i] = c;\n                  // result.push(c);\n                }\n\n                return result;\n              };\n\n              /**\n               * @param {string} str\n               * @param {string} encoding\n               * @returns {number}\n               */\n              sizeOf.MACSTRING = function(str, encoding) {\n                var b = encode.MACSTRING(str, encoding);\n                if (b !== undefined) {\n                  return b.length;\n                } else {\n                  return 0;\n                }\n              };\n\n              // Helper for encode.VARDELTAS\n              function isByteEncodable(value) {\n                return value >= -128 && value <= 127;\n              }\n\n              // Helper for encode.VARDELTAS\n              function encodeVarDeltaRunAsZeroes(deltas, pos, result) {\n                var runLength = 0;\n                var numDeltas = deltas.length;\n                while (pos < numDeltas && runLength < 64 && deltas[pos] === 0) {\n                  ++pos;\n                  ++runLength;\n                }\n                result.push(0x80 | (runLength - 1));\n                return pos;\n              }\n\n              // Helper for encode.VARDELTAS\n              function encodeVarDeltaRunAsBytes(deltas, offset, result) {\n                var runLength = 0;\n                var numDeltas = deltas.length;\n                var pos = offset;\n                while (pos < numDeltas && runLength < 64) {\n                  var value = deltas[pos];\n                  if (!isByteEncodable(value)) {\n                    break;\n                  }\n\n                  // Within a byte-encoded run of deltas, a single zero is best\n                  // stored literally as 0x00 value. However, if we have two or\n                  // more zeroes in a sequence, it is better to start a new run.\n                  // Fore example, the sequence of deltas [15, 15, 0, 15, 15]\n                  // becomes 6 bytes (04 0F 0F 00 0F 0F) when storing the zero\n                  // within the current run, but 7 bytes (01 0F 0F 80 01 0F 0F)\n                  // when starting a new run.\n                  if (value === 0 && pos + 1 < numDeltas && deltas[pos + 1] === 0) {\n                    break;\n                  }\n\n                  ++pos;\n                  ++runLength;\n                }\n                result.push(runLength - 1);\n                for (var i = offset; i < pos; ++i) {\n                  result.push((deltas[i] + 256) & 0xff);\n                }\n                return pos;\n              }\n\n              // Helper for encode.VARDELTAS\n              function encodeVarDeltaRunAsWords(deltas, offset, result) {\n                var runLength = 0;\n                var numDeltas = deltas.length;\n                var pos = offset;\n                while (pos < numDeltas && runLength < 64) {\n                  var value = deltas[pos];\n\n                  // Within a word-encoded run of deltas, it is easiest to start\n                  // a new run (with a different encoding) whenever we encounter\n                  // a zero value. For example, the sequence [0x6666, 0, 0x7777]\n                  // needs 7 bytes when storing the zero inside the current run\n                  // (42 66 66 00 00 77 77), and equally 7 bytes when starting a\n                  // new run (40 66 66 80 40 77 77).\n                  if (value === 0) {\n                    break;\n                  }\n\n                  // Within a word-encoded run of deltas, a single value in the\n                  // range (-128..127) should be encoded within the current run\n                  // because it is more compact. For example, the sequence\n                  // [0x6666, 2, 0x7777] becomes 7 bytes when storing the value\n                  // literally (42 66 66 00 02 77 77), but 8 bytes when starting\n                  // a new run (40 66 66 00 02 40 77 77).\n                  if (\n                    isByteEncodable(value) &&\n                    pos + 1 < numDeltas &&\n                    isByteEncodable(deltas[pos + 1])\n                  ) {\n                    break;\n                  }\n\n                  ++pos;\n                  ++runLength;\n                }\n                result.push(0x40 | (runLength - 1));\n                for (var i = offset; i < pos; ++i) {\n                  var val = deltas[i];\n                  result.push(((val + 0x10000) >> 8) & 0xff, (val + 0x100) & 0xff);\n                }\n                return pos;\n              }\n\n              /**\n               * Encode a list of variation adjustment deltas.\n               *\n               * Variation adjustment deltas are used in ‘gvar’ and ‘cvar’ tables.\n               * They indicate how points (in ‘gvar’) or values (in ‘cvar’) get adjusted\n               * when generating instances of variation fonts.\n               *\n               * @see https://www.microsoft.com/typography/otspec/gvar.htm\n               * @see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6gvar.html\n               * @param {Array}\n               * @return {Array}\n               */\n              encode.VARDELTAS = function(deltas) {\n                var pos = 0;\n                var result = [];\n                while (pos < deltas.length) {\n                  var value = deltas[pos];\n                  if (value === 0) {\n                    pos = encodeVarDeltaRunAsZeroes(deltas, pos, result);\n                  } else if (value >= -128 && value <= 127) {\n                    pos = encodeVarDeltaRunAsBytes(deltas, pos, result);\n                  } else {\n                    pos = encodeVarDeltaRunAsWords(deltas, pos, result);\n                  }\n                }\n                return result;\n              };\n\n              // Convert a list of values to a CFF INDEX structure.\n              // The values should be objects containing name / type / value.\n              /**\n               * @param {Array} l\n               * @returns {Array}\n               */\n              encode.INDEX = function(l) {\n                //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,\n                //    i, v;\n                // Because we have to know which data type to use to encode the offsets,\n                // we have to go through the values twice: once to encode the data and\n                // calculate the offsets, then again to encode the offsets using the fitting data type.\n                var offset = 1; // First offset is always 1.\n                var offsets = [offset];\n                var data = [];\n                for (var i = 0; i < l.length; i += 1) {\n                  var v = encode.OBJECT(l[i]);\n                  Array.prototype.push.apply(data, v);\n                  offset += v.length;\n                  offsets.push(offset);\n                }\n\n                if (data.length === 0) {\n                  return [0, 0];\n                }\n\n                var encodedOffsets = [];\n                var offSize = (1 + Math.floor(Math.log(offset) / Math.log(2)) / 8) | 0;\n                var offsetEncoder = [\n                  undefined,\n                  encode.BYTE,\n                  encode.USHORT,\n                  encode.UINT24,\n                  encode.ULONG\n                ][offSize];\n                for (var i$1 = 0; i$1 < offsets.length; i$1 += 1) {\n                  var encodedOffset = offsetEncoder(offsets[i$1]);\n                  Array.prototype.push.apply(encodedOffsets, encodedOffset);\n                }\n\n                return Array.prototype.concat(\n                  encode.Card16(l.length),\n                  encode.OffSize(offSize),\n                  encodedOffsets,\n                  data\n                );\n              };\n\n              /**\n               * @param {Array}\n               * @returns {number}\n               */\n              sizeOf.INDEX = function(v) {\n                return encode.INDEX(v).length;\n              };\n\n              /**\n               * Convert an object to a CFF DICT structure.\n               * The keys should be numeric.\n               * The values should be objects containing name / type / value.\n               * @param {Object} m\n               * @returns {Array}\n               */\n              encode.DICT = function(m) {\n                var d = [];\n                var keys = Object.keys(m);\n                var length = keys.length;\n\n                for (var i = 0; i < length; i += 1) {\n                  // Object.keys() return string keys, but our keys are always numeric.\n                  var k = parseInt(keys[i], 0);\n                  var v = m[k];\n                  // Value comes before the key.\n                  d = d.concat(encode.OPERAND(v.value, v.type));\n                  d = d.concat(encode.OPERATOR(k));\n                }\n\n                return d;\n              };\n\n              /**\n               * @param {Object}\n               * @returns {number}\n               */\n              sizeOf.DICT = function(m) {\n                return encode.DICT(m).length;\n              };\n\n              /**\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.OPERATOR = function(v) {\n                if (v < 1200) {\n                  return [v];\n                } else {\n                  return [12, v - 1200];\n                }\n              };\n\n              /**\n               * @param {Array} v\n               * @param {string}\n               * @returns {Array}\n               */\n              encode.OPERAND = function(v, type) {\n                var d = [];\n                if (Array.isArray(type)) {\n                  for (var i = 0; i < type.length; i += 1) {\n                    check.argument(\n                      v.length === type.length,\n                      'Not enough arguments given for type' + type\n                    );\n                    d = d.concat(encode.OPERAND(v[i], type[i]));\n                  }\n                } else {\n                  if (type === 'SID') {\n                    d = d.concat(encode.NUMBER(v));\n                  } else if (type === 'offset') {\n                    // We make it easy for ourselves and always encode offsets as\n                    // 4 bytes. This makes offset calculation for the top dict easier.\n                    d = d.concat(encode.NUMBER32(v));\n                  } else if (type === 'number') {\n                    d = d.concat(encode.NUMBER(v));\n                  } else if (type === 'real') {\n                    d = d.concat(encode.REAL(v));\n                  } else {\n                    throw new Error('Unknown operand type ' + type);\n                    // FIXME Add support for booleans\n                  }\n                }\n\n                return d;\n              };\n\n              encode.OP = encode.BYTE;\n              sizeOf.OP = sizeOf.BYTE;\n\n              // memoize charstring encoding using WeakMap if available\n              var wmm = typeof WeakMap === 'function' && new WeakMap();\n\n              /**\n               * Convert a list of CharString operations to bytes.\n               * @param {Array}\n               * @returns {Array}\n               */\n              encode.CHARSTRING = function(ops) {\n                // See encode.MACSTRING for why we don't do \"if (wmm && wmm.has(ops))\".\n                if (wmm) {\n                  var cachedValue = wmm.get(ops);\n                  if (cachedValue !== undefined) {\n                    return cachedValue;\n                  }\n                }\n\n                var d = [];\n                var length = ops.length;\n\n                for (var i = 0; i < length; i += 1) {\n                  var op = ops[i];\n                  d = d.concat(encode[op.type](op.value));\n                }\n\n                if (wmm) {\n                  wmm.set(ops, d);\n                }\n\n                return d;\n              };\n\n              /**\n               * @param {Array}\n               * @returns {number}\n               */\n              sizeOf.CHARSTRING = function(ops) {\n                return encode.CHARSTRING(ops).length;\n              };\n\n              // Utility functions ////////////////////////////////////////////////////////\n\n              /**\n               * Convert an object containing name / type / value to bytes.\n               * @param {Object}\n               * @returns {Array}\n               */\n              encode.OBJECT = function(v) {\n                var encodingFunction = encode[v.type];\n                check.argument(\n                  encodingFunction !== undefined,\n                  'No encoding function for type ' + v.type\n                );\n                return encodingFunction(v.value);\n              };\n\n              /**\n               * @param {Object}\n               * @returns {number}\n               */\n              sizeOf.OBJECT = function(v) {\n                var sizeOfFunction = sizeOf[v.type];\n                check.argument(\n                  sizeOfFunction !== undefined,\n                  'No sizeOf function for type ' + v.type\n                );\n                return sizeOfFunction(v.value);\n              };\n\n              /**\n               * Convert a table object to bytes.\n               * A table contains a list of fields containing the metadata (name, type and default value).\n               * The table itself has the field values set as attributes.\n               * @param {opentype.Table}\n               * @returns {Array}\n               */\n              encode.TABLE = function(table) {\n                var d = [];\n                var length = table.fields.length;\n                var subtables = [];\n                var subtableOffsets = [];\n\n                for (var i = 0; i < length; i += 1) {\n                  var field = table.fields[i];\n                  var encodingFunction = encode[field.type];\n                  check.argument(\n                    encodingFunction !== undefined,\n                    'No encoding function for field type ' +\n                      field.type +\n                      ' (' +\n                      field.name +\n                      ')'\n                  );\n                  var value = table[field.name];\n                  if (value === undefined) {\n                    value = field.value;\n                  }\n\n                  var bytes = encodingFunction(value);\n\n                  if (field.type === 'TABLE') {\n                    subtableOffsets.push(d.length);\n                    d = d.concat([0, 0]);\n                    subtables.push(bytes);\n                  } else {\n                    d = d.concat(bytes);\n                  }\n                }\n\n                for (var i$1 = 0; i$1 < subtables.length; i$1 += 1) {\n                  var o = subtableOffsets[i$1];\n                  var offset = d.length;\n                  check.argument(offset < 65536, 'Table ' + table.tableName + ' too big.');\n                  d[o] = offset >> 8;\n                  d[o + 1] = offset & 0xff;\n                  d = d.concat(subtables[i$1]);\n                }\n\n                return d;\n              };\n\n              /**\n               * @param {opentype.Table}\n               * @returns {number}\n               */\n              sizeOf.TABLE = function(table) {\n                var numBytes = 0;\n                var length = table.fields.length;\n\n                for (var i = 0; i < length; i += 1) {\n                  var field = table.fields[i];\n                  var sizeOfFunction = sizeOf[field.type];\n                  check.argument(\n                    sizeOfFunction !== undefined,\n                    'No sizeOf function for field type ' +\n                      field.type +\n                      ' (' +\n                      field.name +\n                      ')'\n                  );\n                  var value = table[field.name];\n                  if (value === undefined) {\n                    value = field.value;\n                  }\n\n                  numBytes += sizeOfFunction(value);\n\n                  // Subtables take 2 more bytes for offsets.\n                  if (field.type === 'TABLE') {\n                    numBytes += 2;\n                  }\n                }\n\n                return numBytes;\n              };\n\n              encode.RECORD = encode.TABLE;\n              sizeOf.RECORD = sizeOf.TABLE;\n\n              // Merge in a list of bytes.\n              encode.LITERAL = function(v) {\n                return v;\n              };\n\n              sizeOf.LITERAL = function(v) {\n                return v.length;\n              };\n\n              // Table metadata\n\n              /**\n               * @exports opentype.Table\n               * @class\n               * @param {string} tableName\n               * @param {Array} fields\n               * @param {Object} options\n               * @constructor\n               */\n              function Table(tableName, fields, options) {\n                var this$1 = this;\n\n                for (var i = 0; i < fields.length; i += 1) {\n                  var field = fields[i];\n                  this$1[field.name] = field.value;\n                }\n\n                this.tableName = tableName;\n                this.fields = fields;\n                if (options) {\n                  var optionKeys = Object.keys(options);\n                  for (var i$1 = 0; i$1 < optionKeys.length; i$1 += 1) {\n                    var k = optionKeys[i$1];\n                    var v = options[k];\n                    if (this$1[k] !== undefined) {\n                      this$1[k] = v;\n                    }\n                  }\n                }\n              }\n\n              /**\n               * Encodes the table and returns an array of bytes\n               * @return {Array}\n               */\n              Table.prototype.encode = function() {\n                return encode.TABLE(this);\n              };\n\n              /**\n               * Get the size of the table.\n               * @return {number}\n               */\n              Table.prototype.sizeOf = function() {\n                return sizeOf.TABLE(this);\n              };\n\n              /**\n               * @private\n               */\n              function ushortList(itemName, list, count) {\n                if (count === undefined) {\n                  count = list.length;\n                }\n                var fields = new Array(list.length + 1);\n                fields[0] = { name: itemName + 'Count', type: 'USHORT', value: count };\n                for (var i = 0; i < list.length; i++) {\n                  fields[i + 1] = { name: itemName + i, type: 'USHORT', value: list[i] };\n                }\n                return fields;\n              }\n\n              /**\n               * @private\n               */\n              function tableList(itemName, records, itemCallback) {\n                var count = records.length;\n                var fields = new Array(count + 1);\n                fields[0] = { name: itemName + 'Count', type: 'USHORT', value: count };\n                for (var i = 0; i < count; i++) {\n                  fields[i + 1] = {\n                    name: itemName + i,\n                    type: 'TABLE',\n                    value: itemCallback(records[i], i)\n                  };\n                }\n                return fields;\n              }\n\n              /**\n               * @private\n               */\n              function recordList(itemName, records, itemCallback) {\n                var count = records.length;\n                var fields = [];\n                fields[0] = { name: itemName + 'Count', type: 'USHORT', value: count };\n                for (var i = 0; i < count; i++) {\n                  fields = fields.concat(itemCallback(records[i], i));\n                }\n                return fields;\n              }\n\n              // Common Layout Tables\n\n              /**\n               * @exports opentype.Coverage\n               * @class\n               * @param {opentype.Table}\n               * @constructor\n               * @extends opentype.Table\n               */\n              function Coverage(coverageTable) {\n                if (coverageTable.format === 1) {\n                  Table.call(\n                    this,\n                    'coverageTable',\n                    [{ name: 'coverageFormat', type: 'USHORT', value: 1 }].concat(\n                      ushortList('glyph', coverageTable.glyphs)\n                    )\n                  );\n                } else {\n                  check.assert(false, \"Can't create coverage table format 2 yet.\");\n                }\n              }\n              Coverage.prototype = Object.create(Table.prototype);\n              Coverage.prototype.constructor = Coverage;\n\n              function ScriptList(scriptListTable) {\n                Table.call(\n                  this,\n                  'scriptListTable',\n                  recordList('scriptRecord', scriptListTable, function(scriptRecord, i) {\n                    var script = scriptRecord.script;\n                    var defaultLangSys = script.defaultLangSys;\n                    check.assert(\n                      !!defaultLangSys,\n                      'Unable to write GSUB: script ' +\n                        scriptRecord.tag +\n                        ' has no default language system.'\n                    );\n                    return [\n                      { name: 'scriptTag' + i, type: 'TAG', value: scriptRecord.tag },\n                      {\n                        name: 'script' + i,\n                        type: 'TABLE',\n                        value: new Table(\n                          'scriptTable',\n                          [\n                            {\n                              name: 'defaultLangSys',\n                              type: 'TABLE',\n                              value: new Table(\n                                'defaultLangSys',\n                                [\n                                  { name: 'lookupOrder', type: 'USHORT', value: 0 },\n                                  {\n                                    name: 'reqFeatureIndex',\n                                    type: 'USHORT',\n                                    value: defaultLangSys.reqFeatureIndex\n                                  }\n                                ].concat(\n                                  ushortList('featureIndex', defaultLangSys.featureIndexes)\n                                )\n                              )\n                            }\n                          ].concat(\n                            recordList('langSys', script.langSysRecords, function(\n                              langSysRecord,\n                              i\n                            ) {\n                              var langSys = langSysRecord.langSys;\n                              return [\n                                {\n                                  name: 'langSysTag' + i,\n                                  type: 'TAG',\n                                  value: langSysRecord.tag\n                                },\n                                {\n                                  name: 'langSys' + i,\n                                  type: 'TABLE',\n                                  value: new Table(\n                                    'langSys',\n                                    [\n                                      { name: 'lookupOrder', type: 'USHORT', value: 0 },\n                                      {\n                                        name: 'reqFeatureIndex',\n                                        type: 'USHORT',\n                                        value: langSys.reqFeatureIndex\n                                      }\n                                    ].concat(\n                                      ushortList('featureIndex', langSys.featureIndexes)\n                                    )\n                                  )\n                                }\n                              ];\n                            })\n                          )\n                        )\n                      }\n                    ];\n                  })\n                );\n              }\n              ScriptList.prototype = Object.create(Table.prototype);\n              ScriptList.prototype.constructor = ScriptList;\n\n              /**\n               * @exports opentype.FeatureList\n               * @class\n               * @param {opentype.Table}\n               * @constructor\n               * @extends opentype.Table\n               */\n              function FeatureList(featureListTable) {\n                Table.call(\n                  this,\n                  'featureListTable',\n                  recordList('featureRecord', featureListTable, function(featureRecord, i) {\n                    var feature = featureRecord.feature;\n                    return [\n                      { name: 'featureTag' + i, type: 'TAG', value: featureRecord.tag },\n                      {\n                        name: 'feature' + i,\n                        type: 'TABLE',\n                        value: new Table(\n                          'featureTable',\n                          [\n                            {\n                              name: 'featureParams',\n                              type: 'USHORT',\n                              value: feature.featureParams\n                            }\n                          ].concat(ushortList('lookupListIndex', feature.lookupListIndexes))\n                        )\n                      }\n                    ];\n                  })\n                );\n              }\n              FeatureList.prototype = Object.create(Table.prototype);\n              FeatureList.prototype.constructor = FeatureList;\n\n              /**\n               * @exports opentype.LookupList\n               * @class\n               * @param {opentype.Table}\n               * @param {Object}\n               * @constructor\n               * @extends opentype.Table\n               */\n              function LookupList(lookupListTable, subtableMakers) {\n                Table.call(\n                  this,\n                  'lookupListTable',\n                  tableList('lookup', lookupListTable, function(lookupTable) {\n                    var subtableCallback = subtableMakers[lookupTable.lookupType];\n                    check.assert(\n                      !!subtableCallback,\n                      'Unable to write GSUB lookup type ' +\n                        lookupTable.lookupType +\n                        ' tables.'\n                    );\n                    return new Table(\n                      'lookupTable',\n                      [\n                        {\n                          name: 'lookupType',\n                          type: 'USHORT',\n                          value: lookupTable.lookupType\n                        },\n                        {\n                          name: 'lookupFlag',\n                          type: 'USHORT',\n                          value: lookupTable.lookupFlag\n                        }\n                      ].concat(\n                        tableList('subtable', lookupTable.subtables, subtableCallback)\n                      )\n                    );\n                  })\n                );\n              }\n              LookupList.prototype = Object.create(Table.prototype);\n              LookupList.prototype.constructor = LookupList;\n\n              // Record = same as Table, but inlined (a Table has an offset and its data is further in the stream)\n              // Don't use offsets inside Records (probable bug), only in Tables.\n              var table = {\n                Table: Table,\n                Record: Table,\n                Coverage: Coverage,\n                ScriptList: ScriptList,\n                FeatureList: FeatureList,\n                LookupList: LookupList,\n                ushortList: ushortList,\n                tableList: tableList,\n                recordList: recordList\n              };\n\n              // Parsing utility functions\n\n              // Retrieve an unsigned byte from the DataView.\n              function getByte(dataView, offset) {\n                return dataView.getUint8(offset);\n              }\n\n              // Retrieve an unsigned 16-bit short from the DataView.\n              // The value is stored in big endian.\n              function getUShort(dataView, offset) {\n                return dataView.getUint16(offset, false);\n              }\n\n              // Retrieve a signed 16-bit short from the DataView.\n              // The value is stored in big endian.\n              function getShort(dataView, offset) {\n                return dataView.getInt16(offset, false);\n              }\n\n              // Retrieve an unsigned 32-bit long from the DataView.\n              // The value is stored in big endian.\n              function getULong(dataView, offset) {\n                return dataView.getUint32(offset, false);\n              }\n\n              // Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.\n              // The value is stored in big endian.\n              function getFixed(dataView, offset) {\n                var decimal = dataView.getInt16(offset, false);\n                var fraction = dataView.getUint16(offset + 2, false);\n                return decimal + fraction / 65535;\n              }\n\n              // Retrieve a 4-character tag from the DataView.\n              // Tags are used to identify tables.\n              function getTag(dataView, offset) {\n                var tag = '';\n                for (var i = offset; i < offset + 4; i += 1) {\n                  tag += String.fromCharCode(dataView.getInt8(i));\n                }\n\n                return tag;\n              }\n\n              // Retrieve an offset from the DataView.\n              // Offsets are 1 to 4 bytes in length, depending on the offSize argument.\n              function getOffset(dataView, offset, offSize) {\n                var v = 0;\n                for (var i = 0; i < offSize; i += 1) {\n                  v <<= 8;\n                  v += dataView.getUint8(offset + i);\n                }\n\n                return v;\n              }\n\n              // Retrieve a number of bytes from start offset to the end offset from the DataView.\n              function getBytes(dataView, startOffset, endOffset) {\n                var bytes = [];\n                for (var i = startOffset; i < endOffset; i += 1) {\n                  bytes.push(dataView.getUint8(i));\n                }\n\n                return bytes;\n              }\n\n              // Convert the list of bytes to a string.\n              function bytesToString(bytes) {\n                var s = '';\n                for (var i = 0; i < bytes.length; i += 1) {\n                  s += String.fromCharCode(bytes[i]);\n                }\n\n                return s;\n              }\n\n              var typeOffsets = {\n                byte: 1,\n                uShort: 2,\n                short: 2,\n                uLong: 4,\n                fixed: 4,\n                longDateTime: 8,\n                tag: 4\n              };\n\n              // A stateful parser that changes the offset whenever a value is retrieved.\n              // The data is a DataView.\n              function Parser(data, offset) {\n                this.data = data;\n                this.offset = offset;\n                this.relativeOffset = 0;\n              }\n\n              Parser.prototype.parseByte = function() {\n                var v = this.data.getUint8(this.offset + this.relativeOffset);\n                this.relativeOffset += 1;\n                return v;\n              };\n\n              Parser.prototype.parseChar = function() {\n                var v = this.data.getInt8(this.offset + this.relativeOffset);\n                this.relativeOffset += 1;\n                return v;\n              };\n\n              Parser.prototype.parseCard8 = Parser.prototype.parseByte;\n\n              Parser.prototype.parseUShort = function() {\n                var v = this.data.getUint16(this.offset + this.relativeOffset);\n                this.relativeOffset += 2;\n                return v;\n              };\n\n              Parser.prototype.parseCard16 = Parser.prototype.parseUShort;\n              Parser.prototype.parseSID = Parser.prototype.parseUShort;\n              Parser.prototype.parseOffset16 = Parser.prototype.parseUShort;\n\n              Parser.prototype.parseShort = function() {\n                var v = this.data.getInt16(this.offset + this.relativeOffset);\n                this.relativeOffset += 2;\n                return v;\n              };\n\n              Parser.prototype.parseF2Dot14 = function() {\n                var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;\n                this.relativeOffset += 2;\n                return v;\n              };\n\n              Parser.prototype.parseULong = function() {\n                var v = getULong(this.data, this.offset + this.relativeOffset);\n                this.relativeOffset += 4;\n                return v;\n              };\n\n              Parser.prototype.parseOffset32 = Parser.prototype.parseULong;\n\n              Parser.prototype.parseFixed = function() {\n                var v = getFixed(this.data, this.offset + this.relativeOffset);\n                this.relativeOffset += 4;\n                return v;\n              };\n\n              Parser.prototype.parseString = function(length) {\n                var dataView = this.data;\n                var offset = this.offset + this.relativeOffset;\n                var string = '';\n                this.relativeOffset += length;\n                for (var i = 0; i < length; i++) {\n                  string += String.fromCharCode(dataView.getUint8(offset + i));\n                }\n\n                return string;\n              };\n\n              Parser.prototype.parseTag = function() {\n                return this.parseString(4);\n              };\n\n              // LONGDATETIME is a 64-bit integer.\n              // JavaScript and unix timestamps traditionally use 32 bits, so we\n              // only take the last 32 bits.\n              // + Since until 2038 those bits will be filled by zeros we can ignore them.\n              Parser.prototype.parseLongDateTime = function() {\n                var v = getULong(this.data, this.offset + this.relativeOffset + 4);\n                // Subtract seconds between 01/01/1904 and 01/01/1970\n                // to convert Apple Mac timestamp to Standard Unix timestamp\n                v -= 2082844800;\n                this.relativeOffset += 8;\n                return v;\n              };\n\n              Parser.prototype.parseVersion = function(minorBase) {\n                var major = getUShort(this.data, this.offset + this.relativeOffset);\n\n                // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1\n                // Default returns the correct number if minor = 0xN000 where N is 0-9\n                // Set minorBase to 1 for tables that use minor = N where N is 0-9\n                var minor = getUShort(this.data, this.offset + this.relativeOffset + 2);\n                this.relativeOffset += 4;\n                if (minorBase === undefined) {\n                  minorBase = 0x1000;\n                }\n                return major + minor / minorBase / 10;\n              };\n\n              Parser.prototype.skip = function(type, amount) {\n                if (amount === undefined) {\n                  amount = 1;\n                }\n\n                this.relativeOffset += typeOffsets[type] * amount;\n              };\n\n              ///// Parsing lists and records ///////////////////////////////\n\n              // Parse a list of 32 bit unsigned integers.\n              Parser.prototype.parseULongList = function(count) {\n                if (count === undefined) {\n                  count = this.parseULong();\n                }\n                var offsets = new Array(count);\n                var dataView = this.data;\n                var offset = this.offset + this.relativeOffset;\n                for (var i = 0; i < count; i++) {\n                  offsets[i] = dataView.getUint32(offset);\n                  offset += 4;\n                }\n\n                this.relativeOffset += count * 4;\n                return offsets;\n              };\n\n              // Parse a list of 16 bit unsigned integers. The length of the list can be read on the stream\n              // or provided as an argument.\n              Parser.prototype.parseOffset16List = Parser.prototype.parseUShortList = function(\n                count\n              ) {\n                if (count === undefined) {\n                  count = this.parseUShort();\n                }\n                var offsets = new Array(count);\n                var dataView = this.data;\n                var offset = this.offset + this.relativeOffset;\n                for (var i = 0; i < count; i++) {\n                  offsets[i] = dataView.getUint16(offset);\n                  offset += 2;\n                }\n\n                this.relativeOffset += count * 2;\n                return offsets;\n              };\n\n              // Parses a list of 16 bit signed integers.\n              Parser.prototype.parseShortList = function(count) {\n                var list = new Array(count);\n                var dataView = this.data;\n                var offset = this.offset + this.relativeOffset;\n                for (var i = 0; i < count; i++) {\n                  list[i] = dataView.getInt16(offset);\n                  offset += 2;\n                }\n\n                this.relativeOffset += count * 2;\n                return list;\n              };\n\n              // Parses a list of bytes.\n              Parser.prototype.parseByteList = function(count) {\n                var list = new Array(count);\n                var dataView = this.data;\n                var offset = this.offset + this.relativeOffset;\n                for (var i = 0; i < count; i++) {\n                  list[i] = dataView.getUint8(offset++);\n                }\n\n                this.relativeOffset += count;\n                return list;\n              };\n\n              /**\n               * Parse a list of items.\n               * Record count is optional, if omitted it is read from the stream.\n               * itemCallback is one of the Parser methods.\n               */\n              Parser.prototype.parseList = function(count, itemCallback) {\n                var this$1 = this;\n\n                if (!itemCallback) {\n                  itemCallback = count;\n                  count = this.parseUShort();\n                }\n                var list = new Array(count);\n                for (var i = 0; i < count; i++) {\n                  list[i] = itemCallback.call(this$1);\n                }\n                return list;\n              };\n\n              Parser.prototype.parseList32 = function(count, itemCallback) {\n                var this$1 = this;\n\n                if (!itemCallback) {\n                  itemCallback = count;\n                  count = this.parseULong();\n                }\n                var list = new Array(count);\n                for (var i = 0; i < count; i++) {\n                  list[i] = itemCallback.call(this$1);\n                }\n                return list;\n              };\n\n              /**\n               * Parse a list of records.\n               * Record count is optional, if omitted it is read from the stream.\n               * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\n               */\n              Parser.prototype.parseRecordList = function(count, recordDescription) {\n                var this$1 = this;\n\n                // If the count argument is absent, read it in the stream.\n                if (!recordDescription) {\n                  recordDescription = count;\n                  count = this.parseUShort();\n                }\n                var records = new Array(count);\n                var fields = Object.keys(recordDescription);\n                for (var i = 0; i < count; i++) {\n                  var rec = {};\n                  for (var j = 0; j < fields.length; j++) {\n                    var fieldName = fields[j];\n                    var fieldType = recordDescription[fieldName];\n                    rec[fieldName] = fieldType.call(this$1);\n                  }\n                  records[i] = rec;\n                }\n                return records;\n              };\n\n              Parser.prototype.parseRecordList32 = function(count, recordDescription) {\n                var this$1 = this;\n\n                // If the count argument is absent, read it in the stream.\n                if (!recordDescription) {\n                  recordDescription = count;\n                  count = this.parseULong();\n                }\n                var records = new Array(count);\n                var fields = Object.keys(recordDescription);\n                for (var i = 0; i < count; i++) {\n                  var rec = {};\n                  for (var j = 0; j < fields.length; j++) {\n                    var fieldName = fields[j];\n                    var fieldType = recordDescription[fieldName];\n                    rec[fieldName] = fieldType.call(this$1);\n                  }\n                  records[i] = rec;\n                }\n                return records;\n              };\n\n              // Parse a data structure into an object\n              // Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\n              Parser.prototype.parseStruct = function(description) {\n                var this$1 = this;\n\n                if (typeof description === 'function') {\n                  return description.call(this);\n                } else {\n                  var fields = Object.keys(description);\n                  var struct = {};\n                  for (var j = 0; j < fields.length; j++) {\n                    var fieldName = fields[j];\n                    var fieldType = description[fieldName];\n                    struct[fieldName] = fieldType.call(this$1);\n                  }\n                  return struct;\n                }\n              };\n\n              /**\n               * Parse a GPOS valueRecord\n               * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\n               * valueFormat is optional, if omitted it is read from the stream.\n               */\n              Parser.prototype.parseValueRecord = function(valueFormat) {\n                if (valueFormat === undefined) {\n                  valueFormat = this.parseUShort();\n                }\n                if (valueFormat === 0) {\n                  // valueFormat2 in kerning pairs is most often 0\n                  // in this case return undefined instead of an empty object, to save space\n                  return;\n                }\n                var valueRecord = {};\n\n                if (valueFormat & 0x0001) {\n                  valueRecord.xPlacement = this.parseShort();\n                }\n                if (valueFormat & 0x0002) {\n                  valueRecord.yPlacement = this.parseShort();\n                }\n                if (valueFormat & 0x0004) {\n                  valueRecord.xAdvance = this.parseShort();\n                }\n                if (valueFormat & 0x0008) {\n                  valueRecord.yAdvance = this.parseShort();\n                }\n\n                // Device table (non-variable font) / VariationIndex table (variable font) not supported\n                // https://docs.microsoft.com/fr-fr/typography/opentype/spec/chapter2#devVarIdxTbls\n                if (valueFormat & 0x0010) {\n                  valueRecord.xPlaDevice = undefined;\n                  this.parseShort();\n                }\n                if (valueFormat & 0x0020) {\n                  valueRecord.yPlaDevice = undefined;\n                  this.parseShort();\n                }\n                if (valueFormat & 0x0040) {\n                  valueRecord.xAdvDevice = undefined;\n                  this.parseShort();\n                }\n                if (valueFormat & 0x0080) {\n                  valueRecord.yAdvDevice = undefined;\n                  this.parseShort();\n                }\n\n                return valueRecord;\n              };\n\n              /**\n               * Parse a list of GPOS valueRecords\n               * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\n               * valueFormat and valueCount are read from the stream.\n               */\n              Parser.prototype.parseValueRecordList = function() {\n                var this$1 = this;\n\n                var valueFormat = this.parseUShort();\n                var valueCount = this.parseUShort();\n                var values = new Array(valueCount);\n                for (var i = 0; i < valueCount; i++) {\n                  values[i] = this$1.parseValueRecord(valueFormat);\n                }\n                return values;\n              };\n\n              Parser.prototype.parsePointer = function(description) {\n                var structOffset = this.parseOffset16();\n                if (structOffset > 0) {\n                  // NULL offset => return undefined\n                  return new Parser(this.data, this.offset + structOffset).parseStruct(\n                    description\n                  );\n                }\n                return undefined;\n              };\n\n              Parser.prototype.parsePointer32 = function(description) {\n                var structOffset = this.parseOffset32();\n                if (structOffset > 0) {\n                  // NULL offset => return undefined\n                  return new Parser(this.data, this.offset + structOffset).parseStruct(\n                    description\n                  );\n                }\n                return undefined;\n              };\n\n              /**\n               * Parse a list of offsets to lists of 16-bit integers,\n               * or a list of offsets to lists of offsets to any kind of items.\n               * If itemCallback is not provided, a list of list of UShort is assumed.\n               * If provided, itemCallback is called on each item and must parse the item.\n               * See examples in tables/gsub.js\n               */\n              Parser.prototype.parseListOfLists = function(itemCallback) {\n                var this$1 = this;\n\n                var offsets = this.parseOffset16List();\n                var count = offsets.length;\n                var relativeOffset = this.relativeOffset;\n                var list = new Array(count);\n                for (var i = 0; i < count; i++) {\n                  var start = offsets[i];\n                  if (start === 0) {\n                    // NULL offset\n                    // Add i as owned property to list. Convenient with assert.\n                    list[i] = undefined;\n                    continue;\n                  }\n                  this$1.relativeOffset = start;\n                  if (itemCallback) {\n                    var subOffsets = this$1.parseOffset16List();\n                    var subList = new Array(subOffsets.length);\n                    for (var j = 0; j < subOffsets.length; j++) {\n                      this$1.relativeOffset = start + subOffsets[j];\n                      subList[j] = itemCallback.call(this$1);\n                    }\n                    list[i] = subList;\n                  } else {\n                    list[i] = this$1.parseUShortList();\n                  }\n                }\n                this.relativeOffset = relativeOffset;\n                return list;\n              };\n\n              ///// Complex tables parsing //////////////////////////////////\n\n              // Parse a coverage table in a GSUB, GPOS or GDEF table.\n              // https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n              // parser.offset must point to the start of the table containing the coverage.\n              Parser.prototype.parseCoverage = function() {\n                var this$1 = this;\n\n                var startOffset = this.offset + this.relativeOffset;\n                var format = this.parseUShort();\n                var count = this.parseUShort();\n                if (format === 1) {\n                  return {\n                    format: 1,\n                    glyphs: this.parseUShortList(count)\n                  };\n                } else if (format === 2) {\n                  var ranges = new Array(count);\n                  for (var i = 0; i < count; i++) {\n                    ranges[i] = {\n                      start: this$1.parseUShort(),\n                      end: this$1.parseUShort(),\n                      index: this$1.parseUShort()\n                    };\n                  }\n                  return {\n                    format: 2,\n                    ranges: ranges\n                  };\n                }\n                throw new Error(\n                  '0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.'\n                );\n              };\n\n              // Parse a Class Definition Table in a GSUB, GPOS or GDEF table.\n              // https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n              Parser.prototype.parseClassDef = function() {\n                var startOffset = this.offset + this.relativeOffset;\n                var format = this.parseUShort();\n                if (format === 1) {\n                  return {\n                    format: 1,\n                    startGlyph: this.parseUShort(),\n                    classes: this.parseUShortList()\n                  };\n                } else if (format === 2) {\n                  return {\n                    format: 2,\n                    ranges: this.parseRecordList({\n                      start: Parser.uShort,\n                      end: Parser.uShort,\n                      classId: Parser.uShort\n                    })\n                  };\n                }\n                throw new Error(\n                  '0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.'\n                );\n              };\n\n              ///// Static methods ///////////////////////////////////\n              // These convenience methods can be used as callbacks and should be called with \"this\" context set to a Parser instance.\n\n              Parser.list = function(count, itemCallback) {\n                return function() {\n                  return this.parseList(count, itemCallback);\n                };\n              };\n\n              Parser.list32 = function(count, itemCallback) {\n                return function() {\n                  return this.parseList32(count, itemCallback);\n                };\n              };\n\n              Parser.recordList = function(count, recordDescription) {\n                return function() {\n                  return this.parseRecordList(count, recordDescription);\n                };\n              };\n\n              Parser.recordList32 = function(count, recordDescription) {\n                return function() {\n                  return this.parseRecordList32(count, recordDescription);\n                };\n              };\n\n              Parser.pointer = function(description) {\n                return function() {\n                  return this.parsePointer(description);\n                };\n              };\n\n              Parser.pointer32 = function(description) {\n                return function() {\n                  return this.parsePointer32(description);\n                };\n              };\n\n              Parser.tag = Parser.prototype.parseTag;\n              Parser.byte = Parser.prototype.parseByte;\n              Parser.uShort = Parser.offset16 = Parser.prototype.parseUShort;\n              Parser.uShortList = Parser.prototype.parseUShortList;\n              Parser.uLong = Parser.offset32 = Parser.prototype.parseULong;\n              Parser.uLongList = Parser.prototype.parseULongList;\n              Parser.struct = Parser.prototype.parseStruct;\n              Parser.coverage = Parser.prototype.parseCoverage;\n              Parser.classDef = Parser.prototype.parseClassDef;\n\n              ///// Script, Feature, Lookup lists ///////////////////////////////////////////////\n              // https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n\n              var langSysTable = {\n                reserved: Parser.uShort,\n                reqFeatureIndex: Parser.uShort,\n                featureIndexes: Parser.uShortList\n              };\n\n              Parser.prototype.parseScriptList = function() {\n                return (\n                  this.parsePointer(\n                    Parser.recordList({\n                      tag: Parser.tag,\n                      script: Parser.pointer({\n                        defaultLangSys: Parser.pointer(langSysTable),\n                        langSysRecords: Parser.recordList({\n                          tag: Parser.tag,\n                          langSys: Parser.pointer(langSysTable)\n                        })\n                      })\n                    })\n                  ) || []\n                );\n              };\n\n              Parser.prototype.parseFeatureList = function() {\n                return (\n                  this.parsePointer(\n                    Parser.recordList({\n                      tag: Parser.tag,\n                      feature: Parser.pointer({\n                        featureParams: Parser.offset16,\n                        lookupListIndexes: Parser.uShortList\n                      })\n                    })\n                  ) || []\n                );\n              };\n\n              Parser.prototype.parseLookupList = function(lookupTableParsers) {\n                return (\n                  this.parsePointer(\n                    Parser.list(\n                      Parser.pointer(function() {\n                        var lookupType = this.parseUShort();\n                        check.argument(\n                          1 <= lookupType && lookupType <= 9,\n                          'GPOS/GSUB lookup type ' + lookupType + ' unknown.'\n                        );\n                        var lookupFlag = this.parseUShort();\n                        var useMarkFilteringSet = lookupFlag & 0x10;\n                        return {\n                          lookupType: lookupType,\n                          lookupFlag: lookupFlag,\n                          subtables: this.parseList(\n                            Parser.pointer(lookupTableParsers[lookupType])\n                          ),\n                          markFilteringSet: useMarkFilteringSet\n                            ? this.parseUShort()\n                            : undefined\n                        };\n                      })\n                    )\n                  ) || []\n                );\n              };\n\n              Parser.prototype.parseFeatureVariationsList = function() {\n                return (\n                  this.parsePointer32(function() {\n                    var majorVersion = this.parseUShort();\n                    var minorVersion = this.parseUShort();\n                    check.argument(\n                      majorVersion === 1 && minorVersion < 1,\n                      'GPOS/GSUB feature variations table unknown.'\n                    );\n                    var featureVariations = this.parseRecordList32({\n                      conditionSetOffset: Parser.offset32,\n                      featureTableSubstitutionOffset: Parser.offset32\n                    });\n                    return featureVariations;\n                  }) || []\n                );\n              };\n\n              var parse = {\n                getByte: getByte,\n                getCard8: getByte,\n                getUShort: getUShort,\n                getCard16: getUShort,\n                getShort: getShort,\n                getULong: getULong,\n                getFixed: getFixed,\n                getTag: getTag,\n                getOffset: getOffset,\n                getBytes: getBytes,\n                bytesToString: bytesToString,\n                Parser: Parser\n              };\n\n              // The `cmap` table stores the mappings from characters to glyphs.\n\n              function parseCmapTableFormat12(cmap, p) {\n                //Skip reserved.\n                p.parseUShort();\n\n                // Length in bytes of the sub-tables.\n                cmap.length = p.parseULong();\n                cmap.language = p.parseULong();\n\n                var groupCount;\n                cmap.groupCount = groupCount = p.parseULong();\n                cmap.glyphIndexMap = {};\n\n                for (var i = 0; i < groupCount; i += 1) {\n                  var startCharCode = p.parseULong();\n                  var endCharCode = p.parseULong();\n                  var startGlyphId = p.parseULong();\n\n                  for (var c = startCharCode; c <= endCharCode; c += 1) {\n                    cmap.glyphIndexMap[c] = startGlyphId;\n                    startGlyphId++;\n                  }\n                }\n              }\n\n              function parseCmapTableFormat4(cmap, p, data, start, offset) {\n                // Length in bytes of the sub-tables.\n                cmap.length = p.parseUShort();\n                cmap.language = p.parseUShort();\n\n                // segCount is stored x 2.\n                var segCount;\n                cmap.segCount = segCount = p.parseUShort() >> 1;\n\n                // Skip searchRange, entrySelector, rangeShift.\n                p.skip('uShort', 3);\n\n                // The \"unrolled\" mapping from character codes to glyph indices.\n                cmap.glyphIndexMap = {};\n                var endCountParser = new parse.Parser(data, start + offset + 14);\n                var startCountParser = new parse.Parser(\n                  data,\n                  start + offset + 16 + segCount * 2\n                );\n                var idDeltaParser = new parse.Parser(\n                  data,\n                  start + offset + 16 + segCount * 4\n                );\n                var idRangeOffsetParser = new parse.Parser(\n                  data,\n                  start + offset + 16 + segCount * 6\n                );\n                var glyphIndexOffset = start + offset + 16 + segCount * 8;\n                for (var i = 0; i < segCount - 1; i += 1) {\n                  var glyphIndex = void 0;\n                  var endCount = endCountParser.parseUShort();\n                  var startCount = startCountParser.parseUShort();\n                  var idDelta = idDeltaParser.parseShort();\n                  var idRangeOffset = idRangeOffsetParser.parseUShort();\n                  for (var c = startCount; c <= endCount; c += 1) {\n                    if (idRangeOffset !== 0) {\n                      // The idRangeOffset is relative to the current position in the idRangeOffset array.\n                      // Take the current offset in the idRangeOffset array.\n                      glyphIndexOffset =\n                        idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2;\n\n                      // Add the value of the idRangeOffset, which will move us into the glyphIndex array.\n                      glyphIndexOffset += idRangeOffset;\n\n                      // Then add the character index of the current segment, multiplied by 2 for USHORTs.\n                      glyphIndexOffset += (c - startCount) * 2;\n                      glyphIndex = parse.getUShort(data, glyphIndexOffset);\n                      if (glyphIndex !== 0) {\n                        glyphIndex = (glyphIndex + idDelta) & 0xffff;\n                      }\n                    } else {\n                      glyphIndex = (c + idDelta) & 0xffff;\n                    }\n\n                    cmap.glyphIndexMap[c] = glyphIndex;\n                  }\n                }\n              }\n\n              // Parse the `cmap` table. This table stores the mappings from characters to glyphs.\n              // There are many available formats, but we only support the Windows format 4 and 12.\n              // This function returns a `CmapEncoding` object or null if no supported format could be found.\n              function parseCmapTable(data, start) {\n                var cmap = {};\n                cmap.version = parse.getUShort(data, start);\n                check.argument(cmap.version === 0, 'cmap table version should be 0.');\n\n                // The cmap table can contain many sub-tables, each with their own format.\n                // We're only interested in a \"platform 0\" (Unicode format) and \"platform 3\" (Windows format) table.\n                cmap.numTables = parse.getUShort(data, start + 2);\n                var offset = -1;\n                for (var i = cmap.numTables - 1; i >= 0; i -= 1) {\n                  var platformId = parse.getUShort(data, start + 4 + i * 8);\n                  var encodingId = parse.getUShort(data, start + 4 + i * 8 + 2);\n                  if (\n                    (platformId === 3 &&\n                      (encodingId === 0 || encodingId === 1 || encodingId === 10)) ||\n                    (platformId === 0 &&\n                      (encodingId === 0 ||\n                        encodingId === 1 ||\n                        encodingId === 2 ||\n                        encodingId === 3 ||\n                        encodingId === 4))\n                  ) {\n                    offset = parse.getULong(data, start + 4 + i * 8 + 4);\n                    break;\n                  }\n                }\n\n                if (offset === -1) {\n                  // There is no cmap table in the font that we support.\n                  throw new Error('No valid cmap sub-tables found.');\n                }\n\n                var p = new parse.Parser(data, start + offset);\n                cmap.format = p.parseUShort();\n\n                if (cmap.format === 12) {\n                  parseCmapTableFormat12(cmap, p);\n                } else if (cmap.format === 4) {\n                  parseCmapTableFormat4(cmap, p, data, start, offset);\n                } else {\n                  throw new Error(\n                    'Only format 4 and 12 cmap tables are supported (found format ' +\n                      cmap.format +\n                      ').'\n                  );\n                }\n\n                return cmap;\n              }\n\n              function addSegment(t, code, glyphIndex) {\n                t.segments.push({\n                  end: code,\n                  start: code,\n                  delta: -(code - glyphIndex),\n                  offset: 0,\n                  glyphIndex: glyphIndex\n                });\n              }\n\n              function addTerminatorSegment(t) {\n                t.segments.push({\n                  end: 0xffff,\n                  start: 0xffff,\n                  delta: 1,\n                  offset: 0\n                });\n              }\n\n              // Make cmap table, format 4 by default, 12 if needed only\n              function makeCmapTable(glyphs) {\n                // Plan 0 is the base Unicode Plan but emojis, for example are on another plan, and needs cmap 12 format (with 32bit)\n                var isPlan0Only = true;\n                var i;\n\n                // Check if we need to add cmap format 12 or if format 4 only is fine\n                for (i = glyphs.length - 1; i > 0; i -= 1) {\n                  var g = glyphs.get(i);\n                  if (g.unicode > 65535) {\n                    console.log('Adding CMAP format 12 (needed!)');\n                    isPlan0Only = false;\n                    break;\n                  }\n                }\n\n                var cmapTable = [\n                  { name: 'version', type: 'USHORT', value: 0 },\n                  { name: 'numTables', type: 'USHORT', value: isPlan0Only ? 1 : 2 },\n\n                  // CMAP 4 header\n                  { name: 'platformID', type: 'USHORT', value: 3 },\n                  { name: 'encodingID', type: 'USHORT', value: 1 },\n                  { name: 'offset', type: 'ULONG', value: isPlan0Only ? 12 : 12 + 8 }\n                ];\n\n                if (!isPlan0Only) {\n                  cmapTable = cmapTable.concat([\n                    // CMAP 12 header\n                    { name: 'cmap12PlatformID', type: 'USHORT', value: 3 }, // We encode only for PlatformID = 3 (Windows) because it is supported everywhere\n                    { name: 'cmap12EncodingID', type: 'USHORT', value: 10 },\n                    { name: 'cmap12Offset', type: 'ULONG', value: 0 }\n                  ]);\n                }\n\n                cmapTable = cmapTable.concat([\n                  // CMAP 4 Subtable\n                  { name: 'format', type: 'USHORT', value: 4 },\n                  { name: 'cmap4Length', type: 'USHORT', value: 0 },\n                  { name: 'language', type: 'USHORT', value: 0 },\n                  { name: 'segCountX2', type: 'USHORT', value: 0 },\n                  { name: 'searchRange', type: 'USHORT', value: 0 },\n                  { name: 'entrySelector', type: 'USHORT', value: 0 },\n                  { name: 'rangeShift', type: 'USHORT', value: 0 }\n                ]);\n\n                var t = new table.Table('cmap', cmapTable);\n\n                t.segments = [];\n                for (i = 0; i < glyphs.length; i += 1) {\n                  var glyph = glyphs.get(i);\n                  for (var j = 0; j < glyph.unicodes.length; j += 1) {\n                    addSegment(t, glyph.unicodes[j], i);\n                  }\n\n                  t.segments = t.segments.sort(function(a, b) {\n                    return a.start - b.start;\n                  });\n                }\n\n                addTerminatorSegment(t);\n\n                var segCount = t.segments.length;\n                var segCountToRemove = 0;\n\n                // CMAP 4\n                // Set up parallel segment arrays.\n                var endCounts = [];\n                var startCounts = [];\n                var idDeltas = [];\n                var idRangeOffsets = [];\n                var glyphIds = [];\n\n                // CMAP 12\n                var cmap12Groups = [];\n\n                // Reminder this loop is not following the specification at 100%\n                // The specification -> find suites of characters and make a group\n                // Here we're doing one group for each letter\n                // Doing as the spec can save 8 times (or more) space\n                for (i = 0; i < segCount; i += 1) {\n                  var segment = t.segments[i];\n\n                  // CMAP 4\n                  if (segment.end <= 65535 && segment.start <= 65535) {\n                    endCounts = endCounts.concat({\n                      name: 'end_' + i,\n                      type: 'USHORT',\n                      value: segment.end\n                    });\n                    startCounts = startCounts.concat({\n                      name: 'start_' + i,\n                      type: 'USHORT',\n                      value: segment.start\n                    });\n                    idDeltas = idDeltas.concat({\n                      name: 'idDelta_' + i,\n                      type: 'SHORT',\n                      value: segment.delta\n                    });\n                    idRangeOffsets = idRangeOffsets.concat({\n                      name: 'idRangeOffset_' + i,\n                      type: 'USHORT',\n                      value: segment.offset\n                    });\n                    if (segment.glyphId !== undefined) {\n                      glyphIds = glyphIds.concat({\n                        name: 'glyph_' + i,\n                        type: 'USHORT',\n                        value: segment.glyphId\n                      });\n                    }\n                  } else {\n                    // Skip Unicode > 65535 (16bit unsigned max) for CMAP 4, will be added in CMAP 12\n                    segCountToRemove += 1;\n                  }\n\n                  // CMAP 12\n                  // Skip Terminator Segment\n                  if (!isPlan0Only && segment.glyphIndex !== undefined) {\n                    cmap12Groups = cmap12Groups.concat({\n                      name: 'cmap12Start_' + i,\n                      type: 'ULONG',\n                      value: segment.start\n                    });\n                    cmap12Groups = cmap12Groups.concat({\n                      name: 'cmap12End_' + i,\n                      type: 'ULONG',\n                      value: segment.end\n                    });\n                    cmap12Groups = cmap12Groups.concat({\n                      name: 'cmap12Glyph_' + i,\n                      type: 'ULONG',\n                      value: segment.glyphIndex\n                    });\n                  }\n                }\n\n                // CMAP 4 Subtable\n                t.segCountX2 = (segCount - segCountToRemove) * 2;\n                t.searchRange =\n                  Math.pow(\n                    2,\n                    Math.floor(Math.log(segCount - segCountToRemove) / Math.log(2))\n                  ) * 2;\n                t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);\n                t.rangeShift = t.segCountX2 - t.searchRange;\n\n                t.fields = t.fields.concat(endCounts);\n                t.fields.push({ name: 'reservedPad', type: 'USHORT', value: 0 });\n                t.fields = t.fields.concat(startCounts);\n                t.fields = t.fields.concat(idDeltas);\n                t.fields = t.fields.concat(idRangeOffsets);\n                t.fields = t.fields.concat(glyphIds);\n\n                t.cmap4Length =\n                  14 + // Subtable header\n                  endCounts.length * 2 +\n                  2 + // reservedPad\n                  startCounts.length * 2 +\n                  idDeltas.length * 2 +\n                  idRangeOffsets.length * 2 +\n                  glyphIds.length * 2;\n\n                if (!isPlan0Only) {\n                  // CMAP 12 Subtable\n                  var cmap12Length =\n                    16 + // Subtable header\n                    cmap12Groups.length * 4;\n\n                  t.cmap12Offset = 12 + 2 * 2 + 4 + t.cmap4Length;\n                  t.fields = t.fields.concat([\n                    { name: 'cmap12Format', type: 'USHORT', value: 12 },\n                    { name: 'cmap12Reserved', type: 'USHORT', value: 0 },\n                    { name: 'cmap12Length', type: 'ULONG', value: cmap12Length },\n                    { name: 'cmap12Language', type: 'ULONG', value: 0 },\n                    { name: 'cmap12nGroups', type: 'ULONG', value: cmap12Groups.length / 3 }\n                  ]);\n\n                  t.fields = t.fields.concat(cmap12Groups);\n                }\n\n                return t;\n              }\n\n              var cmap = { parse: parseCmapTable, make: makeCmapTable };\n\n              // Glyph encoding\n\n              var cffStandardStrings = [\n                '.notdef',\n                'space',\n                'exclam',\n                'quotedbl',\n                'numbersign',\n                'dollar',\n                'percent',\n                'ampersand',\n                'quoteright',\n                'parenleft',\n                'parenright',\n                'asterisk',\n                'plus',\n                'comma',\n                'hyphen',\n                'period',\n                'slash',\n                'zero',\n                'one',\n                'two',\n                'three',\n                'four',\n                'five',\n                'six',\n                'seven',\n                'eight',\n                'nine',\n                'colon',\n                'semicolon',\n                'less',\n                'equal',\n                'greater',\n                'question',\n                'at',\n                'A',\n                'B',\n                'C',\n                'D',\n                'E',\n                'F',\n                'G',\n                'H',\n                'I',\n                'J',\n                'K',\n                'L',\n                'M',\n                'N',\n                'O',\n                'P',\n                'Q',\n                'R',\n                'S',\n                'T',\n                'U',\n                'V',\n                'W',\n                'X',\n                'Y',\n                'Z',\n                'bracketleft',\n                'backslash',\n                'bracketright',\n                'asciicircum',\n                'underscore',\n                'quoteleft',\n                'a',\n                'b',\n                'c',\n                'd',\n                'e',\n                'f',\n                'g',\n                'h',\n                'i',\n                'j',\n                'k',\n                'l',\n                'm',\n                'n',\n                'o',\n                'p',\n                'q',\n                'r',\n                's',\n                't',\n                'u',\n                'v',\n                'w',\n                'x',\n                'y',\n                'z',\n                'braceleft',\n                'bar',\n                'braceright',\n                'asciitilde',\n                'exclamdown',\n                'cent',\n                'sterling',\n                'fraction',\n                'yen',\n                'florin',\n                'section',\n                'currency',\n                'quotesingle',\n                'quotedblleft',\n                'guillemotleft',\n                'guilsinglleft',\n                'guilsinglright',\n                'fi',\n                'fl',\n                'endash',\n                'dagger',\n                'daggerdbl',\n                'periodcentered',\n                'paragraph',\n                'bullet',\n                'quotesinglbase',\n                'quotedblbase',\n                'quotedblright',\n                'guillemotright',\n                'ellipsis',\n                'perthousand',\n                'questiondown',\n                'grave',\n                'acute',\n                'circumflex',\n                'tilde',\n                'macron',\n                'breve',\n                'dotaccent',\n                'dieresis',\n                'ring',\n                'cedilla',\n                'hungarumlaut',\n                'ogonek',\n                'caron',\n                'emdash',\n                'AE',\n                'ordfeminine',\n                'Lslash',\n                'Oslash',\n                'OE',\n                'ordmasculine',\n                'ae',\n                'dotlessi',\n                'lslash',\n                'oslash',\n                'oe',\n                'germandbls',\n                'onesuperior',\n                'logicalnot',\n                'mu',\n                'trademark',\n                'Eth',\n                'onehalf',\n                'plusminus',\n                'Thorn',\n                'onequarter',\n                'divide',\n                'brokenbar',\n                'degree',\n                'thorn',\n                'threequarters',\n                'twosuperior',\n                'registered',\n                'minus',\n                'eth',\n                'multiply',\n                'threesuperior',\n                'copyright',\n                'Aacute',\n                'Acircumflex',\n                'Adieresis',\n                'Agrave',\n                'Aring',\n                'Atilde',\n                'Ccedilla',\n                'Eacute',\n                'Ecircumflex',\n                'Edieresis',\n                'Egrave',\n                'Iacute',\n                'Icircumflex',\n                'Idieresis',\n                'Igrave',\n                'Ntilde',\n                'Oacute',\n                'Ocircumflex',\n                'Odieresis',\n                'Ograve',\n                'Otilde',\n                'Scaron',\n                'Uacute',\n                'Ucircumflex',\n                'Udieresis',\n                'Ugrave',\n                'Yacute',\n                'Ydieresis',\n                'Zcaron',\n                'aacute',\n                'acircumflex',\n                'adieresis',\n                'agrave',\n                'aring',\n                'atilde',\n                'ccedilla',\n                'eacute',\n                'ecircumflex',\n                'edieresis',\n                'egrave',\n                'iacute',\n                'icircumflex',\n                'idieresis',\n                'igrave',\n                'ntilde',\n                'oacute',\n                'ocircumflex',\n                'odieresis',\n                'ograve',\n                'otilde',\n                'scaron',\n                'uacute',\n                'ucircumflex',\n                'udieresis',\n                'ugrave',\n                'yacute',\n                'ydieresis',\n                'zcaron',\n                'exclamsmall',\n                'Hungarumlautsmall',\n                'dollaroldstyle',\n                'dollarsuperior',\n                'ampersandsmall',\n                'Acutesmall',\n                'parenleftsuperior',\n                'parenrightsuperior',\n                '266 ff',\n                'onedotenleader',\n                'zerooldstyle',\n                'oneoldstyle',\n                'twooldstyle',\n                'threeoldstyle',\n                'fouroldstyle',\n                'fiveoldstyle',\n                'sixoldstyle',\n                'sevenoldstyle',\n                'eightoldstyle',\n                'nineoldstyle',\n                'commasuperior',\n                'threequartersemdash',\n                'periodsuperior',\n                'questionsmall',\n                'asuperior',\n                'bsuperior',\n                'centsuperior',\n                'dsuperior',\n                'esuperior',\n                'isuperior',\n                'lsuperior',\n                'msuperior',\n                'nsuperior',\n                'osuperior',\n                'rsuperior',\n                'ssuperior',\n                'tsuperior',\n                'ff',\n                'ffi',\n                'ffl',\n                'parenleftinferior',\n                'parenrightinferior',\n                'Circumflexsmall',\n                'hyphensuperior',\n                'Gravesmall',\n                'Asmall',\n                'Bsmall',\n                'Csmall',\n                'Dsmall',\n                'Esmall',\n                'Fsmall',\n                'Gsmall',\n                'Hsmall',\n                'Ismall',\n                'Jsmall',\n                'Ksmall',\n                'Lsmall',\n                'Msmall',\n                'Nsmall',\n                'Osmall',\n                'Psmall',\n                'Qsmall',\n                'Rsmall',\n                'Ssmall',\n                'Tsmall',\n                'Usmall',\n                'Vsmall',\n                'Wsmall',\n                'Xsmall',\n                'Ysmall',\n                'Zsmall',\n                'colonmonetary',\n                'onefitted',\n                'rupiah',\n                'Tildesmall',\n                'exclamdownsmall',\n                'centoldstyle',\n                'Lslashsmall',\n                'Scaronsmall',\n                'Zcaronsmall',\n                'Dieresissmall',\n                'Brevesmall',\n                'Caronsmall',\n                'Dotaccentsmall',\n                'Macronsmall',\n                'figuredash',\n                'hypheninferior',\n                'Ogoneksmall',\n                'Ringsmall',\n                'Cedillasmall',\n                'questiondownsmall',\n                'oneeighth',\n                'threeeighths',\n                'fiveeighths',\n                'seveneighths',\n                'onethird',\n                'twothirds',\n                'zerosuperior',\n                'foursuperior',\n                'fivesuperior',\n                'sixsuperior',\n                'sevensuperior',\n                'eightsuperior',\n                'ninesuperior',\n                'zeroinferior',\n                'oneinferior',\n                'twoinferior',\n                'threeinferior',\n                'fourinferior',\n                'fiveinferior',\n                'sixinferior',\n                'seveninferior',\n                'eightinferior',\n                'nineinferior',\n                'centinferior',\n                'dollarinferior',\n                'periodinferior',\n                'commainferior',\n                'Agravesmall',\n                'Aacutesmall',\n                'Acircumflexsmall',\n                'Atildesmall',\n                'Adieresissmall',\n                'Aringsmall',\n                'AEsmall',\n                'Ccedillasmall',\n                'Egravesmall',\n                'Eacutesmall',\n                'Ecircumflexsmall',\n                'Edieresissmall',\n                'Igravesmall',\n                'Iacutesmall',\n                'Icircumflexsmall',\n                'Idieresissmall',\n                'Ethsmall',\n                'Ntildesmall',\n                'Ogravesmall',\n                'Oacutesmall',\n                'Ocircumflexsmall',\n                'Otildesmall',\n                'Odieresissmall',\n                'OEsmall',\n                'Oslashsmall',\n                'Ugravesmall',\n                'Uacutesmall',\n                'Ucircumflexsmall',\n                'Udieresissmall',\n                'Yacutesmall',\n                'Thornsmall',\n                'Ydieresissmall',\n                '001.000',\n                '001.001',\n                '001.002',\n                '001.003',\n                'Black',\n                'Bold',\n                'Book',\n                'Light',\n                'Medium',\n                'Regular',\n                'Roman',\n                'Semibold'\n              ];\n\n              var cffStandardEncoding = [\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                'space',\n                'exclam',\n                'quotedbl',\n                'numbersign',\n                'dollar',\n                'percent',\n                'ampersand',\n                'quoteright',\n                'parenleft',\n                'parenright',\n                'asterisk',\n                'plus',\n                'comma',\n                'hyphen',\n                'period',\n                'slash',\n                'zero',\n                'one',\n                'two',\n                'three',\n                'four',\n                'five',\n                'six',\n                'seven',\n                'eight',\n                'nine',\n                'colon',\n                'semicolon',\n                'less',\n                'equal',\n                'greater',\n                'question',\n                'at',\n                'A',\n                'B',\n                'C',\n                'D',\n                'E',\n                'F',\n                'G',\n                'H',\n                'I',\n                'J',\n                'K',\n                'L',\n                'M',\n                'N',\n                'O',\n                'P',\n                'Q',\n                'R',\n                'S',\n                'T',\n                'U',\n                'V',\n                'W',\n                'X',\n                'Y',\n                'Z',\n                'bracketleft',\n                'backslash',\n                'bracketright',\n                'asciicircum',\n                'underscore',\n                'quoteleft',\n                'a',\n                'b',\n                'c',\n                'd',\n                'e',\n                'f',\n                'g',\n                'h',\n                'i',\n                'j',\n                'k',\n                'l',\n                'm',\n                'n',\n                'o',\n                'p',\n                'q',\n                'r',\n                's',\n                't',\n                'u',\n                'v',\n                'w',\n                'x',\n                'y',\n                'z',\n                'braceleft',\n                'bar',\n                'braceright',\n                'asciitilde',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                'exclamdown',\n                'cent',\n                'sterling',\n                'fraction',\n                'yen',\n                'florin',\n                'section',\n                'currency',\n                'quotesingle',\n                'quotedblleft',\n                'guillemotleft',\n                'guilsinglleft',\n                'guilsinglright',\n                'fi',\n                'fl',\n                '',\n                'endash',\n                'dagger',\n                'daggerdbl',\n                'periodcentered',\n                '',\n                'paragraph',\n                'bullet',\n                'quotesinglbase',\n                'quotedblbase',\n                'quotedblright',\n                'guillemotright',\n                'ellipsis',\n                'perthousand',\n                '',\n                'questiondown',\n                '',\n                'grave',\n                'acute',\n                'circumflex',\n                'tilde',\n                'macron',\n                'breve',\n                'dotaccent',\n                'dieresis',\n                '',\n                'ring',\n                'cedilla',\n                '',\n                'hungarumlaut',\n                'ogonek',\n                'caron',\n                'emdash',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                'AE',\n                '',\n                'ordfeminine',\n                '',\n                '',\n                '',\n                '',\n                'Lslash',\n                'Oslash',\n                'OE',\n                'ordmasculine',\n                '',\n                '',\n                '',\n                '',\n                '',\n                'ae',\n                '',\n                '',\n                '',\n                'dotlessi',\n                '',\n                '',\n                'lslash',\n                'oslash',\n                'oe',\n                'germandbls'\n              ];\n\n              var cffExpertEncoding = [\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                'space',\n                'exclamsmall',\n                'Hungarumlautsmall',\n                '',\n                'dollaroldstyle',\n                'dollarsuperior',\n                'ampersandsmall',\n                'Acutesmall',\n                'parenleftsuperior',\n                'parenrightsuperior',\n                'twodotenleader',\n                'onedotenleader',\n                'comma',\n                'hyphen',\n                'period',\n                'fraction',\n                'zerooldstyle',\n                'oneoldstyle',\n                'twooldstyle',\n                'threeoldstyle',\n                'fouroldstyle',\n                'fiveoldstyle',\n                'sixoldstyle',\n                'sevenoldstyle',\n                'eightoldstyle',\n                'nineoldstyle',\n                'colon',\n                'semicolon',\n                'commasuperior',\n                'threequartersemdash',\n                'periodsuperior',\n                'questionsmall',\n                '',\n                'asuperior',\n                'bsuperior',\n                'centsuperior',\n                'dsuperior',\n                'esuperior',\n                '',\n                '',\n                'isuperior',\n                '',\n                '',\n                'lsuperior',\n                'msuperior',\n                'nsuperior',\n                'osuperior',\n                '',\n                '',\n                'rsuperior',\n                'ssuperior',\n                'tsuperior',\n                '',\n                'ff',\n                'fi',\n                'fl',\n                'ffi',\n                'ffl',\n                'parenleftinferior',\n                '',\n                'parenrightinferior',\n                'Circumflexsmall',\n                'hyphensuperior',\n                'Gravesmall',\n                'Asmall',\n                'Bsmall',\n                'Csmall',\n                'Dsmall',\n                'Esmall',\n                'Fsmall',\n                'Gsmall',\n                'Hsmall',\n                'Ismall',\n                'Jsmall',\n                'Ksmall',\n                'Lsmall',\n                'Msmall',\n                'Nsmall',\n                'Osmall',\n                'Psmall',\n                'Qsmall',\n                'Rsmall',\n                'Ssmall',\n                'Tsmall',\n                'Usmall',\n                'Vsmall',\n                'Wsmall',\n                'Xsmall',\n                'Ysmall',\n                'Zsmall',\n                'colonmonetary',\n                'onefitted',\n                'rupiah',\n                'Tildesmall',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                'exclamdownsmall',\n                'centoldstyle',\n                'Lslashsmall',\n                '',\n                '',\n                'Scaronsmall',\n                'Zcaronsmall',\n                'Dieresissmall',\n                'Brevesmall',\n                'Caronsmall',\n                '',\n                'Dotaccentsmall',\n                '',\n                '',\n                'Macronsmall',\n                '',\n                '',\n                'figuredash',\n                'hypheninferior',\n                '',\n                '',\n                'Ogoneksmall',\n                'Ringsmall',\n                'Cedillasmall',\n                '',\n                '',\n                '',\n                'onequarter',\n                'onehalf',\n                'threequarters',\n                'questiondownsmall',\n                'oneeighth',\n                'threeeighths',\n                'fiveeighths',\n                'seveneighths',\n                'onethird',\n                'twothirds',\n                '',\n                '',\n                'zerosuperior',\n                'onesuperior',\n                'twosuperior',\n                'threesuperior',\n                'foursuperior',\n                'fivesuperior',\n                'sixsuperior',\n                'sevensuperior',\n                'eightsuperior',\n                'ninesuperior',\n                'zeroinferior',\n                'oneinferior',\n                'twoinferior',\n                'threeinferior',\n                'fourinferior',\n                'fiveinferior',\n                'sixinferior',\n                'seveninferior',\n                'eightinferior',\n                'nineinferior',\n                'centinferior',\n                'dollarinferior',\n                'periodinferior',\n                'commainferior',\n                'Agravesmall',\n                'Aacutesmall',\n                'Acircumflexsmall',\n                'Atildesmall',\n                'Adieresissmall',\n                'Aringsmall',\n                'AEsmall',\n                'Ccedillasmall',\n                'Egravesmall',\n                'Eacutesmall',\n                'Ecircumflexsmall',\n                'Edieresissmall',\n                'Igravesmall',\n                'Iacutesmall',\n                'Icircumflexsmall',\n                'Idieresissmall',\n                'Ethsmall',\n                'Ntildesmall',\n                'Ogravesmall',\n                'Oacutesmall',\n                'Ocircumflexsmall',\n                'Otildesmall',\n                'Odieresissmall',\n                'OEsmall',\n                'Oslashsmall',\n                'Ugravesmall',\n                'Uacutesmall',\n                'Ucircumflexsmall',\n                'Udieresissmall',\n                'Yacutesmall',\n                'Thornsmall',\n                'Ydieresissmall'\n              ];\n\n              var standardNames = [\n                '.notdef',\n                '.null',\n                'nonmarkingreturn',\n                'space',\n                'exclam',\n                'quotedbl',\n                'numbersign',\n                'dollar',\n                'percent',\n                'ampersand',\n                'quotesingle',\n                'parenleft',\n                'parenright',\n                'asterisk',\n                'plus',\n                'comma',\n                'hyphen',\n                'period',\n                'slash',\n                'zero',\n                'one',\n                'two',\n                'three',\n                'four',\n                'five',\n                'six',\n                'seven',\n                'eight',\n                'nine',\n                'colon',\n                'semicolon',\n                'less',\n                'equal',\n                'greater',\n                'question',\n                'at',\n                'A',\n                'B',\n                'C',\n                'D',\n                'E',\n                'F',\n                'G',\n                'H',\n                'I',\n                'J',\n                'K',\n                'L',\n                'M',\n                'N',\n                'O',\n                'P',\n                'Q',\n                'R',\n                'S',\n                'T',\n                'U',\n                'V',\n                'W',\n                'X',\n                'Y',\n                'Z',\n                'bracketleft',\n                'backslash',\n                'bracketright',\n                'asciicircum',\n                'underscore',\n                'grave',\n                'a',\n                'b',\n                'c',\n                'd',\n                'e',\n                'f',\n                'g',\n                'h',\n                'i',\n                'j',\n                'k',\n                'l',\n                'm',\n                'n',\n                'o',\n                'p',\n                'q',\n                'r',\n                's',\n                't',\n                'u',\n                'v',\n                'w',\n                'x',\n                'y',\n                'z',\n                'braceleft',\n                'bar',\n                'braceright',\n                'asciitilde',\n                'Adieresis',\n                'Aring',\n                'Ccedilla',\n                'Eacute',\n                'Ntilde',\n                'Odieresis',\n                'Udieresis',\n                'aacute',\n                'agrave',\n                'acircumflex',\n                'adieresis',\n                'atilde',\n                'aring',\n                'ccedilla',\n                'eacute',\n                'egrave',\n                'ecircumflex',\n                'edieresis',\n                'iacute',\n                'igrave',\n                'icircumflex',\n                'idieresis',\n                'ntilde',\n                'oacute',\n                'ograve',\n                'ocircumflex',\n                'odieresis',\n                'otilde',\n                'uacute',\n                'ugrave',\n                'ucircumflex',\n                'udieresis',\n                'dagger',\n                'degree',\n                'cent',\n                'sterling',\n                'section',\n                'bullet',\n                'paragraph',\n                'germandbls',\n                'registered',\n                'copyright',\n                'trademark',\n                'acute',\n                'dieresis',\n                'notequal',\n                'AE',\n                'Oslash',\n                'infinity',\n                'plusminus',\n                'lessequal',\n                'greaterequal',\n                'yen',\n                'mu',\n                'partialdiff',\n                'summation',\n                'product',\n                'pi',\n                'integral',\n                'ordfeminine',\n                'ordmasculine',\n                'Omega',\n                'ae',\n                'oslash',\n                'questiondown',\n                'exclamdown',\n                'logicalnot',\n                'radical',\n                'florin',\n                'approxequal',\n                'Delta',\n                'guillemotleft',\n                'guillemotright',\n                'ellipsis',\n                'nonbreakingspace',\n                'Agrave',\n                'Atilde',\n                'Otilde',\n                'OE',\n                'oe',\n                'endash',\n                'emdash',\n                'quotedblleft',\n                'quotedblright',\n                'quoteleft',\n                'quoteright',\n                'divide',\n                'lozenge',\n                'ydieresis',\n                'Ydieresis',\n                'fraction',\n                'currency',\n                'guilsinglleft',\n                'guilsinglright',\n                'fi',\n                'fl',\n                'daggerdbl',\n                'periodcentered',\n                'quotesinglbase',\n                'quotedblbase',\n                'perthousand',\n                'Acircumflex',\n                'Ecircumflex',\n                'Aacute',\n                'Edieresis',\n                'Egrave',\n                'Iacute',\n                'Icircumflex',\n                'Idieresis',\n                'Igrave',\n                'Oacute',\n                'Ocircumflex',\n                'apple',\n                'Ograve',\n                'Uacute',\n                'Ucircumflex',\n                'Ugrave',\n                'dotlessi',\n                'circumflex',\n                'tilde',\n                'macron',\n                'breve',\n                'dotaccent',\n                'ring',\n                'cedilla',\n                'hungarumlaut',\n                'ogonek',\n                'caron',\n                'Lslash',\n                'lslash',\n                'Scaron',\n                'scaron',\n                'Zcaron',\n                'zcaron',\n                'brokenbar',\n                'Eth',\n                'eth',\n                'Yacute',\n                'yacute',\n                'Thorn',\n                'thorn',\n                'minus',\n                'multiply',\n                'onesuperior',\n                'twosuperior',\n                'threesuperior',\n                'onehalf',\n                'onequarter',\n                'threequarters',\n                'franc',\n                'Gbreve',\n                'gbreve',\n                'Idotaccent',\n                'Scedilla',\n                'scedilla',\n                'Cacute',\n                'cacute',\n                'Ccaron',\n                'ccaron',\n                'dcroat'\n              ];\n\n              /**\n               * This is the encoding used for fonts created from scratch.\n               * It loops through all glyphs and finds the appropriate unicode value.\n               * Since it's linear time, other encodings will be faster.\n               * @exports opentype.DefaultEncoding\n               * @class\n               * @constructor\n               * @param {opentype.Font}\n               */\n              function DefaultEncoding(font) {\n                this.font = font;\n              }\n\n              DefaultEncoding.prototype.charToGlyphIndex = function(c) {\n                var code = c.codePointAt(0);\n                var glyphs = this.font.glyphs;\n                if (glyphs) {\n                  for (var i = 0; i < glyphs.length; i += 1) {\n                    var glyph = glyphs.get(i);\n                    for (var j = 0; j < glyph.unicodes.length; j += 1) {\n                      if (glyph.unicodes[j] === code) {\n                        return i;\n                      }\n                    }\n                  }\n                }\n                return null;\n              };\n\n              /**\n               * @exports opentype.CmapEncoding\n               * @class\n               * @constructor\n               * @param {Object} cmap - a object with the cmap encoded data\n               */\n              function CmapEncoding(cmap) {\n                this.cmap = cmap;\n              }\n\n              /**\n               * @param  {string} c - the character\n               * @return {number} The glyph index.\n               */\n              CmapEncoding.prototype.charToGlyphIndex = function(c) {\n                return this.cmap.glyphIndexMap[c.codePointAt(0)] || 0;\n              };\n\n              /**\n               * @exports opentype.CffEncoding\n               * @class\n               * @constructor\n               * @param {string} encoding - The encoding\n               * @param {Array} charset - The character set.\n               */\n              function CffEncoding(encoding, charset) {\n                this.encoding = encoding;\n                this.charset = charset;\n              }\n\n              /**\n               * @param  {string} s - The character\n               * @return {number} The index.\n               */\n              CffEncoding.prototype.charToGlyphIndex = function(s) {\n                var code = s.codePointAt(0);\n                var charName = this.encoding[code];\n                return this.charset.indexOf(charName);\n              };\n\n              /**\n               * @exports opentype.GlyphNames\n               * @class\n               * @constructor\n               * @param {Object} post\n               */\n              function GlyphNames(post) {\n                var this$1 = this;\n\n                switch (post.version) {\n                  case 1:\n                    this.names = standardNames.slice();\n                    break;\n                  case 2:\n                    this.names = new Array(post.numberOfGlyphs);\n                    for (var i = 0; i < post.numberOfGlyphs; i++) {\n                      if (post.glyphNameIndex[i] < standardNames.length) {\n                        this$1.names[i] = standardNames[post.glyphNameIndex[i]];\n                      } else {\n                        this$1.names[i] =\n                          post.names[post.glyphNameIndex[i] - standardNames.length];\n                      }\n                    }\n\n                    break;\n                  case 2.5:\n                    this.names = new Array(post.numberOfGlyphs);\n                    for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {\n                      this$1.names[i$1] = standardNames[i$1 + post.glyphNameIndex[i$1]];\n                    }\n\n                    break;\n                  case 3:\n                    this.names = [];\n                    break;\n                  default:\n                    this.names = [];\n                    break;\n                }\n              }\n\n              /**\n               * Gets the index of a glyph by name.\n               * @param  {string} name - The glyph name\n               * @return {number} The index\n               */\n              GlyphNames.prototype.nameToGlyphIndex = function(name) {\n                return this.names.indexOf(name);\n              };\n\n              /**\n               * @param  {number} gid\n               * @return {string}\n               */\n              GlyphNames.prototype.glyphIndexToName = function(gid) {\n                return this.names[gid];\n              };\n\n              /**\n               * @alias opentype.addGlyphNames\n               * @param {opentype.Font}\n               */\n              function addGlyphNames(font) {\n                var glyph;\n                var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n                var charCodes = Object.keys(glyphIndexMap);\n\n                for (var i = 0; i < charCodes.length; i += 1) {\n                  var c = charCodes[i];\n                  var glyphIndex = glyphIndexMap[c];\n                  glyph = font.glyphs.get(glyphIndex);\n                  glyph.addUnicode(parseInt(c));\n                }\n\n                for (var i$1 = 0; i$1 < font.glyphs.length; i$1 += 1) {\n                  glyph = font.glyphs.get(i$1);\n                  if (font.cffEncoding) {\n                    if (font.isCIDFont) {\n                      glyph.name = 'gid' + i$1;\n                    } else {\n                      glyph.name = font.cffEncoding.charset[i$1];\n                    }\n                  } else if (font.glyphNames.names) {\n                    glyph.name = font.glyphNames.glyphIndexToName(i$1);\n                  }\n                }\n              }\n\n              // Drawing utility functions.\n\n              // Draw a line on the given context from point `x1,y1` to point `x2,y2`.\n              function line(ctx, x1, y1, x2, y2) {\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.lineTo(x2, y2);\n                ctx.stroke();\n              }\n\n              var draw = { line: line };\n\n              // The Glyph object\n              // import glyf from './tables/glyf' Can't be imported here, because it's a circular dependency\n\n              function getPathDefinition(glyph, path) {\n                var _path = path || new Path();\n                return {\n                  configurable: true,\n\n                  get: function() {\n                    if (typeof _path === 'function') {\n                      _path = _path();\n                    }\n\n                    return _path;\n                  },\n\n                  set: function(p) {\n                    _path = p;\n                  }\n                };\n              }\n              /**\n               * @typedef GlyphOptions\n               * @type Object\n               * @property {string} [name] - The glyph name\n               * @property {number} [unicode]\n               * @property {Array} [unicodes]\n               * @property {number} [xMin]\n               * @property {number} [yMin]\n               * @property {number} [xMax]\n               * @property {number} [yMax]\n               * @property {number} [advanceWidth]\n               */\n\n              // A Glyph is an individual mark that often corresponds to a character.\n              // Some glyphs, such as ligatures, are a combination of many characters.\n              // Glyphs are the basic building blocks of a font.\n              //\n              // The `Glyph` class contains utility methods for drawing the path and its points.\n              /**\n               * @exports opentype.Glyph\n               * @class\n               * @param {GlyphOptions}\n               * @constructor\n               */\n              function Glyph(options) {\n                // By putting all the code on a prototype function (which is only declared once)\n                // we reduce the memory requirements for larger fonts by some 2%\n                this.bindConstructorValues(options);\n              }\n\n              /**\n               * @param  {GlyphOptions}\n               */\n              Glyph.prototype.bindConstructorValues = function(options) {\n                this.index = options.index || 0;\n\n                // These three values cannot be deferred for memory optimization:\n                this.name = options.name || null;\n                this.unicode = options.unicode || undefined;\n                this.unicodes =\n                  options.unicodes || options.unicode !== undefined\n                    ? [options.unicode]\n                    : [];\n\n                // But by binding these values only when necessary, we reduce can\n                // the memory requirements by almost 3% for larger fonts.\n                if (options.xMin) {\n                  this.xMin = options.xMin;\n                }\n\n                if (options.yMin) {\n                  this.yMin = options.yMin;\n                }\n\n                if (options.xMax) {\n                  this.xMax = options.xMax;\n                }\n\n                if (options.yMax) {\n                  this.yMax = options.yMax;\n                }\n\n                if (options.advanceWidth) {\n                  this.advanceWidth = options.advanceWidth;\n                }\n\n                // The path for a glyph is the most memory intensive, and is bound as a value\n                // with a getter/setter to ensure we actually do path parsing only once the\n                // path is actually needed by anything.\n                Object.defineProperty(this, 'path', getPathDefinition(this, options.path));\n              };\n\n              /**\n               * @param {number}\n               */\n              Glyph.prototype.addUnicode = function(unicode) {\n                if (this.unicodes.length === 0) {\n                  this.unicode = unicode;\n                }\n\n                this.unicodes.push(unicode);\n              };\n\n              /**\n               * Calculate the minimum bounding box for this glyph.\n               * @return {opentype.BoundingBox}\n               */\n              Glyph.prototype.getBoundingBox = function() {\n                return this.path.getBoundingBox();\n              };\n\n              /**\n               * Convert the glyph to a Path we can draw on a drawing context.\n               * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               * @param  {Object=} options - xScale, yScale to stretch the glyph.\n               * @param  {opentype.Font} if hinting is to be used, the font\n               * @return {opentype.Path}\n               */\n              Glyph.prototype.getPath = function(x, y, fontSize, options, font) {\n                x = x !== undefined ? x : 0;\n                y = y !== undefined ? y : 0;\n                fontSize = fontSize !== undefined ? fontSize : 72;\n                var commands;\n                var hPoints;\n                if (!options) {\n                  options = {};\n                }\n                var xScale = options.xScale;\n                var yScale = options.yScale;\n\n                if (options.hinting && font && font.hinting) {\n                  // in case of hinting, the hinting engine takes care\n                  // of scaling the points (not the path) before hinting.\n                  hPoints = this.path && font.hinting.exec(this, fontSize);\n                  // in case the hinting engine failed hPoints is undefined\n                  // and thus reverts to plain rending\n                }\n\n                if (hPoints) {\n                  // Call font.hinting.getCommands instead of `glyf.getPath(hPoints).commands` to avoid a circular dependency\n                  commands = font.hinting.getCommands(hPoints);\n                  x = Math.round(x);\n                  y = Math.round(y);\n                  // TODO in case of hinting xyScaling is not yet supported\n                  xScale = yScale = 1;\n                } else {\n                  commands = this.path.commands;\n                  var scale = 1 / this.path.unitsPerEm * fontSize;\n                  if (xScale === undefined) {\n                    xScale = scale;\n                  }\n                  if (yScale === undefined) {\n                    yScale = scale;\n                  }\n                }\n\n                var p = new Path();\n                for (var i = 0; i < commands.length; i += 1) {\n                  var cmd = commands[i];\n                  if (cmd.type === 'M') {\n                    p.moveTo(x + cmd.x * xScale, y + -cmd.y * yScale);\n                  } else if (cmd.type === 'L') {\n                    p.lineTo(x + cmd.x * xScale, y + -cmd.y * yScale);\n                  } else if (cmd.type === 'Q') {\n                    p.quadraticCurveTo(\n                      x + cmd.x1 * xScale,\n                      y + -cmd.y1 * yScale,\n                      x + cmd.x * xScale,\n                      y + -cmd.y * yScale\n                    );\n                  } else if (cmd.type === 'C') {\n                    p.curveTo(\n                      x + cmd.x1 * xScale,\n                      y + -cmd.y1 * yScale,\n                      x + cmd.x2 * xScale,\n                      y + -cmd.y2 * yScale,\n                      x + cmd.x * xScale,\n                      y + -cmd.y * yScale\n                    );\n                  } else if (cmd.type === 'Z') {\n                    p.closePath();\n                  }\n                }\n\n                return p;\n              };\n\n              /**\n               * Split the glyph into contours.\n               * This function is here for backwards compatibility, and to\n               * provide raw access to the TrueType glyph outlines.\n               * @return {Array}\n               */\n              Glyph.prototype.getContours = function() {\n                var this$1 = this;\n\n                if (this.points === undefined) {\n                  return [];\n                }\n\n                var contours = [];\n                var currentContour = [];\n                for (var i = 0; i < this.points.length; i += 1) {\n                  var pt = this$1.points[i];\n                  currentContour.push(pt);\n                  if (pt.lastPointOfContour) {\n                    contours.push(currentContour);\n                    currentContour = [];\n                  }\n                }\n\n                check.argument(\n                  currentContour.length === 0,\n                  'There are still points left in the current contour.'\n                );\n                return contours;\n              };\n\n              /**\n               * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.\n               * @return {Object}\n               */\n              Glyph.prototype.getMetrics = function() {\n                var commands = this.path.commands;\n                var xCoords = [];\n                var yCoords = [];\n                for (var i = 0; i < commands.length; i += 1) {\n                  var cmd = commands[i];\n                  if (cmd.type !== 'Z') {\n                    xCoords.push(cmd.x);\n                    yCoords.push(cmd.y);\n                  }\n\n                  if (cmd.type === 'Q' || cmd.type === 'C') {\n                    xCoords.push(cmd.x1);\n                    yCoords.push(cmd.y1);\n                  }\n\n                  if (cmd.type === 'C') {\n                    xCoords.push(cmd.x2);\n                    yCoords.push(cmd.y2);\n                  }\n                }\n\n                var metrics = {\n                  xMin: Math.min.apply(null, xCoords),\n                  yMin: Math.min.apply(null, yCoords),\n                  xMax: Math.max.apply(null, xCoords),\n                  yMax: Math.max.apply(null, yCoords),\n                  leftSideBearing: this.leftSideBearing\n                };\n\n                if (!isFinite(metrics.xMin)) {\n                  metrics.xMin = 0;\n                }\n\n                if (!isFinite(metrics.xMax)) {\n                  metrics.xMax = this.advanceWidth;\n                }\n\n                if (!isFinite(metrics.yMin)) {\n                  metrics.yMin = 0;\n                }\n\n                if (!isFinite(metrics.yMax)) {\n                  metrics.yMax = 0;\n                }\n\n                metrics.rightSideBearing =\n                  this.advanceWidth -\n                  metrics.leftSideBearing -\n                  (metrics.xMax - metrics.xMin);\n                return metrics;\n              };\n\n              /**\n               * Draw the glyph on the given context.\n               * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n               * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               * @param  {Object=} options - xScale, yScale to stretch the glyph.\n               */\n              Glyph.prototype.draw = function(ctx, x, y, fontSize, options) {\n                this.getPath(x, y, fontSize, options).draw(ctx);\n              };\n\n              /**\n               * Draw the points of the glyph.\n               * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n               * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n               * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               */\n              Glyph.prototype.drawPoints = function(ctx, x, y, fontSize) {\n                function drawCircles(l, x, y, scale) {\n                  var PI_SQ = Math.PI * 2;\n                  ctx.beginPath();\n                  for (var j = 0; j < l.length; j += 1) {\n                    ctx.moveTo(x + l[j].x * scale, y + l[j].y * scale);\n                    ctx.arc(x + l[j].x * scale, y + l[j].y * scale, 2, 0, PI_SQ, false);\n                  }\n\n                  ctx.closePath();\n                  ctx.fill();\n                }\n\n                x = x !== undefined ? x : 0;\n                y = y !== undefined ? y : 0;\n                fontSize = fontSize !== undefined ? fontSize : 24;\n                var scale = 1 / this.path.unitsPerEm * fontSize;\n\n                var blueCircles = [];\n                var redCircles = [];\n                var path = this.path;\n                for (var i = 0; i < path.commands.length; i += 1) {\n                  var cmd = path.commands[i];\n                  if (cmd.x !== undefined) {\n                    blueCircles.push({ x: cmd.x, y: -cmd.y });\n                  }\n\n                  if (cmd.x1 !== undefined) {\n                    redCircles.push({ x: cmd.x1, y: -cmd.y1 });\n                  }\n\n                  if (cmd.x2 !== undefined) {\n                    redCircles.push({ x: cmd.x2, y: -cmd.y2 });\n                  }\n                }\n\n                ctx.fillStyle = 'blue';\n                drawCircles(blueCircles, x, y, scale);\n                ctx.fillStyle = 'red';\n                drawCircles(redCircles, x, y, scale);\n              };\n\n              /**\n               * Draw lines indicating important font measurements.\n               * Black lines indicate the origin of the coordinate system (point 0,0).\n               * Blue lines indicate the glyph bounding box.\n               * Green line indicates the advance width of the glyph.\n               * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n               * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               */\n              Glyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {\n                var scale;\n                x = x !== undefined ? x : 0;\n                y = y !== undefined ? y : 0;\n                fontSize = fontSize !== undefined ? fontSize : 24;\n                scale = 1 / this.path.unitsPerEm * fontSize;\n                ctx.lineWidth = 1;\n\n                // Draw the origin\n                ctx.strokeStyle = 'black';\n                draw.line(ctx, x, -10000, x, 10000);\n                draw.line(ctx, -10000, y, 10000, y);\n\n                // This code is here due to memory optimization: by not using\n                // defaults in the constructor, we save a notable amount of memory.\n                var xMin = this.xMin || 0;\n                var yMin = this.yMin || 0;\n                var xMax = this.xMax || 0;\n                var yMax = this.yMax || 0;\n                var advanceWidth = this.advanceWidth || 0;\n\n                // Draw the glyph box\n                ctx.strokeStyle = 'blue';\n                draw.line(ctx, x + xMin * scale, -10000, x + xMin * scale, 10000);\n                draw.line(ctx, x + xMax * scale, -10000, x + xMax * scale, 10000);\n                draw.line(ctx, -10000, y + -yMin * scale, 10000, y + -yMin * scale);\n                draw.line(ctx, -10000, y + -yMax * scale, 10000, y + -yMax * scale);\n\n                // Draw the advance width\n                ctx.strokeStyle = 'green';\n                draw.line(\n                  ctx,\n                  x + advanceWidth * scale,\n                  -10000,\n                  x + advanceWidth * scale,\n                  10000\n                );\n              };\n\n              // The GlyphSet object\n\n              // Define a property on the glyph that depends on the path being loaded.\n              function defineDependentProperty(glyph, externalName, internalName) {\n                Object.defineProperty(glyph, externalName, {\n                  get: function() {\n                    // Request the path property to make sure the path is loaded.\n                    glyph.path; // jshint ignore:line\n                    return glyph[internalName];\n                  },\n                  set: function(newValue) {\n                    glyph[internalName] = newValue;\n                  },\n                  enumerable: true,\n                  configurable: true\n                });\n              }\n\n              /**\n               * A GlyphSet represents all glyphs available in the font, but modelled using\n               * a deferred glyph loader, for retrieving glyphs only once they are absolutely\n               * necessary, to keep the memory footprint down.\n               * @exports opentype.GlyphSet\n               * @class\n               * @param {opentype.Font}\n               * @param {Array}\n               */\n              function GlyphSet(font, glyphs) {\n                var this$1 = this;\n\n                this.font = font;\n                this.glyphs = {};\n                if (Array.isArray(glyphs)) {\n                  for (var i = 0; i < glyphs.length; i++) {\n                    this$1.glyphs[i] = glyphs[i];\n                  }\n                }\n\n                this.length = (glyphs && glyphs.length) || 0;\n              }\n\n              /**\n               * @param  {number} index\n               * @return {opentype.Glyph}\n               */\n              GlyphSet.prototype.get = function(index) {\n                if (typeof this.glyphs[index] === 'function') {\n                  this.glyphs[index] = this.glyphs[index]();\n                }\n\n                return this.glyphs[index];\n              };\n\n              /**\n               * @param  {number} index\n               * @param  {Object}\n               */\n              GlyphSet.prototype.push = function(index, loader) {\n                this.glyphs[index] = loader;\n                this.length++;\n              };\n\n              /**\n               * @alias opentype.glyphLoader\n               * @param  {opentype.Font} font\n               * @param  {number} index\n               * @return {opentype.Glyph}\n               */\n              function glyphLoader(font, index) {\n                return new Glyph({ index: index, font: font });\n              }\n\n              /**\n               * Generate a stub glyph that can be filled with all metadata *except*\n               * the \"points\" and \"path\" properties, which must be loaded only once\n               * the glyph's path is actually requested for text shaping.\n               * @alias opentype.ttfGlyphLoader\n               * @param  {opentype.Font} font\n               * @param  {number} index\n               * @param  {Function} parseGlyph\n               * @param  {Object} data\n               * @param  {number} position\n               * @param  {Function} buildPath\n               * @return {opentype.Glyph}\n               */\n              function ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {\n                return function() {\n                  var glyph = new Glyph({ index: index, font: font });\n\n                  glyph.path = function() {\n                    parseGlyph(glyph, data, position);\n                    var path = buildPath(font.glyphs, glyph);\n                    path.unitsPerEm = font.unitsPerEm;\n                    return path;\n                  };\n\n                  defineDependentProperty(glyph, 'xMin', '_xMin');\n                  defineDependentProperty(glyph, 'xMax', '_xMax');\n                  defineDependentProperty(glyph, 'yMin', '_yMin');\n                  defineDependentProperty(glyph, 'yMax', '_yMax');\n\n                  return glyph;\n                };\n              }\n              /**\n               * @alias opentype.cffGlyphLoader\n               * @param  {opentype.Font} font\n               * @param  {number} index\n               * @param  {Function} parseCFFCharstring\n               * @param  {string} charstring\n               * @return {opentype.Glyph}\n               */\n              function cffGlyphLoader(font, index, parseCFFCharstring, charstring) {\n                return function() {\n                  var glyph = new Glyph({ index: index, font: font });\n\n                  glyph.path = function() {\n                    var path = parseCFFCharstring(font, glyph, charstring);\n                    path.unitsPerEm = font.unitsPerEm;\n                    return path;\n                  };\n\n                  return glyph;\n                };\n              }\n\n              var glyphset = {\n                GlyphSet: GlyphSet,\n                glyphLoader: glyphLoader,\n                ttfGlyphLoader: ttfGlyphLoader,\n                cffGlyphLoader: cffGlyphLoader\n              };\n\n              // The `CFF` table contains the glyph outlines in PostScript format.\n\n              // Custom equals function that can also check lists.\n              function equals(a, b) {\n                if (a === b) {\n                  return true;\n                } else if (Array.isArray(a) && Array.isArray(b)) {\n                  if (a.length !== b.length) {\n                    return false;\n                  }\n\n                  for (var i = 0; i < a.length; i += 1) {\n                    if (!equals(a[i], b[i])) {\n                      return false;\n                    }\n                  }\n\n                  return true;\n                } else {\n                  return false;\n                }\n              }\n\n              // Subroutines are encoded using the negative half of the number space.\n              // See type 2 chapter 4.7 \"Subroutine operators\".\n              function calcCFFSubroutineBias(subrs) {\n                var bias;\n                if (subrs.length < 1240) {\n                  bias = 107;\n                } else if (subrs.length < 33900) {\n                  bias = 1131;\n                } else {\n                  bias = 32768;\n                }\n\n                return bias;\n              }\n\n              // Parse a `CFF` INDEX array.\n              // An index array consists of a list of offsets, then a list of objects at those offsets.\n              function parseCFFIndex(data, start, conversionFn) {\n                var offsets = [];\n                var objects = [];\n                var count = parse.getCard16(data, start);\n                var objectOffset;\n                var endOffset;\n                if (count !== 0) {\n                  var offsetSize = parse.getByte(data, start + 2);\n                  objectOffset = start + (count + 1) * offsetSize + 2;\n                  var pos = start + 3;\n                  for (var i = 0; i < count + 1; i += 1) {\n                    offsets.push(parse.getOffset(data, pos, offsetSize));\n                    pos += offsetSize;\n                  }\n\n                  // The total size of the index array is 4 header bytes + the value of the last offset.\n                  endOffset = objectOffset + offsets[count];\n                } else {\n                  endOffset = start + 2;\n                }\n\n                for (var i$1 = 0; i$1 < offsets.length - 1; i$1 += 1) {\n                  var value = parse.getBytes(\n                    data,\n                    objectOffset + offsets[i$1],\n                    objectOffset + offsets[i$1 + 1]\n                  );\n                  if (conversionFn) {\n                    value = conversionFn(value);\n                  }\n\n                  objects.push(value);\n                }\n\n                return { objects: objects, startOffset: start, endOffset: endOffset };\n              }\n\n              // Parse a `CFF` DICT real value.\n              function parseFloatOperand(parser) {\n                var s = '';\n                var eof = 15;\n                var lookup = [\n                  '0',\n                  '1',\n                  '2',\n                  '3',\n                  '4',\n                  '5',\n                  '6',\n                  '7',\n                  '8',\n                  '9',\n                  '.',\n                  'E',\n                  'E-',\n                  null,\n                  '-'\n                ];\n                while (true) {\n                  var b = parser.parseByte();\n                  var n1 = b >> 4;\n                  var n2 = b & 15;\n\n                  if (n1 === eof) {\n                    break;\n                  }\n\n                  s += lookup[n1];\n\n                  if (n2 === eof) {\n                    break;\n                  }\n\n                  s += lookup[n2];\n                }\n\n                return parseFloat(s);\n              }\n\n              // Parse a `CFF` DICT operand.\n              function parseOperand(parser, b0) {\n                var b1;\n                var b2;\n                var b3;\n                var b4;\n                if (b0 === 28) {\n                  b1 = parser.parseByte();\n                  b2 = parser.parseByte();\n                  return (b1 << 8) | b2;\n                }\n\n                if (b0 === 29) {\n                  b1 = parser.parseByte();\n                  b2 = parser.parseByte();\n                  b3 = parser.parseByte();\n                  b4 = parser.parseByte();\n                  return (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;\n                }\n\n                if (b0 === 30) {\n                  return parseFloatOperand(parser);\n                }\n\n                if (b0 >= 32 && b0 <= 246) {\n                  return b0 - 139;\n                }\n\n                if (b0 >= 247 && b0 <= 250) {\n                  b1 = parser.parseByte();\n                  return (b0 - 247) * 256 + b1 + 108;\n                }\n\n                if (b0 >= 251 && b0 <= 254) {\n                  b1 = parser.parseByte();\n                  return -(b0 - 251) * 256 - b1 - 108;\n                }\n\n                throw new Error('Invalid b0 ' + b0);\n              }\n\n              // Convert the entries returned by `parseDict` to a proper dictionary.\n              // If a value is a list of one, it is unpacked.\n              function entriesToObject(entries) {\n                var o = {};\n                for (var i = 0; i < entries.length; i += 1) {\n                  var key = entries[i][0];\n                  var values = entries[i][1];\n                  var value = void 0;\n                  if (values.length === 1) {\n                    value = values[0];\n                  } else {\n                    value = values;\n                  }\n\n                  if (o.hasOwnProperty(key) && !isNaN(o[key])) {\n                    throw new Error('Object ' + o + ' already has key ' + key);\n                  }\n\n                  o[key] = value;\n                }\n\n                return o;\n              }\n\n              // Parse a `CFF` DICT object.\n              // A dictionary contains key-value pairs in a compact tokenized format.\n              function parseCFFDict(data, start, size) {\n                start = start !== undefined ? start : 0;\n                var parser = new parse.Parser(data, start);\n                var entries = [];\n                var operands = [];\n                size = size !== undefined ? size : data.length;\n\n                while (parser.relativeOffset < size) {\n                  var op = parser.parseByte();\n\n                  // The first byte for each dict item distinguishes between operator (key) and operand (value).\n                  // Values <= 21 are operators.\n                  if (op <= 21) {\n                    // Two-byte operators have an initial escape byte of 12.\n                    if (op === 12) {\n                      op = 1200 + parser.parseByte();\n                    }\n\n                    entries.push([op, operands]);\n                    operands = [];\n                  } else {\n                    // Since the operands (values) come before the operators (keys), we store all operands in a list\n                    // until we encounter an operator.\n                    operands.push(parseOperand(parser, op));\n                  }\n                }\n\n                return entriesToObject(entries);\n              }\n\n              // Given a String Index (SID), return the value of the string.\n              // Strings below index 392 are standard CFF strings and are not encoded in the font.\n              function getCFFString(strings, index) {\n                if (index <= 390) {\n                  index = cffStandardStrings[index];\n                } else {\n                  index = strings[index - 391];\n                }\n\n                return index;\n              }\n\n              // Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.\n              // This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.\n              function interpretDict(dict, meta, strings) {\n                var newDict = {};\n                var value;\n\n                // Because we also want to include missing values, we start out from the meta list\n                // and lookup values in the dict.\n                for (var i = 0; i < meta.length; i += 1) {\n                  var m = meta[i];\n\n                  if (Array.isArray(m.type)) {\n                    var values = [];\n                    values.length = m.type.length;\n                    for (var j = 0; j < m.type.length; j++) {\n                      value = dict[m.op] !== undefined ? dict[m.op][j] : undefined;\n                      if (value === undefined) {\n                        value =\n                          m.value !== undefined && m.value[j] !== undefined\n                            ? m.value[j]\n                            : null;\n                      }\n                      if (m.type[j] === 'SID') {\n                        value = getCFFString(strings, value);\n                      }\n                      values[j] = value;\n                    }\n                    newDict[m.name] = values;\n                  } else {\n                    value = dict[m.op];\n                    if (value === undefined) {\n                      value = m.value !== undefined ? m.value : null;\n                    }\n\n                    if (m.type === 'SID') {\n                      value = getCFFString(strings, value);\n                    }\n                    newDict[m.name] = value;\n                  }\n                }\n\n                return newDict;\n              }\n\n              // Parse the CFF header.\n              function parseCFFHeader(data, start) {\n                var header = {};\n                header.formatMajor = parse.getCard8(data, start);\n                header.formatMinor = parse.getCard8(data, start + 1);\n                header.size = parse.getCard8(data, start + 2);\n                header.offsetSize = parse.getCard8(data, start + 3);\n                header.startOffset = start;\n                header.endOffset = start + 4;\n                return header;\n              }\n\n              var TOP_DICT_META = [\n                { name: 'version', op: 0, type: 'SID' },\n                { name: 'notice', op: 1, type: 'SID' },\n                { name: 'copyright', op: 1200, type: 'SID' },\n                { name: 'fullName', op: 2, type: 'SID' },\n                { name: 'familyName', op: 3, type: 'SID' },\n                { name: 'weight', op: 4, type: 'SID' },\n                { name: 'isFixedPitch', op: 1201, type: 'number', value: 0 },\n                { name: 'italicAngle', op: 1202, type: 'number', value: 0 },\n                { name: 'underlinePosition', op: 1203, type: 'number', value: -100 },\n                { name: 'underlineThickness', op: 1204, type: 'number', value: 50 },\n                { name: 'paintType', op: 1205, type: 'number', value: 0 },\n                { name: 'charstringType', op: 1206, type: 'number', value: 2 },\n                {\n                  name: 'fontMatrix',\n                  op: 1207,\n                  type: ['real', 'real', 'real', 'real', 'real', 'real'],\n                  value: [0.001, 0, 0, 0.001, 0, 0]\n                },\n                { name: 'uniqueId', op: 13, type: 'number' },\n                {\n                  name: 'fontBBox',\n                  op: 5,\n                  type: ['number', 'number', 'number', 'number'],\n                  value: [0, 0, 0, 0]\n                },\n                { name: 'strokeWidth', op: 1208, type: 'number', value: 0 },\n                { name: 'xuid', op: 14, type: [], value: null },\n                { name: 'charset', op: 15, type: 'offset', value: 0 },\n                { name: 'encoding', op: 16, type: 'offset', value: 0 },\n                { name: 'charStrings', op: 17, type: 'offset', value: 0 },\n                { name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0] },\n                { name: 'ros', op: 1230, type: ['SID', 'SID', 'number'] },\n                { name: 'cidFontVersion', op: 1231, type: 'number', value: 0 },\n                { name: 'cidFontRevision', op: 1232, type: 'number', value: 0 },\n                { name: 'cidFontType', op: 1233, type: 'number', value: 0 },\n                { name: 'cidCount', op: 1234, type: 'number', value: 8720 },\n                { name: 'uidBase', op: 1235, type: 'number' },\n                { name: 'fdArray', op: 1236, type: 'offset' },\n                { name: 'fdSelect', op: 1237, type: 'offset' },\n                { name: 'fontName', op: 1238, type: 'SID' }\n              ];\n\n              var PRIVATE_DICT_META = [\n                { name: 'subrs', op: 19, type: 'offset', value: 0 },\n                { name: 'defaultWidthX', op: 20, type: 'number', value: 0 },\n                { name: 'nominalWidthX', op: 21, type: 'number', value: 0 }\n              ];\n\n              // Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.\n              // The top dictionary contains the essential metadata for the font, together with the private dictionary.\n              function parseCFFTopDict(data, strings) {\n                var dict = parseCFFDict(data, 0, data.byteLength);\n                return interpretDict(dict, TOP_DICT_META, strings);\n              }\n\n              // Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.\n              function parseCFFPrivateDict(data, start, size, strings) {\n                var dict = parseCFFDict(data, start, size);\n                return interpretDict(dict, PRIVATE_DICT_META, strings);\n              }\n\n              // Returns a list of \"Top DICT\"s found using an INDEX list.\n              // Used to read both the usual high-level Top DICTs and also the FDArray\n              // discovered inside CID-keyed fonts.  When a Top DICT has a reference to\n              // a Private DICT that is read and saved into the Top DICT.\n              //\n              // In addition to the expected/optional values as outlined in TOP_DICT_META\n              // the following values might be saved into the Top DICT.\n              //\n              //    _subrs []        array of local CFF subroutines from Private DICT\n              //    _subrsBias       bias value computed from number of subroutines\n              //                      (see calcCFFSubroutineBias() and parseCFFCharstring())\n              //    _defaultWidthX   default widths for CFF characters\n              //    _nominalWidthX   bias added to width embedded within glyph description\n              //\n              //    _privateDict     saved copy of parsed Private DICT from Top DICT\n              function gatherCFFTopDicts(data, start, cffIndex, strings) {\n                var topDictArray = [];\n                for (var iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {\n                  var topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);\n                  var topDict = parseCFFTopDict(topDictData, strings);\n                  topDict._subrs = [];\n                  topDict._subrsBias = 0;\n                  var privateSize = topDict.private[0];\n                  var privateOffset = topDict.private[1];\n                  if (privateSize !== 0 && privateOffset !== 0) {\n                    var privateDict = parseCFFPrivateDict(\n                      data,\n                      privateOffset + start,\n                      privateSize,\n                      strings\n                    );\n                    topDict._defaultWidthX = privateDict.defaultWidthX;\n                    topDict._nominalWidthX = privateDict.nominalWidthX;\n                    if (privateDict.subrs !== 0) {\n                      var subrOffset = privateOffset + privateDict.subrs;\n                      var subrIndex = parseCFFIndex(data, subrOffset + start);\n                      topDict._subrs = subrIndex.objects;\n                      topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);\n                    }\n                    topDict._privateDict = privateDict;\n                  }\n                  topDictArray.push(topDict);\n                }\n                return topDictArray;\n              }\n\n              // Parse the CFF charset table, which contains internal names for all the glyphs.\n              // This function will return a list of glyph names.\n              // See Adobe TN #5176 chapter 13, \"Charsets\".\n              function parseCFFCharset(data, start, nGlyphs, strings) {\n                var sid;\n                var count;\n                var parser = new parse.Parser(data, start);\n\n                // The .notdef glyph is not included, so subtract 1.\n                nGlyphs -= 1;\n                var charset = ['.notdef'];\n\n                var format = parser.parseCard8();\n                if (format === 0) {\n                  for (var i = 0; i < nGlyphs; i += 1) {\n                    sid = parser.parseSID();\n                    charset.push(getCFFString(strings, sid));\n                  }\n                } else if (format === 1) {\n                  while (charset.length <= nGlyphs) {\n                    sid = parser.parseSID();\n                    count = parser.parseCard8();\n                    for (var i$1 = 0; i$1 <= count; i$1 += 1) {\n                      charset.push(getCFFString(strings, sid));\n                      sid += 1;\n                    }\n                  }\n                } else if (format === 2) {\n                  while (charset.length <= nGlyphs) {\n                    sid = parser.parseSID();\n                    count = parser.parseCard16();\n                    for (var i$2 = 0; i$2 <= count; i$2 += 1) {\n                      charset.push(getCFFString(strings, sid));\n                      sid += 1;\n                    }\n                  }\n                } else {\n                  throw new Error('Unknown charset format ' + format);\n                }\n\n                return charset;\n              }\n\n              // Parse the CFF encoding data. Only one encoding can be specified per font.\n              // See Adobe TN #5176 chapter 12, \"Encodings\".\n              function parseCFFEncoding(data, start, charset) {\n                var code;\n                var enc = {};\n                var parser = new parse.Parser(data, start);\n                var format = parser.parseCard8();\n                if (format === 0) {\n                  var nCodes = parser.parseCard8();\n                  for (var i = 0; i < nCodes; i += 1) {\n                    code = parser.parseCard8();\n                    enc[code] = i;\n                  }\n                } else if (format === 1) {\n                  var nRanges = parser.parseCard8();\n                  code = 1;\n                  for (var i$1 = 0; i$1 < nRanges; i$1 += 1) {\n                    var first = parser.parseCard8();\n                    var nLeft = parser.parseCard8();\n                    for (var j = first; j <= first + nLeft; j += 1) {\n                      enc[j] = code;\n                      code += 1;\n                    }\n                  }\n                } else {\n                  throw new Error('Unknown encoding format ' + format);\n                }\n\n                return new CffEncoding(enc, charset);\n              }\n\n              // Take in charstring code and return a Glyph object.\n              // The encoding is described in the Type 2 Charstring Format\n              // https://www.microsoft.com/typography/OTSPEC/charstr2.htm\n              function parseCFFCharstring(font, glyph, code) {\n                var c1x;\n                var c1y;\n                var c2x;\n                var c2y;\n                var p = new Path();\n                var stack = [];\n                var nStems = 0;\n                var haveWidth = false;\n                var open = false;\n                var x = 0;\n                var y = 0;\n                var subrs;\n                var subrsBias;\n                var defaultWidthX;\n                var nominalWidthX;\n                if (font.isCIDFont) {\n                  var fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];\n                  var fdDict = font.tables.cff.topDict._fdArray[fdIndex];\n                  subrs = fdDict._subrs;\n                  subrsBias = fdDict._subrsBias;\n                  defaultWidthX = fdDict._defaultWidthX;\n                  nominalWidthX = fdDict._nominalWidthX;\n                } else {\n                  subrs = font.tables.cff.topDict._subrs;\n                  subrsBias = font.tables.cff.topDict._subrsBias;\n                  defaultWidthX = font.tables.cff.topDict._defaultWidthX;\n                  nominalWidthX = font.tables.cff.topDict._nominalWidthX;\n                }\n                var width = defaultWidthX;\n\n                function newContour(x, y) {\n                  if (open) {\n                    p.closePath();\n                  }\n\n                  p.moveTo(x, y);\n                  open = true;\n                }\n\n                function parseStems() {\n                  var hasWidthArg;\n\n                  // The number of stem operators on the stack is always even.\n                  // If the value is uneven, that means a width is specified.\n                  hasWidthArg = stack.length % 2 !== 0;\n                  if (hasWidthArg && !haveWidth) {\n                    width = stack.shift() + nominalWidthX;\n                  }\n\n                  nStems += stack.length >> 1;\n                  stack.length = 0;\n                  haveWidth = true;\n                }\n\n                function parse$$1(code) {\n                  var b1;\n                  var b2;\n                  var b3;\n                  var b4;\n                  var codeIndex;\n                  var subrCode;\n                  var jpx;\n                  var jpy;\n                  var c3x;\n                  var c3y;\n                  var c4x;\n                  var c4y;\n\n                  var i = 0;\n                  while (i < code.length) {\n                    var v = code[i];\n                    i += 1;\n                    switch (v) {\n                      case 1: // hstem\n                        parseStems();\n                        break;\n                      case 3: // vstem\n                        parseStems();\n                        break;\n                      case 4: // vmoveto\n                        if (stack.length > 1 && !haveWidth) {\n                          width = stack.shift() + nominalWidthX;\n                          haveWidth = true;\n                        }\n\n                        y += stack.pop();\n                        newContour(x, y);\n                        break;\n                      case 5: // rlineto\n                        while (stack.length > 0) {\n                          x += stack.shift();\n                          y += stack.shift();\n                          p.lineTo(x, y);\n                        }\n\n                        break;\n                      case 6: // hlineto\n                        while (stack.length > 0) {\n                          x += stack.shift();\n                          p.lineTo(x, y);\n                          if (stack.length === 0) {\n                            break;\n                          }\n\n                          y += stack.shift();\n                          p.lineTo(x, y);\n                        }\n\n                        break;\n                      case 7: // vlineto\n                        while (stack.length > 0) {\n                          y += stack.shift();\n                          p.lineTo(x, y);\n                          if (stack.length === 0) {\n                            break;\n                          }\n\n                          x += stack.shift();\n                          p.lineTo(x, y);\n                        }\n\n                        break;\n                      case 8: // rrcurveto\n                        while (stack.length > 0) {\n                          c1x = x + stack.shift();\n                          c1y = y + stack.shift();\n                          c2x = c1x + stack.shift();\n                          c2y = c1y + stack.shift();\n                          x = c2x + stack.shift();\n                          y = c2y + stack.shift();\n                          p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        }\n\n                        break;\n                      case 10: // callsubr\n                        codeIndex = stack.pop() + subrsBias;\n                        subrCode = subrs[codeIndex];\n                        if (subrCode) {\n                          parse$$1(subrCode);\n                        }\n\n                        break;\n                      case 11: // return\n                        return;\n                      case 12: // flex operators\n                        v = code[i];\n                        i += 1;\n                        switch (v) {\n                          case 35: // flex\n                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-\n                            c1x = x + stack.shift(); // dx1\n                            c1y = y + stack.shift(); // dy1\n                            c2x = c1x + stack.shift(); // dx2\n                            c2y = c1y + stack.shift(); // dy2\n                            jpx = c2x + stack.shift(); // dx3\n                            jpy = c2y + stack.shift(); // dy3\n                            c3x = jpx + stack.shift(); // dx4\n                            c3y = jpy + stack.shift(); // dy4\n                            c4x = c3x + stack.shift(); // dx5\n                            c4y = c3y + stack.shift(); // dy5\n                            x = c4x + stack.shift(); // dx6\n                            y = c4y + stack.shift(); // dy6\n                            stack.shift(); // flex depth\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                          case 34: // hflex\n                            // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-\n                            c1x = x + stack.shift(); // dx1\n                            c1y = y; // dy1\n                            c2x = c1x + stack.shift(); // dx2\n                            c2y = c1y + stack.shift(); // dy2\n                            jpx = c2x + stack.shift(); // dx3\n                            jpy = c2y; // dy3\n                            c3x = jpx + stack.shift(); // dx4\n                            c3y = c2y; // dy4\n                            c4x = c3x + stack.shift(); // dx5\n                            c4y = y; // dy5\n                            x = c4x + stack.shift(); // dx6\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                          case 36: // hflex1\n                            // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-\n                            c1x = x + stack.shift(); // dx1\n                            c1y = y + stack.shift(); // dy1\n                            c2x = c1x + stack.shift(); // dx2\n                            c2y = c1y + stack.shift(); // dy2\n                            jpx = c2x + stack.shift(); // dx3\n                            jpy = c2y; // dy3\n                            c3x = jpx + stack.shift(); // dx4\n                            c3y = c2y; // dy4\n                            c4x = c3x + stack.shift(); // dx5\n                            c4y = c3y + stack.shift(); // dy5\n                            x = c4x + stack.shift(); // dx6\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                          case 37: // flex1\n                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-\n                            c1x = x + stack.shift(); // dx1\n                            c1y = y + stack.shift(); // dy1\n                            c2x = c1x + stack.shift(); // dx2\n                            c2y = c1y + stack.shift(); // dy2\n                            jpx = c2x + stack.shift(); // dx3\n                            jpy = c2y + stack.shift(); // dy3\n                            c3x = jpx + stack.shift(); // dx4\n                            c3y = jpy + stack.shift(); // dy4\n                            c4x = c3x + stack.shift(); // dx5\n                            c4y = c3y + stack.shift(); // dy5\n                            if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n                              x = c4x + stack.shift();\n                            } else {\n                              y = c4y + stack.shift();\n                            }\n\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                          default:\n                            console.log(\n                              'Glyph ' + glyph.index + ': unknown operator ' + 1200 + v\n                            );\n                            stack.length = 0;\n                        }\n                        break;\n                      case 14: // endchar\n                        if (stack.length > 0 && !haveWidth) {\n                          width = stack.shift() + nominalWidthX;\n                          haveWidth = true;\n                        }\n\n                        if (open) {\n                          p.closePath();\n                          open = false;\n                        }\n\n                        break;\n                      case 18: // hstemhm\n                        parseStems();\n                        break;\n                      case 19: // hintmask\n                      case 20: // cntrmask\n                        parseStems();\n                        i += (nStems + 7) >> 3;\n                        break;\n                      case 21: // rmoveto\n                        if (stack.length > 2 && !haveWidth) {\n                          width = stack.shift() + nominalWidthX;\n                          haveWidth = true;\n                        }\n\n                        y += stack.pop();\n                        x += stack.pop();\n                        newContour(x, y);\n                        break;\n                      case 22: // hmoveto\n                        if (stack.length > 1 && !haveWidth) {\n                          width = stack.shift() + nominalWidthX;\n                          haveWidth = true;\n                        }\n\n                        x += stack.pop();\n                        newContour(x, y);\n                        break;\n                      case 23: // vstemhm\n                        parseStems();\n                        break;\n                      case 24: // rcurveline\n                        while (stack.length > 2) {\n                          c1x = x + stack.shift();\n                          c1y = y + stack.shift();\n                          c2x = c1x + stack.shift();\n                          c2y = c1y + stack.shift();\n                          x = c2x + stack.shift();\n                          y = c2y + stack.shift();\n                          p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        }\n\n                        x += stack.shift();\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                        break;\n                      case 25: // rlinecurve\n                        while (stack.length > 6) {\n                          x += stack.shift();\n                          y += stack.shift();\n                          p.lineTo(x, y);\n                        }\n\n                        c1x = x + stack.shift();\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        break;\n                      case 26: // vvcurveto\n                        if (stack.length % 2) {\n                          x += stack.shift();\n                        }\n\n                        while (stack.length > 0) {\n                          c1x = x;\n                          c1y = y + stack.shift();\n                          c2x = c1x + stack.shift();\n                          c2y = c1y + stack.shift();\n                          x = c2x;\n                          y = c2y + stack.shift();\n                          p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        }\n\n                        break;\n                      case 27: // hhcurveto\n                        if (stack.length % 2) {\n                          y += stack.shift();\n                        }\n\n                        while (stack.length > 0) {\n                          c1x = x + stack.shift();\n                          c1y = y;\n                          c2x = c1x + stack.shift();\n                          c2y = c1y + stack.shift();\n                          x = c2x + stack.shift();\n                          y = c2y;\n                          p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        }\n\n                        break;\n                      case 28: // shortint\n                        b1 = code[i];\n                        b2 = code[i + 1];\n                        stack.push(((b1 << 24) | (b2 << 16)) >> 16);\n                        i += 2;\n                        break;\n                      case 29: // callgsubr\n                        codeIndex = stack.pop() + font.gsubrsBias;\n                        subrCode = font.gsubrs[codeIndex];\n                        if (subrCode) {\n                          parse$$1(subrCode);\n                        }\n\n                        break;\n                      case 30: // vhcurveto\n                        while (stack.length > 0) {\n                          c1x = x;\n                          c1y = y + stack.shift();\n                          c2x = c1x + stack.shift();\n                          c2y = c1y + stack.shift();\n                          x = c2x + stack.shift();\n                          y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                          p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                          if (stack.length === 0) {\n                            break;\n                          }\n\n                          c1x = x + stack.shift();\n                          c1y = y;\n                          c2x = c1x + stack.shift();\n                          c2y = c1y + stack.shift();\n                          y = c2y + stack.shift();\n                          x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                          p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        }\n\n                        break;\n                      case 31: // hvcurveto\n                        while (stack.length > 0) {\n                          c1x = x + stack.shift();\n                          c1y = y;\n                          c2x = c1x + stack.shift();\n                          c2y = c1y + stack.shift();\n                          y = c2y + stack.shift();\n                          x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                          p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                          if (stack.length === 0) {\n                            break;\n                          }\n\n                          c1x = x;\n                          c1y = y + stack.shift();\n                          c2x = c1x + stack.shift();\n                          c2y = c1y + stack.shift();\n                          x = c2x + stack.shift();\n                          y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                          p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        }\n\n                        break;\n                      default:\n                        if (v < 32) {\n                          console.log('Glyph ' + glyph.index + ': unknown operator ' + v);\n                        } else if (v < 247) {\n                          stack.push(v - 139);\n                        } else if (v < 251) {\n                          b1 = code[i];\n                          i += 1;\n                          stack.push((v - 247) * 256 + b1 + 108);\n                        } else if (v < 255) {\n                          b1 = code[i];\n                          i += 1;\n                          stack.push(-(v - 251) * 256 - b1 - 108);\n                        } else {\n                          b1 = code[i];\n                          b2 = code[i + 1];\n                          b3 = code[i + 2];\n                          b4 = code[i + 3];\n                          i += 4;\n                          stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);\n                        }\n                    }\n                  }\n                }\n\n                parse$$1(code);\n\n                glyph.advanceWidth = width;\n                return p;\n              }\n\n              function parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {\n                var fdSelect = [];\n                var fdIndex;\n                var parser = new parse.Parser(data, start);\n                var format = parser.parseCard8();\n                if (format === 0) {\n                  // Simple list of nGlyphs elements\n                  for (var iGid = 0; iGid < nGlyphs; iGid++) {\n                    fdIndex = parser.parseCard8();\n                    if (fdIndex >= fdArrayCount) {\n                      throw new Error(\n                        'CFF table CID Font FDSelect has bad FD index value ' +\n                          fdIndex +\n                          ' (FD count ' +\n                          fdArrayCount +\n                          ')'\n                      );\n                    }\n                    fdSelect.push(fdIndex);\n                  }\n                } else if (format === 3) {\n                  // Ranges\n                  var nRanges = parser.parseCard16();\n                  var first = parser.parseCard16();\n                  if (first !== 0) {\n                    throw new Error(\n                      'CFF Table CID Font FDSelect format 3 range has bad initial GID ' +\n                        first\n                    );\n                  }\n                  var next;\n                  for (var iRange = 0; iRange < nRanges; iRange++) {\n                    fdIndex = parser.parseCard8();\n                    next = parser.parseCard16();\n                    if (fdIndex >= fdArrayCount) {\n                      throw new Error(\n                        'CFF table CID Font FDSelect has bad FD index value ' +\n                          fdIndex +\n                          ' (FD count ' +\n                          fdArrayCount +\n                          ')'\n                      );\n                    }\n                    if (next > nGlyphs) {\n                      throw new Error(\n                        'CFF Table CID Font FDSelect format 3 range has bad GID ' + next\n                      );\n                    }\n                    for (; first < next; first++) {\n                      fdSelect.push(fdIndex);\n                    }\n                    first = next;\n                  }\n                  if (next !== nGlyphs) {\n                    throw new Error(\n                      'CFF Table CID Font FDSelect format 3 range has bad final GID ' + next\n                    );\n                  }\n                } else {\n                  throw new Error(\n                    'CFF Table CID Font FDSelect table has unsupported format ' + format\n                  );\n                }\n                return fdSelect;\n              }\n\n              // Parse the `CFF` table, which contains the glyph outlines in PostScript format.\n              function parseCFFTable(data, start, font) {\n                font.tables.cff = {};\n                var header = parseCFFHeader(data, start);\n                var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);\n                var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);\n                var stringIndex = parseCFFIndex(\n                  data,\n                  topDictIndex.endOffset,\n                  parse.bytesToString\n                );\n                var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);\n                font.gsubrs = globalSubrIndex.objects;\n                font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);\n\n                var topDictArray = gatherCFFTopDicts(\n                  data,\n                  start,\n                  topDictIndex.objects,\n                  stringIndex.objects\n                );\n                if (topDictArray.length !== 1) {\n                  throw new Error(\n                    \"CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = \" +\n                      topDictArray.length\n                  );\n                }\n\n                var topDict = topDictArray[0];\n                font.tables.cff.topDict = topDict;\n\n                if (topDict._privateDict) {\n                  font.defaultWidthX = topDict._privateDict.defaultWidthX;\n                  font.nominalWidthX = topDict._privateDict.nominalWidthX;\n                }\n\n                if (topDict.ros[0] !== undefined && topDict.ros[1] !== undefined) {\n                  font.isCIDFont = true;\n                }\n\n                if (font.isCIDFont) {\n                  var fdArrayOffset = topDict.fdArray;\n                  var fdSelectOffset = topDict.fdSelect;\n                  if (fdArrayOffset === 0 || fdSelectOffset === 0) {\n                    throw new Error(\n                      'Font is marked as a CID font, but FDArray and/or FDSelect information is missing'\n                    );\n                  }\n                  fdArrayOffset += start;\n                  var fdArrayIndex = parseCFFIndex(data, fdArrayOffset);\n                  var fdArray = gatherCFFTopDicts(\n                    data,\n                    start,\n                    fdArrayIndex.objects,\n                    stringIndex.objects\n                  );\n                  topDict._fdArray = fdArray;\n                  fdSelectOffset += start;\n                  topDict._fdSelect = parseCFFFDSelect(\n                    data,\n                    fdSelectOffset,\n                    font.numGlyphs,\n                    fdArray.length\n                  );\n                }\n\n                var privateDictOffset = start + topDict.private[1];\n                var privateDict = parseCFFPrivateDict(\n                  data,\n                  privateDictOffset,\n                  topDict.private[0],\n                  stringIndex.objects\n                );\n                font.defaultWidthX = privateDict.defaultWidthX;\n                font.nominalWidthX = privateDict.nominalWidthX;\n\n                if (privateDict.subrs !== 0) {\n                  var subrOffset = privateDictOffset + privateDict.subrs;\n                  var subrIndex = parseCFFIndex(data, subrOffset);\n                  font.subrs = subrIndex.objects;\n                  font.subrsBias = calcCFFSubroutineBias(font.subrs);\n                } else {\n                  font.subrs = [];\n                  font.subrsBias = 0;\n                }\n\n                // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.\n                var charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);\n                font.nGlyphs = charStringsIndex.objects.length;\n\n                var charset = parseCFFCharset(\n                  data,\n                  start + topDict.charset,\n                  font.nGlyphs,\n                  stringIndex.objects\n                );\n                if (topDict.encoding === 0) {\n                  // Standard encoding\n                  font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);\n                } else if (topDict.encoding === 1) {\n                  // Expert encoding\n                  font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);\n                } else {\n                  font.cffEncoding = parseCFFEncoding(\n                    data,\n                    start + topDict.encoding,\n                    charset\n                  );\n                }\n\n                // Prefer the CMAP encoding to the CFF encoding.\n                font.encoding = font.encoding || font.cffEncoding;\n\n                font.glyphs = new glyphset.GlyphSet(font);\n                for (var i = 0; i < font.nGlyphs; i += 1) {\n                  var charString = charStringsIndex.objects[i];\n                  font.glyphs.push(\n                    i,\n                    glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString)\n                  );\n                }\n              }\n\n              // Convert a string to a String ID (SID).\n              // The list of strings is modified in place.\n              function encodeString(s, strings) {\n                var sid;\n\n                // Is the string in the CFF standard strings?\n                var i = cffStandardStrings.indexOf(s);\n                if (i >= 0) {\n                  sid = i;\n                }\n\n                // Is the string already in the string index?\n                i = strings.indexOf(s);\n                if (i >= 0) {\n                  sid = i + cffStandardStrings.length;\n                } else {\n                  sid = cffStandardStrings.length + strings.length;\n                  strings.push(s);\n                }\n\n                return sid;\n              }\n\n              function makeHeader() {\n                return new table.Record('Header', [\n                  { name: 'major', type: 'Card8', value: 1 },\n                  { name: 'minor', type: 'Card8', value: 0 },\n                  { name: 'hdrSize', type: 'Card8', value: 4 },\n                  { name: 'major', type: 'Card8', value: 1 }\n                ]);\n              }\n\n              function makeNameIndex(fontNames) {\n                var t = new table.Record('Name INDEX', [\n                  { name: 'names', type: 'INDEX', value: [] }\n                ]);\n                t.names = [];\n                for (var i = 0; i < fontNames.length; i += 1) {\n                  t.names.push({ name: 'name_' + i, type: 'NAME', value: fontNames[i] });\n                }\n\n                return t;\n              }\n\n              // Given a dictionary's metadata, create a DICT structure.\n              function makeDict(meta, attrs, strings) {\n                var m = {};\n                for (var i = 0; i < meta.length; i += 1) {\n                  var entry = meta[i];\n                  var value = attrs[entry.name];\n                  if (value !== undefined && !equals(value, entry.value)) {\n                    if (entry.type === 'SID') {\n                      value = encodeString(value, strings);\n                    }\n\n                    m[entry.op] = { name: entry.name, type: entry.type, value: value };\n                  }\n                }\n\n                return m;\n              }\n\n              // The Top DICT houses the global font attributes.\n              function makeTopDict(attrs, strings) {\n                var t = new table.Record('Top DICT', [\n                  { name: 'dict', type: 'DICT', value: {} }\n                ]);\n                t.dict = makeDict(TOP_DICT_META, attrs, strings);\n                return t;\n              }\n\n              function makeTopDictIndex(topDict) {\n                var t = new table.Record('Top DICT INDEX', [\n                  { name: 'topDicts', type: 'INDEX', value: [] }\n                ]);\n                t.topDicts = [{ name: 'topDict_0', type: 'TABLE', value: topDict }];\n                return t;\n              }\n\n              function makeStringIndex(strings) {\n                var t = new table.Record('String INDEX', [\n                  { name: 'strings', type: 'INDEX', value: [] }\n                ]);\n                t.strings = [];\n                for (var i = 0; i < strings.length; i += 1) {\n                  t.strings.push({\n                    name: 'string_' + i,\n                    type: 'STRING',\n                    value: strings[i]\n                  });\n                }\n\n                return t;\n              }\n\n              function makeGlobalSubrIndex() {\n                // Currently we don't use subroutines.\n                return new table.Record('Global Subr INDEX', [\n                  { name: 'subrs', type: 'INDEX', value: [] }\n                ]);\n              }\n\n              function makeCharsets(glyphNames, strings) {\n                var t = new table.Record('Charsets', [\n                  { name: 'format', type: 'Card8', value: 0 }\n                ]);\n                for (var i = 0; i < glyphNames.length; i += 1) {\n                  var glyphName = glyphNames[i];\n                  var glyphSID = encodeString(glyphName, strings);\n                  t.fields.push({ name: 'glyph_' + i, type: 'SID', value: glyphSID });\n                }\n\n                return t;\n              }\n\n              function glyphToOps(glyph) {\n                var ops = [];\n                var path = glyph.path;\n                ops.push({ name: 'width', type: 'NUMBER', value: glyph.advanceWidth });\n                var x = 0;\n                var y = 0;\n                for (var i = 0; i < path.commands.length; i += 1) {\n                  var dx = void 0;\n                  var dy = void 0;\n                  var cmd = path.commands[i];\n                  if (cmd.type === 'Q') {\n                    // CFF only supports bézier curves, so convert the quad to a bézier.\n                    var _13 = 1 / 3;\n                    var _23 = 2 / 3;\n\n                    // We're going to create a new command so we don't change the original path.\n                    cmd = {\n                      type: 'C',\n                      x: cmd.x,\n                      y: cmd.y,\n                      x1: _13 * x + _23 * cmd.x1,\n                      y1: _13 * y + _23 * cmd.y1,\n                      x2: _13 * cmd.x + _23 * cmd.x1,\n                      y2: _13 * cmd.y + _23 * cmd.y1\n                    };\n                  }\n\n                  if (cmd.type === 'M') {\n                    dx = Math.round(cmd.x - x);\n                    dy = Math.round(cmd.y - y);\n                    ops.push({ name: 'dx', type: 'NUMBER', value: dx });\n                    ops.push({ name: 'dy', type: 'NUMBER', value: dy });\n                    ops.push({ name: 'rmoveto', type: 'OP', value: 21 });\n                    x = Math.round(cmd.x);\n                    y = Math.round(cmd.y);\n                  } else if (cmd.type === 'L') {\n                    dx = Math.round(cmd.x - x);\n                    dy = Math.round(cmd.y - y);\n                    ops.push({ name: 'dx', type: 'NUMBER', value: dx });\n                    ops.push({ name: 'dy', type: 'NUMBER', value: dy });\n                    ops.push({ name: 'rlineto', type: 'OP', value: 5 });\n                    x = Math.round(cmd.x);\n                    y = Math.round(cmd.y);\n                  } else if (cmd.type === 'C') {\n                    var dx1 = Math.round(cmd.x1 - x);\n                    var dy1 = Math.round(cmd.y1 - y);\n                    var dx2 = Math.round(cmd.x2 - cmd.x1);\n                    var dy2 = Math.round(cmd.y2 - cmd.y1);\n                    dx = Math.round(cmd.x - cmd.x2);\n                    dy = Math.round(cmd.y - cmd.y2);\n                    ops.push({ name: 'dx1', type: 'NUMBER', value: dx1 });\n                    ops.push({ name: 'dy1', type: 'NUMBER', value: dy1 });\n                    ops.push({ name: 'dx2', type: 'NUMBER', value: dx2 });\n                    ops.push({ name: 'dy2', type: 'NUMBER', value: dy2 });\n                    ops.push({ name: 'dx', type: 'NUMBER', value: dx });\n                    ops.push({ name: 'dy', type: 'NUMBER', value: dy });\n                    ops.push({ name: 'rrcurveto', type: 'OP', value: 8 });\n                    x = Math.round(cmd.x);\n                    y = Math.round(cmd.y);\n                  }\n\n                  // Contours are closed automatically.\n                }\n\n                ops.push({ name: 'endchar', type: 'OP', value: 14 });\n                return ops;\n              }\n\n              function makeCharStringsIndex(glyphs) {\n                var t = new table.Record('CharStrings INDEX', [\n                  { name: 'charStrings', type: 'INDEX', value: [] }\n                ]);\n\n                for (var i = 0; i < glyphs.length; i += 1) {\n                  var glyph = glyphs.get(i);\n                  var ops = glyphToOps(glyph);\n                  t.charStrings.push({ name: glyph.name, type: 'CHARSTRING', value: ops });\n                }\n\n                return t;\n              }\n\n              function makePrivateDict(attrs, strings) {\n                var t = new table.Record('Private DICT', [\n                  { name: 'dict', type: 'DICT', value: {} }\n                ]);\n                t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);\n                return t;\n              }\n\n              function makeCFFTable(glyphs, options) {\n                var t = new table.Table('CFF ', [\n                  { name: 'header', type: 'RECORD' },\n                  { name: 'nameIndex', type: 'RECORD' },\n                  { name: 'topDictIndex', type: 'RECORD' },\n                  { name: 'stringIndex', type: 'RECORD' },\n                  { name: 'globalSubrIndex', type: 'RECORD' },\n                  { name: 'charsets', type: 'RECORD' },\n                  { name: 'charStringsIndex', type: 'RECORD' },\n                  { name: 'privateDict', type: 'RECORD' }\n                ]);\n\n                var fontScale = 1 / options.unitsPerEm;\n                // We use non-zero values for the offsets so that the DICT encodes them.\n                // This is important because the size of the Top DICT plays a role in offset calculation,\n                // and the size shouldn't change after we've written correct offsets.\n                var attrs = {\n                  version: options.version,\n                  fullName: options.fullName,\n                  familyName: options.familyName,\n                  weight: options.weightName,\n                  fontBBox: options.fontBBox || [0, 0, 0, 0],\n                  fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],\n                  charset: 999,\n                  encoding: 0,\n                  charStrings: 999,\n                  private: [0, 999]\n                };\n\n                var privateAttrs = {};\n\n                var glyphNames = [];\n                var glyph;\n\n                // Skip first glyph (.notdef)\n                for (var i = 1; i < glyphs.length; i += 1) {\n                  glyph = glyphs.get(i);\n                  glyphNames.push(glyph.name);\n                }\n\n                var strings = [];\n\n                t.header = makeHeader();\n                t.nameIndex = makeNameIndex([options.postScriptName]);\n                var topDict = makeTopDict(attrs, strings);\n                t.topDictIndex = makeTopDictIndex(topDict);\n                t.globalSubrIndex = makeGlobalSubrIndex();\n                t.charsets = makeCharsets(glyphNames, strings);\n                t.charStringsIndex = makeCharStringsIndex(glyphs);\n                t.privateDict = makePrivateDict(privateAttrs, strings);\n\n                // Needs to come at the end, to encode all custom strings used in the font.\n                t.stringIndex = makeStringIndex(strings);\n\n                var startOffset =\n                  t.header.sizeOf() +\n                  t.nameIndex.sizeOf() +\n                  t.topDictIndex.sizeOf() +\n                  t.stringIndex.sizeOf() +\n                  t.globalSubrIndex.sizeOf();\n                attrs.charset = startOffset;\n\n                // We use the CFF standard encoding; proper encoding will be handled in cmap.\n                attrs.encoding = 0;\n                attrs.charStrings = attrs.charset + t.charsets.sizeOf();\n                attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();\n\n                // Recreate the Top DICT INDEX with the correct offsets.\n                topDict = makeTopDict(attrs, strings);\n                t.topDictIndex = makeTopDictIndex(topDict);\n\n                return t;\n              }\n\n              var cff = { parse: parseCFFTable, make: makeCFFTable };\n\n              // The `head` table contains global information about the font.\n\n              // Parse the header `head` table\n              function parseHeadTable(data, start) {\n                var head = {};\n                var p = new parse.Parser(data, start);\n                head.version = p.parseVersion();\n                head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;\n                head.checkSumAdjustment = p.parseULong();\n                head.magicNumber = p.parseULong();\n                check.argument(\n                  head.magicNumber === 0x5f0f3cf5,\n                  'Font header has wrong magic number.'\n                );\n                head.flags = p.parseUShort();\n                head.unitsPerEm = p.parseUShort();\n                head.created = p.parseLongDateTime();\n                head.modified = p.parseLongDateTime();\n                head.xMin = p.parseShort();\n                head.yMin = p.parseShort();\n                head.xMax = p.parseShort();\n                head.yMax = p.parseShort();\n                head.macStyle = p.parseUShort();\n                head.lowestRecPPEM = p.parseUShort();\n                head.fontDirectionHint = p.parseShort();\n                head.indexToLocFormat = p.parseShort();\n                head.glyphDataFormat = p.parseShort();\n                return head;\n              }\n\n              function makeHeadTable(options) {\n                // Apple Mac timestamp epoch is 01/01/1904 not 01/01/1970\n                var timestamp = Math.round(new Date().getTime() / 1000) + 2082844800;\n                var createdTimestamp = timestamp;\n\n                if (options.createdTimestamp) {\n                  createdTimestamp = options.createdTimestamp + 2082844800;\n                }\n\n                return new table.Table(\n                  'head',\n                  [\n                    { name: 'version', type: 'FIXED', value: 0x00010000 },\n                    { name: 'fontRevision', type: 'FIXED', value: 0x00010000 },\n                    { name: 'checkSumAdjustment', type: 'ULONG', value: 0 },\n                    { name: 'magicNumber', type: 'ULONG', value: 0x5f0f3cf5 },\n                    { name: 'flags', type: 'USHORT', value: 0 },\n                    { name: 'unitsPerEm', type: 'USHORT', value: 1000 },\n                    { name: 'created', type: 'LONGDATETIME', value: createdTimestamp },\n                    { name: 'modified', type: 'LONGDATETIME', value: timestamp },\n                    { name: 'xMin', type: 'SHORT', value: 0 },\n                    { name: 'yMin', type: 'SHORT', value: 0 },\n                    { name: 'xMax', type: 'SHORT', value: 0 },\n                    { name: 'yMax', type: 'SHORT', value: 0 },\n                    { name: 'macStyle', type: 'USHORT', value: 0 },\n                    { name: 'lowestRecPPEM', type: 'USHORT', value: 0 },\n                    { name: 'fontDirectionHint', type: 'SHORT', value: 2 },\n                    { name: 'indexToLocFormat', type: 'SHORT', value: 0 },\n                    { name: 'glyphDataFormat', type: 'SHORT', value: 0 }\n                  ],\n                  options\n                );\n              }\n\n              var head = { parse: parseHeadTable, make: makeHeadTable };\n\n              // The `hhea` table contains information for horizontal layout.\n\n              // Parse the horizontal header `hhea` table\n              function parseHheaTable(data, start) {\n                var hhea = {};\n                var p = new parse.Parser(data, start);\n                hhea.version = p.parseVersion();\n                hhea.ascender = p.parseShort();\n                hhea.descender = p.parseShort();\n                hhea.lineGap = p.parseShort();\n                hhea.advanceWidthMax = p.parseUShort();\n                hhea.minLeftSideBearing = p.parseShort();\n                hhea.minRightSideBearing = p.parseShort();\n                hhea.xMaxExtent = p.parseShort();\n                hhea.caretSlopeRise = p.parseShort();\n                hhea.caretSlopeRun = p.parseShort();\n                hhea.caretOffset = p.parseShort();\n                p.relativeOffset += 8;\n                hhea.metricDataFormat = p.parseShort();\n                hhea.numberOfHMetrics = p.parseUShort();\n                return hhea;\n              }\n\n              function makeHheaTable(options) {\n                return new table.Table(\n                  'hhea',\n                  [\n                    { name: 'version', type: 'FIXED', value: 0x00010000 },\n                    { name: 'ascender', type: 'FWORD', value: 0 },\n                    { name: 'descender', type: 'FWORD', value: 0 },\n                    { name: 'lineGap', type: 'FWORD', value: 0 },\n                    { name: 'advanceWidthMax', type: 'UFWORD', value: 0 },\n                    { name: 'minLeftSideBearing', type: 'FWORD', value: 0 },\n                    { name: 'minRightSideBearing', type: 'FWORD', value: 0 },\n                    { name: 'xMaxExtent', type: 'FWORD', value: 0 },\n                    { name: 'caretSlopeRise', type: 'SHORT', value: 1 },\n                    { name: 'caretSlopeRun', type: 'SHORT', value: 0 },\n                    { name: 'caretOffset', type: 'SHORT', value: 0 },\n                    { name: 'reserved1', type: 'SHORT', value: 0 },\n                    { name: 'reserved2', type: 'SHORT', value: 0 },\n                    { name: 'reserved3', type: 'SHORT', value: 0 },\n                    { name: 'reserved4', type: 'SHORT', value: 0 },\n                    { name: 'metricDataFormat', type: 'SHORT', value: 0 },\n                    { name: 'numberOfHMetrics', type: 'USHORT', value: 0 }\n                  ],\n                  options\n                );\n              }\n\n              var hhea = { parse: parseHheaTable, make: makeHheaTable };\n\n              // The `hmtx` table contains the horizontal metrics for all glyphs.\n\n              // Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.\n              // This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.\n              function parseHmtxTable(data, start, numMetrics, numGlyphs, glyphs) {\n                var advanceWidth;\n                var leftSideBearing;\n                var p = new parse.Parser(data, start);\n                for (var i = 0; i < numGlyphs; i += 1) {\n                  // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.\n                  if (i < numMetrics) {\n                    advanceWidth = p.parseUShort();\n                    leftSideBearing = p.parseShort();\n                  }\n\n                  var glyph = glyphs.get(i);\n                  glyph.advanceWidth = advanceWidth;\n                  glyph.leftSideBearing = leftSideBearing;\n                }\n              }\n\n              function makeHmtxTable(glyphs) {\n                var t = new table.Table('hmtx', []);\n                for (var i = 0; i < glyphs.length; i += 1) {\n                  var glyph = glyphs.get(i);\n                  var advanceWidth = glyph.advanceWidth || 0;\n                  var leftSideBearing = glyph.leftSideBearing || 0;\n                  t.fields.push({\n                    name: 'advanceWidth_' + i,\n                    type: 'USHORT',\n                    value: advanceWidth\n                  });\n                  t.fields.push({\n                    name: 'leftSideBearing_' + i,\n                    type: 'SHORT',\n                    value: leftSideBearing\n                  });\n                }\n\n                return t;\n              }\n\n              var hmtx = { parse: parseHmtxTable, make: makeHmtxTable };\n\n              // The `ltag` table stores IETF BCP-47 language tags. It allows supporting\n\n              function makeLtagTable(tags) {\n                var result = new table.Table('ltag', [\n                  { name: 'version', type: 'ULONG', value: 1 },\n                  { name: 'flags', type: 'ULONG', value: 0 },\n                  { name: 'numTags', type: 'ULONG', value: tags.length }\n                ]);\n\n                var stringPool = '';\n                var stringPoolOffset = 12 + tags.length * 4;\n                for (var i = 0; i < tags.length; ++i) {\n                  var pos = stringPool.indexOf(tags[i]);\n                  if (pos < 0) {\n                    pos = stringPool.length;\n                    stringPool += tags[i];\n                  }\n\n                  result.fields.push({\n                    name: 'offset ' + i,\n                    type: 'USHORT',\n                    value: stringPoolOffset + pos\n                  });\n                  result.fields.push({\n                    name: 'length ' + i,\n                    type: 'USHORT',\n                    value: tags[i].length\n                  });\n                }\n\n                result.fields.push({\n                  name: 'stringPool',\n                  type: 'CHARARRAY',\n                  value: stringPool\n                });\n                return result;\n              }\n\n              function parseLtagTable(data, start) {\n                var p = new parse.Parser(data, start);\n                var tableVersion = p.parseULong();\n                check.argument(tableVersion === 1, 'Unsupported ltag table version.');\n                // The 'ltag' specification does not define any flags; skip the field.\n                p.skip('uLong', 1);\n                var numTags = p.parseULong();\n\n                var tags = [];\n                for (var i = 0; i < numTags; i++) {\n                  var tag = '';\n                  var offset = start + p.parseUShort();\n                  var length = p.parseUShort();\n                  for (var j = offset; j < offset + length; ++j) {\n                    tag += String.fromCharCode(data.getInt8(j));\n                  }\n\n                  tags.push(tag);\n                }\n\n                return tags;\n              }\n\n              var ltag = { make: makeLtagTable, parse: parseLtagTable };\n\n              // The `maxp` table establishes the memory requirements for the font.\n\n              // Parse the maximum profile `maxp` table.\n              function parseMaxpTable(data, start) {\n                var maxp = {};\n                var p = new parse.Parser(data, start);\n                maxp.version = p.parseVersion();\n                maxp.numGlyphs = p.parseUShort();\n                if (maxp.version === 1.0) {\n                  maxp.maxPoints = p.parseUShort();\n                  maxp.maxContours = p.parseUShort();\n                  maxp.maxCompositePoints = p.parseUShort();\n                  maxp.maxCompositeContours = p.parseUShort();\n                  maxp.maxZones = p.parseUShort();\n                  maxp.maxTwilightPoints = p.parseUShort();\n                  maxp.maxStorage = p.parseUShort();\n                  maxp.maxFunctionDefs = p.parseUShort();\n                  maxp.maxInstructionDefs = p.parseUShort();\n                  maxp.maxStackElements = p.parseUShort();\n                  maxp.maxSizeOfInstructions = p.parseUShort();\n                  maxp.maxComponentElements = p.parseUShort();\n                  maxp.maxComponentDepth = p.parseUShort();\n                }\n\n                return maxp;\n              }\n\n              function makeMaxpTable(numGlyphs) {\n                return new table.Table('maxp', [\n                  { name: 'version', type: 'FIXED', value: 0x00005000 },\n                  { name: 'numGlyphs', type: 'USHORT', value: numGlyphs }\n                ]);\n              }\n\n              var maxp = { parse: parseMaxpTable, make: makeMaxpTable };\n\n              // The `name` naming table.\n\n              // NameIDs for the name table.\n              var nameTableNames = [\n                'copyright', // 0\n                'fontFamily', // 1\n                'fontSubfamily', // 2\n                'uniqueID', // 3\n                'fullName', // 4\n                'version', // 5\n                'postScriptName', // 6\n                'trademark', // 7\n                'manufacturer', // 8\n                'designer', // 9\n                'description', // 10\n                'manufacturerURL', // 11\n                'designerURL', // 12\n                'license', // 13\n                'licenseURL', // 14\n                'reserved', // 15\n                'preferredFamily', // 16\n                'preferredSubfamily', // 17\n                'compatibleFullName', // 18\n                'sampleText', // 19\n                'postScriptFindFontName', // 20\n                'wwsFamily', // 21\n                'wwsSubfamily' // 22\n              ];\n\n              var macLanguages = {\n                0: 'en',\n                1: 'fr',\n                2: 'de',\n                3: 'it',\n                4: 'nl',\n                5: 'sv',\n                6: 'es',\n                7: 'da',\n                8: 'pt',\n                9: 'no',\n                10: 'he',\n                11: 'ja',\n                12: 'ar',\n                13: 'fi',\n                14: 'el',\n                15: 'is',\n                16: 'mt',\n                17: 'tr',\n                18: 'hr',\n                19: 'zh-Hant',\n                20: 'ur',\n                21: 'hi',\n                22: 'th',\n                23: 'ko',\n                24: 'lt',\n                25: 'pl',\n                26: 'hu',\n                27: 'es',\n                28: 'lv',\n                29: 'se',\n                30: 'fo',\n                31: 'fa',\n                32: 'ru',\n                33: 'zh',\n                34: 'nl-BE',\n                35: 'ga',\n                36: 'sq',\n                37: 'ro',\n                38: 'cz',\n                39: 'sk',\n                40: 'si',\n                41: 'yi',\n                42: 'sr',\n                43: 'mk',\n                44: 'bg',\n                45: 'uk',\n                46: 'be',\n                47: 'uz',\n                48: 'kk',\n                49: 'az-Cyrl',\n                50: 'az-Arab',\n                51: 'hy',\n                52: 'ka',\n                53: 'mo',\n                54: 'ky',\n                55: 'tg',\n                56: 'tk',\n                57: 'mn-CN',\n                58: 'mn',\n                59: 'ps',\n                60: 'ks',\n                61: 'ku',\n                62: 'sd',\n                63: 'bo',\n                64: 'ne',\n                65: 'sa',\n                66: 'mr',\n                67: 'bn',\n                68: 'as',\n                69: 'gu',\n                70: 'pa',\n                71: 'or',\n                72: 'ml',\n                73: 'kn',\n                74: 'ta',\n                75: 'te',\n                76: 'si',\n                77: 'my',\n                78: 'km',\n                79: 'lo',\n                80: 'vi',\n                81: 'id',\n                82: 'tl',\n                83: 'ms',\n                84: 'ms-Arab',\n                85: 'am',\n                86: 'ti',\n                87: 'om',\n                88: 'so',\n                89: 'sw',\n                90: 'rw',\n                91: 'rn',\n                92: 'ny',\n                93: 'mg',\n                94: 'eo',\n                128: 'cy',\n                129: 'eu',\n                130: 'ca',\n                131: 'la',\n                132: 'qu',\n                133: 'gn',\n                134: 'ay',\n                135: 'tt',\n                136: 'ug',\n                137: 'dz',\n                138: 'jv',\n                139: 'su',\n                140: 'gl',\n                141: 'af',\n                142: 'br',\n                143: 'iu',\n                144: 'gd',\n                145: 'gv',\n                146: 'ga',\n                147: 'to',\n                148: 'el-polyton',\n                149: 'kl',\n                150: 'az',\n                151: 'nn'\n              };\n\n              // MacOS language ID → MacOS script ID\n              //\n              // Note that the script ID is not sufficient to determine what encoding\n              // to use in TrueType files. For some languages, MacOS used a modification\n              // of a mainstream script. For example, an Icelandic name would be stored\n              // with smRoman in the TrueType naming table, but the actual encoding\n              // is a special Icelandic version of the normal Macintosh Roman encoding.\n              // As another example, Inuktitut uses an 8-bit encoding for Canadian Aboriginal\n              // Syllables but MacOS had run out of available script codes, so this was\n              // done as a (pretty radical) \"modification\" of Ethiopic.\n              //\n              // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\n              var macLanguageToScript = {\n                0: 0, // langEnglish → smRoman\n                1: 0, // langFrench → smRoman\n                2: 0, // langGerman → smRoman\n                3: 0, // langItalian → smRoman\n                4: 0, // langDutch → smRoman\n                5: 0, // langSwedish → smRoman\n                6: 0, // langSpanish → smRoman\n                7: 0, // langDanish → smRoman\n                8: 0, // langPortuguese → smRoman\n                9: 0, // langNorwegian → smRoman\n                10: 5, // langHebrew → smHebrew\n                11: 1, // langJapanese → smJapanese\n                12: 4, // langArabic → smArabic\n                13: 0, // langFinnish → smRoman\n                14: 6, // langGreek → smGreek\n                15: 0, // langIcelandic → smRoman (modified)\n                16: 0, // langMaltese → smRoman\n                17: 0, // langTurkish → smRoman (modified)\n                18: 0, // langCroatian → smRoman (modified)\n                19: 2, // langTradChinese → smTradChinese\n                20: 4, // langUrdu → smArabic\n                21: 9, // langHindi → smDevanagari\n                22: 21, // langThai → smThai\n                23: 3, // langKorean → smKorean\n                24: 29, // langLithuanian → smCentralEuroRoman\n                25: 29, // langPolish → smCentralEuroRoman\n                26: 29, // langHungarian → smCentralEuroRoman\n                27: 29, // langEstonian → smCentralEuroRoman\n                28: 29, // langLatvian → smCentralEuroRoman\n                29: 0, // langSami → smRoman\n                30: 0, // langFaroese → smRoman (modified)\n                31: 4, // langFarsi → smArabic (modified)\n                32: 7, // langRussian → smCyrillic\n                33: 25, // langSimpChinese → smSimpChinese\n                34: 0, // langFlemish → smRoman\n                35: 0, // langIrishGaelic → smRoman (modified)\n                36: 0, // langAlbanian → smRoman\n                37: 0, // langRomanian → smRoman (modified)\n                38: 29, // langCzech → smCentralEuroRoman\n                39: 29, // langSlovak → smCentralEuroRoman\n                40: 0, // langSlovenian → smRoman (modified)\n                41: 5, // langYiddish → smHebrew\n                42: 7, // langSerbian → smCyrillic\n                43: 7, // langMacedonian → smCyrillic\n                44: 7, // langBulgarian → smCyrillic\n                45: 7, // langUkrainian → smCyrillic (modified)\n                46: 7, // langByelorussian → smCyrillic\n                47: 7, // langUzbek → smCyrillic\n                48: 7, // langKazakh → smCyrillic\n                49: 7, // langAzerbaijani → smCyrillic\n                50: 4, // langAzerbaijanAr → smArabic\n                51: 24, // langArmenian → smArmenian\n                52: 23, // langGeorgian → smGeorgian\n                53: 7, // langMoldavian → smCyrillic\n                54: 7, // langKirghiz → smCyrillic\n                55: 7, // langTajiki → smCyrillic\n                56: 7, // langTurkmen → smCyrillic\n                57: 27, // langMongolian → smMongolian\n                58: 7, // langMongolianCyr → smCyrillic\n                59: 4, // langPashto → smArabic\n                60: 4, // langKurdish → smArabic\n                61: 4, // langKashmiri → smArabic\n                62: 4, // langSindhi → smArabic\n                63: 26, // langTibetan → smTibetan\n                64: 9, // langNepali → smDevanagari\n                65: 9, // langSanskrit → smDevanagari\n                66: 9, // langMarathi → smDevanagari\n                67: 13, // langBengali → smBengali\n                68: 13, // langAssamese → smBengali\n                69: 11, // langGujarati → smGujarati\n                70: 10, // langPunjabi → smGurmukhi\n                71: 12, // langOriya → smOriya\n                72: 17, // langMalayalam → smMalayalam\n                73: 16, // langKannada → smKannada\n                74: 14, // langTamil → smTamil\n                75: 15, // langTelugu → smTelugu\n                76: 18, // langSinhalese → smSinhalese\n                77: 19, // langBurmese → smBurmese\n                78: 20, // langKhmer → smKhmer\n                79: 22, // langLao → smLao\n                80: 30, // langVietnamese → smVietnamese\n                81: 0, // langIndonesian → smRoman\n                82: 0, // langTagalog → smRoman\n                83: 0, // langMalayRoman → smRoman\n                84: 4, // langMalayArabic → smArabic\n                85: 28, // langAmharic → smEthiopic\n                86: 28, // langTigrinya → smEthiopic\n                87: 28, // langOromo → smEthiopic\n                88: 0, // langSomali → smRoman\n                89: 0, // langSwahili → smRoman\n                90: 0, // langKinyarwanda → smRoman\n                91: 0, // langRundi → smRoman\n                92: 0, // langNyanja → smRoman\n                93: 0, // langMalagasy → smRoman\n                94: 0, // langEsperanto → smRoman\n                128: 0, // langWelsh → smRoman (modified)\n                129: 0, // langBasque → smRoman\n                130: 0, // langCatalan → smRoman\n                131: 0, // langLatin → smRoman\n                132: 0, // langQuechua → smRoman\n                133: 0, // langGuarani → smRoman\n                134: 0, // langAymara → smRoman\n                135: 7, // langTatar → smCyrillic\n                136: 4, // langUighur → smArabic\n                137: 26, // langDzongkha → smTibetan\n                138: 0, // langJavaneseRom → smRoman\n                139: 0, // langSundaneseRom → smRoman\n                140: 0, // langGalician → smRoman\n                141: 0, // langAfrikaans → smRoman\n                142: 0, // langBreton → smRoman (modified)\n                143: 28, // langInuktitut → smEthiopic (modified)\n                144: 0, // langScottishGaelic → smRoman (modified)\n                145: 0, // langManxGaelic → smRoman (modified)\n                146: 0, // langIrishGaelicScript → smRoman (modified)\n                147: 0, // langTongan → smRoman\n                148: 6, // langGreekAncient → smRoman\n                149: 0, // langGreenlandic → smRoman\n                150: 0, // langAzerbaijanRoman → smRoman\n                151: 0 // langNynorsk → smRoman\n              };\n\n              // While Microsoft indicates a region/country for all its language\n              // IDs, we omit the region code if it's equal to the \"most likely\n              // region subtag\" according to Unicode CLDR. For scripts, we omit\n              // the subtag if it is equal to the Suppress-Script entry in the\n              // IANA language subtag registry for IETF BCP 47.\n              //\n              // For example, Microsoft states that its language code 0x041A is\n              // Croatian in Croatia. We transform this to the BCP 47 language code 'hr'\n              // and not 'hr-HR' because Croatia is the default country for Croatian,\n              // according to Unicode CLDR. As another example, Microsoft states\n              // that 0x101A is Croatian (Latin) in Bosnia-Herzegovina. We transform\n              // this to 'hr-BA' and not 'hr-Latn-BA' because Latin is the default script\n              // for the Croatian language, according to IANA.\n              //\n              // http://www.unicode.org/cldr/charts/latest/supplemental/likely_subtags.html\n              // http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\n              var windowsLanguages = {\n                0x0436: 'af',\n                0x041c: 'sq',\n                0x0484: 'gsw',\n                0x045e: 'am',\n                0x1401: 'ar-DZ',\n                0x3c01: 'ar-BH',\n                0x0c01: 'ar',\n                0x0801: 'ar-IQ',\n                0x2c01: 'ar-JO',\n                0x3401: 'ar-KW',\n                0x3001: 'ar-LB',\n                0x1001: 'ar-LY',\n                0x1801: 'ary',\n                0x2001: 'ar-OM',\n                0x4001: 'ar-QA',\n                0x0401: 'ar-SA',\n                0x2801: 'ar-SY',\n                0x1c01: 'aeb',\n                0x3801: 'ar-AE',\n                0x2401: 'ar-YE',\n                0x042b: 'hy',\n                0x044d: 'as',\n                0x082c: 'az-Cyrl',\n                0x042c: 'az',\n                0x046d: 'ba',\n                0x042d: 'eu',\n                0x0423: 'be',\n                0x0845: 'bn',\n                0x0445: 'bn-IN',\n                0x201a: 'bs-Cyrl',\n                0x141a: 'bs',\n                0x047e: 'br',\n                0x0402: 'bg',\n                0x0403: 'ca',\n                0x0c04: 'zh-HK',\n                0x1404: 'zh-MO',\n                0x0804: 'zh',\n                0x1004: 'zh-SG',\n                0x0404: 'zh-TW',\n                0x0483: 'co',\n                0x041a: 'hr',\n                0x101a: 'hr-BA',\n                0x0405: 'cs',\n                0x0406: 'da',\n                0x048c: 'prs',\n                0x0465: 'dv',\n                0x0813: 'nl-BE',\n                0x0413: 'nl',\n                0x0c09: 'en-AU',\n                0x2809: 'en-BZ',\n                0x1009: 'en-CA',\n                0x2409: 'en-029',\n                0x4009: 'en-IN',\n                0x1809: 'en-IE',\n                0x2009: 'en-JM',\n                0x4409: 'en-MY',\n                0x1409: 'en-NZ',\n                0x3409: 'en-PH',\n                0x4809: 'en-SG',\n                0x1c09: 'en-ZA',\n                0x2c09: 'en-TT',\n                0x0809: 'en-GB',\n                0x0409: 'en',\n                0x3009: 'en-ZW',\n                0x0425: 'et',\n                0x0438: 'fo',\n                0x0464: 'fil',\n                0x040b: 'fi',\n                0x080c: 'fr-BE',\n                0x0c0c: 'fr-CA',\n                0x040c: 'fr',\n                0x140c: 'fr-LU',\n                0x180c: 'fr-MC',\n                0x100c: 'fr-CH',\n                0x0462: 'fy',\n                0x0456: 'gl',\n                0x0437: 'ka',\n                0x0c07: 'de-AT',\n                0x0407: 'de',\n                0x1407: 'de-LI',\n                0x1007: 'de-LU',\n                0x0807: 'de-CH',\n                0x0408: 'el',\n                0x046f: 'kl',\n                0x0447: 'gu',\n                0x0468: 'ha',\n                0x040d: 'he',\n                0x0439: 'hi',\n                0x040e: 'hu',\n                0x040f: 'is',\n                0x0470: 'ig',\n                0x0421: 'id',\n                0x045d: 'iu',\n                0x085d: 'iu-Latn',\n                0x083c: 'ga',\n                0x0434: 'xh',\n                0x0435: 'zu',\n                0x0410: 'it',\n                0x0810: 'it-CH',\n                0x0411: 'ja',\n                0x044b: 'kn',\n                0x043f: 'kk',\n                0x0453: 'km',\n                0x0486: 'quc',\n                0x0487: 'rw',\n                0x0441: 'sw',\n                0x0457: 'kok',\n                0x0412: 'ko',\n                0x0440: 'ky',\n                0x0454: 'lo',\n                0x0426: 'lv',\n                0x0427: 'lt',\n                0x082e: 'dsb',\n                0x046e: 'lb',\n                0x042f: 'mk',\n                0x083e: 'ms-BN',\n                0x043e: 'ms',\n                0x044c: 'ml',\n                0x043a: 'mt',\n                0x0481: 'mi',\n                0x047a: 'arn',\n                0x044e: 'mr',\n                0x047c: 'moh',\n                0x0450: 'mn',\n                0x0850: 'mn-CN',\n                0x0461: 'ne',\n                0x0414: 'nb',\n                0x0814: 'nn',\n                0x0482: 'oc',\n                0x0448: 'or',\n                0x0463: 'ps',\n                0x0415: 'pl',\n                0x0416: 'pt',\n                0x0816: 'pt-PT',\n                0x0446: 'pa',\n                0x046b: 'qu-BO',\n                0x086b: 'qu-EC',\n                0x0c6b: 'qu',\n                0x0418: 'ro',\n                0x0417: 'rm',\n                0x0419: 'ru',\n                0x243b: 'smn',\n                0x103b: 'smj-NO',\n                0x143b: 'smj',\n                0x0c3b: 'se-FI',\n                0x043b: 'se',\n                0x083b: 'se-SE',\n                0x203b: 'sms',\n                0x183b: 'sma-NO',\n                0x1c3b: 'sms',\n                0x044f: 'sa',\n                0x1c1a: 'sr-Cyrl-BA',\n                0x0c1a: 'sr',\n                0x181a: 'sr-Latn-BA',\n                0x081a: 'sr-Latn',\n                0x046c: 'nso',\n                0x0432: 'tn',\n                0x045b: 'si',\n                0x041b: 'sk',\n                0x0424: 'sl',\n                0x2c0a: 'es-AR',\n                0x400a: 'es-BO',\n                0x340a: 'es-CL',\n                0x240a: 'es-CO',\n                0x140a: 'es-CR',\n                0x1c0a: 'es-DO',\n                0x300a: 'es-EC',\n                0x440a: 'es-SV',\n                0x100a: 'es-GT',\n                0x480a: 'es-HN',\n                0x080a: 'es-MX',\n                0x4c0a: 'es-NI',\n                0x180a: 'es-PA',\n                0x3c0a: 'es-PY',\n                0x280a: 'es-PE',\n                0x500a: 'es-PR',\n\n                // Microsoft has defined two different language codes for\n                // “Spanish with modern sorting” and “Spanish with traditional\n                // sorting”. This makes sense for collation APIs, and it would be\n                // possible to express this in BCP 47 language tags via Unicode\n                // extensions (eg., es-u-co-trad is Spanish with traditional\n                // sorting). However, for storing names in fonts, the distinction\n                // does not make sense, so we give “es” in both cases.\n                0x0c0a: 'es',\n                0x040a: 'es',\n\n                0x540a: 'es-US',\n                0x380a: 'es-UY',\n                0x200a: 'es-VE',\n                0x081d: 'sv-FI',\n                0x041d: 'sv',\n                0x045a: 'syr',\n                0x0428: 'tg',\n                0x085f: 'tzm',\n                0x0449: 'ta',\n                0x0444: 'tt',\n                0x044a: 'te',\n                0x041e: 'th',\n                0x0451: 'bo',\n                0x041f: 'tr',\n                0x0442: 'tk',\n                0x0480: 'ug',\n                0x0422: 'uk',\n                0x042e: 'hsb',\n                0x0420: 'ur',\n                0x0843: 'uz-Cyrl',\n                0x0443: 'uz',\n                0x042a: 'vi',\n                0x0452: 'cy',\n                0x0488: 'wo',\n                0x0485: 'sah',\n                0x0478: 'ii',\n                0x046a: 'yo'\n              };\n\n              // Returns a IETF BCP 47 language code, for example 'zh-Hant'\n              // for 'Chinese in the traditional script'.\n              function getLanguageCode(platformID, languageID, ltag) {\n                switch (platformID) {\n                  case 0: // Unicode\n                    if (languageID === 0xffff) {\n                      return 'und';\n                    } else if (ltag) {\n                      return ltag[languageID];\n                    }\n\n                    break;\n\n                  case 1: // Macintosh\n                    return macLanguages[languageID];\n\n                  case 3: // Windows\n                    return windowsLanguages[languageID];\n                }\n\n                return undefined;\n              }\n\n              var utf16 = 'utf-16';\n\n              // MacOS script ID → encoding. This table stores the default case,\n              // which can be overridden by macLanguageEncodings.\n              var macScriptEncodings = {\n                0: 'macintosh', // smRoman\n                1: 'x-mac-japanese', // smJapanese\n                2: 'x-mac-chinesetrad', // smTradChinese\n                3: 'x-mac-korean', // smKorean\n                6: 'x-mac-greek', // smGreek\n                7: 'x-mac-cyrillic', // smCyrillic\n                9: 'x-mac-devanagai', // smDevanagari\n                10: 'x-mac-gurmukhi', // smGurmukhi\n                11: 'x-mac-gujarati', // smGujarati\n                12: 'x-mac-oriya', // smOriya\n                13: 'x-mac-bengali', // smBengali\n                14: 'x-mac-tamil', // smTamil\n                15: 'x-mac-telugu', // smTelugu\n                16: 'x-mac-kannada', // smKannada\n                17: 'x-mac-malayalam', // smMalayalam\n                18: 'x-mac-sinhalese', // smSinhalese\n                19: 'x-mac-burmese', // smBurmese\n                20: 'x-mac-khmer', // smKhmer\n                21: 'x-mac-thai', // smThai\n                22: 'x-mac-lao', // smLao\n                23: 'x-mac-georgian', // smGeorgian\n                24: 'x-mac-armenian', // smArmenian\n                25: 'x-mac-chinesesimp', // smSimpChinese\n                26: 'x-mac-tibetan', // smTibetan\n                27: 'x-mac-mongolian', // smMongolian\n                28: 'x-mac-ethiopic', // smEthiopic\n                29: 'x-mac-ce', // smCentralEuroRoman\n                30: 'x-mac-vietnamese', // smVietnamese\n                31: 'x-mac-extarabic' // smExtArabic\n              };\n\n              // MacOS language ID → encoding. This table stores the exceptional\n              // cases, which override macScriptEncodings. For writing MacOS naming\n              // tables, we need to emit a MacOS script ID. Therefore, we cannot\n              // merge macScriptEncodings into macLanguageEncodings.\n              //\n              // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\n              var macLanguageEncodings = {\n                15: 'x-mac-icelandic', // langIcelandic\n                17: 'x-mac-turkish', // langTurkish\n                18: 'x-mac-croatian', // langCroatian\n                24: 'x-mac-ce', // langLithuanian\n                25: 'x-mac-ce', // langPolish\n                26: 'x-mac-ce', // langHungarian\n                27: 'x-mac-ce', // langEstonian\n                28: 'x-mac-ce', // langLatvian\n                30: 'x-mac-icelandic', // langFaroese\n                37: 'x-mac-romanian', // langRomanian\n                38: 'x-mac-ce', // langCzech\n                39: 'x-mac-ce', // langSlovak\n                40: 'x-mac-ce', // langSlovenian\n                143: 'x-mac-inuit', // langInuktitut\n                146: 'x-mac-gaelic' // langIrishGaelicScript\n              };\n\n              function getEncoding(platformID, encodingID, languageID) {\n                switch (platformID) {\n                  case 0: // Unicode\n                    return utf16;\n\n                  case 1: // Apple Macintosh\n                    return (\n                      macLanguageEncodings[languageID] || macScriptEncodings[encodingID]\n                    );\n\n                  case 3: // Microsoft Windows\n                    if (encodingID === 1 || encodingID === 10) {\n                      return utf16;\n                    }\n\n                    break;\n                }\n\n                return undefined;\n              }\n\n              // Parse the naming `name` table.\n              // FIXME: Format 1 additional fields are not supported yet.\n              // ltag is the content of the `ltag' table, such as ['en', 'zh-Hans', 'de-CH-1904'].\n              function parseNameTable(data, start, ltag) {\n                var name = {};\n                var p = new parse.Parser(data, start);\n                var format = p.parseUShort();\n                var count = p.parseUShort();\n                var stringOffset = p.offset + p.parseUShort();\n                for (var i = 0; i < count; i++) {\n                  var platformID = p.parseUShort();\n                  var encodingID = p.parseUShort();\n                  var languageID = p.parseUShort();\n                  var nameID = p.parseUShort();\n                  var property = nameTableNames[nameID] || nameID;\n                  var byteLength = p.parseUShort();\n                  var offset = p.parseUShort();\n                  var language = getLanguageCode(platformID, languageID, ltag);\n                  var encoding = getEncoding(platformID, encodingID, languageID);\n                  if (encoding !== undefined && language !== undefined) {\n                    var text = void 0;\n                    if (encoding === utf16) {\n                      text = decode.UTF16(data, stringOffset + offset, byteLength);\n                    } else {\n                      text = decode.MACSTRING(\n                        data,\n                        stringOffset + offset,\n                        byteLength,\n                        encoding\n                      );\n                    }\n\n                    if (text) {\n                      var translations = name[property];\n                      if (translations === undefined) {\n                        translations = name[property] = {};\n                      }\n\n                      translations[language] = text;\n                    }\n                  }\n                }\n\n                var langTagCount = 0;\n                if (format === 1) {\n                  // FIXME: Also handle Microsoft's 'name' table 1.\n                  langTagCount = p.parseUShort();\n                }\n\n                return name;\n              }\n\n              // {23: 'foo'} → {'foo': 23}\n              // ['bar', 'baz'] → {'bar': 0, 'baz': 1}\n              function reverseDict(dict) {\n                var result = {};\n                for (var key in dict) {\n                  result[dict[key]] = parseInt(key);\n                }\n\n                return result;\n              }\n\n              function makeNameRecord(\n                platformID,\n                encodingID,\n                languageID,\n                nameID,\n                length,\n                offset\n              ) {\n                return new table.Record('NameRecord', [\n                  { name: 'platformID', type: 'USHORT', value: platformID },\n                  { name: 'encodingID', type: 'USHORT', value: encodingID },\n                  { name: 'languageID', type: 'USHORT', value: languageID },\n                  { name: 'nameID', type: 'USHORT', value: nameID },\n                  { name: 'length', type: 'USHORT', value: length },\n                  { name: 'offset', type: 'USHORT', value: offset }\n                ]);\n              }\n\n              // Finds the position of needle in haystack, or -1 if not there.\n              // Like String.indexOf(), but for arrays.\n              function findSubArray(needle, haystack) {\n                var needleLength = needle.length;\n                var limit = haystack.length - needleLength + 1;\n\n                loop: for (var pos = 0; pos < limit; pos++) {\n                  for (; pos < limit; pos++) {\n                    for (var k = 0; k < needleLength; k++) {\n                      if (haystack[pos + k] !== needle[k]) {\n                        continue loop;\n                      }\n                    }\n\n                    return pos;\n                  }\n                }\n\n                return -1;\n              }\n\n              function addStringToPool(s, pool) {\n                var offset = findSubArray(s, pool);\n                if (offset < 0) {\n                  offset = pool.length;\n                  var i = 0;\n                  var len = s.length;\n                  for (; i < len; ++i) {\n                    pool.push(s[i]);\n                  }\n                }\n\n                return offset;\n              }\n\n              function makeNameTable(names, ltag) {\n                var nameID;\n                var nameIDs = [];\n\n                var namesWithNumericKeys = {};\n                var nameTableIds = reverseDict(nameTableNames);\n                for (var key in names) {\n                  var id = nameTableIds[key];\n                  if (id === undefined) {\n                    id = key;\n                  }\n\n                  nameID = parseInt(id);\n\n                  if (isNaN(nameID)) {\n                    throw new Error(\n                      'Name table entry \"' +\n                        key +\n                        '\" does not exist, see nameTableNames for complete list.'\n                    );\n                  }\n\n                  namesWithNumericKeys[nameID] = names[key];\n                  nameIDs.push(nameID);\n                }\n\n                var macLanguageIds = reverseDict(macLanguages);\n                var windowsLanguageIds = reverseDict(windowsLanguages);\n\n                var nameRecords = [];\n                var stringPool = [];\n\n                for (var i = 0; i < nameIDs.length; i++) {\n                  nameID = nameIDs[i];\n                  var translations = namesWithNumericKeys[nameID];\n                  for (var lang in translations) {\n                    var text = translations[lang];\n\n                    // For MacOS, we try to emit the name in the form that was introduced\n                    // in the initial version of the TrueType spec (in the late 1980s).\n                    // However, this can fail for various reasons: the requested BCP 47\n                    // language code might not have an old-style Mac equivalent;\n                    // we might not have a codec for the needed character encoding;\n                    // or the name might contain characters that cannot be expressed\n                    // in the old-style Macintosh encoding. In case of failure, we emit\n                    // the name in a more modern fashion (Unicode encoding with BCP 47\n                    // language tags) that is recognized by MacOS 10.5, released in 2009.\n                    // If fonts were only read by operating systems, we could simply\n                    // emit all names in the modern form; this would be much easier.\n                    // However, there are many applications and libraries that read\n                    // 'name' tables directly, and these will usually only recognize\n                    // the ancient form (silently skipping the unrecognized names).\n                    var macPlatform = 1; // Macintosh\n                    var macLanguage = macLanguageIds[lang];\n                    var macScript = macLanguageToScript[macLanguage];\n                    var macEncoding = getEncoding(macPlatform, macScript, macLanguage);\n                    var macName = encode.MACSTRING(text, macEncoding);\n                    if (macName === undefined) {\n                      macPlatform = 0; // Unicode\n                      macLanguage = ltag.indexOf(lang);\n                      if (macLanguage < 0) {\n                        macLanguage = ltag.length;\n                        ltag.push(lang);\n                      }\n\n                      macScript = 4; // Unicode 2.0 and later\n                      macName = encode.UTF16(text);\n                    }\n\n                    var macNameOffset = addStringToPool(macName, stringPool);\n                    nameRecords.push(\n                      makeNameRecord(\n                        macPlatform,\n                        macScript,\n                        macLanguage,\n                        nameID,\n                        macName.length,\n                        macNameOffset\n                      )\n                    );\n\n                    var winLanguage = windowsLanguageIds[lang];\n                    if (winLanguage !== undefined) {\n                      var winName = encode.UTF16(text);\n                      var winNameOffset = addStringToPool(winName, stringPool);\n                      nameRecords.push(\n                        makeNameRecord(\n                          3,\n                          1,\n                          winLanguage,\n                          nameID,\n                          winName.length,\n                          winNameOffset\n                        )\n                      );\n                    }\n                  }\n                }\n\n                nameRecords.sort(function(a, b) {\n                  return (\n                    a.platformID - b.platformID ||\n                    a.encodingID - b.encodingID ||\n                    a.languageID - b.languageID ||\n                    a.nameID - b.nameID\n                  );\n                });\n\n                var t = new table.Table('name', [\n                  { name: 'format', type: 'USHORT', value: 0 },\n                  { name: 'count', type: 'USHORT', value: nameRecords.length },\n                  {\n                    name: 'stringOffset',\n                    type: 'USHORT',\n                    value: 6 + nameRecords.length * 12\n                  }\n                ]);\n\n                for (var r = 0; r < nameRecords.length; r++) {\n                  t.fields.push({\n                    name: 'record_' + r,\n                    type: 'RECORD',\n                    value: nameRecords[r]\n                  });\n                }\n\n                t.fields.push({ name: 'strings', type: 'LITERAL', value: stringPool });\n                return t;\n              }\n\n              var _name = { parse: parseNameTable, make: makeNameTable };\n\n              // The `OS/2` table contains metrics required in OpenType fonts.\n\n              var unicodeRanges = [\n                { begin: 0x0000, end: 0x007f }, // Basic Latin\n                { begin: 0x0080, end: 0x00ff }, // Latin-1 Supplement\n                { begin: 0x0100, end: 0x017f }, // Latin Extended-A\n                { begin: 0x0180, end: 0x024f }, // Latin Extended-B\n                { begin: 0x0250, end: 0x02af }, // IPA Extensions\n                { begin: 0x02b0, end: 0x02ff }, // Spacing Modifier Letters\n                { begin: 0x0300, end: 0x036f }, // Combining Diacritical Marks\n                { begin: 0x0370, end: 0x03ff }, // Greek and Coptic\n                { begin: 0x2c80, end: 0x2cff }, // Coptic\n                { begin: 0x0400, end: 0x04ff }, // Cyrillic\n                { begin: 0x0530, end: 0x058f }, // Armenian\n                { begin: 0x0590, end: 0x05ff }, // Hebrew\n                { begin: 0xa500, end: 0xa63f }, // Vai\n                { begin: 0x0600, end: 0x06ff }, // Arabic\n                { begin: 0x07c0, end: 0x07ff }, // NKo\n                { begin: 0x0900, end: 0x097f }, // Devanagari\n                { begin: 0x0980, end: 0x09ff }, // Bengali\n                { begin: 0x0a00, end: 0x0a7f }, // Gurmukhi\n                { begin: 0x0a80, end: 0x0aff }, // Gujarati\n                { begin: 0x0b00, end: 0x0b7f }, // Oriya\n                { begin: 0x0b80, end: 0x0bff }, // Tamil\n                { begin: 0x0c00, end: 0x0c7f }, // Telugu\n                { begin: 0x0c80, end: 0x0cff }, // Kannada\n                { begin: 0x0d00, end: 0x0d7f }, // Malayalam\n                { begin: 0x0e00, end: 0x0e7f }, // Thai\n                { begin: 0x0e80, end: 0x0eff }, // Lao\n                { begin: 0x10a0, end: 0x10ff }, // Georgian\n                { begin: 0x1b00, end: 0x1b7f }, // Balinese\n                { begin: 0x1100, end: 0x11ff }, // Hangul Jamo\n                { begin: 0x1e00, end: 0x1eff }, // Latin Extended Additional\n                { begin: 0x1f00, end: 0x1fff }, // Greek Extended\n                { begin: 0x2000, end: 0x206f }, // General Punctuation\n                { begin: 0x2070, end: 0x209f }, // Superscripts And Subscripts\n                { begin: 0x20a0, end: 0x20cf }, // Currency Symbol\n                { begin: 0x20d0, end: 0x20ff }, // Combining Diacritical Marks For Symbols\n                { begin: 0x2100, end: 0x214f }, // Letterlike Symbols\n                { begin: 0x2150, end: 0x218f }, // Number Forms\n                { begin: 0x2190, end: 0x21ff }, // Arrows\n                { begin: 0x2200, end: 0x22ff }, // Mathematical Operators\n                { begin: 0x2300, end: 0x23ff }, // Miscellaneous Technical\n                { begin: 0x2400, end: 0x243f }, // Control Pictures\n                { begin: 0x2440, end: 0x245f }, // Optical Character Recognition\n                { begin: 0x2460, end: 0x24ff }, // Enclosed Alphanumerics\n                { begin: 0x2500, end: 0x257f }, // Box Drawing\n                { begin: 0x2580, end: 0x259f }, // Block Elements\n                { begin: 0x25a0, end: 0x25ff }, // Geometric Shapes\n                { begin: 0x2600, end: 0x26ff }, // Miscellaneous Symbols\n                { begin: 0x2700, end: 0x27bf }, // Dingbats\n                { begin: 0x3000, end: 0x303f }, // CJK Symbols And Punctuation\n                { begin: 0x3040, end: 0x309f }, // Hiragana\n                { begin: 0x30a0, end: 0x30ff }, // Katakana\n                { begin: 0x3100, end: 0x312f }, // Bopomofo\n                { begin: 0x3130, end: 0x318f }, // Hangul Compatibility Jamo\n                { begin: 0xa840, end: 0xa87f }, // Phags-pa\n                { begin: 0x3200, end: 0x32ff }, // Enclosed CJK Letters And Months\n                { begin: 0x3300, end: 0x33ff }, // CJK Compatibility\n                { begin: 0xac00, end: 0xd7af }, // Hangul Syllables\n                { begin: 0xd800, end: 0xdfff }, // Non-Plane 0 *\n                { begin: 0x10900, end: 0x1091f }, // Phoenicia\n                { begin: 0x4e00, end: 0x9fff }, // CJK Unified Ideographs\n                { begin: 0xe000, end: 0xf8ff }, // Private Use Area (plane 0)\n                { begin: 0x31c0, end: 0x31ef }, // CJK Strokes\n                { begin: 0xfb00, end: 0xfb4f }, // Alphabetic Presentation Forms\n                { begin: 0xfb50, end: 0xfdff }, // Arabic Presentation Forms-A\n                { begin: 0xfe20, end: 0xfe2f }, // Combining Half Marks\n                { begin: 0xfe10, end: 0xfe1f }, // Vertical Forms\n                { begin: 0xfe50, end: 0xfe6f }, // Small Form Variants\n                { begin: 0xfe70, end: 0xfeff }, // Arabic Presentation Forms-B\n                { begin: 0xff00, end: 0xffef }, // Halfwidth And Fullwidth Forms\n                { begin: 0xfff0, end: 0xffff }, // Specials\n                { begin: 0x0f00, end: 0x0fff }, // Tibetan\n                { begin: 0x0700, end: 0x074f }, // Syriac\n                { begin: 0x0780, end: 0x07bf }, // Thaana\n                { begin: 0x0d80, end: 0x0dff }, // Sinhala\n                { begin: 0x1000, end: 0x109f }, // Myanmar\n                { begin: 0x1200, end: 0x137f }, // Ethiopic\n                { begin: 0x13a0, end: 0x13ff }, // Cherokee\n                { begin: 0x1400, end: 0x167f }, // Unified Canadian Aboriginal Syllabics\n                { begin: 0x1680, end: 0x169f }, // Ogham\n                { begin: 0x16a0, end: 0x16ff }, // Runic\n                { begin: 0x1780, end: 0x17ff }, // Khmer\n                { begin: 0x1800, end: 0x18af }, // Mongolian\n                { begin: 0x2800, end: 0x28ff }, // Braille Patterns\n                { begin: 0xa000, end: 0xa48f }, // Yi Syllables\n                { begin: 0x1700, end: 0x171f }, // Tagalog\n                { begin: 0x10300, end: 0x1032f }, // Old Italic\n                { begin: 0x10330, end: 0x1034f }, // Gothic\n                { begin: 0x10400, end: 0x1044f }, // Deseret\n                { begin: 0x1d000, end: 0x1d0ff }, // Byzantine Musical Symbols\n                { begin: 0x1d400, end: 0x1d7ff }, // Mathematical Alphanumeric Symbols\n                { begin: 0xff000, end: 0xffffd }, // Private Use (plane 15)\n                { begin: 0xfe00, end: 0xfe0f }, // Variation Selectors\n                { begin: 0xe0000, end: 0xe007f }, // Tags\n                { begin: 0x1900, end: 0x194f }, // Limbu\n                { begin: 0x1950, end: 0x197f }, // Tai Le\n                { begin: 0x1980, end: 0x19df }, // New Tai Lue\n                { begin: 0x1a00, end: 0x1a1f }, // Buginese\n                { begin: 0x2c00, end: 0x2c5f }, // Glagolitic\n                { begin: 0x2d30, end: 0x2d7f }, // Tifinagh\n                { begin: 0x4dc0, end: 0x4dff }, // Yijing Hexagram Symbols\n                { begin: 0xa800, end: 0xa82f }, // Syloti Nagri\n                { begin: 0x10000, end: 0x1007f }, // Linear B Syllabary\n                { begin: 0x10140, end: 0x1018f }, // Ancient Greek Numbers\n                { begin: 0x10380, end: 0x1039f }, // Ugaritic\n                { begin: 0x103a0, end: 0x103df }, // Old Persian\n                { begin: 0x10450, end: 0x1047f }, // Shavian\n                { begin: 0x10480, end: 0x104af }, // Osmanya\n                { begin: 0x10800, end: 0x1083f }, // Cypriot Syllabary\n                { begin: 0x10a00, end: 0x10a5f }, // Kharoshthi\n                { begin: 0x1d300, end: 0x1d35f }, // Tai Xuan Jing Symbols\n                { begin: 0x12000, end: 0x123ff }, // Cuneiform\n                { begin: 0x1d360, end: 0x1d37f }, // Counting Rod Numerals\n                { begin: 0x1b80, end: 0x1bbf }, // Sundanese\n                { begin: 0x1c00, end: 0x1c4f }, // Lepcha\n                { begin: 0x1c50, end: 0x1c7f }, // Ol Chiki\n                { begin: 0xa880, end: 0xa8df }, // Saurashtra\n                { begin: 0xa900, end: 0xa92f }, // Kayah Li\n                { begin: 0xa930, end: 0xa95f }, // Rejang\n                { begin: 0xaa00, end: 0xaa5f }, // Cham\n                { begin: 0x10190, end: 0x101cf }, // Ancient Symbols\n                { begin: 0x101d0, end: 0x101ff }, // Phaistos Disc\n                { begin: 0x102a0, end: 0x102df }, // Carian\n                { begin: 0x1f030, end: 0x1f09f } // Domino Tiles\n              ];\n\n              function getUnicodeRange(unicode) {\n                for (var i = 0; i < unicodeRanges.length; i += 1) {\n                  var range = unicodeRanges[i];\n                  if (unicode >= range.begin && unicode < range.end) {\n                    return i;\n                  }\n                }\n\n                return -1;\n              }\n\n              // Parse the OS/2 and Windows metrics `OS/2` table\n              function parseOS2Table(data, start) {\n                var os2 = {};\n                var p = new parse.Parser(data, start);\n                os2.version = p.parseUShort();\n                os2.xAvgCharWidth = p.parseShort();\n                os2.usWeightClass = p.parseUShort();\n                os2.usWidthClass = p.parseUShort();\n                os2.fsType = p.parseUShort();\n                os2.ySubscriptXSize = p.parseShort();\n                os2.ySubscriptYSize = p.parseShort();\n                os2.ySubscriptXOffset = p.parseShort();\n                os2.ySubscriptYOffset = p.parseShort();\n                os2.ySuperscriptXSize = p.parseShort();\n                os2.ySuperscriptYSize = p.parseShort();\n                os2.ySuperscriptXOffset = p.parseShort();\n                os2.ySuperscriptYOffset = p.parseShort();\n                os2.yStrikeoutSize = p.parseShort();\n                os2.yStrikeoutPosition = p.parseShort();\n                os2.sFamilyClass = p.parseShort();\n                os2.panose = [];\n                for (var i = 0; i < 10; i++) {\n                  os2.panose[i] = p.parseByte();\n                }\n\n                os2.ulUnicodeRange1 = p.parseULong();\n                os2.ulUnicodeRange2 = p.parseULong();\n                os2.ulUnicodeRange3 = p.parseULong();\n                os2.ulUnicodeRange4 = p.parseULong();\n                os2.achVendID = String.fromCharCode(\n                  p.parseByte(),\n                  p.parseByte(),\n                  p.parseByte(),\n                  p.parseByte()\n                );\n                os2.fsSelection = p.parseUShort();\n                os2.usFirstCharIndex = p.parseUShort();\n                os2.usLastCharIndex = p.parseUShort();\n                os2.sTypoAscender = p.parseShort();\n                os2.sTypoDescender = p.parseShort();\n                os2.sTypoLineGap = p.parseShort();\n                os2.usWinAscent = p.parseUShort();\n                os2.usWinDescent = p.parseUShort();\n                if (os2.version >= 1) {\n                  os2.ulCodePageRange1 = p.parseULong();\n                  os2.ulCodePageRange2 = p.parseULong();\n                }\n\n                if (os2.version >= 2) {\n                  os2.sxHeight = p.parseShort();\n                  os2.sCapHeight = p.parseShort();\n                  os2.usDefaultChar = p.parseUShort();\n                  os2.usBreakChar = p.parseUShort();\n                  os2.usMaxContent = p.parseUShort();\n                }\n\n                return os2;\n              }\n\n              function makeOS2Table(options) {\n                return new table.Table(\n                  'OS/2',\n                  [\n                    { name: 'version', type: 'USHORT', value: 0x0003 },\n                    { name: 'xAvgCharWidth', type: 'SHORT', value: 0 },\n                    { name: 'usWeightClass', type: 'USHORT', value: 0 },\n                    { name: 'usWidthClass', type: 'USHORT', value: 0 },\n                    { name: 'fsType', type: 'USHORT', value: 0 },\n                    { name: 'ySubscriptXSize', type: 'SHORT', value: 650 },\n                    { name: 'ySubscriptYSize', type: 'SHORT', value: 699 },\n                    { name: 'ySubscriptXOffset', type: 'SHORT', value: 0 },\n                    { name: 'ySubscriptYOffset', type: 'SHORT', value: 140 },\n                    { name: 'ySuperscriptXSize', type: 'SHORT', value: 650 },\n                    { name: 'ySuperscriptYSize', type: 'SHORT', value: 699 },\n                    { name: 'ySuperscriptXOffset', type: 'SHORT', value: 0 },\n                    { name: 'ySuperscriptYOffset', type: 'SHORT', value: 479 },\n                    { name: 'yStrikeoutSize', type: 'SHORT', value: 49 },\n                    { name: 'yStrikeoutPosition', type: 'SHORT', value: 258 },\n                    { name: 'sFamilyClass', type: 'SHORT', value: 0 },\n                    { name: 'bFamilyType', type: 'BYTE', value: 0 },\n                    { name: 'bSerifStyle', type: 'BYTE', value: 0 },\n                    { name: 'bWeight', type: 'BYTE', value: 0 },\n                    { name: 'bProportion', type: 'BYTE', value: 0 },\n                    { name: 'bContrast', type: 'BYTE', value: 0 },\n                    { name: 'bStrokeVariation', type: 'BYTE', value: 0 },\n                    { name: 'bArmStyle', type: 'BYTE', value: 0 },\n                    { name: 'bLetterform', type: 'BYTE', value: 0 },\n                    { name: 'bMidline', type: 'BYTE', value: 0 },\n                    { name: 'bXHeight', type: 'BYTE', value: 0 },\n                    { name: 'ulUnicodeRange1', type: 'ULONG', value: 0 },\n                    { name: 'ulUnicodeRange2', type: 'ULONG', value: 0 },\n                    { name: 'ulUnicodeRange3', type: 'ULONG', value: 0 },\n                    { name: 'ulUnicodeRange4', type: 'ULONG', value: 0 },\n                    { name: 'achVendID', type: 'CHARARRAY', value: 'XXXX' },\n                    { name: 'fsSelection', type: 'USHORT', value: 0 },\n                    { name: 'usFirstCharIndex', type: 'USHORT', value: 0 },\n                    { name: 'usLastCharIndex', type: 'USHORT', value: 0 },\n                    { name: 'sTypoAscender', type: 'SHORT', value: 0 },\n                    { name: 'sTypoDescender', type: 'SHORT', value: 0 },\n                    { name: 'sTypoLineGap', type: 'SHORT', value: 0 },\n                    { name: 'usWinAscent', type: 'USHORT', value: 0 },\n                    { name: 'usWinDescent', type: 'USHORT', value: 0 },\n                    { name: 'ulCodePageRange1', type: 'ULONG', value: 0 },\n                    { name: 'ulCodePageRange2', type: 'ULONG', value: 0 },\n                    { name: 'sxHeight', type: 'SHORT', value: 0 },\n                    { name: 'sCapHeight', type: 'SHORT', value: 0 },\n                    { name: 'usDefaultChar', type: 'USHORT', value: 0 },\n                    { name: 'usBreakChar', type: 'USHORT', value: 0 },\n                    { name: 'usMaxContext', type: 'USHORT', value: 0 }\n                  ],\n                  options\n                );\n              }\n\n              var os2 = {\n                parse: parseOS2Table,\n                make: makeOS2Table,\n                unicodeRanges: unicodeRanges,\n                getUnicodeRange: getUnicodeRange\n              };\n\n              // The `post` table stores additional PostScript information, such as glyph names.\n\n              // Parse the PostScript `post` table\n              function parsePostTable(data, start) {\n                var post = {};\n                var p = new parse.Parser(data, start);\n                post.version = p.parseVersion();\n                post.italicAngle = p.parseFixed();\n                post.underlinePosition = p.parseShort();\n                post.underlineThickness = p.parseShort();\n                post.isFixedPitch = p.parseULong();\n                post.minMemType42 = p.parseULong();\n                post.maxMemType42 = p.parseULong();\n                post.minMemType1 = p.parseULong();\n                post.maxMemType1 = p.parseULong();\n                switch (post.version) {\n                  case 1:\n                    post.names = standardNames.slice();\n                    break;\n                  case 2:\n                    post.numberOfGlyphs = p.parseUShort();\n                    post.glyphNameIndex = new Array(post.numberOfGlyphs);\n                    for (var i = 0; i < post.numberOfGlyphs; i++) {\n                      post.glyphNameIndex[i] = p.parseUShort();\n                    }\n\n                    post.names = [];\n                    for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {\n                      if (post.glyphNameIndex[i$1] >= standardNames.length) {\n                        var nameLength = p.parseChar();\n                        post.names.push(p.parseString(nameLength));\n                      }\n                    }\n\n                    break;\n                  case 2.5:\n                    post.numberOfGlyphs = p.parseUShort();\n                    post.offset = new Array(post.numberOfGlyphs);\n                    for (var i$2 = 0; i$2 < post.numberOfGlyphs; i$2++) {\n                      post.offset[i$2] = p.parseChar();\n                    }\n\n                    break;\n                }\n                return post;\n              }\n\n              function makePostTable() {\n                return new table.Table('post', [\n                  { name: 'version', type: 'FIXED', value: 0x00030000 },\n                  { name: 'italicAngle', type: 'FIXED', value: 0 },\n                  { name: 'underlinePosition', type: 'FWORD', value: 0 },\n                  { name: 'underlineThickness', type: 'FWORD', value: 0 },\n                  { name: 'isFixedPitch', type: 'ULONG', value: 0 },\n                  { name: 'minMemType42', type: 'ULONG', value: 0 },\n                  { name: 'maxMemType42', type: 'ULONG', value: 0 },\n                  { name: 'minMemType1', type: 'ULONG', value: 0 },\n                  { name: 'maxMemType1', type: 'ULONG', value: 0 }\n                ]);\n              }\n\n              var post = { parse: parsePostTable, make: makePostTable };\n\n              // The `GSUB` table contains ligatures, among other things.\n\n              var subtableParsers = new Array(9); // subtableParsers[0] is unused\n\n              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS\n              subtableParsers[1] = function parseLookup1() {\n                var start = this.offset + this.relativeOffset;\n                var substFormat = this.parseUShort();\n                if (substFormat === 1) {\n                  return {\n                    substFormat: 1,\n                    coverage: this.parsePointer(Parser.coverage),\n                    deltaGlyphId: this.parseUShort()\n                  };\n                } else if (substFormat === 2) {\n                  return {\n                    substFormat: 2,\n                    coverage: this.parsePointer(Parser.coverage),\n                    substitute: this.parseOffset16List()\n                  };\n                }\n                check.assert(\n                  false,\n                  '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.'\n                );\n              };\n\n              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS\n              subtableParsers[2] = function parseLookup2() {\n                var substFormat = this.parseUShort();\n                check.argument(\n                  substFormat === 1,\n                  'GSUB Multiple Substitution Subtable identifier-format must be 1'\n                );\n                return {\n                  substFormat: substFormat,\n                  coverage: this.parsePointer(Parser.coverage),\n                  sequences: this.parseListOfLists()\n                };\n              };\n\n              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS\n              subtableParsers[3] = function parseLookup3() {\n                var substFormat = this.parseUShort();\n                check.argument(\n                  substFormat === 1,\n                  'GSUB Alternate Substitution Subtable identifier-format must be 1'\n                );\n                return {\n                  substFormat: substFormat,\n                  coverage: this.parsePointer(Parser.coverage),\n                  alternateSets: this.parseListOfLists()\n                };\n              };\n\n              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS\n              subtableParsers[4] = function parseLookup4() {\n                var substFormat = this.parseUShort();\n                check.argument(\n                  substFormat === 1,\n                  'GSUB ligature table identifier-format must be 1'\n                );\n                return {\n                  substFormat: substFormat,\n                  coverage: this.parsePointer(Parser.coverage),\n                  ligatureSets: this.parseListOfLists(function() {\n                    return {\n                      ligGlyph: this.parseUShort(),\n                      components: this.parseUShortList(this.parseUShort() - 1)\n                    };\n                  })\n                };\n              };\n\n              var lookupRecordDesc = {\n                sequenceIndex: Parser.uShort,\n                lookupListIndex: Parser.uShort\n              };\n\n              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF\n              subtableParsers[5] = function parseLookup5() {\n                var start = this.offset + this.relativeOffset;\n                var substFormat = this.parseUShort();\n\n                if (substFormat === 1) {\n                  return {\n                    substFormat: substFormat,\n                    coverage: this.parsePointer(Parser.coverage),\n                    ruleSets: this.parseListOfLists(function() {\n                      var glyphCount = this.parseUShort();\n                      var substCount = this.parseUShort();\n                      return {\n                        input: this.parseUShortList(glyphCount - 1),\n                        lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n                      };\n                    })\n                  };\n                } else if (substFormat === 2) {\n                  return {\n                    substFormat: substFormat,\n                    coverage: this.parsePointer(Parser.coverage),\n                    classDef: this.parsePointer(Parser.classDef),\n                    classSets: this.parseListOfLists(function() {\n                      var glyphCount = this.parseUShort();\n                      var substCount = this.parseUShort();\n                      return {\n                        classes: this.parseUShortList(glyphCount - 1),\n                        lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n                      };\n                    })\n                  };\n                } else if (substFormat === 3) {\n                  var glyphCount = this.parseUShort();\n                  var substCount = this.parseUShort();\n                  return {\n                    substFormat: substFormat,\n                    coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),\n                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n                  };\n                }\n                check.assert(\n                  false,\n                  '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.'\n                );\n              };\n\n              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC\n              subtableParsers[6] = function parseLookup6() {\n                var start = this.offset + this.relativeOffset;\n                var substFormat = this.parseUShort();\n                if (substFormat === 1) {\n                  return {\n                    substFormat: 1,\n                    coverage: this.parsePointer(Parser.coverage),\n                    chainRuleSets: this.parseListOfLists(function() {\n                      return {\n                        backtrack: this.parseUShortList(),\n                        input: this.parseUShortList(this.parseShort() - 1),\n                        lookahead: this.parseUShortList(),\n                        lookupRecords: this.parseRecordList(lookupRecordDesc)\n                      };\n                    })\n                  };\n                } else if (substFormat === 2) {\n                  return {\n                    substFormat: 2,\n                    coverage: this.parsePointer(Parser.coverage),\n                    backtrackClassDef: this.parsePointer(Parser.classDef),\n                    inputClassDef: this.parsePointer(Parser.classDef),\n                    lookaheadClassDef: this.parsePointer(Parser.classDef),\n                    chainClassSet: this.parseListOfLists(function() {\n                      return {\n                        backtrack: this.parseUShortList(),\n                        input: this.parseUShortList(this.parseShort() - 1),\n                        lookahead: this.parseUShortList(),\n                        lookupRecords: this.parseRecordList(lookupRecordDesc)\n                      };\n                    })\n                  };\n                } else if (substFormat === 3) {\n                  return {\n                    substFormat: 3,\n                    backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n                    inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n                    lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n                  };\n                }\n                check.assert(\n                  false,\n                  '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.'\n                );\n              };\n\n              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES\n              subtableParsers[7] = function parseLookup7() {\n                // Extension Substitution subtable\n                var substFormat = this.parseUShort();\n                check.argument(\n                  substFormat === 1,\n                  'GSUB Extension Substitution subtable identifier-format must be 1'\n                );\n                var extensionLookupType = this.parseUShort();\n                var extensionParser = new Parser(\n                  this.data,\n                  this.offset + this.parseULong()\n                );\n                return {\n                  substFormat: 1,\n                  lookupType: extensionLookupType,\n                  extension: subtableParsers[extensionLookupType].call(extensionParser)\n                };\n              };\n\n              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS\n              subtableParsers[8] = function parseLookup8() {\n                var substFormat = this.parseUShort();\n                check.argument(\n                  substFormat === 1,\n                  'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1'\n                );\n                return {\n                  substFormat: substFormat,\n                  coverage: this.parsePointer(Parser.coverage),\n                  backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n                  lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n                  substitutes: this.parseUShortList()\n                };\n              };\n\n              // https://www.microsoft.com/typography/OTSPEC/gsub.htm\n              function parseGsubTable(data, start) {\n                start = start || 0;\n                var p = new Parser(data, start);\n                var tableVersion = p.parseVersion(1);\n                check.argument(\n                  tableVersion === 1 || tableVersion === 1.1,\n                  'Unsupported GSUB table version.'\n                );\n                if (tableVersion === 1) {\n                  return {\n                    version: tableVersion,\n                    scripts: p.parseScriptList(),\n                    features: p.parseFeatureList(),\n                    lookups: p.parseLookupList(subtableParsers)\n                  };\n                } else {\n                  return {\n                    version: tableVersion,\n                    scripts: p.parseScriptList(),\n                    features: p.parseFeatureList(),\n                    lookups: p.parseLookupList(subtableParsers),\n                    variations: p.parseFeatureVariationsList()\n                  };\n                }\n              }\n\n              // GSUB Writing //////////////////////////////////////////////\n              var subtableMakers = new Array(9);\n\n              subtableMakers[1] = function makeLookup1(subtable) {\n                if (subtable.substFormat === 1) {\n                  return new table.Table('substitutionTable', [\n                    { name: 'substFormat', type: 'USHORT', value: 1 },\n                    {\n                      name: 'coverage',\n                      type: 'TABLE',\n                      value: new table.Coverage(subtable.coverage)\n                    },\n                    { name: 'deltaGlyphID', type: 'USHORT', value: subtable.deltaGlyphId }\n                  ]);\n                } else {\n                  return new table.Table(\n                    'substitutionTable',\n                    [\n                      { name: 'substFormat', type: 'USHORT', value: 2 },\n                      {\n                        name: 'coverage',\n                        type: 'TABLE',\n                        value: new table.Coverage(subtable.coverage)\n                      }\n                    ].concat(table.ushortList('substitute', subtable.substitute))\n                  );\n                }\n                check.fail('Lookup type 1 substFormat must be 1 or 2.');\n              };\n\n              subtableMakers[3] = function makeLookup3(subtable) {\n                check.assert(\n                  subtable.substFormat === 1,\n                  'Lookup type 3 substFormat must be 1.'\n                );\n                return new table.Table(\n                  'substitutionTable',\n                  [\n                    { name: 'substFormat', type: 'USHORT', value: 1 },\n                    {\n                      name: 'coverage',\n                      type: 'TABLE',\n                      value: new table.Coverage(subtable.coverage)\n                    }\n                  ].concat(\n                    table.tableList('altSet', subtable.alternateSets, function(\n                      alternateSet\n                    ) {\n                      return new table.Table(\n                        'alternateSetTable',\n                        table.ushortList('alternate', alternateSet)\n                      );\n                    })\n                  )\n                );\n              };\n\n              subtableMakers[4] = function makeLookup4(subtable) {\n                check.assert(\n                  subtable.substFormat === 1,\n                  'Lookup type 4 substFormat must be 1.'\n                );\n                return new table.Table(\n                  'substitutionTable',\n                  [\n                    { name: 'substFormat', type: 'USHORT', value: 1 },\n                    {\n                      name: 'coverage',\n                      type: 'TABLE',\n                      value: new table.Coverage(subtable.coverage)\n                    }\n                  ].concat(\n                    table.tableList('ligSet', subtable.ligatureSets, function(ligatureSet) {\n                      return new table.Table(\n                        'ligatureSetTable',\n                        table.tableList('ligature', ligatureSet, function(ligature) {\n                          return new table.Table(\n                            'ligatureTable',\n                            [\n                              { name: 'ligGlyph', type: 'USHORT', value: ligature.ligGlyph }\n                            ].concat(\n                              table.ushortList(\n                                'component',\n                                ligature.components,\n                                ligature.components.length + 1\n                              )\n                            )\n                          );\n                        })\n                      );\n                    })\n                  )\n                );\n              };\n\n              function makeGsubTable(gsub) {\n                return new table.Table('GSUB', [\n                  { name: 'version', type: 'ULONG', value: 0x10000 },\n                  {\n                    name: 'scripts',\n                    type: 'TABLE',\n                    value: new table.ScriptList(gsub.scripts)\n                  },\n                  {\n                    name: 'features',\n                    type: 'TABLE',\n                    value: new table.FeatureList(gsub.features)\n                  },\n                  {\n                    name: 'lookups',\n                    type: 'TABLE',\n                    value: new table.LookupList(gsub.lookups, subtableMakers)\n                  }\n                ]);\n              }\n\n              var gsub = { parse: parseGsubTable, make: makeGsubTable };\n\n              // The `GPOS` table contains kerning pairs, among other things.\n\n              // Parse the metadata `meta` table.\n              // https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html\n              function parseMetaTable(data, start) {\n                var p = new parse.Parser(data, start);\n                var tableVersion = p.parseULong();\n                check.argument(tableVersion === 1, 'Unsupported META table version.');\n                p.parseULong(); // flags - currently unused and set to 0\n                p.parseULong(); // tableOffset\n                var numDataMaps = p.parseULong();\n\n                var tags = {};\n                for (var i = 0; i < numDataMaps; i++) {\n                  var tag = p.parseTag();\n                  var dataOffset = p.parseULong();\n                  var dataLength = p.parseULong();\n                  var text = decode.UTF8(data, start + dataOffset, dataLength);\n\n                  tags[tag] = text;\n                }\n                return tags;\n              }\n\n              function makeMetaTable(tags) {\n                var numTags = Object.keys(tags).length;\n                var stringPool = '';\n                var stringPoolOffset = 16 + numTags * 12;\n\n                var result = new table.Table('meta', [\n                  { name: 'version', type: 'ULONG', value: 1 },\n                  { name: 'flags', type: 'ULONG', value: 0 },\n                  { name: 'offset', type: 'ULONG', value: stringPoolOffset },\n                  { name: 'numTags', type: 'ULONG', value: numTags }\n                ]);\n\n                for (var tag in tags) {\n                  var pos = stringPool.length;\n                  stringPool += tags[tag];\n\n                  result.fields.push({ name: 'tag ' + tag, type: 'TAG', value: tag });\n                  result.fields.push({\n                    name: 'offset ' + tag,\n                    type: 'ULONG',\n                    value: stringPoolOffset + pos\n                  });\n                  result.fields.push({\n                    name: 'length ' + tag,\n                    type: 'ULONG',\n                    value: tags[tag].length\n                  });\n                }\n\n                result.fields.push({\n                  name: 'stringPool',\n                  type: 'CHARARRAY',\n                  value: stringPool\n                });\n\n                return result;\n              }\n\n              var meta = { parse: parseMetaTable, make: makeMetaTable };\n\n              // The `sfnt` wrapper provides organization for the tables in the font.\n\n              function log2(v) {\n                return (Math.log(v) / Math.log(2)) | 0;\n              }\n\n              function computeCheckSum(bytes) {\n                while (bytes.length % 4 !== 0) {\n                  bytes.push(0);\n                }\n\n                var sum = 0;\n                for (var i = 0; i < bytes.length; i += 4) {\n                  sum +=\n                    (bytes[i] << 24) +\n                    (bytes[i + 1] << 16) +\n                    (bytes[i + 2] << 8) +\n                    bytes[i + 3];\n                }\n\n                sum %= Math.pow(2, 32);\n                return sum;\n              }\n\n              function makeTableRecord(tag, checkSum, offset, length) {\n                return new table.Record('Table Record', [\n                  { name: 'tag', type: 'TAG', value: tag !== undefined ? tag : '' },\n                  {\n                    name: 'checkSum',\n                    type: 'ULONG',\n                    value: checkSum !== undefined ? checkSum : 0\n                  },\n                  {\n                    name: 'offset',\n                    type: 'ULONG',\n                    value: offset !== undefined ? offset : 0\n                  },\n                  {\n                    name: 'length',\n                    type: 'ULONG',\n                    value: length !== undefined ? length : 0\n                  }\n                ]);\n              }\n\n              function makeSfntTable(tables) {\n                var sfnt = new table.Table('sfnt', [\n                  { name: 'version', type: 'TAG', value: 'OTTO' },\n                  { name: 'numTables', type: 'USHORT', value: 0 },\n                  { name: 'searchRange', type: 'USHORT', value: 0 },\n                  { name: 'entrySelector', type: 'USHORT', value: 0 },\n                  { name: 'rangeShift', type: 'USHORT', value: 0 }\n                ]);\n                sfnt.tables = tables;\n                sfnt.numTables = tables.length;\n                var highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));\n                sfnt.searchRange = 16 * highestPowerOf2;\n                sfnt.entrySelector = log2(highestPowerOf2);\n                sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;\n\n                var recordFields = [];\n                var tableFields = [];\n\n                var offset = sfnt.sizeOf() + makeTableRecord().sizeOf() * sfnt.numTables;\n                while (offset % 4 !== 0) {\n                  offset += 1;\n                  tableFields.push({ name: 'padding', type: 'BYTE', value: 0 });\n                }\n\n                for (var i = 0; i < tables.length; i += 1) {\n                  var t = tables[i];\n                  check.argument(\n                    t.tableName.length === 4,\n                    'Table name' + t.tableName + ' is invalid.'\n                  );\n                  var tableLength = t.sizeOf();\n                  var tableRecord = makeTableRecord(\n                    t.tableName,\n                    computeCheckSum(t.encode()),\n                    offset,\n                    tableLength\n                  );\n                  recordFields.push({\n                    name: tableRecord.tag + ' Table Record',\n                    type: 'RECORD',\n                    value: tableRecord\n                  });\n                  tableFields.push({\n                    name: t.tableName + ' table',\n                    type: 'RECORD',\n                    value: t\n                  });\n                  offset += tableLength;\n                  check.argument(\n                    !isNaN(offset),\n                    'Something went wrong calculating the offset.'\n                  );\n                  while (offset % 4 !== 0) {\n                    offset += 1;\n                    tableFields.push({ name: 'padding', type: 'BYTE', value: 0 });\n                  }\n                }\n\n                // Table records need to be sorted alphabetically.\n                recordFields.sort(function(r1, r2) {\n                  if (r1.value.tag > r2.value.tag) {\n                    return 1;\n                  } else {\n                    return -1;\n                  }\n                });\n\n                sfnt.fields = sfnt.fields.concat(recordFields);\n                sfnt.fields = sfnt.fields.concat(tableFields);\n                return sfnt;\n              }\n\n              // Get the metrics for a character. If the string has more than one character\n              // this function returns metrics for the first available character.\n              // You can provide optional fallback metrics if no characters are available.\n              function metricsForChar(font, chars, notFoundMetrics) {\n                for (var i = 0; i < chars.length; i += 1) {\n                  var glyphIndex = font.charToGlyphIndex(chars[i]);\n                  if (glyphIndex > 0) {\n                    var glyph = font.glyphs.get(glyphIndex);\n                    return glyph.getMetrics();\n                  }\n                }\n\n                return notFoundMetrics;\n              }\n\n              function average(vs) {\n                var sum = 0;\n                for (var i = 0; i < vs.length; i += 1) {\n                  sum += vs[i];\n                }\n\n                return sum / vs.length;\n              }\n\n              // Convert the font object to a SFNT data structure.\n              // This structure contains all the necessary tables and metadata to create a binary OTF file.\n              function fontToSfntTable(font) {\n                var xMins = [];\n                var yMins = [];\n                var xMaxs = [];\n                var yMaxs = [];\n                var advanceWidths = [];\n                var leftSideBearings = [];\n                var rightSideBearings = [];\n                var firstCharIndex;\n                var lastCharIndex = 0;\n                var ulUnicodeRange1 = 0;\n                var ulUnicodeRange2 = 0;\n                var ulUnicodeRange3 = 0;\n                var ulUnicodeRange4 = 0;\n\n                for (var i = 0; i < font.glyphs.length; i += 1) {\n                  var glyph = font.glyphs.get(i);\n                  var unicode = glyph.unicode | 0;\n\n                  if (isNaN(glyph.advanceWidth)) {\n                    throw new Error(\n                      'Glyph ' + glyph.name + ' (' + i + '): advanceWidth is not a number.'\n                    );\n                  }\n\n                  if (firstCharIndex > unicode || firstCharIndex === undefined) {\n                    // ignore .notdef char\n                    if (unicode > 0) {\n                      firstCharIndex = unicode;\n                    }\n                  }\n\n                  if (lastCharIndex < unicode) {\n                    lastCharIndex = unicode;\n                  }\n\n                  var position = os2.getUnicodeRange(unicode);\n                  if (position < 32) {\n                    ulUnicodeRange1 |= 1 << position;\n                  } else if (position < 64) {\n                    ulUnicodeRange2 |= 1 << (position - 32);\n                  } else if (position < 96) {\n                    ulUnicodeRange3 |= 1 << (position - 64);\n                  } else if (position < 123) {\n                    ulUnicodeRange4 |= 1 << (position - 96);\n                  } else {\n                    throw new Error(\n                      'Unicode ranges bits > 123 are reserved for internal usage'\n                    );\n                  }\n                  // Skip non-important characters.\n                  if (glyph.name === '.notdef') {\n                    continue;\n                  }\n                  var metrics = glyph.getMetrics();\n                  xMins.push(metrics.xMin);\n                  yMins.push(metrics.yMin);\n                  xMaxs.push(metrics.xMax);\n                  yMaxs.push(metrics.yMax);\n                  leftSideBearings.push(metrics.leftSideBearing);\n                  rightSideBearings.push(metrics.rightSideBearing);\n                  advanceWidths.push(glyph.advanceWidth);\n                }\n\n                var globals = {\n                  xMin: Math.min.apply(null, xMins),\n                  yMin: Math.min.apply(null, yMins),\n                  xMax: Math.max.apply(null, xMaxs),\n                  yMax: Math.max.apply(null, yMaxs),\n                  advanceWidthMax: Math.max.apply(null, advanceWidths),\n                  advanceWidthAvg: average(advanceWidths),\n                  minLeftSideBearing: Math.min.apply(null, leftSideBearings),\n                  maxLeftSideBearing: Math.max.apply(null, leftSideBearings),\n                  minRightSideBearing: Math.min.apply(null, rightSideBearings)\n                };\n                globals.ascender = font.ascender;\n                globals.descender = font.descender;\n\n                var headTable = head.make({\n                  flags: 3, // 00000011 (baseline for font at y=0; left sidebearing point at x=0)\n                  unitsPerEm: font.unitsPerEm,\n                  xMin: globals.xMin,\n                  yMin: globals.yMin,\n                  xMax: globals.xMax,\n                  yMax: globals.yMax,\n                  lowestRecPPEM: 3,\n                  createdTimestamp: font.createdTimestamp\n                });\n\n                var hheaTable = hhea.make({\n                  ascender: globals.ascender,\n                  descender: globals.descender,\n                  advanceWidthMax: globals.advanceWidthMax,\n                  minLeftSideBearing: globals.minLeftSideBearing,\n                  minRightSideBearing: globals.minRightSideBearing,\n                  xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),\n                  numberOfHMetrics: font.glyphs.length\n                });\n\n                var maxpTable = maxp.make(font.glyphs.length);\n\n                var os2Table = os2.make({\n                  xAvgCharWidth: Math.round(globals.advanceWidthAvg),\n                  usWeightClass: font.tables.os2.usWeightClass,\n                  usWidthClass: font.tables.os2.usWidthClass,\n                  usFirstCharIndex: firstCharIndex,\n                  usLastCharIndex: lastCharIndex,\n                  ulUnicodeRange1: ulUnicodeRange1,\n                  ulUnicodeRange2: ulUnicodeRange2,\n                  ulUnicodeRange3: ulUnicodeRange3,\n                  ulUnicodeRange4: ulUnicodeRange4,\n                  fsSelection: font.tables.os2.fsSelection, // REGULAR\n                  // See http://typophile.com/node/13081 for more info on vertical metrics.\n                  // We get metrics for typical characters (such as \"x\" for xHeight).\n                  // We provide some fallback characters if characters are unavailable: their\n                  // ordering was chosen experimentally.\n                  sTypoAscender: globals.ascender,\n                  sTypoDescender: globals.descender,\n                  sTypoLineGap: 0,\n                  usWinAscent: globals.yMax,\n                  usWinDescent: Math.abs(globals.yMin),\n                  ulCodePageRange1: 1, // FIXME: hard-code Latin 1 support for now\n                  sxHeight: metricsForChar(font, 'xyvw', {\n                    yMax: Math.round(globals.ascender / 2)\n                  }).yMax,\n                  sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals)\n                    .yMax,\n                  usDefaultChar: font.hasChar(' ') ? 32 : 0, // Use space as the default character, if available.\n                  usBreakChar: font.hasChar(' ') ? 32 : 0 // Use space as the break character, if available.\n                });\n\n                var hmtxTable = hmtx.make(font.glyphs);\n                var cmapTable = cmap.make(font.glyphs);\n\n                var englishFamilyName = font.getEnglishName('fontFamily');\n                var englishStyleName = font.getEnglishName('fontSubfamily');\n                var englishFullName = englishFamilyName + ' ' + englishStyleName;\n                var postScriptName = font.getEnglishName('postScriptName');\n                if (!postScriptName) {\n                  postScriptName =\n                    englishFamilyName.replace(/\\s/g, '') + '-' + englishStyleName;\n                }\n\n                var names = {};\n                for (var n in font.names) {\n                  names[n] = font.names[n];\n                }\n\n                if (!names.uniqueID) {\n                  names.uniqueID = {\n                    en: font.getEnglishName('manufacturer') + ':' + englishFullName\n                  };\n                }\n\n                if (!names.postScriptName) {\n                  names.postScriptName = { en: postScriptName };\n                }\n\n                if (!names.preferredFamily) {\n                  names.preferredFamily = font.names.fontFamily;\n                }\n\n                if (!names.preferredSubfamily) {\n                  names.preferredSubfamily = font.names.fontSubfamily;\n                }\n\n                var languageTags = [];\n                var nameTable = _name.make(names, languageTags);\n                var ltagTable =\n                  languageTags.length > 0 ? ltag.make(languageTags) : undefined;\n\n                var postTable = post.make();\n                var cffTable = cff.make(font.glyphs, {\n                  version: font.getEnglishName('version'),\n                  fullName: englishFullName,\n                  familyName: englishFamilyName,\n                  weightName: englishStyleName,\n                  postScriptName: postScriptName,\n                  unitsPerEm: font.unitsPerEm,\n                  fontBBox: [0, globals.yMin, globals.ascender, globals.advanceWidthMax]\n                });\n\n                var metaTable =\n                  font.metas && Object.keys(font.metas).length > 0\n                    ? meta.make(font.metas)\n                    : undefined;\n\n                // The order does not matter because makeSfntTable() will sort them.\n                var tables = [\n                  headTable,\n                  hheaTable,\n                  maxpTable,\n                  os2Table,\n                  nameTable,\n                  cmapTable,\n                  postTable,\n                  cffTable,\n                  hmtxTable\n                ];\n                if (ltagTable) {\n                  tables.push(ltagTable);\n                }\n                // Optional tables\n                if (font.tables.gsub) {\n                  tables.push(gsub.make(font.tables.gsub));\n                }\n                if (metaTable) {\n                  tables.push(metaTable);\n                }\n\n                var sfntTable = makeSfntTable(tables);\n\n                // Compute the font's checkSum and store it in head.checkSumAdjustment.\n                var bytes = sfntTable.encode();\n                var checkSum = computeCheckSum(bytes);\n                var tableFields = sfntTable.fields;\n                var checkSumAdjusted = false;\n                for (var i$1 = 0; i$1 < tableFields.length; i$1 += 1) {\n                  if (tableFields[i$1].name === 'head table') {\n                    tableFields[i$1].value.checkSumAdjustment = 0xb1b0afba - checkSum;\n                    checkSumAdjusted = true;\n                    break;\n                  }\n                }\n\n                if (!checkSumAdjusted) {\n                  throw new Error('Could not find head table with checkSum to adjust.');\n                }\n\n                return sfntTable;\n              }\n\n              var sfnt = {\n                make: makeSfntTable,\n                fontToTable: fontToSfntTable,\n                computeCheckSum: computeCheckSum\n              };\n\n              // The Layout object is the prototype of Substitution objects, and provides\n\n              function searchTag(arr, tag) {\n                /* jshint bitwise: false */\n                var imin = 0;\n                var imax = arr.length - 1;\n                while (imin <= imax) {\n                  var imid = (imin + imax) >>> 1;\n                  var val = arr[imid].tag;\n                  if (val === tag) {\n                    return imid;\n                  } else if (val < tag) {\n                    imin = imid + 1;\n                  } else {\n                    imax = imid - 1;\n                  }\n                }\n                // Not found: return -1-insertion point\n                return -imin - 1;\n              }\n\n              function binSearch(arr, value) {\n                /* jshint bitwise: false */\n                var imin = 0;\n                var imax = arr.length - 1;\n                while (imin <= imax) {\n                  var imid = (imin + imax) >>> 1;\n                  var val = arr[imid];\n                  if (val === value) {\n                    return imid;\n                  } else if (val < value) {\n                    imin = imid + 1;\n                  } else {\n                    imax = imid - 1;\n                  }\n                }\n                // Not found: return -1-insertion point\n                return -imin - 1;\n              }\n\n              // binary search in a list of ranges (coverage, class definition)\n              function searchRange(ranges, value) {\n                // jshint bitwise: false\n                var range;\n                var imin = 0;\n                var imax = ranges.length - 1;\n                while (imin <= imax) {\n                  var imid = (imin + imax) >>> 1;\n                  range = ranges[imid];\n                  var start = range.start;\n                  if (start === value) {\n                    return range;\n                  } else if (start < value) {\n                    imin = imid + 1;\n                  } else {\n                    imax = imid - 1;\n                  }\n                }\n                if (imin > 0) {\n                  range = ranges[imin - 1];\n                  if (value > range.end) {\n                    return 0;\n                  }\n                  return range;\n                }\n              }\n\n              /**\n               * @exports opentype.Layout\n               * @class\n               */\n              function Layout(font, tableName) {\n                this.font = font;\n                this.tableName = tableName;\n              }\n\n              Layout.prototype = {\n                /**\n                 * Binary search an object by \"tag\" property\n                 * @instance\n                 * @function searchTag\n                 * @memberof opentype.Layout\n                 * @param  {Array} arr\n                 * @param  {string} tag\n                 * @return {number}\n                 */\n                searchTag: searchTag,\n\n                /**\n                 * Binary search in a list of numbers\n                 * @instance\n                 * @function binSearch\n                 * @memberof opentype.Layout\n                 * @param  {Array} arr\n                 * @param  {number} value\n                 * @return {number}\n                 */\n                binSearch: binSearch,\n\n                /**\n                 * Get or create the Layout table (GSUB, GPOS etc).\n                 * @param  {boolean} create - Whether to create a new one.\n                 * @return {Object} The GSUB or GPOS table.\n                 */\n                getTable: function(create) {\n                  var layout = this.font.tables[this.tableName];\n                  if (!layout && create) {\n                    layout = this.font.tables[this.tableName] = this.createDefaultTable();\n                  }\n                  return layout;\n                },\n\n                /**\n                 * Returns all scripts in the substitution table.\n                 * @instance\n                 * @return {Array}\n                 */\n                getScriptNames: function() {\n                  var layout = this.getTable();\n                  if (!layout) {\n                    return [];\n                  }\n                  return layout.scripts.map(function(script) {\n                    return script.tag;\n                  });\n                },\n\n                /**\n                 * Returns the best bet for a script name.\n                 * Returns 'DFLT' if it exists.\n                 * If not, returns 'latn' if it exists.\n                 * If neither exist, returns undefined.\n                 */\n                getDefaultScriptName: function() {\n                  var layout = this.getTable();\n                  if (!layout) {\n                    return;\n                  }\n                  var hasLatn = false;\n                  for (var i = 0; i < layout.scripts.length; i++) {\n                    var name = layout.scripts[i].tag;\n                    if (name === 'DFLT') {\n                      return name;\n                    }\n                    if (name === 'latn') {\n                      hasLatn = true;\n                    }\n                  }\n                  if (hasLatn) {\n                    return 'latn';\n                  }\n                },\n\n                /**\n                 * Returns all LangSysRecords in the given script.\n                 * @instance\n                 * @param {string} [script='DFLT']\n                 * @param {boolean} create - forces the creation of this script table if it doesn't exist.\n                 * @return {Object} An object with tag and script properties.\n                 */\n                getScriptTable: function(script, create) {\n                  var layout = this.getTable(create);\n                  if (layout) {\n                    script = script || 'DFLT';\n                    var scripts = layout.scripts;\n                    var pos = searchTag(layout.scripts, script);\n                    if (pos >= 0) {\n                      return scripts[pos].script;\n                    } else if (create) {\n                      var scr = {\n                        tag: script,\n                        script: {\n                          defaultLangSys: {\n                            reserved: 0,\n                            reqFeatureIndex: 0xffff,\n                            featureIndexes: []\n                          },\n                          langSysRecords: []\n                        }\n                      };\n                      scripts.splice(-1 - pos, 0, scr);\n                      return scr.script;\n                    }\n                  }\n                },\n\n                /**\n                 * Returns a language system table\n                 * @instance\n                 * @param {string} [script='DFLT']\n                 * @param {string} [language='dlft']\n                 * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.\n                 * @return {Object}\n                 */\n                getLangSysTable: function(script, language, create) {\n                  var scriptTable = this.getScriptTable(script, create);\n                  if (scriptTable) {\n                    if (!language || language === 'dflt' || language === 'DFLT') {\n                      return scriptTable.defaultLangSys;\n                    }\n                    var pos = searchTag(scriptTable.langSysRecords, language);\n                    if (pos >= 0) {\n                      return scriptTable.langSysRecords[pos].langSys;\n                    } else if (create) {\n                      var langSysRecord = {\n                        tag: language,\n                        langSys: {\n                          reserved: 0,\n                          reqFeatureIndex: 0xffff,\n                          featureIndexes: []\n                        }\n                      };\n                      scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);\n                      return langSysRecord.langSys;\n                    }\n                  }\n                },\n\n                /**\n                 * Get a specific feature table.\n                 * @instance\n                 * @param {string} [script='DFLT']\n                 * @param {string} [language='dlft']\n                 * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm\n                 * @param {boolean} create - forces the creation of the feature table if it doesn't exist.\n                 * @return {Object}\n                 */\n                getFeatureTable: function(script, language, feature, create) {\n                  var langSysTable = this.getLangSysTable(script, language, create);\n                  if (langSysTable) {\n                    var featureRecord;\n                    var featIndexes = langSysTable.featureIndexes;\n                    var allFeatures = this.font.tables[this.tableName].features;\n                    // The FeatureIndex array of indices is in arbitrary order,\n                    // even if allFeatures is sorted alphabetically by feature tag.\n                    for (var i = 0; i < featIndexes.length; i++) {\n                      featureRecord = allFeatures[featIndexes[i]];\n                      if (featureRecord.tag === feature) {\n                        return featureRecord.feature;\n                      }\n                    }\n                    if (create) {\n                      var index = allFeatures.length;\n                      // Automatic ordering of features would require to shift feature indexes in the script list.\n                      check.assert(\n                        index === 0 || feature >= allFeatures[index - 1].tag,\n                        'Features must be added in alphabetical order.'\n                      );\n                      featureRecord = {\n                        tag: feature,\n                        feature: { params: 0, lookupListIndexes: [] }\n                      };\n                      allFeatures.push(featureRecord);\n                      featIndexes.push(index);\n                      return featureRecord.feature;\n                    }\n                  }\n                },\n\n                /**\n                 * Get the lookup tables of a given type for a script/language/feature.\n                 * @instance\n                 * @param {string} [script='DFLT']\n                 * @param {string} [language='dlft']\n                 * @param {string} feature - 4-letter feature code\n                 * @param {number} lookupType - 1 to 9\n                 * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.\n                 * @return {Object[]}\n                 */\n                getLookupTables: function(script, language, feature, lookupType, create) {\n                  var featureTable = this.getFeatureTable(\n                    script,\n                    language,\n                    feature,\n                    create\n                  );\n                  var tables = [];\n                  if (featureTable) {\n                    var lookupTable;\n                    var lookupListIndexes = featureTable.lookupListIndexes;\n                    var allLookups = this.font.tables[this.tableName].lookups;\n                    // lookupListIndexes are in no particular order, so use naive search.\n                    for (var i = 0; i < lookupListIndexes.length; i++) {\n                      lookupTable = allLookups[lookupListIndexes[i]];\n                      if (lookupTable.lookupType === lookupType) {\n                        tables.push(lookupTable);\n                      }\n                    }\n                    if (tables.length === 0 && create) {\n                      lookupTable = {\n                        lookupType: lookupType,\n                        lookupFlag: 0,\n                        subtables: [],\n                        markFilteringSet: undefined\n                      };\n                      var index = allLookups.length;\n                      allLookups.push(lookupTable);\n                      lookupListIndexes.push(index);\n                      return [lookupTable];\n                    }\n                  }\n                  return tables;\n                },\n\n                /**\n                 * Find a glyph in a class definition table\n                 * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table\n                 * @param {object} classDefTable - an OpenType Layout class definition table\n                 * @param {number} glyphIndex - the index of the glyph to find\n                 * @returns {number} -1 if not found\n                 */\n                getGlyphClass: function(classDefTable, glyphIndex) {\n                  switch (classDefTable.format) {\n                    case 1:\n                      if (\n                        classDefTable.startGlyph <= glyphIndex &&\n                        glyphIndex < classDefTable.startGlyph + classDefTable.classes.length\n                      ) {\n                        return classDefTable.classes[glyphIndex - classDefTable.startGlyph];\n                      }\n                      return 0;\n                    case 2:\n                      var range = searchRange(classDefTable.ranges, glyphIndex);\n                      return range ? range.classId : 0;\n                  }\n                },\n\n                /**\n                 * Find a glyph in a coverage table\n                 * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table\n                 * @param {object} coverageTable - an OpenType Layout coverage table\n                 * @param {number} glyphIndex - the index of the glyph to find\n                 * @returns {number} -1 if not found\n                 */\n                getCoverageIndex: function(coverageTable, glyphIndex) {\n                  switch (coverageTable.format) {\n                    case 1:\n                      var index = binSearch(coverageTable.glyphs, glyphIndex);\n                      return index >= 0 ? index : -1;\n                    case 2:\n                      var range = searchRange(coverageTable.ranges, glyphIndex);\n                      return range ? range.index + glyphIndex - range.start : -1;\n                  }\n                },\n\n                /**\n                 * Returns the list of glyph indexes of a coverage table.\n                 * Format 1: the list is stored raw\n                 * Format 2: compact list as range records.\n                 * @instance\n                 * @param  {Object} coverageTable\n                 * @return {Array}\n                 */\n                expandCoverage: function(coverageTable) {\n                  if (coverageTable.format === 1) {\n                    return coverageTable.glyphs;\n                  } else {\n                    var glyphs = [];\n                    var ranges = coverageTable.ranges;\n                    for (var i = 0; i < ranges.length; i++) {\n                      var range = ranges[i];\n                      var start = range.start;\n                      var end = range.end;\n                      for (var j = start; j <= end; j++) {\n                        glyphs.push(j);\n                      }\n                    }\n                    return glyphs;\n                  }\n                }\n              };\n\n              // The Position object provides utility methods to manipulate\n\n              /**\n               * @exports opentype.Position\n               * @class\n               * @extends opentype.Layout\n               * @param {opentype.Font}\n               * @constructor\n               */\n              function Position(font) {\n                Layout.call(this, font, 'gpos');\n              }\n\n              Position.prototype = Layout.prototype;\n\n              /**\n               * Init some data for faster and easier access later.\n               */\n              Position.prototype.init = function() {\n                var script = this.getDefaultScriptName();\n                this.defaultKerningTables = this.getKerningTables(script);\n              };\n\n              /**\n               * Find a glyph pair in a list of lookup tables of type 2 and retrieve the xAdvance kerning value.\n               *\n               * @param {integer} leftIndex - left glyph index\n               * @param {integer} rightIndex - right glyph index\n               * @returns {integer}\n               */\n              Position.prototype.getKerningValue = function(\n                kerningLookups,\n                leftIndex,\n                rightIndex\n              ) {\n                var this$1 = this;\n\n                for (var i = 0; i < kerningLookups.length; i++) {\n                  var subtables = kerningLookups[i].subtables;\n                  for (var j = 0; j < subtables.length; j++) {\n                    var subtable = subtables[j];\n                    var covIndex = this$1.getCoverageIndex(subtable.coverage, leftIndex);\n                    if (covIndex < 0) {\n                      continue;\n                    }\n                    switch (subtable.posFormat) {\n                      case 1:\n                        // Search Pair Adjustment Positioning Format 1\n                        var pairSet = subtable.pairSets[covIndex];\n                        for (var k = 0; k < pairSet.length; k++) {\n                          var pair = pairSet[k];\n                          if (pair.secondGlyph === rightIndex) {\n                            return (pair.value1 && pair.value1.xAdvance) || 0;\n                          }\n                        }\n                        break; // left glyph found, not right glyph - try next subtable\n                      case 2:\n                        // Search Pair Adjustment Positioning Format 2\n                        var class1 = this$1.getGlyphClass(subtable.classDef1, leftIndex);\n                        var class2 = this$1.getGlyphClass(subtable.classDef2, rightIndex);\n                        var pair$1 = subtable.classRecords[class1][class2];\n                        return (pair$1.value1 && pair$1.value1.xAdvance) || 0;\n                    }\n                  }\n                }\n                return 0;\n              };\n\n              /**\n               * List all kerning lookup tables.\n               *\n               * @param {string} [script='DFLT'] - use font.position.getDefaultScriptName() for a better default value\n               * @param {string} [language='dflt']\n               * @return {object[]} The list of kerning lookup tables (may be empty), or undefined if there is no GPOS table (and we should use the kern table)\n               */\n              Position.prototype.getKerningTables = function(script, language) {\n                if (this.font.tables.gpos) {\n                  return this.getLookupTables(script, language, 'kern', 2);\n                }\n              };\n\n              // The Substitution object provides utility methods to manipulate\n\n              /**\n               * @exports opentype.Substitution\n               * @class\n               * @extends opentype.Layout\n               * @param {opentype.Font}\n               * @constructor\n               */\n              function Substitution(font) {\n                Layout.call(this, font, 'gsub');\n              }\n\n              // Check if 2 arrays of primitives are equal.\n              function arraysEqual(ar1, ar2) {\n                var n = ar1.length;\n                if (n !== ar2.length) {\n                  return false;\n                }\n                for (var i = 0; i < n; i++) {\n                  if (ar1[i] !== ar2[i]) {\n                    return false;\n                  }\n                }\n                return true;\n              }\n\n              // Find the first subtable of a lookup table in a particular format.\n              function getSubstFormat(lookupTable, format, defaultSubtable) {\n                var subtables = lookupTable.subtables;\n                for (var i = 0; i < subtables.length; i++) {\n                  var subtable = subtables[i];\n                  if (subtable.substFormat === format) {\n                    return subtable;\n                  }\n                }\n                if (defaultSubtable) {\n                  subtables.push(defaultSubtable);\n                  return defaultSubtable;\n                }\n                return undefined;\n              }\n\n              Substitution.prototype = Layout.prototype;\n\n              /**\n               * Create a default GSUB table.\n               * @return {Object} gsub - The GSUB table.\n               */\n              Substitution.prototype.createDefaultTable = function() {\n                // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.\n                return {\n                  version: 1,\n                  scripts: [\n                    {\n                      tag: 'DFLT',\n                      script: {\n                        defaultLangSys: {\n                          reserved: 0,\n                          reqFeatureIndex: 0xffff,\n                          featureIndexes: []\n                        },\n                        langSysRecords: []\n                      }\n                    }\n                  ],\n                  features: [],\n                  lookups: []\n                };\n              };\n\n              /**\n               * List all single substitutions (lookup type 1) for a given script, language, and feature.\n               * @param {string} [script='DFLT']\n               * @param {string} [language='dflt']\n               * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)\n               * @return {Array} substitutions - The list of substitutions.\n               */\n              Substitution.prototype.getSingle = function(feature, script, language) {\n                var this$1 = this;\n\n                var substitutions = [];\n                var lookupTables = this.getLookupTables(script, language, feature, 1);\n                for (var idx = 0; idx < lookupTables.length; idx++) {\n                  var subtables = lookupTables[idx].subtables;\n                  for (var i = 0; i < subtables.length; i++) {\n                    var subtable = subtables[i];\n                    var glyphs = this$1.expandCoverage(subtable.coverage);\n                    var j = void 0;\n                    if (subtable.substFormat === 1) {\n                      var delta = subtable.deltaGlyphId;\n                      for (j = 0; j < glyphs.length; j++) {\n                        var glyph = glyphs[j];\n                        substitutions.push({ sub: glyph, by: glyph + delta });\n                      }\n                    } else {\n                      var substitute = subtable.substitute;\n                      for (j = 0; j < glyphs.length; j++) {\n                        substitutions.push({ sub: glyphs[j], by: substitute[j] });\n                      }\n                    }\n                  }\n                }\n                return substitutions;\n              };\n\n              /**\n               * List all alternates (lookup type 3) for a given script, language, and feature.\n               * @param {string} [script='DFLT']\n               * @param {string} [language='dflt']\n               * @param {string} feature - 4-character feature name ('aalt', 'salt'...)\n               * @return {Array} alternates - The list of alternates\n               */\n              Substitution.prototype.getAlternates = function(feature, script, language) {\n                var this$1 = this;\n\n                var alternates = [];\n                var lookupTables = this.getLookupTables(script, language, feature, 3);\n                for (var idx = 0; idx < lookupTables.length; idx++) {\n                  var subtables = lookupTables[idx].subtables;\n                  for (var i = 0; i < subtables.length; i++) {\n                    var subtable = subtables[i];\n                    var glyphs = this$1.expandCoverage(subtable.coverage);\n                    var alternateSets = subtable.alternateSets;\n                    for (var j = 0; j < glyphs.length; j++) {\n                      alternates.push({ sub: glyphs[j], by: alternateSets[j] });\n                    }\n                  }\n                }\n                return alternates;\n              };\n\n              /**\n               * List all ligatures (lookup type 4) for a given script, language, and feature.\n               * The result is an array of ligature objects like { sub: [ids], by: id }\n               * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n               * @param {string} [script='DFLT']\n               * @param {string} [language='dflt']\n               * @return {Array} ligatures - The list of ligatures.\n               */\n              Substitution.prototype.getLigatures = function(feature, script, language) {\n                var this$1 = this;\n\n                var ligatures = [];\n                var lookupTables = this.getLookupTables(script, language, feature, 4);\n                for (var idx = 0; idx < lookupTables.length; idx++) {\n                  var subtables = lookupTables[idx].subtables;\n                  for (var i = 0; i < subtables.length; i++) {\n                    var subtable = subtables[i];\n                    var glyphs = this$1.expandCoverage(subtable.coverage);\n                    var ligatureSets = subtable.ligatureSets;\n                    for (var j = 0; j < glyphs.length; j++) {\n                      var startGlyph = glyphs[j];\n                      var ligSet = ligatureSets[j];\n                      for (var k = 0; k < ligSet.length; k++) {\n                        var lig = ligSet[k];\n                        ligatures.push({\n                          sub: [startGlyph].concat(lig.components),\n                          by: lig.ligGlyph\n                        });\n                      }\n                    }\n                  }\n                }\n                return ligatures;\n              };\n\n              /**\n               * Add or modify a single substitution (lookup type 1)\n               * Format 2, more flexible, is always used.\n               * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n               * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.\n               * @param {string} [script='DFLT']\n               * @param {string} [language='dflt']\n               */\n              Substitution.prototype.addSingle = function(\n                feature,\n                substitution,\n                script,\n                language\n              ) {\n                var lookupTable = this.getLookupTables(\n                  script,\n                  language,\n                  feature,\n                  1,\n                  true\n                )[0];\n                var subtable = getSubstFormat(lookupTable, 2, {\n                  // lookup type 1 subtable, format 2, coverage format 1\n                  substFormat: 2,\n                  coverage: { format: 1, glyphs: [] },\n                  substitute: []\n                });\n                check.assert(\n                  subtable.coverage.format === 1,\n                  'Ligature: unable to modify coverage table format ' +\n                    subtable.coverage.format\n                );\n                var coverageGlyph = substitution.sub;\n                var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n                if (pos < 0) {\n                  pos = -1 - pos;\n                  subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n                  subtable.substitute.splice(pos, 0, 0);\n                }\n                subtable.substitute[pos] = substitution.by;\n              };\n\n              /**\n               * Add or modify an alternate substitution (lookup type 1)\n               * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n               * @param {Object} substitution - { sub: id, by: [ids] }\n               * @param {string} [script='DFLT']\n               * @param {string} [language='dflt']\n               */\n              Substitution.prototype.addAlternate = function(\n                feature,\n                substitution,\n                script,\n                language\n              ) {\n                var lookupTable = this.getLookupTables(\n                  script,\n                  language,\n                  feature,\n                  3,\n                  true\n                )[0];\n                var subtable = getSubstFormat(lookupTable, 1, {\n                  // lookup type 3 subtable, format 1, coverage format 1\n                  substFormat: 1,\n                  coverage: { format: 1, glyphs: [] },\n                  alternateSets: []\n                });\n                check.assert(\n                  subtable.coverage.format === 1,\n                  'Ligature: unable to modify coverage table format ' +\n                    subtable.coverage.format\n                );\n                var coverageGlyph = substitution.sub;\n                var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n                if (pos < 0) {\n                  pos = -1 - pos;\n                  subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n                  subtable.alternateSets.splice(pos, 0, 0);\n                }\n                subtable.alternateSets[pos] = substitution.by;\n              };\n\n              /**\n               * Add a ligature (lookup type 4)\n               * Ligatures with more components must be stored ahead of those with fewer components in order to be found\n               * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n               * @param {Object} ligature - { sub: [ids], by: id }\n               * @param {string} [script='DFLT']\n               * @param {string} [language='dflt']\n               */\n              Substitution.prototype.addLigature = function(\n                feature,\n                ligature,\n                script,\n                language\n              ) {\n                var lookupTable = this.getLookupTables(\n                  script,\n                  language,\n                  feature,\n                  4,\n                  true\n                )[0];\n                var subtable = lookupTable.subtables[0];\n                if (!subtable) {\n                  subtable = {\n                    // lookup type 4 subtable, format 1, coverage format 1\n                    substFormat: 1,\n                    coverage: { format: 1, glyphs: [] },\n                    ligatureSets: []\n                  };\n                  lookupTable.subtables[0] = subtable;\n                }\n                check.assert(\n                  subtable.coverage.format === 1,\n                  'Ligature: unable to modify coverage table format ' +\n                    subtable.coverage.format\n                );\n                var coverageGlyph = ligature.sub[0];\n                var ligComponents = ligature.sub.slice(1);\n                var ligatureTable = {\n                  ligGlyph: ligature.by,\n                  components: ligComponents\n                };\n                var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n                if (pos >= 0) {\n                  // ligatureSet already exists\n                  var ligatureSet = subtable.ligatureSets[pos];\n                  for (var i = 0; i < ligatureSet.length; i++) {\n                    // If ligature already exists, return.\n                    if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n                      return;\n                    }\n                  }\n                  // ligature does not exist: add it.\n                  ligatureSet.push(ligatureTable);\n                } else {\n                  // Create a new ligatureSet and add coverage for the first glyph.\n                  pos = -1 - pos;\n                  subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n                  subtable.ligatureSets.splice(pos, 0, [ligatureTable]);\n                }\n              };\n\n              /**\n               * List all feature data for a given script and language.\n               * @param {string} feature - 4-letter feature name\n               * @param {string} [script='DFLT']\n               * @param {string} [language='dflt']\n               * @return {Array} substitutions - The list of substitutions.\n               */\n              Substitution.prototype.getFeature = function(feature, script, language) {\n                if (/ss\\d\\d/.test(feature)) {\n                  // ss01 - ss20\n                  return this.getSingle(feature, script, language);\n                }\n                switch (feature) {\n                  case 'aalt':\n                  case 'salt':\n                    return this.getSingle(feature, script, language).concat(\n                      this.getAlternates(feature, script, language)\n                    );\n                  case 'dlig':\n                  case 'liga':\n                  case 'rlig':\n                    return this.getLigatures(feature, script, language);\n                }\n                return undefined;\n              };\n\n              /**\n               * Add a substitution to a feature for a given script and language.\n               * @param {string} feature - 4-letter feature name\n               * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })\n               * @param {string} [script='DFLT']\n               * @param {string} [language='dflt']\n               */\n              Substitution.prototype.add = function(feature, sub, script, language) {\n                if (/ss\\d\\d/.test(feature)) {\n                  // ss01 - ss20\n                  return this.addSingle(feature, sub, script, language);\n                }\n                switch (feature) {\n                  case 'aalt':\n                  case 'salt':\n                    if (typeof sub.by === 'number') {\n                      return this.addSingle(feature, sub, script, language);\n                    }\n                    return this.addAlternate(feature, sub, script, language);\n                  case 'dlig':\n                  case 'liga':\n                  case 'rlig':\n                    return this.addLigature(feature, sub, script, language);\n                }\n                return undefined;\n              };\n\n              function isBrowser() {\n                return typeof window !== 'undefined';\n              }\n\n              function nodeBufferToArrayBuffer(buffer) {\n                var ab = new ArrayBuffer(buffer.length);\n                var view = new Uint8Array(ab);\n                for (var i = 0; i < buffer.length; ++i) {\n                  view[i] = buffer[i];\n                }\n\n                return ab;\n              }\n\n              function arrayBufferToNodeBuffer(ab) {\n                var buffer = new Buffer(ab.byteLength);\n                var view = new Uint8Array(ab);\n                for (var i = 0; i < buffer.length; ++i) {\n                  buffer[i] = view[i];\n                }\n\n                return buffer;\n              }\n\n              function checkArgument(expression, message) {\n                if (!expression) {\n                  throw message;\n                }\n              }\n\n              // The `glyf` table describes the glyphs in TrueType outline format.\n\n              // Parse the coordinate data for a glyph.\n              function parseGlyphCoordinate(\n                p,\n                flag,\n                previousValue,\n                shortVectorBitMask,\n                sameBitMask\n              ) {\n                var v;\n                if ((flag & shortVectorBitMask) > 0) {\n                  // The coordinate is 1 byte long.\n                  v = p.parseByte();\n                  // The `same` bit is re-used for short values to signify the sign of the value.\n                  if ((flag & sameBitMask) === 0) {\n                    v = -v;\n                  }\n\n                  v = previousValue + v;\n                } else {\n                  //  The coordinate is 2 bytes long.\n                  // If the `same` bit is set, the coordinate is the same as the previous coordinate.\n                  if ((flag & sameBitMask) > 0) {\n                    v = previousValue;\n                  } else {\n                    // Parse the coordinate as a signed 16-bit delta value.\n                    v = previousValue + p.parseShort();\n                  }\n                }\n\n                return v;\n              }\n\n              // Parse a TrueType glyph.\n              function parseGlyph(glyph, data, start) {\n                var p = new parse.Parser(data, start);\n                glyph.numberOfContours = p.parseShort();\n                glyph._xMin = p.parseShort();\n                glyph._yMin = p.parseShort();\n                glyph._xMax = p.parseShort();\n                glyph._yMax = p.parseShort();\n                var flags;\n                var flag;\n\n                if (glyph.numberOfContours > 0) {\n                  // This glyph is not a composite.\n                  var endPointIndices = (glyph.endPointIndices = []);\n                  for (var i = 0; i < glyph.numberOfContours; i += 1) {\n                    endPointIndices.push(p.parseUShort());\n                  }\n\n                  glyph.instructionLength = p.parseUShort();\n                  glyph.instructions = [];\n                  for (var i$1 = 0; i$1 < glyph.instructionLength; i$1 += 1) {\n                    glyph.instructions.push(p.parseByte());\n                  }\n\n                  var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;\n                  flags = [];\n                  for (var i$2 = 0; i$2 < numberOfCoordinates; i$2 += 1) {\n                    flag = p.parseByte();\n                    flags.push(flag);\n                    // If bit 3 is set, we repeat this flag n times, where n is the next byte.\n                    if ((flag & 8) > 0) {\n                      var repeatCount = p.parseByte();\n                      for (var j = 0; j < repeatCount; j += 1) {\n                        flags.push(flag);\n                        i$2 += 1;\n                      }\n                    }\n                  }\n\n                  check.argument(flags.length === numberOfCoordinates, 'Bad flags.');\n\n                  if (endPointIndices.length > 0) {\n                    var points = [];\n                    var point;\n                    // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.\n                    if (numberOfCoordinates > 0) {\n                      for (var i$3 = 0; i$3 < numberOfCoordinates; i$3 += 1) {\n                        flag = flags[i$3];\n                        point = {};\n                        point.onCurve = !!(flag & 1);\n                        point.lastPointOfContour = endPointIndices.indexOf(i$3) >= 0;\n                        points.push(point);\n                      }\n\n                      var px = 0;\n                      for (var i$4 = 0; i$4 < numberOfCoordinates; i$4 += 1) {\n                        flag = flags[i$4];\n                        point = points[i$4];\n                        point.x = parseGlyphCoordinate(p, flag, px, 2, 16);\n                        px = point.x;\n                      }\n\n                      var py = 0;\n                      for (var i$5 = 0; i$5 < numberOfCoordinates; i$5 += 1) {\n                        flag = flags[i$5];\n                        point = points[i$5];\n                        point.y = parseGlyphCoordinate(p, flag, py, 4, 32);\n                        py = point.y;\n                      }\n                    }\n\n                    glyph.points = points;\n                  } else {\n                    glyph.points = [];\n                  }\n                } else if (glyph.numberOfContours === 0) {\n                  glyph.points = [];\n                } else {\n                  glyph.isComposite = true;\n                  glyph.points = [];\n                  glyph.components = [];\n                  var moreComponents = true;\n                  while (moreComponents) {\n                    flags = p.parseUShort();\n                    var component = {\n                      glyphIndex: p.parseUShort(),\n                      xScale: 1,\n                      scale01: 0,\n                      scale10: 0,\n                      yScale: 1,\n                      dx: 0,\n                      dy: 0\n                    };\n                    if ((flags & 1) > 0) {\n                      // The arguments are words\n                      if ((flags & 2) > 0) {\n                        // values are offset\n                        component.dx = p.parseShort();\n                        component.dy = p.parseShort();\n                      } else {\n                        // values are matched points\n                        component.matchedPoints = [p.parseUShort(), p.parseUShort()];\n                      }\n                    } else {\n                      // The arguments are bytes\n                      if ((flags & 2) > 0) {\n                        // values are offset\n                        component.dx = p.parseChar();\n                        component.dy = p.parseChar();\n                      } else {\n                        // values are matched points\n                        component.matchedPoints = [p.parseByte(), p.parseByte()];\n                      }\n                    }\n\n                    if ((flags & 8) > 0) {\n                      // We have a scale\n                      component.xScale = component.yScale = p.parseF2Dot14();\n                    } else if ((flags & 64) > 0) {\n                      // We have an X / Y scale\n                      component.xScale = p.parseF2Dot14();\n                      component.yScale = p.parseF2Dot14();\n                    } else if ((flags & 128) > 0) {\n                      // We have a 2x2 transformation\n                      component.xScale = p.parseF2Dot14();\n                      component.scale01 = p.parseF2Dot14();\n                      component.scale10 = p.parseF2Dot14();\n                      component.yScale = p.parseF2Dot14();\n                    }\n\n                    glyph.components.push(component);\n                    moreComponents = !!(flags & 32);\n                  }\n                  if (flags & 0x100) {\n                    // We have instructions\n                    glyph.instructionLength = p.parseUShort();\n                    glyph.instructions = [];\n                    for (var i$6 = 0; i$6 < glyph.instructionLength; i$6 += 1) {\n                      glyph.instructions.push(p.parseByte());\n                    }\n                  }\n                }\n              }\n\n              // Transform an array of points and return a new array.\n              function transformPoints(points, transform) {\n                var newPoints = [];\n                for (var i = 0; i < points.length; i += 1) {\n                  var pt = points[i];\n                  var newPt = {\n                    x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,\n                    y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,\n                    onCurve: pt.onCurve,\n                    lastPointOfContour: pt.lastPointOfContour\n                  };\n                  newPoints.push(newPt);\n                }\n\n                return newPoints;\n              }\n\n              function getContours(points) {\n                var contours = [];\n                var currentContour = [];\n                for (var i = 0; i < points.length; i += 1) {\n                  var pt = points[i];\n                  currentContour.push(pt);\n                  if (pt.lastPointOfContour) {\n                    contours.push(currentContour);\n                    currentContour = [];\n                  }\n                }\n\n                check.argument(\n                  currentContour.length === 0,\n                  'There are still points left in the current contour.'\n                );\n                return contours;\n              }\n\n              // Convert the TrueType glyph outline to a Path.\n              function getPath(points) {\n                var p = new Path();\n                if (!points) {\n                  return p;\n                }\n\n                var contours = getContours(points);\n\n                for (var contourIndex = 0; contourIndex < contours.length; ++contourIndex) {\n                  var contour = contours[contourIndex];\n\n                  var prev = null;\n                  var curr = contour[contour.length - 1];\n                  var next = contour[0];\n\n                  if (curr.onCurve) {\n                    p.moveTo(curr.x, curr.y);\n                  } else {\n                    if (next.onCurve) {\n                      p.moveTo(next.x, next.y);\n                    } else {\n                      // If both first and last points are off-curve, start at their middle.\n                      var start = {\n                        x: (curr.x + next.x) * 0.5,\n                        y: (curr.y + next.y) * 0.5\n                      };\n                      p.moveTo(start.x, start.y);\n                    }\n                  }\n\n                  for (var i = 0; i < contour.length; ++i) {\n                    prev = curr;\n                    curr = next;\n                    next = contour[(i + 1) % contour.length];\n\n                    if (curr.onCurve) {\n                      // This is a straight line.\n                      p.lineTo(curr.x, curr.y);\n                    } else {\n                      var prev2 = prev;\n                      var next2 = next;\n\n                      if (!prev.onCurve) {\n                        prev2 = { x: (curr.x + prev.x) * 0.5, y: (curr.y + prev.y) * 0.5 };\n                      }\n\n                      if (!next.onCurve) {\n                        next2 = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };\n                      }\n\n                      p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);\n                    }\n                  }\n\n                  p.closePath();\n                }\n                return p;\n              }\n\n              function buildPath(glyphs, glyph) {\n                if (glyph.isComposite) {\n                  for (var j = 0; j < glyph.components.length; j += 1) {\n                    var component = glyph.components[j];\n                    var componentGlyph = glyphs.get(component.glyphIndex);\n                    // Force the ttfGlyphLoader to parse the glyph.\n                    componentGlyph.getPath();\n                    if (componentGlyph.points) {\n                      var transformedPoints = void 0;\n                      if (component.matchedPoints === undefined) {\n                        // component positioned by offset\n                        transformedPoints = transformPoints(\n                          componentGlyph.points,\n                          component\n                        );\n                      } else {\n                        // component positioned by matched points\n                        if (\n                          component.matchedPoints[0] > glyph.points.length - 1 ||\n                          component.matchedPoints[1] > componentGlyph.points.length - 1\n                        ) {\n                          throw Error('Matched points out of range in ' + glyph.name);\n                        }\n                        var firstPt = glyph.points[component.matchedPoints[0]];\n                        var secondPt = componentGlyph.points[component.matchedPoints[1]];\n                        var transform = {\n                          xScale: component.xScale,\n                          scale01: component.scale01,\n                          scale10: component.scale10,\n                          yScale: component.yScale,\n                          dx: 0,\n                          dy: 0\n                        };\n                        secondPt = transformPoints([secondPt], transform)[0];\n                        transform.dx = firstPt.x - secondPt.x;\n                        transform.dy = firstPt.y - secondPt.y;\n                        transformedPoints = transformPoints(\n                          componentGlyph.points,\n                          transform\n                        );\n                      }\n                      glyph.points = glyph.points.concat(transformedPoints);\n                    }\n                  }\n                }\n\n                return getPath(glyph.points);\n              }\n\n              // Parse all the glyphs according to the offsets from the `loca` table.\n              function parseGlyfTable(data, start, loca, font) {\n                var glyphs = new glyphset.GlyphSet(font);\n\n                // The last element of the loca table is invalid.\n                for (var i = 0; i < loca.length - 1; i += 1) {\n                  var offset = loca[i];\n                  var nextOffset = loca[i + 1];\n                  if (offset !== nextOffset) {\n                    glyphs.push(\n                      i,\n                      glyphset.ttfGlyphLoader(\n                        font,\n                        i,\n                        parseGlyph,\n                        data,\n                        start + offset,\n                        buildPath\n                      )\n                    );\n                  } else {\n                    glyphs.push(i, glyphset.glyphLoader(font, i));\n                  }\n                }\n\n                return glyphs;\n              }\n\n              var glyf = { getPath: getPath, parse: parseGlyfTable };\n\n              /* A TrueType font hinting interpreter.\n\t*\n\t* (c) 2017 Axel Kittenberger\n\t*\n\t* This interpreter has been implemented according to this documentation:\n\t* https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html\n\t*\n\t* According to the documentation F24DOT6 values are used for pixels.\n\t* That means calculation is 1/64 pixel accurate and uses integer operations.\n\t* However, Javascript has floating point operations by default and only\n\t* those are available. One could make a case to simulate the 1/64 accuracy\n\t* exactly by truncating after every division operation\n\t* (for example with << 0) to get pixel exactly results as other TrueType\n\t* implementations. It may make sense since some fonts are pixel optimized\n\t* by hand using DELTAP instructions. The current implementation doesn't\n\t* and rather uses full floating point precision.\n\t*\n\t* xScale, yScale and rotation is currently ignored.\n\t*\n\t* A few non-trivial instructions are missing as I didn't encounter yet\n\t* a font that used them to test a possible implementation.\n\t*\n\t* Some fonts seem to use undocumented features regarding the twilight zone.\n\t* Only some of them are implemented as they were encountered.\n\t*\n\t* The exports.DEBUG statements are removed on the minified distribution file.\n\t*/\n\n              var instructionTable;\n              var exec;\n              var execGlyph;\n              var execComponent;\n\n              /*\n\t* Creates a hinting object.\n\t*\n\t* There ought to be exactly one\n\t* for each truetype font that is used for hinting.\n\t*/\n              function Hinting(font) {\n                // the font this hinting object is for\n                this.font = font;\n\n                this.getCommands = function(hPoints) {\n                  return glyf.getPath(hPoints).commands;\n                };\n\n                // cached states\n                this._fpgmState = this._prepState = undefined;\n\n                // errorState\n                // 0 ... all okay\n                // 1 ... had an error in a glyf,\n                //       continue working but stop spamming\n                //       the console\n                // 2 ... error at prep, stop hinting at this ppem\n                // 3 ... error at fpeg, stop hinting for this font at all\n                this._errorState = 0;\n              }\n\n              /*\n\t* Not rounding.\n\t*/\n              function roundOff(v) {\n                return v;\n              }\n\n              /*\n\t* Rounding to grid.\n\t*/\n              function roundToGrid(v) {\n                //Rounding in TT is supposed to \"symmetrical around zero\"\n                return Math.sign(v) * Math.round(Math.abs(v));\n              }\n\n              /*\n\t* Rounding to double grid.\n\t*/\n              function roundToDoubleGrid(v) {\n                return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;\n              }\n\n              /*\n\t* Rounding to half grid.\n\t*/\n              function roundToHalfGrid(v) {\n                return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);\n              }\n\n              /*\n\t* Rounding to up to grid.\n\t*/\n              function roundUpToGrid(v) {\n                return Math.sign(v) * Math.ceil(Math.abs(v));\n              }\n\n              /*\n\t* Rounding to down to grid.\n\t*/\n              function roundDownToGrid(v) {\n                return Math.sign(v) * Math.floor(Math.abs(v));\n              }\n\n              /*\n\t* Super rounding.\n\t*/\n              var roundSuper = function(v) {\n                var period = this.srPeriod;\n                var phase = this.srPhase;\n                var threshold = this.srThreshold;\n                var sign = 1;\n\n                if (v < 0) {\n                  v = -v;\n                  sign = -1;\n                }\n\n                v += threshold - phase;\n\n                v = Math.trunc(v / period) * period;\n\n                v += phase;\n\n                // according to http://xgridfit.sourceforge.net/round.html\n                if (v < 0) {\n                  return phase * sign;\n                }\n\n                return v * sign;\n              };\n\n              /*\n\t* Unit vector of x-axis.\n\t*/\n              var xUnitVector = {\n                x: 1,\n\n                y: 0,\n\n                axis: 'x',\n\n                // Gets the projected distance between two points.\n                // o1/o2 ... if true, respective original position is used.\n                distance: function(p1, p2, o1, o2) {\n                  return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);\n                },\n\n                // Moves point p so the moved position has the same relative\n                // position to the moved positions of rp1 and rp2 than the\n                // original positions had.\n                //\n                // See APPENDIX on INTERPOLATE at the bottom of this file.\n                interpolate: function(p, rp1, rp2, pv) {\n                  var do1;\n                  var do2;\n                  var doa1;\n                  var doa2;\n                  var dm1;\n                  var dm2;\n                  var dt;\n\n                  if (!pv || pv === this) {\n                    do1 = p.xo - rp1.xo;\n                    do2 = p.xo - rp2.xo;\n                    dm1 = rp1.x - rp1.xo;\n                    dm2 = rp2.x - rp2.xo;\n                    doa1 = Math.abs(do1);\n                    doa2 = Math.abs(do2);\n                    dt = doa1 + doa2;\n\n                    if (dt === 0) {\n                      p.x = p.xo + (dm1 + dm2) / 2;\n                      return;\n                    }\n\n                    p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;\n                    return;\n                  }\n\n                  do1 = pv.distance(p, rp1, true, true);\n                  do2 = pv.distance(p, rp2, true, true);\n                  dm1 = pv.distance(rp1, rp1, false, true);\n                  dm2 = pv.distance(rp2, rp2, false, true);\n                  doa1 = Math.abs(do1);\n                  doa2 = Math.abs(do2);\n                  dt = doa1 + doa2;\n\n                  if (dt === 0) {\n                    xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n                    return;\n                  }\n\n                  xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n                },\n\n                // Slope of line normal to this\n                normalSlope: Number.NEGATIVE_INFINITY,\n\n                // Sets the point 'p' relative to point 'rp'\n                // by the distance 'd'.\n                //\n                // See APPENDIX on SETRELATIVE at the bottom of this file.\n                //\n                // p   ... point to set\n                // rp  ... reference point\n                // d   ... distance on projection vector\n                // pv  ... projection vector (undefined = this)\n                // org ... if true, uses the original position of rp as reference.\n                setRelative: function(p, rp, d, pv, org) {\n                  if (!pv || pv === this) {\n                    p.x = (org ? rp.xo : rp.x) + d;\n                    return;\n                  }\n\n                  var rpx = org ? rp.xo : rp.x;\n                  var rpy = org ? rp.yo : rp.y;\n                  var rpdx = rpx + d * pv.x;\n                  var rpdy = rpy + d * pv.y;\n\n                  p.x = rpdx + (p.y - rpdy) / pv.normalSlope;\n                },\n\n                // Slope of vector line.\n                slope: 0,\n\n                // Touches the point p.\n                touch: function(p) {\n                  p.xTouched = true;\n                },\n\n                // Tests if a point p is touched.\n                touched: function(p) {\n                  return p.xTouched;\n                },\n\n                // Untouches the point p.\n                untouch: function(p) {\n                  p.xTouched = false;\n                }\n              };\n\n              /*\n\t* Unit vector of y-axis.\n\t*/\n              var yUnitVector = {\n                x: 0,\n\n                y: 1,\n\n                axis: 'y',\n\n                // Gets the projected distance between two points.\n                // o1/o2 ... if true, respective original position is used.\n                distance: function(p1, p2, o1, o2) {\n                  return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);\n                },\n\n                // Moves point p so the moved position has the same relative\n                // position to the moved positions of rp1 and rp2 than the\n                // original positions had.\n                //\n                // See APPENDIX on INTERPOLATE at the bottom of this file.\n                interpolate: function(p, rp1, rp2, pv) {\n                  var do1;\n                  var do2;\n                  var doa1;\n                  var doa2;\n                  var dm1;\n                  var dm2;\n                  var dt;\n\n                  if (!pv || pv === this) {\n                    do1 = p.yo - rp1.yo;\n                    do2 = p.yo - rp2.yo;\n                    dm1 = rp1.y - rp1.yo;\n                    dm2 = rp2.y - rp2.yo;\n                    doa1 = Math.abs(do1);\n                    doa2 = Math.abs(do2);\n                    dt = doa1 + doa2;\n\n                    if (dt === 0) {\n                      p.y = p.yo + (dm1 + dm2) / 2;\n                      return;\n                    }\n\n                    p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;\n                    return;\n                  }\n\n                  do1 = pv.distance(p, rp1, true, true);\n                  do2 = pv.distance(p, rp2, true, true);\n                  dm1 = pv.distance(rp1, rp1, false, true);\n                  dm2 = pv.distance(rp2, rp2, false, true);\n                  doa1 = Math.abs(do1);\n                  doa2 = Math.abs(do2);\n                  dt = doa1 + doa2;\n\n                  if (dt === 0) {\n                    yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n                    return;\n                  }\n\n                  yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n                },\n\n                // Slope of line normal to this.\n                normalSlope: 0,\n\n                // Sets the point 'p' relative to point 'rp'\n                // by the distance 'd'\n                //\n                // See APPENDIX on SETRELATIVE at the bottom of this file.\n                //\n                // p   ... point to set\n                // rp  ... reference point\n                // d   ... distance on projection vector\n                // pv  ... projection vector (undefined = this)\n                // org ... if true, uses the original position of rp as reference.\n                setRelative: function(p, rp, d, pv, org) {\n                  if (!pv || pv === this) {\n                    p.y = (org ? rp.yo : rp.y) + d;\n                    return;\n                  }\n\n                  var rpx = org ? rp.xo : rp.x;\n                  var rpy = org ? rp.yo : rp.y;\n                  var rpdx = rpx + d * pv.x;\n                  var rpdy = rpy + d * pv.y;\n\n                  p.y = rpdy + pv.normalSlope * (p.x - rpdx);\n                },\n\n                // Slope of vector line.\n                slope: Number.POSITIVE_INFINITY,\n\n                // Touches the point p.\n                touch: function(p) {\n                  p.yTouched = true;\n                },\n\n                // Tests if a point p is touched.\n                touched: function(p) {\n                  return p.yTouched;\n                },\n\n                // Untouches the point p.\n                untouch: function(p) {\n                  p.yTouched = false;\n                }\n              };\n\n              Object.freeze(xUnitVector);\n              Object.freeze(yUnitVector);\n\n              /*\n\t* Creates a unit vector that is not x- or y-axis.\n\t*/\n              function UnitVector(x, y) {\n                this.x = x;\n                this.y = y;\n                this.axis = undefined;\n                this.slope = y / x;\n                this.normalSlope = -x / y;\n                Object.freeze(this);\n              }\n\n              /*\n\t* Gets the projected distance between two points.\n\t* o1/o2 ... if true, respective original position is used.\n\t*/\n              UnitVector.prototype.distance = function(p1, p2, o1, o2) {\n                return (\n                  this.x * xUnitVector.distance(p1, p2, o1, o2) +\n                  this.y * yUnitVector.distance(p1, p2, o1, o2)\n                );\n              };\n\n              /*\n\t* Moves point p so the moved position has the same relative\n\t* position to the moved positions of rp1 and rp2 than the\n\t* original positions had.\n\t*\n\t* See APPENDIX on INTERPOLATE at the bottom of this file.\n\t*/\n              UnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {\n                var dm1;\n                var dm2;\n                var do1;\n                var do2;\n                var doa1;\n                var doa2;\n                var dt;\n\n                do1 = pv.distance(p, rp1, true, true);\n                do2 = pv.distance(p, rp2, true, true);\n                dm1 = pv.distance(rp1, rp1, false, true);\n                dm2 = pv.distance(rp2, rp2, false, true);\n                doa1 = Math.abs(do1);\n                doa2 = Math.abs(do2);\n                dt = doa1 + doa2;\n\n                if (dt === 0) {\n                  this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n                  return;\n                }\n\n                this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n              };\n\n              /*\n\t* Sets the point 'p' relative to point 'rp'\n\t* by the distance 'd'\n\t*\n\t* See APPENDIX on SETRELATIVE at the bottom of this file.\n\t*\n\t* p   ...  point to set\n\t* rp  ... reference point\n\t* d   ... distance on projection vector\n\t* pv  ... projection vector (undefined = this)\n\t* org ... if true, uses the original position of rp as reference.\n\t*/\n              UnitVector.prototype.setRelative = function(p, rp, d, pv, org) {\n                pv = pv || this;\n\n                var rpx = org ? rp.xo : rp.x;\n                var rpy = org ? rp.yo : rp.y;\n                var rpdx = rpx + d * pv.x;\n                var rpdy = rpy + d * pv.y;\n\n                var pvns = pv.normalSlope;\n                var fvs = this.slope;\n\n                var px = p.x;\n                var py = p.y;\n\n                p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);\n                p.y = fvs * (p.x - px) + py;\n              };\n\n              /*\n\t* Touches the point p.\n\t*/\n              UnitVector.prototype.touch = function(p) {\n                p.xTouched = true;\n                p.yTouched = true;\n              };\n\n              /*\n\t* Returns a unit vector with x/y coordinates.\n\t*/\n              function getUnitVector(x, y) {\n                var d = Math.sqrt(x * x + y * y);\n\n                x /= d;\n                y /= d;\n\n                if (x === 1 && y === 0) {\n                  return xUnitVector;\n                } else if (x === 0 && y === 1) {\n                  return yUnitVector;\n                } else {\n                  return new UnitVector(x, y);\n                }\n              }\n\n              /*\n\t* Creates a point in the hinting engine.\n\t*/\n              function HPoint(x, y, lastPointOfContour, onCurve) {\n                this.x = this.xo = Math.round(x * 64) / 64; // hinted x value and original x-value\n                this.y = this.yo = Math.round(y * 64) / 64; // hinted y value and original y-value\n\n                this.lastPointOfContour = lastPointOfContour;\n                this.onCurve = onCurve;\n                this.prevPointOnContour = undefined;\n                this.nextPointOnContour = undefined;\n                this.xTouched = false;\n                this.yTouched = false;\n\n                Object.preventExtensions(this);\n              }\n\n              /*\n\t* Returns the next touched point on the contour.\n\t*\n\t* v  ... unit vector to test touch axis.\n\t*/\n              HPoint.prototype.nextTouched = function(v) {\n                var p = this.nextPointOnContour;\n\n                while (!v.touched(p) && p !== this) {\n                  p = p.nextPointOnContour;\n                }\n\n                return p;\n              };\n\n              /*\n\t* Returns the previous touched point on the contour\n\t*\n\t* v  ... unit vector to test touch axis.\n\t*/\n              HPoint.prototype.prevTouched = function(v) {\n                var p = this.prevPointOnContour;\n\n                while (!v.touched(p) && p !== this) {\n                  p = p.prevPointOnContour;\n                }\n\n                return p;\n              };\n\n              /*\n\t* The zero point.\n\t*/\n              var HPZero = Object.freeze(new HPoint(0, 0));\n\n              /*\n\t* The default state of the interpreter.\n\t*\n\t* Note: Freezing the defaultState and then deriving from it\n\t* makes the V8 Javascript engine going awkward,\n\t* so this is avoided, albeit the defaultState shouldn't\n\t* ever change.\n\t*/\n              var defaultState = {\n                cvCutIn: 17 / 16, // control value cut in\n                deltaBase: 9,\n                deltaShift: 0.125,\n                loop: 1, // loops some instructions\n                minDis: 1, // minimum distance\n                autoFlip: true\n              };\n\n              /*\n\t* The current state of the interpreter.\n\t*\n\t* env  ... 'fpgm' or 'prep' or 'glyf'\n\t* prog ... the program\n\t*/\n              function State(env, prog) {\n                this.env = env;\n                this.stack = [];\n                this.prog = prog;\n\n                switch (env) {\n                  case 'glyf':\n                    this.zp0 = this.zp1 = this.zp2 = 1;\n                    this.rp0 = this.rp1 = this.rp2 = 0;\n                  /* fall through */\n                  case 'prep':\n                    this.fv = this.pv = this.dpv = xUnitVector;\n                    this.round = roundToGrid;\n                }\n              }\n\n              /*\n\t* Executes a glyph program.\n\t*\n\t* This does the hinting for each glyph.\n\t*\n\t* Returns an array of moved points.\n\t*\n\t* glyph: the glyph to hint\n\t* ppem: the size the glyph is rendered for\n\t*/\n              Hinting.prototype.exec = function(glyph, ppem) {\n                if (typeof ppem !== 'number') {\n                  throw new Error('Point size is not a number!');\n                }\n\n                // Received a fatal error, don't do any hinting anymore.\n                if (this._errorState > 2) {\n                  return;\n                }\n\n                var font = this.font;\n                var prepState = this._prepState;\n\n                if (!prepState || prepState.ppem !== ppem) {\n                  var fpgmState = this._fpgmState;\n\n                  if (!fpgmState) {\n                    // Executes the fpgm state.\n                    // This is used by fonts to define functions.\n                    State.prototype = defaultState;\n\n                    fpgmState = this._fpgmState = new State('fpgm', font.tables.fpgm);\n\n                    fpgmState.funcs = [];\n                    fpgmState.font = font;\n\n                    if (exports.DEBUG) {\n                      console.log('---EXEC FPGM---');\n                      fpgmState.step = -1;\n                    }\n\n                    try {\n                      exec(fpgmState);\n                    } catch (e) {\n                      console.log('Hinting error in FPGM:' + e);\n                      this._errorState = 3;\n                      return;\n                    }\n                  }\n\n                  // Executes the prep program for this ppem setting.\n                  // This is used by fonts to set cvt values\n                  // depending on to be rendered font size.\n\n                  State.prototype = fpgmState;\n                  prepState = this._prepState = new State('prep', font.tables.prep);\n\n                  prepState.ppem = ppem;\n\n                  // Creates a copy of the cvt table\n                  // and scales it to the current ppem setting.\n                  var oCvt = font.tables.cvt;\n                  if (oCvt) {\n                    var cvt = (prepState.cvt = new Array(oCvt.length));\n                    var scale = ppem / font.unitsPerEm;\n                    for (var c = 0; c < oCvt.length; c++) {\n                      cvt[c] = oCvt[c] * scale;\n                    }\n                  } else {\n                    prepState.cvt = [];\n                  }\n\n                  if (exports.DEBUG) {\n                    console.log('---EXEC PREP---');\n                    prepState.step = -1;\n                  }\n\n                  try {\n                    exec(prepState);\n                  } catch (e) {\n                    if (this._errorState < 2) {\n                      console.log('Hinting error in PREP:' + e);\n                    }\n                    this._errorState = 2;\n                  }\n                }\n\n                if (this._errorState > 1) {\n                  return;\n                }\n\n                try {\n                  return execGlyph(glyph, prepState);\n                } catch (e) {\n                  if (this._errorState < 1) {\n                    console.log('Hinting error:' + e);\n                    console.log('Note: further hinting errors are silenced');\n                  }\n                  this._errorState = 1;\n                  return undefined;\n                }\n              };\n\n              /*\n\t* Executes the hinting program for a glyph.\n\t*/\n              execGlyph = function(glyph, prepState) {\n                // original point positions\n                var xScale = prepState.ppem / prepState.font.unitsPerEm;\n                var yScale = xScale;\n                var components = glyph.components;\n                var contours;\n                var gZone;\n                var state;\n\n                State.prototype = prepState;\n                if (!components) {\n                  state = new State('glyf', glyph.instructions);\n                  if (exports.DEBUG) {\n                    console.log('---EXEC GLYPH---');\n                    state.step = -1;\n                  }\n                  execComponent(glyph, state, xScale, yScale);\n                  gZone = state.gZone;\n                } else {\n                  var font = prepState.font;\n                  gZone = [];\n                  contours = [];\n                  for (var i = 0; i < components.length; i++) {\n                    var c = components[i];\n                    var cg = font.glyphs.get(c.glyphIndex);\n\n                    state = new State('glyf', cg.instructions);\n\n                    if (exports.DEBUG) {\n                      console.log('---EXEC COMP ' + i + '---');\n                      state.step = -1;\n                    }\n\n                    execComponent(cg, state, xScale, yScale);\n                    // appends the computed points to the result array\n                    // post processes the component points\n                    var dx = Math.round(c.dx * xScale);\n                    var dy = Math.round(c.dy * yScale);\n                    var gz = state.gZone;\n                    var cc = state.contours;\n                    for (var pi = 0; pi < gz.length; pi++) {\n                      var p = gz[pi];\n                      p.xTouched = p.yTouched = false;\n                      p.xo = p.x = p.x + dx;\n                      p.yo = p.y = p.y + dy;\n                    }\n\n                    var gLen = gZone.length;\n                    gZone.push.apply(gZone, gz);\n                    for (var j = 0; j < cc.length; j++) {\n                      contours.push(cc[j] + gLen);\n                    }\n                  }\n\n                  if (glyph.instructions && !state.inhibitGridFit) {\n                    // the composite has instructions on its own\n                    state = new State('glyf', glyph.instructions);\n\n                    state.gZone = state.z0 = state.z1 = state.z2 = gZone;\n\n                    state.contours = contours;\n\n                    // note: HPZero cannot be used here, since\n                    //       the point might be modified\n                    gZone.push(\n                      new HPoint(0, 0),\n                      new HPoint(Math.round(glyph.advanceWidth * xScale), 0)\n                    );\n\n                    if (exports.DEBUG) {\n                      console.log('---EXEC COMPOSITE---');\n                      state.step = -1;\n                    }\n\n                    exec(state);\n\n                    gZone.length -= 2;\n                  }\n                }\n\n                return gZone;\n              };\n\n              /*\n\t* Executes the hinting program for a component of a multi-component glyph\n\t* or of the glyph itself for a non-component glyph.\n\t*/\n              execComponent = function(glyph, state, xScale, yScale) {\n                var points = glyph.points || [];\n                var pLen = points.length;\n                var gZone = (state.gZone = state.z0 = state.z1 = state.z2 = []);\n                var contours = (state.contours = []);\n\n                // Scales the original points and\n                // makes copies for the hinted points.\n                var cp; // current point\n                for (var i = 0; i < pLen; i++) {\n                  cp = points[i];\n\n                  gZone[i] = new HPoint(\n                    cp.x * xScale,\n                    cp.y * yScale,\n                    cp.lastPointOfContour,\n                    cp.onCurve\n                  );\n                }\n\n                // Chain links the contours.\n                var sp; // start point\n                var np; // next point\n\n                for (var i$1 = 0; i$1 < pLen; i$1++) {\n                  cp = gZone[i$1];\n\n                  if (!sp) {\n                    sp = cp;\n                    contours.push(i$1);\n                  }\n\n                  if (cp.lastPointOfContour) {\n                    cp.nextPointOnContour = sp;\n                    sp.prevPointOnContour = cp;\n                    sp = undefined;\n                  } else {\n                    np = gZone[i$1 + 1];\n                    cp.nextPointOnContour = np;\n                    np.prevPointOnContour = cp;\n                  }\n                }\n\n                if (state.inhibitGridFit) {\n                  return;\n                }\n\n                if (exports.DEBUG) {\n                  console.log('PROCESSING GLYPH', state.stack);\n                  for (var i$2 = 0; i$2 < pLen; i$2++) {\n                    console.log(i$2, gZone[i$2].x, gZone[i$2].y);\n                  }\n                }\n\n                gZone.push(\n                  new HPoint(0, 0),\n                  new HPoint(Math.round(glyph.advanceWidth * xScale), 0)\n                );\n\n                exec(state);\n\n                // Removes the extra points.\n                gZone.length -= 2;\n\n                if (exports.DEBUG) {\n                  console.log('FINISHED GLYPH', state.stack);\n                  for (var i$3 = 0; i$3 < pLen; i$3++) {\n                    console.log(i$3, gZone[i$3].x, gZone[i$3].y);\n                  }\n                }\n              };\n\n              /*\n\t* Executes the program loaded in state.\n\t*/\n              exec = function(state) {\n                var prog = state.prog;\n\n                if (!prog) {\n                  return;\n                }\n\n                var pLen = prog.length;\n                var ins;\n\n                for (state.ip = 0; state.ip < pLen; state.ip++) {\n                  if (exports.DEBUG) {\n                    state.step++;\n                  }\n                  ins = instructionTable[prog[state.ip]];\n\n                  if (!ins) {\n                    throw new Error(\n                      'unknown instruction: 0x' + Number(prog[state.ip]).toString(16)\n                    );\n                  }\n\n                  ins(state);\n\n                  // very extensive debugging for each step\n                  /*\n\t        if (exports.DEBUG) {\n\t            var da;\n\t            if (state.gZone) {\n\t                da = [];\n\t                for (let i = 0; i < state.gZone.length; i++)\n\t                {\n\t                    da.push(i + ' ' +\n\t                        state.gZone[i].x * 64 + ' ' +\n\t                        state.gZone[i].y * 64 + ' ' +\n\t                        (state.gZone[i].xTouched ? 'x' : '') +\n\t                        (state.gZone[i].yTouched ? 'y' : '')\n\t                    );\n\t                }\n\t                console.log('GZ', da);\n\t            }\n\n\t            if (state.tZone) {\n\t                da = [];\n\t                for (let i = 0; i < state.tZone.length; i++) {\n\t                    da.push(i + ' ' +\n\t                        state.tZone[i].x * 64 + ' ' +\n\t                        state.tZone[i].y * 64 + ' ' +\n\t                        (state.tZone[i].xTouched ? 'x' : '') +\n\t                        (state.tZone[i].yTouched ? 'y' : '')\n\t                    );\n\t                }\n\t                console.log('TZ', da);\n\t            }\n\n\t            if (state.stack.length > 10) {\n\t                console.log(\n\t                    state.stack.length,\n\t                    '...', state.stack.slice(state.stack.length - 10)\n\t                );\n\t            } else {\n\t                console.log(state.stack.length, state.stack);\n\t            }\n\t        }\n\t        */\n                }\n              };\n\n              /*\n\t* Initializes the twilight zone.\n\t*\n\t* This is only done if a SZPx instruction\n\t* refers to the twilight zone.\n\t*/\n              function initTZone(state) {\n                var tZone = (state.tZone = new Array(state.gZone.length));\n\n                // no idea if this is actually correct...\n                for (var i = 0; i < tZone.length; i++) {\n                  tZone[i] = new HPoint(0, 0);\n                }\n              }\n\n              /*\n\t* Skips the instruction pointer ahead over an IF/ELSE block.\n\t* handleElse .. if true breaks on matching ELSE\n\t*/\n              function skip(state, handleElse) {\n                var prog = state.prog;\n                var ip = state.ip;\n                var nesting = 1;\n                var ins;\n\n                do {\n                  ins = prog[++ip];\n                  if (ins === 0x58) {\n                    // IF\n                    nesting++;\n                  } else if (ins === 0x59) {\n                    // EIF\n                    nesting--;\n                  } else if (ins === 0x40) {\n                    // NPUSHB\n                    ip += prog[ip + 1] + 1;\n                  } else if (ins === 0x41) {\n                    // NPUSHW\n                    ip += 2 * prog[ip + 1] + 1;\n                  } else if (ins >= 0xb0 && ins <= 0xb7) {\n                    // PUSHB\n                    ip += ins - 0xb0 + 1;\n                  } else if (ins >= 0xb8 && ins <= 0xbf) {\n                    // PUSHW\n                    ip += (ins - 0xb8 + 1) * 2;\n                  } else if (handleElse && nesting === 1 && ins === 0x1b) {\n                    // ELSE\n                    break;\n                  }\n                } while (nesting > 0);\n\n                state.ip = ip;\n              }\n\n              /*----------------------------------------------------------*\n\t*          And then a lot of instructions...                *\n\t*----------------------------------------------------------*/\n\n              // SVTCA[a] Set freedom and projection Vectors To Coordinate Axis\n              // 0x00-0x01\n              function SVTCA(v, state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SVTCA[' + v.axis + ']');\n                }\n\n                state.fv = state.pv = state.dpv = v;\n              }\n\n              // SPVTCA[a] Set Projection Vector to Coordinate Axis\n              // 0x02-0x03\n              function SPVTCA(v, state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SPVTCA[' + v.axis + ']');\n                }\n\n                state.pv = state.dpv = v;\n              }\n\n              // SFVTCA[a] Set Freedom Vector to Coordinate Axis\n              // 0x04-0x05\n              function SFVTCA(v, state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SFVTCA[' + v.axis + ']');\n                }\n\n                state.fv = v;\n              }\n\n              // SPVTL[a] Set Projection Vector To Line\n              // 0x06-0x07\n              function SPVTL(a, state) {\n                var stack = state.stack;\n                var p2i = stack.pop();\n                var p1i = stack.pop();\n                var p2 = state.z2[p2i];\n                var p1 = state.z1[p1i];\n\n                if (exports.DEBUG) {\n                  console.log('SPVTL[' + a + ']', p2i, p1i);\n                }\n\n                var dx;\n                var dy;\n\n                if (!a) {\n                  dx = p1.x - p2.x;\n                  dy = p1.y - p2.y;\n                } else {\n                  dx = p2.y - p1.y;\n                  dy = p1.x - p2.x;\n                }\n\n                state.pv = state.dpv = getUnitVector(dx, dy);\n              }\n\n              // SFVTL[a] Set Freedom Vector To Line\n              // 0x08-0x09\n              function SFVTL(a, state) {\n                var stack = state.stack;\n                var p2i = stack.pop();\n                var p1i = stack.pop();\n                var p2 = state.z2[p2i];\n                var p1 = state.z1[p1i];\n\n                if (exports.DEBUG) {\n                  console.log('SFVTL[' + a + ']', p2i, p1i);\n                }\n\n                var dx;\n                var dy;\n\n                if (!a) {\n                  dx = p1.x - p2.x;\n                  dy = p1.y - p2.y;\n                } else {\n                  dx = p2.y - p1.y;\n                  dy = p1.x - p2.x;\n                }\n\n                state.fv = getUnitVector(dx, dy);\n              }\n\n              // SPVFS[] Set Projection Vector From Stack\n              // 0x0A\n              function SPVFS(state) {\n                var stack = state.stack;\n                var y = stack.pop();\n                var x = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SPVFS[]', y, x);\n                }\n\n                state.pv = state.dpv = getUnitVector(x, y);\n              }\n\n              // SFVFS[] Set Freedom Vector From Stack\n              // 0x0B\n              function SFVFS(state) {\n                var stack = state.stack;\n                var y = stack.pop();\n                var x = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SPVFS[]', y, x);\n                }\n\n                state.fv = getUnitVector(x, y);\n              }\n\n              // GPV[] Get Projection Vector\n              // 0x0C\n              function GPV(state) {\n                var stack = state.stack;\n                var pv = state.pv;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'GPV[]');\n                }\n\n                stack.push(pv.x * 0x4000);\n                stack.push(pv.y * 0x4000);\n              }\n\n              // GFV[] Get Freedom Vector\n              // 0x0C\n              function GFV(state) {\n                var stack = state.stack;\n                var fv = state.fv;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'GFV[]');\n                }\n\n                stack.push(fv.x * 0x4000);\n                stack.push(fv.y * 0x4000);\n              }\n\n              // SFVTPV[] Set Freedom Vector To Projection Vector\n              // 0x0E\n              function SFVTPV(state) {\n                state.fv = state.pv;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SFVTPV[]');\n                }\n              }\n\n              // ISECT[] moves point p to the InterSECTion of two lines\n              // 0x0F\n              function ISECT(state) {\n                var stack = state.stack;\n                var pa0i = stack.pop();\n                var pa1i = stack.pop();\n                var pb0i = stack.pop();\n                var pb1i = stack.pop();\n                var pi = stack.pop();\n                var z0 = state.z0;\n                var z1 = state.z1;\n                var pa0 = z0[pa0i];\n                var pa1 = z0[pa1i];\n                var pb0 = z1[pb0i];\n                var pb1 = z1[pb1i];\n                var p = state.z2[pi];\n\n                if (exports.DEBUG) {\n                  console.log('ISECT[], ', pa0i, pa1i, pb0i, pb1i, pi);\n                }\n\n                // math from\n                // en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line\n\n                var x1 = pa0.x;\n                var y1 = pa0.y;\n                var x2 = pa1.x;\n                var y2 = pa1.y;\n                var x3 = pb0.x;\n                var y3 = pb0.y;\n                var x4 = pb1.x;\n                var y4 = pb1.y;\n\n                var div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n                var f1 = x1 * y2 - y1 * x2;\n                var f2 = x3 * y4 - y3 * x4;\n\n                p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;\n                p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;\n              }\n\n              // SRP0[] Set Reference Point 0\n              // 0x10\n              function SRP0(state) {\n                state.rp0 = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SRP0[]', state.rp0);\n                }\n              }\n\n              // SRP1[] Set Reference Point 1\n              // 0x11\n              function SRP1(state) {\n                state.rp1 = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SRP1[]', state.rp1);\n                }\n              }\n\n              // SRP1[] Set Reference Point 2\n              // 0x12\n              function SRP2(state) {\n                state.rp2 = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SRP2[]', state.rp2);\n                }\n              }\n\n              // SZP0[] Set Zone Pointer 0\n              // 0x13\n              function SZP0(state) {\n                var n = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SZP0[]', n);\n                }\n\n                state.zp0 = n;\n\n                switch (n) {\n                  case 0:\n                    if (!state.tZone) {\n                      initTZone(state);\n                    }\n                    state.z0 = state.tZone;\n                    break;\n                  case 1:\n                    state.z0 = state.gZone;\n                    break;\n                  default:\n                    throw new Error('Invalid zone pointer');\n                }\n              }\n\n              // SZP1[] Set Zone Pointer 1\n              // 0x14\n              function SZP1(state) {\n                var n = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SZP1[]', n);\n                }\n\n                state.zp1 = n;\n\n                switch (n) {\n                  case 0:\n                    if (!state.tZone) {\n                      initTZone(state);\n                    }\n                    state.z1 = state.tZone;\n                    break;\n                  case 1:\n                    state.z1 = state.gZone;\n                    break;\n                  default:\n                    throw new Error('Invalid zone pointer');\n                }\n              }\n\n              // SZP2[] Set Zone Pointer 2\n              // 0x15\n              function SZP2(state) {\n                var n = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SZP2[]', n);\n                }\n\n                state.zp2 = n;\n\n                switch (n) {\n                  case 0:\n                    if (!state.tZone) {\n                      initTZone(state);\n                    }\n                    state.z2 = state.tZone;\n                    break;\n                  case 1:\n                    state.z2 = state.gZone;\n                    break;\n                  default:\n                    throw new Error('Invalid zone pointer');\n                }\n              }\n\n              // SZPS[] Set Zone PointerS\n              // 0x16\n              function SZPS(state) {\n                var n = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SZPS[]', n);\n                }\n\n                state.zp0 = state.zp1 = state.zp2 = n;\n\n                switch (n) {\n                  case 0:\n                    if (!state.tZone) {\n                      initTZone(state);\n                    }\n                    state.z0 = state.z1 = state.z2 = state.tZone;\n                    break;\n                  case 1:\n                    state.z0 = state.z1 = state.z2 = state.gZone;\n                    break;\n                  default:\n                    throw new Error('Invalid zone pointer');\n                }\n              }\n\n              // SLOOP[] Set LOOP variable\n              // 0x17\n              function SLOOP(state) {\n                state.loop = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SLOOP[]', state.loop);\n                }\n              }\n\n              // RTG[] Round To Grid\n              // 0x18\n              function RTG(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'RTG[]');\n                }\n\n                state.round = roundToGrid;\n              }\n\n              // RTHG[] Round To Half Grid\n              // 0x19\n              function RTHG(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'RTHG[]');\n                }\n\n                state.round = roundToHalfGrid;\n              }\n\n              // SMD[] Set Minimum Distance\n              // 0x1A\n              function SMD(state) {\n                var d = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SMD[]', d);\n                }\n\n                state.minDis = d / 0x40;\n              }\n\n              // ELSE[] ELSE clause\n              // 0x1B\n              function ELSE(state) {\n                // This instruction has been reached by executing a then branch\n                // so it just skips ahead until matching EIF.\n                //\n                // In case the IF was negative the IF[] instruction already\n                // skipped forward over the ELSE[]\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'ELSE[]');\n                }\n\n                skip(state, false);\n              }\n\n              // JMPR[] JuMP Relative\n              // 0x1C\n              function JMPR(state) {\n                var o = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'JMPR[]', o);\n                }\n\n                // A jump by 1 would do nothing.\n                state.ip += o - 1;\n              }\n\n              // SCVTCI[] Set Control Value Table Cut-In\n              // 0x1D\n              function SCVTCI(state) {\n                var n = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SCVTCI[]', n);\n                }\n\n                state.cvCutIn = n / 0x40;\n              }\n\n              // DUP[] DUPlicate top stack element\n              // 0x20\n              function DUP(state) {\n                var stack = state.stack;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'DUP[]');\n                }\n\n                stack.push(stack[stack.length - 1]);\n              }\n\n              // POP[] POP top stack element\n              // 0x21\n              function POP(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'POP[]');\n                }\n\n                state.stack.pop();\n              }\n\n              // CLEAR[] CLEAR the stack\n              // 0x22\n              function CLEAR(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'CLEAR[]');\n                }\n\n                state.stack.length = 0;\n              }\n\n              // SWAP[] SWAP the top two elements on the stack\n              // 0x23\n              function SWAP(state) {\n                var stack = state.stack;\n\n                var a = stack.pop();\n                var b = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SWAP[]');\n                }\n\n                stack.push(a);\n                stack.push(b);\n              }\n\n              // DEPTH[] DEPTH of the stack\n              // 0x24\n              function DEPTH(state) {\n                var stack = state.stack;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'DEPTH[]');\n                }\n\n                stack.push(stack.length);\n              }\n\n              // LOOPCALL[] LOOPCALL function\n              // 0x2A\n              function LOOPCALL(state) {\n                var stack = state.stack;\n                var fn = stack.pop();\n                var c = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'LOOPCALL[]', fn, c);\n                }\n\n                // saves callers program\n                var cip = state.ip;\n                var cprog = state.prog;\n\n                state.prog = state.funcs[fn];\n\n                // executes the function\n                for (var i = 0; i < c; i++) {\n                  exec(state);\n\n                  if (exports.DEBUG) {\n                    console.log(\n                      ++state.step,\n                      i + 1 < c ? 'next loopcall' : 'done loopcall',\n                      i\n                    );\n                  }\n                }\n\n                // restores the callers program\n                state.ip = cip;\n                state.prog = cprog;\n              }\n\n              // CALL[] CALL function\n              // 0x2B\n              function CALL(state) {\n                var fn = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'CALL[]', fn);\n                }\n\n                // saves callers program\n                var cip = state.ip;\n                var cprog = state.prog;\n\n                state.prog = state.funcs[fn];\n\n                // executes the function\n                exec(state);\n\n                // restores the callers program\n                state.ip = cip;\n                state.prog = cprog;\n\n                if (exports.DEBUG) {\n                  console.log(++state.step, 'returning from', fn);\n                }\n              }\n\n              // CINDEX[] Copy the INDEXed element to the top of the stack\n              // 0x25\n              function CINDEX(state) {\n                var stack = state.stack;\n                var k = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'CINDEX[]', k);\n                }\n\n                // In case of k == 1, it copies the last element after popping\n                // thus stack.length - k.\n                stack.push(stack[stack.length - k]);\n              }\n\n              // MINDEX[] Move the INDEXed element to the top of the stack\n              // 0x26\n              function MINDEX(state) {\n                var stack = state.stack;\n                var k = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'MINDEX[]', k);\n                }\n\n                stack.push(stack.splice(stack.length - k, 1)[0]);\n              }\n\n              // FDEF[] Function DEFinition\n              // 0x2C\n              function FDEF(state) {\n                if (state.env !== 'fpgm') {\n                  throw new Error('FDEF not allowed here');\n                }\n                var stack = state.stack;\n                var prog = state.prog;\n                var ip = state.ip;\n\n                var fn = stack.pop();\n                var ipBegin = ip;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'FDEF[]', fn);\n                }\n\n                while (prog[++ip] !== 0x2d) {}\n\n                state.ip = ip;\n                state.funcs[fn] = prog.slice(ipBegin + 1, ip);\n              }\n\n              // MDAP[a] Move Direct Absolute Point\n              // 0x2E-0x2F\n              function MDAP(round, state) {\n                var pi = state.stack.pop();\n                var p = state.z0[pi];\n                var fv = state.fv;\n                var pv = state.pv;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'MDAP[' + round + ']', pi);\n                }\n\n                var d = pv.distance(p, HPZero);\n\n                if (round) {\n                  d = state.round(d);\n                }\n\n                fv.setRelative(p, HPZero, d, pv);\n                fv.touch(p);\n\n                state.rp0 = state.rp1 = pi;\n              }\n\n              // IUP[a] Interpolate Untouched Points through the outline\n              // 0x30\n              function IUP(v, state) {\n                var z2 = state.z2;\n                var pLen = z2.length - 2;\n                var cp;\n                var pp;\n                var np;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'IUP[' + v.axis + ']');\n                }\n\n                for (var i = 0; i < pLen; i++) {\n                  cp = z2[i]; // current point\n\n                  // if this point has been touched go on\n                  if (v.touched(cp)) {\n                    continue;\n                  }\n\n                  pp = cp.prevTouched(v);\n\n                  // no point on the contour has been touched?\n                  if (pp === cp) {\n                    continue;\n                  }\n\n                  np = cp.nextTouched(v);\n\n                  if (pp === np) {\n                    // only one point on the contour has been touched\n                    // so simply moves the point like that\n\n                    v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);\n                  }\n\n                  v.interpolate(cp, pp, np, v);\n                }\n              }\n\n              // SHP[] SHift Point using reference point\n              // 0x32-0x33\n              function SHP(a, state) {\n                var stack = state.stack;\n                var rpi = a ? state.rp1 : state.rp2;\n                var rp = (a ? state.z0 : state.z1)[rpi];\n                var fv = state.fv;\n                var pv = state.pv;\n                var loop = state.loop;\n                var z2 = state.z2;\n\n                while (loop--) {\n                  var pi = stack.pop();\n                  var p = z2[pi];\n\n                  var d = pv.distance(rp, rp, false, true);\n                  fv.setRelative(p, p, d, pv);\n                  fv.touch(p);\n\n                  if (exports.DEBUG) {\n                    console.log(\n                      state.step,\n                      (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                        'SHP[' +\n                        (a ? 'rp1' : 'rp2') +\n                        ']',\n                      pi\n                    );\n                  }\n                }\n\n                state.loop = 1;\n              }\n\n              // SHC[] SHift Contour using reference point\n              // 0x36-0x37\n              function SHC(a, state) {\n                var stack = state.stack;\n                var rpi = a ? state.rp1 : state.rp2;\n                var rp = (a ? state.z0 : state.z1)[rpi];\n                var fv = state.fv;\n                var pv = state.pv;\n                var ci = stack.pop();\n                var sp = state.z2[state.contours[ci]];\n                var p = sp;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SHC[' + a + ']', ci);\n                }\n\n                var d = pv.distance(rp, rp, false, true);\n\n                do {\n                  if (p !== rp) {\n                    fv.setRelative(p, p, d, pv);\n                  }\n                  p = p.nextPointOnContour;\n                } while (p !== sp);\n              }\n\n              // SHZ[] SHift Zone using reference point\n              // 0x36-0x37\n              function SHZ(a, state) {\n                var stack = state.stack;\n                var rpi = a ? state.rp1 : state.rp2;\n                var rp = (a ? state.z0 : state.z1)[rpi];\n                var fv = state.fv;\n                var pv = state.pv;\n\n                var e = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SHZ[' + a + ']', e);\n                }\n\n                var z;\n                switch (e) {\n                  case 0:\n                    z = state.tZone;\n                    break;\n                  case 1:\n                    z = state.gZone;\n                    break;\n                  default:\n                    throw new Error('Invalid zone');\n                }\n\n                var p;\n                var d = pv.distance(rp, rp, false, true);\n                var pLen = z.length - 2;\n                for (var i = 0; i < pLen; i++) {\n                  p = z[i];\n                  fv.setRelative(p, p, d, pv);\n                  //if (p !== rp) fv.setRelative(p, p, d, pv);\n                }\n              }\n\n              // SHPIX[] SHift point by a PIXel amount\n              // 0x38\n              function SHPIX(state) {\n                var stack = state.stack;\n                var loop = state.loop;\n                var fv = state.fv;\n                var d = stack.pop() / 0x40;\n                var z2 = state.z2;\n\n                while (loop--) {\n                  var pi = stack.pop();\n                  var p = z2[pi];\n\n                  if (exports.DEBUG) {\n                    console.log(\n                      state.step,\n                      (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                        'SHPIX[]',\n                      pi,\n                      d\n                    );\n                  }\n\n                  fv.setRelative(p, p, d);\n                  fv.touch(p);\n                }\n\n                state.loop = 1;\n              }\n\n              // IP[] Interpolate Point\n              // 0x39\n              function IP(state) {\n                var stack = state.stack;\n                var rp1i = state.rp1;\n                var rp2i = state.rp2;\n                var loop = state.loop;\n                var rp1 = state.z0[rp1i];\n                var rp2 = state.z1[rp2i];\n                var fv = state.fv;\n                var pv = state.dpv;\n                var z2 = state.z2;\n\n                while (loop--) {\n                  var pi = stack.pop();\n                  var p = z2[pi];\n\n                  if (exports.DEBUG) {\n                    console.log(\n                      state.step,\n                      (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') + 'IP[]',\n                      pi,\n                      rp1i,\n                      '<->',\n                      rp2i\n                    );\n                  }\n\n                  fv.interpolate(p, rp1, rp2, pv);\n\n                  fv.touch(p);\n                }\n\n                state.loop = 1;\n              }\n\n              // MSIRP[a] Move Stack Indirect Relative Point\n              // 0x3A-0x3B\n              function MSIRP(a, state) {\n                var stack = state.stack;\n                var d = stack.pop() / 64;\n                var pi = stack.pop();\n                var p = state.z1[pi];\n                var rp0 = state.z0[state.rp0];\n                var fv = state.fv;\n                var pv = state.pv;\n\n                fv.setRelative(p, rp0, d, pv);\n                fv.touch(p);\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'MSIRP[' + a + ']', d, pi);\n                }\n\n                state.rp1 = state.rp0;\n                state.rp2 = pi;\n                if (a) {\n                  state.rp0 = pi;\n                }\n              }\n\n              // ALIGNRP[] Align to reference point.\n              // 0x3C\n              function ALIGNRP(state) {\n                var stack = state.stack;\n                var rp0i = state.rp0;\n                var rp0 = state.z0[rp0i];\n                var loop = state.loop;\n                var fv = state.fv;\n                var pv = state.pv;\n                var z1 = state.z1;\n\n                while (loop--) {\n                  var pi = stack.pop();\n                  var p = z1[pi];\n\n                  if (exports.DEBUG) {\n                    console.log(\n                      state.step,\n                      (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                        'ALIGNRP[]',\n                      pi\n                    );\n                  }\n\n                  fv.setRelative(p, rp0, 0, pv);\n                  fv.touch(p);\n                }\n\n                state.loop = 1;\n              }\n\n              // RTG[] Round To Double Grid\n              // 0x3D\n              function RTDG(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'RTDG[]');\n                }\n\n                state.round = roundToDoubleGrid;\n              }\n\n              // MIAP[a] Move Indirect Absolute Point\n              // 0x3E-0x3F\n              function MIAP(round, state) {\n                var stack = state.stack;\n                var n = stack.pop();\n                var pi = stack.pop();\n                var p = state.z0[pi];\n                var fv = state.fv;\n                var pv = state.pv;\n                var cv = state.cvt[n];\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'MIAP[' + round + ']', n, '(', cv, ')', pi);\n                }\n\n                var d = pv.distance(p, HPZero);\n\n                if (round) {\n                  if (Math.abs(d - cv) < state.cvCutIn) {\n                    d = cv;\n                  }\n\n                  d = state.round(d);\n                }\n\n                fv.setRelative(p, HPZero, d, pv);\n\n                if (state.zp0 === 0) {\n                  p.xo = p.x;\n                  p.yo = p.y;\n                }\n\n                fv.touch(p);\n\n                state.rp0 = state.rp1 = pi;\n              }\n\n              // NPUSB[] PUSH N Bytes\n              // 0x40\n              function NPUSHB(state) {\n                var prog = state.prog;\n                var ip = state.ip;\n                var stack = state.stack;\n\n                var n = prog[++ip];\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'NPUSHB[]', n);\n                }\n\n                for (var i = 0; i < n; i++) {\n                  stack.push(prog[++ip]);\n                }\n\n                state.ip = ip;\n              }\n\n              // NPUSHW[] PUSH N Words\n              // 0x41\n              function NPUSHW(state) {\n                var ip = state.ip;\n                var prog = state.prog;\n                var stack = state.stack;\n                var n = prog[++ip];\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'NPUSHW[]', n);\n                }\n\n                for (var i = 0; i < n; i++) {\n                  var w = (prog[++ip] << 8) | prog[++ip];\n                  if (w & 0x8000) {\n                    w = -((w ^ 0xffff) + 1);\n                  }\n                  stack.push(w);\n                }\n\n                state.ip = ip;\n              }\n\n              // WS[] Write Store\n              // 0x42\n              function WS(state) {\n                var stack = state.stack;\n                var store = state.store;\n\n                if (!store) {\n                  store = state.store = [];\n                }\n\n                var v = stack.pop();\n                var l = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'WS', v, l);\n                }\n\n                store[l] = v;\n              }\n\n              // RS[] Read Store\n              // 0x43\n              function RS(state) {\n                var stack = state.stack;\n                var store = state.store;\n\n                var l = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'RS', l);\n                }\n\n                var v = (store && store[l]) || 0;\n\n                stack.push(v);\n              }\n\n              // WCVTP[] Write Control Value Table in Pixel units\n              // 0x44\n              function WCVTP(state) {\n                var stack = state.stack;\n\n                var v = stack.pop();\n                var l = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'WCVTP', v, l);\n                }\n\n                state.cvt[l] = v / 0x40;\n              }\n\n              // RCVT[] Read Control Value Table entry\n              // 0x45\n              function RCVT(state) {\n                var stack = state.stack;\n                var cvte = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'RCVT', cvte);\n                }\n\n                stack.push(state.cvt[cvte] * 0x40);\n              }\n\n              // GC[] Get Coordinate projected onto the projection vector\n              // 0x46-0x47\n              function GC(a, state) {\n                var stack = state.stack;\n                var pi = stack.pop();\n                var p = state.z2[pi];\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'GC[' + a + ']', pi);\n                }\n\n                stack.push(state.dpv.distance(p, HPZero, a, false) * 0x40);\n              }\n\n              // MD[a] Measure Distance\n              // 0x49-0x4A\n              function MD(a, state) {\n                var stack = state.stack;\n                var pi2 = stack.pop();\n                var pi1 = stack.pop();\n                var p2 = state.z1[pi2];\n                var p1 = state.z0[pi1];\n                var d = state.dpv.distance(p1, p2, a, a);\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'MD[' + a + ']', pi2, pi1, '->', d);\n                }\n\n                state.stack.push(Math.round(d * 64));\n              }\n\n              // MPPEM[] Measure Pixels Per EM\n              // 0x4B\n              function MPPEM(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'MPPEM[]');\n                }\n                state.stack.push(state.ppem);\n              }\n\n              // FLIPON[] set the auto FLIP Boolean to ON\n              // 0x4D\n              function FLIPON(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'FLIPON[]');\n                }\n                state.autoFlip = true;\n              }\n\n              // LT[] Less Than\n              // 0x50\n              function LT(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'LT[]', e2, e1);\n                }\n\n                stack.push(e1 < e2 ? 1 : 0);\n              }\n\n              // LTEQ[] Less Than or EQual\n              // 0x53\n              function LTEQ(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'LTEQ[]', e2, e1);\n                }\n\n                stack.push(e1 <= e2 ? 1 : 0);\n              }\n\n              // GTEQ[] Greater Than\n              // 0x52\n              function GT(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'GT[]', e2, e1);\n                }\n\n                stack.push(e1 > e2 ? 1 : 0);\n              }\n\n              // GTEQ[] Greater Than or EQual\n              // 0x53\n              function GTEQ(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'GTEQ[]', e2, e1);\n                }\n\n                stack.push(e1 >= e2 ? 1 : 0);\n              }\n\n              // EQ[] EQual\n              // 0x54\n              function EQ(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'EQ[]', e2, e1);\n                }\n\n                stack.push(e2 === e1 ? 1 : 0);\n              }\n\n              // NEQ[] Not EQual\n              // 0x55\n              function NEQ(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'NEQ[]', e2, e1);\n                }\n\n                stack.push(e2 !== e1 ? 1 : 0);\n              }\n\n              // ODD[] ODD\n              // 0x56\n              function ODD(state) {\n                var stack = state.stack;\n                var n = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'ODD[]', n);\n                }\n\n                stack.push(Math.trunc(n) % 2 ? 1 : 0);\n              }\n\n              // EVEN[] EVEN\n              // 0x57\n              function EVEN(state) {\n                var stack = state.stack;\n                var n = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'EVEN[]', n);\n                }\n\n                stack.push(Math.trunc(n) % 2 ? 0 : 1);\n              }\n\n              // IF[] IF test\n              // 0x58\n              function IF(state) {\n                var test = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'IF[]', test);\n                }\n\n                // if test is true it just continues\n                // if not the ip is skipped until matching ELSE or EIF\n                if (!test) {\n                  skip(state, true);\n\n                  if (exports.DEBUG) {\n                    console.log(state.step, 'EIF[]');\n                  }\n                }\n              }\n\n              // EIF[] End IF\n              // 0x59\n              function EIF(state) {\n                // this can be reached normally when\n                // executing an else branch.\n                // -> just ignore it\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'EIF[]');\n                }\n              }\n\n              // AND[] logical AND\n              // 0x5A\n              function AND(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'AND[]', e2, e1);\n                }\n\n                stack.push(e2 && e1 ? 1 : 0);\n              }\n\n              // OR[] logical OR\n              // 0x5B\n              function OR(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'OR[]', e2, e1);\n                }\n\n                stack.push(e2 || e1 ? 1 : 0);\n              }\n\n              // NOT[] logical NOT\n              // 0x5C\n              function NOT(state) {\n                var stack = state.stack;\n                var e = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'NOT[]', e);\n                }\n\n                stack.push(e ? 0 : 1);\n              }\n\n              // DELTAP1[] DELTA exception P1\n              // DELTAP2[] DELTA exception P2\n              // DELTAP3[] DELTA exception P3\n              // 0x5D, 0x71, 0x72\n              function DELTAP123(b, state) {\n                var stack = state.stack;\n                var n = stack.pop();\n                var fv = state.fv;\n                var pv = state.pv;\n                var ppem = state.ppem;\n                var base = state.deltaBase + (b - 1) * 16;\n                var ds = state.deltaShift;\n                var z0 = state.z0;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'DELTAP[' + b + ']', n, stack);\n                }\n\n                for (var i = 0; i < n; i++) {\n                  var pi = stack.pop();\n                  var arg = stack.pop();\n                  var appem = base + ((arg & 0xf0) >> 4);\n                  if (appem !== ppem) {\n                    continue;\n                  }\n\n                  var mag = (arg & 0x0f) - 8;\n                  if (mag >= 0) {\n                    mag++;\n                  }\n                  if (exports.DEBUG) {\n                    console.log(state.step, 'DELTAPFIX', pi, 'by', mag * ds);\n                  }\n\n                  var p = z0[pi];\n                  fv.setRelative(p, p, mag * ds, pv);\n                }\n              }\n\n              // SDB[] Set Delta Base in the graphics state\n              // 0x5E\n              function SDB(state) {\n                var stack = state.stack;\n                var n = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SDB[]', n);\n                }\n\n                state.deltaBase = n;\n              }\n\n              // SDS[] Set Delta Shift in the graphics state\n              // 0x5F\n              function SDS(state) {\n                var stack = state.stack;\n                var n = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SDS[]', n);\n                }\n\n                state.deltaShift = Math.pow(0.5, n);\n              }\n\n              // ADD[] ADD\n              // 0x60\n              function ADD(state) {\n                var stack = state.stack;\n                var n2 = stack.pop();\n                var n1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'ADD[]', n2, n1);\n                }\n\n                stack.push(n1 + n2);\n              }\n\n              // SUB[] SUB\n              // 0x61\n              function SUB(state) {\n                var stack = state.stack;\n                var n2 = stack.pop();\n                var n1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SUB[]', n2, n1);\n                }\n\n                stack.push(n1 - n2);\n              }\n\n              // DIV[] DIV\n              // 0x62\n              function DIV(state) {\n                var stack = state.stack;\n                var n2 = stack.pop();\n                var n1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'DIV[]', n2, n1);\n                }\n\n                stack.push(n1 * 64 / n2);\n              }\n\n              // MUL[] MUL\n              // 0x63\n              function MUL(state) {\n                var stack = state.stack;\n                var n2 = stack.pop();\n                var n1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'MUL[]', n2, n1);\n                }\n\n                stack.push(n1 * n2 / 64);\n              }\n\n              // ABS[] ABSolute value\n              // 0x64\n              function ABS(state) {\n                var stack = state.stack;\n                var n = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'ABS[]', n);\n                }\n\n                stack.push(Math.abs(n));\n              }\n\n              // NEG[] NEGate\n              // 0x65\n              function NEG(state) {\n                var stack = state.stack;\n                var n = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'NEG[]', n);\n                }\n\n                stack.push(-n);\n              }\n\n              // FLOOR[] FLOOR\n              // 0x66\n              function FLOOR(state) {\n                var stack = state.stack;\n                var n = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'FLOOR[]', n);\n                }\n\n                stack.push(Math.floor(n / 0x40) * 0x40);\n              }\n\n              // CEILING[] CEILING\n              // 0x67\n              function CEILING(state) {\n                var stack = state.stack;\n                var n = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'CEILING[]', n);\n                }\n\n                stack.push(Math.ceil(n / 0x40) * 0x40);\n              }\n\n              // ROUND[ab] ROUND value\n              // 0x68-0x6B\n              function ROUND(dt, state) {\n                var stack = state.stack;\n                var n = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'ROUND[]');\n                }\n\n                stack.push(state.round(n / 0x40) * 0x40);\n              }\n\n              // WCVTF[] Write Control Value Table in Funits\n              // 0x70\n              function WCVTF(state) {\n                var stack = state.stack;\n                var v = stack.pop();\n                var l = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'WCVTF[]', v, l);\n                }\n\n                state.cvt[l] = v * state.ppem / state.font.unitsPerEm;\n              }\n\n              // DELTAC1[] DELTA exception C1\n              // DELTAC2[] DELTA exception C2\n              // DELTAC3[] DELTA exception C3\n              // 0x73, 0x74, 0x75\n              function DELTAC123(b, state) {\n                var stack = state.stack;\n                var n = stack.pop();\n                var ppem = state.ppem;\n                var base = state.deltaBase + (b - 1) * 16;\n                var ds = state.deltaShift;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'DELTAC[' + b + ']', n, stack);\n                }\n\n                for (var i = 0; i < n; i++) {\n                  var c = stack.pop();\n                  var arg = stack.pop();\n                  var appem = base + ((arg & 0xf0) >> 4);\n                  if (appem !== ppem) {\n                    continue;\n                  }\n\n                  var mag = (arg & 0x0f) - 8;\n                  if (mag >= 0) {\n                    mag++;\n                  }\n\n                  var delta = mag * ds;\n\n                  if (exports.DEBUG) {\n                    console.log(state.step, 'DELTACFIX', c, 'by', delta);\n                  }\n\n                  state.cvt[c] += delta;\n                }\n              }\n\n              // SROUND[] Super ROUND\n              // 0x76\n              function SROUND(state) {\n                var n = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SROUND[]', n);\n                }\n\n                state.round = roundSuper;\n\n                var period;\n\n                switch (n & 0xc0) {\n                  case 0x00:\n                    period = 0.5;\n                    break;\n                  case 0x40:\n                    period = 1;\n                    break;\n                  case 0x80:\n                    period = 2;\n                    break;\n                  default:\n                    throw new Error('invalid SROUND value');\n                }\n\n                state.srPeriod = period;\n\n                switch (n & 0x30) {\n                  case 0x00:\n                    state.srPhase = 0;\n                    break;\n                  case 0x10:\n                    state.srPhase = 0.25 * period;\n                    break;\n                  case 0x20:\n                    state.srPhase = 0.5 * period;\n                    break;\n                  case 0x30:\n                    state.srPhase = 0.75 * period;\n                    break;\n                  default:\n                    throw new Error('invalid SROUND value');\n                }\n\n                n &= 0x0f;\n\n                if (n === 0) {\n                  state.srThreshold = 0;\n                } else {\n                  state.srThreshold = (n / 8 - 0.5) * period;\n                }\n              }\n\n              // S45ROUND[] Super ROUND 45 degrees\n              // 0x77\n              function S45ROUND(state) {\n                var n = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'S45ROUND[]', n);\n                }\n\n                state.round = roundSuper;\n\n                var period;\n\n                switch (n & 0xc0) {\n                  case 0x00:\n                    period = Math.sqrt(2) / 2;\n                    break;\n                  case 0x40:\n                    period = Math.sqrt(2);\n                    break;\n                  case 0x80:\n                    period = 2 * Math.sqrt(2);\n                    break;\n                  default:\n                    throw new Error('invalid S45ROUND value');\n                }\n\n                state.srPeriod = period;\n\n                switch (n & 0x30) {\n                  case 0x00:\n                    state.srPhase = 0;\n                    break;\n                  case 0x10:\n                    state.srPhase = 0.25 * period;\n                    break;\n                  case 0x20:\n                    state.srPhase = 0.5 * period;\n                    break;\n                  case 0x30:\n                    state.srPhase = 0.75 * period;\n                    break;\n                  default:\n                    throw new Error('invalid S45ROUND value');\n                }\n\n                n &= 0x0f;\n\n                if (n === 0) {\n                  state.srThreshold = 0;\n                } else {\n                  state.srThreshold = (n / 8 - 0.5) * period;\n                }\n              }\n\n              // ROFF[] Round Off\n              // 0x7A\n              function ROFF(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'ROFF[]');\n                }\n\n                state.round = roundOff;\n              }\n\n              // RUTG[] Round Up To Grid\n              // 0x7C\n              function RUTG(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'RUTG[]');\n                }\n\n                state.round = roundUpToGrid;\n              }\n\n              // RDTG[] Round Down To Grid\n              // 0x7D\n              function RDTG(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'RDTG[]');\n                }\n\n                state.round = roundDownToGrid;\n              }\n\n              // SCANCTRL[] SCAN conversion ConTRoL\n              // 0x85\n              function SCANCTRL(state) {\n                var n = state.stack.pop();\n\n                // ignored by opentype.js\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SCANCTRL[]', n);\n                }\n              }\n\n              // SDPVTL[a] Set Dual Projection Vector To Line\n              // 0x86-0x87\n              function SDPVTL(a, state) {\n                var stack = state.stack;\n                var p2i = stack.pop();\n                var p1i = stack.pop();\n                var p2 = state.z2[p2i];\n                var p1 = state.z1[p1i];\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SDPVTL[' + a + ']', p2i, p1i);\n                }\n\n                var dx;\n                var dy;\n\n                if (!a) {\n                  dx = p1.x - p2.x;\n                  dy = p1.y - p2.y;\n                } else {\n                  dx = p2.y - p1.y;\n                  dy = p1.x - p2.x;\n                }\n\n                state.dpv = getUnitVector(dx, dy);\n              }\n\n              // GETINFO[] GET INFOrmation\n              // 0x88\n              function GETINFO(state) {\n                var stack = state.stack;\n                var sel = stack.pop();\n                var r = 0;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'GETINFO[]', sel);\n                }\n\n                // v35 as in no subpixel hinting\n                if (sel & 0x01) {\n                  r = 35;\n                }\n\n                // TODO rotation and stretch currently not supported\n                // and thus those GETINFO are always 0.\n\n                // opentype.js is always gray scaling\n                if (sel & 0x20) {\n                  r |= 0x1000;\n                }\n\n                stack.push(r);\n              }\n\n              // ROLL[] ROLL the top three stack elements\n              // 0x8A\n              function ROLL(state) {\n                var stack = state.stack;\n                var a = stack.pop();\n                var b = stack.pop();\n                var c = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'ROLL[]');\n                }\n\n                stack.push(b);\n                stack.push(a);\n                stack.push(c);\n              }\n\n              // MAX[] MAXimum of top two stack elements\n              // 0x8B\n              function MAX(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'MAX[]', e2, e1);\n                }\n\n                stack.push(Math.max(e1, e2));\n              }\n\n              // MIN[] MINimum of top two stack elements\n              // 0x8C\n              function MIN(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'MIN[]', e2, e1);\n                }\n\n                stack.push(Math.min(e1, e2));\n              }\n\n              // SCANTYPE[] SCANTYPE\n              // 0x8D\n              function SCANTYPE(state) {\n                var n = state.stack.pop();\n                // ignored by opentype.js\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SCANTYPE[]', n);\n                }\n              }\n\n              // INSTCTRL[] INSTCTRL\n              // 0x8D\n              function INSTCTRL(state) {\n                var s = state.stack.pop();\n                var v = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'INSTCTRL[]', s, v);\n                }\n\n                switch (s) {\n                  case 1:\n                    state.inhibitGridFit = !!v;\n                    return;\n                  case 2:\n                    state.ignoreCvt = !!v;\n                    return;\n                  default:\n                    throw new Error('invalid INSTCTRL[] selector');\n                }\n              }\n\n              // PUSHB[abc] PUSH Bytes\n              // 0xB0-0xB7\n              function PUSHB(n, state) {\n                var stack = state.stack;\n                var prog = state.prog;\n                var ip = state.ip;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'PUSHB[' + n + ']');\n                }\n\n                for (var i = 0; i < n; i++) {\n                  stack.push(prog[++ip]);\n                }\n\n                state.ip = ip;\n              }\n\n              // PUSHW[abc] PUSH Words\n              // 0xB8-0xBF\n              function PUSHW(n, state) {\n                var ip = state.ip;\n                var prog = state.prog;\n                var stack = state.stack;\n\n                if (exports.DEBUG) {\n                  console.log(state.ip, 'PUSHW[' + n + ']');\n                }\n\n                for (var i = 0; i < n; i++) {\n                  var w = (prog[++ip] << 8) | prog[++ip];\n                  if (w & 0x8000) {\n                    w = -((w ^ 0xffff) + 1);\n                  }\n                  stack.push(w);\n                }\n\n                state.ip = ip;\n              }\n\n              // MDRP[abcde] Move Direct Relative Point\n              // 0xD0-0xEF\n              // (if indirect is 0)\n              //\n              // and\n              //\n              // MIRP[abcde] Move Indirect Relative Point\n              // 0xE0-0xFF\n              // (if indirect is 1)\n\n              function MDRP_MIRP(indirect, setRp0, keepD, ro, dt, state) {\n                var stack = state.stack;\n                var cvte = indirect && stack.pop();\n                var pi = stack.pop();\n                var rp0i = state.rp0;\n                var rp = state.z0[rp0i];\n                var p = state.z1[pi];\n\n                var md = state.minDis;\n                var fv = state.fv;\n                var pv = state.dpv;\n                var od; // original distance\n                var d; // moving distance\n                var sign; // sign of distance\n                var cv;\n\n                d = od = pv.distance(p, rp, true, true);\n                sign = d >= 0 ? 1 : -1; // Math.sign would be 0 in case of 0\n\n                // TODO consider autoFlip\n                d = Math.abs(d);\n\n                if (indirect) {\n                  cv = state.cvt[cvte];\n\n                  if (ro && Math.abs(d - cv) < state.cvCutIn) {\n                    d = cv;\n                  }\n                }\n\n                if (keepD && d < md) {\n                  d = md;\n                }\n\n                if (ro) {\n                  d = state.round(d);\n                }\n\n                fv.setRelative(p, rp, sign * d, pv);\n                fv.touch(p);\n\n                if (exports.DEBUG) {\n                  console.log(\n                    state.step,\n                    (indirect ? 'MIRP[' : 'MDRP[') +\n                      (setRp0 ? 'M' : 'm') +\n                      (keepD ? '>' : '_') +\n                      (ro ? 'R' : '_') +\n                      (dt === 0 ? 'Gr' : dt === 1 ? 'Bl' : dt === 2 ? 'Wh' : '') +\n                      ']',\n                    indirect ? cvte + '(' + state.cvt[cvte] + ',' + cv + ')' : '',\n                    pi,\n                    '(d =',\n                    od,\n                    '->',\n                    sign * d,\n                    ')'\n                  );\n                }\n\n                state.rp1 = state.rp0;\n                state.rp2 = pi;\n                if (setRp0) {\n                  state.rp0 = pi;\n                }\n              }\n\n              /*\n\t* The instruction table.\n\t*/\n              instructionTable = [\n                /* 0x00 */ SVTCA.bind(undefined, yUnitVector),\n                /* 0x01 */ SVTCA.bind(undefined, xUnitVector),\n                /* 0x02 */ SPVTCA.bind(undefined, yUnitVector),\n                /* 0x03 */ SPVTCA.bind(undefined, xUnitVector),\n                /* 0x04 */ SFVTCA.bind(undefined, yUnitVector),\n                /* 0x05 */ SFVTCA.bind(undefined, xUnitVector),\n                /* 0x06 */ SPVTL.bind(undefined, 0),\n                /* 0x07 */ SPVTL.bind(undefined, 1),\n                /* 0x08 */ SFVTL.bind(undefined, 0),\n                /* 0x09 */ SFVTL.bind(undefined, 1),\n                /* 0x0A */ SPVFS,\n                /* 0x0B */ SFVFS,\n                /* 0x0C */ GPV,\n                /* 0x0D */ GFV,\n                /* 0x0E */ SFVTPV,\n                /* 0x0F */ ISECT,\n                /* 0x10 */ SRP0,\n                /* 0x11 */ SRP1,\n                /* 0x12 */ SRP2,\n                /* 0x13 */ SZP0,\n                /* 0x14 */ SZP1,\n                /* 0x15 */ SZP2,\n                /* 0x16 */ SZPS,\n                /* 0x17 */ SLOOP,\n                /* 0x18 */ RTG,\n                /* 0x19 */ RTHG,\n                /* 0x1A */ SMD,\n                /* 0x1B */ ELSE,\n                /* 0x1C */ JMPR,\n                /* 0x1D */ SCVTCI,\n                /* 0x1E */ undefined, // TODO SSWCI\n                /* 0x1F */ undefined, // TODO SSW\n                /* 0x20 */ DUP,\n                /* 0x21 */ POP,\n                /* 0x22 */ CLEAR,\n                /* 0x23 */ SWAP,\n                /* 0x24 */ DEPTH,\n                /* 0x25 */ CINDEX,\n                /* 0x26 */ MINDEX,\n                /* 0x27 */ undefined, // TODO ALIGNPTS\n                /* 0x28 */ undefined,\n                /* 0x29 */ undefined, // TODO UTP\n                /* 0x2A */ LOOPCALL,\n                /* 0x2B */ CALL,\n                /* 0x2C */ FDEF,\n                /* 0x2D */ undefined, // ENDF (eaten by FDEF)\n                /* 0x2E */ MDAP.bind(undefined, 0),\n                /* 0x2F */ MDAP.bind(undefined, 1),\n                /* 0x30 */ IUP.bind(undefined, yUnitVector),\n                /* 0x31 */ IUP.bind(undefined, xUnitVector),\n                /* 0x32 */ SHP.bind(undefined, 0),\n                /* 0x33 */ SHP.bind(undefined, 1),\n                /* 0x34 */ SHC.bind(undefined, 0),\n                /* 0x35 */ SHC.bind(undefined, 1),\n                /* 0x36 */ SHZ.bind(undefined, 0),\n                /* 0x37 */ SHZ.bind(undefined, 1),\n                /* 0x38 */ SHPIX,\n                /* 0x39 */ IP,\n                /* 0x3A */ MSIRP.bind(undefined, 0),\n                /* 0x3B */ MSIRP.bind(undefined, 1),\n                /* 0x3C */ ALIGNRP,\n                /* 0x3D */ RTDG,\n                /* 0x3E */ MIAP.bind(undefined, 0),\n                /* 0x3F */ MIAP.bind(undefined, 1),\n                /* 0x40 */ NPUSHB,\n                /* 0x41 */ NPUSHW,\n                /* 0x42 */ WS,\n                /* 0x43 */ RS,\n                /* 0x44 */ WCVTP,\n                /* 0x45 */ RCVT,\n                /* 0x46 */ GC.bind(undefined, 0),\n                /* 0x47 */ GC.bind(undefined, 1),\n                /* 0x48 */ undefined, // TODO SCFS\n                /* 0x49 */ MD.bind(undefined, 0),\n                /* 0x4A */ MD.bind(undefined, 1),\n                /* 0x4B */ MPPEM,\n                /* 0x4C */ undefined, // TODO MPS\n                /* 0x4D */ FLIPON,\n                /* 0x4E */ undefined, // TODO FLIPOFF\n                /* 0x4F */ undefined, // TODO DEBUG\n                /* 0x50 */ LT,\n                /* 0x51 */ LTEQ,\n                /* 0x52 */ GT,\n                /* 0x53 */ GTEQ,\n                /* 0x54 */ EQ,\n                /* 0x55 */ NEQ,\n                /* 0x56 */ ODD,\n                /* 0x57 */ EVEN,\n                /* 0x58 */ IF,\n                /* 0x59 */ EIF,\n                /* 0x5A */ AND,\n                /* 0x5B */ OR,\n                /* 0x5C */ NOT,\n                /* 0x5D */ DELTAP123.bind(undefined, 1),\n                /* 0x5E */ SDB,\n                /* 0x5F */ SDS,\n                /* 0x60 */ ADD,\n                /* 0x61 */ SUB,\n                /* 0x62 */ DIV,\n                /* 0x63 */ MUL,\n                /* 0x64 */ ABS,\n                /* 0x65 */ NEG,\n                /* 0x66 */ FLOOR,\n                /* 0x67 */ CEILING,\n                /* 0x68 */ ROUND.bind(undefined, 0),\n                /* 0x69 */ ROUND.bind(undefined, 1),\n                /* 0x6A */ ROUND.bind(undefined, 2),\n                /* 0x6B */ ROUND.bind(undefined, 3),\n                /* 0x6C */ undefined, // TODO NROUND[ab]\n                /* 0x6D */ undefined, // TODO NROUND[ab]\n                /* 0x6E */ undefined, // TODO NROUND[ab]\n                /* 0x6F */ undefined, // TODO NROUND[ab]\n                /* 0x70 */ WCVTF,\n                /* 0x71 */ DELTAP123.bind(undefined, 2),\n                /* 0x72 */ DELTAP123.bind(undefined, 3),\n                /* 0x73 */ DELTAC123.bind(undefined, 1),\n                /* 0x74 */ DELTAC123.bind(undefined, 2),\n                /* 0x75 */ DELTAC123.bind(undefined, 3),\n                /* 0x76 */ SROUND,\n                /* 0x77 */ S45ROUND,\n                /* 0x78 */ undefined, // TODO JROT[]\n                /* 0x79 */ undefined, // TODO JROF[]\n                /* 0x7A */ ROFF,\n                /* 0x7B */ undefined,\n                /* 0x7C */ RUTG,\n                /* 0x7D */ RDTG,\n                /* 0x7E */ POP, // actually SANGW, supposed to do only a pop though\n                /* 0x7F */ POP, // actually AA, supposed to do only a pop though\n                /* 0x80 */ undefined, // TODO FLIPPT\n                /* 0x81 */ undefined, // TODO FLIPRGON\n                /* 0x82 */ undefined, // TODO FLIPRGOFF\n                /* 0x83 */ undefined,\n                /* 0x84 */ undefined,\n                /* 0x85 */ SCANCTRL,\n                /* 0x86 */ SDPVTL.bind(undefined, 0),\n                /* 0x87 */ SDPVTL.bind(undefined, 1),\n                /* 0x88 */ GETINFO,\n                /* 0x89 */ undefined, // TODO IDEF\n                /* 0x8A */ ROLL,\n                /* 0x8B */ MAX,\n                /* 0x8C */ MIN,\n                /* 0x8D */ SCANTYPE,\n                /* 0x8E */ INSTCTRL,\n                /* 0x8F */ undefined,\n                /* 0x90 */ undefined,\n                /* 0x91 */ undefined,\n                /* 0x92 */ undefined,\n                /* 0x93 */ undefined,\n                /* 0x94 */ undefined,\n                /* 0x95 */ undefined,\n                /* 0x96 */ undefined,\n                /* 0x97 */ undefined,\n                /* 0x98 */ undefined,\n                /* 0x99 */ undefined,\n                /* 0x9A */ undefined,\n                /* 0x9B */ undefined,\n                /* 0x9C */ undefined,\n                /* 0x9D */ undefined,\n                /* 0x9E */ undefined,\n                /* 0x9F */ undefined,\n                /* 0xA0 */ undefined,\n                /* 0xA1 */ undefined,\n                /* 0xA2 */ undefined,\n                /* 0xA3 */ undefined,\n                /* 0xA4 */ undefined,\n                /* 0xA5 */ undefined,\n                /* 0xA6 */ undefined,\n                /* 0xA7 */ undefined,\n                /* 0xA8 */ undefined,\n                /* 0xA9 */ undefined,\n                /* 0xAA */ undefined,\n                /* 0xAB */ undefined,\n                /* 0xAC */ undefined,\n                /* 0xAD */ undefined,\n                /* 0xAE */ undefined,\n                /* 0xAF */ undefined,\n                /* 0xB0 */ PUSHB.bind(undefined, 1),\n                /* 0xB1 */ PUSHB.bind(undefined, 2),\n                /* 0xB2 */ PUSHB.bind(undefined, 3),\n                /* 0xB3 */ PUSHB.bind(undefined, 4),\n                /* 0xB4 */ PUSHB.bind(undefined, 5),\n                /* 0xB5 */ PUSHB.bind(undefined, 6),\n                /* 0xB6 */ PUSHB.bind(undefined, 7),\n                /* 0xB7 */ PUSHB.bind(undefined, 8),\n                /* 0xB8 */ PUSHW.bind(undefined, 1),\n                /* 0xB9 */ PUSHW.bind(undefined, 2),\n                /* 0xBA */ PUSHW.bind(undefined, 3),\n                /* 0xBB */ PUSHW.bind(undefined, 4),\n                /* 0xBC */ PUSHW.bind(undefined, 5),\n                /* 0xBD */ PUSHW.bind(undefined, 6),\n                /* 0xBE */ PUSHW.bind(undefined, 7),\n                /* 0xBF */ PUSHW.bind(undefined, 8),\n                /* 0xC0 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 0),\n                /* 0xC1 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 1),\n                /* 0xC2 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 2),\n                /* 0xC3 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 3),\n                /* 0xC4 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 0),\n                /* 0xC5 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 1),\n                /* 0xC6 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 2),\n                /* 0xC7 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 3),\n                /* 0xC8 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 0),\n                /* 0xC9 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 1),\n                /* 0xCA */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 2),\n                /* 0xCB */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 3),\n                /* 0xCC */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 0),\n                /* 0xCD */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 1),\n                /* 0xCE */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 2),\n                /* 0xCF */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 3),\n                /* 0xD0 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 0),\n                /* 0xD1 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 1),\n                /* 0xD2 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 2),\n                /* 0xD3 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 3),\n                /* 0xD4 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 0),\n                /* 0xD5 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 1),\n                /* 0xD6 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 2),\n                /* 0xD7 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 3),\n                /* 0xD8 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 0),\n                /* 0xD9 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 1),\n                /* 0xDA */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 2),\n                /* 0xDB */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 3),\n                /* 0xDC */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 0),\n                /* 0xDD */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 1),\n                /* 0xDE */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 2),\n                /* 0xDF */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 3),\n                /* 0xE0 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 0),\n                /* 0xE1 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 1),\n                /* 0xE2 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 2),\n                /* 0xE3 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 3),\n                /* 0xE4 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 0),\n                /* 0xE5 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 1),\n                /* 0xE6 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 2),\n                /* 0xE7 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 3),\n                /* 0xE8 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 0),\n                /* 0xE9 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 1),\n                /* 0xEA */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 2),\n                /* 0xEB */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 3),\n                /* 0xEC */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 0),\n                /* 0xED */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 1),\n                /* 0xEE */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 2),\n                /* 0xEF */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 3),\n                /* 0xF0 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 0),\n                /* 0xF1 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 1),\n                /* 0xF2 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 2),\n                /* 0xF3 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 3),\n                /* 0xF4 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 0),\n                /* 0xF5 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 1),\n                /* 0xF6 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 2),\n                /* 0xF7 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 3),\n                /* 0xF8 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 0),\n                /* 0xF9 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 1),\n                /* 0xFA */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 2),\n                /* 0xFB */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 3),\n                /* 0xFC */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 0),\n                /* 0xFD */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 1),\n                /* 0xFE */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 2),\n                /* 0xFF */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 3)\n              ];\n\n              /*****************************\n\t  Mathematical Considerations\n\t******************************\n\n\tfv ... refers to freedom vector\n\tpv ... refers to projection vector\n\trp ... refers to reference point\n\tp  ... refers to to point being operated on\n\td  ... refers to distance\n\n\tSETRELATIVE:\n\t============\n\n\tcase freedom vector == x-axis:\n\t------------------------------\n\n\t                        (pv)\n\t                     .-'\n\t              rpd .-'\n\t               .-*\n\t          d .-'90°'\n\t         .-'       '\n\t      .-'           '\n\t   *-'               ' b\n\t  rp                  '\n\t                       '\n\t                        '\n\t            p *----------*-------------- (fv)\n\t                          pm\n\n\t  rpdx = rpx + d * pv.x\n\t  rpdy = rpy + d * pv.y\n\n\t  equation of line b\n\n\t   y - rpdy = pvns * (x- rpdx)\n\n\t   y = p.y\n\n\t   x = rpdx + ( p.y - rpdy ) / pvns\n\n\n\tcase freedom vector == y-axis:\n\t------------------------------\n\n\t    * pm\n\t    |\\\n\t    | \\\n\t    |  \\\n\t    |   \\\n\t    |    \\\n\t    |     \\\n\t    |      \\\n\t    |       \\\n\t    |        \\\n\t    |         \\ b\n\t    |          \\\n\t    |           \\\n\t    |            \\    .-' (pv)\n\t    |         90° \\.-'\n\t    |           .-'* rpd\n\t    |        .-'\n\t    *     *-'  d\n\t    p     rp\n\n\t  rpdx = rpx + d * pv.x\n\t  rpdy = rpy + d * pv.y\n\n\t  equation of line b:\n\t           pvns ... normal slope to pv\n\n\t   y - rpdy = pvns * (x - rpdx)\n\n\t   x = p.x\n\n\t   y = rpdy +  pvns * (p.x - rpdx)\n\n\n\n\tgeneric case:\n\t-------------\n\n\n\t                              .'(fv)\n\t                            .'\n\t                          .* pm\n\t                        .' !\n\t                      .'    .\n\t                    .'      !\n\t                  .'         . b\n\t                .'           !\n\t               *              .\n\t              p               !\n\t                         90°   .    ... (pv)\n\t                           ...-*-'''\n\t                  ...---'''    rpd\n\t         ...---'''   d\n\t   *--'''\n\t  rp\n\n\t    rpdx = rpx + d * pv.x\n\t    rpdy = rpy + d * pv.y\n\n\t equation of line b:\n\t    pvns... normal slope to pv\n\n\t    y - rpdy = pvns * (x - rpdx)\n\n\t equation of freedom vector line:\n\t    fvs ... slope of freedom vector (=fy/fx)\n\n\t    y - py = fvs * (x - px)\n\n\n\t  on pm both equations are true for same x/y\n\n\t    y - rpdy = pvns * (x - rpdx)\n\n\t    y - py = fvs * (x - px)\n\n\t  form to y and set equal:\n\n\t    pvns * (x - rpdx) + rpdy = fvs * (x - px) + py\n\n\t  expand:\n\n\t    pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py\n\n\t  switch:\n\n\t    fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy\n\n\t  solve for x:\n\n\t    fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy\n\n\n\n\t          fvs * px - pvns * rpdx + rpdy - py\n\t    x =  -----------------------------------\n\t                 fvs - pvns\n\n\t  and:\n\n\t    y = fvs * (x - px) + py\n\n\n\n\tINTERPOLATE:\n\t============\n\n\tExamples of point interpolation.\n\n\tThe weight of the movement of the reference point gets bigger\n\tthe further the other reference point is away, thus the safest\n\toption (that is avoiding 0/0 divisions) is to weight the\n\toriginal distance of the other point by the sum of both distances.\n\n\tIf the sum of both distances is 0, then move the point by the\n\tarithmetic average of the movement of both reference points.\n\n\n\n\n\t           (+6)\n\t    rp1o *---->*rp1\n\t         .     .                          (+12)\n\t         .     .                  rp2o *---------->* rp2\n\t         .     .                       .           .\n\t         .     .                       .           .\n\t         .    10          20           .           .\n\t         |.........|...................|           .\n\t               .   .                               .\n\t               .   . (+8)                          .\n\t                po *------>*p                      .\n\t               .           .                       .\n\t               .    12     .          24           .\n\t               |...........|.......................|\n\t                                  36\n\n\n\t-------\n\n\n\n\t           (+10)\n\t    rp1o *-------->*rp1\n\t         .         .                      (-10)\n\t         .         .              rp2 *<---------* rpo2\n\t         .         .                   .         .\n\t         .         .                   .         .\n\t         .    10   .          30       .         .\n\t         |.........|.............................|\n\t                   .                   .\n\t                   . (+5)              .\n\t                po *--->* p            .\n\t                   .    .              .\n\t                   .    .   20         .\n\t                   |....|..............|\n\t                     5        15\n\n\n\t-------\n\n\n\t           (+10)\n\t    rp1o *-------->*rp1\n\t         .         .\n\t         .         .\n\t    rp2o *-------->*rp2\n\n\n\t                               (+10)\n\t                          po *-------->* p\n\n\t-------\n\n\n\t           (+10)\n\t    rp1o *-------->*rp1\n\t         .         .\n\t         .         .(+30)\n\t    rp2o *---------------------------->*rp2\n\n\n\t                                        (+25)\n\t                          po *----------------------->* p\n\n\n\n\tvim: set ts=4 sw=4 expandtab:\n\t*****/\n\n              // The Font object\n\n              // This code is based on Array.from implementation for strings in https://github.com/mathiasbynens/Array.from\n              var arrayFromString =\n                Array.from ||\n                function(s) {\n                  return (\n                    s.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?|[^\\uD800-\\uDFFF]|./g) || []\n                  );\n                };\n\n              /**\n               * @typedef FontOptions\n               * @type Object\n               * @property {Boolean} empty - whether to create a new empty font\n               * @property {string} familyName\n               * @property {string} styleName\n               * @property {string=} fullName\n               * @property {string=} postScriptName\n               * @property {string=} designer\n               * @property {string=} designerURL\n               * @property {string=} manufacturer\n               * @property {string=} manufacturerURL\n               * @property {string=} license\n               * @property {string=} licenseURL\n               * @property {string=} version\n               * @property {string=} description\n               * @property {string=} copyright\n               * @property {string=} trademark\n               * @property {Number} unitsPerEm\n               * @property {Number} ascender\n               * @property {Number} descender\n               * @property {Number} createdTimestamp\n               * @property {string=} weightClass\n               * @property {string=} widthClass\n               * @property {string=} fsSelection\n               */\n\n              /**\n               * A Font represents a loaded OpenType font file.\n               * It contains a set of glyphs and methods to draw text on a drawing context,\n               * or to get a path representing the text.\n               * @exports opentype.Font\n               * @class\n               * @param {FontOptions}\n               * @constructor\n               */\n              function Font(options) {\n                options = options || {};\n\n                if (!options.empty) {\n                  // Check that we've provided the minimum set of names.\n                  checkArgument(\n                    options.familyName,\n                    'When creating a new Font object, familyName is required.'\n                  );\n                  checkArgument(\n                    options.styleName,\n                    'When creating a new Font object, styleName is required.'\n                  );\n                  checkArgument(\n                    options.unitsPerEm,\n                    'When creating a new Font object, unitsPerEm is required.'\n                  );\n                  checkArgument(\n                    options.ascender,\n                    'When creating a new Font object, ascender is required.'\n                  );\n                  checkArgument(\n                    options.descender,\n                    'When creating a new Font object, descender is required.'\n                  );\n                  checkArgument(\n                    options.descender < 0,\n                    'Descender should be negative (e.g. -512).'\n                  );\n\n                  // OS X will complain if the names are empty, so we put a single space everywhere by default.\n                  this.names = {\n                    fontFamily: { en: options.familyName || ' ' },\n                    fontSubfamily: { en: options.styleName || ' ' },\n                    fullName: {\n                      en: options.fullName || options.familyName + ' ' + options.styleName\n                    },\n                    // postScriptName may not contain any whitespace\n                    postScriptName: {\n                      en:\n                        options.postScriptName ||\n                        (options.familyName + options.styleName).replace(/\\s/g, '')\n                    },\n                    designer: { en: options.designer || ' ' },\n                    designerURL: { en: options.designerURL || ' ' },\n                    manufacturer: { en: options.manufacturer || ' ' },\n                    manufacturerURL: { en: options.manufacturerURL || ' ' },\n                    license: { en: options.license || ' ' },\n                    licenseURL: { en: options.licenseURL || ' ' },\n                    version: { en: options.version || 'Version 0.1' },\n                    description: { en: options.description || ' ' },\n                    copyright: { en: options.copyright || ' ' },\n                    trademark: { en: options.trademark || ' ' }\n                  };\n                  this.unitsPerEm = options.unitsPerEm || 1000;\n                  this.ascender = options.ascender;\n                  this.descender = options.descender;\n                  this.createdTimestamp = options.createdTimestamp;\n                  this.tables = {\n                    os2: {\n                      usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,\n                      usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,\n                      fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR\n                    }\n                  };\n                }\n\n                this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.\n                this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);\n                this.encoding = new DefaultEncoding(this);\n                this.position = new Position(this);\n                this.substitution = new Substitution(this);\n                this.tables = this.tables || {};\n\n                Object.defineProperty(this, 'hinting', {\n                  get: function() {\n                    if (this._hinting) {\n                      return this._hinting;\n                    }\n                    if (this.outlinesFormat === 'truetype') {\n                      return (this._hinting = new Hinting(this));\n                    }\n                  }\n                });\n              }\n\n              /**\n               * Check if the font has a glyph for the given character.\n               * @param  {string}\n               * @return {Boolean}\n               */\n              Font.prototype.hasChar = function(c) {\n                return this.encoding.charToGlyphIndex(c) !== null;\n              };\n\n              /**\n               * Convert the given character to a single glyph index.\n               * Note that this function assumes that there is a one-to-one mapping between\n               * the given character and a glyph; for complex scripts this might not be the case.\n               * @param  {string}\n               * @return {Number}\n               */\n              Font.prototype.charToGlyphIndex = function(s) {\n                return this.encoding.charToGlyphIndex(s);\n              };\n\n              /**\n               * Convert the given character to a single Glyph object.\n               * Note that this function assumes that there is a one-to-one mapping between\n               * the given character and a glyph; for complex scripts this might not be the case.\n               * @param  {string}\n               * @return {opentype.Glyph}\n               */\n              Font.prototype.charToGlyph = function(c) {\n                var glyphIndex = this.charToGlyphIndex(c);\n                var glyph = this.glyphs.get(glyphIndex);\n                if (!glyph) {\n                  // .notdef\n                  glyph = this.glyphs.get(0);\n                }\n\n                return glyph;\n              };\n\n              /**\n               * Convert the given text to a list of Glyph objects.\n               * Note that there is no strict one-to-one mapping between characters and\n               * glyphs, so the list of returned glyphs can be larger or smaller than the\n               * length of the given string.\n               * @param  {string}\n               * @param  {GlyphRenderOptions} [options]\n               * @return {opentype.Glyph[]}\n               */\n              Font.prototype.stringToGlyphs = function(s, options) {\n                var this$1 = this;\n\n                options = options || this.defaultRenderOptions;\n                // Get glyph indexes\n                var chars = arrayFromString(s);\n                var indexes = [];\n                for (var i = 0; i < chars.length; i += 1) {\n                  var c = chars[i];\n                  indexes.push(this$1.charToGlyphIndex(c));\n                }\n                var length = indexes.length;\n\n                // Apply substitutions on glyph indexes\n                if (options.features) {\n                  var script = options.script || this.substitution.getDefaultScriptName();\n                  var manyToOne = [];\n                  if (options.features.liga) {\n                    manyToOne = manyToOne.concat(\n                      this.substitution.getFeature('liga', script, options.language)\n                    );\n                  }\n                  if (options.features.rlig) {\n                    manyToOne = manyToOne.concat(\n                      this.substitution.getFeature('rlig', script, options.language)\n                    );\n                  }\n                  for (var i$1 = 0; i$1 < length; i$1 += 1) {\n                    for (var j = 0; j < manyToOne.length; j++) {\n                      var ligature = manyToOne[j];\n                      var components = ligature.sub;\n                      var compCount = components.length;\n                      var k = 0;\n                      while (k < compCount && components[k] === indexes[i$1 + k]) {\n                        k++;\n                      }\n                      if (k === compCount) {\n                        indexes.splice(i$1, compCount, ligature.by);\n                        length = length - compCount + 1;\n                      }\n                    }\n                  }\n                }\n\n                // convert glyph indexes to glyph objects\n                var glyphs = new Array(length);\n                var notdef = this.glyphs.get(0);\n                for (var i$2 = 0; i$2 < length; i$2 += 1) {\n                  glyphs[i$2] = this$1.glyphs.get(indexes[i$2]) || notdef;\n                }\n                return glyphs;\n              };\n\n              /**\n               * @param  {string}\n               * @return {Number}\n               */\n              Font.prototype.nameToGlyphIndex = function(name) {\n                return this.glyphNames.nameToGlyphIndex(name);\n              };\n\n              /**\n               * @param  {string}\n               * @return {opentype.Glyph}\n               */\n              Font.prototype.nameToGlyph = function(name) {\n                var glyphIndex = this.nameToGlyphIndex(name);\n                var glyph = this.glyphs.get(glyphIndex);\n                if (!glyph) {\n                  // .notdef\n                  glyph = this.glyphs.get(0);\n                }\n\n                return glyph;\n              };\n\n              /**\n               * @param  {Number}\n               * @return {String}\n               */\n              Font.prototype.glyphIndexToName = function(gid) {\n                if (!this.glyphNames.glyphIndexToName) {\n                  return '';\n                }\n\n                return this.glyphNames.glyphIndexToName(gid);\n              };\n\n              /**\n               * Retrieve the value of the kerning pair between the left glyph (or its index)\n               * and the right glyph (or its index). If no kerning pair is found, return 0.\n               * The kerning value gets added to the advance width when calculating the spacing\n               * between glyphs.\n               * For GPOS kerning, this method uses the default script and language, which covers\n               * most use cases. To have greater control, use font.position.getKerningValue .\n               * @param  {opentype.Glyph} leftGlyph\n               * @param  {opentype.Glyph} rightGlyph\n               * @return {Number}\n               */\n              Font.prototype.getKerningValue = function(leftGlyph, rightGlyph) {\n                leftGlyph = leftGlyph.index || leftGlyph;\n                rightGlyph = rightGlyph.index || rightGlyph;\n                var gposKerning = this.position.defaultKerningTables;\n                if (gposKerning) {\n                  return this.position.getKerningValue(gposKerning, leftGlyph, rightGlyph);\n                }\n                // \"kern\" table\n                return this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0;\n              };\n\n              /**\n               * @typedef GlyphRenderOptions\n               * @type Object\n               * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.\n               *                               See https://www.microsoft.com/typography/otspec/scripttags.htm\n               * @property {string} [language='dflt'] - language system used to determine which features to apply.\n               *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx\n               * @property {boolean} [kerning=true] - whether to include kerning values\n               * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.\n               *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm\n               */\n              Font.prototype.defaultRenderOptions = {\n                kerning: true,\n                features: {\n                  liga: true,\n                  rlig: true\n                }\n              };\n\n              /**\n               * Helper function that invokes the given callback for each glyph in the given text.\n               * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text\n               * @param {string} text - The text to apply.\n               * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               * @param  {GlyphRenderOptions=} options\n               * @param  {Function} callback\n               */\n              Font.prototype.forEachGlyph = function(\n                text,\n                x,\n                y,\n                fontSize,\n                options,\n                callback\n              ) {\n                var this$1 = this;\n\n                x = x !== undefined ? x : 0;\n                y = y !== undefined ? y : 0;\n                fontSize = fontSize !== undefined ? fontSize : 72;\n                options = options || this.defaultRenderOptions;\n                var fontScale = 1 / this.unitsPerEm * fontSize;\n                var glyphs = this.stringToGlyphs(text, options);\n                var kerningLookups;\n                if (options.kerning) {\n                  var script = options.script || this.position.getDefaultScriptName();\n                  kerningLookups = this.position.getKerningTables(script, options.language);\n                }\n                for (var i = 0; i < glyphs.length; i += 1) {\n                  var glyph = glyphs[i];\n                  callback.call(this$1, glyph, x, y, fontSize, options);\n                  if (glyph.advanceWidth) {\n                    x += glyph.advanceWidth * fontScale;\n                  }\n\n                  if (options.kerning && i < glyphs.length - 1) {\n                    // We should apply position adjustment lookups in a more generic way.\n                    // Here we only use the xAdvance value.\n                    var kerningValue = kerningLookups\n                      ? this$1.position.getKerningValue(\n                          kerningLookups,\n                          glyph.index,\n                          glyphs[i + 1].index\n                        )\n                      : this$1.getKerningValue(glyph, glyphs[i + 1]);\n                    x += kerningValue * fontScale;\n                  }\n\n                  if (options.letterSpacing) {\n                    x += options.letterSpacing * fontSize;\n                  } else if (options.tracking) {\n                    x += options.tracking / 1000 * fontSize;\n                  }\n                }\n                return x;\n              };\n\n              /**\n               * Create a Path object that represents the given text.\n               * @param  {string} text - The text to create.\n               * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               * @param  {GlyphRenderOptions=} options\n               * @return {opentype.Path}\n               */\n              Font.prototype.getPath = function(text, x, y, fontSize, options) {\n                var fullPath = new Path();\n                this.forEachGlyph(text, x, y, fontSize, options, function(\n                  glyph,\n                  gX,\n                  gY,\n                  gFontSize\n                ) {\n                  var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n                  fullPath.extend(glyphPath);\n                });\n                return fullPath;\n              };\n\n              /**\n               * Create an array of Path objects that represent the glyphs of a given text.\n               * @param  {string} text - The text to create.\n               * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               * @param  {GlyphRenderOptions=} options\n               * @return {opentype.Path[]}\n               */\n              Font.prototype.getPaths = function(text, x, y, fontSize, options) {\n                var glyphPaths = [];\n                this.forEachGlyph(text, x, y, fontSize, options, function(\n                  glyph,\n                  gX,\n                  gY,\n                  gFontSize\n                ) {\n                  var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n                  glyphPaths.push(glyphPath);\n                });\n\n                return glyphPaths;\n              };\n\n              /**\n               * Returns the advance width of a text.\n               *\n               * This is something different than Path.getBoundingBox() as for example a\n               * suffixed whitespace increases the advanceWidth but not the bounding box\n               * or an overhanging letter like a calligraphic 'f' might have a quite larger\n               * bounding box than its advance width.\n               *\n               * This corresponds to canvas2dContext.measureText(text).width\n               *\n               * @param  {string} text - The text to create.\n               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               * @param  {GlyphRenderOptions=} options\n               * @return advance width\n               */\n              Font.prototype.getAdvanceWidth = function(text, fontSize, options) {\n                return this.forEachGlyph(text, 0, 0, fontSize, options, function() {});\n              };\n\n              /**\n               * Draw the text on the given drawing context.\n               * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n               * @param  {string} text - The text to create.\n               * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               * @param  {GlyphRenderOptions=} options\n               */\n              Font.prototype.draw = function(ctx, text, x, y, fontSize, options) {\n                this.getPath(text, x, y, fontSize, options).draw(ctx);\n              };\n\n              /**\n               * Draw the points of all glyphs in the text.\n               * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n               * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n               * @param {string} text - The text to create.\n               * @param {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               * @param {GlyphRenderOptions=} options\n               */\n              Font.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {\n                this.forEachGlyph(text, x, y, fontSize, options, function(\n                  glyph,\n                  gX,\n                  gY,\n                  gFontSize\n                ) {\n                  glyph.drawPoints(ctx, gX, gY, gFontSize);\n                });\n              };\n\n              /**\n               * Draw lines indicating important font measurements for all glyphs in the text.\n               * Black lines indicate the origin of the coordinate system (point 0,0).\n               * Blue lines indicate the glyph bounding box.\n               * Green line indicates the advance width of the glyph.\n               * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n               * @param {string} text - The text to create.\n               * @param {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               * @param {GlyphRenderOptions=} options\n               */\n              Font.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {\n                this.forEachGlyph(text, x, y, fontSize, options, function(\n                  glyph,\n                  gX,\n                  gY,\n                  gFontSize\n                ) {\n                  glyph.drawMetrics(ctx, gX, gY, gFontSize);\n                });\n              };\n\n              /**\n               * @param  {string}\n               * @return {string}\n               */\n              Font.prototype.getEnglishName = function(name) {\n                var translations = this.names[name];\n                if (translations) {\n                  return translations.en;\n                }\n              };\n\n              /**\n               * Validate\n               */\n              Font.prototype.validate = function() {\n                var _this = this;\n\n                function assert(predicate, message) {}\n\n                function assertNamePresent(name) {\n                  var englishName = _this.getEnglishName(name);\n                  assert(\n                    englishName && englishName.trim().length > 0,\n                    'No English ' + name + ' specified.'\n                  );\n                }\n\n                // Identification information\n                assertNamePresent('fontFamily');\n                assertNamePresent('weightName');\n                assertNamePresent('manufacturer');\n                assertNamePresent('copyright');\n                assertNamePresent('version');\n\n                // Dimension information\n                assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');\n              };\n\n              /**\n               * Convert the font object to a SFNT data structure.\n               * This structure contains all the necessary tables and metadata to create a binary OTF file.\n               * @return {opentype.Table}\n               */\n              Font.prototype.toTables = function() {\n                return sfnt.fontToTable(this);\n              };\n              /**\n               * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.\n               */\n              Font.prototype.toBuffer = function() {\n                console.warn(\n                  'Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.'\n                );\n                return this.toArrayBuffer();\n              };\n              /**\n               * Converts a `opentype.Font` into an `ArrayBuffer`\n               * @return {ArrayBuffer}\n               */\n              Font.prototype.toArrayBuffer = function() {\n                var sfntTable = this.toTables();\n                var bytes = sfntTable.encode();\n                var buffer = new ArrayBuffer(bytes.length);\n                var intArray = new Uint8Array(buffer);\n                for (var i = 0; i < bytes.length; i++) {\n                  intArray[i] = bytes[i];\n                }\n\n                return buffer;\n              };\n\n              /**\n               * Initiate a download of the OpenType font.\n               */\n              Font.prototype.download = function(fileName) {\n                var familyName = this.getEnglishName('fontFamily');\n                var styleName = this.getEnglishName('fontSubfamily');\n                fileName =\n                  fileName || familyName.replace(/\\s/g, '') + '-' + styleName + '.otf';\n                var arrayBuffer = this.toArrayBuffer();\n\n                if (isBrowser()) {\n                  window.requestFileSystem =\n                    window.requestFileSystem || window.webkitRequestFileSystem;\n                  window.requestFileSystem(\n                    window.TEMPORARY,\n                    arrayBuffer.byteLength,\n                    function(fs) {\n                      fs.root.getFile(fileName, { create: true }, function(fileEntry) {\n                        fileEntry.createWriter(function(writer) {\n                          var dataView = new DataView(arrayBuffer);\n                          var blob = new Blob([dataView], { type: 'font/opentype' });\n                          writer.write(blob);\n\n                          writer.addEventListener(\n                            'writeend',\n                            function() {\n                              // Navigating to the file will download it.\n                              location.href = fileEntry.toURL();\n                            },\n                            false\n                          );\n                        });\n                      });\n                    },\n                    function(err) {\n                      throw new Error(err.name + ': ' + err.message);\n                    }\n                  );\n                } else {\n                  var fs = _dereq_('fs');\n                  var buffer = arrayBufferToNodeBuffer(arrayBuffer);\n                  fs.writeFileSync(fileName, buffer);\n                }\n              };\n              /**\n               * @private\n               */\n              Font.prototype.fsSelectionValues = {\n                ITALIC: 0x001, //1\n                UNDERSCORE: 0x002, //2\n                NEGATIVE: 0x004, //4\n                OUTLINED: 0x008, //8\n                STRIKEOUT: 0x010, //16\n                BOLD: 0x020, //32\n                REGULAR: 0x040, //64\n                USER_TYPO_METRICS: 0x080, //128\n                WWS: 0x100, //256\n                OBLIQUE: 0x200 //512\n              };\n\n              /**\n               * @private\n               */\n              Font.prototype.usWidthClasses = {\n                ULTRA_CONDENSED: 1,\n                EXTRA_CONDENSED: 2,\n                CONDENSED: 3,\n                SEMI_CONDENSED: 4,\n                MEDIUM: 5,\n                SEMI_EXPANDED: 6,\n                EXPANDED: 7,\n                EXTRA_EXPANDED: 8,\n                ULTRA_EXPANDED: 9\n              };\n\n              /**\n               * @private\n               */\n              Font.prototype.usWeightClasses = {\n                THIN: 100,\n                EXTRA_LIGHT: 200,\n                LIGHT: 300,\n                NORMAL: 400,\n                MEDIUM: 500,\n                SEMI_BOLD: 600,\n                BOLD: 700,\n                EXTRA_BOLD: 800,\n                BLACK: 900\n              };\n\n              // The `fvar` table stores font variation axes and instances.\n\n              function addName(name, names) {\n                var nameString = JSON.stringify(name);\n                var nameID = 256;\n                for (var nameKey in names) {\n                  var n = parseInt(nameKey);\n                  if (!n || n < 256) {\n                    continue;\n                  }\n\n                  if (JSON.stringify(names[nameKey]) === nameString) {\n                    return n;\n                  }\n\n                  if (nameID <= n) {\n                    nameID = n + 1;\n                  }\n                }\n\n                names[nameID] = name;\n                return nameID;\n              }\n\n              function makeFvarAxis(n, axis, names) {\n                var nameID = addName(axis.name, names);\n                return [\n                  { name: 'tag_' + n, type: 'TAG', value: axis.tag },\n                  { name: 'minValue_' + n, type: 'FIXED', value: axis.minValue << 16 },\n                  {\n                    name: 'defaultValue_' + n,\n                    type: 'FIXED',\n                    value: axis.defaultValue << 16\n                  },\n                  { name: 'maxValue_' + n, type: 'FIXED', value: axis.maxValue << 16 },\n                  { name: 'flags_' + n, type: 'USHORT', value: 0 },\n                  { name: 'nameID_' + n, type: 'USHORT', value: nameID }\n                ];\n              }\n\n              function parseFvarAxis(data, start, names) {\n                var axis = {};\n                var p = new parse.Parser(data, start);\n                axis.tag = p.parseTag();\n                axis.minValue = p.parseFixed();\n                axis.defaultValue = p.parseFixed();\n                axis.maxValue = p.parseFixed();\n                p.skip('uShort', 1); // reserved for flags; no values defined\n                axis.name = names[p.parseUShort()] || {};\n                return axis;\n              }\n\n              function makeFvarInstance(n, inst, axes, names) {\n                var nameID = addName(inst.name, names);\n                var fields = [\n                  { name: 'nameID_' + n, type: 'USHORT', value: nameID },\n                  { name: 'flags_' + n, type: 'USHORT', value: 0 }\n                ];\n\n                for (var i = 0; i < axes.length; ++i) {\n                  var axisTag = axes[i].tag;\n                  fields.push({\n                    name: 'axis_' + n + ' ' + axisTag,\n                    type: 'FIXED',\n                    value: inst.coordinates[axisTag] << 16\n                  });\n                }\n\n                return fields;\n              }\n\n              function parseFvarInstance(data, start, axes, names) {\n                var inst = {};\n                var p = new parse.Parser(data, start);\n                inst.name = names[p.parseUShort()] || {};\n                p.skip('uShort', 1); // reserved for flags; no values defined\n\n                inst.coordinates = {};\n                for (var i = 0; i < axes.length; ++i) {\n                  inst.coordinates[axes[i].tag] = p.parseFixed();\n                }\n\n                return inst;\n              }\n\n              function makeFvarTable(fvar, names) {\n                var result = new table.Table('fvar', [\n                  { name: 'version', type: 'ULONG', value: 0x10000 },\n                  { name: 'offsetToData', type: 'USHORT', value: 0 },\n                  { name: 'countSizePairs', type: 'USHORT', value: 2 },\n                  { name: 'axisCount', type: 'USHORT', value: fvar.axes.length },\n                  { name: 'axisSize', type: 'USHORT', value: 20 },\n                  { name: 'instanceCount', type: 'USHORT', value: fvar.instances.length },\n                  { name: 'instanceSize', type: 'USHORT', value: 4 + fvar.axes.length * 4 }\n                ]);\n                result.offsetToData = result.sizeOf();\n\n                for (var i = 0; i < fvar.axes.length; i++) {\n                  result.fields = result.fields.concat(\n                    makeFvarAxis(i, fvar.axes[i], names)\n                  );\n                }\n\n                for (var j = 0; j < fvar.instances.length; j++) {\n                  result.fields = result.fields.concat(\n                    makeFvarInstance(j, fvar.instances[j], fvar.axes, names)\n                  );\n                }\n\n                return result;\n              }\n\n              function parseFvarTable(data, start, names) {\n                var p = new parse.Parser(data, start);\n                var tableVersion = p.parseULong();\n                check.argument(\n                  tableVersion === 0x00010000,\n                  'Unsupported fvar table version.'\n                );\n                var offsetToData = p.parseOffset16();\n                // Skip countSizePairs.\n                p.skip('uShort', 1);\n                var axisCount = p.parseUShort();\n                var axisSize = p.parseUShort();\n                var instanceCount = p.parseUShort();\n                var instanceSize = p.parseUShort();\n\n                var axes = [];\n                for (var i = 0; i < axisCount; i++) {\n                  axes.push(\n                    parseFvarAxis(data, start + offsetToData + i * axisSize, names)\n                  );\n                }\n\n                var instances = [];\n                var instanceStart = start + offsetToData + axisCount * axisSize;\n                for (var j = 0; j < instanceCount; j++) {\n                  instances.push(\n                    parseFvarInstance(data, instanceStart + j * instanceSize, axes, names)\n                  );\n                }\n\n                return { axes: axes, instances: instances };\n              }\n\n              var fvar = { make: makeFvarTable, parse: parseFvarTable };\n\n              // The `GPOS` table contains kerning pairs, among other things.\n\n              var subtableParsers$1 = new Array(10); // subtableParsers[0] is unused\n\n              // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-1-single-adjustment-positioning-subtable\n              // this = Parser instance\n              subtableParsers$1[1] = function parseLookup1() {\n                var start = this.offset + this.relativeOffset;\n                var posformat = this.parseUShort();\n                if (posformat === 1) {\n                  return {\n                    posFormat: 1,\n                    coverage: this.parsePointer(Parser.coverage),\n                    value: this.parseValueRecord()\n                  };\n                } else if (posformat === 2) {\n                  return {\n                    posFormat: 2,\n                    coverage: this.parsePointer(Parser.coverage),\n                    values: this.parseValueRecordList()\n                  };\n                }\n                check.assert(\n                  false,\n                  '0x' + start.toString(16) + ': GPOS lookup type 1 format must be 1 or 2.'\n                );\n              };\n\n              // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-2-pair-adjustment-positioning-subtable\n              subtableParsers$1[2] = function parseLookup2() {\n                var start = this.offset + this.relativeOffset;\n                var posFormat = this.parseUShort();\n                check.assert(\n                  posFormat === 1 || posFormat === 2,\n                  '0x' + start.toString(16) + ': GPOS lookup type 2 format must be 1 or 2.'\n                );\n                var coverage = this.parsePointer(Parser.coverage);\n                var valueFormat1 = this.parseUShort();\n                var valueFormat2 = this.parseUShort();\n                if (posFormat === 1) {\n                  // Adjustments for Glyph Pairs\n                  return {\n                    posFormat: posFormat,\n                    coverage: coverage,\n                    valueFormat1: valueFormat1,\n                    valueFormat2: valueFormat2,\n                    pairSets: this.parseList(\n                      Parser.pointer(\n                        Parser.list(function() {\n                          return {\n                            // pairValueRecord\n                            secondGlyph: this.parseUShort(),\n                            value1: this.parseValueRecord(valueFormat1),\n                            value2: this.parseValueRecord(valueFormat2)\n                          };\n                        })\n                      )\n                    )\n                  };\n                } else if (posFormat === 2) {\n                  var classDef1 = this.parsePointer(Parser.classDef);\n                  var classDef2 = this.parsePointer(Parser.classDef);\n                  var class1Count = this.parseUShort();\n                  var class2Count = this.parseUShort();\n                  return {\n                    // Class Pair Adjustment\n                    posFormat: posFormat,\n                    coverage: coverage,\n                    valueFormat1: valueFormat1,\n                    valueFormat2: valueFormat2,\n                    classDef1: classDef1,\n                    classDef2: classDef2,\n                    class1Count: class1Count,\n                    class2Count: class2Count,\n                    classRecords: this.parseList(\n                      class1Count,\n                      Parser.list(class2Count, function() {\n                        return {\n                          value1: this.parseValueRecord(valueFormat1),\n                          value2: this.parseValueRecord(valueFormat2)\n                        };\n                      })\n                    )\n                  };\n                }\n              };\n\n              subtableParsers$1[3] = function parseLookup3() {\n                return { error: 'GPOS Lookup 3 not supported' };\n              };\n              subtableParsers$1[4] = function parseLookup4() {\n                return { error: 'GPOS Lookup 4 not supported' };\n              };\n              subtableParsers$1[5] = function parseLookup5() {\n                return { error: 'GPOS Lookup 5 not supported' };\n              };\n              subtableParsers$1[6] = function parseLookup6() {\n                return { error: 'GPOS Lookup 6 not supported' };\n              };\n              subtableParsers$1[7] = function parseLookup7() {\n                return { error: 'GPOS Lookup 7 not supported' };\n              };\n              subtableParsers$1[8] = function parseLookup8() {\n                return { error: 'GPOS Lookup 8 not supported' };\n              };\n              subtableParsers$1[9] = function parseLookup9() {\n                return { error: 'GPOS Lookup 9 not supported' };\n              };\n\n              // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos\n              function parseGposTable(data, start) {\n                start = start || 0;\n                var p = new Parser(data, start);\n                var tableVersion = p.parseVersion(1);\n                check.argument(\n                  tableVersion === 1 || tableVersion === 1.1,\n                  'Unsupported GPOS table version ' + tableVersion\n                );\n\n                if (tableVersion === 1) {\n                  return {\n                    version: tableVersion,\n                    scripts: p.parseScriptList(),\n                    features: p.parseFeatureList(),\n                    lookups: p.parseLookupList(subtableParsers$1)\n                  };\n                } else {\n                  return {\n                    version: tableVersion,\n                    scripts: p.parseScriptList(),\n                    features: p.parseFeatureList(),\n                    lookups: p.parseLookupList(subtableParsers$1),\n                    variations: p.parseFeatureVariationsList()\n                  };\n                }\n              }\n\n              // GPOS Writing //////////////////////////////////////////////\n              // NOT SUPPORTED\n              var subtableMakers$1 = new Array(10);\n\n              function makeGposTable(gpos) {\n                return new table.Table('GPOS', [\n                  { name: 'version', type: 'ULONG', value: 0x10000 },\n                  {\n                    name: 'scripts',\n                    type: 'TABLE',\n                    value: new table.ScriptList(gpos.scripts)\n                  },\n                  {\n                    name: 'features',\n                    type: 'TABLE',\n                    value: new table.FeatureList(gpos.features)\n                  },\n                  {\n                    name: 'lookups',\n                    type: 'TABLE',\n                    value: new table.LookupList(gpos.lookups, subtableMakers$1)\n                  }\n                ]);\n              }\n\n              var gpos = { parse: parseGposTable, make: makeGposTable };\n\n              // The `kern` table contains kerning pairs.\n\n              function parseWindowsKernTable(p) {\n                var pairs = {};\n                // Skip nTables.\n                p.skip('uShort');\n                var subtableVersion = p.parseUShort();\n                check.argument(\n                  subtableVersion === 0,\n                  'Unsupported kern sub-table version.'\n                );\n                // Skip subtableLength, subtableCoverage\n                p.skip('uShort', 2);\n                var nPairs = p.parseUShort();\n                // Skip searchRange, entrySelector, rangeShift.\n                p.skip('uShort', 3);\n                for (var i = 0; i < nPairs; i += 1) {\n                  var leftIndex = p.parseUShort();\n                  var rightIndex = p.parseUShort();\n                  var value = p.parseShort();\n                  pairs[leftIndex + ',' + rightIndex] = value;\n                }\n                return pairs;\n              }\n\n              function parseMacKernTable(p) {\n                var pairs = {};\n                // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.\n                // Skip the rest.\n                p.skip('uShort');\n                var nTables = p.parseULong();\n                //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');\n                if (nTables > 1) {\n                  console.warn('Only the first kern subtable is supported.');\n                }\n                p.skip('uLong');\n                var coverage = p.parseUShort();\n                var subtableVersion = coverage & 0xff;\n                p.skip('uShort');\n                if (subtableVersion === 0) {\n                  var nPairs = p.parseUShort();\n                  // Skip searchRange, entrySelector, rangeShift.\n                  p.skip('uShort', 3);\n                  for (var i = 0; i < nPairs; i += 1) {\n                    var leftIndex = p.parseUShort();\n                    var rightIndex = p.parseUShort();\n                    var value = p.parseShort();\n                    pairs[leftIndex + ',' + rightIndex] = value;\n                  }\n                }\n                return pairs;\n              }\n\n              // Parse the `kern` table which contains kerning pairs.\n              function parseKernTable(data, start) {\n                var p = new parse.Parser(data, start);\n                var tableVersion = p.parseUShort();\n                if (tableVersion === 0) {\n                  return parseWindowsKernTable(p);\n                } else if (tableVersion === 1) {\n                  return parseMacKernTable(p);\n                } else {\n                  throw new Error('Unsupported kern table version (' + tableVersion + ').');\n                }\n              }\n\n              var kern = { parse: parseKernTable };\n\n              // The `loca` table stores the offsets to the locations of the glyphs in the font.\n\n              // Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,\n              // relative to the beginning of the glyphData table.\n              // The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)\n              // The loca table has two versions: a short version where offsets are stored as uShorts, and a long\n              // version where offsets are stored as uLongs. The `head` table specifies which version to use\n              // (under indexToLocFormat).\n              function parseLocaTable(data, start, numGlyphs, shortVersion) {\n                var p = new parse.Parser(data, start);\n                var parseFn = shortVersion ? p.parseUShort : p.parseULong;\n                // There is an extra entry after the last index element to compute the length of the last glyph.\n                // That's why we use numGlyphs + 1.\n                var glyphOffsets = [];\n                for (var i = 0; i < numGlyphs + 1; i += 1) {\n                  var glyphOffset = parseFn.call(p);\n                  if (shortVersion) {\n                    // The short table version stores the actual offset divided by 2.\n                    glyphOffset *= 2;\n                  }\n\n                  glyphOffsets.push(glyphOffset);\n                }\n\n                return glyphOffsets;\n              }\n\n              var loca = { parse: parseLocaTable };\n\n              // opentype.js\n\n              /**\n               * The opentype library.\n               * @namespace opentype\n               */\n\n              // File loaders /////////////////////////////////////////////////////////\n              /**\n               * Loads a font from a file. The callback throws an error message as the first parameter if it fails\n               * and the font as an ArrayBuffer in the second parameter if it succeeds.\n               * @param  {string} path - The path of the file\n               * @param  {Function} callback - The function to call when the font load completes\n               */\n              function loadFromFile(path, callback) {\n                var fs = _dereq_('fs');\n                fs.readFile(path, function(err, buffer) {\n                  if (err) {\n                    return callback(err.message);\n                  }\n\n                  callback(null, nodeBufferToArrayBuffer(buffer));\n                });\n              }\n              /**\n               * Loads a font from a URL. The callback throws an error message as the first parameter if it fails\n               * and the font as an ArrayBuffer in the second parameter if it succeeds.\n               * @param  {string} url - The URL of the font file.\n               * @param  {Function} callback - The function to call when the font load completes\n               */\n              function loadFromUrl(url, callback) {\n                var request = new XMLHttpRequest();\n                request.open('get', url, true);\n                request.responseType = 'arraybuffer';\n                request.onload = function() {\n                  if (request.response) {\n                    return callback(null, request.response);\n                  } else {\n                    return callback('Font could not be loaded: ' + request.statusText);\n                  }\n                };\n\n                request.onerror = function() {\n                  callback('Font could not be loaded');\n                };\n\n                request.send();\n              }\n\n              // Table Directory Entries //////////////////////////////////////////////\n              /**\n               * Parses OpenType table entries.\n               * @param  {DataView}\n               * @param  {Number}\n               * @return {Object[]}\n               */\n              function parseOpenTypeTableEntries(data, numTables) {\n                var tableEntries = [];\n                var p = 12;\n                for (var i = 0; i < numTables; i += 1) {\n                  var tag = parse.getTag(data, p);\n                  var checksum = parse.getULong(data, p + 4);\n                  var offset = parse.getULong(data, p + 8);\n                  var length = parse.getULong(data, p + 12);\n                  tableEntries.push({\n                    tag: tag,\n                    checksum: checksum,\n                    offset: offset,\n                    length: length,\n                    compression: false\n                  });\n                  p += 16;\n                }\n\n                return tableEntries;\n              }\n\n              /**\n               * Parses WOFF table entries.\n               * @param  {DataView}\n               * @param  {Number}\n               * @return {Object[]}\n               */\n              function parseWOFFTableEntries(data, numTables) {\n                var tableEntries = [];\n                var p = 44; // offset to the first table directory entry.\n                for (var i = 0; i < numTables; i += 1) {\n                  var tag = parse.getTag(data, p);\n                  var offset = parse.getULong(data, p + 4);\n                  var compLength = parse.getULong(data, p + 8);\n                  var origLength = parse.getULong(data, p + 12);\n                  var compression = void 0;\n                  if (compLength < origLength) {\n                    compression = 'WOFF';\n                  } else {\n                    compression = false;\n                  }\n\n                  tableEntries.push({\n                    tag: tag,\n                    offset: offset,\n                    compression: compression,\n                    compressedLength: compLength,\n                    length: origLength\n                  });\n                  p += 20;\n                }\n\n                return tableEntries;\n              }\n\n              /**\n               * @typedef TableData\n               * @type Object\n               * @property {DataView} data - The DataView\n               * @property {number} offset - The data offset.\n               */\n\n              /**\n               * @param  {DataView}\n               * @param  {Object}\n               * @return {TableData}\n               */\n              function uncompressTable(data, tableEntry) {\n                if (tableEntry.compression === 'WOFF') {\n                  var inBuffer = new Uint8Array(\n                    data.buffer,\n                    tableEntry.offset + 2,\n                    tableEntry.compressedLength - 2\n                  );\n                  var outBuffer = new Uint8Array(tableEntry.length);\n                  tinyInflate(inBuffer, outBuffer);\n                  if (outBuffer.byteLength !== tableEntry.length) {\n                    throw new Error(\n                      'Decompression error: ' +\n                        tableEntry.tag +\n                        \" decompressed length doesn't match recorded length\"\n                    );\n                  }\n\n                  var view = new DataView(outBuffer.buffer, 0);\n                  return { data: view, offset: 0 };\n                } else {\n                  return { data: data, offset: tableEntry.offset };\n                }\n              }\n\n              // Public API ///////////////////////////////////////////////////////////\n\n              /**\n               * Parse the OpenType file data (as an ArrayBuffer) and return a Font object.\n               * Throws an error if the font could not be parsed.\n               * @param  {ArrayBuffer}\n               * @return {opentype.Font}\n               */\n              function parseBuffer(buffer) {\n                var indexToLocFormat;\n                var ltagTable;\n\n                // Since the constructor can also be called to create new fonts from scratch, we indicate this\n                // should be an empty font that we'll fill with our own data.\n                var font = new Font({ empty: true });\n\n                // OpenType fonts use big endian byte ordering.\n                // We can't rely on typed array view types, because they operate with the endianness of the host computer.\n                // Instead we use DataViews where we can specify endianness.\n                var data = new DataView(buffer, 0);\n                var numTables;\n                var tableEntries = [];\n                var signature = parse.getTag(data, 0);\n                if (\n                  signature === String.fromCharCode(0, 1, 0, 0) ||\n                  signature === 'true' ||\n                  signature === 'typ1'\n                ) {\n                  font.outlinesFormat = 'truetype';\n                  numTables = parse.getUShort(data, 4);\n                  tableEntries = parseOpenTypeTableEntries(data, numTables);\n                } else if (signature === 'OTTO') {\n                  font.outlinesFormat = 'cff';\n                  numTables = parse.getUShort(data, 4);\n                  tableEntries = parseOpenTypeTableEntries(data, numTables);\n                } else if (signature === 'wOFF') {\n                  var flavor = parse.getTag(data, 4);\n                  if (flavor === String.fromCharCode(0, 1, 0, 0)) {\n                    font.outlinesFormat = 'truetype';\n                  } else if (flavor === 'OTTO') {\n                    font.outlinesFormat = 'cff';\n                  } else {\n                    throw new Error('Unsupported OpenType flavor ' + signature);\n                  }\n\n                  numTables = parse.getUShort(data, 12);\n                  tableEntries = parseWOFFTableEntries(data, numTables);\n                } else {\n                  throw new Error('Unsupported OpenType signature ' + signature);\n                }\n\n                var cffTableEntry;\n                var fvarTableEntry;\n                var glyfTableEntry;\n                var gposTableEntry;\n                var gsubTableEntry;\n                var hmtxTableEntry;\n                var kernTableEntry;\n                var locaTableEntry;\n                var nameTableEntry;\n                var metaTableEntry;\n                var p;\n\n                for (var i = 0; i < numTables; i += 1) {\n                  var tableEntry = tableEntries[i];\n                  var table = void 0;\n                  switch (tableEntry.tag) {\n                    case 'cmap':\n                      table = uncompressTable(data, tableEntry);\n                      font.tables.cmap = cmap.parse(table.data, table.offset);\n                      font.encoding = new CmapEncoding(font.tables.cmap);\n                      break;\n                    case 'cvt ':\n                      table = uncompressTable(data, tableEntry);\n                      p = new parse.Parser(table.data, table.offset);\n                      font.tables.cvt = p.parseShortList(tableEntry.length / 2);\n                      break;\n                    case 'fvar':\n                      fvarTableEntry = tableEntry;\n                      break;\n                    case 'fpgm':\n                      table = uncompressTable(data, tableEntry);\n                      p = new parse.Parser(table.data, table.offset);\n                      font.tables.fpgm = p.parseByteList(tableEntry.length);\n                      break;\n                    case 'head':\n                      table = uncompressTable(data, tableEntry);\n                      font.tables.head = head.parse(table.data, table.offset);\n                      font.unitsPerEm = font.tables.head.unitsPerEm;\n                      indexToLocFormat = font.tables.head.indexToLocFormat;\n                      break;\n                    case 'hhea':\n                      table = uncompressTable(data, tableEntry);\n                      font.tables.hhea = hhea.parse(table.data, table.offset);\n                      font.ascender = font.tables.hhea.ascender;\n                      font.descender = font.tables.hhea.descender;\n                      font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;\n                      break;\n                    case 'hmtx':\n                      hmtxTableEntry = tableEntry;\n                      break;\n                    case 'ltag':\n                      table = uncompressTable(data, tableEntry);\n                      ltagTable = ltag.parse(table.data, table.offset);\n                      break;\n                    case 'maxp':\n                      table = uncompressTable(data, tableEntry);\n                      font.tables.maxp = maxp.parse(table.data, table.offset);\n                      font.numGlyphs = font.tables.maxp.numGlyphs;\n                      break;\n                    case 'name':\n                      nameTableEntry = tableEntry;\n                      break;\n                    case 'OS/2':\n                      table = uncompressTable(data, tableEntry);\n                      font.tables.os2 = os2.parse(table.data, table.offset);\n                      break;\n                    case 'post':\n                      table = uncompressTable(data, tableEntry);\n                      font.tables.post = post.parse(table.data, table.offset);\n                      font.glyphNames = new GlyphNames(font.tables.post);\n                      break;\n                    case 'prep':\n                      table = uncompressTable(data, tableEntry);\n                      p = new parse.Parser(table.data, table.offset);\n                      font.tables.prep = p.parseByteList(tableEntry.length);\n                      break;\n                    case 'glyf':\n                      glyfTableEntry = tableEntry;\n                      break;\n                    case 'loca':\n                      locaTableEntry = tableEntry;\n                      break;\n                    case 'CFF ':\n                      cffTableEntry = tableEntry;\n                      break;\n                    case 'kern':\n                      kernTableEntry = tableEntry;\n                      break;\n                    case 'GPOS':\n                      gposTableEntry = tableEntry;\n                      break;\n                    case 'GSUB':\n                      gsubTableEntry = tableEntry;\n                      break;\n                    case 'meta':\n                      metaTableEntry = tableEntry;\n                      break;\n                  }\n                }\n\n                var nameTable = uncompressTable(data, nameTableEntry);\n                font.tables.name = _name.parse(nameTable.data, nameTable.offset, ltagTable);\n                font.names = font.tables.name;\n\n                if (glyfTableEntry && locaTableEntry) {\n                  var shortVersion = indexToLocFormat === 0;\n                  var locaTable = uncompressTable(data, locaTableEntry);\n                  var locaOffsets = loca.parse(\n                    locaTable.data,\n                    locaTable.offset,\n                    font.numGlyphs,\n                    shortVersion\n                  );\n                  var glyfTable = uncompressTable(data, glyfTableEntry);\n                  font.glyphs = glyf.parse(\n                    glyfTable.data,\n                    glyfTable.offset,\n                    locaOffsets,\n                    font\n                  );\n                } else if (cffTableEntry) {\n                  var cffTable = uncompressTable(data, cffTableEntry);\n                  cff.parse(cffTable.data, cffTable.offset, font);\n                } else {\n                  throw new Error(\"Font doesn't contain TrueType or CFF outlines.\");\n                }\n\n                var hmtxTable = uncompressTable(data, hmtxTableEntry);\n                hmtx.parse(\n                  hmtxTable.data,\n                  hmtxTable.offset,\n                  font.numberOfHMetrics,\n                  font.numGlyphs,\n                  font.glyphs\n                );\n                addGlyphNames(font);\n\n                if (kernTableEntry) {\n                  var kernTable = uncompressTable(data, kernTableEntry);\n                  font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);\n                } else {\n                  font.kerningPairs = {};\n                }\n\n                if (gposTableEntry) {\n                  var gposTable = uncompressTable(data, gposTableEntry);\n                  font.tables.gpos = gpos.parse(gposTable.data, gposTable.offset);\n                  font.position.init();\n                }\n\n                if (gsubTableEntry) {\n                  var gsubTable = uncompressTable(data, gsubTableEntry);\n                  font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);\n                }\n\n                if (fvarTableEntry) {\n                  var fvarTable = uncompressTable(data, fvarTableEntry);\n                  font.tables.fvar = fvar.parse(\n                    fvarTable.data,\n                    fvarTable.offset,\n                    font.names\n                  );\n                }\n\n                if (metaTableEntry) {\n                  var metaTable = uncompressTable(data, metaTableEntry);\n                  font.tables.meta = meta.parse(metaTable.data, metaTable.offset);\n                  font.metas = font.tables.meta;\n                }\n\n                return font;\n              }\n\n              /**\n               * Asynchronously load the font from a URL or a filesystem. When done, call the callback\n               * with two arguments `(err, font)`. The `err` will be null on success,\n               * the `font` is a Font object.\n               * We use the node.js callback convention so that\n               * opentype.js can integrate with frameworks like async.js.\n               * @alias opentype.load\n               * @param  {string} url - The URL of the font to load.\n               * @param  {Function} callback - The callback.\n               */\n              function load(url, callback) {\n                var isNode$$1 = typeof window === 'undefined';\n                var loadFn = isNode$$1 ? loadFromFile : loadFromUrl;\n                loadFn(url, function(err, arrayBuffer) {\n                  if (err) {\n                    return callback(err);\n                  }\n                  var font;\n                  try {\n                    font = parseBuffer(arrayBuffer);\n                  } catch (e) {\n                    return callback(e, null);\n                  }\n                  return callback(null, font);\n                });\n              }\n\n              /**\n               * Synchronously load the font from a URL or file.\n               * When done, returns the font object or throws an error.\n               * @alias opentype.loadSync\n               * @param  {string} url - The URL of the font to load.\n               * @return {opentype.Font}\n               */\n              function loadSync(url) {\n                var fs = _dereq_('fs');\n                var buffer = fs.readFileSync(url);\n                return parseBuffer(nodeBufferToArrayBuffer(buffer));\n              }\n\n              exports.Font = Font;\n              exports.Glyph = Glyph;\n              exports.Path = Path;\n              exports.BoundingBox = BoundingBox;\n              exports._parse = parse;\n              exports.parse = parseBuffer;\n              exports.load = load;\n              exports.loadSync = loadSync;\n\n              Object.defineProperty(exports, '__esModule', { value: true });\n            });\n          }.call(this, _dereq_('buffer').Buffer));\n        },\n        { buffer: 4, fs: 3 }\n      ],\n      11: [\n        function(_dereq_, module, exports) {\n          // shim for using process in browser\n          var process = (module.exports = {});\n\n          // cached from whatever global is present so that test runners that stub it\n          // don't break things.  But we need to wrap it in a try catch in case it is\n          // wrapped in strict mode code which doesn't define any globals.  It's inside a\n          // function because try/catches deoptimize in certain engines.\n\n          var cachedSetTimeout;\n          var cachedClearTimeout;\n\n          function defaultSetTimout() {\n            throw new Error('setTimeout has not been defined');\n          }\n          function defaultClearTimeout() {\n            throw new Error('clearTimeout has not been defined');\n          }\n          (function() {\n            try {\n              if (typeof setTimeout === 'function') {\n                cachedSetTimeout = setTimeout;\n              } else {\n                cachedSetTimeout = defaultSetTimout;\n              }\n            } catch (e) {\n              cachedSetTimeout = defaultSetTimout;\n            }\n            try {\n              if (typeof clearTimeout === 'function') {\n                cachedClearTimeout = clearTimeout;\n              } else {\n                cachedClearTimeout = defaultClearTimeout;\n              }\n            } catch (e) {\n              cachedClearTimeout = defaultClearTimeout;\n            }\n          })();\n          function runTimeout(fun) {\n            if (cachedSetTimeout === setTimeout) {\n              //normal enviroments in sane situations\n              return setTimeout(fun, 0);\n            }\n            // if setTimeout wasn't available but was latter defined\n            if (\n              (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&\n              setTimeout\n            ) {\n              cachedSetTimeout = setTimeout;\n              return setTimeout(fun, 0);\n            }\n            try {\n              // when when somebody has screwed with setTimeout but no I.E. maddness\n              return cachedSetTimeout(fun, 0);\n            } catch (e) {\n              try {\n                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n                return cachedSetTimeout.call(null, fun, 0);\n              } catch (e) {\n                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n                return cachedSetTimeout.call(this, fun, 0);\n              }\n            }\n          }\n          function runClearTimeout(marker) {\n            if (cachedClearTimeout === clearTimeout) {\n              //normal enviroments in sane situations\n              return clearTimeout(marker);\n            }\n            // if clearTimeout wasn't available but was latter defined\n            if (\n              (cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) &&\n              clearTimeout\n            ) {\n              cachedClearTimeout = clearTimeout;\n              return clearTimeout(marker);\n            }\n            try {\n              // when when somebody has screwed with setTimeout but no I.E. maddness\n              return cachedClearTimeout(marker);\n            } catch (e) {\n              try {\n                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n                return cachedClearTimeout.call(null, marker);\n              } catch (e) {\n                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n                // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n                return cachedClearTimeout.call(this, marker);\n              }\n            }\n          }\n          var queue = [];\n          var draining = false;\n          var currentQueue;\n          var queueIndex = -1;\n\n          function cleanUpNextTick() {\n            if (!draining || !currentQueue) {\n              return;\n            }\n            draining = false;\n            if (currentQueue.length) {\n              queue = currentQueue.concat(queue);\n            } else {\n              queueIndex = -1;\n            }\n            if (queue.length) {\n              drainQueue();\n            }\n          }\n\n          function drainQueue() {\n            if (draining) {\n              return;\n            }\n            var timeout = runTimeout(cleanUpNextTick);\n            draining = true;\n\n            var len = queue.length;\n            while (len) {\n              currentQueue = queue;\n              queue = [];\n              while (++queueIndex < len) {\n                if (currentQueue) {\n                  currentQueue[queueIndex].run();\n                }\n              }\n              queueIndex = -1;\n              len = queue.length;\n            }\n            currentQueue = null;\n            draining = false;\n            runClearTimeout(timeout);\n          }\n\n          process.nextTick = function(fun) {\n            var args = new Array(arguments.length - 1);\n            if (arguments.length > 1) {\n              for (var i = 1; i < arguments.length; i++) {\n                args[i - 1] = arguments[i];\n              }\n            }\n            queue.push(new Item(fun, args));\n            if (queue.length === 1 && !draining) {\n              runTimeout(drainQueue);\n            }\n          };\n\n          // v8 likes predictible objects\n          function Item(fun, array) {\n            this.fun = fun;\n            this.array = array;\n          }\n          Item.prototype.run = function() {\n            this.fun.apply(null, this.array);\n          };\n          process.title = 'browser';\n          process.browser = true;\n          process.env = {};\n          process.argv = [];\n          process.version = ''; // empty string to avoid regexp issues\n          process.versions = {};\n\n          function noop() {}\n\n          process.on = noop;\n          process.addListener = noop;\n          process.once = noop;\n          process.off = noop;\n          process.removeListener = noop;\n          process.removeAllListeners = noop;\n          process.emit = noop;\n          process.prependListener = noop;\n          process.prependOnceListener = noop;\n\n          process.listeners = function(name) {\n            return [];\n          };\n\n          process.binding = function(name) {\n            throw new Error('process.binding is not supported');\n          };\n\n          process.cwd = function() {\n            return '/';\n          };\n          process.chdir = function(dir) {\n            throw new Error('process.chdir is not supported');\n          };\n          process.umask = function() {\n            return 0;\n          };\n        },\n        {}\n      ],\n      12: [\n        function(_dereq_, module, exports) {\n          (function(self) {\n            'use strict';\n\n            if (self.fetch) {\n              return;\n            }\n\n            var support = {\n              searchParams: 'URLSearchParams' in self,\n              iterable: 'Symbol' in self && 'iterator' in Symbol,\n              blob:\n                'FileReader' in self &&\n                'Blob' in self &&\n                (function() {\n                  try {\n                    new Blob();\n                    return true;\n                  } catch (e) {\n                    return false;\n                  }\n                })(),\n              formData: 'FormData' in self,\n              arrayBuffer: 'ArrayBuffer' in self\n            };\n\n            if (support.arrayBuffer) {\n              var viewClasses = [\n                '[object Int8Array]',\n                '[object Uint8Array]',\n                '[object Uint8ClampedArray]',\n                '[object Int16Array]',\n                '[object Uint16Array]',\n                '[object Int32Array]',\n                '[object Uint32Array]',\n                '[object Float32Array]',\n                '[object Float64Array]'\n              ];\n\n              var isDataView = function(obj) {\n                return obj && DataView.prototype.isPrototypeOf(obj);\n              };\n\n              var isArrayBufferView =\n                ArrayBuffer.isView ||\n                function(obj) {\n                  return (\n                    obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n                  );\n                };\n            }\n\n            function normalizeName(name) {\n              if (typeof name !== 'string') {\n                name = String(name);\n              }\n              if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n                throw new TypeError('Invalid character in header field name');\n              }\n              return name.toLowerCase();\n            }\n\n            function normalizeValue(value) {\n              if (typeof value !== 'string') {\n                value = String(value);\n              }\n              return value;\n            }\n\n            // Build a destructive iterator for the value list\n            function iteratorFor(items) {\n              var iterator = {\n                next: function() {\n                  var value = items.shift();\n                  return { done: value === undefined, value: value };\n                }\n              };\n\n              if (support.iterable) {\n                iterator[Symbol.iterator] = function() {\n                  return iterator;\n                };\n              }\n\n              return iterator;\n            }\n\n            function Headers(headers) {\n              this.map = {};\n\n              if (headers instanceof Headers) {\n                headers.forEach(function(value, name) {\n                  this.append(name, value);\n                }, this);\n              } else if (Array.isArray(headers)) {\n                headers.forEach(function(header) {\n                  this.append(header[0], header[1]);\n                }, this);\n              } else if (headers) {\n                Object.getOwnPropertyNames(headers).forEach(function(name) {\n                  this.append(name, headers[name]);\n                }, this);\n              }\n            }\n\n            Headers.prototype.append = function(name, value) {\n              name = normalizeName(name);\n              value = normalizeValue(value);\n              var oldValue = this.map[name];\n              this.map[name] = oldValue ? oldValue + ',' + value : value;\n            };\n\n            Headers.prototype['delete'] = function(name) {\n              delete this.map[normalizeName(name)];\n            };\n\n            Headers.prototype.get = function(name) {\n              name = normalizeName(name);\n              return this.has(name) ? this.map[name] : null;\n            };\n\n            Headers.prototype.has = function(name) {\n              return this.map.hasOwnProperty(normalizeName(name));\n            };\n\n            Headers.prototype.set = function(name, value) {\n              this.map[normalizeName(name)] = normalizeValue(value);\n            };\n\n            Headers.prototype.forEach = function(callback, thisArg) {\n              for (var name in this.map) {\n                if (this.map.hasOwnProperty(name)) {\n                  callback.call(thisArg, this.map[name], name, this);\n                }\n              }\n            };\n\n            Headers.prototype.keys = function() {\n              var items = [];\n              this.forEach(function(value, name) {\n                items.push(name);\n              });\n              return iteratorFor(items);\n            };\n\n            Headers.prototype.values = function() {\n              var items = [];\n              this.forEach(function(value) {\n                items.push(value);\n              });\n              return iteratorFor(items);\n            };\n\n            Headers.prototype.entries = function() {\n              var items = [];\n              this.forEach(function(value, name) {\n                items.push([name, value]);\n              });\n              return iteratorFor(items);\n            };\n\n            if (support.iterable) {\n              Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n            }\n\n            function consumed(body) {\n              if (body.bodyUsed) {\n                return Promise.reject(new TypeError('Already read'));\n              }\n              body.bodyUsed = true;\n            }\n\n            function fileReaderReady(reader) {\n              return new Promise(function(resolve, reject) {\n                reader.onload = function() {\n                  resolve(reader.result);\n                };\n                reader.onerror = function() {\n                  reject(reader.error);\n                };\n              });\n            }\n\n            function readBlobAsArrayBuffer(blob) {\n              var reader = new FileReader();\n              var promise = fileReaderReady(reader);\n              reader.readAsArrayBuffer(blob);\n              return promise;\n            }\n\n            function readBlobAsText(blob) {\n              var reader = new FileReader();\n              var promise = fileReaderReady(reader);\n              reader.readAsText(blob);\n              return promise;\n            }\n\n            function readArrayBufferAsText(buf) {\n              var view = new Uint8Array(buf);\n              var chars = new Array(view.length);\n\n              for (var i = 0; i < view.length; i++) {\n                chars[i] = String.fromCharCode(view[i]);\n              }\n              return chars.join('');\n            }\n\n            function bufferClone(buf) {\n              if (buf.slice) {\n                return buf.slice(0);\n              } else {\n                var view = new Uint8Array(buf.byteLength);\n                view.set(new Uint8Array(buf));\n                return view.buffer;\n              }\n            }\n\n            function Body() {\n              this.bodyUsed = false;\n\n              this._initBody = function(body) {\n                this._bodyInit = body;\n                if (!body) {\n                  this._bodyText = '';\n                } else if (typeof body === 'string') {\n                  this._bodyText = body;\n                } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n                  this._bodyBlob = body;\n                } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n                  this._bodyFormData = body;\n                } else if (\n                  support.searchParams &&\n                  URLSearchParams.prototype.isPrototypeOf(body)\n                ) {\n                  this._bodyText = body.toString();\n                } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n                  this._bodyArrayBuffer = bufferClone(body.buffer);\n                  // IE 10-11 can't handle a DataView body.\n                  this._bodyInit = new Blob([this._bodyArrayBuffer]);\n                } else if (\n                  support.arrayBuffer &&\n                  (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))\n                ) {\n                  this._bodyArrayBuffer = bufferClone(body);\n                } else {\n                  throw new Error('unsupported BodyInit type');\n                }\n\n                if (!this.headers.get('content-type')) {\n                  if (typeof body === 'string') {\n                    this.headers.set('content-type', 'text/plain;charset=UTF-8');\n                  } else if (this._bodyBlob && this._bodyBlob.type) {\n                    this.headers.set('content-type', this._bodyBlob.type);\n                  } else if (\n                    support.searchParams &&\n                    URLSearchParams.prototype.isPrototypeOf(body)\n                  ) {\n                    this.headers.set(\n                      'content-type',\n                      'application/x-www-form-urlencoded;charset=UTF-8'\n                    );\n                  }\n                }\n              };\n\n              if (support.blob) {\n                this.blob = function() {\n                  var rejected = consumed(this);\n                  if (rejected) {\n                    return rejected;\n                  }\n\n                  if (this._bodyBlob) {\n                    return Promise.resolve(this._bodyBlob);\n                  } else if (this._bodyArrayBuffer) {\n                    return Promise.resolve(new Blob([this._bodyArrayBuffer]));\n                  } else if (this._bodyFormData) {\n                    throw new Error('could not read FormData body as blob');\n                  } else {\n                    return Promise.resolve(new Blob([this._bodyText]));\n                  }\n                };\n\n                this.arrayBuffer = function() {\n                  if (this._bodyArrayBuffer) {\n                    return consumed(this) || Promise.resolve(this._bodyArrayBuffer);\n                  } else {\n                    return this.blob().then(readBlobAsArrayBuffer);\n                  }\n                };\n              }\n\n              this.text = function() {\n                var rejected = consumed(this);\n                if (rejected) {\n                  return rejected;\n                }\n\n                if (this._bodyBlob) {\n                  return readBlobAsText(this._bodyBlob);\n                } else if (this._bodyArrayBuffer) {\n                  return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));\n                } else if (this._bodyFormData) {\n                  throw new Error('could not read FormData body as text');\n                } else {\n                  return Promise.resolve(this._bodyText);\n                }\n              };\n\n              if (support.formData) {\n                this.formData = function() {\n                  return this.text().then(decode);\n                };\n              }\n\n              this.json = function() {\n                return this.text().then(JSON.parse);\n              };\n\n              return this;\n            }\n\n            // HTTP methods whose capitalization should be normalized\n            var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n            function normalizeMethod(method) {\n              var upcased = method.toUpperCase();\n              return methods.indexOf(upcased) > -1 ? upcased : method;\n            }\n\n            function Request(input, options) {\n              options = options || {};\n              var body = options.body;\n\n              if (input instanceof Request) {\n                if (input.bodyUsed) {\n                  throw new TypeError('Already read');\n                }\n                this.url = input.url;\n                this.credentials = input.credentials;\n                if (!options.headers) {\n                  this.headers = new Headers(input.headers);\n                }\n                this.method = input.method;\n                this.mode = input.mode;\n                if (!body && input._bodyInit != null) {\n                  body = input._bodyInit;\n                  input.bodyUsed = true;\n                }\n              } else {\n                this.url = String(input);\n              }\n\n              this.credentials = options.credentials || this.credentials || 'omit';\n              if (options.headers || !this.headers) {\n                this.headers = new Headers(options.headers);\n              }\n              this.method = normalizeMethod(options.method || this.method || 'GET');\n              this.mode = options.mode || this.mode || null;\n              this.referrer = null;\n\n              if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n                throw new TypeError('Body not allowed for GET or HEAD requests');\n              }\n              this._initBody(body);\n            }\n\n            Request.prototype.clone = function() {\n              return new Request(this, { body: this._bodyInit });\n            };\n\n            function decode(body) {\n              var form = new FormData();\n              body\n                .trim()\n                .split('&')\n                .forEach(function(bytes) {\n                  if (bytes) {\n                    var split = bytes.split('=');\n                    var name = split.shift().replace(/\\+/g, ' ');\n                    var value = split.join('=').replace(/\\+/g, ' ');\n                    form.append(decodeURIComponent(name), decodeURIComponent(value));\n                  }\n                });\n              return form;\n            }\n\n            function parseHeaders(rawHeaders) {\n              var headers = new Headers();\n              // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n              // https://tools.ietf.org/html/rfc7230#section-3.2\n              var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n              preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n                var parts = line.split(':');\n                var key = parts.shift().trim();\n                if (key) {\n                  var value = parts.join(':').trim();\n                  headers.append(key, value);\n                }\n              });\n              return headers;\n            }\n\n            Body.call(Request.prototype);\n\n            function Response(bodyInit, options) {\n              if (!options) {\n                options = {};\n              }\n\n              this.type = 'default';\n              this.status = options.status === undefined ? 200 : options.status;\n              this.ok = this.status >= 200 && this.status < 300;\n              this.statusText = 'statusText' in options ? options.statusText : 'OK';\n              this.headers = new Headers(options.headers);\n              this.url = options.url || '';\n              this._initBody(bodyInit);\n            }\n\n            Body.call(Response.prototype);\n\n            Response.prototype.clone = function() {\n              return new Response(this._bodyInit, {\n                status: this.status,\n                statusText: this.statusText,\n                headers: new Headers(this.headers),\n                url: this.url\n              });\n            };\n\n            Response.error = function() {\n              var response = new Response(null, { status: 0, statusText: '' });\n              response.type = 'error';\n              return response;\n            };\n\n            var redirectStatuses = [301, 302, 303, 307, 308];\n\n            Response.redirect = function(url, status) {\n              if (redirectStatuses.indexOf(status) === -1) {\n                throw new RangeError('Invalid status code');\n              }\n\n              return new Response(null, { status: status, headers: { location: url } });\n            };\n\n            self.Headers = Headers;\n            self.Request = Request;\n            self.Response = Response;\n\n            self.fetch = function(input, init) {\n              return new Promise(function(resolve, reject) {\n                var request = new Request(input, init);\n                var xhr = new XMLHttpRequest();\n\n                xhr.onload = function() {\n                  var options = {\n                    status: xhr.status,\n                    statusText: xhr.statusText,\n                    headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n                  };\n                  options.url =\n                    'responseURL' in xhr\n                      ? xhr.responseURL\n                      : options.headers.get('X-Request-URL');\n                  var body = 'response' in xhr ? xhr.response : xhr.responseText;\n                  resolve(new Response(body, options));\n                };\n\n                xhr.onerror = function() {\n                  reject(new TypeError('Network request failed'));\n                };\n\n                xhr.ontimeout = function() {\n                  reject(new TypeError('Network request failed'));\n                };\n\n                xhr.open(request.method, request.url, true);\n\n                if (request.credentials === 'include') {\n                  xhr.withCredentials = true;\n                } else if (request.credentials === 'omit') {\n                  xhr.withCredentials = false;\n                }\n\n                if ('responseType' in xhr && support.blob) {\n                  xhr.responseType = 'blob';\n                }\n\n                request.headers.forEach(function(value, name) {\n                  xhr.setRequestHeader(name, value);\n                });\n\n                xhr.send(\n                  typeof request._bodyInit === 'undefined' ? null : request._bodyInit\n                );\n              });\n            };\n            self.fetch.polyfill = true;\n          })(typeof self !== 'undefined' ? self : this);\n        },\n        {}\n      ],\n      13: [\n        function(_dereq_, module, exports) {\n          'use strict';\n\n          // core\n          var p5 = _dereq_('./core/main');\n          _dereq_('./core/constants');\n          _dereq_('./core/environment');\n          _dereq_('./core/error_helpers');\n          _dereq_('./core/helpers');\n          _dereq_('./core/legacy');\n          _dereq_('./core/p5.Element');\n          _dereq_('./core/p5.Graphics');\n          _dereq_('./core/p5.Renderer');\n          _dereq_('./core/p5.Renderer2D');\n          _dereq_('./core/rendering');\n          _dereq_('./core/shim');\n          _dereq_('./core/structure');\n          _dereq_('./core/transform');\n          _dereq_('./core/shape/2d_primitives');\n          _dereq_('./core/shape/attributes');\n          _dereq_('./core/shape/curves');\n          _dereq_('./core/shape/vertex');\n\n          // color\n          _dereq_('./color/color_conversion');\n          _dereq_('./color/creating_reading');\n          _dereq_('./color/p5.Color');\n          _dereq_('./color/setting');\n\n          // data\n          _dereq_('./data/p5.TypedDict');\n          _dereq_('./data/local_storage.js');\n\n          // events\n          _dereq_('./events/acceleration');\n          _dereq_('./events/keyboard');\n          _dereq_('./events/mouse');\n          _dereq_('./events/touch');\n\n          // image\n          _dereq_('./image/filters');\n          _dereq_('./image/image');\n          _dereq_('./image/loading_displaying');\n          _dereq_('./image/p5.Image');\n          _dereq_('./image/pixels');\n\n          // io\n          _dereq_('./io/files');\n          _dereq_('./io/p5.Table');\n          _dereq_('./io/p5.TableRow');\n          _dereq_('./io/p5.XML');\n\n          // math\n          _dereq_('./math/calculation');\n          _dereq_('./math/math');\n          _dereq_('./math/noise');\n          _dereq_('./math/p5.Vector');\n          _dereq_('./math/random');\n          _dereq_('./math/trigonometry');\n\n          // typography\n          _dereq_('./typography/attributes');\n          _dereq_('./typography/loading_displaying');\n          _dereq_('./typography/p5.Font');\n\n          // utilities\n          _dereq_('./utilities/array_functions');\n          _dereq_('./utilities/conversion');\n          _dereq_('./utilities/string_functions');\n          _dereq_('./utilities/time_date');\n\n          // webgl\n          _dereq_('./webgl/3d_primitives');\n          _dereq_('./webgl/interaction');\n          _dereq_('./webgl/light');\n          _dereq_('./webgl/loading');\n          _dereq_('./webgl/material');\n          _dereq_('./webgl/p5.Camera');\n          _dereq_('./webgl/p5.Geometry');\n          _dereq_('./webgl/p5.Matrix');\n          _dereq_('./webgl/p5.RendererGL.Immediate');\n          _dereq_('./webgl/p5.RendererGL');\n          _dereq_('./webgl/p5.RendererGL.Retained');\n          _dereq_('./webgl/p5.Shader');\n          _dereq_('./webgl/p5.Texture');\n          _dereq_('./webgl/text');\n\n          _dereq_('./core/init');\n\n          module.exports = p5;\n        },\n        {\n          './color/color_conversion': 14,\n          './color/creating_reading': 15,\n          './color/p5.Color': 16,\n          './color/setting': 17,\n          './core/constants': 18,\n          './core/environment': 19,\n          './core/error_helpers': 20,\n          './core/helpers': 21,\n          './core/init': 22,\n          './core/legacy': 23,\n          './core/main': 24,\n          './core/p5.Element': 25,\n          './core/p5.Graphics': 26,\n          './core/p5.Renderer': 27,\n          './core/p5.Renderer2D': 28,\n          './core/rendering': 29,\n          './core/shape/2d_primitives': 30,\n          './core/shape/attributes': 31,\n          './core/shape/curves': 32,\n          './core/shape/vertex': 33,\n          './core/shim': 34,\n          './core/structure': 35,\n          './core/transform': 36,\n          './data/local_storage.js': 37,\n          './data/p5.TypedDict': 38,\n          './events/acceleration': 39,\n          './events/keyboard': 40,\n          './events/mouse': 41,\n          './events/touch': 42,\n          './image/filters': 43,\n          './image/image': 44,\n          './image/loading_displaying': 45,\n          './image/p5.Image': 46,\n          './image/pixels': 47,\n          './io/files': 48,\n          './io/p5.Table': 49,\n          './io/p5.TableRow': 50,\n          './io/p5.XML': 51,\n          './math/calculation': 52,\n          './math/math': 53,\n          './math/noise': 54,\n          './math/p5.Vector': 55,\n          './math/random': 56,\n          './math/trigonometry': 57,\n          './typography/attributes': 58,\n          './typography/loading_displaying': 59,\n          './typography/p5.Font': 60,\n          './utilities/array_functions': 61,\n          './utilities/conversion': 62,\n          './utilities/string_functions': 63,\n          './utilities/time_date': 64,\n          './webgl/3d_primitives': 65,\n          './webgl/interaction': 66,\n          './webgl/light': 67,\n          './webgl/loading': 68,\n          './webgl/material': 69,\n          './webgl/p5.Camera': 70,\n          './webgl/p5.Geometry': 71,\n          './webgl/p5.Matrix': 72,\n          './webgl/p5.RendererGL': 75,\n          './webgl/p5.RendererGL.Immediate': 73,\n          './webgl/p5.RendererGL.Retained': 74,\n          './webgl/p5.Shader': 76,\n          './webgl/p5.Texture': 77,\n          './webgl/text': 78\n        }\n      ],\n      14: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Color\n           * @submodule Color Conversion\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          /**\n           * Conversions adapted from <http://www.easyrgb.com/en/math.php>.\n           *\n           * In these functions, hue is always in the range [0, 1], just like all other\n           * components are in the range [0, 1]. 'Brightness' and 'value' are used\n           * interchangeably.\n           */\n\n          var p5 = _dereq_('../core/main');\n          p5.ColorConversion = {};\n\n          /**\n           * Convert an HSBA array to HSLA.\n           */\n          p5.ColorConversion._hsbaToHSLA = function(hsba) {\n            var hue = hsba[0];\n            var sat = hsba[1];\n            var val = hsba[2];\n\n            // Calculate lightness.\n            var li = (2 - sat) * val / 2;\n\n            // Convert saturation.\n            if (li !== 0) {\n              if (li === 1) {\n                sat = 0;\n              } else if (li < 0.5) {\n                sat = sat / (2 - sat);\n              } else {\n                sat = sat * val / (2 - li * 2);\n              }\n            }\n\n            // Hue and alpha stay the same.\n            return [hue, sat, li, hsba[3]];\n          };\n\n          /**\n           * Convert an HSBA array to RGBA.\n           */\n          p5.ColorConversion._hsbaToRGBA = function(hsba) {\n            var hue = hsba[0] * 6; // We will split hue into 6 sectors.\n            var sat = hsba[1];\n            var val = hsba[2];\n\n            var RGBA = [];\n\n            if (sat === 0) {\n              RGBA = [val, val, val, hsba[3]]; // Return early if grayscale.\n            } else {\n              var sector = Math.floor(hue);\n              var tint1 = val * (1 - sat);\n              var tint2 = val * (1 - sat * (hue - sector));\n              var tint3 = val * (1 - sat * (1 + sector - hue));\n              var red, green, blue;\n              if (sector === 1) {\n                // Yellow to green.\n                red = tint2;\n                green = val;\n                blue = tint1;\n              } else if (sector === 2) {\n                // Green to cyan.\n                red = tint1;\n                green = val;\n                blue = tint3;\n              } else if (sector === 3) {\n                // Cyan to blue.\n                red = tint1;\n                green = tint2;\n                blue = val;\n              } else if (sector === 4) {\n                // Blue to magenta.\n                red = tint3;\n                green = tint1;\n                blue = val;\n              } else if (sector === 5) {\n                // Magenta to red.\n                red = val;\n                green = tint1;\n                blue = tint2;\n              } else {\n                // Red to yellow (sector could be 0 or 6).\n                red = val;\n                green = tint3;\n                blue = tint1;\n              }\n              RGBA = [red, green, blue, hsba[3]];\n            }\n\n            return RGBA;\n          };\n\n          /**\n           * Convert an HSLA array to HSBA.\n           */\n          p5.ColorConversion._hslaToHSBA = function(hsla) {\n            var hue = hsla[0];\n            var sat = hsla[1];\n            var li = hsla[2];\n\n            // Calculate brightness.\n            var val;\n            if (li < 0.5) {\n              val = (1 + sat) * li;\n            } else {\n              val = li + sat - li * sat;\n            }\n\n            // Convert saturation.\n            sat = 2 * (val - li) / val;\n\n            // Hue and alpha stay the same.\n            return [hue, sat, val, hsla[3]];\n          };\n\n          /**\n           * Convert an HSLA array to RGBA.\n           *\n           * We need to change basis from HSLA to something that can be more easily be\n           * projected onto RGBA. We will choose hue and brightness as our first two\n           * components, and pick a convenient third one ('zest') so that we don't need\n           * to calculate formal HSBA saturation.\n           */\n          p5.ColorConversion._hslaToRGBA = function(hsla) {\n            var hue = hsla[0] * 6; // We will split hue into 6 sectors.\n            var sat = hsla[1];\n            var li = hsla[2];\n\n            var RGBA = [];\n\n            if (sat === 0) {\n              RGBA = [li, li, li, hsla[3]]; // Return early if grayscale.\n            } else {\n              // Calculate brightness.\n              var val;\n              if (li < 0.5) {\n                val = (1 + sat) * li;\n              } else {\n                val = li + sat - li * sat;\n              }\n\n              // Define zest.\n              var zest = 2 * li - val;\n\n              // Implement projection (project onto green by default).\n              var hzvToRGB = function hzvToRGB(hue, zest, val) {\n                if (hue < 0) {\n                  // Hue must wrap to allow projection onto red and blue.\n                  hue += 6;\n                } else if (hue >= 6) {\n                  hue -= 6;\n                }\n                if (hue < 1) {\n                  // Red to yellow (increasing green).\n                  return zest + (val - zest) * hue;\n                } else if (hue < 3) {\n                  // Yellow to cyan (greatest green).\n                  return val;\n                } else if (hue < 4) {\n                  // Cyan to blue (decreasing green).\n                  return zest + (val - zest) * (4 - hue);\n                } else {\n                  // Blue to red (least green).\n                  return zest;\n                }\n              };\n\n              // Perform projections, offsetting hue as necessary.\n              RGBA = [\n                hzvToRGB(hue + 2, zest, val),\n                hzvToRGB(hue, zest, val),\n                hzvToRGB(hue - 2, zest, val),\n                hsla[3]\n              ];\n            }\n\n            return RGBA;\n          };\n\n          /**\n           * Convert an RGBA array to HSBA.\n           */\n          p5.ColorConversion._rgbaToHSBA = function(rgba) {\n            var red = rgba[0];\n            var green = rgba[1];\n            var blue = rgba[2];\n\n            var val = Math.max(red, green, blue);\n            var chroma = val - Math.min(red, green, blue);\n\n            var hue, sat;\n            if (chroma === 0) {\n              // Return early if grayscale.\n              hue = 0;\n              sat = 0;\n            } else {\n              sat = chroma / val;\n              if (red === val) {\n                // Magenta to yellow.\n                hue = (green - blue) / chroma;\n              } else if (green === val) {\n                // Yellow to cyan.\n                hue = 2 + (blue - red) / chroma;\n              } else if (blue === val) {\n                // Cyan to magenta.\n                hue = 4 + (red - green) / chroma;\n              }\n              if (hue < 0) {\n                // Confine hue to the interval [0, 1).\n                hue += 6;\n              } else if (hue >= 6) {\n                hue -= 6;\n              }\n            }\n\n            return [hue / 6, sat, val, rgba[3]];\n          };\n\n          /**\n           * Convert an RGBA array to HSLA.\n           */\n          p5.ColorConversion._rgbaToHSLA = function(rgba) {\n            var red = rgba[0];\n            var green = rgba[1];\n            var blue = rgba[2];\n\n            var val = Math.max(red, green, blue);\n            var min = Math.min(red, green, blue);\n            var li = val + min; // We will halve this later.\n            var chroma = val - min;\n\n            var hue, sat;\n            if (chroma === 0) {\n              // Return early if grayscale.\n              hue = 0;\n              sat = 0;\n            } else {\n              if (li < 1) {\n                sat = chroma / li;\n              } else {\n                sat = chroma / (2 - li);\n              }\n              if (red === val) {\n                // Magenta to yellow.\n                hue = (green - blue) / chroma;\n              } else if (green === val) {\n                // Yellow to cyan.\n                hue = 2 + (blue - red) / chroma;\n              } else if (blue === val) {\n                // Cyan to magenta.\n                hue = 4 + (red - green) / chroma;\n              }\n              if (hue < 0) {\n                // Confine hue to the interval [0, 1).\n                hue += 6;\n              } else if (hue >= 6) {\n                hue -= 6;\n              }\n            }\n\n            return [hue / 6, sat, li / 2, rgba[3]];\n          };\n\n          module.exports = p5.ColorConversion;\n        },\n        { '../core/main': 24 }\n      ],\n      15: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Color\n           * @submodule Creating & Reading\n           * @for p5\n           * @requires core\n           * @requires constants\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          var constants = _dereq_('../core/constants');\n          _dereq_('./p5.Color');\n          _dereq_('../core/error_helpers');\n\n          /**\n           * Extracts the alpha value from a color or pixel array.\n           *\n           * @method alpha\n           * @param {p5.Color|Number[]|String} color <a href=\"#/p5.Color\">p5.Color</a> object, color components,\n           *                                         or CSS color\n           * @return {Number} the alpha value\n           * @example\n           * <div>\n           * <code>\n           * noStroke();\n           * let c = color(0, 126, 255, 102);\n           * fill(c);\n           * rect(15, 15, 35, 70);\n           * let value = alpha(c); // Sets 'value' to 102\n           * fill(value);\n           * rect(50, 15, 35, 70);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Left half of canvas light blue and right half light charcoal grey.\n           * Left half of canvas light purple and right half a royal blue.\n           * Left half of canvas salmon pink and the right half white.\n           * Yellow rect in middle right of canvas, with 55 pixel width and height.\n           * Yellow ellipse in top left canvas, black ellipse in bottom right,both 80x80.\n           * Bright fuchsia rect in middle of canvas, 60 pixel width and height.\n           * Two bright green rects on opposite sides of the canvas, both 45x80.\n           * Four blue rects in each corner of the canvas, each are 35x35.\n           * Bright sea green rect on left and darker rect on right of canvas, both 45x80.\n           * Dark green rect on left and light green rect on right of canvas, both 45x80.\n           * Dark blue rect on left and light teal rect on right of canvas, both 45x80.\n           * blue rect on left and green on right, both with black outlines & 35x60.\n           * salmon pink rect on left and black on right, both 35x60.\n           * 4 rects, tan, brown, brownish purple and purple, with white outlines & 20x60.\n           * light pastel green rect on left and dark grey rect on right, both 35x60.\n           * yellow rect on left and red rect on right, both with black outlines & 35x60.\n           * grey canvas\n           * deep pink rect on left and grey rect on right, both 35x60.\n           */\n          p5.prototype.alpha = function(c) {\n            p5._validateParameters('alpha', arguments);\n            return this.color(c)._getAlpha();\n          };\n\n          /**\n           * Extracts the blue value from a color or pixel array.\n           *\n           * @method blue\n           * @param {p5.Color|Number[]|String} color <a href=\"#/p5.Color\">p5.Color</a> object, color components,\n           *                                         or CSS color\n           * @return {Number} the blue value\n           * @example\n           * <div>\n           * <code>\n           * let c = color(175, 100, 220); // Define color 'c'\n           * fill(c); // Use color variable 'c' as fill color\n           * rect(15, 20, 35, 60); // Draw left rectangle\n           *\n           * let blueValue = blue(c); // Get blue in 'c'\n           * print(blueValue); // Prints \"220.0\"\n           * fill(0, 0, blueValue); // Use 'blueValue' in new fill\n           * rect(50, 20, 35, 60); // Draw right rectangle\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Left half of canvas light purple and right half a royal blue.\n           *\n           */\n          p5.prototype.blue = function(c) {\n            p5._validateParameters('blue', arguments);\n            return this.color(c)._getBlue();\n          };\n\n          /**\n           * Extracts the HSB brightness value from a color or pixel array.\n           *\n           * @method brightness\n           * @param {p5.Color|Number[]|String} color <a href=\"#/p5.Color\">p5.Color</a> object, color components,\n           *                                         or CSS color\n           * @return {Number} the brightness value\n           * @example\n           * <div>\n           * <code>\n           * noStroke();\n           * colorMode(HSB, 255);\n           * let c = color(0, 126, 255);\n           * fill(c);\n           * rect(15, 20, 35, 60);\n           * let value = brightness(c); // Sets 'value' to 255\n           * fill(value);\n           * rect(50, 20, 35, 60);\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * noStroke();\n           * colorMode(HSB, 255);\n           * let c = color('hsb(60, 100%, 50%)');\n           * fill(c);\n           * rect(15, 20, 35, 60);\n           * let value = brightness(c); // A 'value' of 50% is 127.5\n           * fill(value);\n           * rect(50, 20, 35, 60);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Left half of canvas salmon pink and the right half white.\n           * Left half of canvas yellow at half brightness and the right gray .\n           *\n           */\n          p5.prototype.brightness = function(c) {\n            p5._validateParameters('brightness', arguments);\n            return this.color(c)._getBrightness();\n          };\n\n          /**\n           * Creates colors for storing in variables of the color datatype. The\n           * parameters are interpreted as RGB or HSB values depending on the\n           * current <a href=\"#/p5/colorMode\">colorMode()</a>. The default mode is RGB values from 0 to 255\n           * and, therefore, the function call color(255, 204, 0) will return a\n           * bright yellow color.\n           * <br><br>\n           * Note that if only one value is provided to <a href=\"#/p5/color\">color()</a>, it will be interpreted\n           * as a grayscale value. Add a second value, and it will be used for alpha\n           * transparency. When three values are specified, they are interpreted as\n           * either RGB or HSB values. Adding a fourth value applies alpha\n           * transparency.\n           * <br><br>\n           * If a single string argument is provided, RGB, RGBA and Hex CSS color\n           * strings and all named color strings are supported. In this case, an alpha\n           * number value as a second argument is not supported, the RGBA form should be\n           * used.\n           *\n           * @method color\n           * @param  {Number}        gray    number specifying value between white\n           *                                 and black.\n           * @param  {Number}        [alpha] alpha value relative to current color range\n           *                                 (default is 0-255)\n           * @return {p5.Color}              resulting color\n           *\n           * @example\n           * <div>\n           * <code>\n           * let c = color(255, 204, 0); // Define color 'c'\n           * fill(c); // Use color variable 'c' as fill color\n           * noStroke(); // Don't draw a stroke around shapes\n           * rect(30, 20, 55, 55); // Draw rectangle\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let c = color(255, 204, 0); // Define color 'c'\n           * fill(c); // Use color variable 'c' as fill color\n           * noStroke(); // Don't draw a stroke around shapes\n           * ellipse(25, 25, 80, 80); // Draw left circle\n           *\n           * // Using only one value with color()\n           * // generates a grayscale value.\n           * c = color(65); // Update 'c' with grayscale value\n           * fill(c); // Use updated 'c' as fill color\n           * ellipse(75, 75, 80, 80); // Draw right circle\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Named SVG & CSS colors may be used,\n           * let c = color('magenta');\n           * fill(c); // Use 'c' as fill color\n           * noStroke(); // Don't draw a stroke around shapes\n           * rect(20, 20, 60, 60); // Draw rectangle\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // as can hex color codes:\n           * noStroke(); // Don't draw a stroke around shapes\n           * let c = color('#0f0');\n           * fill(c); // Use 'c' as fill color\n           * rect(0, 10, 45, 80); // Draw rectangle\n           *\n           * c = color('#00ff00');\n           * fill(c); // Use updated 'c' as fill color\n           * rect(55, 10, 45, 80); // Draw rectangle\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // RGB and RGBA color strings are also supported:\n           * // these all set to the same color (solid blue)\n           * let c;\n           * noStroke(); // Don't draw a stroke around shapes\n           * c = color('rgb(0,0,255)');\n           * fill(c); // Use 'c' as fill color\n           * rect(10, 10, 35, 35); // Draw rectangle\n           *\n           * c = color('rgb(0%, 0%, 100%)');\n           * fill(c); // Use updated 'c' as fill color\n           * rect(55, 10, 35, 35); // Draw rectangle\n           *\n           * c = color('rgba(0, 0, 255, 1)');\n           * fill(c); // Use updated 'c' as fill color\n           * rect(10, 55, 35, 35); // Draw rectangle\n           *\n           * c = color('rgba(0%, 0%, 100%, 1)');\n           * fill(c); // Use updated 'c' as fill color\n           * rect(55, 55, 35, 35); // Draw rectangle\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // HSL color is also supported and can be specified\n           * // by value\n           * let c;\n           * noStroke(); // Don't draw a stroke around shapes\n           * c = color('hsl(160, 100%, 50%)');\n           * fill(c); // Use 'c' as fill color\n           * rect(0, 10, 45, 80); // Draw rectangle\n           *\n           * c = color('hsla(160, 100%, 50%, 0.5)');\n           * fill(c); // Use updated 'c' as fill color\n           * rect(55, 10, 45, 80); // Draw rectangle\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // HSB color is also supported and can be specified\n           * // by value\n           * let c;\n           * noStroke(); // Don't draw a stroke around shapes\n           * c = color('hsb(160, 100%, 50%)');\n           * fill(c); // Use 'c' as fill color\n           * rect(0, 10, 45, 80); // Draw rectangle\n           *\n           * c = color('hsba(160, 100%, 50%, 0.5)');\n           * fill(c); // Use updated 'c' as fill color\n           * rect(55, 10, 45, 80); // Draw rectangle\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let c; // Declare color 'c'\n           * noStroke(); // Don't draw a stroke around shapes\n           *\n           * // If no colorMode is specified, then the\n           * // default of RGB with scale of 0-255 is used.\n           * c = color(50, 55, 100); // Create a color for 'c'\n           * fill(c); // Use color variable 'c' as fill color\n           * rect(0, 10, 45, 80); // Draw left rect\n           *\n           * colorMode(HSB, 100); // Use HSB with scale of 0-100\n           * c = color(50, 55, 100); // Update 'c' with new color\n           * fill(c); // Use updated 'c' as fill color\n           * rect(55, 10, 45, 80); // Draw right rect\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Yellow rect in middle right of canvas, with 55 pixel width and height.\n           * Yellow ellipse in top left of canvas, black ellipse in bottom right,both 80x80.\n           * Bright fuchsia rect in middle of canvas, 60 pixel width and height.\n           * Two bright green rects on opposite sides of the canvas, both 45x80.\n           * Four blue rects in each corner of the canvas, each are 35x35.\n           * Bright sea green rect on left and darker rect on right of canvas, both 45x80.\n           * Dark green rect on left and lighter green rect on right of canvas, both 45x80.\n           * Dark blue rect on left and light teal rect on right of canvas, both 45x80.\n           *\n           */\n          /**\n           * @method color\n           * @param  {Number}        v1      red or hue value relative to\n           *                                 the current color range\n           * @param  {Number}        v2      green or saturation value\n           *                                 relative to the current color range\n           * @param  {Number}        v3      blue or brightness value\n           *                                 relative to the current color range\n           * @param  {Number}        [alpha]\n           * @return {p5.Color}\n           */\n\n          /**\n           * @method color\n           * @param  {String}        value   a color string\n           * @return {p5.Color}\n           */\n          /**\n           * @method color\n           * @param  {Number[]}      values  an array containing the red,green,blue &\n           *                                 and alpha components of the color\n           * @return {p5.Color}\n           */\n          /**\n           * @method color\n           * @param  {p5.Color}     color\n           * @return {p5.Color}\n           */\n\n          p5.prototype.color = function() {\n            p5._validateParameters('color', arguments);\n            if (arguments[0] instanceof p5.Color) {\n              return arguments[0]; // Do nothing if argument is already a color object.\n            }\n\n            var args = arguments[0] instanceof Array ? arguments[0] : arguments;\n            return new p5.Color(this, args);\n          };\n\n          /**\n           * Extracts the green value from a color or pixel array.\n           *\n           * @method green\n           * @param {p5.Color|Number[]|String} color <a href=\"#/p5.Color\">p5.Color</a> object, color components,\n           *                                         or CSS color\n           * @return {Number} the green value\n           * @example\n           * <div>\n           * <code>\n           * let c = color(20, 75, 200); // Define color 'c'\n           * fill(c); // Use color variable 'c' as fill color\n           * rect(15, 20, 35, 60); // Draw left rectangle\n           *\n           * let greenValue = green(c); // Get green in 'c'\n           * print(greenValue); // Print \"75.0\"\n           * fill(0, greenValue, 0); // Use 'greenValue' in new fill\n           * rect(50, 20, 35, 60); // Draw right rectangle\n           * </code>\n           * </div>\n           *\n           * @alt\n           * blue rect on left and green on right, both with black outlines & 35x60.\n           *\n           */\n\n          p5.prototype.green = function(c) {\n            p5._validateParameters('green', arguments);\n            return this.color(c)._getGreen();\n          };\n\n          /**\n           * Extracts the hue value from a color or pixel array.\n           *\n           * Hue exists in both HSB and HSL. This function will return the\n           * HSB-normalized hue when supplied with an HSB color object (or when supplied\n           * with a pixel array while the color mode is HSB), but will default to the\n           * HSL-normalized hue otherwise. (The values will only be different if the\n           * maximum hue setting for each system is different.)\n           *\n           * @method hue\n           * @param {p5.Color|Number[]|String} color <a href=\"#/p5.Color\">p5.Color</a> object, color components,\n           *                                         or CSS color\n           * @return {Number} the hue\n           * @example\n           * <div>\n           * <code>\n           * noStroke();\n           * colorMode(HSB, 255);\n           * let c = color(0, 126, 255);\n           * fill(c);\n           * rect(15, 20, 35, 60);\n           * let value = hue(c); // Sets 'value' to \"0\"\n           * fill(value);\n           * rect(50, 20, 35, 60);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * salmon pink rect on left and black on right, both 35x60.\n           *\n           */\n\n          p5.prototype.hue = function(c) {\n            p5._validateParameters('hue', arguments);\n            return this.color(c)._getHue();\n          };\n\n          /**\n           * Blends two colors to find a third color somewhere between them. The amt\n           * parameter is the amount to interpolate between the two values where 0.0\n           * equal to the first color, 0.1 is very near the first color, 0.5 is halfway\n           * in between, etc. An amount below 0 will be treated as 0. Likewise, amounts\n           * above 1 will be capped at 1. This is different from the behavior of <a href=\"#/p5/lerp\">lerp()</a>,\n           * but necessary because otherwise numbers outside the range will produce\n           * strange and unexpected colors.\n           * <br><br>\n           * The way that colours are interpolated depends on the current color mode.\n           *\n           * @method lerpColor\n           * @param  {p5.Color} c1  interpolate from this color\n           * @param  {p5.Color} c2  interpolate to this color\n           * @param  {Number}       amt number between 0 and 1\n           * @return {p5.Color}     interpolated color\n           * @example\n           * <div>\n           * <code>\n           * colorMode(RGB);\n           * stroke(255);\n           * background(51);\n           * let from = color(218, 165, 32);\n           * let to = color(72, 61, 139);\n           * colorMode(RGB); // Try changing to HSB.\n           * let interA = lerpColor(from, to, 0.33);\n           * let interB = lerpColor(from, to, 0.66);\n           * fill(from);\n           * rect(10, 20, 20, 60);\n           * fill(interA);\n           * rect(30, 20, 20, 60);\n           * fill(interB);\n           * rect(50, 20, 20, 60);\n           * fill(to);\n           * rect(70, 20, 20, 60);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 4 rects one tan, brown, brownish purple, purple, with white outlines & 20x60\n           *\n           */\n\n          p5.prototype.lerpColor = function(c1, c2, amt) {\n            p5._validateParameters('lerpColor', arguments);\n            var mode = this._colorMode;\n            var maxes = this._colorMaxes;\n            var l0, l1, l2, l3;\n            var fromArray, toArray;\n\n            if (mode === constants.RGB) {\n              fromArray = c1.levels.map(function(level) {\n                return level / 255;\n              });\n              toArray = c2.levels.map(function(level) {\n                return level / 255;\n              });\n            } else if (mode === constants.HSB) {\n              c1._getBrightness(); // Cache hsba so it definitely exists.\n              c2._getBrightness();\n              fromArray = c1.hsba;\n              toArray = c2.hsba;\n            } else if (mode === constants.HSL) {\n              c1._getLightness(); // Cache hsla so it definitely exists.\n              c2._getLightness();\n              fromArray = c1.hsla;\n              toArray = c2.hsla;\n            } else {\n              throw new Error(mode + 'cannot be used for interpolation.');\n            }\n\n            // Prevent extrapolation.\n            amt = Math.max(Math.min(amt, 1), 0);\n\n            // Define lerp here itself if user isn't using math module.\n            // Maintains the definition as found in math/calculation.js\n            if (typeof this.lerp === 'undefined') {\n              this.lerp = function(start, stop, amt) {\n                return amt * (stop - start) + start;\n              };\n            }\n\n            // Perform interpolation.\n            l0 = this.lerp(fromArray[0], toArray[0], amt);\n            l1 = this.lerp(fromArray[1], toArray[1], amt);\n            l2 = this.lerp(fromArray[2], toArray[2], amt);\n            l3 = this.lerp(fromArray[3], toArray[3], amt);\n\n            // Scale components.\n            l0 *= maxes[mode][0];\n            l1 *= maxes[mode][1];\n            l2 *= maxes[mode][2];\n            l3 *= maxes[mode][3];\n\n            return this.color(l0, l1, l2, l3);\n          };\n\n          /**\n           * Extracts the HSL lightness value from a color or pixel array.\n           *\n           * @method lightness\n           * @param {p5.Color|Number[]|String} color <a href=\"#/p5.Color\">p5.Color</a> object, color components,\n           *                                         or CSS color\n           * @return {Number} the lightness\n           * @example\n           * <div>\n           * <code>\n           * noStroke();\n           * colorMode(HSL);\n           * let c = color(156, 100, 50, 1);\n           * fill(c);\n           * rect(15, 20, 35, 60);\n           * let value = lightness(c); // Sets 'value' to 50\n           * fill(value);\n           * rect(50, 20, 35, 60);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * light pastel green rect on left and dark grey rect on right, both 35x60.\n           *\n           */\n          p5.prototype.lightness = function(c) {\n            p5._validateParameters('lightness', arguments);\n            return this.color(c)._getLightness();\n          };\n\n          /**\n           * Extracts the red value from a color or pixel array.\n           *\n           * @method red\n           * @param {p5.Color|Number[]|String} color <a href=\"#/p5.Color\">p5.Color</a> object, color components,\n           *                                         or CSS color\n           * @return {Number} the red value\n           * @example\n           * <div>\n           * <code>\n           * let c = color(255, 204, 0); // Define color 'c'\n           * fill(c); // Use color variable 'c' as fill color\n           * rect(15, 20, 35, 60); // Draw left rectangle\n           *\n           * let redValue = red(c); // Get red in 'c'\n           * print(redValue); // Print \"255.0\"\n           * fill(redValue, 0, 0); // Use 'redValue' in new fill\n           * rect(50, 20, 35, 60); // Draw right rectangle\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * colorMode(RGB, 255); // Sets the range for red, green, and blue to 255\n           * let c = color(127, 255, 0);\n           * colorMode(RGB, 1); // Sets the range for red, green, and blue to 1\n           * let myColor = red(c);\n           * print(myColor); // 0.4980392156862745\n           * </code>\n           * </div>\n           *\n           * @alt\n           * yellow rect on left and red rect on right, both with black outlines and 35x60.\n           * grey canvas\n           */\n          p5.prototype.red = function(c) {\n            p5._validateParameters('red', arguments);\n            return this.color(c)._getRed();\n          };\n\n          /**\n           * Extracts the saturation value from a color or pixel array.\n           *\n           * Saturation is scaled differently in HSB and HSL. This function will return\n           * the HSB saturation when supplied with an HSB color object (or when supplied\n           * with a pixel array while the color mode is HSB), but will default to the\n           * HSL saturation otherwise.\n           *\n           * @method saturation\n           * @param {p5.Color|Number[]|String} color <a href=\"#/p5.Color\">p5.Color</a> object, color components,\n           *                                         or CSS color\n           * @return {Number} the saturation value\n           * @example\n           * <div>\n           * <code>\n           * noStroke();\n           * colorMode(HSB, 255);\n           * let c = color(0, 126, 255);\n           * fill(c);\n           * rect(15, 20, 35, 60);\n           * let value = saturation(c); // Sets 'value' to 126\n           * fill(value);\n           * rect(50, 20, 35, 60);\n           * </code>\n           * </div>\n           *\n           * @alt\n           *deep pink rect on left and grey rect on right, both 35x60.\n           *\n           */\n\n          p5.prototype.saturation = function(c) {\n            p5._validateParameters('saturation', arguments);\n            return this.color(c)._getSaturation();\n          };\n\n          module.exports = p5;\n        },\n        {\n          '../core/constants': 18,\n          '../core/error_helpers': 20,\n          '../core/main': 24,\n          './p5.Color': 16\n        }\n      ],\n      16: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Color\n           * @submodule Creating & Reading\n           * @for p5\n           * @requires core\n           * @requires constants\n           * @requires color_conversion\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          var constants = _dereq_('../core/constants');\n          var color_conversion = _dereq_('./color_conversion');\n\n          /**\n           * Each color stores the color mode and level maxes that applied at the\n           * time of its construction. These are used to interpret the input arguments\n           * (at construction and later for that instance of color) and to format the\n           * output e.g. when <a href=\"#/p5/saturation\">saturation()</a> is requested.\n           *\n           * Internally we store an array representing the ideal RGBA values in floating\n           * point form, normalized from 0 to 1. From this we calculate the closest\n           * screen color (RGBA levels from 0 to 255) and expose this to the renderer.\n           *\n           * We also cache normalized, floating point components of the color in various\n           * representations as they are calculated. This is done to prevent repeating a\n           * conversion that has already been performed.\n           *\n           * @class p5.Color\n           */\n          p5.Color = function(pInst, vals) {\n            // Record color mode and maxes at time of construction.\n            this._storeModeAndMaxes(pInst._colorMode, pInst._colorMaxes);\n\n            // Calculate normalized RGBA values.\n            if (\n              this.mode !== constants.RGB &&\n              this.mode !== constants.HSL &&\n              this.mode !== constants.HSB\n            ) {\n              throw new Error(this.mode + ' is an invalid colorMode.');\n            } else {\n              this._array = p5.Color._parseInputs.apply(this, vals);\n            }\n\n            // Expose closest screen color.\n            this._calculateLevels();\n            return this;\n          };\n\n          /**\n           * This function returns the color formatted as a string. This can be useful\n           * for debugging, or for using p5.js with other libraries.\n           * @method toString\n           * @param {String} [format] How the color string will be formatted.\n           * Leaving this empty formats the string as rgba(r, g, b, a).\n           * '#rgb' '#rgba' '#rrggbb' and '#rrggbbaa' format as hexadecimal color codes.\n           * 'rgb' 'hsb' and 'hsl' return the color formatted in the specified color mode.\n           * 'rgba' 'hsba' and 'hsla' are the same as above but with alpha channels.\n           * 'rgb%' 'hsb%' 'hsl%' 'rgba%' 'hsba%' and 'hsla%' format as percentages.\n           * @return {String} the formatted string\n           * @example\n           * <div>\n           * <code>\n           * let myColor;\n           * function setup() {\n           *   createCanvas(200, 200);\n           *   stroke(255);\n           *   myColor = color(100, 100, 250);\n           *   fill(myColor);\n           * }\n           *\n           * function draw() {\n           *   rotate(HALF_PI);\n           *   text(myColor.toString(), 0, -5);\n           *   text(myColor.toString('#rrggbb'), 0, -30);\n           *   text(myColor.toString('rgba%'), 0, -55);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * canvas with text representation of color\n           */\n          p5.Color.prototype.toString = function(format) {\n            var a = this.levels;\n            var f = this._array;\n            var alpha = f[3]; // String representation uses normalized alpha\n\n            switch (format) {\n              case '#rrggbb':\n                return '#'.concat(\n                  a[0] < 16 ? '0'.concat(a[0].toString(16)) : a[0].toString(16),\n                  a[1] < 16 ? '0'.concat(a[1].toString(16)) : a[1].toString(16),\n                  a[2] < 16 ? '0'.concat(a[2].toString(16)) : a[2].toString(16)\n                );\n\n              case '#rrggbbaa':\n                return '#'.concat(\n                  a[0] < 16 ? '0'.concat(a[0].toString(16)) : a[0].toString(16),\n                  a[1] < 16 ? '0'.concat(a[1].toString(16)) : a[1].toString(16),\n                  a[2] < 16 ? '0'.concat(a[2].toString(16)) : a[2].toString(16),\n                  a[3] < 16 ? '0'.concat(a[2].toString(16)) : a[3].toString(16)\n                );\n\n              case '#rgb':\n                return '#'.concat(\n                  Math.round(f[0] * 15).toString(16),\n                  Math.round(f[1] * 15).toString(16),\n                  Math.round(f[2] * 15).toString(16)\n                );\n\n              case '#rgba':\n                return '#'.concat(\n                  Math.round(f[0] * 15).toString(16),\n                  Math.round(f[1] * 15).toString(16),\n                  Math.round(f[2] * 15).toString(16),\n                  Math.round(f[3] * 15).toString(16)\n                );\n\n              case 'rgb':\n                return 'rgb('.concat(a[0], ', ', a[1], ', ', a[2], ')');\n\n              case 'rgb%':\n                return 'rgb('.concat(\n                  (100 * f[0]).toPrecision(3),\n                  '%, ',\n                  (100 * f[1]).toPrecision(3),\n                  '%, ',\n                  (100 * f[2]).toPrecision(3),\n                  '%)'\n                );\n\n              case 'rgba%':\n                return 'rgba('.concat(\n                  (100 * f[0]).toPrecision(3),\n                  '%, ',\n                  (100 * f[1]).toPrecision(3),\n                  '%, ',\n                  (100 * f[2]).toPrecision(3),\n                  '%, ',\n                  (100 * f[3]).toPrecision(3),\n                  '%)'\n                );\n\n              case 'hsb':\n              case 'hsv':\n                if (!this.hsba) this.hsba = color_conversion._rgbaToHSBA(this._array);\n                return 'hsb('.concat(\n                  this.hsba[0] * this.maxes[constants.HSB][0],\n                  ', ',\n                  this.hsba[1] * this.maxes[constants.HSB][1],\n                  ', ',\n                  this.hsba[2] * this.maxes[constants.HSB][2],\n                  ')'\n                );\n\n              case 'hsb%':\n              case 'hsv%':\n                if (!this.hsba) this.hsba = color_conversion._rgbaToHSBA(this._array);\n                return 'hsb('.concat(\n                  (100 * this.hsba[0]).toPrecision(3),\n                  '%, ',\n                  (100 * this.hsba[1]).toPrecision(3),\n                  '%, ',\n                  (100 * this.hsba[2]).toPrecision(3),\n                  '%)'\n                );\n\n              case 'hsba':\n              case 'hsva':\n                if (!this.hsba) this.hsba = color_conversion._rgbaToHSBA(this._array);\n                return 'hsba('.concat(\n                  this.hsba[0] * this.maxes[constants.HSB][0],\n                  ', ',\n                  this.hsba[1] * this.maxes[constants.HSB][1],\n                  ', ',\n                  this.hsba[2] * this.maxes[constants.HSB][2],\n                  ', ',\n                  alpha,\n                  ')'\n                );\n\n              case 'hsba%':\n              case 'hsva%':\n                if (!this.hsba) this.hsba = color_conversion._rgbaToHSBA(this._array);\n                return 'hsba('.concat(\n                  (100 * this.hsba[0]).toPrecision(3),\n                  '%, ',\n                  (100 * this.hsba[1]).toPrecision(3),\n                  '%, ',\n                  (100 * this.hsba[2]).toPrecision(3),\n                  '%, ',\n                  (100 * alpha).toPrecision(3),\n                  '%)'\n                );\n\n              case 'hsl':\n                if (!this.hsla) this.hsla = color_conversion._rgbaToHSLA(this._array);\n                return 'hsl('.concat(\n                  this.hsla[0] * this.maxes[constants.HSL][0],\n                  ', ',\n                  this.hsla[1] * this.maxes[constants.HSL][1],\n                  ', ',\n                  this.hsla[2] * this.maxes[constants.HSL][2],\n                  ')'\n                );\n\n              case 'hsl%':\n                if (!this.hsla) this.hsla = color_conversion._rgbaToHSLA(this._array);\n                return 'hsl('.concat(\n                  (100 * this.hsla[0]).toPrecision(3),\n                  '%, ',\n                  (100 * this.hsla[1]).toPrecision(3),\n                  '%, ',\n                  (100 * this.hsla[2]).toPrecision(3),\n                  '%)'\n                );\n\n              case 'hsla':\n                if (!this.hsla) this.hsla = color_conversion._rgbaToHSLA(this._array);\n                return 'hsla('.concat(\n                  this.hsla[0] * this.maxes[constants.HSL][0],\n                  ', ',\n                  this.hsla[1] * this.maxes[constants.HSL][1],\n                  ', ',\n                  this.hsla[2] * this.maxes[constants.HSL][2],\n                  ', ',\n                  alpha,\n                  ')'\n                );\n\n              case 'hsla%':\n                if (!this.hsla) this.hsla = color_conversion._rgbaToHSLA(this._array);\n                return 'hsl('.concat(\n                  (100 * this.hsla[0]).toPrecision(3),\n                  '%, ',\n                  (100 * this.hsla[1]).toPrecision(3),\n                  '%, ',\n                  (100 * this.hsla[2]).toPrecision(3),\n                  '%, ',\n                  (100 * alpha).toPrecision(3),\n                  '%)'\n                );\n\n              case 'rgba':\n              default:\n                return 'rgba('.concat(a[0], ',', a[1], ',', a[2], ',', alpha, ')');\n            }\n          };\n\n          /**\n           * @method setRed\n           * @param {Number} red the new red value\n           * @example\n           * <div>\n           * <code>\n           * let backgroundColor;\n           *\n           * function setup() {\n           *   backgroundColor = color(100, 50, 150);\n           * }\n           *\n           * function draw() {\n           *   backgroundColor.setRed(128 + 128 * sin(millis() / 1000));\n           *   background(backgroundColor);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * canvas with gradually changing background color\n           */\n          p5.Color.prototype.setRed = function(new_red) {\n            this._array[0] = new_red / this.maxes[constants.RGB][0];\n            this._calculateLevels();\n          };\n\n          /**\n           * @method setGreen\n           * @param {Number} green the new green value\n           * @example\n           * <div>\n           * <code>\n           * let backgroundColor;\n           *\n           * function setup() {\n           *   backgroundColor = color(100, 50, 150);\n           * }\n           *\n           * function draw() {\n           *   backgroundColor.setGreen(128 + 128 * sin(millis() / 1000));\n           *   background(backgroundColor);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * canvas with gradually changing background color\n           **/\n          p5.Color.prototype.setGreen = function(new_green) {\n            this._array[1] = new_green / this.maxes[constants.RGB][1];\n            this._calculateLevels();\n          };\n\n          /**\n           * @method setBlue\n           * @param {Number} blue the new blue value\n           * @example\n           * <div>\n           * <code>\n           * let backgroundColor;\n           *\n           * function setup() {\n           *   backgroundColor = color(100, 50, 150);\n           * }\n           *\n           * function draw() {\n           *   backgroundColor.setBlue(128 + 128 * sin(millis() / 1000));\n           *   background(backgroundColor);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * canvas with gradually changing background color\n           **/\n          p5.Color.prototype.setBlue = function(new_blue) {\n            this._array[2] = new_blue / this.maxes[constants.RGB][2];\n            this._calculateLevels();\n          };\n\n          /**\n           * @method setAlpha\n           * @param {Number} alpha the new alpha value\n           * @example\n           * <div>\n           * <code>\n           * let squareColor;\n           *\n           * function setup() {\n           *   ellipseMode(CORNERS);\n           *   strokeWeight(4);\n           *   squareColor = color(100, 50, 150);\n           * }\n           *\n           * function draw() {\n           *   background(255);\n           *\n           *   noFill();\n           *   stroke(0);\n           *   ellipse(10, 10, width - 10, height - 10);\n           *\n           *   squareColor.setAlpha(128 + 128 * sin(millis() / 1000));\n           *   fill(squareColor);\n           *   noStroke();\n           *   rect(13, 13, width - 26, height - 26);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * circle behind a square with gradually changing opacity\n           **/\n          p5.Color.prototype.setAlpha = function(new_alpha) {\n            this._array[3] = new_alpha / this.maxes[this.mode][3];\n            this._calculateLevels();\n          };\n\n          // calculates and stores the closest screen levels\n          p5.Color.prototype._calculateLevels = function() {\n            var array = this._array;\n            // (loop backwards for performance)\n            var levels = (this.levels = new Array(array.length));\n            for (var i = array.length - 1; i >= 0; --i) {\n              levels[i] = Math.round(array[i] * 255);\n            }\n          };\n\n          p5.Color.prototype._getAlpha = function() {\n            return this._array[3] * this.maxes[this.mode][3];\n          };\n\n          // stores the color mode and maxes in this instance of Color\n          // for later use (by _parseInputs())\n          p5.Color.prototype._storeModeAndMaxes = function(new_mode, new_maxes) {\n            this.mode = new_mode;\n            this.maxes = new_maxes;\n          };\n\n          p5.Color.prototype._getMode = function() {\n            return this.mode;\n          };\n\n          p5.Color.prototype._getMaxes = function() {\n            return this.maxes;\n          };\n\n          p5.Color.prototype._getBlue = function() {\n            return this._array[2] * this.maxes[constants.RGB][2];\n          };\n\n          p5.Color.prototype._getBrightness = function() {\n            if (!this.hsba) {\n              this.hsba = color_conversion._rgbaToHSBA(this._array);\n            }\n            return this.hsba[2] * this.maxes[constants.HSB][2];\n          };\n\n          p5.Color.prototype._getGreen = function() {\n            return this._array[1] * this.maxes[constants.RGB][1];\n          };\n\n          /**\n           * Hue is the same in HSB and HSL, but the maximum value may be different.\n           * This function will return the HSB-normalized saturation when supplied with\n           * an HSB color object, but will default to the HSL-normalized saturation\n           * otherwise.\n           */\n          p5.Color.prototype._getHue = function() {\n            if (this.mode === constants.HSB) {\n              if (!this.hsba) {\n                this.hsba = color_conversion._rgbaToHSBA(this._array);\n              }\n              return this.hsba[0] * this.maxes[constants.HSB][0];\n            } else {\n              if (!this.hsla) {\n                this.hsla = color_conversion._rgbaToHSLA(this._array);\n              }\n              return this.hsla[0] * this.maxes[constants.HSL][0];\n            }\n          };\n\n          p5.Color.prototype._getLightness = function() {\n            if (!this.hsla) {\n              this.hsla = color_conversion._rgbaToHSLA(this._array);\n            }\n            return this.hsla[2] * this.maxes[constants.HSL][2];\n          };\n\n          p5.Color.prototype._getRed = function() {\n            return this._array[0] * this.maxes[constants.RGB][0];\n          };\n\n          /**\n           * Saturation is scaled differently in HSB and HSL. This function will return\n           * the HSB saturation when supplied with an HSB color object, but will default\n           * to the HSL saturation otherwise.\n           */\n          p5.Color.prototype._getSaturation = function() {\n            if (this.mode === constants.HSB) {\n              if (!this.hsba) {\n                this.hsba = color_conversion._rgbaToHSBA(this._array);\n              }\n              return this.hsba[1] * this.maxes[constants.HSB][1];\n            } else {\n              if (!this.hsla) {\n                this.hsla = color_conversion._rgbaToHSLA(this._array);\n              }\n              return this.hsla[1] * this.maxes[constants.HSL][1];\n            }\n          };\n\n          /**\n           * CSS named colors.\n           */\n          var namedColors = {\n            aliceblue: '#f0f8ff',\n            antiquewhite: '#faebd7',\n            aqua: '#00ffff',\n            aquamarine: '#7fffd4',\n            azure: '#f0ffff',\n            beige: '#f5f5dc',\n            bisque: '#ffe4c4',\n            black: '#000000',\n            blanchedalmond: '#ffebcd',\n            blue: '#0000ff',\n            blueviolet: '#8a2be2',\n            brown: '#a52a2a',\n            burlywood: '#deb887',\n            cadetblue: '#5f9ea0',\n            chartreuse: '#7fff00',\n            chocolate: '#d2691e',\n            coral: '#ff7f50',\n            cornflowerblue: '#6495ed',\n            cornsilk: '#fff8dc',\n            crimson: '#dc143c',\n            cyan: '#00ffff',\n            darkblue: '#00008b',\n            darkcyan: '#008b8b',\n            darkgoldenrod: '#b8860b',\n            darkgray: '#a9a9a9',\n            darkgreen: '#006400',\n            darkgrey: '#a9a9a9',\n            darkkhaki: '#bdb76b',\n            darkmagenta: '#8b008b',\n            darkolivegreen: '#556b2f',\n            darkorange: '#ff8c00',\n            darkorchid: '#9932cc',\n            darkred: '#8b0000',\n            darksalmon: '#e9967a',\n            darkseagreen: '#8fbc8f',\n            darkslateblue: '#483d8b',\n            darkslategray: '#2f4f4f',\n            darkslategrey: '#2f4f4f',\n            darkturquoise: '#00ced1',\n            darkviolet: '#9400d3',\n            deeppink: '#ff1493',\n            deepskyblue: '#00bfff',\n            dimgray: '#696969',\n            dimgrey: '#696969',\n            dodgerblue: '#1e90ff',\n            firebrick: '#b22222',\n            floralwhite: '#fffaf0',\n            forestgreen: '#228b22',\n            fuchsia: '#ff00ff',\n            gainsboro: '#dcdcdc',\n            ghostwhite: '#f8f8ff',\n            gold: '#ffd700',\n            goldenrod: '#daa520',\n            gray: '#808080',\n            green: '#008000',\n            greenyellow: '#adff2f',\n            grey: '#808080',\n            honeydew: '#f0fff0',\n            hotpink: '#ff69b4',\n            indianred: '#cd5c5c',\n            indigo: '#4b0082',\n            ivory: '#fffff0',\n            khaki: '#f0e68c',\n            lavender: '#e6e6fa',\n            lavenderblush: '#fff0f5',\n            lawngreen: '#7cfc00',\n            lemonchiffon: '#fffacd',\n            lightblue: '#add8e6',\n            lightcoral: '#f08080',\n            lightcyan: '#e0ffff',\n            lightgoldenrodyellow: '#fafad2',\n            lightgray: '#d3d3d3',\n            lightgreen: '#90ee90',\n            lightgrey: '#d3d3d3',\n            lightpink: '#ffb6c1',\n            lightsalmon: '#ffa07a',\n            lightseagreen: '#20b2aa',\n            lightskyblue: '#87cefa',\n            lightslategray: '#778899',\n            lightslategrey: '#778899',\n            lightsteelblue: '#b0c4de',\n            lightyellow: '#ffffe0',\n            lime: '#00ff00',\n            limegreen: '#32cd32',\n            linen: '#faf0e6',\n            magenta: '#ff00ff',\n            maroon: '#800000',\n            mediumaquamarine: '#66cdaa',\n            mediumblue: '#0000cd',\n            mediumorchid: '#ba55d3',\n            mediumpurple: '#9370db',\n            mediumseagreen: '#3cb371',\n            mediumslateblue: '#7b68ee',\n            mediumspringgreen: '#00fa9a',\n            mediumturquoise: '#48d1cc',\n            mediumvioletred: '#c71585',\n            midnightblue: '#191970',\n            mintcream: '#f5fffa',\n            mistyrose: '#ffe4e1',\n            moccasin: '#ffe4b5',\n            navajowhite: '#ffdead',\n            navy: '#000080',\n            oldlace: '#fdf5e6',\n            olive: '#808000',\n            olivedrab: '#6b8e23',\n            orange: '#ffa500',\n            orangered: '#ff4500',\n            orchid: '#da70d6',\n            palegoldenrod: '#eee8aa',\n            palegreen: '#98fb98',\n            paleturquoise: '#afeeee',\n            palevioletred: '#db7093',\n            papayawhip: '#ffefd5',\n            peachpuff: '#ffdab9',\n            peru: '#cd853f',\n            pink: '#ffc0cb',\n            plum: '#dda0dd',\n            powderblue: '#b0e0e6',\n            purple: '#800080',\n            red: '#ff0000',\n            rosybrown: '#bc8f8f',\n            royalblue: '#4169e1',\n            saddlebrown: '#8b4513',\n            salmon: '#fa8072',\n            sandybrown: '#f4a460',\n            seagreen: '#2e8b57',\n            seashell: '#fff5ee',\n            sienna: '#a0522d',\n            silver: '#c0c0c0',\n            skyblue: '#87ceeb',\n            slateblue: '#6a5acd',\n            slategray: '#708090',\n            slategrey: '#708090',\n            snow: '#fffafa',\n            springgreen: '#00ff7f',\n            steelblue: '#4682b4',\n            tan: '#d2b48c',\n            teal: '#008080',\n            thistle: '#d8bfd8',\n            tomato: '#ff6347',\n            turquoise: '#40e0d0',\n            violet: '#ee82ee',\n            wheat: '#f5deb3',\n            white: '#ffffff',\n            whitesmoke: '#f5f5f5',\n            yellow: '#ffff00',\n            yellowgreen: '#9acd32'\n          };\n\n          /**\n           * These regular expressions are used to build up the patterns for matching\n           * viable CSS color strings: fragmenting the regexes in this way increases the\n           * legibility and comprehensibility of the code.\n           *\n           * Note that RGB values of .9 are not parsed by IE, but are supported here for\n           * color string consistency.\n           */\n          var WHITESPACE = /\\s*/; // Match zero or more whitespace characters.\n          var INTEGER = /(\\d{1,3})/; // Match integers: 79, 255, etc.\n          var DECIMAL = /((?:\\d+(?:\\.\\d+)?)|(?:\\.\\d+))/; // Match 129.6, 79, .9, etc.\n          var PERCENT = new RegExp(DECIMAL.source + '%'); // Match 12.9%, 79%, .9%, etc.\n\n          /**\n           * Full color string patterns. The capture groups are necessary.\n           */\n          var colorPatterns = {\n            // Match colors in format #XXX, e.g. #416.\n            HEX3: /^#([a-f0-9])([a-f0-9])([a-f0-9])$/i,\n\n            // Match colors in format #XXXX, e.g. #5123.\n            HEX4: /^#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])$/i,\n\n            // Match colors in format #XXXXXX, e.g. #b4d455.\n            HEX6: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,\n\n            // Match colors in format #XXXXXXXX, e.g. #b4d45535.\n            HEX8: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,\n\n            // Match colors in format rgb(R, G, B), e.g. rgb(255, 0, 128).\n            RGB: new RegExp(\n              [\n                '^rgb\\\\(',\n                INTEGER.source,\n                ',',\n                INTEGER.source,\n                ',',\n                INTEGER.source,\n                '\\\\)$'\n              ].join(WHITESPACE.source),\n              'i'\n            ),\n\n            // Match colors in format rgb(R%, G%, B%), e.g. rgb(100%, 0%, 28.9%).\n            RGB_PERCENT: new RegExp(\n              [\n                '^rgb\\\\(',\n                PERCENT.source,\n                ',',\n                PERCENT.source,\n                ',',\n                PERCENT.source,\n                '\\\\)$'\n              ].join(WHITESPACE.source),\n              'i'\n            ),\n\n            // Match colors in format rgb(R, G, B, A), e.g. rgb(255, 0, 128, 0.25).\n            RGBA: new RegExp(\n              [\n                '^rgba\\\\(',\n                INTEGER.source,\n                ',',\n                INTEGER.source,\n                ',',\n                INTEGER.source,\n                ',',\n                DECIMAL.source,\n                '\\\\)$'\n              ].join(WHITESPACE.source),\n              'i'\n            ),\n\n            // Match colors in format rgb(R%, G%, B%, A), e.g. rgb(100%, 0%, 28.9%, 0.5).\n            RGBA_PERCENT: new RegExp(\n              [\n                '^rgba\\\\(',\n                PERCENT.source,\n                ',',\n                PERCENT.source,\n                ',',\n                PERCENT.source,\n                ',',\n                DECIMAL.source,\n                '\\\\)$'\n              ].join(WHITESPACE.source),\n              'i'\n            ),\n\n            // Match colors in format hsla(H, S%, L%), e.g. hsl(100, 40%, 28.9%).\n            HSL: new RegExp(\n              [\n                '^hsl\\\\(',\n                INTEGER.source,\n                ',',\n                PERCENT.source,\n                ',',\n                PERCENT.source,\n                '\\\\)$'\n              ].join(WHITESPACE.source),\n              'i'\n            ),\n\n            // Match colors in format hsla(H, S%, L%, A), e.g. hsla(100, 40%, 28.9%, 0.5).\n            HSLA: new RegExp(\n              [\n                '^hsla\\\\(',\n                INTEGER.source,\n                ',',\n                PERCENT.source,\n                ',',\n                PERCENT.source,\n                ',',\n                DECIMAL.source,\n                '\\\\)$'\n              ].join(WHITESPACE.source),\n              'i'\n            ),\n\n            // Match colors in format hsb(H, S%, B%), e.g. hsb(100, 40%, 28.9%).\n            HSB: new RegExp(\n              [\n                '^hsb\\\\(',\n                INTEGER.source,\n                ',',\n                PERCENT.source,\n                ',',\n                PERCENT.source,\n                '\\\\)$'\n              ].join(WHITESPACE.source),\n              'i'\n            ),\n\n            // Match colors in format hsba(H, S%, B%, A), e.g. hsba(100, 40%, 28.9%, 0.5).\n            HSBA: new RegExp(\n              [\n                '^hsba\\\\(',\n                INTEGER.source,\n                ',',\n                PERCENT.source,\n                ',',\n                PERCENT.source,\n                ',',\n                DECIMAL.source,\n                '\\\\)$'\n              ].join(WHITESPACE.source),\n              'i'\n            )\n          };\n\n          /**\n           * For a number of different inputs, returns a color formatted as [r, g, b, a]\n           * arrays, with each component normalized between 0 and 1.\n           *\n           * @private\n           * @param {Array} [...args] An 'array-like' object that represents a list of\n           *                          arguments\n           * @return {Number[]}       a color formatted as [r, g, b, a]\n           *                          Example:\n           *                          input        ==> output\n           *                          g            ==> [g, g, g, 255]\n           *                          g,a          ==> [g, g, g, a]\n           *                          r, g, b      ==> [r, g, b, 255]\n           *                          r, g, b, a   ==> [r, g, b, a]\n           *                          [g]          ==> [g, g, g, 255]\n           *                          [g, a]       ==> [g, g, g, a]\n           *                          [r, g, b]    ==> [r, g, b, 255]\n           *                          [r, g, b, a] ==> [r, g, b, a]\n           * @example\n           * <div>\n           * <code>\n           * // todo\n           * </code>\n           * </div>\n           *\n           * @alt\n           * //todo\n           *\n           */\n          p5.Color._parseInputs = function(r, g, b, a) {\n            var numArgs = arguments.length;\n            var mode = this.mode;\n            var maxes = this.maxes[mode];\n            var results = [];\n            var i;\n\n            if (numArgs >= 3) {\n              // Argument is a list of component values.\n\n              results[0] = r / maxes[0];\n              results[1] = g / maxes[1];\n              results[2] = b / maxes[2];\n\n              // Alpha may be undefined, so default it to 100%.\n              if (typeof a === 'number') {\n                results[3] = a / maxes[3];\n              } else {\n                results[3] = 1;\n              }\n\n              // Constrain components to the range [0,1].\n              // (loop backwards for performance)\n              for (i = results.length - 1; i >= 0; --i) {\n                var result = results[i];\n                if (result < 0) {\n                  results[i] = 0;\n                } else if (result > 1) {\n                  results[i] = 1;\n                }\n              }\n\n              // Convert to RGBA and return.\n              if (mode === constants.HSL) {\n                return color_conversion._hslaToRGBA(results);\n              } else if (mode === constants.HSB) {\n                return color_conversion._hsbaToRGBA(results);\n              } else {\n                return results;\n              }\n            } else if (numArgs === 1 && typeof r === 'string') {\n              var str = r.trim().toLowerCase();\n\n              // Return if string is a named colour.\n              if (namedColors[str]) {\n                return p5.Color._parseInputs.call(this, namedColors[str]);\n              }\n\n              // Try RGBA pattern matching.\n              if (colorPatterns.HEX3.test(str)) {\n                // #rgb\n                results = colorPatterns.HEX3.exec(str)\n                  .slice(1)\n                  .map(function(color) {\n                    return parseInt(color + color, 16) / 255;\n                  });\n                results[3] = 1;\n                return results;\n              } else if (colorPatterns.HEX6.test(str)) {\n                // #rrggbb\n                results = colorPatterns.HEX6.exec(str)\n                  .slice(1)\n                  .map(function(color) {\n                    return parseInt(color, 16) / 255;\n                  });\n                results[3] = 1;\n                return results;\n              } else if (colorPatterns.HEX4.test(str)) {\n                // #rgba\n                results = colorPatterns.HEX4.exec(str)\n                  .slice(1)\n                  .map(function(color) {\n                    return parseInt(color + color, 16) / 255;\n                  });\n                return results;\n              } else if (colorPatterns.HEX8.test(str)) {\n                // #rrggbbaa\n                results = colorPatterns.HEX8.exec(str)\n                  .slice(1)\n                  .map(function(color) {\n                    return parseInt(color, 16) / 255;\n                  });\n                return results;\n              } else if (colorPatterns.RGB.test(str)) {\n                // rgb(R,G,B)\n                results = colorPatterns.RGB.exec(str)\n                  .slice(1)\n                  .map(function(color) {\n                    return color / 255;\n                  });\n                results[3] = 1;\n                return results;\n              } else if (colorPatterns.RGB_PERCENT.test(str)) {\n                // rgb(R%,G%,B%)\n                results = colorPatterns.RGB_PERCENT.exec(str)\n                  .slice(1)\n                  .map(function(color) {\n                    return parseFloat(color) / 100;\n                  });\n                results[3] = 1;\n                return results;\n              } else if (colorPatterns.RGBA.test(str)) {\n                // rgba(R,G,B,A)\n                results = colorPatterns.RGBA.exec(str)\n                  .slice(1)\n                  .map(function(color, idx) {\n                    if (idx === 3) {\n                      return parseFloat(color);\n                    }\n                    return color / 255;\n                  });\n                return results;\n              } else if (colorPatterns.RGBA_PERCENT.test(str)) {\n                // rgba(R%,G%,B%,A%)\n                results = colorPatterns.RGBA_PERCENT.exec(str)\n                  .slice(1)\n                  .map(function(color, idx) {\n                    if (idx === 3) {\n                      return parseFloat(color);\n                    }\n                    return parseFloat(color) / 100;\n                  });\n                return results;\n              }\n\n              // Try HSLA pattern matching.\n              if (colorPatterns.HSL.test(str)) {\n                // hsl(H,S,L)\n                results = colorPatterns.HSL.exec(str)\n                  .slice(1)\n                  .map(function(color, idx) {\n                    if (idx === 0) {\n                      return parseInt(color, 10) / 360;\n                    }\n                    return parseInt(color, 10) / 100;\n                  });\n                results[3] = 1;\n              } else if (colorPatterns.HSLA.test(str)) {\n                // hsla(H,S,L,A)\n                results = colorPatterns.HSLA.exec(str)\n                  .slice(1)\n                  .map(function(color, idx) {\n                    if (idx === 0) {\n                      return parseInt(color, 10) / 360;\n                    } else if (idx === 3) {\n                      return parseFloat(color);\n                    }\n                    return parseInt(color, 10) / 100;\n                  });\n              }\n              results = results.map(function(value) {\n                return Math.max(Math.min(value, 1), 0);\n              });\n              if (results.length) {\n                return color_conversion._hslaToRGBA(results);\n              }\n\n              // Try HSBA pattern matching.\n              if (colorPatterns.HSB.test(str)) {\n                // hsb(H,S,B)\n                results = colorPatterns.HSB.exec(str)\n                  .slice(1)\n                  .map(function(color, idx) {\n                    if (idx === 0) {\n                      return parseInt(color, 10) / 360;\n                    }\n                    return parseInt(color, 10) / 100;\n                  });\n                results[3] = 1;\n              } else if (colorPatterns.HSBA.test(str)) {\n                // hsba(H,S,B,A)\n                results = colorPatterns.HSBA.exec(str)\n                  .slice(1)\n                  .map(function(color, idx) {\n                    if (idx === 0) {\n                      return parseInt(color, 10) / 360;\n                    } else if (idx === 3) {\n                      return parseFloat(color);\n                    }\n                    return parseInt(color, 10) / 100;\n                  });\n              }\n\n              if (results.length) {\n                // (loop backwards for performance)\n                for (i = results.length - 1; i >= 0; --i) {\n                  results[i] = Math.max(Math.min(results[i], 1), 0);\n                }\n\n                return color_conversion._hsbaToRGBA(results);\n              }\n\n              // Input did not match any CSS color pattern: default to white.\n              results = [1, 1, 1, 1];\n            } else if ((numArgs === 1 || numArgs === 2) && typeof r === 'number') {\n              // 'Grayscale' mode.\n\n              /**\n               * For HSB and HSL, interpret the gray level as a brightness/lightness\n               * value (they are equivalent when chroma is zero). For RGB, normalize the\n               * gray level according to the blue maximum.\n               */\n              results[0] = r / maxes[2];\n              results[1] = r / maxes[2];\n              results[2] = r / maxes[2];\n\n              // Alpha may be undefined, so default it to 100%.\n              if (typeof g === 'number') {\n                results[3] = g / maxes[3];\n              } else {\n                results[3] = 1;\n              }\n\n              // Constrain components to the range [0,1].\n              results = results.map(function(value) {\n                return Math.max(Math.min(value, 1), 0);\n              });\n            } else {\n              throw new Error(arguments + 'is not a valid color representation.');\n            }\n\n            return results;\n          };\n\n          module.exports = p5.Color;\n        },\n        { '../core/constants': 18, '../core/main': 24, './color_conversion': 14 }\n      ],\n      17: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Color\n           * @submodule Setting\n           * @for p5\n           * @requires core\n           * @requires constants\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          var constants = _dereq_('../core/constants');\n          _dereq_('./p5.Color');\n\n          /**\n           * The <a href=\"#/p5/background\">background()</a> function sets the color used for the background of the\n           * p5.js canvas. The default background is transparent. This function is\n           * typically used within <a href=\"#/p5/draw\">draw()</a> to clear the display window at the beginning\n           * of each frame, but it can be used inside <a href=\"#/p5/setup\">setup()</a> to set the background on\n           * the first frame of animation or if the background need only be set once.\n           * <br><br>\n           * The color is either specified in terms of the RGB, HSB, or HSL color\n           * depending on the current <a href=\"#/p5/colorMode\">colorMode</a>. (The default color space is RGB, with\n           * each value in the range from 0 to 255). The alpha range by default is also 0 to 255.\n           * <br><br>\n           * If a single string argument is provided, RGB, RGBA and Hex CSS color strings\n           * and all named color strings are supported. In this case, an alpha number\n           * value as a second argument is not supported, the RGBA form should be used.\n           * <br><br>\n           * A <a href=\"#/p5.Color\">p5.Color</a> object can also be provided to set the background color.\n           * <br><br>\n           * A <a href=\"#/p5.Image\">p5.Image</a> can also be provided to set the background image.\n           *\n           * @method background\n           * @param {p5.Color} color     any value created by the <a href=\"#/p5/color\">color()</a> function\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * // Grayscale integer value\n           * background(51);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // R, G & B integer values\n           * background(255, 204, 0);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // H, S & B integer values\n           * colorMode(HSB);\n           * background(255, 204, 100);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Named SVG/CSS color string\n           * background('red');\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // three-digit hexadecimal RGB notation\n           * background('#fae');\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // six-digit hexadecimal RGB notation\n           * background('#222222');\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // integer RGB notation\n           * background('rgb(0,255,0)');\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // integer RGBA notation\n           * background('rgba(0,255,0, 0.25)');\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // percentage RGB notation\n           * background('rgb(100%,0%,10%)');\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // percentage RGBA notation\n           * background('rgba(100%,0%,100%,0.5)');\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // p5 Color object\n           * background(color(0, 0, 255));\n           * </code>\n           * </div>\n           *\n           * @alt\n           * canvas with darkest charcoal grey background.\n           * canvas with yellow background.\n           * canvas with royal blue background.\n           * canvas with red background.\n           * canvas with pink background.\n           * canvas with black background.\n           * canvas with bright green background.\n           * canvas with soft green background.\n           * canvas with red background.\n           * canvas with light purple background.\n           * canvas with blue background.\n           */\n\n          /**\n           * @method background\n           * @param {String} colorstring color string, possible formats include: integer\n           *                         rgb() or rgba(), percentage rgb() or rgba(),\n           *                         3-digit hex, 6-digit hex\n           * @param {Number} [a]         opacity of the background relative to current\n           *                             color range (default is 0-255)\n           * @chainable\n           */\n\n          /**\n           * @method background\n           * @param {Number} gray   specifies a value between white and black\n           * @param {Number} [a]\n           * @chainable\n           */\n\n          /**\n           * @method background\n           * @param {Number} v1     red or hue value (depending on the current color\n           *                        mode)\n           * @param {Number} v2     green or saturation value (depending on the current\n           *                        color mode)\n           * @param {Number} v3     blue or brightness value (depending on the current\n           *                        color mode)\n           * @param  {Number} [a]\n           * @chainable\n           */\n\n          /**\n           * @method background\n           * @param  {Number[]}      values  an array containing the red, green, blue\n           *                                 and alpha components of the color\n           * @chainable\n           */\n\n          /**\n           * @method background\n           * @param {p5.Image} image     image created with <a href=\"#/p5/loadImage\">loadImage()</a> or <a href=\"#/p5/createImage\">createImage()</a>,\n           *                             to set as background\n           *                             (must be same size as the sketch window)\n           * @param  {Number}  [a]\n           * @chainable\n           */\n\n          p5.prototype.background = function() {\n            this._renderer.background.apply(this._renderer, arguments);\n            return this;\n          };\n\n          /**\n           * Clears the pixels within a buffer. This function only clears the canvas.\n           * It will not clear objects created by createX() methods such as\n           * <a href=\"#/p5/createVideo\">createVideo()</a> or <a href=\"#/p5/createDiv\">createDiv()</a>.\n           * Unlike the main graphics context, pixels in additional graphics areas created\n           * with <a href=\"#/p5/createGraphics\">createGraphics()</a> can be entirely\n           * or partially transparent. This function clears everything to make all of\n           * the pixels 100% transparent.\n           *\n           * @method clear\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // Clear the screen on mouse press.\n           * function setup() {\n           *   createCanvas(100, 100);\n           * }\n           *\n           * function draw() {\n           *   ellipse(mouseX, mouseY, 20, 20);\n           * }\n           *\n           * function mousePressed() {\n           *   clear();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 20x20 white ellipses are continually drawn at mouse x and y coordinates.\n           *\n           */\n\n          p5.prototype.clear = function() {\n            this._renderer.clear();\n            return this;\n          };\n\n          /**\n           * <a href=\"#/p5/colorMode\">colorMode()</a> changes the way p5.js interprets color data. By default, the\n           * parameters for <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/background\">background()</a>, and <a href=\"#/p5/color\">color()</a> are defined by\n           * values between 0 and 255 using the RGB color model. This is equivalent to\n           * setting colorMode(RGB, 255). Setting colorMode(HSB) lets you use the HSB\n           * system instead. By default, this is colorMode(HSB, 360, 100, 100, 1). You\n           * can also use HSL.\n           * <br><br>\n           * Note: existing color objects remember the mode that they were created in,\n           * so you can change modes as you like without affecting their appearance.\n           *\n           *\n           * @method colorMode\n           * @param {Constant} mode   either RGB, HSB or HSL, corresponding to\n           *                          Red/Green/Blue and Hue/Saturation/Brightness\n           *                          (or Lightness)\n           * @param {Number}  [max]  range for all values\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * noStroke();\n           * colorMode(RGB, 100);\n           * for (let i = 0; i < 100; i++) {\n           *   for (let j = 0; j < 100; j++) {\n           *     stroke(i, j, 0);\n           *     point(i, j);\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * noStroke();\n           * colorMode(HSB, 100);\n           * for (let i = 0; i < 100; i++) {\n           *   for (let j = 0; j < 100; j++) {\n           *     stroke(i, j, 100);\n           *     point(i, j);\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * colorMode(RGB, 255);\n           * let c = color(127, 255, 0);\n           *\n           * colorMode(RGB, 1);\n           * let myColor = c._getRed();\n           * text(myColor, 10, 10, 80, 80);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * noFill();\n           * colorMode(RGB, 255, 255, 255, 1);\n           * background(255);\n           *\n           * strokeWeight(4);\n           * stroke(255, 0, 10, 0.3);\n           * ellipse(40, 40, 50, 50);\n           * ellipse(50, 50, 40, 40);\n           * </code>\n           * </div>\n           *\n           * @alt\n           *Green to red gradient from bottom L to top R. shading originates from top left.\n           *Rainbow gradient from left to right. Brightness increasing to white at top.\n           *unknown image.\n           *50x50 ellipse at middle L & 40x40 ellipse at center. Translucent pink outlines.\n           *\n           */\n          /**\n           * @method colorMode\n           * @param {Constant} mode\n           * @param {Number} max1     range for the red or hue depending on the\n           *                              current color mode\n           * @param {Number} max2     range for the green or saturation depending\n           *                              on the current color mode\n           * @param {Number} max3     range for the blue or brightness/lightness\n           *                              depending on the current color mode\n           * @param {Number} [maxA]   range for the alpha\n           * @chainable\n           */\n          p5.prototype.colorMode = function(mode, max1, max2, max3, maxA) {\n            p5._validateParameters('colorMode', arguments);\n            if (\n              mode === constants.RGB ||\n              mode === constants.HSB ||\n              mode === constants.HSL\n            ) {\n              // Set color mode.\n              this._colorMode = mode;\n\n              // Set color maxes.\n              var maxes = this._colorMaxes[mode];\n              if (arguments.length === 2) {\n                maxes[0] = max1; // Red\n                maxes[1] = max1; // Green\n                maxes[2] = max1; // Blue\n                maxes[3] = max1; // Alpha\n              } else if (arguments.length === 4) {\n                maxes[0] = max1; // Red\n                maxes[1] = max2; // Green\n                maxes[2] = max3; // Blue\n              } else if (arguments.length === 5) {\n                maxes[0] = max1; // Red\n                maxes[1] = max2; // Green\n                maxes[2] = max3; // Blue\n                maxes[3] = maxA; // Alpha\n              }\n            }\n\n            return this;\n          };\n\n          /**\n           * Sets the color used to fill shapes. For example, if you run\n           * fill(204, 102, 0), all shapes drawn after the fill command will be filled with the color orange. This\n           * color is either specified in terms of the RGB or HSB color depending on\n           * the current <a href=\"#/p5/colorMode\">colorMode()</a>. (The default color space is RGB, with each value\n           * in the range from 0 to 255). The alpha range by default is also 0 to 255.\n           * <br><br>\n           * If a single string argument is provided, RGB, RGBA and Hex CSS color strings\n           * and all named color strings are supported. In this case, an alpha number\n           * value as a second argument is not supported, the RGBA form should be used.\n           * <br><br>\n           * A p5 <a href=\"#/p5.Color\">Color</a> object can also be provided to set the fill color.\n           *\n           * @method fill\n           * @param  {Number}        v1      red or hue value relative to\n           *                                 the current color range\n           * @param  {Number}        v2      green or saturation value\n           *                                 relative to the current color range\n           * @param  {Number}        v3      blue or brightness value\n           *                                 relative to the current color range\n           * @param  {Number}        [alpha]\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // Grayscale integer value\n           * fill(51);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // R, G & B integer values\n           * fill(255, 204, 0);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // H, S & B integer values\n           * colorMode(HSB);\n           * fill(255, 204, 100);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Named SVG/CSS color string\n           * fill('red');\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // three-digit hexadecimal RGB notation\n           * fill('#fae');\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // six-digit hexadecimal RGB notation\n           * fill('#222222');\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // integer RGB notation\n           * fill('rgb(0,255,0)');\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // integer RGBA notation\n           * fill('rgba(0,255,0, 0.25)');\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // percentage RGB notation\n           * fill('rgb(100%,0%,10%)');\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // percentage RGBA notation\n           * fill('rgba(100%,0%,100%,0.5)');\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // p5 Color object\n           * fill(color(0, 0, 255));\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           * @alt\n           * 60x60 dark charcoal grey rect with black outline in center of canvas.\n           * 60x60 yellow rect with black outline in center of canvas.\n           * 60x60 royal blue rect with black outline in center of canvas.\n           * 60x60 red rect with black outline in center of canvas.\n           * 60x60 pink rect with black outline in center of canvas.\n           * 60x60 black rect with black outline in center of canvas.\n           * 60x60 light green rect with black outline in center of canvas.\n           * 60x60 soft green rect with black outline in center of canvas.\n           * 60x60 red rect with black outline in center of canvas.\n           * 60x60 dark fuchsia rect with black outline in center of canvas.\n           * 60x60 blue rect with black outline in center of canvas.\n           */\n\n          /**\n           * @method fill\n           * @param  {String}        value   a color string\n           * @chainable\n           */\n\n          /**\n           * @method fill\n           * @param  {Number}        gray   a gray value\n           * @param  {Number}        [alpha]\n           * @chainable\n           */\n\n          /**\n           * @method fill\n           * @param  {Number[]}      values  an array containing the red,green,blue &\n           *                                 and alpha components of the color\n           * @chainable\n           */\n\n          /**\n           * @method fill\n           * @param  {p5.Color}      color   the fill color\n           * @chainable\n           */\n          p5.prototype.fill = function() {\n            this._renderer._setProperty('_fillSet', true);\n            this._renderer._setProperty('_doFill', true);\n            this._renderer.fill.apply(this._renderer, arguments);\n            return this;\n          };\n\n          /**\n           * Disables filling geometry. If both <a href=\"#/p5/noStroke\">noStroke()</a> and <a href=\"#/p5/noFill\">noFill()</a> are called,\n           * nothing will be drawn to the screen.\n           *\n           * @method noFill\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * rect(15, 10, 55, 55);\n           * noFill();\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div modernizr='webgl'>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   noFill();\n           *   stroke(100, 100, 240);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   box(45, 45, 45);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white rect top middle and noFill rect center. Both 60x60 with black outlines.\n           * black canvas with purple cube wireframe spinning\n           */\n          p5.prototype.noFill = function() {\n            this._renderer._setProperty('_doFill', false);\n            return this;\n          };\n\n          /**\n           * Disables drawing the stroke (outline). If both <a href=\"#/p5/noStroke\">noStroke()</a> and <a href=\"#/p5/noFill\">noFill()</a>\n           * are called, nothing will be drawn to the screen.\n           *\n           * @method noStroke\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * noStroke();\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div modernizr='webgl'>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   noStroke();\n           *   fill(240, 150, 150);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   box(45, 45, 45);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 60x60 white rect at center. no outline.\n           * black canvas with pink cube spinning\n           */\n          p5.prototype.noStroke = function() {\n            this._renderer._setProperty('_doStroke', false);\n            return this;\n          };\n\n          /**\n           * Sets the color used to draw lines and borders around shapes. This color\n           * is either specified in terms of the RGB or HSB color depending on the\n           * current <a href=\"#/p5/colorMode\">colorMode()</a> (the default color space is RGB, with each value in\n           * the range from 0 to 255). The alpha range by default is also 0 to 255.\n           * <br><br>\n           * If a single string argument is provided, RGB, RGBA and Hex CSS color\n           * strings and all named color strings are supported. In this case, an alpha\n           * number value as a second argument is not supported, the RGBA form should be\n           * used.\n           * <br><br>\n           * A p5 <a href=\"#/p5.Color\">Color</a> object can also be provided to set the stroke color.\n           *\n           *\n           * @method stroke\n           * @param  {Number}        v1      red or hue value relative to\n           *                                 the current color range\n           * @param  {Number}        v2      green or saturation value\n           *                                 relative to the current color range\n           * @param  {Number}        v3      blue or brightness value\n           *                                 relative to the current color range\n           * @param  {Number}        [alpha]\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * // Grayscale integer value\n           * strokeWeight(4);\n           * stroke(51);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // R, G & B integer values\n           * stroke(255, 204, 0);\n           * strokeWeight(4);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // H, S & B integer values\n           * colorMode(HSB);\n           * strokeWeight(4);\n           * stroke(255, 204, 100);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Named SVG/CSS color string\n           * stroke('red');\n           * strokeWeight(4);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // three-digit hexadecimal RGB notation\n           * stroke('#fae');\n           * strokeWeight(4);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // six-digit hexadecimal RGB notation\n           * stroke('#222222');\n           * strokeWeight(4);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // integer RGB notation\n           * stroke('rgb(0,255,0)');\n           * strokeWeight(4);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // integer RGBA notation\n           * stroke('rgba(0,255,0,0.25)');\n           * strokeWeight(4);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // percentage RGB notation\n           * stroke('rgb(100%,0%,10%)');\n           * strokeWeight(4);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // percentage RGBA notation\n           * stroke('rgba(100%,0%,100%,0.5)');\n           * strokeWeight(4);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // p5 Color object\n           * stroke(color(0, 0, 255));\n           * strokeWeight(4);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 60x60 white rect at center. Dark charcoal grey outline.\n           * 60x60 white rect at center. Yellow outline.\n           * 60x60 white rect at center. Royal blue outline.\n           * 60x60 white rect at center. Red outline.\n           * 60x60 white rect at center. Pink outline.\n           * 60x60 white rect at center. Black outline.\n           * 60x60 white rect at center. Bright green outline.\n           * 60x60 white rect at center. Soft green outline.\n           * 60x60 white rect at center. Red outline.\n           * 60x60 white rect at center. Dark fuchsia outline.\n           * 60x60 white rect at center. Blue outline.\n           */\n\n          /**\n           * @method stroke\n           * @param  {String}        value   a color string\n           * @chainable\n           */\n\n          /**\n           * @method stroke\n           * @param  {Number}        gray   a gray value\n           * @param  {Number}        [alpha]\n           * @chainable\n           */\n\n          /**\n           * @method stroke\n           * @param  {Number[]}      values  an array containing the red,green,blue &\n           *                                 and alpha components of the color\n           * @chainable\n           */\n\n          /**\n           * @method stroke\n           * @param  {p5.Color}      color   the stroke color\n           * @chainable\n           */\n\n          p5.prototype.stroke = function() {\n            this._renderer._setProperty('_strokeSet', true);\n            this._renderer._setProperty('_doStroke', true);\n            this._renderer.stroke.apply(this._renderer, arguments);\n            return this;\n          };\n\n          module.exports = p5;\n        },\n        { '../core/constants': 18, '../core/main': 24, './p5.Color': 16 }\n      ],\n      18: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Constants\n           * @submodule Constants\n           * @for p5\n           */\n\n          'use strict';\n\n          var PI = Math.PI;\n\n          module.exports = {\n            // GRAPHICS RENDERER\n            /**\n             * The default, two-dimensional renderer.\n             * @property {String} P2D\n             * @final\n             */\n            P2D: 'p2d',\n            /**\n             * One of the two render modes in p5.js: P2D (default renderer) and WEBGL\n             * Enables 3D render by introducing the third dimension: Z\n             * @property {String} WEBGL\n             * @final\n             */\n            WEBGL: 'webgl',\n\n            // ENVIRONMENT\n            /**\n             * @property {String} ARROW\n             * @final\n             */\n            ARROW: 'default',\n            /**\n             * @property {String} CROSS\n             * @final\n             */\n            CROSS: 'crosshair',\n            /**\n             * @property {String} HAND\n             * @final\n             */\n            HAND: 'pointer',\n            /**\n             * @property {String} MOVE\n             * @final\n             */\n            MOVE: 'move',\n            /**\n             * @property {String} TEXT\n             * @final\n             */\n            TEXT: 'text',\n            /**\n             * @property {String} WAIT\n             * @final\n             */\n            WAIT: 'wait',\n\n            // TRIGONOMETRY\n\n            /**\n             * HALF_PI is a mathematical constant with the value\n             * 1.57079632679489661923. It is half the ratio of the\n             * circumference of a circle to its diameter. It is useful in\n             * combination with the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.\n             *\n             * @property {Number} HALF_PI\n             * @final\n             *\n             * @example\n             * <div><code>\n             * arc(50, 50, 80, 80, 0, HALF_PI);\n             * </code></div>\n             *\n             * @alt\n             * 80x80 white quarter-circle with curve toward bottom right of canvas.\n             *\n             */\n            HALF_PI: PI / 2,\n            /**\n             * PI is a mathematical constant with the value\n             * 3.14159265358979323846. It is the ratio of the circumference\n             * of a circle to its diameter. It is useful in combination with\n             * the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.\n             *\n             * @property {Number} PI\n             * @final\n             *\n             * @example\n             * <div><code>\n             * arc(50, 50, 80, 80, 0, PI);\n             * </code></div>\n             *\n             * @alt\n             * white half-circle with curve toward bottom of canvas.\n             *\n             */\n            PI: PI,\n            /**\n             * QUARTER_PI is a mathematical constant with the value 0.7853982.\n             * It is one quarter the ratio of the circumference of a circle to\n             * its diameter. It is useful in combination with the trigonometric\n             * functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.\n             *\n             * @property {Number} QUARTER_PI\n             * @final\n             *\n             * @example\n             * <div><code>\n             * arc(50, 50, 80, 80, 0, QUARTER_PI);\n             * </code></div>\n             *\n             * @alt\n             * white eighth-circle rotated about 40 degrees with curve bottom right canvas.\n             *\n             */\n            QUARTER_PI: PI / 4,\n            /**\n             * TAU is an alias for TWO_PI, a mathematical constant with the\n             * value 6.28318530717958647693. It is twice the ratio of the\n             * circumference of a circle to its diameter. It is useful in\n             * combination with the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.\n             *\n             * @property {Number} TAU\n             * @final\n             *\n             * @example\n             * <div><code>\n             * arc(50, 50, 80, 80, 0, TAU);\n             * </code></div>\n             *\n             * @alt\n             * 80x80 white ellipse shape in center of canvas.\n             *\n             */\n            TAU: PI * 2,\n            /**\n             * TWO_PI is a mathematical constant with the value\n             * 6.28318530717958647693. It is twice the ratio of the\n             * circumference of a circle to its diameter. It is useful in\n             * combination with the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.\n             *\n             * @property {Number} TWO_PI\n             * @final\n             *\n             * @example\n             * <div><code>\n             * arc(50, 50, 80, 80, 0, TWO_PI);\n             * </code></div>\n             *\n             * @alt\n             * 80x80 white ellipse shape in center of canvas.\n             *\n             */\n            TWO_PI: PI * 2,\n            /**\n             * Constant to be used with <a href=\"#/p5/angleMode\">angleMode()</a> function, to set the mode which\n             * p5.js interprates and calculates angles (either DEGREES or RADIANS).\n             * @property {String} DEGREES\n             * @final\n             *\n             * @example\n             * <div class='norender'><code>\n             * function setup() {\n             *   angleMode(DEGREES);\n             * }\n             * </code></div>\n             */\n            DEGREES: 'degrees',\n            /**\n             * Constant to be used with <a href=\"#/p5/angleMode\">angleMode()</a> function, to set the mode which\n             * p5.js interprates and calculates angles (either RADIANS or DEGREES).\n             * @property {String} RADIANS\n             * @final\n             *\n             * @example\n             * <div class='norender'><code>\n             * function setup() {\n             *   angleMode(RADIANS);\n             * }\n             * </code></div>\n             */\n            RADIANS: 'radians',\n            DEG_TO_RAD: PI / 180.0,\n            RAD_TO_DEG: 180.0 / PI,\n\n            // SHAPE\n            /**\n             * @property {String} CORNER\n             * @final\n             */\n            CORNER: 'corner',\n            /**\n             * @property {String} CORNERS\n             * @final\n             */\n            CORNERS: 'corners',\n            /**\n             * @property {String} RADIUS\n             * @final\n             */\n            RADIUS: 'radius',\n            /**\n             * @property {String} RIGHT\n             * @final\n             */\n            RIGHT: 'right',\n            /**\n             * @property {String} LEFT\n             * @final\n             */\n            LEFT: 'left',\n            /**\n             * @property {String} CENTER\n             * @final\n             */\n            CENTER: 'center',\n            /**\n             * @property {String} TOP\n             * @final\n             */\n            TOP: 'top',\n            /**\n             * @property {String} BOTTOM\n             * @final\n             */\n            BOTTOM: 'bottom',\n            /**\n             * @property {String} BASELINE\n             * @final\n             * @default alphabetic\n             */\n            BASELINE: 'alphabetic',\n            /**\n             * @property {Number} POINTS\n             * @final\n             * @default 0x0000\n             */\n            POINTS: 0x0000,\n            /**\n             * @property {Number} LINES\n             * @final\n             * @default 0x0001\n             */\n            LINES: 0x0001,\n            /**\n             * @property {Number} LINE_STRIP\n             * @final\n             * @default 0x0003\n             */\n            LINE_STRIP: 0x0003,\n            /**\n             * @property {Number} LINE_LOOP\n             * @final\n             * @default 0x0002\n             */\n            LINE_LOOP: 0x0002,\n            /**\n             * @property {Number} TRIANGLES\n             * @final\n             * @default 0x0004\n             */\n            TRIANGLES: 0x0004,\n            /**\n             * @property {Number} TRIANGLE_FAN\n             * @final\n             * @default 0x0006\n             */\n            TRIANGLE_FAN: 0x0006,\n            /**\n             * @property {Number} TRIANGLE_STRIP\n             * @final\n             * @default 0x0005\n             */\n            TRIANGLE_STRIP: 0x0005,\n            /**\n             * @property {String} QUADS\n             * @final\n             */\n            QUADS: 'quads',\n            /**\n             * @property {String} QUAD_STRIP\n             * @final\n             * @default quad_strip\n             */\n            QUAD_STRIP: 'quad_strip',\n            /**\n             * @property {String} CLOSE\n             * @final\n             */\n            CLOSE: 'close',\n            /**\n             * @property {String} OPEN\n             * @final\n             */\n            OPEN: 'open',\n            /**\n             * @property {String} CHORD\n             * @final\n             */\n            CHORD: 'chord',\n            /**\n             * @property {String} PIE\n             * @final\n             */\n            PIE: 'pie',\n            /**\n             * @property {String} PROJECT\n             * @final\n             * @default square\n             */\n            PROJECT: 'square', // PEND: careful this is counterintuitive\n            /**\n             * @property {String} SQUARE\n             * @final\n             * @default butt\n             */\n            SQUARE: 'butt',\n            /**\n             * @property {String} ROUND\n             * @final\n             */\n            ROUND: 'round',\n            /**\n             * @property {String} BEVEL\n             * @final\n             */\n            BEVEL: 'bevel',\n            /**\n             * @property {String} MITER\n             * @final\n             */\n            MITER: 'miter',\n\n            // COLOR\n            /**\n             * @property {String} RGB\n             * @final\n             */\n            RGB: 'rgb',\n            /**\n             * @property {String} HSB\n             * @final\n             */\n            HSB: 'hsb',\n            /**\n             * @property {String} HSL\n             * @final\n             */\n            HSL: 'hsl',\n\n            // DOM EXTENSION\n            /**\n             * AUTO allows us to automatically set the width or height of an element (but not both),\n             * based on the current height and width of the element. Only one parameter can\n             * be passed to the <a href=\"/#/p5.Element/size\">size</a> function as AUTO, at a time.\n             *\n             * @property {String} AUTO\n             * @final\n             */\n            AUTO: 'auto',\n\n            // INPUT\n            ALT: 18,\n            BACKSPACE: 8,\n            CONTROL: 17,\n            DELETE: 46,\n            DOWN_ARROW: 40,\n            ENTER: 13,\n            ESCAPE: 27,\n            LEFT_ARROW: 37,\n            OPTION: 18,\n            RETURN: 13,\n            RIGHT_ARROW: 39,\n            SHIFT: 16,\n            TAB: 9,\n            UP_ARROW: 38,\n\n            // RENDERING\n            /**\n             * @property {String} BLEND\n             * @final\n             * @default source-over\n             */\n            BLEND: 'source-over',\n            /**\n             * @property {String} ADD\n             * @final\n             * @default lighter\n             */\n            ADD: 'lighter',\n            //ADD: 'add', //\n            //SUBTRACT: 'subtract', //\n            /**\n             * @property {String} DARKEST\n             * @final\n             */\n            DARKEST: 'darken',\n            /**\n             * @property {String} LIGHTEST\n             * @final\n             * @default lighten\n             */\n            LIGHTEST: 'lighten',\n            /**\n             * @property {String} DIFFERENCE\n             * @final\n             */\n            DIFFERENCE: 'difference',\n            /**\n             * @property {String} SUBTRACT\n             * @final\n             */\n            SUBTRACT: 'subtract',\n            /**\n             * @property {String} EXCLUSION\n             * @final\n             */\n            EXCLUSION: 'exclusion',\n            /**\n             * @property {String} MULTIPLY\n             * @final\n             */\n            MULTIPLY: 'multiply',\n            /**\n             * @property {String} SCREEN\n             * @final\n             */\n            SCREEN: 'screen',\n            /**\n             * @property {String} REPLACE\n             * @final\n             * @default copy\n             */\n            REPLACE: 'copy',\n            /**\n             * @property {String} OVERLAY\n             * @final\n             */\n            OVERLAY: 'overlay',\n            /**\n             * @property {String} HARD_LIGHT\n             * @final\n             */\n            HARD_LIGHT: 'hard-light',\n            /**\n             * @property {String} SOFT_LIGHT\n             * @final\n             */\n            SOFT_LIGHT: 'soft-light',\n            /**\n             * @property {String} DODGE\n             * @final\n             * @default color-dodge\n             */\n            DODGE: 'color-dodge',\n            /**\n             * @property {String} BURN\n             * @final\n             * @default color-burn\n             */\n            BURN: 'color-burn',\n\n            // FILTERS\n            /**\n             * @property {String} THRESHOLD\n             * @final\n             */\n            THRESHOLD: 'threshold',\n            /**\n             * @property {String} GRAY\n             * @final\n             */\n            GRAY: 'gray',\n            /**\n             * @property {String} OPAQUE\n             * @final\n             */\n            OPAQUE: 'opaque',\n            /**\n             * @property {String} INVERT\n             * @final\n             */\n            INVERT: 'invert',\n            /**\n             * @property {String} POSTERIZE\n             * @final\n             */\n            POSTERIZE: 'posterize',\n            /**\n             * @property {String} DILATE\n             * @final\n             */\n            DILATE: 'dilate',\n            /**\n             * @property {String} ERODE\n             * @final\n             */\n            ERODE: 'erode',\n            /**\n             * @property {String} BLUR\n             * @final\n             */\n            BLUR: 'blur',\n\n            // TYPOGRAPHY\n            /**\n             * @property {String} NORMAL\n             * @final\n             */\n            NORMAL: 'normal',\n            /**\n             * @property {String} ITALIC\n             * @final\n             */\n            ITALIC: 'italic',\n            /**\n             * @property {String} BOLD\n             * @final\n             */\n            BOLD: 'bold',\n            /**\n             * @property {String} BOLDITALIC\n             * @final\n             */\n            BOLDITALIC: 'bold italic',\n\n            // TYPOGRAPHY-INTERNAL\n            _DEFAULT_TEXT_FILL: '#000000',\n            _DEFAULT_LEADMULT: 1.25,\n            _CTX_MIDDLE: 'middle',\n\n            // VERTICES\n            LINEAR: 'linear',\n            QUADRATIC: 'quadratic',\n            BEZIER: 'bezier',\n            CURVE: 'curve',\n\n            // WEBGL DRAWMODES\n            STROKE: 'stroke',\n            FILL: 'fill',\n            TEXTURE: 'texture',\n            IMMEDIATE: 'immediate',\n\n            // WEBGL TEXTURE MODE\n            // NORMAL already exists for typography\n            /**\n             * @property {String} IMAGE\n             * @final\n             */\n            IMAGE: 'image',\n\n            // WEBGL TEXTURE WRAP AND FILTERING\n            // LINEAR already exists above\n            NEAREST: 'nearest',\n            REPEAT: 'repeat',\n            CLAMP: 'clamp',\n            MIRROR: 'mirror',\n\n            // DEVICE-ORIENTATION\n            /**\n             * @property {String} LANDSCAPE\n             * @final\n             */\n            LANDSCAPE: 'landscape',\n            /**\n             * @property {String} PORTRAIT\n             * @final\n             */\n            PORTRAIT: 'portrait',\n\n            // DEFAULTS\n            _DEFAULT_STROKE: '#000000',\n            _DEFAULT_FILL: '#FFFFFF',\n\n            /**\n             * @property {String} GRID\n             * @final\n             */\n            GRID: 'grid',\n\n            /**\n             * @property {String} AXES\n             * @final\n             */\n            AXES: 'axes'\n          };\n        },\n        {}\n      ],\n      19: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Environment\n           * @submodule Environment\n           * @for p5\n           * @requires core\n           * @requires constants\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('./main');\n          var C = _dereq_('./constants');\n\n          var standardCursors = [C.ARROW, C.CROSS, C.HAND, C.MOVE, C.TEXT, C.WAIT];\n\n          p5.prototype._frameRate = 0;\n          p5.prototype._lastFrameTime = window.performance.now();\n          p5.prototype._targetFrameRate = 60;\n\n          var _windowPrint = window.print;\n\n          /**\n           * The <a href=\"#/p5/print\">print()</a> function writes to the console area of your browser.\n           * This function is often helpful for looking at the data a program is\n           * producing. This function creates a new line of text for each call to\n           * the function. Individual elements can be\n           * separated with quotes (\"\") and joined with the addition operator (+).\n           *\n           * Note that calling print() without any arguments invokes the window.print()\n           * function which opens the browser's print dialog. To print a blank line\n           * to console you can write print('\\n').\n           *\n           * @method print\n           * @param {Any} contents any combination of Number, String, Object, Boolean,\n           *                       Array to print\n           * @example\n           * <div><code class='norender'>\n           * let x = 10;\n           * print('The value of x is ' + x);\n           * // prints \"The value of x is 10\"\n           * </code></div>\n           * @alt\n           * default grey canvas\n           */\n          p5.prototype.print = function() {\n            if (!arguments.length) {\n              _windowPrint();\n            } else {\n              console.log.apply(console, arguments);\n            }\n          };\n\n          /**\n    * The system variable <a href=\"#/p5/frameCount\">frameCount</a> contains the number of frames that have\n    * been displayed since the program started. Inside <a href=\"#/p5/setup\">setup()</a> the value is 0,\n    * after the first iteration of draw it is 1, etc.\n    *\n    * @property {Integer} frameCount\n    * @readOnly\n    * @example\n    *   <div><code>\n    * function setup() {\n    *   frameRate(30);\n    *   textSize(30);\n    *   textAlign(CENTER);\n    * }\n    *\n    * function draw() {\n    *   background(200);\n    *   text(frameCount, width / 2, height / 2);\n    * }\n   </code></div>\n    *\n    * @alt\n    * numbers rapidly counting upward with frame count set to 30.\n    *\n    */\n          p5.prototype.frameCount = 0;\n\n          /**\n           * The system variable <a href=\"#/p5/deltaTime\">deltaTime</a> contains the time\n           * difference between the beginning of the previous frame and the beginning\n           * of the current frame in milliseconds.\n           * <br><br>\n           * This variable is useful for creating time sensitive animation or physics\n           * calculation that should stay constant regardless of frame rate.\n           *\n           * @property {Integer} deltaTime\n           * @readOnly\n           * @example\n           * <div><code>\n           * let rectX = 0;\n           * let fr = 30; //starting FPS\n           * let clr;\n           *\n           * function setup() {\n           *   background(200);\n           *   frameRate(fr); // Attempt to refresh at starting FPS\n           *   clr = color(255, 0, 0);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rectX = rectX + 1 * (deltaTime / 50); // Move Rectangle in relation to deltaTime\n           *\n           *   if (rectX >= width) {\n           *     // If you go off screen.\n           *     if (fr === 30) {\n           *       clr = color(0, 0, 255);\n           *       fr = 10;\n           *       frameRate(fr); // make frameRate 10 FPS\n           *     } else {\n           *       clr = color(255, 0, 0);\n           *       fr = 30;\n           *       frameRate(fr); // make frameRate 30 FPS\n           *     }\n           *     rectX = 0;\n           *   }\n           *   fill(clr);\n           *   rect(rectX, 40, 20, 20);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * red rect moves left to right, followed by blue rect moving at the same speed\n           * with a lower frame rate. Loops.\n           *\n           */\n          p5.prototype.deltaTime = 0;\n\n          /**\n                             * Confirms if the window a p5.js program is in is \"focused,\" meaning that\n                             * the sketch will accept mouse or keyboard input. This variable is\n                             * \"true\" if the window is focused and \"false\" if not.\n                             *\n                             * @property {Boolean} focused\n                             * @readOnly\n                             * @example\n                             * <div><code>\n                             * // To demonstrate, put two windows side by side.\n                             * // Click on the window that the p5 sketch isn't in!\n                             * function draw() {\n                             *   background(200);\n                             *   noStroke();\n                             *   fill(0, 200, 0);\n                             *   ellipse(25, 25, 50, 50);\n                             *\n                             *   if (!focused) {\n                                // or \"if (focused === false)\"\n                             *     stroke(200, 0, 0);\n                             *     line(0, 0, 100, 100);\n                             *     line(100, 0, 0, 100);\n                             *   }\n                             * }\n                             * </code></div>\n                             *\n                             * @alt\n                             * green 50x50 ellipse at top left. Red X covers canvas when page focus changes\n                             *\n                             */\n          p5.prototype.focused = document.hasFocus();\n\n          /**\n           * Sets the cursor to a predefined symbol or an image, or makes it visible\n           * if already hidden. If you are trying to set an image as the cursor, the\n           * recommended size is 16x16 or 32x32 pixels. The values for parameters x and y\n           * must be less than the dimensions of the image.\n           *\n           * @method cursor\n           * @param {String|Constant} type Built-In: either ARROW, CROSS, HAND, MOVE, TEXT and WAIT\n           *                               Native CSS properties: 'grab', 'progress', 'cell' etc.\n           *                               External: path for cursor's images\n           *                               (Allowed File extensions: .cur, .gif, .jpg, .jpeg, .png)\n           *                               For more information on Native CSS cursors and url visit:\n           *                               https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\n           * @param {Number}          [x]  the horizontal active spot of the cursor (must be less than 32)\n           * @param {Number}          [y]  the vertical active spot of the cursor (must be less than 32)\n           * @example\n           * <div><code>\n           * // Move the mouse across the quadrants\n           * // to see the cursor change\n           * function draw() {\n           *   line(width / 2, 0, width / 2, height);\n           *   line(0, height / 2, width, height / 2);\n           *   if (mouseX < 50 && mouseY < 50) {\n           *     cursor(CROSS);\n           *   } else if (mouseX > 50 && mouseY < 50) {\n           *     cursor('progress');\n           *   } else if (mouseX > 50 && mouseY > 50) {\n           *     cursor('https://s3.amazonaws.com/mupublicdata/cursor.cur');\n           *   } else {\n           *     cursor('grab');\n           *   }\n           * }\n           * </code></div>\n           *\n           * @alt\n           * canvas is divided into four quadrants. cursor on first is a cross, second is a progress,\n           * third is a custom cursor using path to the cursor and fourth is a grab.\n           *\n           */\n          p5.prototype.cursor = function(type, x, y) {\n            var cursor = 'auto';\n            var canvas = this._curElement.elt;\n            if (standardCursors.indexOf(type) > -1) {\n              // Standard css cursor\n              cursor = type;\n            } else if (typeof type === 'string') {\n              var coords = '';\n              if (x && y && typeof x === 'number' && typeof y === 'number') {\n                // Note that x and y values must be unit-less positive integers < 32\n                // https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\n                coords = x + ' ' + y;\n              }\n              if (\n                type.substring(0, 7) === 'http://' ||\n                type.substring(0, 8) === 'https://'\n              ) {\n                // Image (absolute url)\n                cursor = 'url(' + type + ') ' + coords + ', auto';\n              } else if (/\\.(cur|jpg|jpeg|gif|png|CUR|JPG|JPEG|GIF|PNG)$/.test(type)) {\n                // Image file (relative path) - Separated for performance reasons\n                cursor = 'url(' + type + ') ' + coords + ', auto';\n              } else {\n                // Any valid string for the css cursor property\n                cursor = type;\n              }\n            }\n            canvas.style.cursor = cursor;\n          };\n\n          /**\n    * Specifies the number of frames to be displayed every second. For example,\n    * the function call frameRate(30) will attempt to refresh 30 times a second.\n    * If the processor is not fast enough to maintain the specified rate, the\n    * frame rate will not be achieved. Setting the frame rate within <a href=\"#/p5/setup\">setup()</a> is\n    * recommended. The default frame rate is based on the frame rate of the display\n    * (here also called \"refresh rate\"), which is set to 60 frames per second on most\n    * computers. A frame rate of 24 frames per second (usual for movies) or above\n    * will be enough for smooth animations\n    * This is the same as setFrameRate(val).\n    * <br><br>\n    * Calling <a href=\"#/p5/frameRate\">frameRate()</a> with no arguments returns the current framerate. The\n    * draw function must run at least once before it will return a value. This\n    * is the same as <a href=\"#/p5/getFrameRate\">getFrameRate()</a>.\n    * <br><br>\n    * Calling <a href=\"#/p5/frameRate\">frameRate()</a> with arguments that are not of the type numbers\n    * or are non positive also returns current framerate.\n    *\n    * @method frameRate\n    * @param  {Number} fps number of frames to be displayed every second\n    * @chainable\n    *\n    * @example\n    *\n    * <div><code>\n    * let rectX = 0;\n    * let fr = 30; //starting FPS\n    * let clr;\n    *\n    * function setup() {\n    *   background(200);\n    *   frameRate(fr); // Attempt to refresh at starting FPS\n    *   clr = color(255, 0, 0);\n    * }\n    *\n    * function draw() {\n    *   background(200);\n    *   rectX = rectX += 1; // Move Rectangle\n    *\n    *   if (rectX >= width) {\n       // If you go off screen.\n    *     if (fr === 30) {\n    *       clr = color(0, 0, 255);\n    *       fr = 10;\n    *       frameRate(fr); // make frameRate 10 FPS\n    *     } else {\n    *       clr = color(255, 0, 0);\n    *       fr = 30;\n    *       frameRate(fr); // make frameRate 30 FPS\n    *     }\n    *     rectX = 0;\n    *   }\n    *   fill(clr);\n    *   rect(rectX, 40, 20, 20);\n    * }\n    * </code></div>\n    *\n    * @alt\n    * blue rect moves left to right, followed by red rect moving faster. Loops.\n    *\n    */\n          /**\n           * @method frameRate\n           * @return {Number}       current frameRate\n           */\n          p5.prototype.frameRate = function(fps) {\n            p5._validateParameters('frameRate', arguments);\n            if (typeof fps !== 'number' || fps < 0) {\n              return this._frameRate;\n            } else {\n              this._setProperty('_targetFrameRate', fps);\n              return this;\n            }\n          };\n          /**\n           * Returns the current framerate.\n           *\n           * @private\n           * @return {Number} current frameRate\n           */\n          p5.prototype.getFrameRate = function() {\n            return this.frameRate();\n          };\n\n          /**\n           * Specifies the number of frames to be displayed every second. For example,\n           * the function call frameRate(30) will attempt to refresh 30 times a second.\n           * If the processor is not fast enough to maintain the specified rate, the\n           * frame rate will not be achieved. Setting the frame rate within <a href=\"#/p5/setup\">setup()</a> is\n           * recommended. The default rate is 60 frames per second.\n           *\n           * Calling <a href=\"#/p5/frameRate\">frameRate()</a> with no arguments returns the current framerate.\n           *\n           * @private\n           * @param {Number} [fps] number of frames to be displayed every second\n           */\n          p5.prototype.setFrameRate = function(fps) {\n            return this.frameRate(fps);\n          };\n\n          /**\n           * Hides the cursor from view.\n           *\n           * @method noCursor\n           * @example\n           * <div><code>\n           * function setup() {\n           *   noCursor();\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   ellipse(mouseX, mouseY, 10, 10);\n           * }\n           * </code></div>\n           *\n           *\n           * @alt\n           * cursor becomes 10x 10 white ellipse the moves with mouse x and y.\n           *\n           */\n          p5.prototype.noCursor = function() {\n            this._curElement.elt.style.cursor = 'none';\n          };\n\n          /**\n           * System variable that stores the width of the screen display according to The\n           * default <a href=\"#/p5/pixelDensity\">pixelDensity</a>. This is used to run a\n           * full-screen program on any display size. To return actual screen size,\n           * multiply this by pixelDensity.\n           *\n           * @property {Number} displayWidth\n           * @readOnly\n           * @example\n           * <div class=\"norender\"><code>\n           * createCanvas(displayWidth, displayHeight);\n           * </code></div>\n           *\n           * @alt\n           * cursor becomes 10x 10 white ellipse the moves with mouse x and y.\n           *\n           */\n          p5.prototype.displayWidth = screen.width;\n\n          /**\n           * System variable that stores the height of the screen display according to The\n           * default <a href=\"#/p5/pixelDensity\">pixelDensity</a>. This is used to run a\n           * full-screen program on any display size. To return actual screen size,\n           * multiply this by pixelDensity.\n           *\n           * @property {Number} displayHeight\n           * @readOnly\n           * @example\n           * <div class=\"norender\"><code>\n           * createCanvas(displayWidth, displayHeight);\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           *\n           */\n          p5.prototype.displayHeight = screen.height;\n\n          /**\n           * System variable that stores the width of the inner window, it maps to\n           * window.innerWidth.\n           *\n           * @property {Number} windowWidth\n           * @readOnly\n           * @example\n           * <div class=\"norender\"><code>\n           * createCanvas(windowWidth, windowHeight);\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           *\n           */\n          p5.prototype.windowWidth = getWindowWidth();\n          /**\n           * System variable that stores the height of the inner window, it maps to\n           * window.innerHeight.\n           *\n           * @property {Number} windowHeight\n           * @readOnly\n           * @example\n           * <div class=\"norender\"><code>\n           * createCanvas(windowWidth, windowHeight);\n           * </code></div>\n           *@alt\n           * no display.\n           *\n           */\n          p5.prototype.windowHeight = getWindowHeight();\n\n          /**\n           * The <a href=\"#/p5/windowResized\">windowResized()</a> function is called once every time the browser window\n           * is resized. This is a good place to resize the canvas or do any other\n           * adjustments to accommodate the new window size.\n           *\n           * @method windowResized\n           * @example\n           * <div class=\"norender\"><code>\n           * function setup() {\n           *   createCanvas(windowWidth, windowHeight);\n           * }\n           *\n           * function draw() {\n           *   background(0, 100, 200);\n           * }\n           *\n           * function windowResized() {\n           *   resizeCanvas(windowWidth, windowHeight);\n           * }\n           * </code></div>\n           * @alt\n           * no display.\n           */\n          p5.prototype._onresize = function(e) {\n            this._setProperty('windowWidth', getWindowWidth());\n            this._setProperty('windowHeight', getWindowHeight());\n            var context = this._isGlobal ? window : this;\n            var executeDefault;\n            if (typeof context.windowResized === 'function') {\n              executeDefault = context.windowResized(e);\n              if (executeDefault !== undefined && !executeDefault) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          function getWindowWidth() {\n            return (\n              window.innerWidth ||\n              (document.documentElement && document.documentElement.clientWidth) ||\n              (document.body && document.body.clientWidth) ||\n              0\n            );\n          }\n\n          function getWindowHeight() {\n            return (\n              window.innerHeight ||\n              (document.documentElement && document.documentElement.clientHeight) ||\n              (document.body && document.body.clientHeight) ||\n              0\n            );\n          }\n\n          /**\n           * System variable that stores the width of the drawing canvas. This value\n           * is set by the first parameter of the <a href=\"#/p5/createCanvas\">createCanvas()</a> function.\n           * For example, the function call createCanvas(320, 240) sets the width\n           * variable to the value 320. The value of width defaults to 100 if\n           * <a href=\"#/p5/createCanvas\">createCanvas()</a> is not used in a program.\n           *\n           * @property {Number} width\n           * @readOnly\n           */\n          p5.prototype.width = 0;\n\n          /**\n           * System variable that stores the height of the drawing canvas. This value\n           * is set by the second parameter of the <a href=\"#/p5/createCanvas\">createCanvas()</a> function. For\n           * example, the function call createCanvas(320, 240) sets the height\n           * variable to the value 240. The value of height defaults to 100 if\n           * <a href=\"#/p5/createCanvas\">createCanvas()</a> is not used in a program.\n           *\n           * @property {Number} height\n           * @readOnly\n           */\n          p5.prototype.height = 0;\n\n          /**\n           * If argument is given, sets the sketch to fullscreen or not based on the\n           * value of the argument. If no argument is given, returns the current\n           * fullscreen state. Note that due to browser restrictions this can only\n           * be called on user input, for example, on mouse press like the example\n           * below.\n           *\n           * @method fullscreen\n           * @param  {Boolean} [val] whether the sketch should be in fullscreen mode\n           * or not\n           * @return {Boolean} current fullscreen state\n           * @example\n           * <div>\n           * <code>\n           * // Clicking in the box toggles fullscreen on and off.\n           * function setup() {\n           *   background(200);\n           * }\n           * function mousePressed() {\n           *   if (mouseX > 0 && mouseX < 100 && mouseY > 0 && mouseY < 100) {\n           *     let fs = fullscreen();\n           *     fullscreen(!fs);\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no display.\n           *\n           */\n          p5.prototype.fullscreen = function(val) {\n            p5._validateParameters('fullscreen', arguments);\n            // no arguments, return fullscreen or not\n            if (typeof val === 'undefined') {\n              return (\n                document.fullscreenElement ||\n                document.webkitFullscreenElement ||\n                document.mozFullScreenElement ||\n                document.msFullscreenElement\n              );\n            } else {\n              // otherwise set to fullscreen or not\n              if (val) {\n                launchFullscreen(document.documentElement);\n              } else {\n                exitFullscreen();\n              }\n            }\n          };\n\n          /**\n           * Sets the pixel scaling for high pixel density displays. By default\n           * pixel density is set to match display density, call pixelDensity(1)\n           * to turn this off. Calling <a href=\"#/p5/pixelDensity\">pixelDensity()</a> with no arguments returns\n           * the current pixel density of the sketch.\n           *\n           * @method pixelDensity\n           * @param  {Number} val whether or how much the sketch should scale\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   pixelDensity(1);\n           *   createCanvas(100, 100);\n           *   background(200);\n           *   ellipse(width / 2, height / 2, 50, 50);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * function setup() {\n           *   pixelDensity(3.0);\n           *   createCanvas(100, 100);\n           *   background(200);\n           *   ellipse(width / 2, height / 2, 50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * fuzzy 50x50 white ellipse with black outline in center of canvas.\n           * sharp 50x50 white ellipse with black outline in center of canvas.\n           */\n          /**\n           * @method pixelDensity\n           * @returns {Number} current pixel density of the sketch\n           */\n          p5.prototype.pixelDensity = function(val) {\n            p5._validateParameters('pixelDensity', arguments);\n            var returnValue;\n            if (typeof val === 'number') {\n              if (val !== this._pixelDensity) {\n                this._pixelDensity = val;\n                this._pixelsDirty = true;\n              }\n              returnValue = this;\n              this.resizeCanvas(this.width, this.height, true); // as a side effect, it will clear the canvas\n            } else {\n              returnValue = this._pixelDensity;\n            }\n            return returnValue;\n          };\n\n          /**\n           * Returns the pixel density of the current display the sketch is running on.\n           *\n           * @method displayDensity\n           * @returns {Number} current pixel density of the display\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   let density = displayDensity();\n           *   pixelDensity(density);\n           *   createCanvas(100, 100);\n           *   background(200);\n           *   ellipse(width / 2, height / 2, 50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 white ellipse with black outline in center of canvas.\n           */\n          p5.prototype.displayDensity = function() {\n            return window.devicePixelRatio;\n          };\n\n          function launchFullscreen(element) {\n            var enabled =\n              document.fullscreenEnabled ||\n              document.webkitFullscreenEnabled ||\n              document.mozFullScreenEnabled ||\n              document.msFullscreenEnabled;\n            if (!enabled) {\n              throw new Error('Fullscreen not enabled in this browser.');\n            }\n            if (element.requestFullscreen) {\n              element.requestFullscreen();\n            } else if (element.mozRequestFullScreen) {\n              element.mozRequestFullScreen();\n            } else if (element.webkitRequestFullscreen) {\n              element.webkitRequestFullscreen();\n            } else if (element.msRequestFullscreen) {\n              element.msRequestFullscreen();\n            }\n          }\n\n          function exitFullscreen() {\n            if (document.exitFullscreen) {\n              document.exitFullscreen();\n            } else if (document.mozCancelFullScreen) {\n              document.mozCancelFullScreen();\n            } else if (document.webkitExitFullscreen) {\n              document.webkitExitFullscreen();\n            } else if (document.msExitFullscreen) {\n              document.msExitFullscreen();\n            }\n          }\n\n          /**\n           * Gets the current URL.\n           * @method getURL\n           * @return {String} url\n           * @example\n           * <div>\n           * <code>\n           * let url;\n           * let x = 100;\n           *\n           * function setup() {\n           *   fill(0);\n           *   noStroke();\n           *   url = getURL();\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   text(url, x, height / 2);\n           *   x--;\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * current url (http://p5js.org/reference/#/p5/getURL) moves right to left.\n           *\n           */\n          p5.prototype.getURL = function() {\n            return location.href;\n          };\n          /**\n           * Gets the current URL path as an array.\n           * @method getURLPath\n           * @return {String[]} path components\n           * @example\n           * <div class='norender'><code>\n           * function setup() {\n           *   let urlPath = getURLPath();\n           *   for (let i = 0; i < urlPath.length; i++) {\n           *     text(urlPath[i], 10, i * 20 + 20);\n           *   }\n           * }\n           * </code></div>\n           *\n           * @alt\n           *no display\n           *\n           */\n          p5.prototype.getURLPath = function() {\n            return location.pathname.split('/').filter(function(v) {\n              return v !== '';\n            });\n          };\n          /**\n           * Gets the current URL params as an Object.\n           * @method getURLParams\n           * @return {Object} URL params\n           * @example\n           * <div class='norender notest'>\n           * <code>\n           * // Example: http://p5js.org?year=2014&month=May&day=15\n           *\n           * function setup() {\n           *   let params = getURLParams();\n           *   text(params.day, 10, 20);\n           *   text(params.month, 10, 40);\n           *   text(params.year, 10, 60);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * no display.\n           *\n           */\n          p5.prototype.getURLParams = function() {\n            var re = /[?&]([^&=]+)(?:[&=])([^&=]+)/gim;\n            var m;\n            var v = {};\n            while ((m = re.exec(location.search)) != null) {\n              if (m.index === re.lastIndex) {\n                re.lastIndex++;\n              }\n              v[m[1]] = m[2];\n            }\n            return v;\n          };\n\n          module.exports = p5;\n        },\n        { './constants': 18, './main': 24 }\n      ],\n      20: [\n        function(_dereq_, module, exports) {\n          /**\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n\n          var p5 = _dereq_('./main');\n          var constants = _dereq_('./constants');\n\n          // p5.js blue, p5.js orange, auto dark green; fallback p5.js darkened magenta\n          // See testColors below for all the color codes and names\n          var typeColors = ['#2D7BB6', '#EE9900', '#4DB200', '#C83C00'];\n\n          if (typeof IS_MINIFIED !== 'undefined') {\n            p5._validateParameters = p5._friendlyFileLoadError = p5._friendlyError = function() {};\n          } else {\n            var doFriendlyWelcome = false; // TEMP until we get it all working LM\n            // for parameter validation\n            var dataDoc = _dereq_('../../docs/reference/data.json');\n            var arrDoc = JSON.parse(JSON.stringify(dataDoc));\n\n            // -- Borrowed from jQuery 1.11.3 --\n            var class2type = {};\n            var toString = class2type.toString;\n            var names = [\n              'Boolean',\n              'Number',\n              'String',\n              'Function',\n              'Array',\n              'Date',\n              'RegExp',\n              'Object',\n              'Error'\n            ];\n\n            for (var n = 0; n < names.length; n++) {\n              class2type['[object ' + names[n] + ']'] = names[n].toLowerCase();\n            }\n            var getType = function getType(obj) {\n              if (obj == null) {\n                return obj + '';\n              }\n              return _typeof(obj) === 'object' || typeof obj === 'function'\n                ? class2type[toString.call(obj)] || 'object'\n                : _typeof(obj);\n            };\n\n            // -- End borrow --\n\n            var friendlyWelcome = function friendlyWelcome() {\n              // p5.js brand - magenta: #ED225D\n              //var astrixBgColor = 'transparent';\n              //var astrixTxtColor = '#ED225D';\n              //var welcomeBgColor = '#ED225D';\n              //var welcomeTextColor = 'white';\n              console.log(\n                '    _ \\n' +\n                  ' /\\\\| |/\\\\ \\n' +\n                  \" \\\\ ` ' /  \\n\" +\n                  ' / , . \\\\  \\n' +\n                  ' \\\\/|_|\\\\/ ' +\n                  '\\n\\n> p5.js says: Welcome! ' +\n                  'This is your friendly debugger. ' +\n                  'To turn me off switch to using “p5.min.js”.'\n              );\n            };\n\n            /**\n             * Prints out a fancy, colorful message to the console log\n             *\n             * @method report\n             * @private\n             * @param  {String}               message the words to be said\n             * @param  {String}               func    the name of the function to link\n             * @param  {Number|String} color   CSS color string or error type\n             *\n             * @return console logs\n             */\n            var report = function report(message, func, color) {\n              if (doFriendlyWelcome) {\n                friendlyWelcome();\n                doFriendlyWelcome = false;\n              }\n              if ('undefined' === getType(color)) {\n                color = '#B40033'; // dark magenta\n              } else if (getType(color) === 'number') {\n                // Type to color\n                color = typeColors[color];\n              }\n              if (func === 'loadX') {\n                console.log('> p5.js says: ' + message);\n              } else if (func.substring(0, 4) === 'load') {\n                console.log(\n                  '> p5.js says: ' +\n                    message +\n                    '[https://github.com/processing/p5.js/wiki/Local-server]'\n                );\n              } else {\n                console.log(\n                  '> p5.js says: ' +\n                    message +\n                    ' [http://p5js.org/reference/#p5/' +\n                    func +\n                    ']'\n                );\n              }\n            };\n\n            var errorCases = {\n              '0': {\n                fileType: 'image',\n                method: 'loadImage',\n                message: ' hosting the image online,'\n              },\n\n              '1': {\n                fileType: 'XML file',\n                method: 'loadXML'\n              },\n\n              '2': {\n                fileType: 'table file',\n                method: 'loadTable'\n              },\n\n              '3': {\n                fileType: 'text file',\n                method: 'loadStrings'\n              },\n\n              '4': {\n                fileType: 'font',\n                method: 'loadFont',\n                message: ' hosting the font online,'\n              },\n\n              '5': {\n                fileType: 'json',\n                method: 'loadJSON'\n              },\n\n              '6': {\n                fileType: 'file',\n                method: 'loadBytes'\n              },\n\n              '7': {\n                method: 'loadX',\n                message:\n                  \"In case your large file isn't fetched successfully,\" +\n                  'we recommend splitting the file into smaller segments and fetching those.'\n              }\n            };\n\n            /**\n             * This is called internally if there is a error during file loading.\n             *\n             * @method _friendlyFileLoadError\n             * @private\n             * @param  {Number} errorType\n             * @param  {String} filePath\n             */\n            p5._friendlyFileLoadError = function(errorType, filePath) {\n              var errorInfo = errorCases[errorType];\n              var message;\n              if (errorType === 7) {\n                message = errorInfo.message;\n              } else {\n                message =\n                  'It looks like there was a problem' +\n                  ' loading your ' +\n                  errorInfo.fileType +\n                  '.' +\n                  ' Try checking if the file path [' +\n                  filePath +\n                  '] is correct,' +\n                  (errorInfo.message || '') +\n                  ' or running a local server.';\n              }\n              report(message, errorInfo.method, 3);\n            };\n\n            /**\n             * This is a generic method that can be called from anywhere in the p5\n             * library to alert users to a common error.\n             *\n             * @method _friendlyError\n             * @private\n             * @param  {Number} message message to be printed\n             * @param  {String} method name of method\n             */\n            p5._friendlyError = function(message, method) {\n              report(message, method);\n            };\n\n            var docCache = {};\n            var builtinTypes = [\n              'null',\n              'number',\n              'string',\n              'boolean',\n              'constant',\n              'function',\n              'any',\n              'integer'\n            ];\n\n            // validateParameters() helper functions:\n            // lookupParamDoc() for querying data.json\n            var lookupParamDoc = function lookupParamDoc(func) {\n              // look for the docs in the `data.json` datastructure\n\n              var ichDot = func.lastIndexOf('.');\n              var funcName = func.substr(ichDot + 1);\n              var funcClass = func.substr(0, ichDot) || 'p5';\n\n              var queryResult;\n              var classitems = arrDoc.classitems;\n              for (var ici = 0; ici < classitems.length; ici++) {\n                var x = classitems[ici];\n                if (x.name === funcName && x.class === funcClass) {\n                  queryResult = x;\n                  break;\n                }\n              }\n\n              // different JSON structure for funct with multi-format\n              var overloads = [];\n              if (queryResult.hasOwnProperty('overloads')) {\n                // add all the overloads\n                for (var i = 0; i < queryResult.overloads.length; i++) {\n                  overloads.push({ formats: queryResult.overloads[i].params });\n                }\n              } else {\n                // no overloads, just add the main method definition\n                overloads.push({ formats: queryResult.params || [] });\n              }\n\n              // parse the parameter types for each overload\n              var mapConstants = {};\n              var maxParams = 0;\n              overloads.forEach(function(overload) {\n                var formats = overload.formats;\n\n                // keep a record of the maximum number of arguments\n                // this method requires.\n                if (maxParams < formats.length) {\n                  maxParams = formats.length;\n                }\n\n                // calculate the minimum number of arguments\n                // this overload requires.\n                var minParams = formats.length;\n                while (minParams > 0 && formats[minParams - 1].optional) {\n                  minParams--;\n                }\n                overload.minParams = minParams;\n\n                // loop through each parameter position, and parse its types\n                formats.forEach(function(format) {\n                  // split this parameter's types\n                  format.types = format.type.split('|').map(function ct(type) {\n                    // array\n                    if (type.substr(type.length - 2, 2) === '[]') {\n                      return {\n                        name: type,\n                        array: ct(type.substr(0, type.length - 2))\n                      };\n                    }\n\n                    var lowerType = type.toLowerCase();\n\n                    // contant\n                    if (lowerType === 'constant') {\n                      var constant;\n                      if (mapConstants.hasOwnProperty(format.name)) {\n                        constant = mapConstants[format.name];\n                      } else {\n                        // parse possible constant values from description\n                        var myRe = /either\\s+(?:[A-Z0-9_]+\\s*,?\\s*(?:or)?\\s*)+/g;\n                        var values = {};\n                        var names = [];\n\n                        constant = mapConstants[format.name] = {\n                          values: values,\n                          names: names\n                        };\n\n                        var myArray = myRe.exec(format.description);\n                        if (func === 'endShape' && format.name === 'mode') {\n                          values[constants.CLOSE] = true;\n                          names.push('CLOSE');\n                        } else {\n                          var match = myArray[0];\n                          var reConst = /[A-Z0-9_]+/g;\n                          var matchConst;\n                          while ((matchConst = reConst.exec(match)) !== null) {\n                            var name = matchConst[0];\n                            if (constants.hasOwnProperty(name)) {\n                              values[constants[name]] = true;\n                              names.push(name);\n                            }\n                          }\n                        }\n                      }\n                      return {\n                        name: type,\n                        builtin: lowerType,\n                        names: constant.names,\n                        values: constant.values\n                      };\n                    }\n\n                    // function\n                    if (lowerType.substr(0, 'function'.length) === 'function') {\n                      lowerType = 'function';\n                    }\n                    // builtin\n                    if (builtinTypes.indexOf(lowerType) >= 0) {\n                      return { name: type, builtin: lowerType };\n                    }\n\n                    // find type's prototype\n                    var t = window;\n                    var typeParts = type.split('.');\n\n                    // special-case 'p5' since it may be non-global\n                    if (typeParts[0] === 'p5') {\n                      t = p5;\n                      typeParts.shift();\n                    }\n\n                    typeParts.forEach(function(p) {\n                      t = t && t[p];\n                    });\n                    if (t) {\n                      return { name: type, prototype: t };\n                    }\n\n                    return { name: type, type: lowerType };\n                  });\n                });\n              });\n              return {\n                overloads: overloads,\n                maxParams: maxParams\n              };\n            };\n\n            var isNumber = function isNumber(param) {\n              switch (_typeof(param)) {\n                case 'number':\n                  return true;\n                case 'string':\n                  return !isNaN(param);\n                default:\n                  return false;\n              }\n            };\n\n            var testParamType = function testParamType(param, type) {\n              var isArray = param instanceof Array;\n              var matches = true;\n              if (type.array && isArray) {\n                for (var i = 0; i < param.length; i++) {\n                  var error = testParamType(param[i], type.array);\n                  if (error) return error / 2; // half error for elements\n                }\n              } else if (type.prototype) {\n                matches = param instanceof type.prototype;\n              } else if (type.builtin) {\n                switch (type.builtin) {\n                  case 'number':\n                    matches = isNumber(param);\n                    break;\n                  case 'integer':\n                    matches = isNumber(param) && Number(param) === Math.floor(param);\n                    break;\n                  case 'boolean':\n                  case 'any':\n                    matches = true;\n                    break;\n                  case 'array':\n                    matches = isArray;\n                    break;\n                  case 'string':\n                    matches = /*typeof param === 'number' ||*/ typeof param === 'string';\n                    break;\n                  case 'constant':\n                    matches = type.values.hasOwnProperty(param);\n                    break;\n                  case 'function':\n                    matches = param instanceof Function;\n                    break;\n                  case 'null':\n                    matches = param === null;\n                    break;\n                }\n              } else {\n                matches = _typeof(param) === type.t;\n              }\n              return matches ? 0 : 1;\n            };\n\n            // testType() for non-object type parameter validation\n            var testParamTypes = function testParamTypes(param, types) {\n              var minScore = 9999;\n              for (var i = 0; minScore > 0 && i < types.length; i++) {\n                var score = testParamType(param, types[i]);\n                if (minScore > score) minScore = score;\n              }\n              return minScore;\n            };\n\n            // generate a score (higher is worse) for applying these args to\n            // this overload.\n            var scoreOverload = function scoreOverload(args, argCount, overload, minScore) {\n              var score = 0;\n              var formats = overload.formats;\n              var minParams = overload.minParams;\n\n              // check for too few/many args\n              // the score is double number of extra/missing args\n              if (argCount < minParams) {\n                score = (minParams - argCount) * 2;\n              } else if (argCount > formats.length) {\n                score = (argCount - formats.length) * 2;\n              }\n\n              // loop through the formats, adding up the error score for each arg.\n              // quit early if the score gets higher than the previous best overload.\n              for (var p = 0; score <= minScore && p < formats.length; p++) {\n                var arg = args[p];\n                var format = formats[p];\n                // '== null' checks for 'null' and typeof 'undefined'\n                if (arg == null) {\n                  // handle non-optional and non-trailing undefined args\n                  if (!format.optional || p < minParams || p < argCount) {\n                    score += 1;\n                  }\n                } else {\n                  score += testParamTypes(arg, format.types);\n                }\n              }\n              return score;\n            };\n\n            // gets a list of errors for this overload\n            var getOverloadErrors = function getOverloadErrors(args, argCount, overload) {\n              var formats = overload.formats;\n              var minParams = overload.minParams;\n\n              // check for too few/many args\n              if (argCount < minParams) {\n                return [\n                  {\n                    type: 'TOO_FEW_ARGUMENTS',\n                    argCount: argCount,\n                    minParams: minParams\n                  }\n                ];\n              } else if (argCount > formats.length) {\n                return [\n                  {\n                    type: 'TOO_MANY_ARGUMENTS',\n                    argCount: argCount,\n                    maxParams: formats.length\n                  }\n                ];\n              }\n\n              var errorArray = [];\n              for (var p = 0; p < formats.length; p++) {\n                var arg = args[p];\n                var format = formats[p];\n                // '== null' checks for 'null' and typeof 'undefined'\n                if (arg == null) {\n                  // handle non-optional and non-trailing undefined args\n                  if (!format.optional || p < minParams || p < argCount) {\n                    errorArray.push({\n                      type: 'EMPTY_VAR',\n                      position: p,\n                      format: format\n                    });\n                  }\n                } else if (testParamTypes(arg, format.types) > 0) {\n                  errorArray.push({\n                    type: 'WRONG_TYPE',\n                    position: p,\n                    format: format,\n                    arg: arg\n                  });\n                }\n              }\n\n              return errorArray;\n            };\n\n            // a custom error type, used by the mocha\n            // tests when expecting validation errors\n            p5.ValidationError = (function(name) {\n              var err = function err(message, func) {\n                this.message = message;\n                this.func = func;\n                if ('captureStackTrace' in Error) Error.captureStackTrace(this, err);\n                else this.stack = new Error().stack;\n              };\n              err.prototype = Object.create(Error.prototype);\n              err.prototype.name = name;\n              err.prototype.constructor = err;\n              return err;\n            })('ValidationError');\n\n            // function for generating console.log() msg\n            p5._friendlyParamError = function(errorObj, func) {\n              var message;\n\n              function formatType() {\n                var format = errorObj.format;\n                return format.types\n                  .map(function(type) {\n                    return type.names ? type.names.join('|') : type.name;\n                  })\n                  .join('|');\n              }\n\n              switch (errorObj.type) {\n                case 'EMPTY_VAR':\n                  message =\n                    func +\n                    '() was expecting ' +\n                    formatType() +\n                    ' for parameter #' +\n                    errorObj.position +\n                    ' (zero-based index), received an empty variable instead.' +\n                    ' If not intentional, this is often a problem with scope:' +\n                    ' [https://p5js.org/examples/data-variable-scope.html]';\n                  break;\n                case 'WRONG_TYPE':\n                  var arg = errorObj.arg;\n                  var argType =\n                    arg instanceof Array\n                      ? 'array'\n                      : arg === null ? 'null' : arg.name || _typeof(arg);\n                  message =\n                    func +\n                    '() was expecting ' +\n                    formatType() +\n                    ' for parameter #' +\n                    errorObj.position +\n                    ' (zero-based index), received ' +\n                    argType +\n                    ' instead';\n                  break;\n                case 'TOO_FEW_ARGUMENTS':\n                  message =\n                    func +\n                    '() was expecting at least ' +\n                    errorObj.minParams +\n                    ' arguments, but received only ' +\n                    errorObj.argCount;\n                  break;\n                case 'TOO_MANY_ARGUMENTS':\n                  message =\n                    func +\n                    '() was expecting no more than ' +\n                    errorObj.maxParams +\n                    ' arguments, but received ' +\n                    errorObj.argCount;\n                  break;\n              }\n\n              if (message) {\n                if (p5._throwValidationErrors) {\n                  throw new p5.ValidationError(message);\n                }\n\n                try {\n                  var re = /Function\\.validateParameters.*[\\r\\n].*[\\r\\n].*\\(([^)]*)/;\n                  var location = re.exec(new Error().stack)[1];\n                  if (location) {\n                    message += ' at ' + location;\n                  }\n                } catch (err) {}\n\n                report(message + '.', func, 3);\n              }\n            };\n\n            /**\n             * Validates parameters\n             * param  {String}               func    the name of the function\n             * param  {Array}                args    user input arguments\n             *\n             * example:\n             *  var a;\n             *  ellipse(10,10,a,5);\n             * console ouput:\n             *  \"It looks like ellipse received an empty variable in spot #2.\"\n             *\n             * example:\n             *  ellipse(10,\"foo\",5,5);\n             * console output:\n             *  \"ellipse was expecting a number for parameter #1,\n             *           received \"foo\" instead.\"\n             */\n            p5._validateParameters = function validateParameters(func, args) {\n              if (p5.disableFriendlyErrors) {\n                return; // skip FES\n              }\n\n              // lookup the docs in the 'data.json' file\n              var docs = docCache[func] || (docCache[func] = lookupParamDoc(func));\n              var overloads = docs.overloads;\n\n              // ignore any trailing `undefined` arguments\n              var argCount = args.length;\n              // '== null' checks for 'null' and typeof 'undefined'\n              while (argCount > 0 && args[argCount - 1] == null) {\n                argCount--;\n              }\n\n              // find the overload with the best score\n              var minScore = 99999;\n              var minOverload;\n              for (var i = 0; i < overloads.length; i++) {\n                var score = scoreOverload(args, argCount, overloads[i], minScore);\n                if (score === 0) {\n                  return; // done!\n                } else if (minScore > score) {\n                  // this score is better that what we have so far...\n                  minScore = score;\n                  minOverload = i;\n                }\n              }\n\n              // this should _always_ be true here...\n              if (minScore > 0) {\n                // get the errors for the best overload\n                var errorArray = getOverloadErrors(args, argCount, overloads[minOverload]);\n\n                // generate err msg\n                for (var n = 0; n < errorArray.length; n++) {\n                  p5._friendlyParamError(errorArray[n], func);\n                }\n              }\n            };\n\n            /**\n             * Prints out all the colors in the color pallete with white text.\n             * For color blindness testing.\n             */\n            /* function testColors() {\n           var str = 'A box of biscuits, a box of mixed biscuits and a biscuit mixer';\n           report(str, 'print', '#ED225D'); // p5.js magenta\n           report(str, 'print', '#2D7BB6'); // p5.js blue\n           report(str, 'print', '#EE9900'); // p5.js orange\n           report(str, 'print', '#A67F59'); // p5.js light brown\n           report(str, 'print', '#704F21'); // p5.js gold\n           report(str, 'print', '#1CC581'); // auto cyan\n           report(str, 'print', '#FF6625'); // auto orange\n           report(str, 'print', '#79EB22'); // auto green\n           report(str, 'print', '#B40033'); // p5.js darkened magenta\n           report(str, 'print', '#084B7F'); // p5.js darkened blue\n           report(str, 'print', '#945F00'); // p5.js darkened orange\n           report(str, 'print', '#6B441D'); // p5.js darkened brown\n           report(str, 'print', '#2E1B00'); // p5.js darkened gold\n           report(str, 'print', '#008851'); // auto dark cyan\n           report(str, 'print', '#C83C00'); // auto dark orange\n           report(str, 'print', '#4DB200'); // auto dark green\n         } */\n\n            p5.prototype._validateParameters = p5.validateParameters;\n          }\n\n          // This is a lazily-defined list of p5 symbols that may be\n          // misused by beginners at top-level code, outside of setup/draw. We'd like\n          // to detect these errors and help the user by suggesting they move them\n          // into setup/draw.\n          //\n          // For more details, see https://github.com/processing/p5.js/issues/1121.\n          var misusedAtTopLevelCode = null;\n          var FAQ_URL =\n            'https://github.com/processing/p5.js/wiki/p5.js-overview' +\n            '#why-cant-i-assign-variables-using-p5-functions-and-' +\n            'variables-before-setup';\n\n          var defineMisusedAtTopLevelCode = function defineMisusedAtTopLevelCode() {\n            var uniqueNamesFound = {};\n\n            var getSymbols = function getSymbols(obj) {\n              return Object.getOwnPropertyNames(obj)\n                .filter(function(name) {\n                  if (name[0] === '_') {\n                    return false;\n                  }\n                  if (name in uniqueNamesFound) {\n                    return false;\n                  }\n\n                  uniqueNamesFound[name] = true;\n\n                  return true;\n                })\n                .map(function(name) {\n                  var type;\n\n                  if (typeof obj[name] === 'function') {\n                    type = 'function';\n                  } else if (name === name.toUpperCase()) {\n                    type = 'constant';\n                  } else {\n                    type = 'variable';\n                  }\n\n                  return { name: name, type: type };\n                });\n            };\n\n            misusedAtTopLevelCode = [].concat(\n              getSymbols(p5.prototype),\n              // At present, p5 only adds its constants to p5.prototype during\n              // construction, which may not have happened at the time a\n              // ReferenceError is thrown, so we'll manually add them to our list.\n              getSymbols(_dereq_('./constants'))\n            );\n\n            // This will ultimately ensure that we report the most specific error\n            // possible to the user, e.g. advising them about HALF_PI instead of PI\n            // when their code misuses the former.\n            misusedAtTopLevelCode.sort(function(a, b) {\n              return b.name.length - a.name.length;\n            });\n          };\n\n          var helpForMisusedAtTopLevelCode = function helpForMisusedAtTopLevelCode(e, log) {\n            if (!log) {\n              log = console.log.bind(console);\n            }\n\n            if (!misusedAtTopLevelCode) {\n              defineMisusedAtTopLevelCode();\n            }\n\n            // If we find that we're logging lots of false positives, we can\n            // uncomment the following code to avoid displaying anything if the\n            // user's code isn't likely to be using p5's global mode. (Note that\n            // setup/draw are more likely to be defined due to JS function hoisting.)\n            //\n            //if (!('setup' in window || 'draw' in window)) {\n            //  return;\n            //}\n\n            misusedAtTopLevelCode.some(function(symbol) {\n              // Note that while just checking for the occurrence of the\n              // symbol name in the error message could result in false positives,\n              // a more rigorous test is difficult because different browsers\n              // log different messages, and the format of those messages may\n              // change over time.\n              //\n              // For example, if the user uses 'PI' in their code, it may result\n              // in any one of the following messages:\n              //\n              //   * 'PI' is undefined                           (Microsoft Edge)\n              //   * ReferenceError: PI is undefined             (Firefox)\n              //   * Uncaught ReferenceError: PI is not defined  (Chrome)\n\n              if (e.message && e.message.match('\\\\W?' + symbol.name + '\\\\W') !== null) {\n                log(\n                  \"Did you just try to use p5.js's \" +\n                    symbol.name +\n                    (symbol.type === 'function' ? '() ' : ' ') +\n                    symbol.type +\n                    '? If so, you may want to ' +\n                    \"move it into your sketch's setup() function.\\n\\n\" +\n                    'For more details, see: ' +\n                    FAQ_URL\n                );\n\n                return true;\n              }\n            });\n          };\n\n          // Exposing this primarily for unit testing.\n          p5.prototype._helpForMisusedAtTopLevelCode = helpForMisusedAtTopLevelCode;\n\n          if (document.readyState !== 'complete') {\n            window.addEventListener('error', helpForMisusedAtTopLevelCode, false);\n\n            // Our job is only to catch ReferenceErrors that are thrown when\n            // global (non-instance mode) p5 APIs are used at the top-level\n            // scope of a file, so we'll unbind our error listener now to make\n            // sure we don't log false positives later.\n            window.addEventListener('load', function() {\n              window.removeEventListener('error', helpForMisusedAtTopLevelCode, false);\n            });\n          }\n\n          module.exports = p5;\n        },\n        { '../../docs/reference/data.json': 1, './constants': 18, './main': 24 }\n      ],\n      21: [\n        function(_dereq_, module, exports) {\n          /**\n           * @requires constants\n           */\n\n          'use strict';\n\n          var constants = _dereq_('./constants');\n\n          module.exports = {\n            modeAdjust: function modeAdjust(a, b, c, d, mode) {\n              if (mode === constants.CORNER) {\n                return { x: a, y: b, w: c, h: d };\n              } else if (mode === constants.CORNERS) {\n                return { x: a, y: b, w: c - a, h: d - b };\n              } else if (mode === constants.RADIUS) {\n                return { x: a - c, y: b - d, w: 2 * c, h: 2 * d };\n              } else if (mode === constants.CENTER) {\n                return { x: a - c * 0.5, y: b - d * 0.5, w: c, h: d };\n              }\n            }\n          };\n        },\n        { './constants': 18 }\n      ],\n      22: [\n        function(_dereq_, module, exports) {\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          /**\n           * _globalInit\n           *\n           * TODO: ???\n           * if sketch is on window\n           * assume \"global\" mode\n           * and instantiate p5 automatically\n           * otherwise do nothing\n           *\n           * @private\n           * @return {Undefined}\n           */\n          var _globalInit = function _globalInit() {\n            if (!window.mocha) {\n              // If there is a setup or draw function on the window\n              // then instantiate p5 in \"global\" mode\n              if (\n                ((window.setup && typeof window.setup === 'function') ||\n                  (window.draw && typeof window.draw === 'function')) &&\n                !p5.instance\n              ) {\n                new p5();\n              }\n            }\n          };\n\n          // TODO: ???\n\n          // if the page is ready, initialize p5 immediately\n          if (document.readyState === 'complete') {\n            _globalInit();\n            // if the page is still loading, add an event listener\n            // and initialize p5 as soon as it finishes loading\n          } else {\n            window.addEventListener('load', _globalInit, false);\n          }\n        },\n        { '../core/main': 24 }\n      ],\n      23: [\n        function(_dereq_, module, exports) {\n          /**\n           * @for p5\n           * @requires core\n           * These are functions that are part of the Processing API but are not part of\n           * the p5.js API. In some cases they have a new name, in others, they are\n           * removed completely. Not all unsupported Processing functions are listed here\n           * but we try to include ones that a user coming from Processing might likely\n           * call.\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('./main');\n\n          p5.prototype.pushStyle = function() {\n            throw new Error('pushStyle() not used, see push()');\n          };\n\n          p5.prototype.popStyle = function() {\n            throw new Error('popStyle() not used, see pop()');\n          };\n\n          p5.prototype.popMatrix = function() {\n            throw new Error('popMatrix() not used, see pop()');\n          };\n\n          p5.prototype.printMatrix = function() {\n            throw new Error(\n              'printMatrix() is not implemented in p5.js, ' +\n                'refer to [https://simonsarris.com/a-transformation-class-for-canvas-to-keep-track-of-the-transformation-matrix/] ' +\n                'to add your own implementation.'\n            );\n          };\n\n          p5.prototype.pushMatrix = function() {\n            throw new Error('pushMatrix() not used, see push()');\n          };\n\n          module.exports = p5;\n        },\n        { './main': 24 }\n      ],\n      24: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Structure\n           * @submodule Structure\n           * @for p5\n           * @requires constants\n           */\n\n          'use strict';\n\n          _dereq_('./shim');\n\n          // Core needs the PVariables object\n          var constants = _dereq_('./constants');\n\n          /**\n           * This is the p5 instance constructor.\n           *\n           * A p5 instance holds all the properties and methods related to\n           * a p5 sketch.  It expects an incoming sketch closure and it can also\n           * take an optional node parameter for attaching the generated p5 canvas\n           * to a node.  The sketch closure takes the newly created p5 instance as\n           * its sole argument and may optionally set <a href=\"#/p5/preload\">preload()</a>, <a href=\"#/p5/setup\">setup()</a>, and/or\n           * <a href=\"#/p5/draw\">draw()</a> properties on it for running a sketch.\n           *\n           * A p5 sketch can run in \"global\" or \"instance\" mode:\n           * \"global\"   - all properties and methods are attached to the window\n           * \"instance\" - all properties and methods are bound to this p5 object\n           *\n           * @class p5\n           * @constructor\n           * @param  {function}           sketch a closure that can set optional <a href=\"#/p5/preload\">preload()</a>,\n           *                              <a href=\"#/p5/setup\">setup()</a>, and/or <a href=\"#/p5/draw\">draw()</a> properties on the\n           *                              given p5 instance\n           * @param  {HTMLElement}        [node] element to attach canvas to\n           * @return {p5}                 a p5 instance\n           */\n          var p5 = function p5(sketch, node, sync) {\n            //////////////////////////////////////////////\n            // PUBLIC p5 PROPERTIES AND METHODS\n            //////////////////////////////////////////////\n\n            /**\n             * Called directly before <a href=\"#/p5/setup\">setup()</a>, the <a href=\"#/p5/preload\">preload()</a> function is used to handle\n             * asynchronous loading of external files in a blocking way. If a preload\n             * function is defined, <a href=\"#/p5/setup\">setup()</a> will wait until any load calls within have\n             * finished. Nothing besides load calls (<a href=\"#/p5/loadImage\">loadImage</a>, <a href=\"#/p5/loadJSON\">loadJSON</a>, <a href=\"#/p5/loadFont\">loadFont</a>,\n             * <a href=\"#/p5/loadStrings\">loadStrings</a>, etc.) should be inside the preload function. If asynchronous\n             * loading is preferred, the load methods can instead be called in <a href=\"#/p5/setup\">setup()</a>\n             * or anywhere else with the use of a callback parameter.\n             * <br><br>\n             * By default the text \"loading...\" will be displayed. To make your own\n             * loading page, include an HTML element with id \"p5_loading\" in your\n             * page. More information <a href=\"http://bit.ly/2kQ6Nio\">here</a>.\n             *\n             * @method preload\n             * @example\n             * <div><code>\n             * let img;\n             * let c;\n             * function preload() {\n             *   // preload() runs once\n             *   img = loadImage('assets/laDefense.jpg');\n             * }\n             *\n             * function setup() {\n             *   // setup() waits until preload() is done\n             *   img.loadPixels();\n             *   // get color of middle pixel\n             *   c = img.get(img.width / 2, img.height / 2);\n             * }\n             *\n             * function draw() {\n             *   background(c);\n             *   image(img, 25, 25, 50, 50);\n             * }\n             * </code></div>\n             *\n             * @alt\n             * nothing displayed\n             *\n             */\n\n            /**\n             * The <a href=\"#/p5/setup\">setup()</a> function is called once when the program starts. It's used to\n             * define initial environment properties such as screen size and background\n             * color and to load media such as images and fonts as the program starts.\n             * There can only be one <a href=\"#/p5/setup\">setup()</a> function for each program and it shouldn't\n             * be called again after its initial execution.\n             * <br><br>\n             * Note: Variables declared within <a href=\"#/p5/setup\">setup()</a> are not accessible within other\n             * functions, including <a href=\"#/p5/draw\">draw()</a>.\n             *\n             * @method setup\n             * @example\n             * <div><code>\n             * let a = 0;\n             *\n             * function setup() {\n             *   background(0);\n             *   noStroke();\n             *   fill(102);\n             * }\n             *\n             * function draw() {\n             *   rect(a++ % width, 10, 2, 80);\n             * }\n             * </code></div>\n             *\n             * @alt\n             * nothing displayed\n             *\n             */\n\n            /**\n             * Called directly after <a href=\"#/p5/setup\">setup()</a>, the <a href=\"#/p5/draw\">draw()</a> function continuously executes\n             * the lines of code contained inside its block until the program is stopped\n             * or <a href=\"#/p5/noLoop\">noLoop()</a> is called. Note if <a href=\"#/p5/noLoop\">noLoop()</a> is called in <a href=\"#/p5/setup\">setup()</a>, <a href=\"#/p5/draw\">draw()</a> will\n             * still be executed once before stopping. <a href=\"#/p5/draw\">draw()</a> is called automatically and\n             * should never be called explicitly.\n             * <br><br>\n             * It should always be controlled with <a href=\"#/p5/noLoop\">noLoop()</a>, <a href=\"#/p5/redraw\">redraw()</a> and <a href=\"#/p5/loop\">loop()</a>. After\n             * <a href=\"#/p5/noLoop\">noLoop()</a> stops the code in <a href=\"#/p5/draw\">draw()</a> from executing, <a href=\"#/p5/redraw\">redraw()</a> causes the\n             * code inside <a href=\"#/p5/draw\">draw()</a> to execute once, and <a href=\"#/p5/loop\">loop()</a> will cause the code\n             * inside <a href=\"#/p5/draw\">draw()</a> to resume executing continuously.\n             * <br><br>\n             * The number of times <a href=\"#/p5/draw\">draw()</a> executes in each second may be controlled with\n             * the <a href=\"#/p5/frameRate\">frameRate()</a> function.\n             * <br><br>\n             * There can only be one <a href=\"#/p5/draw\">draw()</a> function for each sketch, and <a href=\"#/p5/draw\">draw()</a> must\n             * exist if you want the code to run continuously, or to process events such\n             * as <a href=\"#/p5/mousePressed\">mousePressed()</a>. Sometimes, you might have an empty call to <a href=\"#/p5/draw\">draw()</a> in\n             * your program, as shown in the above example.\n             * <br><br>\n             * It is important to note that the drawing coordinate system will be reset\n             * at the beginning of each <a href=\"#/p5/draw\">draw()</a> call. If any transformations are performed\n             * within <a href=\"#/p5/draw\">draw()</a> (ex: scale, rotate, translate), their effects will be\n             * undone at the beginning of <a href=\"#/p5/draw\">draw()</a>, so transformations will not accumulate\n             * over time. On the other hand, styling applied (ex: fill, stroke, etc) will\n             * remain in effect.\n             *\n             * @method draw\n             * @example\n             * <div><code>\n             * let yPos = 0;\n             * function setup() {\n             *   // setup() runs once\n             *   frameRate(30);\n             * }\n             * function draw() {\n             *   // draw() loops forever, until stopped\n             *   background(204);\n             *   yPos = yPos - 1;\n             *   if (yPos < 0) {\n             *     yPos = height;\n             *   }\n             *   line(0, yPos, width, yPos);\n             * }\n             * </code></div>\n             *\n             * @alt\n             * nothing displayed\n             *\n             */\n\n            //////////////////////////////////////////////\n            // PRIVATE p5 PROPERTIES AND METHODS\n            //////////////////////////////////////////////\n\n            this._setupDone = false;\n            // for handling hidpi\n            this._pixelDensity = Math.ceil(window.devicePixelRatio) || 1;\n            this._userNode = node;\n            this._curElement = null;\n            this._elements = [];\n            this._glAttributes = null;\n            this._requestAnimId = 0;\n            this._preloadCount = 0;\n            this._isGlobal = false;\n            this._loop = true;\n            this._initializeInstanceVariables();\n            this._defaultCanvasSize = {\n              width: 100,\n              height: 100\n            };\n\n            this._events = {\n              // keep track of user-events for unregistering later\n              mousemove: null,\n              mousedown: null,\n              mouseup: null,\n              dragend: null,\n              dragover: null,\n              click: null,\n              dblclick: null,\n              mouseover: null,\n              mouseout: null,\n              keydown: null,\n              keyup: null,\n              keypress: null,\n              touchstart: null,\n              touchmove: null,\n              touchend: null,\n              resize: null,\n              blur: null\n            };\n\n            this._events.wheel = null;\n            this._loadingScreenId = 'p5_loading';\n\n            // Allows methods to be registered on an instance that\n            // are instance-specific.\n            this._registeredMethods = {};\n            var methods = Object.getOwnPropertyNames(p5.prototype._registeredMethods);\n            for (var i = 0; i < methods.length; i++) {\n              var prop = methods[i];\n              this._registeredMethods[prop] = p5.prototype._registeredMethods[prop].slice();\n            }\n\n            if (window.DeviceOrientationEvent) {\n              this._events.deviceorientation = null;\n            }\n            if (window.DeviceMotionEvent && !window._isNodeWebkit) {\n              this._events.devicemotion = null;\n            }\n\n            this._start = function() {\n              // Find node if id given\n              if (this._userNode) {\n                if (typeof this._userNode === 'string') {\n                  this._userNode = document.getElementById(this._userNode);\n                }\n              }\n\n              var context = this._isGlobal ? window : this;\n              var userPreload = context.preload;\n              if (userPreload) {\n                // Setup loading screen\n                // Set loading screen into dom if not present\n                // Otherwise displays and removes user provided loading screen\n                var loadingScreen = document.getElementById(this._loadingScreenId);\n                if (!loadingScreen) {\n                  loadingScreen = document.createElement('div');\n                  loadingScreen.innerHTML = 'Loading...';\n                  loadingScreen.style.position = 'absolute';\n                  loadingScreen.id = this._loadingScreenId;\n                  var node = this._userNode || document.body;\n                  node.appendChild(loadingScreen);\n                }\n                var methods = this._preloadMethods;\n                for (var method in methods) {\n                  // default to p5 if no object defined\n                  methods[method] = methods[method] || p5;\n                  var obj = methods[method];\n                  //it's p5, check if it's global or instance\n                  if (obj === p5.prototype || obj === p5) {\n                    if (this._isGlobal) {\n                      window[method] = this._wrapPreload(this, method);\n                    }\n                    obj = this;\n                  }\n                  this._registeredPreloadMethods[method] = obj[method];\n                  obj[method] = this._wrapPreload(obj, method);\n                }\n\n                userPreload();\n                this._runIfPreloadsAreDone();\n              } else {\n                this._setup();\n                this._draw();\n              }\n            }.bind(this);\n\n            this._runIfPreloadsAreDone = function() {\n              var context = this._isGlobal ? window : this;\n              if (context._preloadCount === 0) {\n                var loadingScreen = document.getElementById(context._loadingScreenId);\n                if (loadingScreen) {\n                  loadingScreen.parentNode.removeChild(loadingScreen);\n                }\n                context._setup();\n                context._draw();\n              }\n            };\n\n            this._decrementPreload = function() {\n              var context = this._isGlobal ? window : this;\n              if (typeof context.preload === 'function') {\n                context._setProperty('_preloadCount', context._preloadCount - 1);\n                context._runIfPreloadsAreDone();\n              }\n            };\n\n            this._wrapPreload = function(obj, fnName) {\n              return function() {\n                //increment counter\n                this._incrementPreload();\n                //call original function\n                return this._registeredPreloadMethods[fnName].apply(obj, arguments);\n              }.bind(this);\n            };\n\n            this._incrementPreload = function() {\n              var context = this._isGlobal ? window : this;\n              context._setProperty('_preloadCount', context._preloadCount + 1);\n            };\n\n            this._setup = function() {\n              // Always create a default canvas.\n              // Later on if the user calls createCanvas, this default one\n              // will be replaced\n              this.createCanvas(\n                this._defaultCanvasSize.width,\n                this._defaultCanvasSize.height,\n                'p2d'\n              );\n\n              // return preload functions to their normal vals if switched by preload\n              var context = this._isGlobal ? window : this;\n              if (typeof context.preload === 'function') {\n                for (var f in this._preloadMethods) {\n                  context[f] = this._preloadMethods[f][f];\n                  if (context[f] && this) {\n                    context[f] = context[f].bind(this);\n                  }\n                }\n              }\n\n              // Short-circuit on this, in case someone used the library in \"global\"\n              // mode earlier\n              if (typeof context.setup === 'function') {\n                context.setup();\n              }\n\n              // unhide any hidden canvases that were created\n              var canvases = document.getElementsByTagName('canvas');\n              for (var i = 0; i < canvases.length; i++) {\n                var k = canvases[i];\n                if (k.dataset.hidden === 'true') {\n                  k.style.visibility = '';\n                  delete k.dataset.hidden;\n                }\n              }\n              this._setupDone = true;\n            }.bind(this);\n\n            this._draw = function() {\n              var now = window.performance.now();\n              var time_since_last = now - this._lastFrameTime;\n              var target_time_between_frames = 1000 / this._targetFrameRate;\n\n              // only draw if we really need to; don't overextend the browser.\n              // draw if we're within 5ms of when our next frame should paint\n              // (this will prevent us from giving up opportunities to draw\n              // again when it's really about time for us to do so). fixes an\n              // issue where the frameRate is too low if our refresh loop isn't\n              // in sync with the browser. note that we have to draw once even\n              // if looping is off, so we bypass the time delay if that\n              // is the case.\n              var epsilon = 5;\n              if (!this._loop || time_since_last >= target_time_between_frames - epsilon) {\n                //mandatory update values(matrixs and stack)\n\n                this.redraw();\n                this._frameRate = 1000.0 / (now - this._lastFrameTime);\n                this.deltaTime = now - this._lastFrameTime;\n                this._setProperty('deltaTime', this.deltaTime);\n                this._lastFrameTime = now;\n\n                // If the user is actually using mouse module, then update\n                // coordinates, otherwise skip. We can test this by simply\n                // checking if any of the mouse functions are available or not.\n                // NOTE : This reflects only in complete build or modular build.\n                if (typeof this._updateMouseCoords !== 'undefined') {\n                  this._updateMouseCoords();\n                }\n              }\n\n              // get notified the next time the browser gives us\n              // an opportunity to draw.\n              if (this._loop) {\n                this._requestAnimId = window.requestAnimationFrame(this._draw);\n              }\n            }.bind(this);\n\n            this._setProperty = function(prop, value) {\n              this[prop] = value;\n              if (this._isGlobal) {\n                window[prop] = value;\n              }\n            }.bind(this);\n\n            /**\n             * Removes the entire p5 sketch. This will remove the canvas and any\n             * elements created by p5.js. It will also stop the draw loop and unbind\n             * any properties or methods from the window global scope. It will\n             * leave a variable p5 in case you wanted to create a new p5 sketch.\n             * If you like, you can set p5 = null to erase it. While all functions and\n             * variables and objects created by the p5 library will be removed, any\n             * other global variables created by your code will remain.\n             *\n             * @method remove\n             * @example\n             * <div class='norender'><code>\n             * function draw() {\n             *   ellipse(50, 50, 10, 10);\n             * }\n             *\n             * function mousePressed() {\n             *   remove(); // remove whole sketch on mouse press\n             * }\n             * </code></div>\n             *\n             * @alt\n             * nothing displayed\n             *\n             */\n            this.remove = function() {\n              var loadingScreen = document.getElementById(this._loadingScreenId);\n              if (loadingScreen) {\n                loadingScreen.parentNode.removeChild(loadingScreen);\n                // Add 1 to preload counter to prevent the sketch ever executing setup()\n                this._incrementPreload();\n              }\n              if (this._curElement) {\n                // stop draw\n                this._loop = false;\n                if (this._requestAnimId) {\n                  window.cancelAnimationFrame(this._requestAnimId);\n                }\n\n                // unregister events sketch-wide\n                for (var ev in this._events) {\n                  window.removeEventListener(ev, this._events[ev]);\n                }\n\n                // remove DOM elements created by p5, and listeners\n                for (var i = 0; i < this._elements.length; i++) {\n                  var e = this._elements[i];\n                  if (e.elt.parentNode) {\n                    e.elt.parentNode.removeChild(e.elt);\n                  }\n                  for (var elt_ev in e._events) {\n                    e.elt.removeEventListener(elt_ev, e._events[elt_ev]);\n                  }\n                }\n\n                // call any registered remove functions\n                var self = this;\n                this._registeredMethods.remove.forEach(function(f) {\n                  if (typeof f !== 'undefined') {\n                    f.call(self);\n                  }\n                });\n              }\n              // remove window bound properties and methods\n              if (this._isGlobal) {\n                for (var p in p5.prototype) {\n                  try {\n                    delete window[p];\n                  } catch (x) {\n                    window[p] = undefined;\n                  }\n                }\n                for (var p2 in this) {\n                  if (this.hasOwnProperty(p2)) {\n                    try {\n                      delete window[p2];\n                    } catch (x) {\n                      window[p2] = undefined;\n                    }\n                  }\n                }\n                p5.instance = null;\n              }\n            }.bind(this);\n\n            // call any registered init functions\n            this._registeredMethods.init.forEach(function(f) {\n              if (typeof f !== 'undefined') {\n                f.call(this);\n              }\n            }, this);\n\n            var friendlyBindGlobal = this._createFriendlyGlobalFunctionBinder();\n\n            // If the user has created a global setup or draw function,\n            // assume \"global\" mode and make everything global (i.e. on the window)\n            if (!sketch) {\n              this._isGlobal = true;\n              p5.instance = this;\n              // Loop through methods on the prototype and attach them to the window\n              for (var p in p5.prototype) {\n                if (typeof p5.prototype[p] === 'function') {\n                  var ev = p.substring(2);\n                  if (!this._events.hasOwnProperty(ev)) {\n                    if (Math.hasOwnProperty(p) && Math[p] === p5.prototype[p]) {\n                      // Multiple p5 methods are just native Math functions. These can be\n                      // called without any binding.\n                      friendlyBindGlobal(p, p5.prototype[p]);\n                    } else {\n                      friendlyBindGlobal(p, p5.prototype[p].bind(this));\n                    }\n                  }\n                } else {\n                  friendlyBindGlobal(p, p5.prototype[p]);\n                }\n              }\n              // Attach its properties to the window\n              for (var p2 in this) {\n                if (this.hasOwnProperty(p2)) {\n                  friendlyBindGlobal(p2, this[p2]);\n                }\n              }\n            } else {\n              // Else, the user has passed in a sketch closure that may set\n              // user-provided 'setup', 'draw', etc. properties on this instance of p5\n              sketch(this);\n            }\n\n            // Bind events to window (not using container div bc key events don't work)\n\n            for (var e in this._events) {\n              var f = this['_on' + e];\n              if (f) {\n                var m = f.bind(this);\n                window.addEventListener(e, m, { passive: false });\n                this._events[e] = m;\n              }\n            }\n\n            var focusHandler = function() {\n              this._setProperty('focused', true);\n            }.bind(this);\n            var blurHandler = function() {\n              this._setProperty('focused', false);\n            }.bind(this);\n            window.addEventListener('focus', focusHandler);\n            window.addEventListener('blur', blurHandler);\n            this.registerMethod('remove', function() {\n              window.removeEventListener('focus', focusHandler);\n              window.removeEventListener('blur', blurHandler);\n            });\n\n            if (document.readyState === 'complete') {\n              this._start();\n            } else {\n              window.addEventListener('load', this._start.bind(this), false);\n            }\n          };\n\n          p5.prototype._initializeInstanceVariables = function() {\n            this._styles = [];\n\n            this._bezierDetail = 20;\n            this._curveDetail = 20;\n\n            this._colorMode = constants.RGB;\n            this._colorMaxes = {\n              rgb: [255, 255, 255, 255],\n              hsb: [360, 100, 100, 1],\n              hsl: [360, 100, 100, 1]\n            };\n\n            this._pixelsDirty = true;\n\n            this._downKeys = {}; //Holds the key codes of currently pressed keys\n          };\n\n          // This is a pointer to our global mode p5 instance, if we're in\n          // global mode.\n          p5.instance = null;\n\n          /**\n           * Allows for the friendly error system (FES) to be turned off when creating a sketch,\n           * which can give a significant boost to performance when needed.\n           * See <a href='https://github.com/processing/p5.js/wiki/Optimizing-p5.js-Code-for-Performance#disable-the-friendly-error-system-fes'>\n           * disabling the friendly error system</a>.\n           *\n           * @property {Boolean} disableFriendlyErrors\n           * @example\n           * <div class=\"norender notest\"><code>\n           * p5.disableFriendlyErrors = true;\n           *\n           * function setup() {\n           *   createCanvas(100, 50);\n           * }\n           * </code></div>\n           */\n          p5.disableFriendlyErrors = false;\n\n          // attach constants to p5 prototype\n          for (var k in constants) {\n            p5.prototype[k] = constants[k];\n          }\n\n          // functions that cause preload to wait\n          // more can be added by using registerPreloadMethod(func)\n          p5.prototype._preloadMethods = {\n            loadJSON: p5.prototype,\n            loadImage: p5.prototype,\n            loadStrings: p5.prototype,\n            loadXML: p5.prototype,\n            loadBytes: p5.prototype,\n            loadTable: p5.prototype,\n            loadFont: p5.prototype,\n            loadModel: p5.prototype,\n            loadShader: p5.prototype\n          };\n\n          p5.prototype._registeredMethods = { init: [], pre: [], post: [], remove: [] };\n\n          p5.prototype._registeredPreloadMethods = {};\n\n          p5.prototype.registerPreloadMethod = function(fnString, obj) {\n            // obj = obj || p5.prototype;\n            if (!p5.prototype._preloadMethods.hasOwnProperty(fnString)) {\n              p5.prototype._preloadMethods[fnString] = obj;\n            }\n          };\n\n          p5.prototype.registerMethod = function(name, m) {\n            var target = this || p5.prototype;\n            if (!target._registeredMethods.hasOwnProperty(name)) {\n              target._registeredMethods[name] = [];\n            }\n            target._registeredMethods[name].push(m);\n          };\n\n          // create a function which provides a standardized process for binding\n          // globals; this is implemented as a factory primarily so that there's a\n          // way to redefine what \"global\" means for the binding function so it\n          // can be used in scenarios like unit testing where the window object\n          // might not exist\n          p5.prototype._createFriendlyGlobalFunctionBinder = function(options) {\n            options = options || {};\n\n            var globalObject = options.globalObject || window;\n            var log = options.log || console.log.bind(console);\n            var propsToForciblyOverwrite = {\n              // p5.print actually always overwrites an existing global function,\n              // albeit one that is very unlikely to be used:\n              //\n              //   https://developer.mozilla.org/en-US/docs/Web/API/Window/print\n              print: true\n            };\n\n            return function(prop, value) {\n              if (\n                !p5.disableFriendlyErrors &&\n                typeof IS_MINIFIED === 'undefined' &&\n                typeof value === 'function' &&\n                !(prop in p5.prototype._preloadMethods)\n              ) {\n                try {\n                  // Because p5 has so many common function names, it's likely\n                  // that users may accidentally overwrite global p5 functions with\n                  // their own variables. Let's allow this but log a warning to\n                  // help users who may be doing this unintentionally.\n                  //\n                  // For more information, see:\n                  //\n                  //   https://github.com/processing/p5.js/issues/1317\n\n                  if (prop in globalObject && !(prop in propsToForciblyOverwrite)) {\n                    throw new Error('global \"' + prop + '\" already exists');\n                  }\n\n                  // It's possible that this might throw an error because there\n                  // are a lot of edge-cases in which `Object.defineProperty` might\n                  // not succeed; since this functionality is only intended to\n                  // help beginners anyways, we'll just catch such an exception\n                  // if it occurs, and fall back to legacy behavior.\n                  Object.defineProperty(globalObject, prop, {\n                    configurable: true,\n                    enumerable: true,\n                    get: function get() {\n                      return value;\n                    },\n                    set: function set(newValue) {\n                      Object.defineProperty(globalObject, prop, {\n                        configurable: true,\n                        enumerable: true,\n                        value: newValue,\n                        writable: true\n                      });\n\n                      log(\n                        'You just changed the value of \"' +\n                          prop +\n                          '\", which was ' +\n                          \"a p5 function. This could cause problems later if you're \" +\n                          'not careful.'\n                      );\n                    }\n                  });\n                } catch (e) {\n                  log(\n                    'p5 had problems creating the global function \"' +\n                      prop +\n                      '\", ' +\n                      'possibly because your code is already using that name as ' +\n                      'a variable. You may want to rename your variable to something ' +\n                      'else.'\n                  );\n\n                  globalObject[prop] = value;\n                }\n              } else {\n                globalObject[prop] = value;\n              }\n            };\n          };\n\n          module.exports = p5;\n        },\n        { './constants': 18, './shim': 34 }\n      ],\n      25: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module DOM\n           * @submodule DOM\n           * @for p5.Element\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('./main');\n\n          /**\n           * Base class for all elements added to a sketch, including canvas,\n           * graphics buffers, and other HTML elements. Methods in blue are\n           * included in the core functionality, methods in brown are added\n           * with the <a href=\"http://p5js.org/reference/#/libraries/p5.dom\">p5.dom\n           * library</a>.\n           * It is not called directly, but <a href=\"#/p5.Element\">p5.Element</a>\n           * objects are created by calling <a href=\"#/p5/createCanvas\">createCanvas</a>, <a href=\"#/p5/createGraphics\">createGraphics</a>,\n           * or in the p5.dom library, <a href=\"#/p5/createDiv\">createDiv</a>, <a href=\"#/p5/createImg\">createImg</a>, <a href=\"#/p5/createInput\">createInput</a>, etc.\n           *\n           * @class p5.Element\n           * @param {String} elt DOM node that is wrapped\n           * @param {p5} [pInst] pointer to p5 instance\n           */\n          p5.Element = function(elt, pInst) {\n            /**\n             * Underlying HTML element. All normal HTML methods can be called on this.\n             * @example\n             * <div>\n             * <code>\n             * function setup() {\n             *   let c = createCanvas(50, 50);\n             *   c.elt.style.border = '5px solid red';\n             * }\n             *\n             * function draw() {\n             *   background(220);\n             * }\n             * </code>\n             * </div>\n             *\n             * @property elt\n             * @readOnly\n             */\n            this.elt = elt;\n            this._pInst = this._pixelsState = pInst;\n            this._events = {};\n            this.width = this.elt.offsetWidth;\n            this.height = this.elt.offsetHeight;\n          };\n\n          /**\n           *\n           * Attaches the element to the parent specified. A way of setting\n           * the container for the element. Accepts either a string ID, DOM\n           * node, or <a href=\"#/p5.Element\">p5.Element</a>. If no arguments given, parent node is returned.\n           * For more ways to position the canvas, see the\n           * <a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'>\n           * positioning the canvas</a> wiki page.\n           *\n           * All above examples except for the first one require the inclusion of\n           * the p5.dom library in your index.html. See the\n           * <a href='http://p5js.org/libraries/#using-a-library'>using a library</a>\n           * section for information on how to include this library.\n           *\n           * @method parent\n           * @param  {String|p5.Element|Object} parent the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>\n           *                         of desired parent element\n           * @chainable\n           *\n           * @example\n           * <div class=\"norender notest\"><code>\n           * // in the html file:\n           * // &lt;div id=\"myContainer\">&lt;/div>\n           *\n           * // in the js file:\n           * let cnv = createCanvas(100, 100);\n           * cnv.parent('myContainer');\n           * </code></div>\n           * <div class='norender'><code>\n           * let div0 = createDiv('this is the parent');\n           * let div1 = createDiv('this is the child');\n           * div1.parent(div0); // use p5.Element\n           * </code></div>\n           * <div class='norender'><code>\n           * let div0 = createDiv('this is the parent');\n           * div0.id('apples');\n           * let div1 = createDiv('this is the child');\n           * div1.parent('apples'); // use id\n           * </code></div>\n           * <div class='norender notest'><code>\n           * let elt = document.getElementById('myParentDiv');\n           * let div1 = createDiv('this is the child');\n           * div1.parent(elt); // use element from page\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           */\n          /**\n           * @method parent\n           * @return {p5.Element}\n           *\n           */\n          p5.Element.prototype.parent = function(p) {\n            if (typeof p === 'undefined') {\n              return this.elt.parentNode;\n            }\n\n            if (typeof p === 'string') {\n              if (p[0] === '#') {\n                p = p.substring(1);\n              }\n              p = document.getElementById(p);\n            } else if (p instanceof p5.Element) {\n              p = p.elt;\n            }\n            p.appendChild(this.elt);\n            return this;\n          };\n\n          /**\n           *\n           * Sets the ID of the element. If no ID argument is passed in, it instead\n           * returns the current ID of the element.\n           * Note that only one element can have a particular id in a page.\n           * The <a href=\"#/p5.Element/class\">.class()</a> function can be used\n           * to identify multiple elements with the same class name.\n           *\n           * @method id\n           * @param  {String} id ID of the element\n           * @chainable\n           *\n           * @example\n           * <div class='norender'><code>\n           * function setup() {\n           *   let cnv = createCanvas(100, 100);\n           *   // Assigns a CSS selector ID to\n           *   // the canvas element.\n           *   cnv.id('mycanvas');\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           */\n          /**\n           * @method id\n           * @return {String} the id of the element\n           */\n          p5.Element.prototype.id = function(id) {\n            if (typeof id === 'undefined') {\n              return this.elt.id;\n            }\n\n            this.elt.id = id;\n            this.width = this.elt.offsetWidth;\n            this.height = this.elt.offsetHeight;\n            return this;\n          };\n\n          /**\n           *\n           * Adds given class to the element. If no class argument is passed in, it\n           * instead returns a string containing the current class(es) of the element.\n           *\n           * @method class\n           * @param  {String} class class to add\n           * @chainable\n           *\n           * @example\n           * <div class='norender'><code>\n           * function setup() {\n           *   let cnv = createCanvas(100, 100);\n           *   // Assigns a CSS selector class 'small'\n           *   // to the canvas element.\n           *   cnv.class('small');\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           */\n          /**\n           * @method class\n           * @return {String} the class of the element\n           */\n          p5.Element.prototype.class = function(c) {\n            if (typeof c === 'undefined') {\n              return this.elt.className;\n            }\n\n            this.elt.className = c;\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/mousePressed\">mousePressed()</a> function is called once after every time a\n           * mouse button is pressed over the element.\n           * Some mobile browsers may also trigger this event on a touch screen,\n           * if the user performs a quick tap.\n           * This can be used to attach element specific event listeners.\n           *\n           * @method mousePressed\n           * @param  {Function|Boolean} fxn function to be fired when mouse is\n           *                                pressed over the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let cnv;\n           * let d;\n           * let g;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.mousePressed(changeGray); // attach listener for\n           *   // canvas click only\n           *   d = 10;\n           *   g = 100;\n           * }\n           *\n           * function draw() {\n           *   background(g);\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * // this function fires with any click anywhere\n           * function mousePressed() {\n           *   d = d + 10;\n           * }\n           *\n           * // this function fires only when cnv is clicked\n           * function changeGray() {\n           *   g = random(0, 255);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           *\n           */\n          p5.Element.prototype.mousePressed = function(fxn) {\n            // Prepend the mouse property setters to the event-listener.\n            // This is required so that mouseButton is set correctly prior to calling the callback (fxn).\n            // For details, see https://github.com/processing/p5.js/issues/3087.\n            var eventPrependedFxn = function eventPrependedFxn(event) {\n              this._pInst._setProperty('mouseIsPressed', true);\n              this._pInst._setMouseButton(event);\n              // Pass along the return-value of the callback:\n              return fxn.call(this);\n            };\n            // Pass along the event-prepended form of the callback.\n            p5.Element._adjustListener('mousedown', eventPrependedFxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/doubleClicked\">doubleClicked()</a> function is called once after every time a\n           * mouse button is pressed twice over the element. This can be used to\n           * attach element and action specific event listeners.\n           *\n           * @method doubleClicked\n           * @param  {Function|Boolean} fxn function to be fired when mouse is\n           *                                double clicked over the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @return {p5.Element}\n           * @example\n           * <div class='norender'><code>\n           * let cnv;\n           * let d;\n           * let g;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.doubleClicked(changeGray); // attach listener for\n           *   // canvas double click only\n           *   d = 10;\n           *   g = 100;\n           * }\n           *\n           * function draw() {\n           *   background(g);\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * // this function fires with any double click anywhere\n           * function doubleClicked() {\n           *   d = d + 10;\n           * }\n           *\n           * // this function fires only when cnv is double clicked\n           * function changeGray() {\n           *   g = random(0, 255);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           *\n           */\n          p5.Element.prototype.doubleClicked = function(fxn) {\n            p5.Element._adjustListener('dblclick', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/mouseWheel\">mouseWheel()</a> function is called once after every time a\n           * mouse wheel is scrolled over the element. This can be used to\n           * attach element specific event listeners.\n           * <br><br>\n           * The function accepts a callback function as argument which will be executed\n           * when the `wheel` event is triggered on the element, the callback function is\n           * passed one argument `event`. The `event.deltaY` property returns negative\n           * values if the mouse wheel is rotated up or away from the user and positive\n           * in the other direction. The `event.deltaX` does the same as `event.deltaY`\n           * except it reads the horizontal wheel scroll of the mouse wheel.\n           * <br><br>\n           * On OS X with \"natural\" scrolling enabled, the `event.deltaY` values are\n           * reversed.\n           *\n           * @method mouseWheel\n           * @param  {Function|Boolean} fxn function to be fired when mouse is\n           *                                scrolled over the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let cnv;\n           * let d;\n           * let g;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.mouseWheel(changeSize); // attach listener for\n           *   // activity on canvas only\n           *   d = 10;\n           *   g = 100;\n           * }\n           *\n           * function draw() {\n           *   background(g);\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * // this function fires with mousewheel movement\n           * // anywhere on screen\n           * function mouseWheel() {\n           *   g = g + 10;\n           * }\n           *\n           * // this function fires with mousewheel movement\n           * // over canvas only\n           * function changeSize(event) {\n           *   if (event.deltaY > 0) {\n           *     d = d + 10;\n           *   } else {\n           *     d = d - 10;\n           *   }\n           * }\n           * </code></div>\n           *\n           *\n           * @alt\n           * no display.\n           *\n           */\n          p5.Element.prototype.mouseWheel = function(fxn) {\n            p5.Element._adjustListener('wheel', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/mouseReleased\">mouseReleased()</a> function is called once after every time a\n           * mouse button is released over the element.\n           * Some mobile browsers may also trigger this event on a touch screen,\n           * if the user performs a quick tap.\n           * This can be used to attach element specific event listeners.\n           *\n           * @method mouseReleased\n           * @param  {Function|Boolean} fxn function to be fired when mouse is\n           *                                released over the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let cnv;\n           * let d;\n           * let g;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.mouseReleased(changeGray); // attach listener for\n           *   // activity on canvas only\n           *   d = 10;\n           *   g = 100;\n           * }\n           *\n           * function draw() {\n           *   background(g);\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * // this function fires after the mouse has been\n           * // released\n           * function mouseReleased() {\n           *   d = d + 10;\n           * }\n           *\n           * // this function fires after the mouse has been\n           * // released while on canvas\n           * function changeGray() {\n           *   g = random(0, 255);\n           * }\n           * </code></div>\n           *\n           *\n           * @alt\n           * no display.\n           *\n           */\n          p5.Element.prototype.mouseReleased = function(fxn) {\n            p5.Element._adjustListener('mouseup', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/mouseClicked\">mouseClicked()</a> function is called once after a mouse button is\n           * pressed and released over the element.\n           * Some mobile browsers may also trigger this event on a touch screen,\n           * if the user performs a quick tap.\n           * This can be used to attach element specific event listeners.\n           *\n           * @method mouseClicked\n           * @param  {Function|Boolean} fxn function to be fired when mouse is\n           *                                clicked over the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let cnv;\n           * let d;\n           * let g;\n           *\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.mouseClicked(changeGray); // attach listener for\n           *   // activity on canvas only\n           *   d = 10;\n           *   g = 100;\n           * }\n           *\n           * function draw() {\n           *   background(g);\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * // this function fires after the mouse has been\n           * // clicked anywhere\n           * function mouseClicked() {\n           *   d = d + 10;\n           * }\n           *\n           * // this function fires after the mouse has been\n           * // clicked on canvas\n           * function changeGray() {\n           *   g = random(0, 255);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no display.\n           *\n           */\n          p5.Element.prototype.mouseClicked = function(fxn) {\n            p5.Element._adjustListener('click', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/mouseMoved\">mouseMoved()</a> function is called once every time a\n           * mouse moves over the element. This can be used to attach an\n           * element specific event listener.\n           *\n           * @method mouseMoved\n           * @param  {Function|Boolean} fxn function to be fired when a mouse moves\n           *                                over the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let cnv;\n           * let d = 30;\n           * let g;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.mouseMoved(changeSize); // attach listener for\n           *   // activity on canvas only\n           *   d = 10;\n           *   g = 100;\n           * }\n           *\n           * function draw() {\n           *   background(g);\n           *   fill(200);\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * // this function fires when mouse moves anywhere on\n           * // page\n           * function mouseMoved() {\n           *   g = g + 5;\n           *   if (g > 255) {\n           *     g = 0;\n           *   }\n           * }\n           *\n           * // this function fires when mouse moves over canvas\n           * function changeSize() {\n           *   d = d + 2;\n           *   if (d > 100) {\n           *     d = 0;\n           *   }\n           * }\n           * </code></div>\n           *\n           *\n           * @alt\n           * no display.\n           *\n           */\n          p5.Element.prototype.mouseMoved = function(fxn) {\n            p5.Element._adjustListener('mousemove', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/mouseOver\">mouseOver()</a> function is called once after every time a\n           * mouse moves onto the element. This can be used to attach an\n           * element specific event listener.\n           *\n           * @method mouseOver\n           * @param  {Function|Boolean} fxn function to be fired when a mouse moves\n           *                                onto the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let cnv;\n           * let d;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.mouseOver(changeGray);\n           *   d = 10;\n           * }\n           *\n           * function draw() {\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * function changeGray() {\n           *   d = d + 10;\n           *   if (d > 100) {\n           *     d = 0;\n           *   }\n           * }\n           * </code></div>\n           *\n           *\n           * @alt\n           * no display.\n           *\n           */\n          p5.Element.prototype.mouseOver = function(fxn) {\n            p5.Element._adjustListener('mouseover', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/mouseOut\">mouseOut()</a> function is called once after every time a\n           * mouse moves off the element. This can be used to attach an\n           * element specific event listener.\n           *\n           * @method mouseOut\n           * @param  {Function|Boolean} fxn function to be fired when a mouse\n           *                                moves off of an element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let cnv;\n           * let d;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.mouseOut(changeGray);\n           *   d = 10;\n           * }\n           *\n           * function draw() {\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * function changeGray() {\n           *   d = d + 10;\n           *   if (d > 100) {\n           *     d = 0;\n           *   }\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           *\n           */\n          p5.Element.prototype.mouseOut = function(fxn) {\n            p5.Element._adjustListener('mouseout', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/touchStarted\">touchStarted()</a> function is called once after every time a touch is\n           * registered. This can be used to attach element specific event listeners.\n           *\n           * @method touchStarted\n           * @param  {Function|Boolean} fxn function to be fired when a touch\n           *                                starts over the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let cnv;\n           * let d;\n           * let g;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.touchStarted(changeGray); // attach listener for\n           *   // canvas click only\n           *   d = 10;\n           *   g = 100;\n           * }\n           *\n           * function draw() {\n           *   background(g);\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * // this function fires with any touch anywhere\n           * function touchStarted() {\n           *   d = d + 10;\n           * }\n           *\n           * // this function fires only when cnv is clicked\n           * function changeGray() {\n           *   g = random(0, 255);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           *\n           */\n          p5.Element.prototype.touchStarted = function(fxn) {\n            p5.Element._adjustListener('touchstart', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/touchMoved\">touchMoved()</a> function is called once after every time a touch move is\n           * registered. This can be used to attach element specific event listeners.\n           *\n           * @method touchMoved\n           * @param  {Function|Boolean} fxn function to be fired when a touch moves over\n           *                                the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let cnv;\n           * let g;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.touchMoved(changeGray); // attach listener for\n           *   // canvas click only\n           *   g = 100;\n           * }\n           *\n           * function draw() {\n           *   background(g);\n           * }\n           *\n           * // this function fires only when cnv is clicked\n           * function changeGray() {\n           *   g = random(0, 255);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           *\n           */\n          p5.Element.prototype.touchMoved = function(fxn) {\n            p5.Element._adjustListener('touchmove', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/touchEnded\">touchEnded()</a> function is called once after every time a touch is\n           * registered. This can be used to attach element specific event listeners.\n           *\n           * @method touchEnded\n           * @param  {Function|Boolean} fxn function to be fired when a touch ends\n           *                                over the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let cnv;\n           * let d;\n           * let g;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.touchEnded(changeGray); // attach listener for\n           *   // canvas click only\n           *   d = 10;\n           *   g = 100;\n           * }\n           *\n           * function draw() {\n           *   background(g);\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * // this function fires with any touch anywhere\n           * function touchEnded() {\n           *   d = d + 10;\n           * }\n           *\n           * // this function fires only when cnv is clicked\n           * function changeGray() {\n           *   g = random(0, 255);\n           * }\n           * </code></div>\n           *\n           *\n           * @alt\n           * no display.\n           *\n           */\n          p5.Element.prototype.touchEnded = function(fxn) {\n            p5.Element._adjustListener('touchend', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/dragOver\">dragOver()</a> function is called once after every time a\n           * file is dragged over the element. This can be used to attach an\n           * element specific event listener.\n           *\n           * @method dragOver\n           * @param  {Function|Boolean} fxn function to be fired when a file is\n           *                                dragged over the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div><code>\n           * // To test this sketch, simply drag a\n           * // file over the canvas\n           * function setup() {\n           *   let c = createCanvas(100, 100);\n           *   background(200);\n           *   textAlign(CENTER);\n           *   text('Drag file', width / 2, height / 2);\n           *   c.dragOver(dragOverCallback);\n           * }\n           *\n           * // This function will be called whenever\n           * // a file is dragged over the canvas\n           * function dragOverCallback() {\n           *   background(240);\n           *   text('Dragged over', width / 2, height / 2);\n           * }\n           * </code></div>\n           * @alt\n           * nothing displayed\n           */\n          p5.Element.prototype.dragOver = function(fxn) {\n            p5.Element._adjustListener('dragover', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .dragLeave() function is called once after every time a\n           * dragged file leaves the element area. This can be used to attach an\n           * element specific event listener.\n           *\n           * @method dragLeave\n           * @param  {Function|Boolean} fxn function to be fired when a file is\n           *                                dragged off the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div><code>\n           * // To test this sketch, simply drag a file\n           * // over and then out of the canvas area\n           * function setup() {\n           *   let c = createCanvas(100, 100);\n           *   background(200);\n           *   textAlign(CENTER);\n           *   text('Drag file', width / 2, height / 2);\n           *   c.dragLeave(dragLeaveCallback);\n           * }\n           *\n           * // This function will be called whenever\n           * // a file is dragged out of the canvas\n           * function dragLeaveCallback() {\n           *   background(240);\n           *   text('Dragged off', width / 2, height / 2);\n           * }\n           * </code></div>\n           * @alt\n           * nothing displayed\n           */\n          p5.Element.prototype.dragLeave = function(fxn) {\n            p5.Element._adjustListener('dragleave', fxn, this);\n            return this;\n          };\n\n          // General handler for event attaching and detaching\n          p5.Element._adjustListener = function(ev, fxn, ctx) {\n            if (fxn === false) {\n              p5.Element._detachListener(ev, ctx);\n            } else {\n              p5.Element._attachListener(ev, fxn, ctx);\n            }\n            return this;\n          };\n\n          p5.Element._attachListener = function(ev, fxn, ctx) {\n            // detach the old listener if there was one\n            if (ctx._events[ev]) {\n              p5.Element._detachListener(ev, ctx);\n            }\n            var f = fxn.bind(ctx);\n            ctx.elt.addEventListener(ev, f, false);\n            ctx._events[ev] = f;\n          };\n\n          p5.Element._detachListener = function(ev, ctx) {\n            var f = ctx._events[ev];\n            ctx.elt.removeEventListener(ev, f, false);\n            ctx._events[ev] = null;\n          };\n\n          /**\n           * Helper fxn for sharing pixel methods\n           *\n           */\n          p5.Element.prototype._setProperty = function(prop, value) {\n            this[prop] = value;\n          };\n\n          module.exports = p5.Element;\n        },\n        { './main': 24 }\n      ],\n      26: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Rendering\n           * @submodule Rendering\n           * @for p5\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('./main');\n          var constants = _dereq_('./constants');\n\n          /**\n           * Thin wrapper around a renderer, to be used for creating a\n           * graphics buffer object. Use this class if you need\n           * to draw into an off-screen graphics buffer. The two parameters define the\n           * width and height in pixels. The fields and methods for this class are\n           * extensive, but mirror the normal drawing API for p5.\n           *\n           * @class p5.Graphics\n           * @extends p5.Element\n           * @param {Number} w            width\n           * @param {Number} h            height\n           * @param {Constant} renderer   the renderer to use, either P2D or WEBGL\n           * @param {p5} [pInst]          pointer to p5 instance\n           */\n          p5.Graphics = function(w, h, renderer, pInst) {\n            var r = renderer || constants.P2D;\n\n            this.canvas = document.createElement('canvas');\n            var node = pInst._userNode || document.body;\n            node.appendChild(this.canvas);\n\n            p5.Element.call(this, this.canvas, pInst);\n\n            // bind methods and props of p5 to the new object\n            for (var p in p5.prototype) {\n              if (!this[p]) {\n                if (typeof p5.prototype[p] === 'function') {\n                  this[p] = p5.prototype[p].bind(this);\n                } else {\n                  this[p] = p5.prototype[p];\n                }\n              }\n            }\n\n            p5.prototype._initializeInstanceVariables.apply(this);\n            this.width = w;\n            this.height = h;\n            this._pixelDensity = pInst._pixelDensity;\n\n            if (r === constants.WEBGL) {\n              this._renderer = new p5.RendererGL(this.canvas, this, false);\n            } else {\n              this._renderer = new p5.Renderer2D(this.canvas, this, false);\n            }\n            pInst._elements.push(this);\n\n            this._renderer.resize(w, h);\n            this._renderer._applyDefaults();\n            return this;\n          };\n\n          p5.Graphics.prototype = Object.create(p5.Element.prototype);\n\n          /**\n           * Resets certain values such as those modified by functions in the Transform category\n           * and in the Lights category that are not automatically reset\n           * with graphics buffer objects. Calling this in <a href='#/p5/draw'>draw()</a> will copy the behavior\n           * of the standard canvas.\n           *\n           * @method reset\n           * @example\n           *\n           * <div><code>\n           * let pg;\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   background(0);\n           *   pg = createGraphics(50, 100);\n           *   pg.fill(0);\n           *   frameRate(5);\n           * }\n           * function draw() {\n           *   image(pg, width / 2, 0);\n           *   pg.background(255);\n           *   // p5.Graphics object behave a bit differently in some cases\n           *   // The normal canvas on the left resets the translate\n           *   // with every loop through draw()\n           *   // the graphics object on the right doesn't automatically reset\n           *   // so translate() is additive and it moves down the screen\n           *   rect(0, 0, width / 2, 5);\n           *   pg.rect(0, 0, width / 2, 5);\n           *   translate(0, 5, 0);\n           *   pg.translate(0, 5, 0);\n           * }\n           * function mouseClicked() {\n           *   // if you click you will see that\n           *   // reset() resets the translate back to the initial state\n           *   // of the Graphics object\n           *   pg.reset();\n           * }\n           * </code></div>\n           *\n           * @alt\n           * A white line on a black background stays still on the top-left half.\n           * A black line animates from top to bottom on a white background on the right half.\n           * When clicked, the black line starts back over at the top.\n           *\n           */\n          p5.Graphics.prototype.reset = function() {\n            this._renderer.resetMatrix();\n            if (this._renderer.isP3D) {\n              this._renderer._update();\n            }\n          };\n\n          /**\n           * Removes a Graphics object from the page and frees any resources\n           * associated with it.\n           *\n           * @method remove\n           *\n           * @example\n           * <div class='norender'><code>\n           * let bg;\n           * function setup() {\n           *   bg = createCanvas(100, 100);\n           *   bg.background(0);\n           *   image(bg, 0, 0);\n           *   bg.remove();\n           * }\n           * </code></div>\n           *\n           * <div><code>\n           * let bg;\n           * function setup() {\n           *   pixelDensity(1);\n           *   createCanvas(100, 100);\n           *   stroke(255);\n           *   fill(0);\n           *\n           *   // create and draw the background image\n           *   bg = createGraphics(100, 100);\n           *   bg.background(200);\n           *   bg.ellipse(50, 50, 80, 80);\n           * }\n           * function draw() {\n           *   let t = millis() / 1000;\n           *   // draw the background\n           *   if (bg) {\n           *     image(bg, frameCount % 100, 0);\n           *     image(bg, frameCount % 100 - 100, 0);\n           *   }\n           *   // draw the foreground\n           *   let p = p5.Vector.fromAngle(t, 35).add(50, 50);\n           *   ellipse(p.x, p.y, 30);\n           * }\n           * function mouseClicked() {\n           *   // remove the background\n           *   if (bg) {\n           *     bg.remove();\n           *     bg = null;\n           *   }\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image\n           * a multi-colored circle moving back and forth over a scrolling background.\n           *\n           */\n          p5.Graphics.prototype.remove = function() {\n            if (this.elt.parentNode) {\n              this.elt.parentNode.removeChild(this.elt);\n            }\n            var idx = this._pInst._elements.indexOf(this);\n            if (idx !== -1) {\n              this._pInst._elements.splice(idx, 1);\n            }\n            for (var elt_ev in this._events) {\n              this.elt.removeEventListener(elt_ev, this._events[elt_ev]);\n            }\n          };\n\n          module.exports = p5.Graphics;\n        },\n        { './constants': 18, './main': 24 }\n      ],\n      27: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Rendering\n           * @submodule Rendering\n           * @for p5\n           */\n\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n\n          var p5 = _dereq_('./main');\n          var constants = _dereq_('../core/constants');\n\n          /**\n           * Main graphics and rendering context, as well as the base API\n           * implementation for p5.js \"core\". To be used as the superclass for\n           * Renderer2D and Renderer3D classes, respecitvely.\n           *\n           * @class p5.Renderer\n           * @constructor\n           * @extends p5.Element\n           * @param {String} elt DOM node that is wrapped\n           * @param {p5} [pInst] pointer to p5 instance\n           * @param {Boolean} [isMainCanvas] whether we're using it as main canvas\n           */\n          p5.Renderer = function(elt, pInst, isMainCanvas) {\n            p5.Element.call(this, elt, pInst);\n            this.canvas = elt;\n            this._pixelsState = pInst;\n            if (isMainCanvas) {\n              this._isMainCanvas = true;\n              // for pixel method sharing with pimage\n              this._pInst._setProperty('_curElement', this);\n              this._pInst._setProperty('canvas', this.canvas);\n              this._pInst._setProperty('width', this.width);\n              this._pInst._setProperty('height', this.height);\n            } else {\n              // hide if offscreen buffer by default\n              this.canvas.style.display = 'none';\n              this._styles = []; // non-main elt styles stored in p5.Renderer\n            }\n\n            this._textSize = 12;\n            this._textLeading = 15;\n            this._textFont = 'sans-serif';\n            this._textStyle = constants.NORMAL;\n            this._textAscent = null;\n            this._textDescent = null;\n            this._textAlign = constants.LEFT;\n            this._textBaseline = constants.BASELINE;\n\n            this._rectMode = constants.CORNER;\n            this._ellipseMode = constants.CENTER;\n            this._curveTightness = 0;\n            this._imageMode = constants.CORNER;\n\n            this._tint = null;\n            this._doStroke = true;\n            this._doFill = true;\n            this._strokeSet = false;\n            this._fillSet = false;\n          };\n\n          p5.Renderer.prototype = Object.create(p5.Element.prototype);\n\n          // the renderer should return a 'style' object that it wishes to\n          // store on the push stack.\n          p5.Renderer.prototype.push = function() {\n            return {\n              properties: {\n                _doStroke: this._doStroke,\n                _strokeSet: this._strokeSet,\n                _doFill: this._doFill,\n                _fillSet: this._fillSet,\n                _tint: this._tint,\n                _imageMode: this._imageMode,\n                _rectMode: this._rectMode,\n                _ellipseMode: this._ellipseMode,\n                _textFont: this._textFont,\n                _textLeading: this._textLeading,\n                _textSize: this._textSize,\n                _textAlign: this._textAlign,\n                _textBaseline: this._textBaseline,\n                _textStyle: this._textStyle\n              }\n            };\n          };\n\n          // a pop() operation is in progress\n          // the renderer is passed the 'style' object that it returned\n          // from its push() method.\n          p5.Renderer.prototype.pop = function(style) {\n            if (style.properties) {\n              // copy the style properties back into the renderer\n              Object.assign(this, style.properties);\n            }\n          };\n\n          /**\n           * Resize our canvas element.\n           */\n          p5.Renderer.prototype.resize = function(w, h) {\n            this.width = w;\n            this.height = h;\n            this.elt.width = w * this._pInst._pixelDensity;\n            this.elt.height = h * this._pInst._pixelDensity;\n            this.elt.style.width = w + 'px';\n            this.elt.style.height = h + 'px';\n            if (this._isMainCanvas) {\n              this._pInst._setProperty('width', this.width);\n              this._pInst._setProperty('height', this.height);\n            }\n          };\n\n          p5.Renderer.prototype.get = function(x, y, w, h) {\n            var pixelsState = this._pixelsState;\n            var pd = pixelsState._pixelDensity;\n            var canvas = this.canvas;\n\n            if (typeof x === 'undefined' && typeof y === 'undefined') {\n              // get()\n              x = y = 0;\n              w = pixelsState.width;\n              h = pixelsState.height;\n            } else {\n              x *= pd;\n              y *= pd;\n\n              if (typeof w === 'undefined' && typeof h === 'undefined') {\n                // get(x,y)\n                if (x < 0 || y < 0 || x >= canvas.width || y >= canvas.height) {\n                  return [0, 0, 0, 0];\n                }\n\n                return this._getPixel(x, y);\n              }\n              // get(x,y,w,h)\n            }\n\n            var region = new p5.Image(w, h);\n            region.canvas\n              .getContext('2d')\n              .drawImage(canvas, x, y, w * pd, h * pd, 0, 0, w, h);\n\n            return region;\n          };\n\n          p5.Renderer.prototype.textLeading = function(l) {\n            if (typeof l === 'number') {\n              this._setProperty('_textLeading', l);\n              return this._pInst;\n            }\n\n            return this._textLeading;\n          };\n\n          p5.Renderer.prototype.textSize = function(s) {\n            if (typeof s === 'number') {\n              this._setProperty('_textSize', s);\n              this._setProperty('_textLeading', s * constants._DEFAULT_LEADMULT);\n              return this._applyTextProperties();\n            }\n\n            return this._textSize;\n          };\n\n          p5.Renderer.prototype.textStyle = function(s) {\n            if (s) {\n              if (\n                s === constants.NORMAL ||\n                s === constants.ITALIC ||\n                s === constants.BOLD ||\n                s === constants.BOLDITALIC\n              ) {\n                this._setProperty('_textStyle', s);\n              }\n\n              return this._applyTextProperties();\n            }\n\n            return this._textStyle;\n          };\n\n          p5.Renderer.prototype.textAscent = function() {\n            if (this._textAscent === null) {\n              this._updateTextMetrics();\n            }\n            return this._textAscent;\n          };\n\n          p5.Renderer.prototype.textDescent = function() {\n            if (this._textDescent === null) {\n              this._updateTextMetrics();\n            }\n            return this._textDescent;\n          };\n\n          p5.Renderer.prototype.textAlign = function(h, v) {\n            if (typeof h !== 'undefined') {\n              this._setProperty('_textAlign', h);\n\n              if (typeof v !== 'undefined') {\n                this._setProperty('_textBaseline', v);\n              }\n\n              return this._applyTextProperties();\n            } else {\n              return {\n                horizontal: this._textAlign,\n                vertical: this._textBaseline\n              };\n            }\n          };\n\n          p5.Renderer.prototype.text = function(str, x, y, maxWidth, maxHeight) {\n            var p = this._pInst,\n              cars,\n              n,\n              ii,\n              jj,\n              line,\n              testLine,\n              testWidth,\n              words,\n              totalHeight,\n              finalMaxHeight = Number.MAX_VALUE;\n\n            if (!(this._doFill || this._doStroke)) {\n              return;\n            }\n\n            if (typeof str === 'undefined') {\n              return;\n            } else if (typeof str !== 'string') {\n              str = str.toString();\n            }\n\n            str = str.replace(/(\\t)/g, '  ');\n            cars = str.split('\\n');\n\n            if (typeof maxWidth !== 'undefined') {\n              totalHeight = 0;\n              for (ii = 0; ii < cars.length; ii++) {\n                line = '';\n                words = cars[ii].split(' ');\n                for (n = 0; n < words.length; n++) {\n                  testLine = line + words[n] + ' ';\n                  testWidth = this.textWidth(testLine);\n                  if (testWidth > maxWidth) {\n                    line = words[n] + ' ';\n                    totalHeight += p.textLeading();\n                  } else {\n                    line = testLine;\n                  }\n                }\n              }\n\n              if (this._rectMode === constants.CENTER) {\n                x -= maxWidth / 2;\n                y -= maxHeight / 2;\n              }\n\n              switch (this._textAlign) {\n                case constants.CENTER:\n                  x += maxWidth / 2;\n                  break;\n                case constants.RIGHT:\n                  x += maxWidth;\n                  break;\n              }\n\n              var baselineHacked = false;\n              if (typeof maxHeight !== 'undefined') {\n                switch (this._textBaseline) {\n                  case constants.BOTTOM:\n                    y += maxHeight - totalHeight;\n                    break;\n                  case constants.CENTER:\n                    y += (maxHeight - totalHeight) / 2;\n                    break;\n                  case constants.BASELINE:\n                    baselineHacked = true;\n                    this._textBaseline = constants.TOP;\n                    break;\n                }\n\n                // remember the max-allowed y-position for any line (fix to #928)\n                finalMaxHeight = y + maxHeight - p.textAscent();\n              }\n\n              for (ii = 0; ii < cars.length; ii++) {\n                line = '';\n                words = cars[ii].split(' ');\n                for (n = 0; n < words.length; n++) {\n                  testLine = line + words[n] + ' ';\n                  testWidth = this.textWidth(testLine);\n                  if (testWidth > maxWidth && line.length > 0) {\n                    this._renderText(p, line, x, y, finalMaxHeight);\n                    line = words[n] + ' ';\n                    y += p.textLeading();\n                  } else {\n                    line = testLine;\n                  }\n                }\n\n                this._renderText(p, line, x, y, finalMaxHeight);\n                y += p.textLeading();\n\n                if (baselineHacked) {\n                  this._textBaseline = constants.BASELINE;\n                }\n              }\n            } else {\n              // Offset to account for vertically centering multiple lines of text - no\n              // need to adjust anything for vertical align top or baseline\n              var offset = 0,\n                vAlign = p.textAlign().vertical;\n              if (vAlign === constants.CENTER) {\n                offset = (cars.length - 1) * p.textLeading() / 2;\n              } else if (vAlign === constants.BOTTOM) {\n                offset = (cars.length - 1) * p.textLeading();\n              }\n\n              for (jj = 0; jj < cars.length; jj++) {\n                this._renderText(p, cars[jj], x, y - offset, finalMaxHeight);\n                y += p.textLeading();\n              }\n            }\n\n            return p;\n          };\n\n          p5.Renderer.prototype._applyDefaults = function() {\n            return this;\n          };\n\n          /**\n           * Helper fxn to check font type (system or otf)\n           */\n          p5.Renderer.prototype._isOpenType = function(f) {\n            f = f || this._textFont;\n            return _typeof(f) === 'object' && f.font && f.font.supported;\n          };\n\n          p5.Renderer.prototype._updateTextMetrics = function() {\n            if (this._isOpenType()) {\n              this._setProperty('_textAscent', this._textFont._textAscent());\n              this._setProperty('_textDescent', this._textFont._textDescent());\n              return this;\n            }\n\n            // Adapted from http://stackoverflow.com/a/25355178\n            var text = document.createElement('span');\n            text.style.fontFamily = this._textFont;\n            text.style.fontSize = this._textSize + 'px';\n            text.innerHTML = 'ABCjgq|';\n\n            var block = document.createElement('div');\n            block.style.display = 'inline-block';\n            block.style.width = '1px';\n            block.style.height = '0px';\n\n            var container = document.createElement('div');\n            container.appendChild(text);\n            container.appendChild(block);\n\n            container.style.height = '0px';\n            container.style.overflow = 'hidden';\n            document.body.appendChild(container);\n\n            block.style.verticalAlign = 'baseline';\n            var blockOffset = calculateOffset(block);\n            var textOffset = calculateOffset(text);\n            var ascent = blockOffset[1] - textOffset[1];\n\n            block.style.verticalAlign = 'bottom';\n            blockOffset = calculateOffset(block);\n            textOffset = calculateOffset(text);\n            var height = blockOffset[1] - textOffset[1];\n            var descent = height - ascent;\n\n            document.body.removeChild(container);\n\n            this._setProperty('_textAscent', ascent);\n            this._setProperty('_textDescent', descent);\n\n            return this;\n          };\n\n          /**\n           * Helper fxn to measure ascent and descent.\n           * Adapted from http://stackoverflow.com/a/25355178\n           */\n          function calculateOffset(object) {\n            var currentLeft = 0,\n              currentTop = 0;\n            if (object.offsetParent) {\n              do {\n                currentLeft += object.offsetLeft;\n                currentTop += object.offsetTop;\n              } while ((object = object.offsetParent));\n            } else {\n              currentLeft += object.offsetLeft;\n              currentTop += object.offsetTop;\n            }\n            return [currentLeft, currentTop];\n          }\n\n          module.exports = p5.Renderer;\n        },\n        { '../core/constants': 18, './main': 24 }\n      ],\n      28: [\n        function(_dereq_, module, exports) {\n          'use strict';\n\n          var p5 = _dereq_('./main');\n          var constants = _dereq_('./constants');\n          var filters = _dereq_('../image/filters');\n\n          _dereq_('./p5.Renderer');\n\n          /**\n           * p5.Renderer2D\n           * The 2D graphics canvas renderer class.\n           * extends p5.Renderer\n           */\n          var styleEmpty = 'rgba(0,0,0,0)';\n          // var alphaThreshold = 0.00125; // minimum visible\n\n          p5.Renderer2D = function(elt, pInst, isMainCanvas) {\n            p5.Renderer.call(this, elt, pInst, isMainCanvas);\n            this.drawingContext = this.canvas.getContext('2d');\n            this._pInst._setProperty('drawingContext', this.drawingContext);\n            return this;\n          };\n\n          p5.Renderer2D.prototype = Object.create(p5.Renderer.prototype);\n\n          p5.Renderer2D.prototype._applyDefaults = function() {\n            this._cachedFillStyle = this._cachedStrokeStyle = undefined;\n            this._setFill(constants._DEFAULT_FILL);\n            this._setStroke(constants._DEFAULT_STROKE);\n            this.drawingContext.lineCap = constants.ROUND;\n            this.drawingContext.font = 'normal 12px sans-serif';\n          };\n\n          p5.Renderer2D.prototype.resize = function(w, h) {\n            p5.Renderer.prototype.resize.call(this, w, h);\n            this.drawingContext.scale(this._pInst._pixelDensity, this._pInst._pixelDensity);\n          };\n\n          //////////////////////////////////////////////\n          // COLOR | Setting\n          //////////////////////////////////////////////\n\n          p5.Renderer2D.prototype.background = function() {\n            this.drawingContext.save();\n            this.resetMatrix();\n\n            if (arguments[0] instanceof p5.Image) {\n              this._pInst.image(arguments[0], 0, 0, this.width, this.height);\n            } else {\n              var curFill = this._getFill();\n              // create background rect\n              var color = this._pInst.color.apply(this._pInst, arguments);\n              var newFill = color.toString();\n              this._setFill(newFill);\n              this.drawingContext.fillRect(0, 0, this.width, this.height);\n              // reset fill\n              this._setFill(curFill);\n            }\n            this.drawingContext.restore();\n\n            this._pixelsState._pixelsDirty = true;\n          };\n\n          p5.Renderer2D.prototype.clear = function() {\n            this.drawingContext.save();\n            this.resetMatrix();\n            this.drawingContext.clearRect(0, 0, this.width, this.height);\n            this.drawingContext.restore();\n\n            this._pixelsState._pixelsDirty = true;\n          };\n\n          p5.Renderer2D.prototype.fill = function() {\n            var color = this._pInst.color.apply(this._pInst, arguments);\n            this._setFill(color.toString());\n          };\n\n          p5.Renderer2D.prototype.stroke = function() {\n            var color = this._pInst.color.apply(this._pInst, arguments);\n            this._setStroke(color.toString());\n          };\n\n          //////////////////////////////////////////////\n          // IMAGE | Loading & Displaying\n          //////////////////////////////////////////////\n\n          p5.Renderer2D.prototype.image = function(\n            img,\n            sx,\n            sy,\n            sWidth,\n            sHeight,\n            dx,\n            dy,\n            dWidth,\n            dHeight\n          ) {\n            var cnv;\n            try {\n              if (this._tint) {\n                if (p5.MediaElement && img instanceof p5.MediaElement) {\n                  img.loadPixels();\n                }\n                if (img.canvas) {\n                  cnv = this._getTintedImageCanvas(img);\n                }\n              }\n              if (!cnv) {\n                cnv = img.canvas || img.elt;\n              }\n              var s = 1;\n              if (img.width && img.width > 0) {\n                s = cnv.width / img.width;\n              }\n              this.drawingContext.drawImage(\n                cnv,\n                s * sx,\n                s * sy,\n                s * sWidth,\n                s * sHeight,\n                dx,\n                dy,\n                dWidth,\n                dHeight\n              );\n            } catch (e) {\n              if (e.name !== 'NS_ERROR_NOT_AVAILABLE') {\n                throw e;\n              }\n            }\n\n            this._pixelsState._pixelsDirty = true;\n          };\n\n          p5.Renderer2D.prototype._getTintedImageCanvas = function(img) {\n            if (!img.canvas) {\n              return img;\n            }\n            var pixels = filters._toPixels(img.canvas);\n            var tmpCanvas = document.createElement('canvas');\n            tmpCanvas.width = img.canvas.width;\n            tmpCanvas.height = img.canvas.height;\n            var tmpCtx = tmpCanvas.getContext('2d');\n            var id = tmpCtx.createImageData(img.canvas.width, img.canvas.height);\n            var newPixels = id.data;\n            for (var i = 0; i < pixels.length; i += 4) {\n              var r = pixels[i];\n              var g = pixels[i + 1];\n              var b = pixels[i + 2];\n              var a = pixels[i + 3];\n              newPixels[i] = r * this._tint[0] / 255;\n              newPixels[i + 1] = g * this._tint[1] / 255;\n              newPixels[i + 2] = b * this._tint[2] / 255;\n              newPixels[i + 3] = a * this._tint[3] / 255;\n            }\n            tmpCtx.putImageData(id, 0, 0);\n            return tmpCanvas;\n          };\n\n          //////////////////////////////////////////////\n          // IMAGE | Pixels\n          //////////////////////////////////////////////\n\n          p5.Renderer2D.prototype.blendMode = function(mode) {\n            if (mode === constants.SUBTRACT) {\n              console.warn('blendMode(SUBTRACT) only works in WEBGL mode.');\n            } else if (\n              mode === constants.BLEND ||\n              mode === constants.DARKEST ||\n              mode === constants.LIGHTEST ||\n              mode === constants.DIFFERENCE ||\n              mode === constants.MULTIPLY ||\n              mode === constants.EXCLUSION ||\n              mode === constants.SCREEN ||\n              mode === constants.REPLACE ||\n              mode === constants.OVERLAY ||\n              mode === constants.HARD_LIGHT ||\n              mode === constants.SOFT_LIGHT ||\n              mode === constants.DODGE ||\n              mode === constants.BURN ||\n              mode === constants.ADD\n            ) {\n              this.drawingContext.globalCompositeOperation = mode;\n            } else {\n              throw new Error('Mode ' + mode + ' not recognized.');\n            }\n          };\n\n          p5.Renderer2D.prototype.blend = function() {\n            var currBlend = this.drawingContext.globalCompositeOperation;\n            var blendMode = arguments[arguments.length - 1];\n\n            var copyArgs = Array.prototype.slice.call(arguments, 0, arguments.length - 1);\n\n            this.drawingContext.globalCompositeOperation = blendMode;\n            if (this._pInst) {\n              this._pInst.copy.apply(this._pInst, copyArgs);\n            } else {\n              this.copy.apply(this, copyArgs);\n            }\n            this.drawingContext.globalCompositeOperation = currBlend;\n          };\n\n          p5.Renderer2D.prototype.copy = function() {\n            var srcImage, sx, sy, sw, sh, dx, dy, dw, dh;\n            if (arguments.length === 9) {\n              srcImage = arguments[0];\n              sx = arguments[1];\n              sy = arguments[2];\n              sw = arguments[3];\n              sh = arguments[4];\n              dx = arguments[5];\n              dy = arguments[6];\n              dw = arguments[7];\n              dh = arguments[8];\n            } else if (arguments.length === 8) {\n              srcImage = this._pInst;\n              sx = arguments[0];\n              sy = arguments[1];\n              sw = arguments[2];\n              sh = arguments[3];\n              dx = arguments[4];\n              dy = arguments[5];\n              dw = arguments[6];\n              dh = arguments[7];\n            } else {\n              throw new Error('Signature not supported');\n            }\n            p5.Renderer2D._copyHelper(this, srcImage, sx, sy, sw, sh, dx, dy, dw, dh);\n\n            this._pixelsState._pixelsDirty = true;\n          };\n\n          p5.Renderer2D._copyHelper = function(\n            dstImage,\n            srcImage,\n            sx,\n            sy,\n            sw,\n            sh,\n            dx,\n            dy,\n            dw,\n            dh\n          ) {\n            srcImage.loadPixels();\n            var s = srcImage.canvas.width / srcImage.width;\n            dstImage.drawingContext.drawImage(\n              srcImage.canvas,\n              s * sx,\n              s * sy,\n              s * sw,\n              s * sh,\n              dx,\n              dy,\n              dw,\n              dh\n            );\n          };\n\n          // p5.Renderer2D.prototype.get = p5.Renderer.prototype.get;\n          // .get() is not overridden\n\n          // x,y are canvas-relative (pre-scaled by _pixelDensity)\n          p5.Renderer2D.prototype._getPixel = function(x, y) {\n            var pixelsState = this._pixelsState;\n            var imageData, index;\n            if (pixelsState._pixelsDirty) {\n              imageData = this.drawingContext.getImageData(x, y, 1, 1).data;\n              index = 0;\n            } else {\n              imageData = pixelsState.pixels;\n              index = (Math.floor(x) + Math.floor(y) * this.canvas.width) * 4;\n            }\n            return [\n              imageData[index + 0],\n              imageData[index + 1],\n              imageData[index + 2],\n              imageData[index + 3]\n            ];\n          };\n\n          p5.Renderer2D.prototype.loadPixels = function() {\n            var pixelsState = this._pixelsState; // if called by p5.Image\n            if (!pixelsState._pixelsDirty) return;\n            pixelsState._pixelsDirty = false;\n\n            var pd = pixelsState._pixelDensity;\n            var w = this.width * pd;\n            var h = this.height * pd;\n            var imageData = this.drawingContext.getImageData(0, 0, w, h);\n            // @todo this should actually set pixels per object, so diff buffers can\n            // have diff pixel arrays.\n            pixelsState._setProperty('imageData', imageData);\n            pixelsState._setProperty('pixels', imageData.data);\n          };\n\n          p5.Renderer2D.prototype.set = function(x, y, imgOrCol) {\n            // round down to get integer numbers\n            x = Math.floor(x);\n            y = Math.floor(y);\n            var pixelsState = this._pixelsState;\n            if (imgOrCol instanceof p5.Image) {\n              this.drawingContext.save();\n              this.drawingContext.setTransform(1, 0, 0, 1, 0, 0);\n              this.drawingContext.scale(\n                pixelsState._pixelDensity,\n                pixelsState._pixelDensity\n              );\n\n              this.drawingContext.drawImage(imgOrCol.canvas, x, y);\n              this.drawingContext.restore();\n              pixelsState._pixelsDirty = true;\n            } else {\n              var r = 0,\n                g = 0,\n                b = 0,\n                a = 0;\n              var idx =\n                4 *\n                (y * pixelsState._pixelDensity * (this.width * pixelsState._pixelDensity) +\n                  x * pixelsState._pixelDensity);\n              if (!pixelsState.imageData || pixelsState._pixelsDirty) {\n                pixelsState.loadPixels.call(pixelsState);\n              }\n              if (typeof imgOrCol === 'number') {\n                if (idx < pixelsState.pixels.length) {\n                  r = imgOrCol;\n                  g = imgOrCol;\n                  b = imgOrCol;\n                  a = 255;\n                  //this.updatePixels.call(this);\n                }\n              } else if (imgOrCol instanceof Array) {\n                if (imgOrCol.length < 4) {\n                  throw new Error('pixel array must be of the form [R, G, B, A]');\n                }\n                if (idx < pixelsState.pixels.length) {\n                  r = imgOrCol[0];\n                  g = imgOrCol[1];\n                  b = imgOrCol[2];\n                  a = imgOrCol[3];\n                  //this.updatePixels.call(this);\n                }\n              } else if (imgOrCol instanceof p5.Color) {\n                if (idx < pixelsState.pixels.length) {\n                  r = imgOrCol.levels[0];\n                  g = imgOrCol.levels[1];\n                  b = imgOrCol.levels[2];\n                  a = imgOrCol.levels[3];\n                  //this.updatePixels.call(this);\n                }\n              }\n              // loop over pixelDensity * pixelDensity\n              for (var i = 0; i < pixelsState._pixelDensity; i++) {\n                for (var j = 0; j < pixelsState._pixelDensity; j++) {\n                  // loop over\n                  idx =\n                    4 *\n                    ((y * pixelsState._pixelDensity + j) *\n                      this.width *\n                      pixelsState._pixelDensity +\n                      (x * pixelsState._pixelDensity + i));\n                  pixelsState.pixels[idx] = r;\n                  pixelsState.pixels[idx + 1] = g;\n                  pixelsState.pixels[idx + 2] = b;\n                  pixelsState.pixels[idx + 3] = a;\n                }\n              }\n            }\n          };\n\n          p5.Renderer2D.prototype.updatePixels = function(x, y, w, h) {\n            var pixelsState = this._pixelsState;\n            var pd = pixelsState._pixelDensity;\n            if (x === undefined && y === undefined && w === undefined && h === undefined) {\n              x = 0;\n              y = 0;\n              w = this.width;\n              h = this.height;\n            }\n            x *= pd;\n            y *= pd;\n            w *= pd;\n            h *= pd;\n\n            this.drawingContext.putImageData(pixelsState.imageData, x, y, 0, 0, w, h);\n\n            if (x !== 0 || y !== 0 || w !== this.width || h !== this.height) {\n              pixelsState._pixelsDirty = true;\n            }\n          };\n\n          //////////////////////////////////////////////\n          // SHAPE | 2D Primitives\n          //////////////////////////////////////////////\n\n          /**\n           * Generate a cubic Bezier representing an arc on the unit circle of total\n           * angle `size` radians, beginning `start` radians above the x-axis. Up to\n           * four of these curves are combined to make a full arc.\n           *\n           * See www.joecridge.me/bezier.pdf for an explanation of the method.\n           */\n          p5.Renderer2D.prototype._acuteArcToBezier = function _acuteArcToBezier(\n            start,\n            size\n          ) {\n            // Evaluate constants.\n            var alpha = size / 2.0,\n              cos_alpha = Math.cos(alpha),\n              sin_alpha = Math.sin(alpha),\n              cot_alpha = 1.0 / Math.tan(alpha),\n              phi = start + alpha, // This is how far the arc needs to be rotated.\n              cos_phi = Math.cos(phi),\n              sin_phi = Math.sin(phi),\n              lambda = (4.0 - cos_alpha) / 3.0,\n              mu = sin_alpha + (cos_alpha - lambda) * cot_alpha;\n\n            // Return rotated waypoints.\n            return {\n              ax: Math.cos(start).toFixed(7),\n              ay: Math.sin(start).toFixed(7),\n              bx: (lambda * cos_phi + mu * sin_phi).toFixed(7),\n              by: (lambda * sin_phi - mu * cos_phi).toFixed(7),\n              cx: (lambda * cos_phi - mu * sin_phi).toFixed(7),\n              cy: (lambda * sin_phi + mu * cos_phi).toFixed(7),\n              dx: Math.cos(start + size).toFixed(7),\n              dy: Math.sin(start + size).toFixed(7)\n            };\n          };\n\n          /*\n    * This function requires that:\n    *\n    *   0 <= start < TWO_PI\n    *\n    *   start <= stop < start + TWO_PI\n    */\n          p5.Renderer2D.prototype.arc = function(x, y, w, h, start, stop, mode) {\n            var ctx = this.drawingContext;\n            var rx = w / 2.0;\n            var ry = h / 2.0;\n            var epsilon = 0.00001; // Smallest visible angle on displays up to 4K.\n            var arcToDraw = 0;\n            var curves = [];\n\n            x += rx;\n            y += ry;\n\n            // Create curves\n            while (stop - start >= epsilon) {\n              arcToDraw = Math.min(stop - start, constants.HALF_PI);\n              curves.push(this._acuteArcToBezier(start, arcToDraw));\n              start += arcToDraw;\n            }\n\n            // Fill curves\n            if (this._doFill) {\n              ctx.beginPath();\n              curves.forEach(function(curve, index) {\n                if (index === 0) {\n                  ctx.moveTo(x + curve.ax * rx, y + curve.ay * ry);\n                }\n                // prettier-ignore\n                ctx.bezierCurveTo(x + curve.bx * rx, y + curve.by * ry,\n      x + curve.cx * rx, y + curve.cy * ry,\n      x + curve.dx * rx, y + curve.dy * ry);\n              });\n              if (mode === constants.PIE || mode == null) {\n                ctx.lineTo(x, y);\n              }\n              ctx.closePath();\n              ctx.fill();\n              this._pixelsState._pixelsDirty = true;\n            }\n\n            // Stroke curves\n            if (this._doStroke) {\n              ctx.beginPath();\n              curves.forEach(function(curve, index) {\n                if (index === 0) {\n                  ctx.moveTo(x + curve.ax * rx, y + curve.ay * ry);\n                }\n                // prettier-ignore\n                ctx.bezierCurveTo(x + curve.bx * rx, y + curve.by * ry,\n      x + curve.cx * rx, y + curve.cy * ry,\n      x + curve.dx * rx, y + curve.dy * ry);\n              });\n              if (mode === constants.PIE) {\n                ctx.lineTo(x, y);\n                ctx.closePath();\n              } else if (mode === constants.CHORD) {\n                ctx.closePath();\n              }\n              ctx.stroke();\n              this._pixelsState._pixelsDirty = true;\n            }\n            return this;\n          };\n\n          p5.Renderer2D.prototype.ellipse = function(args) {\n            var ctx = this.drawingContext;\n            var doFill = this._doFill,\n              doStroke = this._doStroke;\n            var x = args[0],\n              y = args[1],\n              w = args[2],\n              h = args[3];\n            if (doFill && !doStroke) {\n              if (this._getFill() === styleEmpty) {\n                return this;\n              }\n            } else if (!doFill && doStroke) {\n              if (this._getStroke() === styleEmpty) {\n                return this;\n              }\n            }\n            var kappa = 0.5522847498,\n              ox = w / 2 * kappa, // control point offset horizontal\n              oy = h / 2 * kappa, // control point offset vertical\n              xe = x + w, // x-end\n              ye = y + h, // y-end\n              xm = x + w / 2, // x-middle\n              ym = y + h / 2; // y-middle\n            ctx.beginPath();\n            ctx.moveTo(x, ym);\n            ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n            ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n            ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n            ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n            ctx.closePath();\n            if (doFill) {\n              ctx.fill();\n              this._pixelsState._pixelsDirty = true;\n            }\n            if (doStroke) {\n              ctx.stroke();\n              this._pixelsState._pixelsDirty = true;\n            }\n          };\n\n          p5.Renderer2D.prototype.line = function(x1, y1, x2, y2) {\n            var ctx = this.drawingContext;\n            if (!this._doStroke) {\n              return this;\n            } else if (this._getStroke() === styleEmpty) {\n              return this;\n            }\n            ctx.beginPath();\n            ctx.moveTo(x1, y1);\n            ctx.lineTo(x2, y2);\n            ctx.stroke();\n            this._pixelsState._pixelsDirty = true;\n            return this;\n          };\n\n          p5.Renderer2D.prototype.point = function(x, y) {\n            var ctx = this.drawingContext;\n            if (!this._doStroke) {\n              return this;\n            } else if (this._getStroke() === styleEmpty) {\n              return this;\n            }\n            var s = this._getStroke();\n            var f = this._getFill();\n            x = Math.round(x);\n            y = Math.round(y);\n            // swapping fill color to stroke and back after for correct point rendering\n            this._setFill(s);\n            if (ctx.lineWidth > 1) {\n              ctx.beginPath();\n              ctx.arc(x, y, ctx.lineWidth / 2, 0, constants.TWO_PI, false);\n              ctx.fill();\n            } else {\n              ctx.fillRect(x, y, 1, 1);\n            }\n            this._setFill(f);\n            this._pixelsState._pixelsDirty = true;\n          };\n\n          p5.Renderer2D.prototype.quad = function(x1, y1, x2, y2, x3, y3, x4, y4) {\n            var ctx = this.drawingContext;\n            var doFill = this._doFill,\n              doStroke = this._doStroke;\n            if (doFill && !doStroke) {\n              if (this._getFill() === styleEmpty) {\n                return this;\n              }\n            } else if (!doFill && doStroke) {\n              if (this._getStroke() === styleEmpty) {\n                return this;\n              }\n            }\n            ctx.beginPath();\n            ctx.moveTo(x1, y1);\n            ctx.lineTo(x2, y2);\n            ctx.lineTo(x3, y3);\n            ctx.lineTo(x4, y4);\n            ctx.closePath();\n            if (doFill) {\n              ctx.fill();\n            }\n            if (doStroke) {\n              ctx.stroke();\n            }\n            this._pixelsState._pixelsDirty = true;\n            return this;\n          };\n\n          p5.Renderer2D.prototype.rect = function(args) {\n            var x = args[0],\n              y = args[1],\n              w = args[2],\n              h = args[3],\n              tl = args[4],\n              tr = args[5],\n              br = args[6],\n              bl = args[7];\n            var ctx = this.drawingContext;\n            var doFill = this._doFill,\n              doStroke = this._doStroke;\n            if (doFill && !doStroke) {\n              if (this._getFill() === styleEmpty) {\n                return this;\n              }\n            } else if (!doFill && doStroke) {\n              if (this._getStroke() === styleEmpty) {\n                return this;\n              }\n            }\n            ctx.beginPath();\n\n            if (typeof tl === 'undefined') {\n              // No rounded corners\n              ctx.rect(x, y, w, h);\n            } else {\n              // At least one rounded corner\n              // Set defaults when not specified\n              if (typeof tr === 'undefined') {\n                tr = tl;\n              }\n              if (typeof br === 'undefined') {\n                br = tr;\n              }\n              if (typeof bl === 'undefined') {\n                bl = br;\n              }\n\n              var hw = w / 2;\n              var hh = h / 2;\n\n              // Clip radii\n              if (w < 2 * tl) {\n                tl = hw;\n              }\n              if (h < 2 * tl) {\n                tl = hh;\n              }\n              if (w < 2 * tr) {\n                tr = hw;\n              }\n              if (h < 2 * tr) {\n                tr = hh;\n              }\n              if (w < 2 * br) {\n                br = hw;\n              }\n              if (h < 2 * br) {\n                br = hh;\n              }\n              if (w < 2 * bl) {\n                bl = hw;\n              }\n              if (h < 2 * bl) {\n                bl = hh;\n              }\n\n              // Draw shape\n              ctx.beginPath();\n              ctx.moveTo(x + tl, y);\n              ctx.arcTo(x + w, y, x + w, y + h, tr);\n              ctx.arcTo(x + w, y + h, x, y + h, br);\n              ctx.arcTo(x, y + h, x, y, bl);\n              ctx.arcTo(x, y, x + w, y, tl);\n              ctx.closePath();\n            }\n            if (this._doFill) {\n              ctx.fill();\n            }\n            if (this._doStroke) {\n              ctx.stroke();\n            }\n            this._pixelsState._pixelsDirty = true;\n            return this;\n          };\n\n          p5.Renderer2D.prototype.triangle = function(args) {\n            var ctx = this.drawingContext;\n            var doFill = this._doFill,\n              doStroke = this._doStroke;\n            var x1 = args[0],\n              y1 = args[1];\n            var x2 = args[2],\n              y2 = args[3];\n            var x3 = args[4],\n              y3 = args[5];\n            if (doFill && !doStroke) {\n              if (this._getFill() === styleEmpty) {\n                return this;\n              }\n            } else if (!doFill && doStroke) {\n              if (this._getStroke() === styleEmpty) {\n                return this;\n              }\n            }\n            ctx.beginPath();\n            ctx.moveTo(x1, y1);\n            ctx.lineTo(x2, y2);\n            ctx.lineTo(x3, y3);\n            ctx.closePath();\n            if (doFill) {\n              ctx.fill();\n              this._pixelsState._pixelsDirty = true;\n            }\n            if (doStroke) {\n              ctx.stroke();\n              this._pixelsState._pixelsDirty = true;\n            }\n          };\n\n          p5.Renderer2D.prototype.endShape = function(\n            mode,\n            vertices,\n            isCurve,\n            isBezier,\n            isQuadratic,\n            isContour,\n            shapeKind\n          ) {\n            if (vertices.length === 0) {\n              return this;\n            }\n            if (!this._doStroke && !this._doFill) {\n              return this;\n            }\n            var closeShape = mode === constants.CLOSE;\n            var v;\n            if (closeShape && !isContour) {\n              vertices.push(vertices[0]);\n            }\n            var i, j;\n            var numVerts = vertices.length;\n            if (isCurve && (shapeKind === constants.POLYGON || shapeKind === null)) {\n              if (numVerts > 3) {\n                var b = [],\n                  s = 1 - this._curveTightness;\n                this.drawingContext.beginPath();\n                this.drawingContext.moveTo(vertices[1][0], vertices[1][1]);\n                for (i = 1; i + 2 < numVerts; i++) {\n                  v = vertices[i];\n                  b[0] = [v[0], v[1]];\n                  b[1] = [\n                    v[0] + (s * vertices[i + 1][0] - s * vertices[i - 1][0]) / 6,\n                    v[1] + (s * vertices[i + 1][1] - s * vertices[i - 1][1]) / 6\n                  ];\n\n                  b[2] = [\n                    vertices[i + 1][0] + (s * vertices[i][0] - s * vertices[i + 2][0]) / 6,\n                    vertices[i + 1][1] + (s * vertices[i][1] - s * vertices[i + 2][1]) / 6\n                  ];\n\n                  b[3] = [vertices[i + 1][0], vertices[i + 1][1]];\n                  this.drawingContext.bezierCurveTo(\n                    b[1][0],\n                    b[1][1],\n                    b[2][0],\n                    b[2][1],\n                    b[3][0],\n                    b[3][1]\n                  );\n                }\n                if (closeShape) {\n                  this.drawingContext.lineTo(vertices[i + 1][0], vertices[i + 1][1]);\n                }\n                this._doFillStrokeClose(closeShape);\n              }\n            } else if (\n              isBezier &&\n              (shapeKind === constants.POLYGON || shapeKind === null)\n            ) {\n              this.drawingContext.beginPath();\n              for (i = 0; i < numVerts; i++) {\n                if (vertices[i].isVert) {\n                  if (vertices[i].moveTo) {\n                    this.drawingContext.moveTo(vertices[i][0], vertices[i][1]);\n                  } else {\n                    this.drawingContext.lineTo(vertices[i][0], vertices[i][1]);\n                  }\n                } else {\n                  this.drawingContext.bezierCurveTo(\n                    vertices[i][0],\n                    vertices[i][1],\n                    vertices[i][2],\n                    vertices[i][3],\n                    vertices[i][4],\n                    vertices[i][5]\n                  );\n                }\n              }\n              this._doFillStrokeClose(closeShape);\n            } else if (\n              isQuadratic &&\n              (shapeKind === constants.POLYGON || shapeKind === null)\n            ) {\n              this.drawingContext.beginPath();\n              for (i = 0; i < numVerts; i++) {\n                if (vertices[i].isVert) {\n                  if (vertices[i].moveTo) {\n                    this.drawingContext.moveTo(vertices[i][0], vertices[i][1]);\n                  } else {\n                    this.drawingContext.lineTo(vertices[i][0], vertices[i][1]);\n                  }\n                } else {\n                  this.drawingContext.quadraticCurveTo(\n                    vertices[i][0],\n                    vertices[i][1],\n                    vertices[i][2],\n                    vertices[i][3]\n                  );\n                }\n              }\n              this._doFillStrokeClose(closeShape);\n            } else {\n              if (shapeKind === constants.POINTS) {\n                for (i = 0; i < numVerts; i++) {\n                  v = vertices[i];\n                  if (this._doStroke) {\n                    this._pInst.stroke(v[6]);\n                  }\n                  this._pInst.point(v[0], v[1]);\n                }\n              } else if (shapeKind === constants.LINES) {\n                for (i = 0; i + 1 < numVerts; i += 2) {\n                  v = vertices[i];\n                  if (this._doStroke) {\n                    this._pInst.stroke(vertices[i + 1][6]);\n                  }\n                  this._pInst.line(v[0], v[1], vertices[i + 1][0], vertices[i + 1][1]);\n                }\n              } else if (shapeKind === constants.TRIANGLES) {\n                for (i = 0; i + 2 < numVerts; i += 3) {\n                  v = vertices[i];\n                  this.drawingContext.beginPath();\n                  this.drawingContext.moveTo(v[0], v[1]);\n                  this.drawingContext.lineTo(vertices[i + 1][0], vertices[i + 1][1]);\n                  this.drawingContext.lineTo(vertices[i + 2][0], vertices[i + 2][1]);\n                  this.drawingContext.closePath();\n                  if (this._doFill) {\n                    this._pInst.fill(vertices[i + 2][5]);\n                    this.drawingContext.fill();\n                  }\n                  if (this._doStroke) {\n                    this._pInst.stroke(vertices[i + 2][6]);\n                    this.drawingContext.stroke();\n                  }\n                }\n              } else if (shapeKind === constants.TRIANGLE_STRIP) {\n                for (i = 0; i + 1 < numVerts; i++) {\n                  v = vertices[i];\n                  this.drawingContext.beginPath();\n                  this.drawingContext.moveTo(vertices[i + 1][0], vertices[i + 1][1]);\n                  this.drawingContext.lineTo(v[0], v[1]);\n                  if (this._doStroke) {\n                    this._pInst.stroke(vertices[i + 1][6]);\n                  }\n                  if (this._doFill) {\n                    this._pInst.fill(vertices[i + 1][5]);\n                  }\n                  if (i + 2 < numVerts) {\n                    this.drawingContext.lineTo(vertices[i + 2][0], vertices[i + 2][1]);\n                    if (this._doStroke) {\n                      this._pInst.stroke(vertices[i + 2][6]);\n                    }\n                    if (this._doFill) {\n                      this._pInst.fill(vertices[i + 2][5]);\n                    }\n                  }\n                  this._doFillStrokeClose(closeShape);\n                }\n              } else if (shapeKind === constants.TRIANGLE_FAN) {\n                if (numVerts > 2) {\n                  // For performance reasons, try to batch as many of the\n                  // fill and stroke calls as possible.\n                  this.drawingContext.beginPath();\n                  for (i = 2; i < numVerts; i++) {\n                    v = vertices[i];\n                    this.drawingContext.moveTo(vertices[0][0], vertices[0][1]);\n                    this.drawingContext.lineTo(vertices[i - 1][0], vertices[i - 1][1]);\n                    this.drawingContext.lineTo(v[0], v[1]);\n                    this.drawingContext.lineTo(vertices[0][0], vertices[0][1]);\n                    // If the next colour is going to be different, stroke / fill now\n                    if (i < numVerts - 1) {\n                      if (\n                        (this._doFill && v[5] !== vertices[i + 1][5]) ||\n                        (this._doStroke && v[6] !== vertices[i + 1][6])\n                      ) {\n                        if (this._doFill) {\n                          this._pInst.fill(v[5]);\n                          this.drawingContext.fill();\n                          this._pInst.fill(vertices[i + 1][5]);\n                        }\n                        if (this._doStroke) {\n                          this._pInst.stroke(v[6]);\n                          this.drawingContext.stroke();\n                          this._pInst.stroke(vertices[i + 1][6]);\n                        }\n                        this.drawingContext.closePath();\n                        this.drawingContext.beginPath(); // Begin the next one\n                      }\n                    }\n                  }\n                  this._doFillStrokeClose(closeShape);\n                }\n              } else if (shapeKind === constants.QUADS) {\n                for (i = 0; i + 3 < numVerts; i += 4) {\n                  v = vertices[i];\n                  this.drawingContext.beginPath();\n                  this.drawingContext.moveTo(v[0], v[1]);\n                  for (j = 1; j < 4; j++) {\n                    this.drawingContext.lineTo(vertices[i + j][0], vertices[i + j][1]);\n                  }\n                  this.drawingContext.lineTo(v[0], v[1]);\n                  if (this._doFill) {\n                    this._pInst.fill(vertices[i + 3][5]);\n                  }\n                  if (this._doStroke) {\n                    this._pInst.stroke(vertices[i + 3][6]);\n                  }\n                  this._doFillStrokeClose(closeShape);\n                }\n              } else if (shapeKind === constants.QUAD_STRIP) {\n                if (numVerts > 3) {\n                  for (i = 0; i + 1 < numVerts; i += 2) {\n                    v = vertices[i];\n                    this.drawingContext.beginPath();\n                    if (i + 3 < numVerts) {\n                      this.drawingContext.moveTo(vertices[i + 2][0], vertices[i + 2][1]);\n                      this.drawingContext.lineTo(v[0], v[1]);\n                      this.drawingContext.lineTo(vertices[i + 1][0], vertices[i + 1][1]);\n                      this.drawingContext.lineTo(vertices[i + 3][0], vertices[i + 3][1]);\n                      if (this._doFill) {\n                        this._pInst.fill(vertices[i + 3][5]);\n                      }\n                      if (this._doStroke) {\n                        this._pInst.stroke(vertices[i + 3][6]);\n                      }\n                    } else {\n                      this.drawingContext.moveTo(v[0], v[1]);\n                      this.drawingContext.lineTo(vertices[i + 1][0], vertices[i + 1][1]);\n                    }\n                    this._doFillStrokeClose(closeShape);\n                  }\n                }\n              } else {\n                this.drawingContext.beginPath();\n                this.drawingContext.moveTo(vertices[0][0], vertices[0][1]);\n                for (i = 1; i < numVerts; i++) {\n                  v = vertices[i];\n                  if (v.isVert) {\n                    if (v.moveTo) {\n                      this.drawingContext.moveTo(v[0], v[1]);\n                    } else {\n                      this.drawingContext.lineTo(v[0], v[1]);\n                    }\n                  }\n                }\n                this._doFillStrokeClose(closeShape);\n              }\n            }\n            isCurve = false;\n            isBezier = false;\n            isQuadratic = false;\n            isContour = false;\n            if (closeShape) {\n              vertices.pop();\n            }\n\n            this._pixelsState._pixelsDirty = true;\n            return this;\n          };\n          //////////////////////////////////////////////\n          // SHAPE | Attributes\n          //////////////////////////////////////////////\n\n          p5.Renderer2D.prototype.strokeCap = function(cap) {\n            if (\n              cap === constants.ROUND ||\n              cap === constants.SQUARE ||\n              cap === constants.PROJECT\n            ) {\n              this.drawingContext.lineCap = cap;\n            }\n            return this;\n          };\n\n          p5.Renderer2D.prototype.strokeJoin = function(join) {\n            if (\n              join === constants.ROUND ||\n              join === constants.BEVEL ||\n              join === constants.MITER\n            ) {\n              this.drawingContext.lineJoin = join;\n            }\n            return this;\n          };\n\n          p5.Renderer2D.prototype.strokeWeight = function(w) {\n            if (typeof w === 'undefined' || w === 0) {\n              // hack because lineWidth 0 doesn't work\n              this.drawingContext.lineWidth = 0.0001;\n            } else {\n              this.drawingContext.lineWidth = w;\n            }\n            return this;\n          };\n\n          p5.Renderer2D.prototype._getFill = function() {\n            if (!this._cachedFillStyle) {\n              this._cachedFillStyle = this.drawingContext.fillStyle;\n            }\n            return this._cachedFillStyle;\n          };\n\n          p5.Renderer2D.prototype._setFill = function(fillStyle) {\n            if (fillStyle !== this._cachedFillStyle) {\n              this.drawingContext.fillStyle = fillStyle;\n              this._cachedFillStyle = fillStyle;\n            }\n          };\n\n          p5.Renderer2D.prototype._getStroke = function() {\n            if (!this._cachedStrokeStyle) {\n              this._cachedStrokeStyle = this.drawingContext.strokeStyle;\n            }\n            return this._cachedStrokeStyle;\n          };\n\n          p5.Renderer2D.prototype._setStroke = function(strokeStyle) {\n            if (strokeStyle !== this._cachedStrokeStyle) {\n              this.drawingContext.strokeStyle = strokeStyle;\n              this._cachedStrokeStyle = strokeStyle;\n            }\n          };\n\n          //////////////////////////////////////////////\n          // SHAPE | Curves\n          //////////////////////////////////////////////\n          p5.Renderer2D.prototype.bezier = function(x1, y1, x2, y2, x3, y3, x4, y4) {\n            this._pInst.beginShape();\n            this._pInst.vertex(x1, y1);\n            this._pInst.bezierVertex(x2, y2, x3, y3, x4, y4);\n            this._pInst.endShape();\n            return this;\n          };\n\n          p5.Renderer2D.prototype.curve = function(x1, y1, x2, y2, x3, y3, x4, y4) {\n            this._pInst.beginShape();\n            this._pInst.curveVertex(x1, y1);\n            this._pInst.curveVertex(x2, y2);\n            this._pInst.curveVertex(x3, y3);\n            this._pInst.curveVertex(x4, y4);\n            this._pInst.endShape();\n            return this;\n          };\n\n          //////////////////////////////////////////////\n          // SHAPE | Vertex\n          //////////////////////////////////////////////\n\n          p5.Renderer2D.prototype._doFillStrokeClose = function(closeShape) {\n            if (closeShape) {\n              this.drawingContext.closePath();\n            }\n            if (this._doFill) {\n              this.drawingContext.fill();\n            }\n            if (this._doStroke) {\n              this.drawingContext.stroke();\n            }\n\n            this._pixelsState._pixelsDirty = true;\n          };\n\n          //////////////////////////////////////////////\n          // TRANSFORM\n          //////////////////////////////////////////////\n\n          p5.Renderer2D.prototype.applyMatrix = function(a, b, c, d, e, f) {\n            this.drawingContext.transform(a, b, c, d, e, f);\n          };\n\n          p5.Renderer2D.prototype.resetMatrix = function() {\n            this.drawingContext.setTransform(1, 0, 0, 1, 0, 0);\n            this.drawingContext.scale(this._pInst._pixelDensity, this._pInst._pixelDensity);\n\n            return this;\n          };\n\n          p5.Renderer2D.prototype.rotate = function(rad) {\n            this.drawingContext.rotate(rad);\n          };\n\n          p5.Renderer2D.prototype.scale = function(x, y) {\n            this.drawingContext.scale(x, y);\n            return this;\n          };\n\n          p5.Renderer2D.prototype.translate = function(x, y) {\n            // support passing a vector as the 1st parameter\n            if (x instanceof p5.Vector) {\n              y = x.y;\n              x = x.x;\n            }\n            this.drawingContext.translate(x, y);\n            return this;\n          };\n\n          //////////////////////////////////////////////\n          // TYPOGRAPHY\n          //\n          //////////////////////////////////////////////\n\n          p5.Renderer2D.prototype.text = function(str, x, y, maxWidth, maxHeight) {\n            var baselineHacked;\n\n            // baselineHacked: (HACK)\n            // A temporary fix to conform to Processing's implementation\n            // of BASELINE vertical alignment in a bounding box\n\n            if (typeof maxWidth !== 'undefined') {\n              if (this.drawingContext.textBaseline === constants.BASELINE) {\n                baselineHacked = true;\n                this.drawingContext.textBaseline = constants.TOP;\n              }\n            }\n\n            var p = p5.Renderer.prototype.text.apply(this, arguments);\n\n            if (baselineHacked) {\n              this.drawingContext.textBaseline = constants.BASELINE;\n            }\n\n            return p;\n          };\n\n          p5.Renderer2D.prototype._renderText = function(p, line, x, y, maxY) {\n            if (y >= maxY) {\n              return; // don't render lines beyond our maxY position\n            }\n\n            p.push(); // fix to #803\n\n            if (!this._isOpenType()) {\n              // a system/browser font\n\n              // no stroke unless specified by user\n              if (this._doStroke && this._strokeSet) {\n                this.drawingContext.strokeText(line, x, y);\n              }\n\n              if (this._doFill) {\n                // if fill hasn't been set by user, use default text fill\n                if (!this._fillSet) {\n                  this._setFill(constants._DEFAULT_TEXT_FILL);\n                }\n\n                this.drawingContext.fillText(line, x, y);\n              }\n            } else {\n              // an opentype font, let it handle the rendering\n\n              this._textFont._renderPath(line, x, y, { renderer: this });\n            }\n\n            p.pop();\n\n            this._pixelsState._pixelsDirty = true;\n            return p;\n          };\n\n          p5.Renderer2D.prototype.textWidth = function(s) {\n            if (this._isOpenType()) {\n              return this._textFont._textWidth(s, this._textSize);\n            }\n\n            return this.drawingContext.measureText(s).width;\n          };\n\n          p5.Renderer2D.prototype._applyTextProperties = function() {\n            var font,\n              p = this._pInst;\n\n            this._setProperty('_textAscent', null);\n            this._setProperty('_textDescent', null);\n\n            font = this._textFont;\n\n            if (this._isOpenType()) {\n              font = this._textFont.font.familyName;\n              this._setProperty('_textStyle', this._textFont.font.styleName);\n            }\n\n            this.drawingContext.font =\n              (this._textStyle || 'normal') +\n              ' ' +\n              (this._textSize || 12) +\n              'px ' +\n              (font || 'sans-serif');\n\n            this.drawingContext.textAlign = this._textAlign;\n            if (this._textBaseline === constants.CENTER) {\n              this.drawingContext.textBaseline = constants._CTX_MIDDLE;\n            } else {\n              this.drawingContext.textBaseline = this._textBaseline;\n            }\n\n            return p;\n          };\n\n          //////////////////////////////////////////////\n          // STRUCTURE\n          //////////////////////////////////////////////\n\n          // a push() operation is in progress.\n          // the renderer should return a 'style' object that it wishes to\n          // store on the push stack.\n          // derived renderers should call the base class' push() method\n          // to fetch the base style object.\n          p5.Renderer2D.prototype.push = function() {\n            this.drawingContext.save();\n\n            // get the base renderer style\n            return p5.Renderer.prototype.push.apply(this);\n          };\n\n          // a pop() operation is in progress\n          // the renderer is passed the 'style' object that it returned\n          // from its push() method.\n          // derived renderers should pass this object to their base\n          // class' pop method\n          p5.Renderer2D.prototype.pop = function(style) {\n            this.drawingContext.restore();\n            // Re-cache the fill / stroke state\n            this._cachedFillStyle = this.drawingContext.fillStyle;\n            this._cachedStrokeStyle = this.drawingContext.strokeStyle;\n\n            p5.Renderer.prototype.pop.call(this, style);\n          };\n\n          module.exports = p5.Renderer2D;\n        },\n        { '../image/filters': 43, './constants': 18, './main': 24, './p5.Renderer': 27 }\n      ],\n      29: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Rendering\n           * @submodule Rendering\n           * @for p5\n           */\n\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n\n          var p5 = _dereq_('./main');\n          var constants = _dereq_('./constants');\n          _dereq_('./p5.Graphics');\n          _dereq_('./p5.Renderer2D');\n          _dereq_('../webgl/p5.RendererGL');\n          var defaultId = 'defaultCanvas0'; // this gets set again in createCanvas\n          var defaultClass = 'p5Canvas';\n\n          /**\n           * Creates a canvas element in the document, and sets the dimensions of it\n           * in pixels. This method should be called only once at the start of setup.\n           * Calling <a href=\"#/p5/createCanvas\">createCanvas</a> more than once in a sketch will result in very\n           * unpredictable behavior. If you want more than one drawing canvas\n           * you could use <a href=\"#/p5/createGraphics\">createGraphics</a> (hidden by default but it can be shown).\n           * <br><br>\n           * The system variables width and height are set by the parameters passed\n           * to this function. If <a href=\"#/p5/createCanvas\">createCanvas()</a> is not used, the window will be\n           * given a default size of 100x100 pixels.\n           * <br><br>\n           * For more ways to position the canvas, see the\n           * <a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'>\n           * positioning the canvas</a> wiki page.\n           *\n           * @method createCanvas\n           * @param  {Number} w width of the canvas\n           * @param  {Number} h height of the canvas\n           * @param  {Constant} [renderer] either P2D or WEBGL\n           * @return {p5.Renderer}\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 50);\n           *   background(153);\n           *   line(0, 0, width, height);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Black line extending from top-left of canvas to bottom right.\n           *\n           */\n\n          p5.prototype.createCanvas = function(w, h, renderer) {\n            p5._validateParameters('createCanvas', arguments);\n            //optional: renderer, otherwise defaults to p2d\n            var r = renderer || constants.P2D;\n            var c;\n\n            if (r === constants.WEBGL) {\n              c = document.getElementById(defaultId);\n              if (c) {\n                //if defaultCanvas already exists\n                c.parentNode.removeChild(c); //replace the existing defaultCanvas\n                var thisRenderer = this._renderer;\n                this._elements = this._elements.filter(function(e) {\n                  return e !== thisRenderer;\n                });\n              }\n              c = document.createElement('canvas');\n              c.id = defaultId;\n              c.classList.add(defaultClass);\n            } else {\n              if (!this._defaultGraphicsCreated) {\n                c = document.createElement('canvas');\n                var i = 0;\n                while (document.getElementById('defaultCanvas' + i)) {\n                  i++;\n                }\n                defaultId = 'defaultCanvas' + i;\n                c.id = defaultId;\n                c.classList.add(defaultClass);\n              } else {\n                // resize the default canvas if new one is created\n                c = this.canvas;\n              }\n            }\n\n            // set to invisible if still in setup (to prevent flashing with manipulate)\n            if (!this._setupDone) {\n              c.dataset.hidden = true; // tag to show later\n              c.style.visibility = 'hidden';\n            }\n\n            if (this._userNode) {\n              // user input node case\n              this._userNode.appendChild(c);\n            } else {\n              document.body.appendChild(c);\n            }\n\n            // Init our graphics renderer\n            //webgl mode\n            if (r === constants.WEBGL) {\n              this._setProperty('_renderer', new p5.RendererGL(c, this, true));\n              this._elements.push(this._renderer);\n            } else {\n              //P2D mode\n              if (!this._defaultGraphicsCreated) {\n                this._setProperty('_renderer', new p5.Renderer2D(c, this, true));\n                this._defaultGraphicsCreated = true;\n                this._elements.push(this._renderer);\n              }\n            }\n            this._renderer.resize(w, h);\n            this._renderer._applyDefaults();\n            return this._renderer;\n          };\n\n          /**\n           * Resizes the canvas to given width and height. The canvas will be cleared\n           * and draw will be called immediately, allowing the sketch to re-render itself\n           * in the resized canvas.\n           * @method resizeCanvas\n           * @param  {Number} w width of the canvas\n           * @param  {Number} h height of the canvas\n           * @param  {Boolean} [noRedraw] don't redraw the canvas immediately\n           * @example\n           * <div class=\"norender\"><code>\n           * function setup() {\n           *   createCanvas(windowWidth, windowHeight);\n           * }\n           *\n           * function draw() {\n           *   background(0, 100, 200);\n           * }\n           *\n           * function windowResized() {\n           *   resizeCanvas(windowWidth, windowHeight);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * No image displayed.\n           *\n           */\n          p5.prototype.resizeCanvas = function(w, h, noRedraw) {\n            p5._validateParameters('resizeCanvas', arguments);\n            if (this._renderer) {\n              // save canvas properties\n              var props = {};\n              for (var key in this.drawingContext) {\n                var val = this.drawingContext[key];\n                if (_typeof(val) !== 'object' && typeof val !== 'function') {\n                  props[key] = val;\n                }\n              }\n              this._renderer.resize(w, h);\n              this.width = w;\n              this.height = h;\n              // reset canvas properties\n              for (var savedKey in props) {\n                try {\n                  this.drawingContext[savedKey] = props[savedKey];\n                } catch (err) {\n                  // ignore read-only property errors\n                }\n              }\n              if (!noRedraw) {\n                this.redraw();\n              }\n            }\n          };\n\n          /**\n           * Removes the default canvas for a p5 sketch that doesn't\n           * require a canvas\n           * @method noCanvas\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   noCanvas();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no image displayed\n           *\n           */\n          p5.prototype.noCanvas = function() {\n            if (this.canvas) {\n              this.canvas.parentNode.removeChild(this.canvas);\n            }\n          };\n\n          /**\n           * Creates and returns a new p5.Renderer object. Use this class if you need\n           * to draw into an off-screen graphics buffer. The two parameters define the\n           * width and height in pixels.\n           *\n           * @method createGraphics\n           * @param  {Number} w width of the offscreen graphics buffer\n           * @param  {Number} h height of the offscreen graphics buffer\n           * @param  {Constant} [renderer] either P2D or WEBGL\n           * undefined defaults to p2d\n           * @return {p5.Graphics} offscreen graphics buffer\n           * @example\n           * <div>\n           * <code>\n           * let pg;\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   pg = createGraphics(100, 100);\n           * }\n           * function draw() {\n           *   background(200);\n           *   pg.background(100);\n           *   pg.noStroke();\n           *   pg.ellipse(pg.width / 2, pg.height / 2, 50, 50);\n           *   image(pg, 50, 50);\n           *   image(pg, 0, 0, 50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 4 grey squares alternating light and dark grey. White quarter circle mid-left.\n           *\n           */\n          p5.prototype.createGraphics = function(w, h, renderer) {\n            p5._validateParameters('createGraphics', arguments);\n            return new p5.Graphics(w, h, renderer, this);\n          };\n\n          /**\n           * Blends the pixels in the display window according to the defined mode.\n           * There is a choice of the following modes to blend the source pixels (A)\n           * with the ones of pixels already in the display window (B):\n           * <ul>\n           * <li><code>BLEND</code> - linear interpolation of colours: C =\n           * A\\*factor + B. <b>This is the default blending mode.</b></li>\n           * <li><code>ADD</code> - sum of A and B</li>\n           * <li><code>DARKEST</code> - only the darkest colour succeeds: C =\n           * min(A\\*factor, B).</li>\n           * <li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\n           * max(A\\*factor, B).</li>\n           * <li><code>DIFFERENCE</code> - subtract colors from underlying image.</li>\n           * <li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\n           * extreme.</li>\n           * <li><code>MULTIPLY</code> - multiply the colors, result will always be\n           * darker.</li>\n           * <li><code>SCREEN</code> - opposite multiply, uses inverse values of the\n           * colors.</li>\n           * <li><code>REPLACE</code> - the pixels entirely replace the others and\n           * don't utilize alpha (transparency) values.</li>\n           * <li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n           * </code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n           * <li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\n           * gray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n           * <li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n           * <code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n           * </li>\n           * <li><code>DODGE</code> - lightens light tones and increases contrast,\n           * ignores darks. <em>(2D)</em></li>\n           * <li><code>BURN</code> - darker areas are applied, increasing contrast,\n           * ignores lights. <em>(2D)</em></li>\n           * <li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n           * </ul>\n           * <br><br>\n           * <em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n           * <em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.\n           *\n           *\n           * @method blendMode\n           * @param  {Constant} mode blend mode to set for canvas.\n           *                either BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY,\n           *                EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n           *                SOFT_LIGHT, DODGE, BURN, ADD, or SUBTRACT\n           * @example\n           * <div>\n           * <code>\n           * blendMode(LIGHTEST);\n           * strokeWeight(30);\n           * stroke(80, 150, 255);\n           * line(25, 25, 75, 75);\n           * stroke(255, 50, 50);\n           * line(75, 25, 25, 75);\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * blendMode(MULTIPLY);\n           * strokeWeight(30);\n           * stroke(80, 150, 255);\n           * line(25, 25, 75, 75);\n           * stroke(255, 50, 50);\n           * line(75, 25, 25, 75);\n           * </code>\n           * </div>\n           * @alt\n           * translucent image thick red & blue diagonal rounded lines intersecting center\n           * Thick red & blue diagonal rounded lines intersecting center. dark at overlap\n           *\n           */\n          p5.prototype.blendMode = function(mode) {\n            p5._validateParameters('blendMode', arguments);\n            if (mode === constants.NORMAL) {\n              // Warning added 3/26/19, can be deleted in future (1.0 release?)\n              console.warn(\n                'NORMAL has been deprecated for use in blendMode. defaulting to BLEND instead.'\n              );\n\n              mode = constants.BLEND;\n            }\n            this._renderer.blendMode(mode);\n          };\n\n          module.exports = p5;\n        },\n        {\n          '../webgl/p5.RendererGL': 75,\n          './constants': 18,\n          './main': 24,\n          './p5.Graphics': 26,\n          './p5.Renderer2D': 28\n        }\n      ],\n      30: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Shape\n           * @submodule 2D Primitives\n           * @for p5\n           * @requires core\n           * @requires constants\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../main');\n          var constants = _dereq_('../constants');\n          var canvas = _dereq_('../helpers');\n          _dereq_('../error_helpers');\n\n          /**\n           * This function does 3 things:\n           *\n           *   1. Bounds the desired start/stop angles for an arc (in radians) so that:\n           *\n           *          0 <= start < TWO_PI ;    start <= stop < start + TWO_PI\n           *\n           *      This means that the arc rendering functions don't have to be concerned\n           *      with what happens if stop is smaller than start, or if the arc 'goes\n           *      round more than once', etc.: they can just start at start and increase\n           *      until stop and the correct arc will be drawn.\n           *\n           *   2. Optionally adjusts the angles within each quadrant to counter the naive\n           *      scaling of the underlying ellipse up from the unit circle.  Without\n           *      this, the angles become arbitrary when width != height: 45 degrees\n           *      might be drawn at 5 degrees on a 'wide' ellipse, or at 85 degrees on\n           *      a 'tall' ellipse.\n           *\n           *   3. Flags up when start and stop correspond to the same place on the\n           *      underlying ellipse.  This is useful if you want to do something special\n           *      there (like rendering a whole ellipse instead).\n           */\n          p5.prototype._normalizeArcAngles = function(\n            start,\n            stop,\n            width,\n            height,\n            correctForScaling\n          ) {\n            var epsilon = 0.00001; // Smallest visible angle on displays up to 4K.\n            var separation;\n\n            // The order of the steps is important here: each one builds upon the\n            // adjustments made in the steps that precede it.\n\n            // Constrain both start and stop to [0,TWO_PI).\n            start = start - constants.TWO_PI * Math.floor(start / constants.TWO_PI);\n            stop = stop - constants.TWO_PI * Math.floor(stop / constants.TWO_PI);\n\n            // Get the angular separation between the requested start and stop points.\n            //\n            // Technically this separation only matches what gets drawn if\n            // correctForScaling is enabled.  We could add a more complicated calculation\n            // for when the scaling is uncorrected (in which case the drawn points could\n            // end up pushed together or pulled apart quite dramatically relative to what\n            // was requested), but it would make things more opaque for little practical\n            // benefit.\n            //\n            // (If you do disable correctForScaling and find that correspondToSamePoint\n            // is set too aggressively, the easiest thing to do is probably to just make\n            // epsilon smaller...)\n            separation = Math.min(\n              Math.abs(start - stop),\n              constants.TWO_PI - Math.abs(start - stop)\n            );\n\n            // Optionally adjust the angles to counter linear scaling.\n            if (correctForScaling) {\n              if (start <= constants.HALF_PI) {\n                start = Math.atan(width / height * Math.tan(start));\n              } else if (start > constants.HALF_PI && start <= 3 * constants.HALF_PI) {\n                start = Math.atan(width / height * Math.tan(start)) + constants.PI;\n              } else {\n                start = Math.atan(width / height * Math.tan(start)) + constants.TWO_PI;\n              }\n              if (stop <= constants.HALF_PI) {\n                stop = Math.atan(width / height * Math.tan(stop));\n              } else if (stop > constants.HALF_PI && stop <= 3 * constants.HALF_PI) {\n                stop = Math.atan(width / height * Math.tan(stop)) + constants.PI;\n              } else {\n                stop = Math.atan(width / height * Math.tan(stop)) + constants.TWO_PI;\n              }\n            }\n\n            // Ensure that start <= stop < start + TWO_PI.\n            if (start > stop) {\n              stop += constants.TWO_PI;\n            }\n\n            return {\n              start: start,\n              stop: stop,\n              correspondToSamePoint: separation < epsilon\n            };\n          };\n\n          /**\n           * Draw an arc to the screen. If called with only x, y, w, h, start, and\n           * stop, the arc will be drawn and filled as an open pie segment. If a mode parameter is provided, the arc\n           * will be filled like an open semi-circle (OPEN) , a closed semi-circle (CHORD), or as a closed pie segment (PIE). The\n           * origin may be changed with the <a href=\"#/p5/ellipseMode\">ellipseMode()</a> function.<br><br>\n           * The arc is always drawn clockwise from wherever start falls to wherever stop falls on the ellipse.\n           * Adding or subtracting TWO_PI to either angle does not change where they fall.\n           * If both start and stop fall at the same place, a full ellipse will be drawn. Be aware that the the\n           * y-axis increases in the downward direction therefore the values of PI is counter clockwise.\n           * @method arc\n           * @param  {Number} x      x-coordinate of the arc's ellipse\n           * @param  {Number} y      y-coordinate of the arc's ellipse\n           * @param  {Number} w      width of the arc's ellipse by default\n           * @param  {Number} h      height of the arc's ellipse by default\n           * @param  {Number} start  angle to start the arc, specified in radians\n           * @param  {Number} stop   angle to stop the arc, specified in radians\n           * @param  {Constant} [mode] optional parameter to determine the way of drawing\n           *                         the arc. either CHORD, PIE or OPEN\n           * @param  {Number} [detail] optional parameter for WebGL mode only. This is to\n           *                         specify the number of vertices that makes up the\n           *                         perimeter of the arc. Default value is 25.\n           *\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * arc(50, 55, 50, 50, 0, HALF_PI);\n           * noFill();\n           * arc(50, 55, 60, 60, HALF_PI, PI);\n           * arc(50, 55, 70, 70, PI, PI + QUARTER_PI);\n           * arc(50, 55, 80, 80, PI + QUARTER_PI, TWO_PI);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * arc(50, 50, 80, 80, 0, PI + QUARTER_PI);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * arc(50, 50, 80, 80, 0, PI + QUARTER_PI, OPEN);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * arc(50, 50, 80, 80, 0, PI + QUARTER_PI, CHORD);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * arc(50, 50, 80, 80, 0, PI + QUARTER_PI, PIE);\n           * </code>\n           * </div>\n           *\n           * @alt\n           *shattered outline of an ellipse with a quarter of a white circle bottom-right.\n           *white ellipse with top right quarter missing.\n           *white ellipse with black outline with top right missing.\n           *white ellipse with top right missing with black outline around shape.\n           *white ellipse with top right quarter missing with black outline around the shape.\n           *\n           */\n          p5.prototype.arc = function(x, y, w, h, start, stop, mode, detail) {\n            p5._validateParameters('arc', arguments);\n\n            // if the current stroke and fill settings wouldn't result in something\n            // visible, exit immediately\n            if (!this._renderer._doStroke && !this._renderer._doFill) {\n              return this;\n            }\n\n            start = this._toRadians(start);\n            stop = this._toRadians(stop);\n\n            // p5 supports negative width and heights for ellipses\n            w = Math.abs(w);\n            h = Math.abs(h);\n\n            var vals = canvas.modeAdjust(x, y, w, h, this._renderer._ellipseMode);\n            var angles = this._normalizeArcAngles(start, stop, vals.w, vals.h, true);\n\n            if (angles.correspondToSamePoint) {\n              // If the arc starts and ends at (near enough) the same place, we choose to\n              // draw an ellipse instead.  This is preferable to faking an ellipse (by\n              // making stop ever-so-slightly less than start + TWO_PI) because the ends\n              // join up to each other rather than at a vertex at the centre (leaving\n              // an unwanted spike in the stroke/fill).\n              this._renderer.ellipse([vals.x, vals.y, vals.w, vals.h, detail]);\n            } else {\n              this._renderer.arc(\n                vals.x,\n                vals.y,\n                vals.w,\n                vals.h,\n                angles.start, // [0, TWO_PI)\n                angles.stop, // [start, start + TWO_PI)\n                mode,\n                detail\n              );\n            }\n\n            return this;\n          };\n\n          /**\n           * Draws an ellipse (oval) to the screen. An ellipse with equal width and\n           * height is a circle. By default, the first two parameters set the location,\n           * and the third and fourth parameters set the shape's width and height. If\n           * no height is specified, the value of width is used for both the width and\n           * height. If a negative height or width is specified, the absolute value is taken.\n           * The origin may be changed with the <a href=\"#/p5/ellipseMode\">ellipseMode()</a> function.\n           *\n           * @method ellipse\n           * @param  {Number} x x-coordinate of the ellipse.\n           * @param  {Number} y y-coordinate of the ellipse.\n           * @param  {Number} w width of the ellipse.\n           * @param  {Number} [h] height of the ellipse.\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * ellipse(56, 46, 55, 55);\n           * </code>\n           * </div>\n           *\n           * @alt\n           *white ellipse with black outline in middle-right of canvas that is 55x55.\n           *\n           */\n          /**\n           * @method ellipse\n           * @param  {Number} x\n           * @param  {Number} y\n           * @param  {Number} w\n           * @param  {Number} h\n           * @param  {Integer} detail number of radial sectors to draw (for WebGL mode)\n           */\n          p5.prototype.ellipse = function(x, y, w, h, detailX) {\n            p5._validateParameters('ellipse', arguments);\n\n            // if the current stroke and fill settings wouldn't result in something\n            // visible, exit immediately\n            if (!this._renderer._doStroke && !this._renderer._doFill) {\n              return this;\n            }\n\n            // p5 supports negative width and heights for rects\n            if (w < 0) {\n              w = Math.abs(w);\n            }\n\n            if (typeof h === 'undefined') {\n              // Duplicate 3rd argument if only 3 given.\n              h = w;\n            } else if (h < 0) {\n              h = Math.abs(h);\n            }\n\n            var vals = canvas.modeAdjust(x, y, w, h, this._renderer._ellipseMode);\n            this._renderer.ellipse([vals.x, vals.y, vals.w, vals.h, detailX]);\n\n            return this;\n          };\n\n          /**\n           * Draws a circle to the screen. A circle is a simple closed shape.\n           * It is the set of all points in a plane that are at a given distance from a given point, the centre.\n           * This function is a special case of the ellipse() function, where the width and height of the ellipse are the same.\n           * Height and width of the ellipse correspond to the diameter of the circle.\n           * By default, the first two parameters set the location of the centre of the circle, the third sets the diameter of the circle.\n           *\n           * @method circle\n           * @param  {Number} x  x-coordinate of the centre of the circle.\n           * @param  {Number} y  y-coordinate of the centre of the circle.\n           * @param  {Number} d  diameter of the circle.\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // Draw a circle at location (30, 30) with a diameter of 20.\n           * circle(30, 30, 20);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white circle with black outline in mid of canvas that is 55x55.\n           */\n          p5.prototype.circle = function() {\n            var args = Array.prototype.slice.call(arguments, 0, 2);\n            args.push(arguments[2]);\n            args.push(arguments[2]);\n            return this.ellipse.apply(this, args);\n          };\n\n          /**\n           * Draws a line (a direct path between two points) to the screen. The version\n           * of <a href=\"#/p5/line\">line()</a> with four parameters draws the line in 2D. To color a line, use\n           * the <a href=\"#/p5/stroke\">stroke()</a> function. A line cannot be filled, therefore the <a href=\"#/p5/fill\">fill()</a>\n           * function will not affect the color of a line. 2D lines are drawn with a\n           * width of one pixel by default, but this can be changed with the\n           * <a href=\"#/p5/strokeWeight\">strokeWeight()</a> function.\n           *\n           * @method line\n           * @param  {Number} x1 the x-coordinate of the first point\n           * @param  {Number} y1 the y-coordinate of the first point\n           * @param  {Number} x2 the x-coordinate of the second point\n           * @param  {Number} y2 the y-coordinate of the second point\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * line(30, 20, 85, 75);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * line(30, 20, 85, 20);\n           * stroke(126);\n           * line(85, 20, 85, 75);\n           * stroke(255);\n           * line(85, 75, 30, 75);\n           * </code>\n           * </div>\n           *\n           * @alt\n           *line 78 pixels long running from mid-top to bottom-right of canvas.\n           *3 lines of various stroke sizes. Form top, bottom and right sides of a square.\n           *\n           */\n          /**\n           * @method line\n           * @param  {Number} x1\n           * @param  {Number} y1\n           * @param  {Number} z1 the z-coordinate of the first point\n           * @param  {Number} x2\n           * @param  {Number} y2\n           * @param  {Number} z2 the z-coordinate of the second point\n           * @chainable\n           */\n          p5.prototype.line = function() {\n            p5._validateParameters('line', arguments);\n\n            if (this._renderer._doStroke) {\n              this._renderer.line.apply(this._renderer, arguments);\n            }\n\n            return this;\n          };\n\n          /**\n           * Draws a point, a coordinate in space at the dimension of one pixel.\n           * The first parameter is the horizontal value for the point, the second\n           * value is the vertical value for the point. The color of the point is\n           * determined by the current stroke.\n           *\n           * @method point\n           * @param  {Number} x the x-coordinate\n           * @param  {Number} y the y-coordinate\n           * @param  {Number} [z] the z-coordinate (for WebGL mode)\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * point(30, 20);\n           * point(85, 20);\n           * point(85, 75);\n           * point(30, 75);\n           * </code>\n           * </div>\n           *\n           * @alt\n           *4 points centered in the middle-right of the canvas.\n           *\n           */\n          p5.prototype.point = function() {\n            p5._validateParameters('point', arguments);\n\n            if (this._renderer._doStroke) {\n              this._renderer.point.apply(this._renderer, arguments);\n            }\n\n            return this;\n          };\n\n          /**\n           * Draw a quad. A quad is a quadrilateral, a four sided polygon. It is\n           * similar to a rectangle, but the angles between its edges are not\n           * constrained to ninety degrees. The first pair of parameters (x1,y1)\n           * sets the first vertex and the subsequent pairs should proceed\n           * clockwise or counter-clockwise around the defined shape.\n           * z-arguments only work when quad() is used in WEBGL mode.\n           *\n           *\n           * @method quad\n           * @param {Number} x1 the x-coordinate of the first point\n           * @param {Number} y1 the y-coordinate of the first point\n           * @param {Number} x2 the x-coordinate of the second point\n           * @param {Number} y2 the y-coordinate of the second point\n           * @param {Number} x3 the x-coordinate of the third point\n           * @param {Number} y3 the y-coordinate of the third point\n           * @param {Number} x4 the x-coordinate of the fourth point\n           * @param {Number} y4 the y-coordinate of the fourth point\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * quad(38, 31, 86, 20, 69, 63, 30, 76);\n           * </code>\n           * </div>\n           *\n           * @alt\n           *irregular white quadrilateral shape with black outline mid-right of canvas.\n           *\n           */\n          /**\n           * @method quad\n           * @param {Number} x1\n           * @param {Number} y1\n           * @param {Number} z1 the z-coordinate of the first point\n           * @param {Number} x2\n           * @param {Number} y2\n           * @param {Number} z2 the z-coordinate of the second point\n           * @param {Number} x3\n           * @param {Number} y3\n           * @param {Number} z3 the z-coordinate of the third point\n           * @param {Number} x4\n           * @param {Number} y4\n           * @param {Number} z4 the z-coordinate of the fourth point\n           * @chainable\n           */\n          p5.prototype.quad = function() {\n            p5._validateParameters('quad', arguments);\n\n            if (this._renderer._doStroke || this._renderer._doFill) {\n              if (this._renderer.isP3D && arguments.length !== 12) {\n                // if 3D and we weren't passed 12 args, assume Z is 0\n                // prettier-ignore\n                this._renderer.quad.call(\n      this._renderer,\n      arguments[0], arguments[1], 0,\n      arguments[2], arguments[3], 0,\n      arguments[4], arguments[5], 0,\n      arguments[6], arguments[7], 0);\n              } else {\n                this._renderer.quad.apply(this._renderer, arguments);\n              }\n            }\n\n            return this;\n          };\n\n          /**\n           * Draws a rectangle to the screen. A rectangle is a four-sided shape with\n           * every angle at ninety degrees. By default, the first two parameters set\n           * the location of the upper-left corner, the third sets the width, and the\n           * fourth sets the height. The way these parameters are interpreted, however,\n           * may be changed with the <a href=\"#/p5/rectMode\">rectMode()</a> function.\n           * <br><br>\n           * The fifth, sixth, seventh and eighth parameters, if specified,\n           * determine corner radius for the top-left, top-right, lower-right and\n           * lower-left corners, respectively. An omitted corner radius parameter is set\n           * to the value of the previously specified radius value in the parameter list.\n           *\n           * @method rect\n           * @param  {Number} x  x-coordinate of the rectangle.\n           * @param  {Number} y  y-coordinate of the rectangle.\n           * @param  {Number} w  width of the rectangle.\n           * @param  {Number} h  height of the rectangle.\n           * @param  {Number} [tl] optional radius of top-left corner.\n           * @param  {Number} [tr] optional radius of top-right corner.\n           * @param  {Number} [br] optional radius of bottom-right corner.\n           * @param  {Number} [bl] optional radius of bottom-left corner.\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // Draw a rectangle at location (30, 20) with a width and height of 55.\n           * rect(30, 20, 55, 55);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Draw a rectangle with rounded corners, each having a radius of 20.\n           * rect(30, 20, 55, 55, 20);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Draw a rectangle with rounded corners having the following radii:\n           * // top-left = 20, top-right = 15, bottom-right = 10, bottom-left = 5.\n           * rect(30, 20, 55, 55, 20, 15, 10, 5);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 55x55 white rect with black outline in mid-right of canvas.\n           * 55x55 white rect with black outline and rounded edges in mid-right of canvas.\n           * 55x55 white rect with black outline and rounded edges of different radii.\n           */\n          /**\n           * @method rect\n           * @param  {Number} x\n           * @param  {Number} y\n           * @param  {Number} w\n           * @param  {Number} h\n           * @param  {Integer} [detailX] number of segments in the x-direction (for WebGL mode)\n           * @param  {Integer} [detailY] number of segments in the y-direction (for WebGL mode)\n           * @chainable\n           */\n          p5.prototype.rect = function() {\n            p5._validateParameters('rect', arguments);\n\n            if (this._renderer._doStroke || this._renderer._doFill) {\n              var vals = canvas.modeAdjust(\n                arguments[0],\n                arguments[1],\n                arguments[2],\n                arguments[3],\n                this._renderer._rectMode\n              );\n\n              var args = [vals.x, vals.y, vals.w, vals.h];\n              // append the additional arguments (either cornder radii, or\n              // segment details) to the argument list\n              for (var i = 4; i < arguments.length; i++) {\n                args[i] = arguments[i];\n              }\n              this._renderer.rect(args);\n            }\n\n            return this;\n          };\n\n          /**\n           * Draws a square to the screen. A square is a four-sided shape with\n           * every angle at ninety degrees, and equal side size.\n           * This function is a special case of the rect() function, where the width and height are the same, and the parameter is called \"s\" for side size.\n           * By default, the first two parameters set the location of the upper-left corner, the third sets the side size of the square.\n           * The way these parameters are interpreted, however,\n           * may be changed with the <a href=\"#/p5/rectMode\">rectMode()</a> function.\n           * <br><br>\n           * The fourth, fifth, sixth and seventh parameters, if specified,\n           * determine corner radius for the top-left, top-right, lower-right and\n           * lower-left corners, respectively. An omitted corner radius parameter is set\n           * to the value of the previously specified radius value in the parameter list.\n           *\n           * @method square\n           * @param  {Number} x  x-coordinate of the square.\n           * @param  {Number} y  y-coordinate of the square.\n           * @param  {Number} s  side size of the square.\n           * @param  {Number} [tl] optional radius of top-left corner.\n           * @param  {Number} [tr] optional radius of top-right corner.\n           * @param  {Number} [br] optional radius of bottom-right corner.\n           * @param  {Number} [bl] optional radius of bottom-left corner.\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // Draw a square at location (30, 20) with a side size of 55.\n           * square(30, 20, 55);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Draw a square with rounded corners, each having a radius of 20.\n           * square(30, 20, 55, 20);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Draw a square with rounded corners having the following radii:\n           * // top-left = 20, top-right = 15, bottom-right = 10, bottom-left = 5.\n           * square(30, 20, 55, 20, 15, 10, 5);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 55x55 white square with black outline in mid-right of canvas.\n           * 55x55 white square with black outline and rounded edges in mid-right of canvas.\n           * 55x55 white square with black outline and rounded edges of different radii.\n           */\n          p5.prototype.square = function(x, y, s, tl, tr, br, bl) {\n            return this.rect(x, y, s, s, tl, tr, br, bl);\n          };\n\n          /**\n           * A triangle is a plane created by connecting three points. The first two\n           * arguments specify the first point, the middle two arguments specify the\n           * second point, and the last two arguments specify the third point.\n           *\n           * @method triangle\n           * @param  {Number} x1 x-coordinate of the first point\n           * @param  {Number} y1 y-coordinate of the first point\n           * @param  {Number} x2 x-coordinate of the second point\n           * @param  {Number} y2 y-coordinate of the second point\n           * @param  {Number} x3 x-coordinate of the third point\n           * @param  {Number} y3 y-coordinate of the third point\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * triangle(30, 75, 58, 20, 86, 75);\n           * </code>\n           * </div>\n           *\n           *@alt\n           * white triangle with black outline in mid-right of canvas.\n           *\n           */\n          p5.prototype.triangle = function() {\n            p5._validateParameters('triangle', arguments);\n\n            if (this._renderer._doStroke || this._renderer._doFill) {\n              this._renderer.triangle(arguments);\n            }\n\n            return this;\n          };\n\n          module.exports = p5;\n        },\n        { '../constants': 18, '../error_helpers': 20, '../helpers': 21, '../main': 24 }\n      ],\n      31: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Shape\n           * @submodule Attributes\n           * @for p5\n           * @requires core\n           * @requires constants\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../main');\n          var constants = _dereq_('../constants');\n\n          /**\n           * Modifies the location from which ellipses are drawn by changing the way\n           * in which parameters given to <a href=\"#/p5/ellipse\">ellipse()</a> are interpreted.\n           * <br><br>\n           * The default mode is ellipseMode(CENTER), which interprets the first two\n           * parameters of <a href=\"#/p5/ellipse\">ellipse()</a> as the shape's center point, while the third and\n           * fourth parameters are its width and height.\n           * <br><br>\n           * ellipseMode(RADIUS) also uses the first two parameters of <a href=\"#/p5/ellipse\">ellipse()</a> as\n           * the shape's center point, but uses the third and fourth parameters to\n           * specify half of the shapes's width and height.\n           * <br><br>\n           * ellipseMode(CORNER) interprets the first two parameters of <a href=\"#/p5/ellipse\">ellipse()</a> as\n           * the upper-left corner of the shape, while the third and fourth parameters\n           * are its width and height.\n           * <br><br>\n           * ellipseMode(CORNERS) interprets the first two parameters of <a href=\"#/p5/ellipse\">ellipse()</a> as\n           * the location of one corner of the ellipse's bounding box, and the third\n           * and fourth parameters as the location of the opposite corner.\n           * <br><br>\n           * The parameter must be written in ALL CAPS because Javascript is a\n           * case-sensitive language.\n           *\n           * @method ellipseMode\n           * @param  {Constant} mode either CENTER, RADIUS, CORNER, or CORNERS\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * ellipseMode(RADIUS); // Set ellipseMode to RADIUS\n           * fill(255); // Set fill to white\n           * ellipse(50, 50, 30, 30); // Draw white ellipse using RADIUS mode\n           *\n           * ellipseMode(CENTER); // Set ellipseMode to CENTER\n           * fill(100); // Set fill to gray\n           * ellipse(50, 50, 30, 30); // Draw gray ellipse using CENTER mode\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * ellipseMode(CORNER); // Set ellipseMode is CORNER\n           * fill(255); // Set fill to white\n           * ellipse(25, 25, 50, 50); // Draw white ellipse using CORNER mode\n           *\n           * ellipseMode(CORNERS); // Set ellipseMode to CORNERS\n           * fill(100); // Set fill to gray\n           * ellipse(25, 25, 50, 50); // Draw gray ellipse using CORNERS mode\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 60x60 white ellipse and 30x30 grey ellipse with black outlines at center.\n           * 60x60 white ellipse @center and 30x30 grey ellipse top-right, black outlines.\n           *\n           */\n          p5.prototype.ellipseMode = function(m) {\n            p5._validateParameters('ellipseMode', arguments);\n            if (\n              m === constants.CORNER ||\n              m === constants.CORNERS ||\n              m === constants.RADIUS ||\n              m === constants.CENTER\n            ) {\n              this._renderer._ellipseMode = m;\n            }\n            return this;\n          };\n\n          /**\n           * Draws all geometry with jagged (aliased) edges. Note that <a href=\"#/p5/smooth\">smooth()</a> is\n           * active by default in 2D mode, so it is necessary to call <a href=\"#/p5/noSmooth\">noSmooth()</a> to disable\n           * smoothing of geometry, images, and fonts. In 3D mode, <a href=\"#/p5/noSmooth\">noSmooth()</a> is enabled\n           * by default, so it is necessary to call <a href=\"#/p5/smooth\">smooth()</a> if you would like\n           * smooth (antialiased) edges on your geometry.\n           *\n           * @method noSmooth\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * background(0);\n           * noStroke();\n           * smooth();\n           * ellipse(30, 48, 36, 36);\n           * noSmooth();\n           * ellipse(70, 48, 36, 36);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 2 pixelated 36x36 white ellipses to left & right of center, black background\n           *\n           */\n          p5.prototype.noSmooth = function() {\n            this.setAttributes('antialias', false);\n            if ('imageSmoothingEnabled' in this.drawingContext) {\n              this.drawingContext.imageSmoothingEnabled = false;\n            }\n            return this;\n          };\n\n          /**\n           * Modifies the location from which rectangles are drawn by changing the way\n           * in which parameters given to <a href=\"#/p5/rect\">rect()</a> are interpreted.\n           * <br><br>\n           * The default mode is rectMode(CORNER), which interprets the first two\n           * parameters of <a href=\"#/p5/rect\">rect()</a> as the upper-left corner of the shape, while the\n           * third and fourth parameters are its width and height.\n           * <br><br>\n           * rectMode(CORNERS) interprets the first two parameters of <a href=\"#/p5/rect\">rect()</a> as the\n           * location of one corner, and the third and fourth parameters as the\n           * location of the opposite corner.\n           * <br><br>\n           * rectMode(CENTER) interprets the first two parameters of <a href=\"#/p5/rect\">rect()</a> as the\n           * shape's center point, while the third and fourth parameters are its\n           * width and height.\n           * <br><br>\n           * rectMode(RADIUS) also uses the first two parameters of <a href=\"#/p5/rect\">rect()</a> as the\n           * shape's center point, but uses the third and fourth parameters to specify\n           * half of the shapes's width and height.\n           * <br><br>\n           * The parameter must be written in ALL CAPS because Javascript is a\n           * case-sensitive language.\n           *\n           * @method rectMode\n           * @param  {Constant} mode either CORNER, CORNERS, CENTER, or RADIUS\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * rectMode(CORNER); // Default rectMode is CORNER\n           * fill(255); // Set fill to white\n           * rect(25, 25, 50, 50); // Draw white rect using CORNER mode\n           *\n           * rectMode(CORNERS); // Set rectMode to CORNERS\n           * fill(100); // Set fill to gray\n           * rect(25, 25, 50, 50); // Draw gray rect using CORNERS mode\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * rectMode(RADIUS); // Set rectMode to RADIUS\n           * fill(255); // Set fill to white\n           * rect(50, 50, 30, 30); // Draw white rect using RADIUS mode\n           *\n           * rectMode(CENTER); // Set rectMode to CENTER\n           * fill(100); // Set fill to gray\n           * rect(50, 50, 30, 30); // Draw gray rect using CENTER mode\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 white rect at center and 25x25 grey rect in the top left of the other.\n           * 50x50 white rect at center and 25x25 grey rect in the center of the other.\n           *\n           */\n          p5.prototype.rectMode = function(m) {\n            p5._validateParameters('rectMode', arguments);\n            if (\n              m === constants.CORNER ||\n              m === constants.CORNERS ||\n              m === constants.RADIUS ||\n              m === constants.CENTER\n            ) {\n              this._renderer._rectMode = m;\n            }\n            return this;\n          };\n\n          /**\n           * Draws all geometry with smooth (anti-aliased) edges. <a href=\"#/p5/smooth\">smooth()</a> will also\n           * improve image quality of resized images. Note that <a href=\"#/p5/smooth\">smooth()</a> is active by\n           * default in 2D mode; <a href=\"#/p5/noSmooth\">noSmooth()</a> can be used to disable smoothing of geometry,\n           * images, and fonts. In 3D mode, <a href=\"#/p5/noSmooth\">noSmooth()</a> is enabled\n           * by default, so it is necessary to call <a href=\"#/p5/smooth\">smooth()</a> if you would like\n           * smooth (antialiased) edges on your geometry.\n           *\n           * @method smooth\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * background(0);\n           * noStroke();\n           * smooth();\n           * ellipse(30, 48, 36, 36);\n           * noSmooth();\n           * ellipse(70, 48, 36, 36);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 2 pixelated 36x36 white ellipses one left one right of center. On black.\n           *\n           */\n          p5.prototype.smooth = function() {\n            this.setAttributes('antialias', true);\n            if ('imageSmoothingEnabled' in this.drawingContext) {\n              this.drawingContext.imageSmoothingEnabled = true;\n            }\n            return this;\n          };\n\n          /**\n           * Sets the style for rendering line endings. These ends are either squared,\n           * extended, or rounded, each of which specified with the corresponding\n           * parameters: SQUARE, PROJECT, and ROUND. The default cap is ROUND.\n           *\n           * @method strokeCap\n           * @param  {Constant} cap either SQUARE, PROJECT, or ROUND\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * strokeWeight(12.0);\n           * strokeCap(ROUND);\n           * line(20, 30, 80, 30);\n           * strokeCap(SQUARE);\n           * line(20, 50, 80, 50);\n           * strokeCap(PROJECT);\n           * line(20, 70, 80, 70);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 3 lines. Top line: rounded ends, mid: squared, bottom:longer squared ends.\n           *\n           */\n          p5.prototype.strokeCap = function(cap) {\n            p5._validateParameters('strokeCap', arguments);\n            if (\n              cap === constants.ROUND ||\n              cap === constants.SQUARE ||\n              cap === constants.PROJECT\n            ) {\n              this._renderer.strokeCap(cap);\n            }\n            return this;\n          };\n\n          /**\n           * Sets the style of the joints which connect line segments. These joints\n           * are either mitered, beveled, or rounded and specified with the\n           * corresponding parameters MITER, BEVEL, and ROUND. The default joint is\n           * MITER.\n           *\n           * @method strokeJoin\n           * @param  {Constant} join either MITER, BEVEL, ROUND\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * noFill();\n           * strokeWeight(10.0);\n           * strokeJoin(MITER);\n           * beginShape();\n           * vertex(35, 20);\n           * vertex(65, 50);\n           * vertex(35, 80);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * noFill();\n           * strokeWeight(10.0);\n           * strokeJoin(BEVEL);\n           * beginShape();\n           * vertex(35, 20);\n           * vertex(65, 50);\n           * vertex(35, 80);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * noFill();\n           * strokeWeight(10.0);\n           * strokeJoin(ROUND);\n           * beginShape();\n           * vertex(35, 20);\n           * vertex(65, 50);\n           * vertex(35, 80);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Right-facing arrowhead shape with pointed tip in center of canvas.\n           * Right-facing arrowhead shape with flat tip in center of canvas.\n           * Right-facing arrowhead shape with rounded tip in center of canvas.\n           *\n           */\n          p5.prototype.strokeJoin = function(join) {\n            p5._validateParameters('strokeJoin', arguments);\n            if (\n              join === constants.ROUND ||\n              join === constants.BEVEL ||\n              join === constants.MITER\n            ) {\n              this._renderer.strokeJoin(join);\n            }\n            return this;\n          };\n\n          /**\n           * Sets the width of the stroke used for lines, points, and the border\n           * around shapes. All widths are set in units of pixels.\n           *\n           * @method strokeWeight\n           * @param  {Number} weight the weight (in pixels) of the stroke\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * strokeWeight(1); // Default\n           * line(20, 20, 80, 20);\n           * strokeWeight(4); // Thicker\n           * line(20, 40, 80, 40);\n           * strokeWeight(10); // Beastly\n           * line(20, 70, 80, 70);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 3 horizontal black lines. Top line: thin, mid: medium, bottom:thick.\n           *\n           */\n          p5.prototype.strokeWeight = function(w) {\n            p5._validateParameters('strokeWeight', arguments);\n            this._renderer.strokeWeight(w);\n            return this;\n          };\n\n          module.exports = p5;\n        },\n        { '../constants': 18, '../main': 24 }\n      ],\n      32: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Shape\n           * @submodule Curves\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../main');\n          _dereq_('../error_helpers');\n\n          /**\n           * Draws a cubic Bezier curve on the screen. These curves are defined by a\n           * series of anchor and control points. The first two parameters specify\n           * the first anchor point and the last two parameters specify the other\n           * anchor point, which become the first and last points on the curve. The\n           * middle parameters specify the two control points which define the shape\n           * of the curve. Approximately speaking, control points \"pull\" the curve\n           * towards them.<br /><br />Bezier curves were developed by French\n           * automotive engineer Pierre Bezier, and are commonly used in computer\n           * graphics to define gently sloping curves. See also <a href=\"#/p5/curve\">curve()</a>.\n           *\n           * @method bezier\n           * @param  {Number} x1 x-coordinate for the first anchor point\n           * @param  {Number} y1 y-coordinate for the first anchor point\n           * @param  {Number} x2 x-coordinate for the first control point\n           * @param  {Number} y2 y-coordinate for the first control point\n           * @param  {Number} x3 x-coordinate for the second control point\n           * @param  {Number} y3 y-coordinate for the second control point\n           * @param  {Number} x4 x-coordinate for the second anchor point\n           * @param  {Number} y4 y-coordinate for the second anchor point\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * noFill();\n           * stroke(255, 102, 0);\n           * line(85, 20, 10, 10);\n           * line(90, 90, 15, 80);\n           * stroke(0, 0, 0);\n           * bezier(85, 20, 10, 10, 90, 90, 15, 80);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * background(0, 0, 0);\n           * noFill();\n           * stroke(255);\n           * bezier(250, 250, 0, 100, 100, 0, 100, 0, 0, 0, 100, 0);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * stretched black s-shape in center with orange lines extending from end points.\n           * stretched black s-shape with 10 5x5 white ellipses along the shape.\n           * stretched black s-shape with 7 5x5 ellipses and orange lines along the shape.\n           * stretched black s-shape with 17 small orange lines extending from under shape.\n           * horseshoe shape with orange ends facing left and black curved center.\n           * horseshoe shape with orange ends facing left and black curved center.\n           * Line shaped like right-facing arrow,points move with mouse-x and warp shape.\n           * horizontal line that hooks downward on the right and 13 5x5 ellipses along it.\n           * right curving line mid-right of canvas with 7 short lines radiating from it.\n           */\n          /**\n           * @method bezier\n           * @param  {Number} x1\n           * @param  {Number} y1\n           * @param  {Number} z1 z-coordinate for the first anchor point\n           * @param  {Number} x2\n           * @param  {Number} y2\n           * @param  {Number} z2 z-coordinate for the first control point\n           * @param  {Number} x3\n           * @param  {Number} y3\n           * @param  {Number} z3 z-coordinate for the second control point\n           * @param  {Number} x4\n           * @param  {Number} y4\n           * @param  {Number} z4 z-coordinate for the second anchor point\n           * @chainable\n           */\n          p5.prototype.bezier = function() {\n            p5._validateParameters('bezier', arguments);\n\n            // if the current stroke and fill settings wouldn't result in something\n            // visible, exit immediately\n            if (!this._renderer._doStroke && !this._renderer._doFill) {\n              return this;\n            }\n\n            this._renderer.bezier.apply(this._renderer, arguments);\n\n            return this;\n          };\n\n          /**\n           * Sets the resolution at which Beziers display.\n           *\n           * The default value is 20.\n           *\n           * This function is only useful when using the WEBGL renderer\n           * as the default canvas renderer does not use this information.\n           *\n           * @method bezierDetail\n           * @param {Number} detail resolution of the curves\n           * @chainable\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   noFill();\n           *\n           *   bezierDetail(5);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *\n           *   // prettier-ignore\n           *   bezier(-40, -40, 0,\n           *           90, -40, 0,\n           *          -90,  40, 0,\n           *           40,  40, 0);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * stretched black s-shape with a low level of bezier detail\n           *\n           */\n          p5.prototype.bezierDetail = function(d) {\n            p5._validateParameters('bezierDetail', arguments);\n            this._bezierDetail = d;\n            return this;\n          };\n\n          /**\n    * Evaluates the Bezier at position t for points a, b, c, d.\n    * The parameters a and d are the first and last points\n    * on the curve, and b and c are the control points.\n    * The final parameter t varies between 0 and 1.\n    * This can be done once with the x coordinates and a second time\n    * with the y coordinates to get the location of a bezier curve at t.\n    *\n    * @method bezierPoint\n    * @param {Number} a coordinate of first point on the curve\n    * @param {Number} b coordinate of first control point\n    * @param {Number} c coordinate of second control point\n    * @param {Number} d coordinate of second point on the curve\n    * @param {Number} t value between 0 and 1\n    * @return {Number} the value of the Bezier at position t\n    * @example\n    * <div>\n    * <code>\n    * noFill();\n    * let x1 = 85,\n     x2 = 10,\n     x3 = 90,\n     x4 = 15;\n    * let y1 = 20,\n     y2 = 10,\n     y3 = 90,\n     y4 = 80;\n    * bezier(x1, y1, x2, y2, x3, y3, x4, y4);\n    * fill(255);\n    * let steps = 10;\n    * for (let i = 0; i <= steps; i++) {\n    *   let t = i / steps;\n    *   let x = bezierPoint(x1, x2, x3, x4, t);\n    *   let y = bezierPoint(y1, y2, y3, y4, t);\n    *   ellipse(x, y, 5, 5);\n    * }\n    * </code>\n    * </div>\n    *\n    * @alt\n    * stretched black s-shape with 17 small orange lines extending from under shape.\n    *\n    */\n          p5.prototype.bezierPoint = function(a, b, c, d, t) {\n            p5._validateParameters('bezierPoint', arguments);\n\n            var adjustedT = 1 - t;\n            return (\n              Math.pow(adjustedT, 3) * a +\n              3 * Math.pow(adjustedT, 2) * t * b +\n              3 * adjustedT * Math.pow(t, 2) * c +\n              Math.pow(t, 3) * d\n            );\n          };\n\n          /**\n           * Evaluates the tangent to the Bezier at position t for points a, b, c, d.\n           * The parameters a and d are the first and last points\n           * on the curve, and b and c are the control points.\n           * The final parameter t varies between 0 and 1.\n           *\n           * @method bezierTangent\n           * @param {Number} a coordinate of first point on the curve\n           * @param {Number} b coordinate of first control point\n           * @param {Number} c coordinate of second control point\n           * @param {Number} d coordinate of second point on the curve\n           * @param {Number} t value between 0 and 1\n           * @return {Number} the tangent at position t\n           * @example\n           * <div>\n           * <code>\n           * noFill();\n           * bezier(85, 20, 10, 10, 90, 90, 15, 80);\n           * let steps = 6;\n           * fill(255);\n           * for (let i = 0; i <= steps; i++) {\n           *   let t = i / steps;\n           *   // Get the location of the point\n           *   let x = bezierPoint(85, 10, 90, 15, t);\n           *   let y = bezierPoint(20, 10, 90, 80, t);\n           *   // Get the tangent points\n           *   let tx = bezierTangent(85, 10, 90, 15, t);\n           *   let ty = bezierTangent(20, 10, 90, 80, t);\n           *   // Calculate an angle from the tangent points\n           *   let a = atan2(ty, tx);\n           *   a += PI;\n           *   stroke(255, 102, 0);\n           *   line(x, y, cos(a) * 30 + x, sin(a) * 30 + y);\n           *   // The following line of code makes a line\n           *   // inverse of the above line\n           *   //line(x, y, cos(a)*-30 + x, sin(a)*-30 + y);\n           *   stroke(0);\n           *   ellipse(x, y, 5, 5);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * noFill();\n           * bezier(85, 20, 10, 10, 90, 90, 15, 80);\n           * stroke(255, 102, 0);\n           * let steps = 16;\n           * for (let i = 0; i <= steps; i++) {\n           *   let t = i / steps;\n           *   let x = bezierPoint(85, 10, 90, 15, t);\n           *   let y = bezierPoint(20, 10, 90, 80, t);\n           *   let tx = bezierTangent(85, 10, 90, 15, t);\n           *   let ty = bezierTangent(20, 10, 90, 80, t);\n           *   let a = atan2(ty, tx);\n           *   a -= HALF_PI;\n           *   line(x, y, cos(a) * 8 + x, sin(a) * 8 + y);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * s-shaped line with 17 short orange lines extending from underside of shape\n           *\n           */\n          p5.prototype.bezierTangent = function(a, b, c, d, t) {\n            p5._validateParameters('bezierTangent', arguments);\n\n            var adjustedT = 1 - t;\n            return (\n              3 * d * Math.pow(t, 2) -\n              3 * c * Math.pow(t, 2) +\n              6 * c * adjustedT * t -\n              6 * b * adjustedT * t +\n              3 * b * Math.pow(adjustedT, 2) -\n              3 * a * Math.pow(adjustedT, 2)\n            );\n          };\n\n          /**\n    * Draws a curved line on the screen between two points, given as the\n    * middle four parameters. The first two parameters are a control point, as\n    * if the curve came from this point even though it's not drawn. The last\n    * two parameters similarly describe the other control point. <br /><br />\n    * Longer curves can be created by putting a series of <a href=\"#/p5/curve\">curve()</a> functions\n    * together or using <a href=\"#/p5/curveVertex\">curveVertex()</a>. An additional function called\n    * <a href=\"#/p5/curveTightness\">curveTightness()</a> provides control for the visual quality of the curve.\n    * The <a href=\"#/p5/curve\">curve()</a> function is an implementation of Catmull-Rom splines.\n    *\n    * @method curve\n    * @param  {Number} x1 x-coordinate for the beginning control point\n    * @param  {Number} y1 y-coordinate for the beginning control point\n    * @param  {Number} x2 x-coordinate for the first point\n    * @param  {Number} y2 y-coordinate for the first point\n    * @param  {Number} x3 x-coordinate for the second point\n    * @param  {Number} y3 y-coordinate for the second point\n    * @param  {Number} x4 x-coordinate for the ending control point\n    * @param  {Number} y4 y-coordinate for the ending control point\n    * @chainable\n    * @example\n    * <div>\n    * <code>\n    * noFill();\n    * stroke(255, 102, 0);\n    * curve(5, 26, 5, 26, 73, 24, 73, 61);\n    * stroke(0);\n    * curve(5, 26, 73, 24, 73, 61, 15, 65);\n    * stroke(255, 102, 0);\n    * curve(73, 24, 73, 61, 15, 65, 15, 65);\n    * </code>\n    * </div>\n    * <div>\n    * <code>\n    * // Define the curve points as JavaScript objects\n    * let p1 = { x: 5, y: 26 },\n     p2 = { x: 73, y: 24 };\n    * let p3 = { x: 73, y: 61 },\n     p4 = { x: 15, y: 65 };\n    * noFill();\n    * stroke(255, 102, 0);\n    * curve(p1.x, p1.y, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);\n    * stroke(0);\n    * curve(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, p4.x, p4.y);\n    * stroke(255, 102, 0);\n    * curve(p2.x, p2.y, p3.x, p3.y, p4.x, p4.y, p4.x, p4.y);\n    * </code>\n    * </div>\n    * <div>\n    * <code>\n    * noFill();\n    * stroke(255, 102, 0);\n    * curve(5, 26, 0, 5, 26, 0, 73, 24, 0, 73, 61, 0);\n    * stroke(0);\n    * curve(5, 26, 0, 73, 24, 0, 73, 61, 0, 15, 65, 0);\n    * stroke(255, 102, 0);\n    * curve(73, 24, 0, 73, 61, 0, 15, 65, 0, 15, 65, 0);\n    * </code>\n    * </div>\n    *\n    * @alt\n    * horseshoe shape with orange ends facing left and black curved center.\n    * horseshoe shape with orange ends facing left and black curved center.\n    * curving black and orange lines.\n    */\n          /**\n           * @method curve\n           * @param  {Number} x1\n           * @param  {Number} y1\n           * @param  {Number} z1 z-coordinate for the beginning control point\n           * @param  {Number} x2\n           * @param  {Number} y2\n           * @param  {Number} z2 z-coordinate for the first point\n           * @param  {Number} x3\n           * @param  {Number} y3\n           * @param  {Number} z3 z-coordinate for the second point\n           * @param  {Number} x4\n           * @param  {Number} y4\n           * @param  {Number} z4 z-coordinate for the ending control point\n           * @chainable\n           */\n          p5.prototype.curve = function() {\n            p5._validateParameters('curve', arguments);\n\n            if (this._renderer._doStroke) {\n              this._renderer.curve.apply(this._renderer, arguments);\n            }\n\n            return this;\n          };\n\n          /**\n           * Sets the resolution at which curves display.\n           *\n           * The default value is 20 while the minimum value is 3.\n           *\n           * This function is only useful when using the WEBGL renderer\n           * as the default canvas renderer does not use this\n           * information.\n           *\n           * @method curveDetail\n           * @param {Number} resolution resolution of the curves\n           * @chainable\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *\n           *   curveDetail(5);\n           * }\n           * function draw() {\n           *   background(200);\n           *\n           *   curve(250, 600, 0, -30, 40, 0, 30, 30, 0, -250, 600, 0);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white arch shape with a low level of curve detail.\n           *\n           */\n          p5.prototype.curveDetail = function(d) {\n            p5._validateParameters('curveDetail', arguments);\n            if (d < 3) {\n              this._curveDetail = 3;\n            } else {\n              this._curveDetail = d;\n            }\n            return this;\n          };\n\n          /**\n           * Modifies the quality of forms created with <a href=\"#/p5/curve\">curve()</a> and <a href=\"#/p5/curveVertex\">curveVertex()</a>.\n           * The parameter tightness determines how the curve fits to the vertex\n           * points. The value 0.0 is the default value for tightness (this value\n           * defines the curves to be Catmull-Rom splines) and the value 1.0 connects\n           * all the points with straight lines. Values within the range -5.0 and 5.0\n           * will deform the curves but will leave them recognizable and as values\n           * increase in magnitude, they will continue to deform.\n           *\n           * @method curveTightness\n           * @param {Number} amount amount of deformation from the original vertices\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // Move the mouse left and right to see the curve change\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   noFill();\n           * }\n           *\n           * function draw() {\n           *   background(204);\n           *   let t = map(mouseX, 0, width, -5, 5);\n           *   curveTightness(t);\n           *   beginShape();\n           *   curveVertex(10, 26);\n           *   curveVertex(10, 26);\n           *   curveVertex(83, 24);\n           *   curveVertex(83, 61);\n           *   curveVertex(25, 65);\n           *   curveVertex(25, 65);\n           *   endShape();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Line shaped like right-facing arrow,points move with mouse-x and warp shape.\n           */\n          p5.prototype.curveTightness = function(t) {\n            p5._validateParameters('curveTightness', arguments);\n            this._renderer._curveTightness = t;\n            return this;\n          };\n\n          /**\n           * Evaluates the curve at position t for points a, b, c, d.\n           * The parameter t varies between 0 and 1, a and d are control points\n           * of the curve, and b and c are the start and end points of the curve.\n           * This can be done once with the x coordinates and a second time\n           * with the y coordinates to get the location of a curve at t.\n           *\n           * @method curvePoint\n           * @param {Number} a coordinate of first control point of the curve\n           * @param {Number} b coordinate of first point\n           * @param {Number} c coordinate of second point\n           * @param {Number} d coordinate of second control point\n           * @param {Number} t value between 0 and 1\n           * @return {Number} bezier value at position t\n           * @example\n           * <div>\n           * <code>\n           * noFill();\n           * curve(5, 26, 5, 26, 73, 24, 73, 61);\n           * curve(5, 26, 73, 24, 73, 61, 15, 65);\n           * fill(255);\n           * ellipseMode(CENTER);\n           * let steps = 6;\n           * for (let i = 0; i <= steps; i++) {\n           *   let t = i / steps;\n           *   let x = curvePoint(5, 5, 73, 73, t);\n           *   let y = curvePoint(26, 26, 24, 61, t);\n           *   ellipse(x, y, 5, 5);\n           *   x = curvePoint(5, 73, 73, 15, t);\n           *   y = curvePoint(26, 24, 61, 65, t);\n           *   ellipse(x, y, 5, 5);\n           * }\n           * </code>\n           * </div>\n           *\n           *line hooking down to right-bottom with 13 5x5 white ellipse points\n           */\n          p5.prototype.curvePoint = function(a, b, c, d, t) {\n            p5._validateParameters('curvePoint', arguments);\n\n            var t3 = t * t * t,\n              t2 = t * t,\n              f1 = -0.5 * t3 + t2 - 0.5 * t,\n              f2 = 1.5 * t3 - 2.5 * t2 + 1.0,\n              f3 = -1.5 * t3 + 2.0 * t2 + 0.5 * t,\n              f4 = 0.5 * t3 - 0.5 * t2;\n            return a * f1 + b * f2 + c * f3 + d * f4;\n          };\n\n          /**\n           * Evaluates the tangent to the curve at position t for points a, b, c, d.\n           * The parameter t varies between 0 and 1, a and d are points on the curve,\n           * and b and c are the control points.\n           *\n           * @method curveTangent\n           * @param {Number} a coordinate of first point on the curve\n           * @param {Number} b coordinate of first control point\n           * @param {Number} c coordinate of second control point\n           * @param {Number} d coordinate of second point on the curve\n           * @param {Number} t value between 0 and 1\n           * @return {Number} the tangent at position t\n           * @example\n           * <div>\n           * <code>\n           * noFill();\n           * curve(5, 26, 73, 24, 73, 61, 15, 65);\n           * let steps = 6;\n           * for (let i = 0; i <= steps; i++) {\n           *   let t = i / steps;\n           *   let x = curvePoint(5, 73, 73, 15, t);\n           *   let y = curvePoint(26, 24, 61, 65, t);\n           *   //ellipse(x, y, 5, 5);\n           *   let tx = curveTangent(5, 73, 73, 15, t);\n           *   let ty = curveTangent(26, 24, 61, 65, t);\n           *   let a = atan2(ty, tx);\n           *   a -= PI / 2.0;\n           *   line(x, y, cos(a) * 8 + x, sin(a) * 8 + y);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           *right curving line mid-right of canvas with 7 short lines radiating from it.\n           */\n          p5.prototype.curveTangent = function(a, b, c, d, t) {\n            p5._validateParameters('curveTangent', arguments);\n\n            var t2 = t * t,\n              f1 = -3 * t2 / 2 + 2 * t - 0.5,\n              f2 = 9 * t2 / 2 - 5 * t,\n              f3 = -9 * t2 / 2 + 4 * t + 0.5,\n              f4 = 3 * t2 / 2 - t;\n            return a * f1 + b * f2 + c * f3 + d * f4;\n          };\n\n          module.exports = p5;\n        },\n        { '../error_helpers': 20, '../main': 24 }\n      ],\n      33: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Shape\n           * @submodule Vertex\n           * @for p5\n           * @requires core\n           * @requires constants\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../main');\n          var constants = _dereq_('../constants');\n          var shapeKind = null;\n          var vertices = [];\n          var contourVertices = [];\n          var isBezier = false;\n          var isCurve = false;\n          var isQuadratic = false;\n          var isContour = false;\n          var isFirstContour = true;\n\n          /**\n           * Use the <a href=\"#/p5/beginContour\">beginContour()</a> and <a href=\"#/p5/endContour\">endContour()</a> functions to create negative\n           * shapes within shapes such as the center of the letter 'O'. <a href=\"#/p5/beginContour\">beginContour()</a>\n           * begins recording vertices for the shape and <a href=\"#/p5/endContour\">endContour()</a> stops recording.\n           * The vertices that define a negative shape must \"wind\" in the opposite\n           * direction from the exterior shape. First draw vertices for the exterior\n           * clockwise order, then for internal shapes, draw vertices\n           * shape in counter-clockwise.\n           * <br><br>\n           * These functions can only be used within a <a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a> pair and\n           * transformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work\n           * within a <a href=\"#/p5/beginContour\">beginContour()</a>/<a href=\"#/p5/endContour\">endContour()</a> pair. It is also not possible to use\n           * other shapes, such as <a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within.\n           *\n           * @method beginContour\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * translate(50, 50);\n           * stroke(255, 0, 0);\n           * beginShape();\n           * // Exterior part of shape, clockwise winding\n           * vertex(-40, -40);\n           * vertex(40, -40);\n           * vertex(40, 40);\n           * vertex(-40, 40);\n           * // Interior part of shape, counter-clockwise winding\n           * beginContour();\n           * vertex(-20, -20);\n           * vertex(-20, 20);\n           * vertex(20, 20);\n           * vertex(20, -20);\n           * endContour();\n           * endShape(CLOSE);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white rect and smaller grey rect with red outlines in center of canvas.\n           *\n           */\n          p5.prototype.beginContour = function() {\n            contourVertices = [];\n            isContour = true;\n            return this;\n          };\n\n          /**\n           * Using the <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a> functions allow creating more\n           * complex forms. <a href=\"#/p5/beginShape\">beginShape()</a> begins recording vertices for a shape and\n           * <a href=\"#/p5/endShape\">endShape()</a> stops recording. The value of the kind parameter tells it which\n           * types of shapes to create from the provided vertices. With no mode\n           * specified, the shape can be any irregular polygon.\n           * <br><br>\n           * The parameters available for <a href=\"#/p5/beginShape\">beginShape()</a> are POINTS, LINES, TRIANGLES,\n           * TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, and QUAD_STRIP. After calling the\n           * <a href=\"#/p5/beginShape\">beginShape()</a> function, a series of <a href=\"#/p5/vertex\">vertex()</a> commands must follow. To stop\n           * drawing the shape, call <a href=\"#/p5/endShape\">endShape()</a>. Each shape will be outlined with the\n           * current stroke color and filled with the fill color.\n           * <br><br>\n           * Transformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work\n           * within <a href=\"#/p5/beginShape\">beginShape()</a>. It is also not possible to use other shapes, such as\n           * <a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within <a href=\"#/p5/beginShape\">beginShape()</a>.\n           *\n           * @method beginShape\n           * @param  {Constant} [kind] either POINTS, LINES, TRIANGLES, TRIANGLE_FAN\n           *                                TRIANGLE_STRIP, QUADS, or QUAD_STRIP\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * beginShape();\n           * vertex(30, 20);\n           * vertex(85, 20);\n           * vertex(85, 75);\n           * vertex(30, 75);\n           * endShape(CLOSE);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * beginShape(POINTS);\n           * vertex(30, 20);\n           * vertex(85, 20);\n           * vertex(85, 75);\n           * vertex(30, 75);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * beginShape(LINES);\n           * vertex(30, 20);\n           * vertex(85, 20);\n           * vertex(85, 75);\n           * vertex(30, 75);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * noFill();\n           * beginShape();\n           * vertex(30, 20);\n           * vertex(85, 20);\n           * vertex(85, 75);\n           * vertex(30, 75);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * noFill();\n           * beginShape();\n           * vertex(30, 20);\n           * vertex(85, 20);\n           * vertex(85, 75);\n           * vertex(30, 75);\n           * endShape(CLOSE);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * beginShape(TRIANGLES);\n           * vertex(30, 75);\n           * vertex(40, 20);\n           * vertex(50, 75);\n           * vertex(60, 20);\n           * vertex(70, 75);\n           * vertex(80, 20);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * beginShape(TRIANGLE_STRIP);\n           * vertex(30, 75);\n           * vertex(40, 20);\n           * vertex(50, 75);\n           * vertex(60, 20);\n           * vertex(70, 75);\n           * vertex(80, 20);\n           * vertex(90, 75);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * beginShape(TRIANGLE_FAN);\n           * vertex(57.5, 50);\n           * vertex(57.5, 15);\n           * vertex(92, 50);\n           * vertex(57.5, 85);\n           * vertex(22, 50);\n           * vertex(57.5, 15);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * beginShape(QUADS);\n           * vertex(30, 20);\n           * vertex(30, 75);\n           * vertex(50, 75);\n           * vertex(50, 20);\n           * vertex(65, 20);\n           * vertex(65, 75);\n           * vertex(85, 75);\n           * vertex(85, 20);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * beginShape(QUAD_STRIP);\n           * vertex(30, 20);\n           * vertex(30, 75);\n           * vertex(50, 20);\n           * vertex(50, 75);\n           * vertex(65, 20);\n           * vertex(65, 75);\n           * vertex(85, 20);\n           * vertex(85, 75);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * beginShape();\n           * vertex(20, 20);\n           * vertex(40, 20);\n           * vertex(40, 40);\n           * vertex(60, 40);\n           * vertex(60, 60);\n           * vertex(20, 60);\n           * endShape(CLOSE);\n           * </code>\n           * </div>\n           * @alt\n           * white square-shape with black outline in middle-right of canvas.\n           * 4 black points in a square shape in middle-right of canvas.\n           * 2 horizontal black lines. In the top-right and bottom-right of canvas.\n           * 3 line shape with horizontal on top, vertical in middle and horizontal bottom.\n           * square line shape in middle-right of canvas.\n           * 2 white triangle shapes mid-right canvas. left one pointing up and right down.\n           * 5 horizontal interlocking and alternating white triangles in mid-right canvas.\n           * 4 interlocking white triangles in 45 degree rotated square-shape.\n           * 2 white rectangle shapes in mid-right canvas. Both 20x55.\n           * 3 side-by-side white rectangles center rect is smaller in mid-right canvas.\n           * Thick white l-shape with black outline mid-top-left of canvas.\n           *\n           */\n          p5.prototype.beginShape = function(kind) {\n            p5._validateParameters('beginShape', arguments);\n            if (this._renderer.isP3D) {\n              this._renderer.beginShape.apply(this._renderer, arguments);\n            } else {\n              if (\n                kind === constants.POINTS ||\n                kind === constants.LINES ||\n                kind === constants.TRIANGLES ||\n                kind === constants.TRIANGLE_FAN ||\n                kind === constants.TRIANGLE_STRIP ||\n                kind === constants.QUADS ||\n                kind === constants.QUAD_STRIP\n              ) {\n                shapeKind = kind;\n              } else {\n                shapeKind = null;\n              }\n\n              vertices = [];\n              contourVertices = [];\n            }\n            return this;\n          };\n\n          /**\n           * Specifies vertex coordinates for Bezier curves. Each call to\n           * bezierVertex() defines the position of two control points and\n           * one anchor point of a Bezier curve, adding a new segment to a\n           * line or shape. For WebGL mode bezierVertex() can be used in 2D\n           * as well as 3D mode. 2D mode expects 6 parameters, while 3D mode\n           * expects 9 parameters (including z coordinates).\n           * <br><br>\n           * The first time bezierVertex() is used within a <a href=\"#/p5/beginShape\">beginShape()</a>\n           * call, it must be prefaced with a call to <a href=\"#/p5/vertex\">vertex()</a> to set the first anchor\n           * point. This function must be used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a>\n           * and only when there is no MODE or POINTS parameter specified to\n           * <a href=\"#/p5/beginShape\">beginShape()</a>.\n           *\n           * @method bezierVertex\n           * @param  {Number} x2 x-coordinate for the first control point\n           * @param  {Number} y2 y-coordinate for the first control point\n           * @param  {Number} x3 x-coordinate for the second control point\n           * @param  {Number} y3 y-coordinate for the second control point\n           * @param  {Number} x4 x-coordinate for the anchor point\n           * @param  {Number} y4 y-coordinate for the anchor point\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * noFill();\n           * beginShape();\n           * vertex(30, 20);\n           * bezierVertex(80, 0, 80, 75, 30, 75);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * @alt\n           * crescent-shaped line in middle of canvas. Points facing left.\n           *\n           * @example\n           * <div>\n           * <code>\n           * beginShape();\n           * vertex(30, 20);\n           * bezierVertex(80, 0, 80, 75, 30, 75);\n           * bezierVertex(50, 80, 60, 25, 30, 20);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white crescent shape in middle of canvas. Points facing left.\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   setAttributes('antialias', true);\n           * }\n           * function draw() {\n           *   orbitControl();\n           *   background(50);\n           *   strokeWeight(4);\n           *   stroke(255);\n           *   point(-25, 30);\n           *   point(25, 30);\n           *   point(25, -30);\n           *   point(-25, -30);\n           *\n           *   strokeWeight(1);\n           *   noFill();\n           *\n           *   beginShape();\n           *   vertex(-25, 30);\n           *   bezierVertex(25, 30, 25, -30, -25, -30);\n           *   endShape();\n           *\n           *   beginShape();\n           *   vertex(-25, 30, 20);\n           *   bezierVertex(25, 30, 20, 25, -30, 20, -25, -30, 20);\n           *   endShape();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * crescent shape in middle of canvas with another crescent shape on positive z-axis.\n           */\n\n          /**\n           * @method bezierVertex\n           * @param  {Number} x2\n           * @param  {Number} y2\n           * @param  {Number} z2 z-coordinate for the first control point (for WebGL mode)\n           * @param  {Number} x3\n           * @param  {Number} y3\n           * @param  {Number} z3 z-coordinate for the second control point (for WebGL mode)\n           * @param  {Number} x4\n           * @param  {Number} y4\n           * @param  {Number} z4 z-coordinate for the anchor point (for WebGL mode)\n           * @chainable\n           */\n          p5.prototype.bezierVertex = function() {\n            p5._validateParameters('bezierVertex', arguments);\n            if (this._renderer.isP3D) {\n              this._renderer.bezierVertex.apply(this._renderer, arguments);\n            } else {\n              if (vertices.length === 0) {\n                p5._friendlyError(\n                  'vertex() must be used once before calling bezierVertex()',\n                  'bezierVertex'\n                );\n              } else {\n                isBezier = true;\n                var vert = [];\n                for (var i = 0; i < arguments.length; i++) {\n                  vert[i] = arguments[i];\n                }\n                vert.isVert = false;\n                if (isContour) {\n                  contourVertices.push(vert);\n                } else {\n                  vertices.push(vert);\n                }\n              }\n            }\n            return this;\n          };\n\n          /**\n           * Specifies vertex coordinates for curves. This function may only\n           * be used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a> and only when there\n           * is no MODE parameter specified to <a href=\"#/p5/beginShape\">beginShape()</a>.\n           * For WebGL mode curveVertex() can be used in 2D as well as 3D mode.\n           * 2D mode expects 2 parameters, while 3D mode expects 3 parameters.\n           * <br><br>\n           * The first and last points in a series of curveVertex() lines will be used to\n           * guide the beginning and end of a the curve. A minimum of four\n           * points is required to draw a tiny curve between the second and\n           * third points. Adding a fifth point with curveVertex() will draw\n           * the curve between the second, third, and fourth points. The\n           * curveVertex() function is an implementation of Catmull-Rom\n           * splines.\n           *\n           * @method curveVertex\n           * @param {Number} x x-coordinate of the vertex\n           * @param {Number} y y-coordinate of the vertex\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * strokeWeight(5);\n           * point(84, 91);\n           * point(68, 19);\n           * point(21, 17);\n           * point(32, 91);\n           * strokeWeight(1);\n           *\n           * noFill();\n           * beginShape();\n           * curveVertex(84, 91);\n           * curveVertex(84, 91);\n           * curveVertex(68, 19);\n           * curveVertex(21, 17);\n           * curveVertex(32, 91);\n           * curveVertex(32, 91);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           *\n           * @alt\n           * Upside-down u-shape line, mid canvas. left point extends beyond canvas view.\n           */\n          /**\n           * @method curveVertex\n           * @param {Number} x\n           * @param {Number} y\n           * @param {Number} [z] z-coordinate of the vertex (for WebGL mode)\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   setAttributes('antialias', true);\n           * }\n           * function draw() {\n           *   orbitControl();\n           *   background(50);\n           *   strokeWeight(4);\n           *   stroke(255);\n           *\n           *   point(-25, 25);\n           *   point(-25, 25);\n           *   point(-25, -25);\n           *   point(25, -25);\n           *   point(25, 25);\n           *   point(25, 25);\n           *\n           *   strokeWeight(1);\n           *   noFill();\n           *\n           *   beginShape();\n           *   curveVertex(-25, 25);\n           *   curveVertex(-25, 25);\n           *   curveVertex(-25, -25);\n           *   curveVertex(25, -25);\n           *   curveVertex(25, 25);\n           *   curveVertex(25, 25);\n           *   endShape();\n           *\n           *   beginShape();\n           *   curveVertex(-25, 25, 20);\n           *   curveVertex(-25, 25, 20);\n           *   curveVertex(-25, -25, 20);\n           *   curveVertex(25, -25, 20);\n           *   curveVertex(25, 25, 20);\n           *   curveVertex(25, 25, 20);\n           *   endShape();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Upside-down u-shape line, mid canvas with the same shape in positive z-axis.\n           *\n           */\n          p5.prototype.curveVertex = function() {\n            p5._validateParameters('curveVertex', arguments);\n            if (this._renderer.isP3D) {\n              this._renderer.curveVertex.apply(this._renderer, arguments);\n            } else {\n              isCurve = true;\n              this.vertex(arguments[0], arguments[1]);\n            }\n            return this;\n          };\n\n          /**\n           * Use the <a href=\"#/p5/beginContour\">beginContour()</a> and <a href=\"#/p5/endContour\">endContour()</a> functions to create negative\n           * shapes within shapes such as the center of the letter 'O'. <a href=\"#/p5/beginContour\">beginContour()</a>\n           * begins recording vertices for the shape and <a href=\"#/p5/endContour\">endContour()</a> stops recording.\n           * The vertices that define a negative shape must \"wind\" in the opposite\n           * direction from the exterior shape. First draw vertices for the exterior\n           * clockwise order, then for internal shapes, draw vertices\n           * shape in counter-clockwise.\n           * <br><br>\n           * These functions can only be used within a <a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a> pair and\n           * transformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work\n           * within a <a href=\"#/p5/beginContour\">beginContour()</a>/<a href=\"#/p5/endContour\">endContour()</a> pair. It is also not possible to use\n           * other shapes, such as <a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within.\n           *\n           * @method endContour\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * translate(50, 50);\n           * stroke(255, 0, 0);\n           * beginShape();\n           * // Exterior part of shape, clockwise winding\n           * vertex(-40, -40);\n           * vertex(40, -40);\n           * vertex(40, 40);\n           * vertex(-40, 40);\n           * // Interior part of shape, counter-clockwise winding\n           * beginContour();\n           * vertex(-20, -20);\n           * vertex(-20, 20);\n           * vertex(20, 20);\n           * vertex(20, -20);\n           * endContour();\n           * endShape(CLOSE);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white rect and smaller grey rect with red outlines in center of canvas.\n           *\n           */\n          p5.prototype.endContour = function() {\n            var vert = contourVertices[0].slice(); // copy all data\n            vert.isVert = contourVertices[0].isVert;\n            vert.moveTo = false;\n            contourVertices.push(vert);\n\n            // prevent stray lines with multiple contours\n            if (isFirstContour) {\n              vertices.push(vertices[0]);\n              isFirstContour = false;\n            }\n\n            for (var i = 0; i < contourVertices.length; i++) {\n              vertices.push(contourVertices[i]);\n            }\n            return this;\n          };\n\n          /**\n           * The <a href=\"#/p5/endShape\">endShape()</a> function is the companion to <a href=\"#/p5/beginShape\">beginShape()</a> and may only be\n           * called after <a href=\"#/p5/beginShape\">beginShape()</a>. When <a href=\"#/p5/endshape\">endshape()</a> is called, all of image data\n           * defined since the previous call to <a href=\"#/p5/beginShape\">beginShape()</a> is written into the image\n           * buffer. The constant CLOSE as the value for the MODE parameter to close\n           * the shape (to connect the beginning and the end).\n           *\n           * @method endShape\n           * @param  {Constant} [mode] use CLOSE to close the shape\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * noFill();\n           *\n           * beginShape();\n           * vertex(20, 20);\n           * vertex(45, 20);\n           * vertex(45, 80);\n           * endShape(CLOSE);\n           *\n           * beginShape();\n           * vertex(50, 20);\n           * vertex(75, 20);\n           * vertex(75, 80);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Triangle line shape with smallest interior angle on bottom and upside-down L.\n           *\n           */\n          p5.prototype.endShape = function(mode) {\n            p5._validateParameters('endShape', arguments);\n            if (this._renderer.isP3D) {\n              this._renderer.endShape(\n                mode,\n                isCurve,\n                isBezier,\n                isQuadratic,\n                isContour,\n                shapeKind\n              );\n            } else {\n              if (vertices.length === 0) {\n                return this;\n              }\n              if (!this._renderer._doStroke && !this._renderer._doFill) {\n                return this;\n              }\n\n              var closeShape = mode === constants.CLOSE;\n\n              // if the shape is closed, the first element is also the last element\n              if (closeShape && !isContour) {\n                vertices.push(vertices[0]);\n              }\n\n              this._renderer.endShape(\n                mode,\n                vertices,\n                isCurve,\n                isBezier,\n                isQuadratic,\n                isContour,\n                shapeKind\n              );\n\n              // Reset some settings\n              isCurve = false;\n              isBezier = false;\n              isQuadratic = false;\n              isContour = false;\n              isFirstContour = true;\n\n              // If the shape is closed, the first element was added as last element.\n              // We must remove it again to prevent the list of vertices from growing\n              // over successive calls to endShape(CLOSE)\n              if (closeShape) {\n                vertices.pop();\n              }\n            }\n            return this;\n          };\n\n          /**\n           * Specifies vertex coordinates for quadratic Bezier curves. Each call to\n           * quadraticVertex() defines the position of one control points and one\n           * anchor point of a Bezier curve, adding a new segment to a line or shape.\n           * The first time quadraticVertex() is used within a <a href=\"#/p5/beginShape\">beginShape()</a> call, it\n           * must be prefaced with a call to <a href=\"#/p5/vertex\">vertex()</a> to set the first anchor point.\n           * For WebGL mode quadraticVertex() can be used in 2D as well as 3D mode.\n           * 2D mode expects 4 parameters, while 3D mode expects 6 parameters\n           * (including z coordinates).\n           * <br><br>\n           * This function must be used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a>\n           * and only when there is no MODE or POINTS parameter specified to\n           * <a href=\"#/p5/beginShape\">beginShape()</a>.\n           *\n           * @method quadraticVertex\n           * @param  {Number} cx x-coordinate for the control point\n           * @param  {Number} cy y-coordinate for the control point\n           * @param  {Number} x3 x-coordinate for the anchor point\n           * @param  {Number} y3 y-coordinate for the anchor point\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * strokeWeight(5);\n           * point(20, 20);\n           * point(80, 20);\n           * point(50, 50);\n           *\n           * noFill();\n           * strokeWeight(1);\n           * beginShape();\n           * vertex(20, 20);\n           * quadraticVertex(80, 20, 50, 50);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * strokeWeight(5);\n           * point(20, 20);\n           * point(80, 20);\n           * point(50, 50);\n           *\n           * point(20, 80);\n           * point(80, 80);\n           * point(80, 60);\n           *\n           * noFill();\n           * strokeWeight(1);\n           * beginShape();\n           * vertex(20, 20);\n           * quadraticVertex(80, 20, 50, 50);\n           * quadraticVertex(20, 80, 80, 80);\n           * vertex(80, 60);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * @alt\n           * arched-shaped black line with 4 pixel thick stroke weight.\n           * backwards s-shaped black line with 4 pixel thick stroke weight.\n           *\n           */\n\n          /**\n           * @method quadraticVertex\n           * @param  {Number} cx\n           * @param  {Number} cy\n           * @param  {Number} cz z-coordinate for the control point (for WebGL mode)\n           * @param  {Number} x3\n           * @param  {Number} y3\n           * @param  {Number} z3 z-coordinate for the anchor point (for WebGL mode)\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   setAttributes('antialias', true);\n           * }\n           * function draw() {\n           *   orbitControl();\n           *   background(50);\n           *   strokeWeight(4);\n           *   stroke(255);\n           *\n           *   point(-35, -35);\n           *   point(35, -35);\n           *   point(0, 0);\n           *   point(-35, 35);\n           *   point(35, 35);\n           *   point(35, 10);\n           *\n           *   strokeWeight(1);\n           *   noFill();\n           *\n           *   beginShape();\n           *   vertex(-35, -35);\n           *   quadraticVertex(35, -35, 0, 0);\n           *   quadraticVertex(-35, 35, 35, 35);\n           *   vertex(35, 10);\n           *   endShape();\n           *\n           *   beginShape();\n           *   vertex(-35, -35, 20);\n           *   quadraticVertex(35, -35, 20, 0, 0, 20);\n           *   quadraticVertex(-35, 35, 20, 35, 35, 20);\n           *   vertex(35, 10, 20);\n           *   endShape();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * backwards s-shaped black line with the same s-shaped line in postive z-axis.\n           */\n          p5.prototype.quadraticVertex = function() {\n            p5._validateParameters('quadraticVertex', arguments);\n            if (this._renderer.isP3D) {\n              this._renderer.quadraticVertex.apply(this._renderer, arguments);\n            } else {\n              //if we're drawing a contour, put the points into an\n              // array for inside drawing\n              if (this._contourInited) {\n                var pt = {};\n                pt.x = arguments[0];\n                pt.y = arguments[1];\n                pt.x3 = arguments[2];\n                pt.y3 = arguments[3];\n                pt.type = constants.QUADRATIC;\n                this._contourVertices.push(pt);\n\n                return this;\n              }\n              if (vertices.length > 0) {\n                isQuadratic = true;\n                var vert = [];\n                for (var i = 0; i < arguments.length; i++) {\n                  vert[i] = arguments[i];\n                }\n                vert.isVert = false;\n                if (isContour) {\n                  contourVertices.push(vert);\n                } else {\n                  vertices.push(vert);\n                }\n              } else {\n                p5._friendlyError(\n                  'vertex() must be used once before calling quadraticVertex()',\n                  'quadraticVertex'\n                );\n              }\n            }\n            return this;\n          };\n\n          /**\n           * All shapes are constructed by connecting a series of vertices. <a href=\"#/p5/vertex\">vertex()</a>\n           * is used to specify the vertex coordinates for points, lines, triangles,\n           * quads, and polygons. It is used exclusively within the <a href=\"#/p5/beginShape\">beginShape()</a> and\n           * <a href=\"#/p5/endShape\">endShape()</a> functions.\n           *\n           * @method vertex\n           * @param  {Number} x x-coordinate of the vertex\n           * @param  {Number} y y-coordinate of the vertex\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * strokeWeight(3);\n           * beginShape(POINTS);\n           * vertex(30, 20);\n           * vertex(85, 20);\n           * vertex(85, 75);\n           * vertex(30, 75);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * createCanvas(100, 100, WEBGL);\n           * background(240, 240, 240);\n           * fill(237, 34, 93);\n           * noStroke();\n           * beginShape();\n           * vertex(0, 35);\n           * vertex(35, 0);\n           * vertex(0, -35);\n           * vertex(-35, 0);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * createCanvas(100, 100, WEBGL);\n           * background(240, 240, 240);\n           * fill(237, 34, 93);\n           * noStroke();\n           * beginShape();\n           * vertex(-10, 10);\n           * vertex(0, 35);\n           * vertex(10, 10);\n           * vertex(35, 0);\n           * vertex(10, -8);\n           * vertex(0, -35);\n           * vertex(-10, -8);\n           * vertex(-35, 0);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * strokeWeight(3);\n           * stroke(237, 34, 93);\n           * beginShape(LINES);\n           * vertex(10, 35);\n           * vertex(90, 35);\n           * vertex(10, 65);\n           * vertex(90, 65);\n           * vertex(35, 10);\n           * vertex(35, 90);\n           * vertex(65, 10);\n           * vertex(65, 90);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Click to change the number of sides.\n           * // In WebGL mode, custom shapes will only\n           * // display hollow fill sections when\n           * // all calls to vertex() use the same z-value.\n           *\n           * let sides = 3;\n           * let angle, px, py;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   setAttributes('antialias', true);\n           *   fill(237, 34, 93);\n           *   strokeWeight(3);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rotateX(frameCount * 0.01);\n           *   rotateZ(frameCount * 0.01);\n           *   ngon(sides, 0, 0, 80);\n           * }\n           *\n           * function mouseClicked() {\n           *   if (sides > 6) {\n           *     sides = 3;\n           *   } else {\n           *     sides++;\n           *   }\n           * }\n           *\n           * function ngon(n, x, y, d) {\n           *   beginShape();\n           *   for (var i = 0; i < n + 1; i++) {\n           *     angle = TWO_PI / n * i;\n           *     px = x + sin(angle) * d / 2;\n           *     py = y - cos(angle) * d / 2;\n           *     vertex(px, py, 0);\n           *   }\n           *   for (i = 0; i < n + 1; i++) {\n           *     angle = TWO_PI / n * i;\n           *     px = x + sin(angle) * d / 4;\n           *     py = y - cos(angle) * d / 4;\n           *     vertex(px, py, 0);\n           *   }\n           *   endShape();\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * 4 black points in a square shape in middle-right of canvas.\n           * 4 points making a diamond shape.\n           * 8 points making a star.\n           * 8 points making 4 lines.\n           * A rotating 3D shape with a hollow section in the middle.\n           *\n           */\n          /**\n           * @method vertex\n           * @param  {Number} x\n           * @param  {Number} y\n           * @param  {Number} z   z-coordinate of the vertex\n           * @param  {Number} [u] the vertex's texture u-coordinate\n           * @param  {Number} [v] the vertex's texture v-coordinate\n           * @chainable\n           */\n          p5.prototype.vertex = function(x, y, moveTo, u, v) {\n            if (this._renderer.isP3D) {\n              this._renderer.vertex.apply(this._renderer, arguments);\n            } else {\n              var vert = [];\n              vert.isVert = true;\n              vert[0] = x;\n              vert[1] = y;\n              vert[2] = 0;\n              vert[3] = 0;\n              vert[4] = 0;\n              vert[5] = this._renderer._getFill();\n              vert[6] = this._renderer._getStroke();\n\n              if (moveTo) {\n                vert.moveTo = moveTo;\n              }\n              if (isContour) {\n                if (contourVertices.length === 0) {\n                  vert.moveTo = true;\n                }\n                contourVertices.push(vert);\n              } else {\n                vertices.push(vert);\n              }\n            }\n            return this;\n          };\n\n          module.exports = p5;\n        },\n        { '../constants': 18, '../main': 24 }\n      ],\n      34: [\n        function(_dereq_, module, exports) {\n          'use strict';\n\n          // requestAnim shim layer by Paul Irish\n          // http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n          // http://my.opera.com/emoller/blog/2011/12/20/\n          // requestanimationframe-for-smart-er-animating\n          // requestAnimationFrame polyfill by Erik Möller\n          // fixes from Paul Irish and Tino Zijdel\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          window.requestAnimationFrame = (function() {\n            return (\n              window.requestAnimationFrame ||\n              window.webkitRequestAnimationFrame ||\n              window.mozRequestAnimationFrame ||\n              window.oRequestAnimationFrame ||\n              window.msRequestAnimationFrame ||\n              function(callback, element) {\n                // should '60' here be framerate?\n                window.setTimeout(callback, 1000 / 60);\n              }\n            );\n          })();\n\n          /**\n           * shim for Uint8ClampedArray.slice\n           * (allows arrayCopy to work with pixels[])\n           * with thanks to http://halfpapstudios.com/blog/tag/html5-canvas/\n           * Enumerable set to false to protect for...in from\n           * Uint8ClampedArray.prototype pollution.\n           */\n          (function() {\n            'use strict';\n            if (\n              typeof Uint8ClampedArray !== 'undefined' &&\n              !Uint8ClampedArray.prototype.slice\n            ) {\n              Object.defineProperty(Uint8ClampedArray.prototype, 'slice', {\n                value: Array.prototype.slice,\n                writable: true,\n                configurable: true,\n                enumerable: false\n              });\n            }\n          })();\n\n          /**\n           * this is implementation of Object.assign() which is unavailable in\n           * IE11 and (non-Chrome) Android browsers.\n           * The assign() method is used to copy the values of all enumerable\n           * own properties from one or more source objects to a target object.\n           * It will return the target object.\n           * Modified from https://github.com/ljharb/object.assign\n           */\n          (function() {\n            'use strict';\n            if (!Object.assign) {\n              var keys = Object.keys;\n              var defineProperty = Object.defineProperty;\n              var canBeObject = function canBeObject(obj) {\n                return typeof obj !== 'undefined' && obj !== null;\n              };\n              var hasSymbols =\n                typeof Symbol === 'function' && _typeof(Symbol()) === 'symbol';\n              var propIsEnumerable = Object.prototype.propertyIsEnumerable;\n              var isEnumerableOn = function isEnumerableOn(obj) {\n                return function isEnumerable(prop) {\n                  return propIsEnumerable.call(obj, prop);\n                };\n              };\n\n              // per ES6 spec, this function has to have a length of 2\n              var assignShim = function assign(target, source1) {\n                if (!canBeObject(target)) {\n                  throw new TypeError('target must be an object');\n                }\n                var objTarget = Object(target);\n                var s, source, i, props;\n                for (s = 1; s < arguments.length; ++s) {\n                  source = Object(arguments[s]);\n                  props = keys(source);\n                  if (hasSymbols && Object.getOwnPropertySymbols) {\n                    props.push.apply(\n                      props,\n                      Object.getOwnPropertySymbols(source).filter(isEnumerableOn(source))\n                    );\n                  }\n                  for (i = 0; i < props.length; ++i) {\n                    objTarget[props[i]] = source[props[i]];\n                  }\n                }\n                return objTarget;\n              };\n\n              defineProperty(Object, 'assign', {\n                value: assignShim,\n                configurable: true,\n                enumerable: false,\n                writable: true\n              });\n            }\n          })();\n        },\n        {}\n      ],\n      35: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Structure\n           * @submodule Structure\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('./main');\n\n          /**\n                             * Stops p5.js from continuously executing the code within <a href=\"#/p5/draw\">draw()</a>.\n                             * If <a href=\"#/p5/loop\">loop()</a> is called, the code in <a href=\"#/p5/draw\">draw()</a> begins to run continuously again.\n                             * If using <a href=\"#/p5/noLoop\">noLoop()</a> in <a href=\"#/p5/setup\">setup()</a>, it should be the last line inside the block.\n                             * <br><br>\n                             * When <a href=\"#/p5/noLoop\">noLoop()</a> is used, it's not possible to manipulate or access the\n                             * screen inside event handling functions such as <a href=\"#/p5/mousePressed\">mousePressed()</a> or\n                             * <a href=\"#/p5/keyPressed\">keyPressed()</a>. Instead, use those functions to call <a href=\"#/p5/redraw\">redraw()</a> or <a href=\"#/p5/loop\">loop()</a>,\n                             * which will run <a href=\"#/p5/draw\">draw()</a>, which can update the screen properly. This means\n                             * that when <a href=\"#/p5/noLoop\">noLoop()</a> has been called, no drawing can happen, and functions\n                             * like <a href=\"#/p5/saveFrame\">saveFrame()</a> or <a href=\"#/p5/loadPixels\">loadPixels()</a> may not be used.\n                             * <br><br>\n                             * Note that if the sketch is resized, <a href=\"#/p5/redraw\">redraw()</a> will be called to update\n                             * the sketch, even after <a href=\"#/p5/noLoop\">noLoop()</a> has been specified. Otherwise, the sketch\n                             * would enter an odd state until <a href=\"#/p5/loop\">loop()</a> was called.\n                             *\n                             * @method noLoop\n                             * @example\n                             * <div><code>\n                             * function setup() {\n                             *   createCanvas(100, 100);\n                             *   background(200);\n                             *   noLoop();\n                             * }\n                            \n                             * function draw() {\n                             *   line(10, 10, 90, 90);\n                             * }\n                             * </code></div>\n                             *\n                             * <div><code>\n                             * let x = 0;\n                             * function setup() {\n                             *   createCanvas(100, 100);\n                             * }\n                             *\n                             * function draw() {\n                             *   background(204);\n                             *   x = x + 0.1;\n                             *   if (x > width) {\n                             *     x = 0;\n                             *   }\n                             *   line(x, 0, x, height);\n                             * }\n                             *\n                             * function mousePressed() {\n                             *   noLoop();\n                             * }\n                             *\n                             * function mouseReleased() {\n                             *   loop();\n                             * }\n                             * </code></div>\n                             *\n                             * @alt\n                             * 113 pixel long line extending from top-left to bottom right of canvas.\n                             * horizontal line moves slowly from left. Loops but stops on mouse press.\n                             *\n                             */\n          p5.prototype.noLoop = function() {\n            this._loop = false;\n          };\n          /**\n           * By default, p5.js loops through draw() continuously, executing the code\n           * within it. However, the <a href=\"#/p5/draw\">draw()</a> loop may be stopped by calling <a href=\"#/p5/noLoop\">noLoop()</a>.\n           * In that case, the <a href=\"#/p5/draw\">draw()</a> loop can be resumed with loop().\n           *\n           * Avoid calling loop() from inside setup().\n           *\n           * @method loop\n           * @example\n           * <div><code>\n           * let x = 0;\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   noLoop();\n           * }\n           *\n           * function draw() {\n           *   background(204);\n           *   x = x + 0.1;\n           *   if (x > width) {\n           *     x = 0;\n           *   }\n           *   line(x, 0, x, height);\n           * }\n           *\n           * function mousePressed() {\n           *   loop();\n           * }\n           *\n           * function mouseReleased() {\n           *   noLoop();\n           * }\n           * </code></div>\n           *\n           * @alt\n           * horizontal line moves slowly from left. Loops but stops on mouse press.\n           *\n           */\n\n          p5.prototype.loop = function() {\n            if (!this._loop) {\n              this._loop = true;\n              if (this._setupDone) {\n                this._draw();\n              }\n            }\n          };\n\n          /**\n           * The <a href=\"#/p5/push\">push()</a> function saves the current drawing style settings and\n           * transformations, while <a href=\"#/p5/pop\">pop()</a> restores these settings. Note that these\n           * functions are always used together. They allow you to change the style\n           * and transformation settings and later return to what you had. When a new\n           * state is started with <a href=\"#/p5/push\">push()</a>, it builds on the current style and transform\n           * information. The <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions can be embedded to provide\n           * more control. (See the second example for a demonstration.)\n           * <br><br>\n           * <a href=\"#/p5/push\">push()</a> stores information related to the current transformation state\n           * and style settings controlled by the following functions: <a href=\"#/p5/fill\">fill()</a>,\n           * <a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/tint\">tint()</a>, <a href=\"#/p5/strokeWeight\">strokeWeight()</a>, <a href=\"#/p5/strokeCap\">strokeCap()</a>, <a href=\"#/p5/strokeJoin\">strokeJoin()</a>,\n           * <a href=\"#/p5/imageMode\">imageMode()</a>, <a href=\"#/p5/rectMode\">rectMode()</a>, <a href=\"#/p5/ellipseMode\">ellipseMode()</a>, <a href=\"#/p5/colorMode\">colorMode()</a>, <a href=\"#/p5/textAlign\">textAlign()</a>,\n           * <a href=\"#/p5/textFont\">textFont()</a>, <a href=\"#/p5/textSize\">textSize()</a>, <a href=\"#/p5/textLeading\">textLeading()</a>.\n           * <br><br>\n           * In WEBGL mode additional style settings are stored. These are controlled by the following functions: <a href=\"#/p5/setCamera\">setCamera()</a>, <a href=\"#/p5/ambientLight\">ambientLight()</a>, <a href=\"#/p5/directionalLight\">directionalLight()</a>,\n           * <a href=\"#/p5/pointLight\">pointLight()</a>, <a href=\"#/p5/texture\">texture()</a>, <a href=\"#/p5/specularMaterial\">specularMaterial()</a>, <a href=\"#/p5/shininess\">shininess()</a>, <a href=\"#/p5/normalMaterial\">normalMaterial()</a>\n           * and <a href=\"#/p5/shader\">shader()</a>.\n           *\n           * @method push\n           * @example\n           * <div>\n           * <code>\n           * ellipse(0, 50, 33, 33); // Left circle\n           *\n           * push(); // Start a new drawing state\n           * strokeWeight(10);\n           * fill(204, 153, 0);\n           * translate(50, 0);\n           * ellipse(0, 50, 33, 33); // Middle circle\n           * pop(); // Restore original state\n           *\n           * ellipse(100, 50, 33, 33); // Right circle\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * ellipse(0, 50, 33, 33); // Left circle\n           *\n           * push(); // Start a new drawing state\n           * strokeWeight(10);\n           * fill(204, 153, 0);\n           * ellipse(33, 50, 33, 33); // Left-middle circle\n           *\n           * push(); // Start another new drawing state\n           * stroke(0, 102, 153);\n           * ellipse(66, 50, 33, 33); // Right-middle circle\n           * pop(); // Restore previous state\n           *\n           * pop(); // Restore original state\n           *\n           * ellipse(100, 50, 33, 33); // Right circle\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Gold ellipse + thick black outline @center 2 white ellipses on left and right.\n           * 2 Gold ellipses left black right blue stroke. 2 white ellipses on left+right.\n           *\n           */\n          p5.prototype.push = function() {\n            this._styles.push({\n              props: {\n                _colorMode: this._colorMode\n              },\n\n              renderer: this._renderer.push()\n            });\n          };\n\n          /**\n           * The <a href=\"#/p5/push\">push()</a> function saves the current drawing style settings and\n           * transformations, while <a href=\"#/p5/pop\">pop()</a> restores these settings. Note that these\n           * functions are always used together. They allow you to change the style\n           * and transformation settings and later return to what you had. When a new\n           * state is started with <a href=\"#/p5/push\">push()</a>, it builds on the current style and transform\n           * information. The <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions can be embedded to provide\n           * more control. (See the second example for a demonstration.)\n           * <br><br>\n           * <a href=\"#/p5/push\">push()</a> stores information related to the current transformation state\n           * and style settings controlled by the following functions: <a href=\"#/p5/fill\">fill()</a>,\n           * <a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/tint\">tint()</a>, <a href=\"#/p5/strokeWeight\">strokeWeight()</a>, <a href=\"#/p5/strokeCap\">strokeCap()</a>, <a href=\"#/p5/strokeJoin\">strokeJoin()</a>,\n           * <a href=\"#/p5/imageMode\">imageMode()</a>, <a href=\"#/p5/rectMode\">rectMode()</a>, <a href=\"#/p5/ellipseMode\">ellipseMode()</a>, <a href=\"#/p5/colorMode\">colorMode()</a>, <a href=\"#/p5/textAlign\">textAlign()</a>,\n           * <a href=\"#/p5/textFont\">textFont()</a>, <a href=\"#/p5/textSize\">textSize()</a>, <a href=\"#/p5/textLeading\">textLeading()</a>.\n           * <br><br>\n           * In WEBGL mode additional style settings are stored. These are controlled by the following functions: <a href=\"#/p5/setCamera\">setCamera()</a>, <a href=\"#/p5/ambientLight\">ambientLight()</a>, <a href=\"#/p5/directionalLight\">directionalLight()</a>,\n           * <a href=\"#/p5/pointLight\">pointLight()</a>, <a href=\"#/p5/texture\">texture()</a>, <a href=\"#/p5/specularMaterial\">specularMaterial()</a>, <a href=\"#/p5/shininess\">shininess()</a>, <a href=\"#/p5/normalMaterial\">normalMaterial()</a>\n           * and <a href=\"#/p5/shader\">shader()</a>.\n           *\n           * @method pop\n           * @example\n           * <div>\n           * <code>\n           * ellipse(0, 50, 33, 33); // Left circle\n           *\n           * push(); // Start a new drawing state\n           * translate(50, 0);\n           * strokeWeight(10);\n           * fill(204, 153, 0);\n           * ellipse(0, 50, 33, 33); // Middle circle\n           * pop(); // Restore original state\n           *\n           * ellipse(100, 50, 33, 33); // Right circle\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * ellipse(0, 50, 33, 33); // Left circle\n           *\n           * push(); // Start a new drawing state\n           * strokeWeight(10);\n           * fill(204, 153, 0);\n           * ellipse(33, 50, 33, 33); // Left-middle circle\n           *\n           * push(); // Start another new drawing state\n           * stroke(0, 102, 153);\n           * ellipse(66, 50, 33, 33); // Right-middle circle\n           * pop(); // Restore previous state\n           *\n           * pop(); // Restore original state\n           *\n           * ellipse(100, 50, 33, 33); // Right circle\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Gold ellipse + thick black outline @center 2 white ellipses on left and right.\n           * 2 Gold ellipses left black right blue stroke. 2 white ellipses on left+right.\n           *\n           */\n          p5.prototype.pop = function() {\n            var style = this._styles.pop();\n            if (style) {\n              this._renderer.pop(style.renderer);\n              Object.assign(this, style.props);\n            } else {\n              console.warn('pop() was called without matching push()');\n            }\n          };\n\n          /**\n           *\n           * Executes the code within <a href=\"#/p5/draw\">draw()</a> one time. This functions allows the\n           * program to update the display window only when necessary, for example\n           * when an event registered by <a href=\"#/p5/mousePressed\">mousePressed()</a> or <a href=\"#/p5/keyPressed\">keyPressed()</a> occurs.\n           * <br><br>\n           * In structuring a program, it only makes sense to call <a href=\"#/p5/redraw\">redraw()</a> within\n           * events such as <a href=\"#/p5/mousePressed\">mousePressed()</a>. This is because <a href=\"#/p5/redraw\">redraw()</a> does not run\n           * <a href=\"#/p5/draw\">draw()</a> immediately (it only sets a flag that indicates an update is\n           * needed).\n           * <br><br>\n           * The <a href=\"#/p5/redraw\">redraw()</a> function does not work properly when called inside <a href=\"#/p5/draw\">draw()</a>.\n           * To enable/disable animations, use <a href=\"#/p5/loop\">loop()</a> and <a href=\"#/p5/noLoop\">noLoop()</a>.\n           * <br><br>\n           * In addition you can set the number of redraws per method call. Just\n           * add an integer as single parameter for the number of redraws.\n           *\n           * @method redraw\n           * @param  {Integer} [n] Redraw for n-times. The default value is 1.\n           * @example\n           * <div><code>\n           * let x = 0;\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   noLoop();\n           * }\n           *\n           * function draw() {\n           *   background(204);\n           *   line(x, 0, x, height);\n           * }\n           *\n           * function mousePressed() {\n           *   x += 1;\n           *   redraw();\n           * }\n           * </code></div>\n           *\n           * <div class='norender'><code>\n           * let x = 0;\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   noLoop();\n           * }\n           *\n           * function draw() {\n           *   background(204);\n           *   x += 1;\n           *   line(x, 0, x, height);\n           * }\n           *\n           * function mousePressed() {\n           *   redraw(5);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * black line on far left of canvas\n           * black line on far left of canvas\n           *\n           */\n          p5.prototype.redraw = function(n) {\n            if (this._inUserDraw || !this._setupDone) {\n              return;\n            }\n\n            var numberOfRedraws = parseInt(n);\n            if (isNaN(numberOfRedraws) || numberOfRedraws < 1) {\n              numberOfRedraws = 1;\n            }\n\n            var context = this._isGlobal ? window : this;\n            var userSetup = context.setup;\n            var userDraw = context.draw;\n            if (typeof userDraw === 'function') {\n              if (typeof userSetup === 'undefined') {\n                context.scale(context._pixelDensity, context._pixelDensity);\n              }\n              var callMethod = function callMethod(f) {\n                f.call(context);\n              };\n              for (var idxRedraw = 0; idxRedraw < numberOfRedraws; idxRedraw++) {\n                context.resetMatrix();\n                if (context._renderer.isP3D) {\n                  context._renderer._update();\n                }\n                context._setProperty('frameCount', context.frameCount + 1);\n                context._registeredMethods.pre.forEach(callMethod);\n                this._inUserDraw = true;\n                try {\n                  userDraw();\n                } finally {\n                  this._inUserDraw = false;\n                }\n                context._registeredMethods.post.forEach(callMethod);\n              }\n            }\n          };\n\n          module.exports = p5;\n        },\n        { './main': 24 }\n      ],\n      36: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Transform\n           * @submodule Transform\n           * @for p5\n           * @requires core\n           * @requires constants\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('./main');\n\n          /**\n           * Multiplies the current matrix by the one specified through the parameters.\n           * This is a powerful operation that can perform the equivalent of translate,\n           * scale, shear and rotate all at once. You can learn more about transformation\n           * matrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\n           * Wikipedia</a>.\n           *\n           * The naming of the arguments here follows the naming of the <a href=\n           * \"https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-transform\">\n           * WHATWG specification</a> and corresponds to a\n           * transformation matrix of the\n           * form:\n           *\n           * > <img style=\"max-width: 150px\" src=\"assets/transformation-matrix.png\"\n           * alt=\"The transformation matrix used when applyMatrix is called\"/>\n           *\n           * @method applyMatrix\n           * @param  {Number} a numbers which define the 2x3 matrix to be multiplied\n           * @param  {Number} b numbers which define the 2x3 matrix to be multiplied\n           * @param  {Number} c numbers which define the 2x3 matrix to be multiplied\n           * @param  {Number} d numbers which define the 2x3 matrix to be multiplied\n           * @param  {Number} e numbers which define the 2x3 matrix to be multiplied\n           * @param  {Number} f numbers which define the 2x3 matrix to be multiplied\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   frameRate(10);\n           *   rectMode(CENTER);\n           * }\n           *\n           * function draw() {\n           *   var step = frameCount % 20;\n           *   background(200);\n           *   // Equivalent to translate(x, y);\n           *   applyMatrix(1, 0, 0, 1, 40 + step, 50);\n           *   rect(0, 0, 50, 50);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * function setup() {\n           *   frameRate(10);\n           *   rectMode(CENTER);\n           * }\n           *\n           * function draw() {\n           *   var step = frameCount % 20;\n           *   background(200);\n           *   translate(50, 50);\n           *   // Equivalent to scale(x, y);\n           *   applyMatrix(1 / step, 0, 0, 1 / step, 0, 0);\n           *   rect(0, 0, 50, 50);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * function setup() {\n           *   frameRate(10);\n           *   rectMode(CENTER);\n           * }\n           *\n           * function draw() {\n           *   var step = frameCount % 20;\n           *   var angle = map(step, 0, 20, 0, TWO_PI);\n           *   var cos_a = cos(angle);\n           *   var sin_a = sin(angle);\n           *   background(200);\n           *   translate(50, 50);\n           *   // Equivalent to rotate(angle);\n           *   applyMatrix(cos_a, sin_a, -sin_a, cos_a, 0, 0);\n           *   rect(0, 0, 50, 50);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * function setup() {\n           *   frameRate(10);\n           *   rectMode(CENTER);\n           * }\n           *\n           * function draw() {\n           *   var step = frameCount % 20;\n           *   var angle = map(step, 0, 20, -PI / 4, PI / 4);\n           *   background(200);\n           *   translate(50, 50);\n           *   // equivalent to shearX(angle);\n           *   var shear_factor = 1 / tan(PI / 2 - angle);\n           *   applyMatrix(1, 0, shear_factor, 1, 0, 0);\n           *   rect(0, 0, 50, 50);\n           * }\n           * </code>\n           * </div>\n           * <div modernizr='webgl'>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   noFill();\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rotateY(PI / 6);\n           *   stroke(153);\n           *   box(35);\n           *   var rad = millis() / 1000;\n           *   // Set rotation angles\n           *   var ct = cos(rad);\n           *   var st = sin(rad);\n           *   // Matrix for rotation around the Y axis\n           *   // prettier-ignore\n           *   applyMatrix(  ct, 0.0,  st,  0.0,\n           *                0.0, 1.0, 0.0,  0.0,\n           *                -st, 0.0,  ct,  0.0,\n           *                0.0, 0.0, 0.0,  1.0);\n           *   stroke(255);\n           *   box(50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * A rectangle translating to the right\n           * A rectangle shrinking to the center\n           * A rectangle rotating clockwise about the center\n           * A rectangle shearing\n           *\n           */\n          p5.prototype.applyMatrix = function(a, b, c, d, e, f) {\n            this._renderer.applyMatrix.apply(this._renderer, arguments);\n            return this;\n          };\n\n          /**\n           * Replaces the current matrix with the identity matrix.\n           *\n           * @method resetMatrix\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * translate(50, 50);\n           * applyMatrix(0.5, 0.5, -0.5, 0.5, 0, 0);\n           * rect(0, 0, 20, 20);\n           * // Note that the translate is also reset.\n           * resetMatrix();\n           * rect(0, 0, 20, 20);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * A rotated retangle in the center with another at the top left corner\n           *\n           */\n          p5.prototype.resetMatrix = function() {\n            this._renderer.resetMatrix();\n            return this;\n          };\n\n          /**\n           * Rotates a shape the amount specified by the angle parameter. This\n           * function accounts for <a href=\"#/p5/angleMode\">angleMode</a>, so angles can be entered in either\n           * RADIANS or DEGREES.\n           * <br><br>\n           * Objects are always rotated around their relative position to the\n           * origin and positive numbers rotate objects in a clockwise direction.\n           * Transformations apply to everything that happens after and subsequent\n           * calls to the function accumulates the effect. For example, calling\n           * rotate(HALF_PI) and then rotate(HALF_PI) is the same as rotate(PI).\n           * All tranformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again.\n           * <br><br>\n           * Technically, <a href=\"#/p5/rotate\">rotate()</a> multiplies the current transformation matrix\n           * by a rotation matrix. This function can be further controlled by\n           * the <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>.\n           *\n           * @method rotate\n           * @param  {Number} angle the angle of rotation, specified in radians\n           *                        or degrees, depending on current angleMode\n           * @param  {p5.Vector|Number[]} [axis] (in 3d) the axis to rotate around\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * translate(width / 2, height / 2);\n           * rotate(PI / 3.0);\n           * rect(-26, -26, 52, 52);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white 52x52 rect with black outline at center rotated counter 45 degrees\n           *\n           */\n          p5.prototype.rotate = function(angle, axis) {\n            p5._validateParameters('rotate', arguments);\n            this._renderer.rotate(this._toRadians(angle), axis);\n            return this;\n          };\n\n          /**\n           * Rotates around X axis.\n           * @method  rotateX\n           * @param  {Number} angle the angle of rotation, specified in radians\n           *                        or degrees, depending on current angleMode\n           * @chainable\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(255);\n           *   rotateX(millis() / 1000);\n           *   box();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 3d box rotating around the x axis.\n           */\n          p5.prototype.rotateX = function(angle) {\n            this._assert3d('rotateX');\n            p5._validateParameters('rotateX', arguments);\n            this._renderer.rotateX(this._toRadians(angle));\n            return this;\n          };\n\n          /**\n           * Rotates around Y axis.\n           * @method rotateY\n           * @param  {Number} angle the angle of rotation, specified in radians\n           *                        or degrees, depending on current angleMode\n           * @chainable\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(255);\n           *   rotateY(millis() / 1000);\n           *   box();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 3d box rotating around the y axis.\n           */\n          p5.prototype.rotateY = function(angle) {\n            this._assert3d('rotateY');\n            p5._validateParameters('rotateY', arguments);\n            this._renderer.rotateY(this._toRadians(angle));\n            return this;\n          };\n\n          /**\n           * Rotates around Z axis. Webgl mode only.\n           * @method rotateZ\n           * @param  {Number} angle the angle of rotation, specified in radians\n           *                        or degrees, depending on current angleMode\n           * @chainable\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(255);\n           *   rotateZ(millis() / 1000);\n           *   box();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 3d box rotating around the z axis.\n           */\n          p5.prototype.rotateZ = function(angle) {\n            this._assert3d('rotateZ');\n            p5._validateParameters('rotateZ', arguments);\n            this._renderer.rotateZ(this._toRadians(angle));\n            return this;\n          };\n\n          /**\n           * Increases or decreases the size of a shape by expanding and contracting\n           * vertices. Objects always scale from their relative origin to the\n           * coordinate system. Scale values are specified as decimal percentages.\n           * For example, the function call scale(2.0) increases the dimension of a\n           * shape by 200%.\n           * <br><br>\n           * Transformations apply to everything that happens after and subsequent\n           * calls to the function multiply the effect. For example, calling scale(2.0)\n           * and then scale(1.5) is the same as scale(3.0). If <a href=\"#/p5/scale\">scale()</a> is called\n           * within <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when the loop begins again.\n           * <br><br>\n           * Using this function with the z parameter is only available in WEBGL mode.\n           * This function can be further controlled with <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>.\n           *\n           * @method scale\n           * @param  {Number|p5.Vector|Number[]} s\n           *                      percent to scale the object, or percentage to\n           *                      scale the object in the x-axis if multiple arguments\n           *                      are given\n           * @param  {Number} [y] percent to scale the object in the y-axis\n           * @param  {Number} [z] percent to scale the object in the z-axis (webgl only)\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * rect(30, 20, 50, 50);\n           * scale(0.5);\n           * rect(30, 20, 50, 50);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * rect(30, 20, 50, 50);\n           * scale(0.5, 1.3);\n           * rect(30, 20, 50, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white 52x52 rect with black outline at center rotated counter 45 degrees\n           * 2 white rects with black outline- 1 50x50 at center. other 25x65 bottom left\n           *\n           */\n          /**\n           * @method scale\n           * @param  {p5.Vector|Number[]} scales per-axis percents to scale the object\n           * @chainable\n           */\n          p5.prototype.scale = function(x, y, z) {\n            p5._validateParameters('scale', arguments);\n            // Only check for Vector argument type if Vector is available\n            if (x instanceof p5.Vector) {\n              var v = x;\n              x = v.x;\n              y = v.y;\n              z = v.z;\n            } else if (x instanceof Array) {\n              var rg = x;\n              x = rg[0];\n              y = rg[1];\n              z = rg[2] || 1;\n            }\n            if (isNaN(y)) {\n              y = z = x;\n            } else if (isNaN(z)) {\n              z = 1;\n            }\n\n            this._renderer.scale.call(this._renderer, x, y, z);\n\n            return this;\n          };\n\n          /**\n           * Shears a shape around the x-axis the amount specified by the angle\n           * parameter. Angles should be specified in the current angleMode.\n           * Objects are always sheared around their relative position to the origin\n           * and positive numbers shear objects in a clockwise direction.\n           * <br><br>\n           * Transformations apply to everything that happens after and subsequent\n           * calls to the function accumulates the effect. For example, calling\n           * shearX(PI/2) and then shearX(PI/2) is the same as shearX(PI).\n           * If <a href=\"#/p5/shearX\">shearX()</a> is called within the <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when\n           * the loop begins again.\n           * <br><br>\n           * Technically, <a href=\"#/p5/shearX\">shearX()</a> multiplies the current transformation matrix by a\n           * rotation matrix. This function can be further controlled by the\n           * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions.\n           *\n           * @method shearX\n           * @param  {Number} angle angle of shear specified in radians or degrees,\n           *                        depending on current angleMode\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * translate(width / 4, height / 4);\n           * shearX(PI / 4.0);\n           * rect(0, 0, 30, 30);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white irregular quadrilateral with black outline at top middle.\n           *\n           */\n          p5.prototype.shearX = function(angle) {\n            p5._validateParameters('shearX', arguments);\n            var rad = this._toRadians(angle);\n            this._renderer.applyMatrix(1, 0, Math.tan(rad), 1, 0, 0);\n            return this;\n          };\n\n          /**\n           * Shears a shape around the y-axis the amount specified by the angle\n           * parameter. Angles should be specified in the current angleMode. Objects\n           * are always sheared around their relative position to the origin and\n           * positive numbers shear objects in a clockwise direction.\n           * <br><br>\n           * Transformations apply to everything that happens after and subsequent\n           * calls to the function accumulates the effect. For example, calling\n           * shearY(PI/2) and then shearY(PI/2) is the same as shearY(PI). If\n           * <a href=\"#/p5/shearY\">shearY()</a> is called within the <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when\n           * the loop begins again.\n           * <br><br>\n           * Technically, <a href=\"#/p5/shearY\">shearY()</a> multiplies the current transformation matrix by a\n           * rotation matrix. This function can be further controlled by the\n           * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions.\n           *\n           * @method shearY\n           * @param  {Number} angle angle of shear specified in radians or degrees,\n           *                        depending on current angleMode\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * translate(width / 4, height / 4);\n           * shearY(PI / 4.0);\n           * rect(0, 0, 30, 30);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white irregular quadrilateral with black outline at middle bottom.\n           *\n           */\n          p5.prototype.shearY = function(angle) {\n            p5._validateParameters('shearY', arguments);\n            var rad = this._toRadians(angle);\n            this._renderer.applyMatrix(1, Math.tan(rad), 0, 1, 0, 0);\n            return this;\n          };\n\n          /**\n    * Specifies an amount to displace objects within the display window.\n    * The x parameter specifies left/right translation, the y parameter\n    * specifies up/down translation.\n    * <br><br>\n    * Transformations are cumulative and apply to everything that happens after\n    * and subsequent calls to the function accumulates the effect. For example,\n    * calling translate(50, 0) and then translate(20, 0) is the same as\n    * translate(70, 0). If <a href=\"#/p5/translate\">translate()</a> is called within <a href=\"#/p5/draw\">draw()</a>, the\n    * transformation is reset when the loop begins again. This function can be\n    * further controlled by using <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>.\n    *\n    * @method translate\n    * @param  {Number} x left/right translation\n    * @param  {Number} y up/down translation\n    * @param  {Number} [z] forward/backward translation (webgl only)\n    * @chainable\n    * @example\n    * <div>\n    * <code>\n    * translate(30, 20);\n    * rect(0, 0, 55, 55);\n    * </code>\n    * </div>\n    *\n    * <div>\n    * <code>\n    * rect(0, 0, 55, 55); // Draw rect at original 0,0\n    * translate(30, 20);\n    * rect(0, 0, 55, 55); // Draw rect at new 0,0\n    * translate(14, 14);\n    * rect(0, 0, 55, 55); // Draw rect at new 0,0\n    * </code>\n    * </div>\n    *\n   \n    * <div>\n    * <code>\n    * function draw() {\n    *   background(200);\n    *   rectMode(CENTER);\n    *   translate(width / 2, height / 2);\n    *   translate(p5.Vector.fromAngle(millis() / 1000, 40));\n    *   rect(0, 0, 20, 20);\n    * }\n    * </code>\n    * </div>\n    *\n    * @alt\n    * white 55x55 rect with black outline at center right.\n    * 3 white 55x55 rects with black outlines at top-l, center-r and bottom-r.\n    * a 20x20 white rect moving in a circle around the canvas\n    *\n    */\n          /**\n           * @method translate\n           * @param  {p5.Vector} vector the vector to translate by\n           * @chainable\n           */\n          p5.prototype.translate = function(x, y, z) {\n            p5._validateParameters('translate', arguments);\n            if (this._renderer.isP3D) {\n              this._renderer.translate(x, y, z);\n            } else {\n              this._renderer.translate(x, y);\n            }\n            return this;\n          };\n\n          module.exports = p5;\n        },\n        { './main': 24 }\n      ],\n      37: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Data\n           * @submodule LocalStorage\n           * @requires core\n           *\n           * This module defines the p5 methods for working with local storage\n           */\n\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          var p5 = _dereq_('../core/main');\n          /**\n           *\n           * Stores a value in local storage under the key name.\n           * Local storage is saved in the browser and persists\n           * between browsing sessions and page reloads.\n           * The key can be the name of the variable but doesn't\n           * have to be. To retrieve stored items\n           * see <a href=\"#/p5/getItem\">getItem</a>.\n           * <br><br>\n           * Sensitive data such as passwords or personal information\n           * should not be stored in local storage.\n           *\n           * @method storeItem\n           * @for p5\n           * @param {String} key\n           * @param {String|Number|Object|Boolean|p5.Color} value\n           *\n           * @example\n           * <div><code>\n           * // Type to change the letter in the\n           * // center of the canvas.\n           * // If you reload the page, it will\n           * // still display the last key you entered\n           *\n           * let myText;\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   myText = getItem('myText');\n           *   if (myText === null) {\n           *     myText = '';\n           *   }\n           * }\n           *\n           * function draw() {\n           *   textSize(40);\n           *   background(255);\n           *   text(myText, width / 2, height / 2);\n           * }\n           *\n           * function keyPressed() {\n           *   myText = key;\n           *   storeItem('myText', myText);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * When you type the key name is displayed as black text on white background.\n           * If you reload the page, the last letter typed is still displaying.\n           *\n           */\n          p5.prototype.storeItem = function(key, value) {\n            if (typeof value === 'undefined') {\n              console.log('You cannot store undefined variables using storeItem()');\n            }\n            var type = _typeof(value);\n            switch (type) {\n              case 'number':\n              case 'boolean':\n                value = value.toString();\n                break;\n              case 'object':\n                if (value instanceof p5.Color) {\n                  type = 'p5.Color';\n                }\n                value = JSON.stringify(value);\n                break;\n              case 'string':\n              default:\n                break;\n            }\n\n            localStorage.setItem(key, value);\n            var typeKey = key + 'p5TypeID';\n            localStorage.setItem(typeKey, type);\n          };\n\n          /**\n           *\n           * Returns the value of an item that was stored in local storage\n           * using storeItem()\n           *\n           * @method getItem\n           * @for p5\n           * @param {String} key name that you wish to use to store in local storage\n           * @return {Number|Object|String|Boolean|p5.Color} Value of stored item\n           *\n           * @example\n           * <div><code>\n           * // Click the mouse to change\n           * // the color of the background\n           * // Once you have changed the color\n           * // it will stay changed even when you\n           * // reload the page.\n           *\n           * let myColor;\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   myColor = getItem('myColor');\n           * }\n           *\n           * function draw() {\n           *   if (myColor !== null) {\n           *     background(myColor);\n           *   }\n           * }\n           *\n           * function mousePressed() {\n           *   myColor = color(random(255), random(255), random(255));\n           *   storeItem('myColor', myColor);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * If you click, the canvas changes to a random color.\n           * If you reload the page, the canvas is still the color it\n           * was when the page was previously loaded.\n           *\n           */\n          p5.prototype.getItem = function(key) {\n            var value = localStorage.getItem(key);\n            var type = localStorage.getItem(key + 'p5TypeID');\n            if (typeof type === 'undefined') {\n              console.log(\n                'Unable to determine type of item stored under ' +\n                  key +\n                  'in local storage. Did you save the item with something other than setItem()?'\n              );\n            } else if (value !== null) {\n              switch (type) {\n                case 'number':\n                  value = parseInt(value);\n                  break;\n                case 'boolean':\n                  value = value === 'true';\n                  break;\n                case 'object':\n                  value = JSON.parse(value);\n                  break;\n                case 'p5.Color':\n                  value = JSON.parse(value);\n                  value = this.color.apply(this, value.levels);\n                  break;\n                case 'string':\n                default:\n                  break;\n              }\n            }\n            return value;\n          };\n\n          /**\n           *\n           * Clears all local storage items set with storeItem()\n           * for the current domain.\n           *\n           * @method clearStorage\n           * @for p5\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myNum = 10;\n           *   let myBool = false;\n           *   storeItem('myNum', myNum);\n           *   storeItem('myBool', myBool);\n           *   print(getItem('myNum')); // logs 10 to the console\n           *   print(getItem('myBool')); // logs false to the console\n           *   clearStorage();\n           *   print(getItem('myNum')); // logs null to the console\n           *   print(getItem('myBool')); // logs null to the console\n           * }\n           * </code></div>\n           */\n          p5.prototype.clearStorage = function() {\n            localStorage.clear();\n          };\n\n          /**\n           *\n           * Removes an item that was stored with storeItem()\n           *\n           * @method removeItem\n           * @param {String} key\n           * @for p5\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myVar = 10;\n           *   storeItem('myVar', myVar);\n           *   print(getItem('myVar')); // logs 10 to the console\n           *   removeItem('myVar');\n           *   print(getItem('myVar')); // logs null to the console\n           * }\n           * </code></div>\n           */\n          p5.prototype.removeItem = function(key) {\n            if (typeof key !== 'string') {\n              console.log(\n                'The argument that you passed to removeItem() - ' +\n                  key +\n                  ' is not a string.'\n              );\n            }\n            localStorage.removeItem(key);\n            localStorage.removeItem(key + 'p5TypeID');\n          };\n        },\n        { '../core/main': 24 }\n      ],\n      38: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Data\n           * @submodule Dictionary\n           * @for p5.TypedDict\n           * @requires core\n           *\n           * This module defines the p5 methods for the p5 Dictionary classes.\n           * The classes StringDict and NumberDict are for storing and working\n           * with key-value pairs.\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          /**\n           *\n           * Creates a new instance of p5.StringDict using the key-value pair\n           * or the object you provide.\n           *\n           * @method createStringDict\n           * @for p5\n           * @param {String} key\n           * @param {String} value\n           * @return {p5.StringDict}\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createStringDict('p5', 'js');\n           *   print(myDictionary.hasKey('p5')); // logs true to console\n           *\n           *   let anotherDictionary = createStringDict({ happy: 'coding' });\n           *   print(anotherDictionary.hasKey('happy')); // logs true to console\n           * }\n           * </code></div>\n           */\n          /**\n           * @method createStringDict\n           * @param {Object} object object\n           * @return {p5.StringDict}\n           */\n\n          p5.prototype.createStringDict = function(key, value) {\n            p5._validateParameters('createStringDict', arguments);\n            return new p5.StringDict(key, value);\n          };\n\n          /**\n           *\n           * Creates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\n           * or object you provide.\n           *\n           * @method createNumberDict\n           * @for p5\n           * @param {Number} key\n           * @param {Number} value\n           * @return {p5.NumberDict}\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict(100, 42);\n           *   print(myDictionary.hasKey(100)); // logs true to console\n           *\n           *   let anotherDictionary = createNumberDict({ 200: 84 });\n           *   print(anotherDictionary.hasKey(200)); // logs true to console\n           * }\n           * </code></div>\n           */\n          /**\n           * @method createNumberDict\n           * @param {Object} object object\n           * @return {p5.NumberDict}\n           */\n\n          p5.prototype.createNumberDict = function(key, value) {\n            p5._validateParameters('createNumberDict', arguments);\n            return new p5.NumberDict(key, value);\n          };\n\n          /**\n           *\n           * Base class for all p5.Dictionary types. Specifically\n           * typed Dictionary classes inherit from this class.\n           *\n           * @class p5.TypedDict\n           *\n           */\n\n          p5.TypedDict = function(key, value) {\n            if (key instanceof Object) {\n              this.data = key;\n            } else {\n              this.data = {};\n              this.data[key] = value;\n            }\n            return this;\n          };\n\n          /**\n           * Returns the number of key-value pairs currently stored in the Dictionary.\n           *\n           * @method size\n           * @return {Integer} the number of key-value pairs in the Dictionary\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict(1, 10);\n           *   myDictionary.create(2, 20);\n           *   myDictionary.create(3, 30);\n           *   print(myDictionary.size()); // logs 3 to the console\n           * }\n           * </code></div>\n           *\n           */\n          p5.TypedDict.prototype.size = function() {\n            return Object.keys(this.data).length;\n          };\n\n          /**\n           * Returns true if the given key exists in the Dictionary,\n           * otherwise returns false.\n           *\n           * @method hasKey\n           * @param {Number|String} key that you want to look up\n           * @return {Boolean} whether that key exists in Dictionary\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createStringDict('p5', 'js');\n           *   print(myDictionary.hasKey('p5')); // logs true to console\n           * }\n           * </code></div>\n           *\n           */\n\n          p5.TypedDict.prototype.hasKey = function(key) {\n            return this.data.hasOwnProperty(key);\n          };\n\n          /**\n           * Returns the value stored at the given key.\n           *\n           * @method get\n           * @param {Number|String} the key you want to access\n           * @return {Number|String} the value stored at that key\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createStringDict('p5', 'js');\n           *   let myValue = myDictionary.get('p5');\n           *   print(myValue === 'js'); // logs true to console\n           * }\n           * </code></div>\n           *\n           */\n\n          p5.TypedDict.prototype.get = function(key) {\n            if (this.data.hasOwnProperty(key)) {\n              return this.data[key];\n            } else {\n              console.log(key + ' does not exist in this Dictionary');\n            }\n          };\n\n          /**\n           * Updates the value associated with the given key in case it already exists\n           * in the Dictionary. Otherwise a new key-value pair is added.\n           *\n           * @method set\n           * @param {Number|String} key\n           * @param {Number|String} value\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createStringDict('p5', 'js');\n           *   myDictionary.set('p5', 'JS');\n           *   myDictionary.print(); // logs \"key: p5 - value: JS\" to console\n           * }\n           * </code></div>\n           *\n           */\n\n          p5.TypedDict.prototype.set = function(key, value) {\n            if (this._validate(value)) {\n              this.data[key] = value;\n            } else {\n              console.log('Those values dont work for this dictionary type.');\n            }\n          };\n\n          /**\n           * private helper function to handle the user passing in objects\n           * during construction or calls to create()\n           */\n\n          p5.TypedDict.prototype._addObj = function(obj) {\n            for (var key in obj) {\n              this.set(key, obj[key]);\n            }\n          };\n\n          /**\n           * Creates a new key-value pair in the Dictionary.\n           *\n           * @method create\n           * @param {Number|String} key\n           * @param {Number|String} value\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createStringDict('p5', 'js');\n           *   myDictionary.create('happy', 'coding');\n           *   myDictionary.print();\n           *   // above logs \"key: p5 - value: js, key: happy - value: coding\" to console\n           * }\n           * </code></div>\n           */\n          /**\n           * @method create\n           * @param {Object} obj key/value pair\n           */\n\n          p5.TypedDict.prototype.create = function(key, value) {\n            if (key instanceof Object && typeof value === 'undefined') {\n              this._addObj(key);\n            } else if (typeof key !== 'undefined') {\n              this.set(key, value);\n            } else {\n              console.log(\n                'In order to create a new Dictionary entry you must pass ' +\n                  'an object or a key, value pair'\n              );\n            }\n          };\n\n          /**\n           * Removes all previously stored key-value pairs from the Dictionary.\n           *\n           * @method clear\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createStringDict('p5', 'js');\n           *   print(myDictionary.hasKey('p5')); // prints 'true'\n           *   myDictionary.clear();\n           *   print(myDictionary.hasKey('p5')); // prints 'false'\n           * }\n           * </code>\n           * </div>\n           */\n\n          p5.TypedDict.prototype.clear = function() {\n            this.data = {};\n          };\n\n          /**\n           * Removes the key-value pair stored at the given key from the Dictionary.\n           *\n           * @method remove\n           * @param {Number|String} key for the pair to remove\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createStringDict('p5', 'js');\n           *   myDictionary.create('happy', 'coding');\n           *   myDictionary.print();\n           *   // above logs \"key: p5 - value: js, key: happy - value: coding\" to console\n           *   myDictionary.remove('p5');\n           *   myDictionary.print();\n           *   // above logs \"key: happy value: coding\" to console\n           * }\n           * </code></div>\n           *\n           */\n\n          p5.TypedDict.prototype.remove = function(key) {\n            if (this.data.hasOwnProperty(key)) {\n              delete this.data[key];\n            } else {\n              throw new Error(key + ' does not exist in this Dictionary');\n            }\n          };\n\n          /**\n           * Logs the set of items currently stored in the Dictionary to the console.\n           *\n           * @method print\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createStringDict('p5', 'js');\n           *   myDictionary.create('happy', 'coding');\n           *   myDictionary.print();\n           *   // above logs \"key: p5 - value: js, key: happy - value: coding\" to console\n           * }\n           * </code>\n           * </div>\n           */\n\n          p5.TypedDict.prototype.print = function() {\n            for (var item in this.data) {\n              console.log('key:' + item + ' value:' + this.data[item]);\n            }\n          };\n\n          /**\n           * Converts the Dictionary into a CSV file for local download.\n           *\n           * @method saveTable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   background(200);\n           *   text('click here to save', 10, 10, 70, 80);\n           * }\n           *\n           * function mousePressed() {\n           *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n           *     createStringDict({\n           *       john: 1940,\n           *       paul: 1942,\n           *       george: 1943,\n           *       ringo: 1940\n           *     }).saveTable('beatles');\n           *   }\n           * }\n           * </code>\n           * </div>\n           */\n\n          p5.TypedDict.prototype.saveTable = function(filename) {\n            var output = '';\n\n            for (var key in this.data) {\n              output += key + ',' + this.data[key] + '\\n';\n            }\n\n            var blob = new Blob([output], { type: 'text/csv' });\n            p5.prototype.downloadFile(blob, filename || 'mycsv', 'csv');\n          };\n\n          /**\n           * Converts the Dictionary into a JSON file for local download.\n           *\n           * @method saveJSON\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   background(200);\n           *   text('click here to save', 10, 10, 70, 80);\n           * }\n           *\n           * function mousePressed() {\n           *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n           *     createStringDict({\n           *       john: 1940,\n           *       paul: 1942,\n           *       george: 1943,\n           *       ringo: 1940\n           *     }).saveJSON('beatles');\n           *   }\n           * }\n           * </code>\n           * </div>\n           */\n\n          p5.TypedDict.prototype.saveJSON = function(filename, opt) {\n            p5.prototype.saveJSON(this.data, filename, opt);\n          };\n\n          /**\n           * private helper function to ensure that the user passed in valid\n           * values for the Dictionary type\n           */\n\n          p5.TypedDict.prototype._validate = function(value) {\n            return true;\n          };\n\n          /**\n           *\n           * A simple Dictionary class for Strings.\n           *\n           * @class p5.StringDict\n           * @extends p5.TypedDict\n           *\n           */\n\n          p5.StringDict = function() {\n            p5.TypedDict.apply(this, arguments);\n          };\n\n          p5.StringDict.prototype = Object.create(p5.TypedDict.prototype);\n\n          p5.StringDict.prototype._validate = function(value) {\n            return typeof value === 'string';\n          };\n\n          /**\n           *\n           * A simple Dictionary class for Numbers.\n           *\n           * @class p5.NumberDict\n           * @extends p5.TypedDict\n           *\n           */\n\n          p5.NumberDict = function() {\n            p5.TypedDict.apply(this, arguments);\n          };\n\n          p5.NumberDict.prototype = Object.create(p5.TypedDict.prototype);\n\n          /**\n           * private helper function to ensure that the user passed in valid\n           * values for the Dictionary type\n           */\n\n          p5.NumberDict.prototype._validate = function(value) {\n            return typeof value === 'number';\n          };\n\n          /**\n           * Add the given number to the value currently stored at the given key.\n           * The sum then replaces the value previously stored in the Dictionary.\n           *\n           * @method add\n           * @param {Number} Key for the value you wish to add to\n           * @param {Number} Number to add to the value\n           * @example\n           * <div class='norender'>\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict(2, 5);\n           *   myDictionary.add(2, 2);\n           *   print(myDictionary.get(2)); // logs 7 to console.\n           * }\n           * </code></div>\n           *\n           *\n           */\n\n          p5.NumberDict.prototype.add = function(key, amount) {\n            if (this.data.hasOwnProperty(key)) {\n              this.data[key] += amount;\n            } else {\n              console.log('The key - ' + key + ' does not exist in this dictionary.');\n            }\n          };\n\n          /**\n           * Subtract the given number from the value currently stored at the given key.\n           * The difference then replaces the value previously stored in the Dictionary.\n           *\n           * @method sub\n           * @param {Number} Key for the value you wish to subtract from\n           * @param {Number} Number to subtract from the value\n           * @example\n           * <div class='norender'>\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict(2, 5);\n           *   myDictionary.sub(2, 2);\n           *   print(myDictionary.get(2)); // logs 3 to console.\n           * }\n           * </code></div>\n           *\n           *\n           */\n\n          p5.NumberDict.prototype.sub = function(key, amount) {\n            this.add(key, -amount);\n          };\n\n          /**\n           * Multiply the given number with the value currently stored at the given key.\n           * The product then replaces the value previously stored in the Dictionary.\n           *\n           * @method mult\n           * @param {Number} Key for value you wish to multiply\n           * @param {Number} Amount to multiply the value by\n           * @example\n           * <div class='norender'>\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict(2, 4);\n           *   myDictionary.mult(2, 2);\n           *   print(myDictionary.get(2)); // logs 8 to console.\n           * }\n           * </code></div>\n           *\n           *\n           */\n\n          p5.NumberDict.prototype.mult = function(key, amount) {\n            if (this.data.hasOwnProperty(key)) {\n              this.data[key] *= amount;\n            } else {\n              console.log('The key - ' + key + ' does not exist in this dictionary.');\n            }\n          };\n\n          /**\n           * Divide the given number with the value currently stored at the given key.\n           * The quotient then replaces the value previously stored in the Dictionary.\n           *\n           * @method div\n           * @param {Number} Key for value you wish to divide\n           * @param {Number} Amount to divide the value by\n           * @example\n           * <div class='norender'>\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict(2, 8);\n           *   myDictionary.div(2, 2);\n           *   print(myDictionary.get(2)); // logs 4 to console.\n           * }\n           * </code></div>\n           *\n           *\n           */\n\n          p5.NumberDict.prototype.div = function(key, amount) {\n            if (this.data.hasOwnProperty(key)) {\n              this.data[key] /= amount;\n            } else {\n              console.log('The key - ' + key + ' does not exist in this dictionary.');\n            }\n          };\n\n          /**\n           * private helper function for finding lowest or highest value\n           * the argument 'flip' is used to flip the comparison arrow\n           * from 'less than' to 'greater than'\n           *\n           */\n\n          p5.NumberDict.prototype._valueTest = function(flip) {\n            if (Object.keys(this.data).length === 0) {\n              throw new Error(\n                'Unable to search for a minimum or maximum value on an empty NumberDict'\n              );\n            } else if (Object.keys(this.data).length === 1) {\n              return this.data[Object.keys(this.data)[0]];\n            } else {\n              var result = this.data[Object.keys(this.data)[0]];\n              for (var key in this.data) {\n                if (this.data[key] * flip < result * flip) {\n                  result = this.data[key];\n                }\n              }\n              return result;\n            }\n          };\n\n          /**\n           * Return the lowest number currently stored in the Dictionary.\n           *\n           * @method minValue\n           * @return {Number}\n           * @example\n           * <div class='norender'>\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict({ 2: -10, 4: 0.65, 1.2: 3 });\n           *   let lowestValue = myDictionary.minValue(); // value is -10\n           *   print(lowestValue);\n           * }\n           * </code></div>\n           *\n           */\n\n          p5.NumberDict.prototype.minValue = function() {\n            return this._valueTest(1);\n          };\n\n          /**\n           * Return the highest number currently stored in the Dictionary.\n           *\n           * @method maxValue\n           * @return {Number}\n           * @example\n           * <div class='norender'>\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict({ 2: -10, 4: 0.65, 1.2: 3 });\n           *   let highestValue = myDictionary.maxValue(); // value is 3\n           *   print(highestValue);\n           * }\n           * </code></div>\n           *\n           */\n\n          p5.NumberDict.prototype.maxValue = function() {\n            return this._valueTest(-1);\n          };\n\n          /**\n           * private helper function for finding lowest or highest key\n           * the argument 'flip' is used to flip the comparison arrow\n           * from 'less than' to 'greater than'\n           *\n           */\n\n          p5.NumberDict.prototype._keyTest = function(flip) {\n            if (Object.keys(this.data).length === 0) {\n              throw new Error('Unable to use minValue on an empty NumberDict');\n            } else if (Object.keys(this.data).length === 1) {\n              return Object.keys(this.data)[0];\n            } else {\n              var result = Object.keys(this.data)[0];\n              for (var i = 1; i < Object.keys(this.data).length; i++) {\n                if (Object.keys(this.data)[i] * flip < result * flip) {\n                  result = Object.keys(this.data)[i];\n                }\n              }\n              return result;\n            }\n          };\n\n          /**\n           * Return the lowest key currently used in the Dictionary.\n           *\n           * @method minKey\n           * @return {Number}\n           * @example\n           * <div class='norender'>\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict({ 2: 4, 4: 6, 1.2: 3 });\n           *   let lowestKey = myDictionary.minKey(); // value is 1.2\n           *   print(lowestKey);\n           * }\n           * </code></div>\n           *\n           */\n\n          p5.NumberDict.prototype.minKey = function() {\n            return this._keyTest(1);\n          };\n\n          /**\n           * Return the highest key currently used in the Dictionary.\n           *\n           * @method maxKey\n           * @return {Number}\n           * @example\n           * <div class='norender'>\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict({ 2: 4, 4: 6, 1.2: 3 });\n           *   let highestKey = myDictionary.maxKey(); // value is 4\n           *   print(highestKey);\n           * }\n           * </code></div>\n           *\n           */\n\n          p5.NumberDict.prototype.maxKey = function() {\n            return this._keyTest(-1);\n          };\n\n          module.exports = p5.TypedDict;\n        },\n        { '../core/main': 24 }\n      ],\n      39: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Events\n           * @submodule Acceleration\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          /**\n           * The system variable deviceOrientation always contains the orientation of\n           * the device. The value of this variable will either be set 'landscape'\n           * or 'portrait'. If no data is available it will be set to 'undefined'.\n           * either LANDSCAPE or PORTRAIT.\n           *\n           * @property {Constant} deviceOrientation\n           * @readOnly\n           */\n          p5.prototype.deviceOrientation = undefined;\n\n          /**\n           * The system variable accelerationX always contains the acceleration of the\n           * device along the x axis. Value is represented as meters per second squared.\n           *\n           * @property {Number} accelerationX\n           * @readOnly\n           * @example\n           * <div>\n           * <code>\n           * // Move a touchscreen device to register\n           * // acceleration changes.\n           * function draw() {\n           *   background(220, 50);\n           *   fill('magenta');\n           *   ellipse(width / 2, height / 2, accelerationX);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * Magnitude of device acceleration is displayed as ellipse size\n           */\n          p5.prototype.accelerationX = 0;\n\n          /**\n           * The system variable accelerationY always contains the acceleration of the\n           * device along the y axis. Value is represented as meters per second squared.\n           *\n           * @property {Number} accelerationY\n           * @readOnly\n           * @example\n           * <div>\n           * <code>\n           * // Move a touchscreen device to register\n           * // acceleration changes.\n           * function draw() {\n           *   background(220, 50);\n           *   fill('magenta');\n           *   ellipse(width / 2, height / 2, accelerationY);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * Magnitude of device acceleration is displayed as ellipse size\n           */\n          p5.prototype.accelerationY = 0;\n\n          /**\n           * The system variable accelerationZ always contains the acceleration of the\n           * device along the z axis. Value is represented as meters per second squared.\n           *\n           * @property {Number} accelerationZ\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * // Move a touchscreen device to register\n           * // acceleration changes.\n           * function draw() {\n           *   background(220, 50);\n           *   fill('magenta');\n           *   ellipse(width / 2, height / 2, accelerationZ);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Magnitude of device acceleration is displayed as ellipse size\n           */\n          p5.prototype.accelerationZ = 0;\n\n          /**\n           * The system variable pAccelerationX always contains the acceleration of the\n           * device along the x axis in the frame previous to the current frame. Value\n           * is represented as meters per second squared.\n           *\n           * @property {Number} pAccelerationX\n           * @readOnly\n           */\n          p5.prototype.pAccelerationX = 0;\n\n          /**\n           * The system variable pAccelerationY always contains the acceleration of the\n           * device along the y axis in the frame previous to the current frame. Value\n           * is represented as meters per second squared.\n           *\n           * @property {Number} pAccelerationY\n           * @readOnly\n           */\n          p5.prototype.pAccelerationY = 0;\n\n          /**\n           * The system variable pAccelerationZ always contains the acceleration of the\n           * device along the z axis in the frame previous to the current frame. Value\n           * is represented as meters per second squared.\n           *\n           * @property {Number} pAccelerationZ\n           * @readOnly\n           */\n          p5.prototype.pAccelerationZ = 0;\n\n          /**\n           * _updatePAccelerations updates the pAcceleration values\n           *\n           * @private\n           */\n          p5.prototype._updatePAccelerations = function() {\n            this._setProperty('pAccelerationX', this.accelerationX);\n            this._setProperty('pAccelerationY', this.accelerationY);\n            this._setProperty('pAccelerationZ', this.accelerationZ);\n          };\n\n          /**\n           * The system variable rotationX always contains the rotation of the\n           * device along the x axis. Value is represented as 0 to +/-180 degrees.\n           * <br><br>\n           * Note: The order the rotations are called is important, ie. if used\n           * together, it must be called in the order Z-X-Y or there might be\n           * unexpected behaviour.\n           *\n           * @property {Number} rotationX\n           * @readOnly\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   //rotateZ(radians(rotationZ));\n           *   rotateX(radians(rotationX));\n           *   //rotateY(radians(rotationY));\n           *   box(200, 200, 200);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * red horizontal line right, green vertical line bottom. black background.\n           */\n          p5.prototype.rotationX = 0;\n\n          /**\n           * The system variable rotationY always contains the rotation of the\n           * device along the y axis. Value is represented as 0 to +/-90 degrees.\n           * <br><br>\n           * Note: The order the rotations are called is important, ie. if used\n           * together, it must be called in the order Z-X-Y or there might be\n           * unexpected behaviour.\n           *\n           * @property {Number} rotationY\n           * @readOnly\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   //rotateZ(radians(rotationZ));\n           *   //rotateX(radians(rotationX));\n           *   rotateY(radians(rotationY));\n           *   box(200, 200, 200);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * red horizontal line right, green vertical line bottom. black background.\n           */\n          p5.prototype.rotationY = 0;\n\n          /**\n           * The system variable rotationZ always contains the rotation of the\n           * device along the z axis. Value is represented as 0 to 359 degrees.\n           * <br><br>\n           * Unlike rotationX and rotationY, this variable is available for devices\n           * with a built-in compass only.\n           * <br><br>\n           * Note: The order the rotations are called is important, ie. if used\n           * together, it must be called in the order Z-X-Y or there might be\n           * unexpected behaviour.\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rotateZ(radians(rotationZ));\n           *   //rotateX(radians(rotationX));\n           *   //rotateY(radians(rotationY));\n           *   box(200, 200, 200);\n           * }\n           * </code>\n           * </div>\n           *\n           * @property {Number} rotationZ\n           * @readOnly\n           *\n           * @alt\n           * red horizontal line right, green vertical line bottom. black background.\n           */\n          p5.prototype.rotationZ = 0;\n\n          /**\n           * The system variable pRotationX always contains the rotation of the\n           * device along the x axis in the frame previous to the current frame. Value\n           * is represented as 0 to +/-180 degrees.\n           * <br><br>\n           * pRotationX can also be used with rotationX to determine the rotate\n           * direction of the device along the X-axis.\n           * @example\n           * <div class='norender'>\n           * <code>\n           * // A simple if statement looking at whether\n           * // rotationX - pRotationX < 0 is true or not will be\n           * // sufficient for determining the rotate direction\n           * // in most cases.\n           *\n           * // Some extra logic is needed to account for cases where\n           * // the angles wrap around.\n           * let rotateDirection = 'clockwise';\n           *\n           * // Simple range conversion to make things simpler.\n           * // This is not absolutely necessary but the logic\n           * // will be different in that case.\n           *\n           * let rX = rotationX + 180;\n           * let pRX = pRotationX + 180;\n           *\n           * if ((rX - pRX > 0 && rX - pRX < 270) || rX - pRX < -270) {\n           *   rotateDirection = 'clockwise';\n           * } else if (rX - pRX < 0 || rX - pRX > 270) {\n           *   rotateDirection = 'counter-clockwise';\n           * }\n           *\n           * print(rotateDirection);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no image to display.\n           *\n           *\n           * @property {Number} pRotationX\n           * @readOnly\n           */\n          p5.prototype.pRotationX = 0;\n\n          /**\n           * The system variable pRotationY always contains the rotation of the\n           * device along the y axis in the frame previous to the current frame. Value\n           * is represented as 0 to +/-90 degrees.\n           * <br><br>\n           * pRotationY can also be used with rotationY to determine the rotate\n           * direction of the device along the Y-axis.\n           * @example\n           * <div class='norender'>\n           * <code>\n           * // A simple if statement looking at whether\n           * // rotationY - pRotationY < 0 is true or not will be\n           * // sufficient for determining the rotate direction\n           * // in most cases.\n           *\n           * // Some extra logic is needed to account for cases where\n           * // the angles wrap around.\n           * let rotateDirection = 'clockwise';\n           *\n           * // Simple range conversion to make things simpler.\n           * // This is not absolutely necessary but the logic\n           * // will be different in that case.\n           *\n           * let rY = rotationY + 180;\n           * let pRY = pRotationY + 180;\n           *\n           * if ((rY - pRY > 0 && rY - pRY < 270) || rY - pRY < -270) {\n           *   rotateDirection = 'clockwise';\n           * } else if (rY - pRY < 0 || rY - pRY > 270) {\n           *   rotateDirection = 'counter-clockwise';\n           * }\n           * print(rotateDirection);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no image to display.\n           *\n           *\n           * @property {Number} pRotationY\n           * @readOnly\n           */\n          p5.prototype.pRotationY = 0;\n\n          /**\n           * The system variable pRotationZ always contains the rotation of the\n           * device along the z axis in the frame previous to the current frame. Value\n           * is represented as 0 to 359 degrees.\n           * <br><br>\n           * pRotationZ can also be used with rotationZ to determine the rotate\n           * direction of the device along the Z-axis.\n           * @example\n           * <div class='norender'>\n           * <code>\n           * // A simple if statement looking at whether\n           * // rotationZ - pRotationZ < 0 is true or not will be\n           * // sufficient for determining the rotate direction\n           * // in most cases.\n           *\n           * // Some extra logic is needed to account for cases where\n           * // the angles wrap around.\n           * let rotateDirection = 'clockwise';\n           *\n           * if (\n           *   (rotationZ - pRotationZ > 0 && rotationZ - pRotationZ < 270) ||\n           *   rotationZ - pRotationZ < -270\n           * ) {\n           *   rotateDirection = 'clockwise';\n           * } else if (rotationZ - pRotationZ < 0 || rotationZ - pRotationZ > 270) {\n           *   rotateDirection = 'counter-clockwise';\n           * }\n           * print(rotateDirection);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no image to display.\n           *\n           *\n           * @property {Number} pRotationZ\n           * @readOnly\n           */\n          p5.prototype.pRotationZ = 0;\n\n          var startAngleX = 0;\n          var startAngleY = 0;\n          var startAngleZ = 0;\n\n          var rotateDirectionX = 'clockwise';\n          var rotateDirectionY = 'clockwise';\n          var rotateDirectionZ = 'clockwise';\n\n          var pRotateDirectionX;\n          var pRotateDirectionY;\n          var pRotateDirectionZ;\n\n          p5.prototype._updatePRotations = function() {\n            this._setProperty('pRotationX', this.rotationX);\n            this._setProperty('pRotationY', this.rotationY);\n            this._setProperty('pRotationZ', this.rotationZ);\n          };\n\n          /**\n           * When a device is rotated, the axis that triggers the <a href=\"#/p5/deviceTurned\">deviceTurned()</a>\n           * method is stored in the turnAxis variable. The turnAxis variable is only defined within\n           * the scope of deviceTurned().\n           * @property {String} turnAxis\n           * @readOnly\n           * @example\n           * <div>\n           * <code>\n           * // Run this example on a mobile device\n           * // Rotate the device by 90 degrees in the\n           * // X-axis to change the value.\n           *\n           * var value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function deviceTurned() {\n           *   if (turnAxis === 'X') {\n           *     if (value === 0) {\n           *       value = 255;\n           *     } else if (value === 255) {\n           *       value = 0;\n           *     }\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black rect in center of canvas. turns white on mobile when device turns\n           * 50x50 black rect in center of canvas. turns white on mobile when x-axis turns\n           */\n          p5.prototype.turnAxis = undefined;\n\n          var move_threshold = 0.5;\n          var shake_threshold = 30;\n\n          /**\n           * The <a href=\"#/p5/setMoveThreshold\">setMoveThreshold()</a> function is used to set the movement threshold for\n           * the <a href=\"#/p5/deviceMoved\">deviceMoved()</a> function. The default threshold is set to 0.5.\n           *\n           * @method setMoveThreshold\n           * @param {number} value The threshold value\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Run this example on a mobile device\n           * // You will need to move the device incrementally further\n           * // the closer the square's color gets to white in order to change the value.\n           *\n           * let value = 0;\n           * let threshold = 0.5;\n           * function setup() {\n           *   setMoveThreshold(threshold);\n           * }\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function deviceMoved() {\n           *   value = value + 5;\n           *   threshold = threshold + 0.1;\n           *   if (value > 255) {\n           *     value = 0;\n           *     threshold = 30;\n           *   }\n           *   setMoveThreshold(threshold);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black rect in center of canvas. turns white on mobile when device moves\n           */\n\n          p5.prototype.setMoveThreshold = function(val) {\n            p5._validateParameters('setMoveThreshold', arguments);\n            move_threshold = val;\n          };\n\n          /**\n           * The <a href=\"#/p5/setShakeThreshold\">setShakeThreshold()</a> function is used to set the movement threshold for\n           * the <a href=\"#/p5/deviceShaken\">deviceShaken()</a> function. The default threshold is set to 30.\n           *\n           * @method setShakeThreshold\n           * @param {number} value The threshold value\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Run this example on a mobile device\n           * // You will need to shake the device more firmly\n           * // the closer the box's fill gets to white in order to change the value.\n           *\n           * let value = 0;\n           * let threshold = 30;\n           * function setup() {\n           *   setShakeThreshold(threshold);\n           * }\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function deviceMoved() {\n           *   value = value + 5;\n           *   threshold = threshold + 5;\n           *   if (value > 255) {\n           *     value = 0;\n           *     threshold = 30;\n           *   }\n           *   setShakeThreshold(threshold);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black rect in center of canvas. turns white on mobile when device\n           * is being shaked\n           */\n\n          p5.prototype.setShakeThreshold = function(val) {\n            p5._validateParameters('setShakeThreshold', arguments);\n            shake_threshold = val;\n          };\n\n          /**\n           * The <a href=\"#/p5/deviceMoved\">deviceMoved()</a> function is called when the device is moved by more than\n           * the threshold value along X, Y or Z axis. The default threshold is set to 0.5.\n           * The threshold value can be changed using <a href=\"https://p5js.org/reference/#/p5/setMoveThreshold\">setMoveThreshold()</a>.\n           *\n           * @method deviceMoved\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Run this example on a mobile device\n           * // Move the device around\n           * // to change the value.\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function deviceMoved() {\n           *   value = value + 5;\n           *   if (value > 255) {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black rect in center of canvas. turns white on mobile when device moves\n           *\n           */\n\n          /**\n           * The <a href=\"#/p5/deviceTurned\">deviceTurned()</a> function is called when the device rotates by\n           * more than 90 degrees continuously.\n           * <br><br>\n           * The axis that triggers the <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method is stored in the turnAxis\n           * variable. The <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method can be locked to trigger on any axis:\n           * X, Y or Z by comparing the turnAxis variable to 'X', 'Y' or 'Z'.\n           *\n           * @method deviceTurned\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Run this example on a mobile device\n           * // Rotate the device by 90 degrees\n           * // to change the value.\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function deviceTurned() {\n           *   if (value === 0) {\n           *     value = 255;\n           *   } else if (value === 255) {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * // Run this example on a mobile device\n           * // Rotate the device by 90 degrees in the\n           * // X-axis to change the value.\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function deviceTurned() {\n           *   if (turnAxis === 'X') {\n           *     if (value === 0) {\n           *       value = 255;\n           *     } else if (value === 255) {\n           *       value = 0;\n           *     }\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black rect in center of canvas. turns white on mobile when device turns\n           * 50x50 black rect in center of canvas. turns white on mobile when x-axis turns\n           *\n           */\n\n          /**\n           * The <a href=\"#/p5/deviceShaken\">deviceShaken()</a> function is called when the device total acceleration\n           * changes of accelerationX and accelerationY values is more than\n           * the threshold value. The default threshold is set to 30.\n           * The threshold value can be changed using <a href=\"https://p5js.org/reference/#/p5/setShakeThreshold\">setShakeThreshold()</a>.\n           *\n           * @method deviceShaken\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Run this example on a mobile device\n           * // Shake the device to change the value.\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function deviceShaken() {\n           *   value = value + 5;\n           *   if (value > 255) {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black rect in center of canvas. turns white on mobile when device shakes\n           *\n           */\n\n          p5.prototype._ondeviceorientation = function(e) {\n            this._updatePRotations();\n            this._setProperty('rotationX', e.beta);\n            this._setProperty('rotationY', e.gamma);\n            this._setProperty('rotationZ', e.alpha);\n            this._handleMotion();\n          };\n          p5.prototype._ondevicemotion = function(e) {\n            this._updatePAccelerations();\n            this._setProperty('accelerationX', e.acceleration.x * 2);\n            this._setProperty('accelerationY', e.acceleration.y * 2);\n            this._setProperty('accelerationZ', e.acceleration.z * 2);\n            this._handleMotion();\n          };\n          p5.prototype._handleMotion = function() {\n            if (window.orientation === 90 || window.orientation === -90) {\n              this._setProperty('deviceOrientation', 'landscape');\n            } else if (window.orientation === 0) {\n              this._setProperty('deviceOrientation', 'portrait');\n            } else if (window.orientation === undefined) {\n              this._setProperty('deviceOrientation', 'undefined');\n            }\n            var deviceMoved = this.deviceMoved || window.deviceMoved;\n            if (typeof deviceMoved === 'function') {\n              if (\n                Math.abs(this.accelerationX - this.pAccelerationX) > move_threshold ||\n                Math.abs(this.accelerationY - this.pAccelerationY) > move_threshold ||\n                Math.abs(this.accelerationZ - this.pAccelerationZ) > move_threshold\n              ) {\n                deviceMoved();\n              }\n            }\n            var deviceTurned = this.deviceTurned || window.deviceTurned;\n            if (typeof deviceTurned === 'function') {\n              // The angles given by rotationX etc is from range -180 to 180.\n              // The following will convert them to 0 to 360 for ease of calculation\n              // of cases when the angles wrapped around.\n              // _startAngleX will be converted back at the end and updated.\n              var wRX = this.rotationX + 180;\n              var wPRX = this.pRotationX + 180;\n              var wSAX = startAngleX + 180;\n              if ((wRX - wPRX > 0 && wRX - wPRX < 270) || wRX - wPRX < -270) {\n                rotateDirectionX = 'clockwise';\n              } else if (wRX - wPRX < 0 || wRX - wPRX > 270) {\n                rotateDirectionX = 'counter-clockwise';\n              }\n              if (rotateDirectionX !== pRotateDirectionX) {\n                wSAX = wRX;\n              }\n              if (Math.abs(wRX - wSAX) > 90 && Math.abs(wRX - wSAX) < 270) {\n                wSAX = wRX;\n                this._setProperty('turnAxis', 'X');\n                deviceTurned();\n              }\n              pRotateDirectionX = rotateDirectionX;\n              startAngleX = wSAX - 180;\n\n              // Y-axis is identical to X-axis except for changing some names.\n              var wRY = this.rotationY + 180;\n              var wPRY = this.pRotationY + 180;\n              var wSAY = startAngleY + 180;\n              if ((wRY - wPRY > 0 && wRY - wPRY < 270) || wRY - wPRY < -270) {\n                rotateDirectionY = 'clockwise';\n              } else if (wRY - wPRY < 0 || wRY - this.pRotationY > 270) {\n                rotateDirectionY = 'counter-clockwise';\n              }\n              if (rotateDirectionY !== pRotateDirectionY) {\n                wSAY = wRY;\n              }\n              if (Math.abs(wRY - wSAY) > 90 && Math.abs(wRY - wSAY) < 270) {\n                wSAY = wRY;\n                this._setProperty('turnAxis', 'Y');\n                deviceTurned();\n              }\n              pRotateDirectionY = rotateDirectionY;\n              startAngleY = wSAY - 180;\n\n              // Z-axis is already in the range 0 to 360\n              // so no conversion is needed.\n              if (\n                (this.rotationZ - this.pRotationZ > 0 &&\n                  this.rotationZ - this.pRotationZ < 270) ||\n                this.rotationZ - this.pRotationZ < -270\n              ) {\n                rotateDirectionZ = 'clockwise';\n              } else if (\n                this.rotationZ - this.pRotationZ < 0 ||\n                this.rotationZ - this.pRotationZ > 270\n              ) {\n                rotateDirectionZ = 'counter-clockwise';\n              }\n              if (rotateDirectionZ !== pRotateDirectionZ) {\n                startAngleZ = this.rotationZ;\n              }\n              if (\n                Math.abs(this.rotationZ - startAngleZ) > 90 &&\n                Math.abs(this.rotationZ - startAngleZ) < 270\n              ) {\n                startAngleZ = this.rotationZ;\n                this._setProperty('turnAxis', 'Z');\n                deviceTurned();\n              }\n              pRotateDirectionZ = rotateDirectionZ;\n              this._setProperty('turnAxis', undefined);\n            }\n            var deviceShaken = this.deviceShaken || window.deviceShaken;\n            if (typeof deviceShaken === 'function') {\n              var accelerationChangeX;\n              var accelerationChangeY;\n              // Add accelerationChangeZ if acceleration change on Z is needed\n              if (this.pAccelerationX !== null) {\n                accelerationChangeX = Math.abs(this.accelerationX - this.pAccelerationX);\n                accelerationChangeY = Math.abs(this.accelerationY - this.pAccelerationY);\n              }\n              if (accelerationChangeX + accelerationChangeY > shake_threshold) {\n                deviceShaken();\n              }\n            }\n          };\n\n          module.exports = p5;\n        },\n        { '../core/main': 24 }\n      ],\n      40: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Events\n           * @submodule Keyboard\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          /**\n           * The boolean system variable <a href=\"#/p5/keyIsPressed\">keyIsPressed</a> is true if any key is pressed\n           * and false if no keys are pressed.\n           *\n           * @property {Boolean} keyIsPressed\n           * @readOnly\n           * @example\n           * <div>\n           * <code>\n           * function draw() {\n           *   if (keyIsPressed === true) {\n           *     fill(0);\n           *   } else {\n           *     fill(255);\n           *   }\n           *   rect(25, 25, 50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 white rect that turns black on keypress.\n           *\n           */\n          p5.prototype.isKeyPressed = false;\n          p5.prototype.keyIsPressed = false; // khan\n\n          /**\n           * The system variable key always contains the value of the most recent\n           * key on the keyboard that was typed. To get the proper capitalization, it\n           * is best to use it within <a href=\"#/p5/keyTyped\">keyTyped()</a>. For non-ASCII keys, use the <a href=\"#/p5/keyCode\">keyCode</a>\n           * variable.\n           *\n           * @property {String} key\n           * @readOnly\n           * @example\n           * <div><code>\n           * // Click any key to display it!\n           * // (Not Guaranteed to be Case Sensitive)\n           * function setup() {\n           *   fill(245, 123, 158);\n           *   textSize(50);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   text(key, 33, 65); // Display last key pressed.\n           * }\n           * </code></div>\n           *\n           * @alt\n           * canvas displays any key value that is pressed in pink font.\n           *\n           */\n          p5.prototype.key = '';\n\n          /**\n           * The variable keyCode is used to detect special keys such as BACKSPACE,\n           * DELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL, OPTION, ALT, UP_ARROW,\n           * DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.\n           * You can also check for custom keys by looking up the keyCode of any key\n           * on a site like this: <a href=\"http://keycode.info/\">keycode.info</a>.\n           *\n           * @property {Integer} keyCode\n           * @readOnly\n           * @example\n           * <div><code>\n           * let fillVal = 126;\n           * function draw() {\n           *   fill(fillVal);\n           *   rect(25, 25, 50, 50);\n           * }\n           *\n           * function keyPressed() {\n           *   if (keyCode === UP_ARROW) {\n           *     fillVal = 255;\n           *   } else if (keyCode === DOWN_ARROW) {\n           *     fillVal = 0;\n           *   }\n           *   return false; // prevent default\n           * }\n           * </code></div>\n           * <div><code>\n           * function draw() {}\n           * function keyPressed() {\n           *   background('yellow');\n           *   text(`${key} ${keyCode}`, 10, 40);\n           *   print(key, ' ', keyCode);\n           *   return false; // prevent default\n           * }\n           * </code></div>\n           * @alt\n           * Grey rect center. turns white when up arrow pressed and black when down\n           * Display key pressed and its keyCode in a yellow box\n           */\n          p5.prototype.keyCode = 0;\n\n          /**\n           * The <a href=\"#/p5/keyPressed\">keyPressed()</a> function is called once every time a key is pressed. The\n           * keyCode for the key that was pressed is stored in the <a href=\"#/p5/keyCode\">keyCode</a> variable.\n           * <br><br>\n           * For non-ASCII keys, use the keyCode variable. You can check if the keyCode\n           * equals BACKSPACE, DELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL,\n           * OPTION, ALT, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.\n           * <br><br>\n           * For ASCII keys, the key that was pressed is stored in the key variable. However, it\n           * does not distinguish between uppercase and lowercase. For this reason, it\n           * is recommended to use <a href=\"#/p5/keyTyped\">keyTyped()</a> to read the key variable, in which the\n           * case of the variable will be distinguished.\n           * <br><br>\n           * Because of how operating systems handle key repeats, holding down a key\n           * may cause multiple calls to <a href=\"#/p5/keyTyped\">keyTyped()</a> (and <a href=\"#/p5/keyReleased\">keyReleased()</a> as well). The\n           * rate of repeat is set by the operating system and how each computer is\n           * configured.<br><br>\n           * Browsers may have different default\n           * behaviors attached to various key events. To prevent any default\n           * behavior for this event, add \"return false\" to the end of the method.\n           *\n           * @method keyPressed\n           * @example\n           * <div>\n           * <code>\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function keyPressed() {\n           *   if (value === 0) {\n           *     value = 255;\n           *   } else {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function keyPressed() {\n           *   if (keyCode === LEFT_ARROW) {\n           *     value = 255;\n           *   } else if (keyCode === RIGHT_ARROW) {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           * <div class=\"norender\">\n           * <code>\n           * function keyPressed() {\n           *   // Do something\n           *   return false; // prevent any default behaviour\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black rect center. turns white when key pressed and black when released\n           * black rect center. turns white when left arrow pressed and black when right.\n           *\n           */\n          p5.prototype._onkeydown = function(e) {\n            if (this._downKeys[e.which]) {\n              // prevent multiple firings\n              return;\n            }\n            this._setProperty('isKeyPressed', true);\n            this._setProperty('keyIsPressed', true);\n            this._setProperty('keyCode', e.which);\n            this._downKeys[e.which] = true;\n            this._setProperty('key', e.key || String.fromCharCode(e.which) || e.which);\n            var keyPressed = this.keyPressed || window.keyPressed;\n            if (typeof keyPressed === 'function' && !e.charCode) {\n              var executeDefault = keyPressed(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n          /**\n           * The <a href=\"#/p5/keyReleased\">keyReleased()</a> function is called once every time a key is released.\n           * See <a href=\"#/p5/key\">key</a> and <a href=\"#/p5/keyCode\">keyCode</a> for more information.<br><br>\n           * Browsers may have different default\n           * behaviors attached to various key events. To prevent any default\n           * behavior for this event, add \"return false\" to the end of the method.\n           *\n           * @method keyReleased\n           * @example\n           * <div>\n           * <code>\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function keyReleased() {\n           *   if (value === 0) {\n           *     value = 255;\n           *   } else {\n           *     value = 0;\n           *   }\n           *   return false; // prevent any default behavior\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black rect center. turns white when key pressed and black when pressed again\n           *\n           */\n          p5.prototype._onkeyup = function(e) {\n            var keyReleased = this.keyReleased || window.keyReleased;\n            this._downKeys[e.which] = false;\n\n            if (!this._areDownKeys()) {\n              this._setProperty('isKeyPressed', false);\n              this._setProperty('keyIsPressed', false);\n            }\n\n            this._setProperty('_lastKeyCodeTyped', null);\n\n            this._setProperty('key', e.key || String.fromCharCode(e.which) || e.which);\n            this._setProperty('keyCode', e.which);\n            if (typeof keyReleased === 'function') {\n              var executeDefault = keyReleased(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          /**\n           * The <a href=\"#/p5/keyTyped\">keyTyped()</a> function is called once every time a key is pressed, but\n           * action keys such as Backspace, Delete, Ctrl, Shift, and Alt are ignored. If you are trying to detect\n           * a keyCode for one of these keys, use the <a href=\"#/p5/keyPressed\">keyPressed()</a> function instead.\n           * The most recent key typed will be stored in the key variable.\n           * <br><br>\n           * Because of how operating systems handle key repeats, holding down a key\n           * will cause multiple calls to <a href=\"#/p5/keyTyped\">keyTyped()</a> (and <a href=\"#/p5/keyReleased\">keyReleased()</a> as well). The\n           * rate of repeat is set by the operating system and how each computer is\n           * configured.<br><br>\n           * Browsers may have different default behaviors attached to various key\n           * events. To prevent any default behavior for this event, add \"return false\"\n           * to the end of the method.\n           *\n           * @method keyTyped\n           * @example\n           * <div>\n           * <code>\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function keyTyped() {\n           *   if (key === 'a') {\n           *     value = 255;\n           *   } else if (key === 'b') {\n           *     value = 0;\n           *   }\n           *   // uncomment to prevent any default behavior\n           *   // return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black rect center. turns white when 'a' key typed and black when 'b' pressed\n           *\n           */\n          p5.prototype._onkeypress = function(e) {\n            if (e.which === this._lastKeyCodeTyped) {\n              // prevent multiple firings\n              return;\n            }\n            this._setProperty('_lastKeyCodeTyped', e.which); // track last keyCode\n            this._setProperty('key', String.fromCharCode(e.which));\n            var keyTyped = this.keyTyped || window.keyTyped;\n            if (typeof keyTyped === 'function') {\n              var executeDefault = keyTyped(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n          /**\n           * The onblur function is called when the user is no longer focused\n           * on the p5 element. Because the keyup events will not fire if the user is\n           * not focused on the element we must assume all keys currently down have\n           * been released.\n           */\n          p5.prototype._onblur = function(e) {\n            this._downKeys = {};\n          };\n\n          /**\n           * The <a href=\"#/p5/keyIsDown\">keyIsDown()</a> function checks if the key is currently down, i.e. pressed.\n           * It can be used if you have an object that moves, and you want several keys\n           * to be able to affect its behaviour simultaneously, such as moving a\n           * sprite diagonally. You can put in any number representing the keyCode of\n           * the key, or use any of the variable <a href=\"#/p5/keyCode\">keyCode</a> names listed\n           * <a href=\"http://p5js.org/reference/#p5/keyCode\">here</a>.\n           *\n           * @method keyIsDown\n           * @param {Number}          code The key to check for.\n           * @return {Boolean}        whether key is down or not\n           * @example\n           * <div><code>\n           * let x = 100;\n           * let y = 100;\n           *\n           * function setup() {\n           *   createCanvas(512, 512);\n           *   fill(255, 0, 0);\n           * }\n           *\n           * function draw() {\n           *   if (keyIsDown(LEFT_ARROW)) {\n           *     x -= 5;\n           *   }\n           *\n           *   if (keyIsDown(RIGHT_ARROW)) {\n           *     x += 5;\n           *   }\n           *\n           *   if (keyIsDown(UP_ARROW)) {\n           *     y -= 5;\n           *   }\n           *\n           *   if (keyIsDown(DOWN_ARROW)) {\n           *     y += 5;\n           *   }\n           *\n           *   clear();\n           *   ellipse(x, y, 50, 50);\n           * }\n           * </code></div>\n           *\n           * <div><code>\n           * let diameter = 50;\n           *\n           * function setup() {\n           *   createCanvas(512, 512);\n           * }\n           *\n           * function draw() {\n           *   // 107 and 187 are keyCodes for \"+\"\n           *   if (keyIsDown(107) || keyIsDown(187)) {\n           *     diameter += 1;\n           *   }\n           *\n           *   // 109 and 189 are keyCodes for \"-\"\n           *   if (keyIsDown(109) || keyIsDown(189)) {\n           *     diameter -= 1;\n           *   }\n           *\n           *   clear();\n           *   fill(255, 0, 0);\n           *   ellipse(50, 50, diameter, diameter);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 50x50 red ellipse moves left, right, up and down with arrow presses.\n           * 50x50 red ellipse gets bigger or smaller when + or - are pressed.\n           *\n           */\n          p5.prototype.keyIsDown = function(code) {\n            p5._validateParameters('keyIsDown', arguments);\n            return this._downKeys[code] || false;\n          };\n\n          /**\n    * The _areDownKeys function returns a boolean true if any keys pressed\n    * and a false if no keys are currently pressed.\n   \n    * Helps avoid instances where multiple keys are pressed simultaneously and\n    * releasing a single key will then switch the\n    * keyIsPressed property to true.\n    * @private\n   **/\n          p5.prototype._areDownKeys = function() {\n            for (var key in this._downKeys) {\n              if (this._downKeys.hasOwnProperty(key) && this._downKeys[key] === true) {\n                return true;\n              }\n            }\n            return false;\n          };\n\n          module.exports = p5;\n        },\n        { '../core/main': 24 }\n      ],\n      41: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Events\n           * @submodule Mouse\n           * @for p5\n           * @requires core\n           * @requires constants\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          var constants = _dereq_('../core/constants');\n\n          /*\n                                               * This is a flag which is false until the first time\n                                               * we receive a mouse event. The pmouseX and pmouseY\n                                               * values will match the mouseX and mouseY values until\n                                               * this interaction takes place.\n                                               */\n          p5.prototype._hasMouseInteracted = false;\n\n          /**\n           * The system variable mouseX always contains the current horizontal\n           * position of the mouse, relative to (0, 0) of the canvas. The value at\n           * the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL.\n           * If touch is used instead of mouse input, mouseX will hold the x value\n           * of the most recent touch point.\n           *\n           * @property {Number} mouseX\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * // Move the mouse across the canvas\n           * function draw() {\n           *   background(244, 248, 252);\n           *   line(mouseX, 0, mouseX, 100);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * horizontal black line moves left and right with mouse x-position\n           *\n           */\n          p5.prototype.mouseX = 0;\n\n          /**\n           * The system variable mouseY always contains the current vertical\n           * position of the mouse, relative to (0, 0) of the canvas. The value at\n           * the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL.\n           * If touch is used instead of mouse input, mouseY will hold the y value\n           * of the most recent touch point.\n           *\n           * @property {Number} mouseY\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * // Move the mouse across the canvas\n           * function draw() {\n           *   background(244, 248, 252);\n           *   line(0, mouseY, 100, mouseY);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * vertical black line moves up and down with mouse y-position\n           *\n           */\n          p5.prototype.mouseY = 0;\n\n          /**\n           * The system variable pmouseX always contains the horizontal position of\n           * the mouse or finger in the frame previous to the current frame, relative to\n           * (0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and\n           * (-width/2, -height/2) for WebGL. Note: pmouseX will be reset to the current mouseX\n           * value at the start of each touch event.\n           *\n           * @property {Number} pmouseX\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * // Move the mouse across the canvas to leave a trail\n           * function setup() {\n           *   //slow down the frameRate to make it more visible\n           *   frameRate(10);\n           * }\n           *\n           * function draw() {\n           *   background(244, 248, 252);\n           *   line(mouseX, mouseY, pmouseX, pmouseY);\n           *   print(pmouseX + ' -> ' + mouseX);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * line trail is created from cursor movements. faster movement make longer line.\n           *\n           */\n          p5.prototype.pmouseX = 0;\n\n          /**\n           * The system variable pmouseY always contains the vertical position of\n           * the mouse or finger in the frame previous to the current frame, relative to\n           * (0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and\n           * (-width/2, -height/2) for WebGL. Note: pmouseY will be reset to the current mouseY\n           * value at the start of each touch event.\n           *\n           * @property {Number} pmouseY\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(237, 34, 93);\n           *   fill(0);\n           *   //draw a square only if the mouse is not moving\n           *   if (mouseY === pmouseY && mouseX === pmouseX) {\n           *     rect(20, 20, 60, 60);\n           *   }\n           *\n           *   print(pmouseY + ' -> ' + mouseY);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 60x60 black rect center, fuchsia background. rect flickers on mouse movement\n           *\n           */\n          p5.prototype.pmouseY = 0;\n\n          /**\n           * The system variable winMouseX always contains the current horizontal\n           * position of the mouse, relative to (0, 0) of the window.\n           *\n           * @property {Number} winMouseX\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * let myCanvas;\n           *\n           * function setup() {\n           *   //use a variable to store a pointer to the canvas\n           *   myCanvas = createCanvas(100, 100);\n           *   const body = document.getElementsByTagName('body')[0];\n           *   myCanvas.parent(body);\n           * }\n           *\n           * function draw() {\n           *   background(237, 34, 93);\n           *   fill(0);\n           *\n           *   //move the canvas to the horizontal mouse position\n           *   //relative to the window\n           *   myCanvas.position(winMouseX + 1, windowHeight / 2);\n           *\n           *   //the y of the square is relative to the canvas\n           *   rect(20, mouseY, 60, 60);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 60x60 black rect y moves with mouse y and fuchsia canvas moves with mouse x\n           *\n           */\n          p5.prototype.winMouseX = 0;\n\n          /**\n           * The system variable winMouseY always contains the current vertical\n           * position of the mouse, relative to (0, 0) of the window.\n           *\n           * @property {Number} winMouseY\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * let myCanvas;\n           *\n           * function setup() {\n           *   //use a variable to store a pointer to the canvas\n           *   myCanvas = createCanvas(100, 100);\n           *   const body = document.getElementsByTagName('body')[0];\n           *   myCanvas.parent(body);\n           * }\n           *\n           * function draw() {\n           *   background(237, 34, 93);\n           *   fill(0);\n           *\n           *   //move the canvas to the vertical mouse position\n           *   //relative to the window\n           *   myCanvas.position(windowWidth / 2, winMouseY + 1);\n           *\n           *   //the x of the square is relative to the canvas\n           *   rect(mouseX, 20, 60, 60);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 60x60 black rect x moves with mouse x and fuchsia canvas y moves with mouse y\n           *\n           */\n          p5.prototype.winMouseY = 0;\n\n          /**\n           * The system variable pwinMouseX always contains the horizontal position\n           * of the mouse in the frame previous to the current frame, relative to\n           * (0, 0) of the window. Note: pwinMouseX will be reset to the current winMouseX\n           * value at the start of each touch event.\n           *\n           * @property {Number} pwinMouseX\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * let myCanvas;\n           *\n           * function setup() {\n           *   //use a variable to store a pointer to the canvas\n           *   myCanvas = createCanvas(100, 100);\n           *   noStroke();\n           *   fill(237, 34, 93);\n           * }\n           *\n           * function draw() {\n           *   clear();\n           *   //the difference between previous and\n           *   //current x position is the horizontal mouse speed\n           *   let speed = abs(winMouseX - pwinMouseX);\n           *   //change the size of the circle\n           *   //according to the horizontal speed\n           *   ellipse(50, 50, 10 + speed * 5, 10 + speed * 5);\n           *   //move the canvas to the mouse position\n           *   myCanvas.position(winMouseX + 1, winMouseY + 1);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * fuchsia ellipse moves with mouse x and y. Grows and shrinks with mouse speed\n           *\n           */\n          p5.prototype.pwinMouseX = 0;\n\n          /**\n           * The system variable pwinMouseY always contains the vertical position of\n           * the mouse in the frame previous to the current frame, relative to (0, 0)\n           * of the window. Note: pwinMouseY will be reset to the current winMouseY\n           * value at the start of each touch event.\n           *\n           * @property {Number} pwinMouseY\n           * @readOnly\n           *\n           *\n           * @example\n           * <div>\n           * <code>\n           * let myCanvas;\n           *\n           * function setup() {\n           *   //use a variable to store a pointer to the canvas\n           *   myCanvas = createCanvas(100, 100);\n           *   noStroke();\n           *   fill(237, 34, 93);\n           * }\n           *\n           * function draw() {\n           *   clear();\n           *   //the difference between previous and\n           *   //current y position is the vertical mouse speed\n           *   let speed = abs(winMouseY - pwinMouseY);\n           *   //change the size of the circle\n           *   //according to the vertical speed\n           *   ellipse(50, 50, 10 + speed * 5, 10 + speed * 5);\n           *   //move the canvas to the mouse position\n           *   myCanvas.position(winMouseX + 1, winMouseY + 1);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * fuchsia ellipse moves with mouse x and y. Grows and shrinks with mouse speed\n           *\n           */\n          p5.prototype.pwinMouseY = 0;\n\n          /**\n           * Processing automatically tracks if the mouse button is pressed and which\n           * button is pressed. The value of the system variable mouseButton is either\n           * LEFT, RIGHT, or CENTER depending on which button was pressed last.\n           * Warning: different browsers may track mouseButton differently.\n           *\n           * @property {Constant} mouseButton\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(237, 34, 93);\n           *   fill(0);\n           *\n           *   if (mouseIsPressed) {\n           *     if (mouseButton === LEFT) {\n           *       ellipse(50, 50, 50, 50);\n           *     }\n           *     if (mouseButton === RIGHT) {\n           *       rect(25, 25, 50, 50);\n           *     }\n           *     if (mouseButton === CENTER) {\n           *       triangle(23, 75, 50, 20, 78, 75);\n           *     }\n           *   }\n           *\n           *   print(mouseButton);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black ellipse appears on center of fuchsia canvas on mouse click/press.\n           *\n           */\n          p5.prototype.mouseButton = 0;\n\n          /**\n           * The boolean system variable mouseIsPressed is true if the mouse is pressed\n           * and false if not.\n           *\n           * @property {Boolean} mouseIsPressed\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(237, 34, 93);\n           *   fill(0);\n           *\n           *   if (mouseIsPressed) {\n           *     ellipse(50, 50, 50, 50);\n           *   } else {\n           *     rect(25, 25, 50, 50);\n           *   }\n           *\n           *   print(mouseIsPressed);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black 50x50 rect becomes ellipse with mouse click/press. fuchsia background.\n           *\n           */\n          p5.prototype.mouseIsPressed = false;\n\n          p5.prototype._updateNextMouseCoords = function(e) {\n            if (this._curElement !== null && (!e.touches || e.touches.length > 0)) {\n              var mousePos = getMousePos(this._curElement.elt, this.width, this.height, e);\n\n              this._setProperty('mouseX', mousePos.x);\n              this._setProperty('mouseY', mousePos.y);\n              this._setProperty('winMouseX', mousePos.winX);\n              this._setProperty('winMouseY', mousePos.winY);\n            }\n            if (!this._hasMouseInteracted) {\n              // For first draw, make previous and next equal\n              this._updateMouseCoords();\n              this._setProperty('_hasMouseInteracted', true);\n            }\n          };\n\n          p5.prototype._updateMouseCoords = function() {\n            this._setProperty('pmouseX', this.mouseX);\n            this._setProperty('pmouseY', this.mouseY);\n            this._setProperty('pwinMouseX', this.winMouseX);\n            this._setProperty('pwinMouseY', this.winMouseY);\n\n            this._setProperty('_pmouseWheelDeltaY', this._mouseWheelDeltaY);\n          };\n\n          function getMousePos(canvas, w, h, evt) {\n            if (evt && !evt.clientX) {\n              // use touches if touch and not mouse\n              if (evt.touches) {\n                evt = evt.touches[0];\n              } else if (evt.changedTouches) {\n                evt = evt.changedTouches[0];\n              }\n            }\n            var rect = canvas.getBoundingClientRect();\n            var sx = canvas.scrollWidth / w || 1;\n            var sy = canvas.scrollHeight / h || 1;\n            return {\n              x: (evt.clientX - rect.left) / sx,\n              y: (evt.clientY - rect.top) / sy,\n              winX: evt.clientX,\n              winY: evt.clientY,\n              id: evt.identifier\n            };\n          }\n\n          p5.prototype._setMouseButton = function(e) {\n            if (e.button === 1) {\n              this._setProperty('mouseButton', constants.CENTER);\n            } else if (e.button === 2) {\n              this._setProperty('mouseButton', constants.RIGHT);\n            } else {\n              this._setProperty('mouseButton', constants.LEFT);\n            }\n          };\n\n          /**\n           * The <a href=\"#/p5/mouseMoved\">mouseMoved()</a> function is called every time the mouse moves and a mouse\n           * button is not pressed.<br><br>\n           * Browsers may have different default\n           * behaviors attached to various mouse events. To prevent any default\n           * behavior for this event, add \"return false\" to the end of the method.\n           *\n           * @method mouseMoved\n           * @param  {Object} [event] optional MouseEvent callback argument.\n           * @example\n           * <div>\n           * <code>\n           * // Move the mouse across the page\n           * // to change its value\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function mouseMoved() {\n           *   value = value + 5;\n           *   if (value > 255) {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * function mouseMoved() {\n           *   ellipse(mouseX, mouseY, 5, 5);\n           *   // prevent default\n           *   return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // returns a MouseEvent object\n           * // as a callback argument\n           * function mouseMoved(event) {\n           *   console.log(event);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black 50x50 rect becomes lighter with mouse movements until white then resets\n           * no image displayed\n           *\n           */\n\n          /**\n           * The <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function is called once every time the mouse moves and\n           * a mouse button is pressed. If no <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function is defined, the\n           * <a href=\"#/p5/touchMoved\">touchMoved()</a> function will be called instead if it is defined.<br><br>\n           * Browsers may have different default\n           * behaviors attached to various mouse events. To prevent any default\n           * behavior for this event, add \"return false\" to the end of the method.\n           *\n           * @method mouseDragged\n           * @param  {Object} [event] optional MouseEvent callback argument.\n           * @example\n           * <div>\n           * <code>\n           * // Drag the mouse across the page\n           * // to change its value\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function mouseDragged() {\n           *   value = value + 5;\n           *   if (value > 255) {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * function mouseDragged() {\n           *   ellipse(mouseX, mouseY, 5, 5);\n           *   // prevent default\n           *   return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // returns a MouseEvent object\n           * // as a callback argument\n           * function mouseDragged(event) {\n           *   console.log(event);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black 50x50 rect turns lighter with mouse click and drag until white, resets\n           * no image displayed\n           *\n           */\n          p5.prototype._onmousemove = function(e) {\n            var context = this._isGlobal ? window : this;\n            var executeDefault;\n            this._updateNextMouseCoords(e);\n            if (!this.mouseIsPressed) {\n              if (typeof context.mouseMoved === 'function') {\n                executeDefault = context.mouseMoved(e);\n                if (executeDefault === false) {\n                  e.preventDefault();\n                }\n              }\n            } else {\n              if (typeof context.mouseDragged === 'function') {\n                executeDefault = context.mouseDragged(e);\n                if (executeDefault === false) {\n                  e.preventDefault();\n                }\n              } else if (typeof context.touchMoved === 'function') {\n                executeDefault = context.touchMoved(e);\n                if (executeDefault === false) {\n                  e.preventDefault();\n                }\n              }\n            }\n          };\n\n          /**\n           * The <a href=\"#/p5/mousePressed\">mousePressed()</a> function is called once after every time a mouse button\n           * is pressed. The mouseButton variable (see the related reference entry)\n           * can be used to determine which button has been pressed. If no\n           * <a href=\"#/p5/mousePressed\">mousePressed()</a> function is defined, the <a href=\"#/p5/touchStarted\">touchStarted()</a> function will be\n           * called instead if it is defined.<br><br>\n           * Browsers may have different default\n           * behaviors attached to various mouse events. To prevent any default\n           * behavior for this event, add \"return false\" to the end of the method.\n           *\n           * @method mousePressed\n           * @param  {Object} [event] optional MouseEvent callback argument.\n           * @example\n           * <div>\n           * <code>\n           * // Click within the image to change\n           * // the value of the rectangle\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function mousePressed() {\n           *   if (value === 0) {\n           *     value = 255;\n           *   } else {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * function mousePressed() {\n           *   ellipse(mouseX, mouseY, 5, 5);\n           *   // prevent default\n           *   return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // returns a MouseEvent object\n           * // as a callback argument\n           * function mousePressed(event) {\n           *   console.log(event);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black 50x50 rect turns white with mouse click/press.\n           * no image displayed\n           *\n           */\n          p5.prototype._onmousedown = function(e) {\n            var context = this._isGlobal ? window : this;\n            var executeDefault;\n            this._setProperty('mouseIsPressed', true);\n            this._setMouseButton(e);\n            this._updateNextMouseCoords(e);\n\n            if (typeof context.mousePressed === 'function') {\n              executeDefault = context.mousePressed(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n              // only safari needs this manual fallback for consistency\n            } else if (\n              navigator.userAgent.toLowerCase().includes('safari') &&\n              typeof context.touchStarted === 'function'\n            ) {\n              executeDefault = context.touchStarted(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          /**\n           * The <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function is called every time a mouse button is\n           * released. If no <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function is defined, the <a href=\"#/p5/touchEnded\">touchEnded()</a>\n           * function will be called instead if it is defined.<br><br>\n           * Browsers may have different default\n           * behaviors attached to various mouse events. To prevent any default\n           * behavior for this event, add \"return false\" to the end of the method.\n           *\n           *\n           * @method mouseReleased\n           * @param  {Object} [event] optional MouseEvent callback argument.\n           * @example\n           * <div>\n           * <code>\n           * // Click within the image to change\n           * // the value of the rectangle\n           * // after the mouse has been clicked\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function mouseReleased() {\n           *   if (value === 0) {\n           *     value = 255;\n           *   } else {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * function mouseReleased() {\n           *   ellipse(mouseX, mouseY, 5, 5);\n           *   // prevent default\n           *   return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // returns a MouseEvent object\n           * // as a callback argument\n           * function mouseReleased(event) {\n           *   console.log(event);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black 50x50 rect turns white with mouse click/press.\n           * no image displayed\n           *\n           */\n          p5.prototype._onmouseup = function(e) {\n            var context = this._isGlobal ? window : this;\n            var executeDefault;\n            this._setProperty('mouseIsPressed', false);\n            if (typeof context.mouseReleased === 'function') {\n              executeDefault = context.mouseReleased(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            } else if (typeof context.touchEnded === 'function') {\n              executeDefault = context.touchEnded(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          p5.prototype._ondragend = p5.prototype._onmouseup;\n          p5.prototype._ondragover = p5.prototype._onmousemove;\n\n          /**\n           * The <a href=\"#/p5/mouseClicked\">mouseClicked()</a> function is called once after a mouse button has been\n           * pressed and then released.<br><br>\n           * Browsers handle clicks differently, so this function is only guaranteed to be\n           * run when the left mouse button is clicked. To handle other mouse buttons\n           * being pressed or released, see <a href=\"#/p5/mousePressed\">mousePressed()</a> or <a href=\"#/p5/mouseReleased\">mouseReleased()</a>.<br><br>\n           * Browsers may have different default\n           * behaviors attached to various mouse events. To prevent any default\n           * behavior for this event, add \"return false\" to the end of the method.\n           *\n           * @method mouseClicked\n           * @param  {Object} [event] optional MouseEvent callback argument.\n           * @example\n           * <div>\n           * <code>\n           * // Click within the image to change\n           * // the value of the rectangle\n           * // after the mouse has been clicked\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           *\n           * function mouseClicked() {\n           *   if (value === 0) {\n           *     value = 255;\n           *   } else {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * function mouseClicked() {\n           *   ellipse(mouseX, mouseY, 5, 5);\n           *   // prevent default\n           *   return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // returns a MouseEvent object\n           * // as a callback argument\n           * function mouseClicked(event) {\n           *   console.log(event);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black 50x50 rect turns white with mouse click/press.\n           * no image displayed\n           *\n           */\n          p5.prototype._onclick = function(e) {\n            var context = this._isGlobal ? window : this;\n            if (typeof context.mouseClicked === 'function') {\n              var executeDefault = context.mouseClicked(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          /**\n           * The <a href=\"#/p5/doubleClicked\">doubleClicked()</a> function is executed every time a event\n           * listener has detected a dblclick event which is a part of the\n           * DOM L3 specification. The doubleClicked event is fired when a\n           * pointing device button (usually a mouse's primary button)\n           * is clicked twice on a single element. For more info on the\n           * dblclick event refer to mozilla's documentation here:\n           * https://developer.mozilla.org/en-US/docs/Web/Events/dblclick\n           *\n           * @method doubleClicked\n           * @param  {Object} [event] optional MouseEvent callback argument.\n           * @example\n           * <div>\n           * <code>\n           * // Click within the image to change\n           * // the value of the rectangle\n           * // after the mouse has been double clicked\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           *\n           * function doubleClicked() {\n           *   if (value === 0) {\n           *     value = 255;\n           *   } else {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * function doubleClicked() {\n           *   ellipse(mouseX, mouseY, 5, 5);\n           *   // prevent default\n           *   return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // returns a MouseEvent object\n           * // as a callback argument\n           * function doubleClicked(event) {\n           *   console.log(event);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black 50x50 rect turns white with mouse doubleClick/press.\n           * no image displayed\n           */\n\n          p5.prototype._ondblclick = function(e) {\n            var context = this._isGlobal ? window : this;\n            if (typeof context.doubleClicked === 'function') {\n              var executeDefault = context.doubleClicked(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          /**\n           * For use with WebGL orbitControl.\n           * @property {Number} _mouseWheelDeltaY\n           * @readOnly\n           * @private\n           */\n          p5.prototype._mouseWheelDeltaY = 0;\n\n          /**\n           * For use with WebGL orbitControl.\n           * @property {Number} _pmouseWheelDeltaY\n           * @readOnly\n           * @private\n           */\n          p5.prototype._pmouseWheelDeltaY = 0;\n\n          /**\n           * The function <a href=\"#/p5/mouseWheel\">mouseWheel()</a> is executed every time a vertical mouse wheel\n           * event is detected either triggered by an actual mouse wheel or by a\n           * touchpad.<br><br>\n           * The event.delta property returns the amount the mouse wheel\n           * have scrolled. The values can be positive or negative depending on the\n           * scroll direction (on OS X with \"natural\" scrolling enabled, the signs\n           * are inverted).<br><br>\n           * Browsers may have different default behaviors attached to various\n           * mouse events. To prevent any default behavior for this event, add\n           * \"return false\" to the end of the method.<br><br>\n           * Due to the current support of the \"wheel\" event on Safari, the function\n           * may only work as expected if \"return false\" is included while using Safari.\n           *\n           * @method mouseWheel\n           * @param  {Object} [event] optional WheelEvent callback argument.\n           *\n           * @example\n           * <div>\n           * <code>\n           * let pos = 25;\n           *\n           * function draw() {\n           *   background(237, 34, 93);\n           *   fill(0);\n           *   rect(25, pos, 50, 50);\n           * }\n           *\n           * function mouseWheel(event) {\n           *   print(event.delta);\n           *   //move the square according to the vertical scroll amount\n           *   pos += event.delta;\n           *   //uncomment to block page scrolling\n           *   //return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black 50x50 rect moves up and down with vertical scroll. fuchsia background\n           *\n           */\n          p5.prototype._onwheel = function(e) {\n            var context = this._isGlobal ? window : this;\n            this._setProperty('_mouseWheelDeltaY', e.deltaY);\n            if (typeof context.mouseWheel === 'function') {\n              e.delta = e.deltaY;\n              var executeDefault = context.mouseWheel(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          module.exports = p5;\n        },\n        { '../core/constants': 18, '../core/main': 24 }\n      ],\n      42: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Events\n           * @submodule Touch\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          /**\n           * The system variable touches[] contains an array of the positions of all\n           * current touch points, relative to (0, 0) of the canvas, and IDs identifying a\n           * unique touch as it moves. Each element in the array is an object with x, y,\n           * and id properties.\n           *\n           * The touches[] array is not supported on Safari and IE on touch-based\n           * desktops (laptops).\n           *\n           * @property {Object[]} touches\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * // On a touchscreen device, touch\n           * // the canvas using one or more fingers\n           * // at the same time\n           * function draw() {\n           *   clear();\n           *   let display = touches.length + ' touches';\n           *   text(display, 5, 10);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Number of touches currently registered are displayed on the canvas\n           */\n          p5.prototype.touches = [];\n\n          p5.prototype._updateTouchCoords = function(e) {\n            if (this._curElement !== null) {\n              var touches = [];\n              for (var i = 0; i < e.touches.length; i++) {\n                touches[i] = getTouchInfo(\n                  this._curElement.elt,\n                  this.width,\n                  this.height,\n                  e,\n                  i\n                );\n              }\n              this._setProperty('touches', touches);\n            }\n          };\n\n          function getTouchInfo(canvas, w, h, e, i) {\n            i = i || 0;\n            var rect = canvas.getBoundingClientRect();\n            var sx = canvas.scrollWidth / w || 1;\n            var sy = canvas.scrollHeight / h || 1;\n            var touch = e.touches[i] || e.changedTouches[i];\n            return {\n              x: (touch.clientX - rect.left) / sx,\n              y: (touch.clientY - rect.top) / sy,\n              winX: touch.clientX,\n              winY: touch.clientY,\n              id: touch.identifier\n            };\n          }\n\n          /**\n           * The touchStarted() function is called once after every time a touch is\n           * registered. If no <a href=\"#/p5/touchStarted\">touchStarted()</a> function is defined, the <a href=\"#/p5/mousePressed\">mousePressed()</a>\n           * function will be called instead if it is defined.<br><br>\n           * Browsers may have different default behaviors attached to various touch\n           * events. To prevent any default behavior for this event, add \"return false\"\n           * to the end of the method.\n           *\n           * @method touchStarted\n           * @param  {Object} [event] optional TouchEvent callback argument.\n           * @example\n           * <div>\n           * <code>\n           * // Touch within the image to change\n           * // the value of the rectangle\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function touchStarted() {\n           *   if (value === 0) {\n           *     value = 255;\n           *   } else {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * function touchStarted() {\n           *   ellipse(mouseX, mouseY, 5, 5);\n           *   // prevent default\n           *   return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // returns a TouchEvent object\n           * // as a callback argument\n           * function touchStarted(event) {\n           *   console.log(event);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black rect turns white with touch event.\n           * no image displayed\n           */\n          p5.prototype._ontouchstart = function(e) {\n            var context = this._isGlobal ? window : this;\n            var executeDefault;\n            this._setProperty('mouseIsPressed', true);\n            this._updateTouchCoords(e);\n            this._updateNextMouseCoords(e);\n            this._updateMouseCoords(); // reset pmouseXY at the start of each touch event\n\n            if (typeof context.touchStarted === 'function') {\n              executeDefault = context.touchStarted(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n              // only safari needs this manual fallback for consistency\n            } else if (\n              navigator.userAgent.toLowerCase().includes('safari') &&\n              typeof context.touchStarted === 'function'\n            ) {\n              executeDefault = context.mousePressed(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          /**\n           * The <a href=\"#/p5/touchMoved\">touchMoved()</a> function is called every time a touch move is registered.\n           * If no <a href=\"#/p5/touchMoved\">touchMoved()</a> function is defined, the <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function will\n           * be called instead if it is defined.<br><br>\n           * Browsers may have different default behaviors attached to various touch\n           * events. To prevent any default behavior for this event, add \"return false\"\n           * to the end of the method.\n           *\n           * @method touchMoved\n           * @param  {Object} [event] optional TouchEvent callback argument.\n           * @example\n           * <div>\n           * <code>\n           * // Move your finger across the page\n           * // to change its value\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function touchMoved() {\n           *   value = value + 5;\n           *   if (value > 255) {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * function touchMoved() {\n           *   ellipse(mouseX, mouseY, 5, 5);\n           *   // prevent default\n           *   return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // returns a TouchEvent object\n           * // as a callback argument\n           * function touchMoved(event) {\n           *   console.log(event);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black rect turns lighter with touch until white. resets\n           * no image displayed\n           *\n           */\n          p5.prototype._ontouchmove = function(e) {\n            var context = this._isGlobal ? window : this;\n            var executeDefault;\n            this._updateTouchCoords(e);\n            this._updateNextMouseCoords(e);\n            if (typeof context.touchMoved === 'function') {\n              executeDefault = context.touchMoved(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            } else if (typeof context.mouseDragged === 'function') {\n              executeDefault = context.mouseDragged(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          /**\n           * The <a href=\"#/p5/touchEnded\">touchEnded()</a> function is called every time a touch ends. If no\n           * <a href=\"#/p5/touchEnded\">touchEnded()</a> function is defined, the <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function will be\n           * called instead if it is defined.<br><br>\n           * Browsers may have different default behaviors attached to various touch\n           * events. To prevent any default behavior for this event, add \"return false\"\n           * to the end of the method.\n           *\n           * @method touchEnded\n           * @param  {Object} [event] optional TouchEvent callback argument.\n           * @example\n           * <div>\n           * <code>\n           * // Release touch within the image to\n           * // change the value of the rectangle\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function touchEnded() {\n           *   if (value === 0) {\n           *     value = 255;\n           *   } else {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * function touchEnded() {\n           *   ellipse(mouseX, mouseY, 5, 5);\n           *   // prevent default\n           *   return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // returns a TouchEvent object\n           * // as a callback argument\n           * function touchEnded(event) {\n           *   console.log(event);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black rect turns white with touch.\n           * no image displayed\n           *\n           */\n          p5.prototype._ontouchend = function(e) {\n            this._setProperty('mouseIsPressed', false);\n            this._updateTouchCoords(e);\n            this._updateNextMouseCoords(e);\n            var context = this._isGlobal ? window : this;\n            var executeDefault;\n            if (typeof context.touchEnded === 'function') {\n              executeDefault = context.touchEnded(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            } else if (typeof context.mouseReleased === 'function') {\n              executeDefault = context.mouseReleased(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          module.exports = p5;\n        },\n        { '../core/main': 24 }\n      ],\n      43: [\n        function(_dereq_, module, exports) {\n          /*global ImageData:false */\n\n          /**\n           * This module defines the filters for use with image buffers.\n           *\n           * This module is basically a collection of functions stored in an object\n           * as opposed to modules. The functions are destructive, modifying\n           * the passed in canvas rather than creating a copy.\n           *\n           * Generally speaking users of this module will use the Filters.apply method\n           * on a canvas to create an effect.\n           *\n           * A number of functions are borrowed/adapted from\n           * http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\n           * or the java processing implementation.\n           */\n\n          'use strict';\n\n          var Filters = {};\n\n          /*\n                   * Helper functions\n                   */\n\n          /**\n           * Returns the pixel buffer for a canvas\n           *\n           * @private\n           *\n           * @param  {Canvas|ImageData} canvas the canvas to get pixels from\n           * @return {Uint8ClampedArray}       a one-dimensional array containing\n           *                                   the data in thc RGBA order, with integer\n           *                                   values between 0 and 255\n           */\n          Filters._toPixels = function(canvas) {\n            if (canvas instanceof ImageData) {\n              return canvas.data;\n            } else {\n              return canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height)\n                .data;\n            }\n          };\n\n          /**\n           * Returns a 32 bit number containing ARGB data at ith pixel in the\n           * 1D array containing pixels data.\n           *\n           * @private\n           *\n           * @param  {Uint8ClampedArray} data array returned by _toPixels()\n           * @param  {Integer}           i    index of a 1D Image Array\n           * @return {Integer}                32 bit integer value representing\n           *                                  ARGB value.\n           */\n          Filters._getARGB = function(data, i) {\n            var offset = i * 4;\n            return (\n              ((data[offset + 3] << 24) & 0xff000000) |\n              ((data[offset] << 16) & 0x00ff0000) |\n              ((data[offset + 1] << 8) & 0x0000ff00) |\n              (data[offset + 2] & 0x000000ff)\n            );\n          };\n\n          /**\n           * Modifies pixels RGBA values to values contained in the data object.\n           *\n           * @private\n           *\n           * @param {Uint8ClampedArray} pixels array returned by _toPixels()\n           * @param {Int32Array}        data   source 1D array where each value\n           *                                   represents ARGB values\n           */\n          Filters._setPixels = function(pixels, data) {\n            var offset = 0;\n            for (var i = 0, al = pixels.length; i < al; i++) {\n              offset = i * 4;\n              pixels[offset + 0] = (data[i] & 0x00ff0000) >>> 16;\n              pixels[offset + 1] = (data[i] & 0x0000ff00) >>> 8;\n              pixels[offset + 2] = data[i] & 0x000000ff;\n              pixels[offset + 3] = (data[i] & 0xff000000) >>> 24;\n            }\n          };\n\n          /**\n           * Returns the ImageData object for a canvas\n           * https://developer.mozilla.org/en-US/docs/Web/API/ImageData\n           *\n           * @private\n           *\n           * @param  {Canvas|ImageData} canvas canvas to get image data from\n           * @return {ImageData}               Holder of pixel data (and width and\n           *                                   height) for a canvas\n           */\n          Filters._toImageData = function(canvas) {\n            if (canvas instanceof ImageData) {\n              return canvas;\n            } else {\n              return canvas\n                .getContext('2d')\n                .getImageData(0, 0, canvas.width, canvas.height);\n            }\n          };\n\n          /**\n           * Returns a blank ImageData object.\n           *\n           * @private\n           *\n           * @param  {Integer} width\n           * @param  {Integer} height\n           * @return {ImageData}\n           */\n          Filters._createImageData = function(width, height) {\n            Filters._tmpCanvas = document.createElement('canvas');\n            Filters._tmpCtx = Filters._tmpCanvas.getContext('2d');\n            return this._tmpCtx.createImageData(width, height);\n          };\n\n          /**\n           * Applys a filter function to a canvas.\n           *\n           * The difference between this and the actual filter functions defined below\n           * is that the filter functions generally modify the pixel buffer but do\n           * not actually put that data back to the canvas (where it would actually\n           * update what is visible). By contrast this method does make the changes\n           * actually visible in the canvas.\n           *\n           * The apply method is the method that callers of this module would generally\n           * use. It has been separated from the actual filters to support an advanced\n           * use case of creating a filter chain that executes without actually updating\n           * the canvas in between everystep.\n           *\n           * @private\n           * @param  {HTMLCanvasElement} canvas [description]\n           * @param  {function(ImageData,Object)} func   [description]\n           * @param  {Object} filterParam  [description]\n           */\n          Filters.apply = function(canvas, func, filterParam) {\n            var pixelsState = canvas.getContext('2d');\n            var imageData = pixelsState.getImageData(0, 0, canvas.width, canvas.height);\n\n            //Filters can either return a new ImageData object, or just modify\n            //the one they received.\n            var newImageData = func(imageData, filterParam);\n            if (newImageData instanceof ImageData) {\n              pixelsState.putImageData(\n                newImageData,\n                0,\n                0,\n                0,\n                0,\n                canvas.width,\n                canvas.height\n              );\n            } else {\n              pixelsState.putImageData(imageData, 0, 0, 0, 0, canvas.width, canvas.height);\n            }\n          };\n\n          /*\n    * Filters\n    */\n\n          /**\n           * Converts the image to black and white pixels depending if they are above or\n           * below the threshold defined by the level parameter. The parameter must be\n           * between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n           *\n           * Borrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\n           *\n           * @private\n           * @param  {Canvas} canvas\n           * @param  {Float} level\n           */\n          Filters.threshold = function(canvas, level) {\n            var pixels = Filters._toPixels(canvas);\n\n            if (level === undefined) {\n              level = 0.5;\n            }\n            var thresh = Math.floor(level * 255);\n\n            for (var i = 0; i < pixels.length; i += 4) {\n              var r = pixels[i];\n              var g = pixels[i + 1];\n              var b = pixels[i + 2];\n              var gray = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n              var val;\n              if (gray >= thresh) {\n                val = 255;\n              } else {\n                val = 0;\n              }\n              pixels[i] = pixels[i + 1] = pixels[i + 2] = val;\n            }\n          };\n\n          /**\n           * Converts any colors in the image to grayscale equivalents.\n           * No parameter is used.\n           *\n           * Borrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\n           *\n           * @private\n           * @param {Canvas} canvas\n           */\n          Filters.gray = function(canvas) {\n            var pixels = Filters._toPixels(canvas);\n\n            for (var i = 0; i < pixels.length; i += 4) {\n              var r = pixels[i];\n              var g = pixels[i + 1];\n              var b = pixels[i + 2];\n\n              // CIE luminance for RGB\n              var gray = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n              pixels[i] = pixels[i + 1] = pixels[i + 2] = gray;\n            }\n          };\n\n          /**\n           * Sets the alpha channel to entirely opaque. No parameter is used.\n           *\n           * @private\n           * @param {Canvas} canvas\n           */\n          Filters.opaque = function(canvas) {\n            var pixels = Filters._toPixels(canvas);\n\n            for (var i = 0; i < pixels.length; i += 4) {\n              pixels[i + 3] = 255;\n            }\n\n            return pixels;\n          };\n\n          /**\n           * Sets each pixel to its inverse value. No parameter is used.\n           * @private\n           * @param  {Canvas} canvas\n           */\n          Filters.invert = function(canvas) {\n            var pixels = Filters._toPixels(canvas);\n\n            for (var i = 0; i < pixels.length; i += 4) {\n              pixels[i] = 255 - pixels[i];\n              pixels[i + 1] = 255 - pixels[i + 1];\n              pixels[i + 2] = 255 - pixels[i + 2];\n            }\n          };\n\n          /**\n           * Limits each channel of the image to the number of colors specified as\n           * the parameter. The parameter can be set to values between 2 and 255, but\n           * results are most noticeable in the lower ranges.\n           *\n           * Adapted from java based processing implementation\n           *\n           * @private\n           * @param  {Canvas} canvas\n           * @param  {Integer} level\n           */\n          Filters.posterize = function(canvas, level) {\n            var pixels = Filters._toPixels(canvas);\n\n            if (level < 2 || level > 255) {\n              throw new Error(\n                'Level must be greater than 2 and less than 255 for posterize'\n              );\n            }\n\n            var levels1 = level - 1;\n            for (var i = 0; i < pixels.length; i += 4) {\n              var rlevel = pixels[i];\n              var glevel = pixels[i + 1];\n              var blevel = pixels[i + 2];\n\n              pixels[i] = ((rlevel * level) >> 8) * 255 / levels1;\n              pixels[i + 1] = ((glevel * level) >> 8) * 255 / levels1;\n              pixels[i + 2] = ((blevel * level) >> 8) * 255 / levels1;\n            }\n          };\n\n          /**\n           * reduces the bright areas in an image\n           * @private\n           * @param  {Canvas} canvas\n           *\n           */\n          Filters.dilate = function(canvas) {\n            var pixels = Filters._toPixels(canvas);\n            var currIdx = 0;\n            var maxIdx = pixels.length ? pixels.length / 4 : 0;\n            var out = new Int32Array(maxIdx);\n            var currRowIdx, maxRowIdx, colOrig, colOut, currLum;\n\n            var idxRight, idxLeft, idxUp, idxDown;\n            var colRight, colLeft, colUp, colDown;\n            var lumRight, lumLeft, lumUp, lumDown;\n\n            while (currIdx < maxIdx) {\n              currRowIdx = currIdx;\n              maxRowIdx = currIdx + canvas.width;\n              while (currIdx < maxRowIdx) {\n                colOrig = colOut = Filters._getARGB(pixels, currIdx);\n                idxLeft = currIdx - 1;\n                idxRight = currIdx + 1;\n                idxUp = currIdx - canvas.width;\n                idxDown = currIdx + canvas.width;\n\n                if (idxLeft < currRowIdx) {\n                  idxLeft = currIdx;\n                }\n                if (idxRight >= maxRowIdx) {\n                  idxRight = currIdx;\n                }\n                if (idxUp < 0) {\n                  idxUp = 0;\n                }\n                if (idxDown >= maxIdx) {\n                  idxDown = currIdx;\n                }\n                colUp = Filters._getARGB(pixels, idxUp);\n                colLeft = Filters._getARGB(pixels, idxLeft);\n                colDown = Filters._getARGB(pixels, idxDown);\n                colRight = Filters._getARGB(pixels, idxRight);\n\n                //compute luminance\n                currLum =\n                  77 * ((colOrig >> 16) & 0xff) +\n                  151 * ((colOrig >> 8) & 0xff) +\n                  28 * (colOrig & 0xff);\n                lumLeft =\n                  77 * ((colLeft >> 16) & 0xff) +\n                  151 * ((colLeft >> 8) & 0xff) +\n                  28 * (colLeft & 0xff);\n                lumRight =\n                  77 * ((colRight >> 16) & 0xff) +\n                  151 * ((colRight >> 8) & 0xff) +\n                  28 * (colRight & 0xff);\n                lumUp =\n                  77 * ((colUp >> 16) & 0xff) +\n                  151 * ((colUp >> 8) & 0xff) +\n                  28 * (colUp & 0xff);\n                lumDown =\n                  77 * ((colDown >> 16) & 0xff) +\n                  151 * ((colDown >> 8) & 0xff) +\n                  28 * (colDown & 0xff);\n\n                if (lumLeft > currLum) {\n                  colOut = colLeft;\n                  currLum = lumLeft;\n                }\n                if (lumRight > currLum) {\n                  colOut = colRight;\n                  currLum = lumRight;\n                }\n                if (lumUp > currLum) {\n                  colOut = colUp;\n                  currLum = lumUp;\n                }\n                if (lumDown > currLum) {\n                  colOut = colDown;\n                  currLum = lumDown;\n                }\n                out[currIdx++] = colOut;\n              }\n            }\n            Filters._setPixels(pixels, out);\n          };\n\n          /**\n           * increases the bright areas in an image\n           * @private\n           * @param  {Canvas} canvas\n           *\n           */\n          Filters.erode = function(canvas) {\n            var pixels = Filters._toPixels(canvas);\n            var currIdx = 0;\n            var maxIdx = pixels.length ? pixels.length / 4 : 0;\n            var out = new Int32Array(maxIdx);\n            var currRowIdx, maxRowIdx, colOrig, colOut, currLum;\n            var idxRight, idxLeft, idxUp, idxDown;\n            var colRight, colLeft, colUp, colDown;\n            var lumRight, lumLeft, lumUp, lumDown;\n\n            while (currIdx < maxIdx) {\n              currRowIdx = currIdx;\n              maxRowIdx = currIdx + canvas.width;\n              while (currIdx < maxRowIdx) {\n                colOrig = colOut = Filters._getARGB(pixels, currIdx);\n                idxLeft = currIdx - 1;\n                idxRight = currIdx + 1;\n                idxUp = currIdx - canvas.width;\n                idxDown = currIdx + canvas.width;\n\n                if (idxLeft < currRowIdx) {\n                  idxLeft = currIdx;\n                }\n                if (idxRight >= maxRowIdx) {\n                  idxRight = currIdx;\n                }\n                if (idxUp < 0) {\n                  idxUp = 0;\n                }\n                if (idxDown >= maxIdx) {\n                  idxDown = currIdx;\n                }\n                colUp = Filters._getARGB(pixels, idxUp);\n                colLeft = Filters._getARGB(pixels, idxLeft);\n                colDown = Filters._getARGB(pixels, idxDown);\n                colRight = Filters._getARGB(pixels, idxRight);\n\n                //compute luminance\n                currLum =\n                  77 * ((colOrig >> 16) & 0xff) +\n                  151 * ((colOrig >> 8) & 0xff) +\n                  28 * (colOrig & 0xff);\n                lumLeft =\n                  77 * ((colLeft >> 16) & 0xff) +\n                  151 * ((colLeft >> 8) & 0xff) +\n                  28 * (colLeft & 0xff);\n                lumRight =\n                  77 * ((colRight >> 16) & 0xff) +\n                  151 * ((colRight >> 8) & 0xff) +\n                  28 * (colRight & 0xff);\n                lumUp =\n                  77 * ((colUp >> 16) & 0xff) +\n                  151 * ((colUp >> 8) & 0xff) +\n                  28 * (colUp & 0xff);\n                lumDown =\n                  77 * ((colDown >> 16) & 0xff) +\n                  151 * ((colDown >> 8) & 0xff) +\n                  28 * (colDown & 0xff);\n\n                if (lumLeft < currLum) {\n                  colOut = colLeft;\n                  currLum = lumLeft;\n                }\n                if (lumRight < currLum) {\n                  colOut = colRight;\n                  currLum = lumRight;\n                }\n                if (lumUp < currLum) {\n                  colOut = colUp;\n                  currLum = lumUp;\n                }\n                if (lumDown < currLum) {\n                  colOut = colDown;\n                  currLum = lumDown;\n                }\n\n                out[currIdx++] = colOut;\n              }\n            }\n            Filters._setPixels(pixels, out);\n          };\n\n          // BLUR\n\n          // internal kernel stuff for the gaussian blur filter\n          var blurRadius;\n          var blurKernelSize;\n          var blurKernel;\n          var blurMult;\n\n          /*\n               * Port of https://github.com/processing/processing/blob/\n               * master/core/src/processing/core/PImage.java#L1250\n               *\n               * Optimized code for building the blur kernel.\n               * further optimized blur code (approx. 15% for radius=20)\n               * bigger speed gains for larger radii (~30%)\n               * added support for various image types (ALPHA, RGB, ARGB)\n               * [toxi 050728]\n               */\n          function buildBlurKernel(r) {\n            var radius = (r * 3.5) | 0;\n            radius = radius < 1 ? 1 : radius < 248 ? radius : 248;\n\n            if (blurRadius !== radius) {\n              blurRadius = radius;\n              blurKernelSize = (1 + blurRadius) << 1;\n              blurKernel = new Int32Array(blurKernelSize);\n              blurMult = new Array(blurKernelSize);\n              for (var l = 0; l < blurKernelSize; l++) {\n                blurMult[l] = new Int32Array(256);\n              }\n\n              var bk, bki;\n              var bm, bmi;\n\n              for (var i = 1, radiusi = radius - 1; i < radius; i++) {\n                blurKernel[radius + i] = blurKernel[radiusi] = bki = radiusi * radiusi;\n                bm = blurMult[radius + i];\n                bmi = blurMult[radiusi--];\n                for (var j = 0; j < 256; j++) {\n                  bm[j] = bmi[j] = bki * j;\n                }\n              }\n              bk = blurKernel[radius] = radius * radius;\n              bm = blurMult[radius];\n\n              for (var k = 0; k < 256; k++) {\n                bm[k] = bk * k;\n              }\n            }\n          }\n\n          // Port of https://github.com/processing/processing/blob/\n          // master/core/src/processing/core/PImage.java#L1433\n          function blurARGB(canvas, radius) {\n            var pixels = Filters._toPixels(canvas);\n            var width = canvas.width;\n            var height = canvas.height;\n            var numPackedPixels = width * height;\n            var argb = new Int32Array(numPackedPixels);\n            for (var j = 0; j < numPackedPixels; j++) {\n              argb[j] = Filters._getARGB(pixels, j);\n            }\n            var sum, cr, cg, cb, ca;\n            var read, ri, ym, ymi, bk0;\n            var a2 = new Int32Array(numPackedPixels);\n            var r2 = new Int32Array(numPackedPixels);\n            var g2 = new Int32Array(numPackedPixels);\n            var b2 = new Int32Array(numPackedPixels);\n            var yi = 0;\n            buildBlurKernel(radius);\n            var x, y, i;\n            var bm;\n            for (y = 0; y < height; y++) {\n              for (x = 0; x < width; x++) {\n                cb = cg = cr = ca = sum = 0;\n                read = x - blurRadius;\n                if (read < 0) {\n                  bk0 = -read;\n                  read = 0;\n                } else {\n                  if (read >= width) {\n                    break;\n                  }\n                  bk0 = 0;\n                }\n                for (i = bk0; i < blurKernelSize; i++) {\n                  if (read >= width) {\n                    break;\n                  }\n                  var c = argb[read + yi];\n                  bm = blurMult[i];\n                  ca += bm[(c & -16777216) >>> 24];\n                  cr += bm[(c & 16711680) >> 16];\n                  cg += bm[(c & 65280) >> 8];\n                  cb += bm[c & 255];\n                  sum += blurKernel[i];\n                  read++;\n                }\n                ri = yi + x;\n                a2[ri] = ca / sum;\n                r2[ri] = cr / sum;\n                g2[ri] = cg / sum;\n                b2[ri] = cb / sum;\n              }\n              yi += width;\n            }\n            yi = 0;\n            ym = -blurRadius;\n            ymi = ym * width;\n            for (y = 0; y < height; y++) {\n              for (x = 0; x < width; x++) {\n                cb = cg = cr = ca = sum = 0;\n                if (ym < 0) {\n                  bk0 = ri = -ym;\n                  read = x;\n                } else {\n                  if (ym >= height) {\n                    break;\n                  }\n                  bk0 = 0;\n                  ri = ym;\n                  read = x + ymi;\n                }\n                for (i = bk0; i < blurKernelSize; i++) {\n                  if (ri >= height) {\n                    break;\n                  }\n                  bm = blurMult[i];\n                  ca += bm[a2[read]];\n                  cr += bm[r2[read]];\n                  cg += bm[g2[read]];\n                  cb += bm[b2[read]];\n                  sum += blurKernel[i];\n                  ri++;\n                  read += width;\n                }\n                argb[x + yi] =\n                  ((ca / sum) << 24) | ((cr / sum) << 16) | ((cg / sum) << 8) | (cb / sum);\n              }\n              yi += width;\n              ymi += width;\n              ym++;\n            }\n            Filters._setPixels(pixels, argb);\n          }\n\n          Filters.blur = function(canvas, radius) {\n            blurARGB(canvas, radius);\n          };\n\n          module.exports = Filters;\n        },\n        {}\n      ],\n      44: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Image\n           * @submodule Image\n           * @for p5\n           * @requires core\n           */\n\n          /**\n           * This module defines the p5 methods for the <a href=\"#/p5.Image\">p5.Image</a> class\n           * for drawing images to the main display canvas.\n           */\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          // This is not global, but ESLint is not aware that\n          // this module is implicitly enclosed with Browserify: this overrides the\n          // redefined-global error and permits using the name \"frames\" for the array\n          // of saved animation frames.\n\n          /* global frames:true */ var frames = [];\n\n          /**\n           * Creates a new <a href=\"#/p5.Image\">p5.Image</a> (the datatype for storing images). This provides a\n           * fresh buffer of pixels to play with. Set the size of the buffer with the\n           * width and height parameters.\n           * <br><br>\n           * .<a href=\"#/p5.Image/pixels\">pixels</a> gives access to an array containing the values for all the pixels\n           * in the display window.\n           * These values are numbers. This array is the size (including an appropriate\n           * factor for the <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4,\n           * representing the R, G, B, A values in order for each pixel, moving from\n           * left to right across each row, then down each column. See .<a href=\"#/p5.Image/pixels\">pixels</a> for\n           * more info. It may also be simpler to use <a href=\"#/p5.Image/set\">set()</a> or <a href=\"#/p5.Image/get\">get()</a>.\n           * <br><br>\n           * Before accessing the pixels of an image, the data must loaded with the\n           * <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> function. After the array data has been modified, the\n           * <a href=\"#/p5.Image/updatePixels\">updatePixels()</a> function must be run to update the changes.\n           *\n           * @method createImage\n           * @param  {Integer} width  width in pixels\n           * @param  {Integer} height height in pixels\n           * @return {p5.Image}       the <a href=\"#/p5.Image\">p5.Image</a> object\n           * @example\n           * <div>\n           * <code>\n           * let img = createImage(66, 66);\n           * img.loadPixels();\n           * for (let i = 0; i < img.width; i++) {\n           *   for (let j = 0; j < img.height; j++) {\n           *     img.set(i, j, color(0, 90, 102));\n           *   }\n           * }\n           * img.updatePixels();\n           * image(img, 17, 17);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img = createImage(66, 66);\n           * img.loadPixels();\n           * for (let i = 0; i < img.width; i++) {\n           *   for (let j = 0; j < img.height; j++) {\n           *     img.set(i, j, color(0, 90, 102, (i % img.width) * 2));\n           *   }\n           * }\n           * img.updatePixels();\n           * image(img, 17, 17);\n           * image(img, 34, 34);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let pink = color(255, 102, 204);\n           * let img = createImage(66, 66);\n           * img.loadPixels();\n           * let d = pixelDensity();\n           * let halfImage = 4 * (img.width * d) * (img.height / 2 * d);\n           * for (let i = 0; i < halfImage; i += 4) {\n           *   img.pixels[i] = red(pink);\n           *   img.pixels[i + 1] = green(pink);\n           *   img.pixels[i + 2] = blue(pink);\n           *   img.pixels[i + 3] = alpha(pink);\n           * }\n           * img.updatePixels();\n           * image(img, 17, 17);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 66x66 dark turquoise rect in center of canvas.\n           * 2 gradated dark turquoise rects fade left. 1 center 1 bottom right of canvas\n           * no image displayed\n           *\n           */\n          p5.prototype.createImage = function(width, height) {\n            p5._validateParameters('createImage', arguments);\n            return new p5.Image(width, height);\n          };\n\n          /**\n           *  Save the current canvas as an image. The browser will either save the\n           *  file immediately, or prompt the user with a dialogue window.\n           *\n           *  @method saveCanvas\n           *  @param  {p5.Element|HTMLCanvasElement} selectedCanvas   a variable\n           *                                  representing a specific html5 canvas (optional)\n           *  @param  {String} [filename]\n           *  @param  {String} [extension]      'jpg' or 'png'\n           *\n           *  @example\n           * <div class='norender notest'><code>\n           * function setup() {\n           *   let c = createCanvas(100, 100);\n           *   background(255, 0, 0);\n           *   saveCanvas(c, 'myCanvas', 'jpg');\n           * }\n           * </code></div>\n           * <div class='norender notest'><code>\n           * // note that this example has the same result as above\n           * // if no canvas is specified, defaults to main canvas\n           * function setup() {\n           *   let c = createCanvas(100, 100);\n           *   background(255, 0, 0);\n           *   saveCanvas('myCanvas', 'jpg');\n           *\n           *   // all of the following are valid\n           *   saveCanvas(c, 'myCanvas', 'jpg');\n           *   saveCanvas(c, 'myCanvas.jpg');\n           *   saveCanvas(c, 'myCanvas');\n           *   saveCanvas(c);\n           *   saveCanvas('myCanvas', 'png');\n           *   saveCanvas('myCanvas');\n           *   saveCanvas();\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           * no image displayed\n           * no image displayed\n           */\n          /**\n           *  @method saveCanvas\n           *  @param  {String} [filename]\n           *  @param  {String} [extension]\n           */\n          p5.prototype.saveCanvas = function() {\n            p5._validateParameters('saveCanvas', arguments);\n\n            // copy arguments to array\n            var args = [].slice.call(arguments);\n            var htmlCanvas, filename, extension;\n\n            if (arguments[0] instanceof HTMLCanvasElement) {\n              htmlCanvas = arguments[0];\n              args.shift();\n            } else if (arguments[0] instanceof p5.Element) {\n              htmlCanvas = arguments[0].elt;\n              args.shift();\n            } else {\n              htmlCanvas = this._curElement && this._curElement.elt;\n            }\n\n            if (args.length >= 1) {\n              filename = args[0];\n            }\n            if (args.length >= 2) {\n              extension = args[1];\n            }\n\n            extension =\n              extension ||\n              p5.prototype._checkFileExtension(filename, extension)[1] ||\n              'png';\n\n            var mimeType;\n            switch (extension) {\n              default:\n                //case 'png':\n                mimeType = 'image/png';\n                break;\n              case 'jpeg':\n              case 'jpg':\n                mimeType = 'image/jpeg';\n                break;\n            }\n\n            htmlCanvas.toBlob(function(blob) {\n              p5.prototype.downloadFile(blob, filename, extension);\n            }, mimeType);\n          };\n\n          /**\n    *  Capture a sequence of frames that can be used to create a movie.\n    *  Accepts a callback. For example, you may wish to send the frames\n    *  to a server where they can be stored or converted into a movie.\n    *  If no callback is provided, the browser will pop up save dialogues in an\n    *  attempt to download all of the images that have just been created. With the\n    *  callback provided the image data isn't saved by default but instead passed\n    *  as an argument to the callback function as an array of objects, with the\n    *  size of array equal to the total number of frames.\n    *\n    *  Note that <a href=\"#/p5.Image/saveFrames\">saveFrames()</a> will only save the first 15 frames of an animation.\n    *  To export longer animations, you might look into a library like\n    *  <a href=\"https://github.com/spite/ccapture.js/\">ccapture.js</a>.\n    *\n    *  @method saveFrames\n    *  @param  {String}   filename\n    *  @param  {String}   extension 'jpg' or 'png'\n    *  @param  {Number}   duration  Duration in seconds to save the frames for.\n    *  @param  {Number}   framerate  Framerate to save the frames in.\n    *  @param  {function(Array)} [callback] A callback function that will be executed\n                                     to handle the image data. This function\n                                     should accept an array as argument. The\n                                     array will contain the specified number of\n                                     frames of objects. Each object has three\n                                     properties: imageData - an\n                                     image/octet-stream, filename and extension.\n    *  @example\n    *  <div><code>\n    * function draw() {\n    *   background(mouseX);\n    * }\n    *\n    * function mousePressed() {\n    *   saveFrames('out', 'png', 1, 25, data => {\n    *     print(data);\n    *   });\n    * }\n   </code></div>\n    *\n    * @alt\n    * canvas background goes from light to dark with mouse x.\n    *\n    */\n          p5.prototype.saveFrames = function(fName, ext, _duration, _fps, callback) {\n            p5._validateParameters('saveFrames', arguments);\n            var duration = _duration || 3;\n            duration = p5.prototype.constrain(duration, 0, 15);\n            duration = duration * 1000;\n            var fps = _fps || 15;\n            fps = p5.prototype.constrain(fps, 0, 22);\n            var count = 0;\n\n            var makeFrame = p5.prototype._makeFrame;\n            var cnv = this._curElement.elt;\n            var frameFactory = setInterval(function() {\n              makeFrame(fName + count, ext, cnv);\n              count++;\n            }, 1000 / fps);\n\n            setTimeout(function() {\n              clearInterval(frameFactory);\n              if (callback) {\n                callback(frames);\n              } else {\n                for (var i = 0; i < frames.length; i++) {\n                  var f = frames[i];\n                  p5.prototype.downloadFile(f.imageData, f.filename, f.ext);\n                }\n              }\n              frames = []; // clear frames\n            }, duration + 0.01);\n          };\n\n          p5.prototype._makeFrame = function(filename, extension, _cnv) {\n            var cnv;\n            if (this) {\n              cnv = this._curElement.elt;\n            } else {\n              cnv = _cnv;\n            }\n            var mimeType;\n            if (!extension) {\n              extension = 'png';\n              mimeType = 'image/png';\n            } else {\n              switch (extension.toLowerCase()) {\n                case 'png':\n                  mimeType = 'image/png';\n                  break;\n                case 'jpeg':\n                  mimeType = 'image/jpeg';\n                  break;\n                case 'jpg':\n                  mimeType = 'image/jpeg';\n                  break;\n                default:\n                  mimeType = 'image/png';\n                  break;\n              }\n            }\n            var downloadMime = 'image/octet-stream';\n            var imageData = cnv.toDataURL(mimeType);\n            imageData = imageData.replace(mimeType, downloadMime);\n\n            var thisFrame = {};\n            thisFrame.imageData = imageData;\n            thisFrame.filename = filename;\n            thisFrame.ext = extension;\n            frames.push(thisFrame);\n          };\n\n          module.exports = p5;\n        },\n        { '../core/main': 24 }\n      ],\n      45: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Image\n           * @submodule Loading & Displaying\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          var Filters = _dereq_('./filters');\n          var canvas = _dereq_('../core/helpers');\n          var constants = _dereq_('../core/constants');\n\n          _dereq_('../core/error_helpers');\n\n          /**\n           * Loads an image from a path and creates a <a href=\"#/p5.Image\">p5.Image</a> from it.\n           * <br><br>\n           * The image may not be immediately available for rendering\n           * If you want to ensure that the image is ready before doing\n           * anything with it, place the <a href=\"#/p5/loadImage\">loadImage()</a> call in <a href=\"#/p5/preload\">preload()</a>.\n           * You may also supply a callback function to handle the image when it's ready.\n           * <br><br>\n           * The path to the image should be relative to the HTML file\n           * that links in your sketch. Loading an image from a URL or other\n           * remote location may be blocked due to your browser's built-in\n           * security.\n           *\n           * @method loadImage\n           * @param  {String} path Path of the image to be loaded\n           * @param  {function(p5.Image)} [successCallback] Function to be called once\n           *                                the image is loaded. Will be passed the\n           *                                <a href=\"#/p5.Image\">p5.Image</a>.\n           * @param  {function(Event)}    [failureCallback] called with event error if\n           *                                the image fails to load.\n           * @return {p5.Image}             the <a href=\"#/p5.Image\">p5.Image</a> object\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/laDefense.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * function setup() {\n           *   // here we use a callback to display the image after loading\n           *   loadImage('assets/laDefense.jpg', img => {\n           *     image(img, 0, 0);\n           *   });\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * image of the underside of a white umbrella and grided ceililng above\n           * image of the underside of a white umbrella and grided ceililng above\n           *\n           */\n          p5.prototype.loadImage = function(path, successCallback, failureCallback) {\n            p5._validateParameters('loadImage', arguments);\n            var img = new Image();\n            var pImg = new p5.Image(1, 1, this);\n\n            var self = this;\n            img.onload = function() {\n              pImg.width = pImg.canvas.width = img.width;\n              pImg.height = pImg.canvas.height = img.height;\n\n              // Draw the image into the backing canvas of the p5.Image\n              pImg.drawingContext.drawImage(img, 0, 0);\n              pImg.modified = true;\n\n              if (typeof successCallback === 'function') {\n                successCallback(pImg);\n              }\n\n              self._decrementPreload();\n            };\n            img.onerror = function(e) {\n              p5._friendlyFileLoadError(0, img.src);\n              if (typeof failureCallback === 'function') {\n                failureCallback(e);\n              } else {\n                console.error(e);\n              }\n            };\n\n            // Set crossOrigin in case image is served with CORS headers.\n            // This will let us draw to the canvas without tainting it.\n            // See https://developer.mozilla.org/en-US/docs/HTML/CORS_Enabled_Image\n            // When using data-uris the file will be loaded locally\n            // so we don't need to worry about crossOrigin with base64 file types.\n            if (path.indexOf('data:image/') !== 0) {\n              img.crossOrigin = 'Anonymous';\n            }\n\n            // start loading the image\n            img.src = path;\n\n            return pImg;\n          };\n\n          /**\n           * Validates clipping params. Per drawImage spec sWidth and sHight cannot be\n           * negative or greater than image intrinsic width and height\n           * @private\n           * @param {Number} sVal\n           * @param {Number} iVal\n           * @returns {Number}\n           * @private\n           */\n          function _sAssign(sVal, iVal) {\n            if (sVal > 0 && sVal < iVal) {\n              return sVal;\n            } else {\n              return iVal;\n            }\n          }\n\n          /**\n           * Draw an image to the p5.js canvas.\n           *\n           * This function can be used with different numbers of parameters. The\n           * simplest use requires only three parameters: img, x, and y—where (x, y) is\n           * the position of the image. Two more parameters can optionally be added to\n           * specify the width and height of the image.\n           *\n           * This function can also be used with all eight Number parameters. To\n           * differentiate between all these parameters, p5.js uses the language of\n           * \"destination rectangle\" (which corresponds to \"dx\", \"dy\", etc.) and \"source\n           * image\" (which corresponds to \"sx\", \"sy\", etc.) below. Specifying the\n           * \"source image\" dimensions can be useful when you want to display a\n           * subsection of the source image instead of the whole thing. Here's a diagram\n           * to explain further:\n           * <img src=\"assets/drawImage.png\"></img>\n           *\n           * @method image\n           * @param  {p5.Image|p5.Element} img    the image to display\n           * @param  {Number}   x     the x-coordinate of the top-left corner of the image\n           * @param  {Number}   y     the y-coordinate of the top-left corner of the image\n           * @param  {Number}   [width]  the width to draw the image\n           * @param  {Number}   [height] the height to draw the image\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/laDefense.jpg');\n           * }\n           * function setup() {\n           *   // Top-left corner of the img is at (0, 0)\n           *   // Width and height are the img's original width and height\n           *   image(img, 0, 0);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/laDefense.jpg');\n           * }\n           * function setup() {\n           *   background(50);\n           *   // Top-left corner of the img is at (10, 10)\n           *   // Width and height are 50 x 50\n           *   image(img, 10, 10, 50, 50);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * function setup() {\n           *   // Here, we use a callback to display the image after loading\n           *   loadImage('assets/laDefense.jpg', img => {\n           *     image(img, 0, 0);\n           *   });\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/gradient.png');\n           * }\n           * function setup() {\n           *   // 1. Background image\n           *   // Top-left corner of the img is at (0, 0)\n           *   // Width and height are the img's original width and height, 100 x 100\n           *   image(img, 0, 0);\n           *   // 2. Top right image\n           *   // Top-left corner of destination rectangle is at (50, 0)\n           *   // Destination rectangle width and height are 40 x 20\n           *   // The next parameters are relative to the source image:\n           *   // - Starting at position (50, 50) on the source image, capture a 50 x 50\n           *   // subsection\n           *   // - Draw this subsection to fill the dimensions of the destination rectangle\n           *   image(img, 50, 0, 40, 20, 50, 50, 50, 50);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * image of the underside of a white umbrella and gridded ceiling above\n           * image of the underside of a white umbrella and gridded ceiling above\n           *\n           */\n          /**\n           * @method image\n           * @param  {p5.Image|p5.Element} img\n           * @param  {Number}   dx     the x-coordinate of the destination\n           *                           rectangle in which to draw the source image\n           * @param  {Number}   dy     the y-coordinate of the destination\n           *                           rectangle in which to draw the source image\n           * @param  {Number}   dWidth  the width of the destination rectangle\n           * @param  {Number}   dHeight the height of the destination rectangle\n           * @param  {Number}   sx     the x-coordinate of the subsection of the source\n           * image to draw into the destination rectangle\n           * @param  {Number}   sy     the y-coordinate of the subsection of the source\n           * image to draw into the destination rectangle\n           * @param {Number}    [sWidth] the width of the subsection of the\n           *                           source image to draw into the destination\n           *                           rectangle\n           * @param {Number}    [sHeight] the height of the subsection of the\n           *                            source image to draw into the destination rectangle\n           */\n          p5.prototype.image = function(\n            img,\n            dx,\n            dy,\n            dWidth,\n            dHeight,\n            sx,\n            sy,\n            sWidth,\n            sHeight\n          ) {\n            // set defaults per spec: https://goo.gl/3ykfOq\n\n            p5._validateParameters('image', arguments);\n\n            var defW = img.width;\n            var defH = img.height;\n\n            if (img.elt && img.elt.videoWidth && !img.canvas) {\n              // video no canvas\n              defW = img.elt.videoWidth;\n              defH = img.elt.videoHeight;\n            }\n\n            var _dx = dx;\n            var _dy = dy;\n            var _dw = dWidth || defW;\n            var _dh = dHeight || defH;\n            var _sx = sx || 0;\n            var _sy = sy || 0;\n            var _sw = sWidth || defW;\n            var _sh = sHeight || defH;\n\n            _sw = _sAssign(_sw, defW);\n            _sh = _sAssign(_sh, defH);\n\n            // This part needs cleanup and unit tests\n            // see issues https://github.com/processing/p5.js/issues/1741\n            // and https://github.com/processing/p5.js/issues/1673\n            var pd = 1;\n\n            if (img.elt && !img.canvas && img.elt.style.width) {\n              //if img is video and img.elt.size() has been used and\n              //no width passed to image()\n              if (img.elt.videoWidth && !dWidth) {\n                pd = img.elt.videoWidth;\n              } else {\n                //all other cases\n                pd = img.elt.width;\n              }\n              pd /= parseInt(img.elt.style.width, 10);\n            }\n\n            _sx *= pd;\n            _sy *= pd;\n            _sh *= pd;\n            _sw *= pd;\n\n            var vals = canvas.modeAdjust(_dx, _dy, _dw, _dh, this._renderer._imageMode);\n\n            // tint the image if there is a tint\n            this._renderer.image(img, _sx, _sy, _sw, _sh, vals.x, vals.y, vals.w, vals.h);\n          };\n\n          /**\n           * Sets the fill value for displaying images. Images can be tinted to\n           * specified colors or made transparent by including an alpha value.\n           * <br><br>\n           * To apply transparency to an image without affecting its color, use\n           * white as the tint color and specify an alpha value. For instance,\n           * tint(255, 128) will make an image 50% transparent (assuming the default\n           * alpha range of 0-255, which can be changed with <a href=\"#/p5/colorMode\">colorMode()</a>).\n           * <br><br>\n           * The value for the gray parameter must be less than or equal to the current\n           * maximum value as specified by <a href=\"#/p5/colorMode\">colorMode()</a>. The default maximum value is\n           * 255.\n           *\n           *\n           * @method tint\n           * @param  {Number}        v1      red or hue value relative to\n           *                                 the current color range\n           * @param  {Number}        v2      green or saturation value\n           *                                 relative to the current color range\n           * @param  {Number}        v3      blue or brightness value\n           *                                 relative to the current color range\n           * @param  {Number}        [alpha]\n           *\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/laDefense.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   tint(0, 153, 204); // Tint blue\n           *   image(img, 50, 0);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/laDefense.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   tint(0, 153, 204, 126); // Tint blue and set transparency\n           *   image(img, 50, 0);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/laDefense.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   tint(255, 126); // Apply transparency without changing color\n           *   image(img, 50, 0);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 2 side by side images of umbrella and ceiling, one image with blue tint\n           * Images of umbrella and ceiling, one half of image with blue tint\n           * 2 side by side images of umbrella and ceiling, one image translucent\n           *\n           */\n\n          /**\n           * @method tint\n           * @param  {String}        value   a color string\n           */\n\n          /**\n           * @method tint\n           * @param  {Number}        gray   a gray value\n           * @param  {Number}        [alpha]\n           */\n\n          /**\n           * @method tint\n           * @param  {Number[]}      values  an array containing the red,green,blue &\n           *                                 and alpha components of the color\n           */\n\n          /**\n           * @method tint\n           * @param  {p5.Color}      color   the tint color\n           */\n          p5.prototype.tint = function() {\n            p5._validateParameters('tint', arguments);\n            var c = this.color.apply(this, arguments);\n            this._renderer._tint = c.levels;\n          };\n\n          /**\n           * Removes the current fill value for displaying images and reverts to\n           * displaying images with their original hues.\n           *\n           * @method noTint\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   tint(0, 153, 204); // Tint blue\n           *   image(img, 0, 0);\n           *   noTint(); // Disable tint\n           *   image(img, 50, 0);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 2 side by side images of bricks, left image with blue tint\n           *\n           */\n          p5.prototype.noTint = function() {\n            this._renderer._tint = null;\n          };\n\n          /**\n           * Apply the current tint color to the input image, return the resulting\n           * canvas.\n           *\n           * @private\n           * @param {p5.Image} The image to be tinted\n           * @return {canvas} The resulting tinted canvas\n           *\n           */\n          p5.prototype._getTintedImageCanvas = function(img) {\n            if (!img.canvas) {\n              return img;\n            }\n            var pixels = Filters._toPixels(img.canvas);\n            var tmpCanvas = document.createElement('canvas');\n            tmpCanvas.width = img.canvas.width;\n            tmpCanvas.height = img.canvas.height;\n            var tmpCtx = tmpCanvas.getContext('2d');\n            var id = tmpCtx.createImageData(img.canvas.width, img.canvas.height);\n            var newPixels = id.data;\n\n            for (var i = 0; i < pixels.length; i += 4) {\n              var r = pixels[i];\n              var g = pixels[i + 1];\n              var b = pixels[i + 2];\n              var a = pixels[i + 3];\n\n              newPixels[i] = r * this._renderer._tint[0] / 255;\n              newPixels[i + 1] = g * this._renderer._tint[1] / 255;\n              newPixels[i + 2] = b * this._renderer._tint[2] / 255;\n              newPixels[i + 3] = a * this._renderer._tint[3] / 255;\n            }\n\n            tmpCtx.putImageData(id, 0, 0);\n            return tmpCanvas;\n          };\n\n          /**\n           * Set image mode. Modifies the location from which images are drawn by\n           * changing the way in which parameters given to <a href=\"#/p5/image\">image()</a> are interpreted.\n           * The default mode is imageMode(CORNER), which interprets the second and\n           * third parameters of <a href=\"#/p5/image\">image()</a> as the upper-left corner of the image. If\n           * two additional parameters are specified, they are used to set the image's\n           * width and height.\n           * <br><br>\n           * imageMode(CORNERS) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a>\n           * as the location of one corner, and the fourth and fifth parameters as the\n           * opposite corner.\n           * <br><br>\n           * imageMode(CENTER) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a>\n           * as the image's center point. If two additional parameters are specified,\n           * they are used to set the image's width and height.\n           *\n           * @method imageMode\n           * @param {Constant} mode either CORNER, CORNERS, or CENTER\n           * @example\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   imageMode(CORNER);\n           *   image(img, 10, 10, 50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   imageMode(CORNERS);\n           *   image(img, 10, 10, 90, 40);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   imageMode(CENTER);\n           *   image(img, 50, 50, 80, 80);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * small square image of bricks\n           * horizontal rectangle image of bricks\n           * large square image of bricks\n           *\n           */\n          p5.prototype.imageMode = function(m) {\n            p5._validateParameters('imageMode', arguments);\n            if (\n              m === constants.CORNER ||\n              m === constants.CORNERS ||\n              m === constants.CENTER\n            ) {\n              this._renderer._imageMode = m;\n            }\n          };\n\n          module.exports = p5;\n        },\n        {\n          '../core/constants': 18,\n          '../core/error_helpers': 20,\n          '../core/helpers': 21,\n          '../core/main': 24,\n          './filters': 43\n        }\n      ],\n      46: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Image\n           * @submodule Image\n           * @requires core\n           * @requires constants\n           * @requires filters\n           */\n\n          /**\n           * This module defines the <a href=\"#/p5.Image\">p5.Image</a> class and P5 methods for\n           * drawing images to the main display canvas.\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          var Filters = _dereq_('./filters');\n\n          /*\n                                     * Class methods\n                                     */\n\n          /**\n           * Creates a new <a href=\"#/p5.Image\">p5.Image</a>. A <a href=\"#/p5.Image\">p5.Image</a> is a canvas backed representation of an\n           * image.\n           * <br><br>\n           * p5 can display .gif, .jpg and .png images. Images may be displayed\n           * in 2D and 3D space. Before an image is used, it must be loaded with the\n           * <a href=\"#/p5/loadImage\">loadImage()</a> function. The <a href=\"#/p5.Image\">p5.Image</a> class contains fields for the width and\n           * height of the image, as well as an array called <a href=\"#/p5.Image/pixels\">pixels[]</a> that contains the\n           * values for every pixel in the image.\n           * <br><br>\n           * The methods described below allow easy access to the image's pixels and\n           * alpha channel and simplify the process of compositing.\n           * <br><br>\n           * Before using the <a href=\"#/p5.Image/pixels\">pixels[]</a> array, be sure to use the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> method on\n           * the image to make sure that the pixel data is properly loaded.\n           * @example\n           * <div><code>\n           * function setup() {\n           *   let img = createImage(100, 100); // same as new p5.Image(100, 100);\n           *   img.loadPixels();\n           *   createCanvas(100, 100);\n           *   background(0);\n           *\n           *   // helper for writing color to array\n           *   function writeColor(image, x, y, red, green, blue, alpha) {\n           *     let index = (x + y * width) * 4;\n           *     image.pixels[index] = red;\n           *     image.pixels[index + 1] = green;\n           *     image.pixels[index + 2] = blue;\n           *     image.pixels[index + 3] = alpha;\n           *   }\n           *\n           *   let x, y;\n           *   // fill with random colors\n           *   for (y = 0; y < img.height; y++) {\n           *     for (x = 0; x < img.width; x++) {\n           *       let red = random(255);\n           *       let green = random(255);\n           *       let blue = random(255);\n           *       let alpha = 255;\n           *       writeColor(img, x, y, red, green, blue, alpha);\n           *     }\n           *   }\n           *\n           *   // draw a red line\n           *   y = 0;\n           *   for (x = 0; x < img.width; x++) {\n           *     writeColor(img, x, y, 255, 0, 0, 255);\n           *   }\n           *\n           *   // draw a green line\n           *   y = img.height - 1;\n           *   for (x = 0; x < img.width; x++) {\n           *     writeColor(img, x, y, 0, 255, 0, 255);\n           *   }\n           *\n           *   img.updatePixels();\n           *   image(img, 0, 0);\n           * }\n           * </code></div>\n           *\n           *\n           * @class p5.Image\n           * @param {Number} width\n           * @param {Number} height\n           */\n          p5.Image = function(width, height) {\n            /**\n             * Image width.\n             * @property {Number} width\n             * @readOnly\n             * @example\n             * <div><code>\n             * let img;\n             * function preload() {\n             *   img = loadImage('assets/rockies.jpg');\n             * }\n             *\n             * function setup() {\n             *   createCanvas(100, 100);\n             *   image(img, 0, 0);\n             *   for (let i = 0; i < img.width; i++) {\n             *     let c = img.get(i, img.height / 2);\n             *     stroke(c);\n             *     line(i, height / 2, i, height);\n             *   }\n             * }\n             * </code></div>\n             *\n             * @alt\n             * rocky mountains in top and horizontal lines in corresponding colors in bottom.\n             *\n             */\n            this.width = width;\n            /**\n             * Image height.\n             * @property {Number} height\n             * @readOnly\n             * @example\n             * <div><code>\n             * let img;\n             * function preload() {\n             *   img = loadImage('assets/rockies.jpg');\n             * }\n             *\n             * function setup() {\n             *   createCanvas(100, 100);\n             *   image(img, 0, 0);\n             *   for (let i = 0; i < img.height; i++) {\n             *     let c = img.get(img.width / 2, i);\n             *     stroke(c);\n             *     line(0, i, width / 2, i);\n             *   }\n             * }\n             * </code></div>\n             *\n             * @alt\n             * rocky mountains on right and vertical lines in corresponding colors on left.\n             *\n             */\n            this.height = height;\n            this.canvas = document.createElement('canvas');\n            this.canvas.width = this.width;\n            this.canvas.height = this.height;\n            this.drawingContext = this.canvas.getContext('2d');\n            this._pixelsState = this;\n            this._pixelDensity = 1;\n            this._pixelsDirty = true;\n            //For WebGL Texturing only: used to determine whether to reupload texture to GPU\n            this._modified = false;\n            /**\n             * Array containing the values for all the pixels in the display window.\n             * These values are numbers. This array is the size (include an appropriate\n             * factor for pixelDensity) of the display window x4,\n             * representing the R, G, B, A values in order for each pixel, moving from\n             * left to right across each row, then down each column. Retina and other\n             * high denisty displays may have more pixels (by a factor of\n             * pixelDensity^2).\n             * For example, if the image is 100x100 pixels, there will be 40,000. With\n             * pixelDensity = 2, there will be 160,000. The first four values\n             * (indices 0-3) in the array will be the R, G, B, A values of the pixel at\n             * (0, 0). The second four values (indices 4-7) will contain the R, G, B, A\n             * values of the pixel at (1, 0). More generally, to set values for a pixel\n             * at (x, y):\n             * ```javascript\n             * let d = pixelDensity();\n             * for (let i = 0; i < d; i++) {\n             *   for (let j = 0; j < d; j++) {\n             *     // loop over\n             *     index = 4 * ((y * d + j) * width * d + (x * d + i));\n             *     pixels[index] = r;\n             *     pixels[index+1] = g;\n             *     pixels[index+2] = b;\n             *     pixels[index+3] = a;\n             *   }\n             * }\n             * ```\n             * <br><br>\n             * Before accessing this array, the data must loaded with the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a>\n             * function. After the array data has been modified, the <a href=\"#/p5.Image/updatePixels\">updatePixels()</a>\n             * function must be run to update the changes.\n             * @property {Number[]} pixels\n             * @example\n             * <div>\n             * <code>\n             * let img = createImage(66, 66);\n             * img.loadPixels();\n             * for (let i = 0; i < img.width; i++) {\n             *   for (let j = 0; j < img.height; j++) {\n             *     img.set(i, j, color(0, 90, 102));\n             *   }\n             * }\n             * img.updatePixels();\n             * image(img, 17, 17);\n             * </code>\n             * </div>\n             * <div>\n             * <code>\n             * let pink = color(255, 102, 204);\n             * let img = createImage(66, 66);\n             * img.loadPixels();\n             * for (let i = 0; i < 4 * (width * height / 2); i += 4) {\n             *   img.pixels[i] = red(pink);\n             *   img.pixels[i + 1] = green(pink);\n             *   img.pixels[i + 2] = blue(pink);\n             *   img.pixels[i + 3] = alpha(pink);\n             * }\n             * img.updatePixels();\n             * image(img, 17, 17);\n             * </code>\n             * </div>\n             *\n             * @alt\n             * 66x66 turquoise rect in center of canvas\n             * 66x66 pink rect in center of canvas\n             *\n             */\n            this.pixels = [];\n          };\n\n          /**\n           * Helper fxn for sharing pixel methods\n           *\n           */\n          p5.Image.prototype._setProperty = function(prop, value) {\n            this[prop] = value;\n            this.setModified(true);\n          };\n\n          /**\n           * Loads the pixels data for this image into the [pixels] attribute.\n           *\n           * @method loadPixels\n           * @example\n           * <div><code>\n           * let myImage;\n           * let halfImage;\n           *\n           * function preload() {\n           *   myImage = loadImage('assets/rockies.jpg');\n           * }\n           *\n           * function setup() {\n           *   myImage.loadPixels();\n           *   halfImage = 4 * myImage.width * myImage.height / 2;\n           *   for (let i = 0; i < halfImage; i++) {\n           *     myImage.pixels[i + halfImage] = myImage.pixels[i];\n           *   }\n           *   myImage.updatePixels();\n           * }\n           *\n           * function draw() {\n           *   image(myImage, 0, 0, width, height);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 2 images of rocky mountains vertically stacked\n           *\n           */\n          p5.Image.prototype.loadPixels = function() {\n            p5.Renderer2D.prototype.loadPixels.call(this);\n            this.setModified(true);\n          };\n\n          /**\n           * Updates the backing canvas for this image with the contents of\n           * the [pixels] array.\n           *\n           * @method updatePixels\n           * @param {Integer} x x-offset of the target update area for the\n           *                              underlying canvas\n           * @param {Integer} y y-offset of the target update area for the\n           *                              underlying canvas\n           * @param {Integer} w height of the target update area for the\n           *                              underlying canvas\n           * @param {Integer} h height of the target update area for the\n           *                              underlying canvas\n           * @example\n           * <div><code>\n           * let myImage;\n           * let halfImage;\n           *\n           * function preload() {\n           *   myImage = loadImage('assets/rockies.jpg');\n           * }\n           *\n           * function setup() {\n           *   myImage.loadPixels();\n           *   halfImage = 4 * myImage.width * myImage.height / 2;\n           *   for (let i = 0; i < halfImage; i++) {\n           *     myImage.pixels[i + halfImage] = myImage.pixels[i];\n           *   }\n           *   myImage.updatePixels();\n           * }\n           *\n           * function draw() {\n           *   image(myImage, 0, 0, width, height);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 2 images of rocky mountains vertically stacked\n           *\n           */\n          /**\n           * @method updatePixels\n           */\n          p5.Image.prototype.updatePixels = function(x, y, w, h) {\n            p5.Renderer2D.prototype.updatePixels.call(this, x, y, w, h);\n            this.setModified(true);\n          };\n\n          /**\n           * Get a region of pixels from an image.\n           *\n           * If no params are passed, the whole image is returned.\n           * If x and y are the only params passed a single pixel is extracted.\n           * If all params are passed a rectangle region is extracted and a <a href=\"#/p5.Image\">p5.Image</a>\n           * is returned.\n           *\n           * @method get\n           * @param  {Number}               x x-coordinate of the pixel\n           * @param  {Number}               y y-coordinate of the pixel\n           * @param  {Number}               w width\n           * @param  {Number}               h height\n           * @return {p5.Image}             the rectangle <a href=\"#/p5.Image\">p5.Image</a>\n           * @example\n           * <div><code>\n           * let myImage;\n           * let c;\n           *\n           * function preload() {\n           *   myImage = loadImage('assets/rockies.jpg');\n           * }\n           *\n           * function setup() {\n           *   background(myImage);\n           *   noStroke();\n           *   c = myImage.get(60, 90);\n           *   fill(c);\n           *   rect(25, 25, 50, 50);\n           * }\n           *\n           * //get() returns color here\n           * </code></div>\n           *\n           * @alt\n           * image of rocky mountains with 50x50 green rect in front\n           *\n           */\n          /**\n           * @method get\n           * @return {p5.Image}      the whole <a href=\"#/p5.Image\">p5.Image</a>\n           */\n          /**\n           * @method get\n           * @param  {Number}        x\n           * @param  {Number}        y\n           * @return {Number[]}      color of pixel at x,y in array format [R, G, B, A]\n           */\n          p5.Image.prototype.get = function(x, y, w, h) {\n            p5._validateParameters('p5.Image.get', arguments);\n            return p5.Renderer2D.prototype.get.apply(this, arguments);\n          };\n\n          p5.Image.prototype._getPixel = p5.Renderer2D.prototype._getPixel;\n\n          /**\n           * Set the color of a single pixel or write an image into\n           * this <a href=\"#/p5.Image\">p5.Image</a>.\n           *\n           * Note that for a large number of pixels this will\n           * be slower than directly manipulating the pixels array\n           * and then calling <a href=\"#/p5.Image/updatePixels\">updatePixels()</a>.\n           *\n           * @method set\n           * @param {Number}              x x-coordinate of the pixel\n           * @param {Number}              y y-coordinate of the pixel\n           * @param {Number|Number[]|Object}   a grayscale value | pixel array |\n           *                                a <a href=\"#/p5.Color\">p5.Color</a> | image to copy\n           * @example\n           * <div>\n           * <code>\n           * let img = createImage(66, 66);\n           * img.loadPixels();\n           * for (let i = 0; i < img.width; i++) {\n           *   for (let j = 0; j < img.height; j++) {\n           *     img.set(i, j, color(0, 90, 102, (i % img.width) * 2));\n           *   }\n           * }\n           * img.updatePixels();\n           * image(img, 17, 17);\n           * image(img, 34, 34);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 2 gradated dark turquoise rects fade left. 1 center 1 bottom right of canvas\n           *\n           */\n          p5.Image.prototype.set = function(x, y, imgOrCol) {\n            p5.Renderer2D.prototype.set.call(this, x, y, imgOrCol);\n            this.setModified(true);\n          };\n\n          /**\n    * Resize the image to a new width and height. To make the image scale\n    * proportionally, use 0 as the value for the wide or high parameter.\n    * For instance, to make the width of an image 150 pixels, and change\n    * the height using the same proportion, use resize(150, 0).\n    *\n    * @method resize\n    * @param {Number} width the resized image width\n    * @param {Number} height the resized image height\n    * @example\n    * <div><code>\n    * let img;\n    *\n    * function preload() {\n    *   img = loadImage('assets/rockies.jpg');\n    * }\n   \n    * function draw() {\n    *   image(img, 0, 0);\n    * }\n    *\n    * function mousePressed() {\n    *   img.resize(50, 100);\n    * }\n    * </code></div>\n    *\n    * @alt\n    * image of rocky mountains. zoomed in\n    *\n    */\n          p5.Image.prototype.resize = function(width, height) {\n            // Copy contents to a temporary canvas, resize the original\n            // and then copy back.\n            //\n            // There is a faster approach that involves just one copy and swapping the\n            // this.canvas reference. We could switch to that approach if (as i think\n            // is the case) there an expectation that the user would not hold a\n            // reference to the backing canvas of a p5.Image. But since we do not\n            // enforce that at the moment, I am leaving in the slower, but safer\n            // implementation.\n\n            // auto-resize\n            if (width === 0 && height === 0) {\n              width = this.canvas.width;\n              height = this.canvas.height;\n            } else if (width === 0) {\n              width = this.canvas.width * height / this.canvas.height;\n            } else if (height === 0) {\n              height = this.canvas.height * width / this.canvas.width;\n            }\n\n            width = Math.floor(width);\n            height = Math.floor(height);\n\n            var tempCanvas = document.createElement('canvas');\n            tempCanvas.width = width;\n            tempCanvas.height = height;\n            // prettier-ignore\n            tempCanvas.getContext('2d').drawImage(\n  this.canvas,\n  0, 0, this.canvas.width, this.canvas.height,\n  0, 0, tempCanvas.width, tempCanvas.height);\n\n            // Resize the original canvas, which will clear its contents\n            this.canvas.width = this.width = width;\n            this.canvas.height = this.height = height;\n\n            //Copy the image back\n\n            // prettier-ignore\n            this.drawingContext.drawImage(\n  tempCanvas,\n  0, 0, width, height,\n  0, 0, width, height);\n\n            if (this.pixels.length > 0) {\n              this.loadPixels();\n            }\n\n            this.setModified(true);\n            this._pixelsDirty = true;\n          };\n\n          /**\n           * Copies a region of pixels from one image to another. If no\n           * srcImage is specified this is used as the source. If the source\n           * and destination regions aren't the same size, it will\n           * automatically resize source pixels to fit the specified\n           * target region.\n           *\n           * @method copy\n           * @param  {p5.Image|p5.Element} srcImage source image\n           * @param  {Integer} sx X coordinate of the source's upper left corner\n           * @param  {Integer} sy Y coordinate of the source's upper left corner\n           * @param  {Integer} sw source image width\n           * @param  {Integer} sh source image height\n           * @param  {Integer} dx X coordinate of the destination's upper left corner\n           * @param  {Integer} dy Y coordinate of the destination's upper left corner\n           * @param  {Integer} dw destination image width\n           * @param  {Integer} dh destination image height\n           * @example\n           * <div><code>\n           * let photo;\n           * let bricks;\n           * let x;\n           * let y;\n           *\n           * function preload() {\n           *   photo = loadImage('assets/rockies.jpg');\n           *   bricks = loadImage('assets/bricks.jpg');\n           * }\n           *\n           * function setup() {\n           *   x = bricks.width / 2;\n           *   y = bricks.height / 2;\n           *   photo.copy(bricks, 0, 0, x, y, 0, 0, x, y);\n           *   image(photo, 0, 0);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * image of rocky mountains and smaller image on top of bricks at top left\n           *\n           */\n          /**\n           * @method copy\n           * @param  {Integer} sx\n           * @param  {Integer} sy\n           * @param  {Integer} sw\n           * @param  {Integer} sh\n           * @param  {Integer} dx\n           * @param  {Integer} dy\n           * @param  {Integer} dw\n           * @param  {Integer} dh\n           */\n          p5.Image.prototype.copy = function() {\n            var srcImage, sx, sy, sw, sh, dx, dy, dw, dh;\n            if (arguments.length === 9) {\n              srcImage = arguments[0];\n              sx = arguments[1];\n              sy = arguments[2];\n              sw = arguments[3];\n              sh = arguments[4];\n              dx = arguments[5];\n              dy = arguments[6];\n              dw = arguments[7];\n              dh = arguments[8];\n            } else if (arguments.length === 8) {\n              srcImage = this;\n              sx = arguments[0];\n              sy = arguments[1];\n              sw = arguments[2];\n              sh = arguments[3];\n              dx = arguments[4];\n              dy = arguments[5];\n              dw = arguments[6];\n              dh = arguments[7];\n            } else {\n              throw new Error('Signature not supported');\n            }\n            p5.Renderer2D._copyHelper(this, srcImage, sx, sy, sw, sh, dx, dy, dw, dh);\n            this._pixelsDirty = true;\n          };\n\n          /**\n           * Masks part of an image from displaying by loading another\n           * image and using it's alpha channel as an alpha channel for\n           * this image.\n           *\n           * @method mask\n           * @param {p5.Image} srcImage source image\n           * @example\n           * <div><code>\n           * let photo, maskImage;\n           * function preload() {\n           *   photo = loadImage('assets/rockies.jpg');\n           *   maskImage = loadImage('assets/mask2.png');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   photo.mask(maskImage);\n           *   image(photo, 0, 0);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * image of rocky mountains with white at right\n           *\n           *\n           * http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/\n           *\n           */\n          // TODO: - Accept an array of alpha values.\n          //       - Use other channels of an image. p5 uses the\n          //       blue channel (which feels kind of arbitrary). Note: at the\n          //       moment this method does not match native processings original\n          //       functionality exactly.\n          p5.Image.prototype.mask = function(p5Image) {\n            if (p5Image === undefined) {\n              p5Image = this;\n            }\n            var currBlend = this.drawingContext.globalCompositeOperation;\n\n            var scaleFactor = 1;\n            if (p5Image instanceof p5.Renderer) {\n              scaleFactor = p5Image._pInst._pixelDensity;\n            }\n\n            var copyArgs = [\n              p5Image,\n              0,\n              0,\n              scaleFactor * p5Image.width,\n              scaleFactor * p5Image.height,\n              0,\n              0,\n              this.width,\n              this.height\n            ];\n\n            this.drawingContext.globalCompositeOperation = 'destination-in';\n            p5.Image.prototype.copy.apply(this, copyArgs);\n            this.drawingContext.globalCompositeOperation = currBlend;\n            this.setModified(true);\n          };\n\n          /**\n           * Applies an image filter to a <a href=\"#/p5.Image\">p5.Image</a>\n           *\n           * @method filter\n           * @param  {Constant} filterType  either THRESHOLD, GRAY, OPAQUE, INVERT,\n           *                                POSTERIZE, BLUR, ERODE, DILATE or BLUR.\n           *                                See Filters.js for docs on\n           *                                each available filter\n           * @param  {Number} [filterParam] an optional parameter unique\n           *                                to each filter, see above\n           * @example\n           * <div><code>\n           * let photo1;\n           * let photo2;\n           *\n           * function preload() {\n           *   photo1 = loadImage('assets/rockies.jpg');\n           *   photo2 = loadImage('assets/rockies.jpg');\n           * }\n           *\n           * function setup() {\n           *   photo2.filter(GRAY);\n           *   image(photo1, 0, 0);\n           *   image(photo2, width / 2, 0);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 2 images of rocky mountains left one in color, right in black and white\n           *\n           */\n          p5.Image.prototype.filter = function(operation, value) {\n            Filters.apply(this.canvas, Filters[operation], value);\n            this.setModified(true);\n          };\n\n          /**\n           * Copies a region of pixels from one image to another, using a specified\n           * blend mode to do the operation.\n           *\n           * @method blend\n           * @param  {p5.Image} srcImage source image\n           * @param  {Integer} sx X coordinate of the source's upper left corner\n           * @param  {Integer} sy Y coordinate of the source's upper left corner\n           * @param  {Integer} sw source image width\n           * @param  {Integer} sh source image height\n           * @param  {Integer} dx X coordinate of the destination's upper left corner\n           * @param  {Integer} dy Y coordinate of the destination's upper left corner\n           * @param  {Integer} dw destination image width\n           * @param  {Integer} dh destination image height\n           * @param  {Constant} blendMode the blend mode. either\n           *     BLEND, DARKEST, LIGHTEST, DIFFERENCE,\n           *     MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n           *     SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.\n           *\n           * Available blend modes are: normal | multiply | screen | overlay |\n           *            darken | lighten | color-dodge | color-burn | hard-light |\n           *            soft-light | difference | exclusion | hue | saturation |\n           *            color | luminosity\n           *\n           *\n           * http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/\n           * @example\n           * <div><code>\n           * let mountains;\n           * let bricks;\n           *\n           * function preload() {\n           *   mountains = loadImage('assets/rockies.jpg');\n           *   bricks = loadImage('assets/bricks_third.jpg');\n           * }\n           *\n           * function setup() {\n           *   mountains.blend(bricks, 0, 0, 33, 100, 67, 0, 33, 100, ADD);\n           *   image(mountains, 0, 0);\n           *   image(bricks, 0, 0);\n           * }\n           * </code></div>\n           * <div><code>\n           * let mountains;\n           * let bricks;\n           *\n           * function preload() {\n           *   mountains = loadImage('assets/rockies.jpg');\n           *   bricks = loadImage('assets/bricks_third.jpg');\n           * }\n           *\n           * function setup() {\n           *   mountains.blend(bricks, 0, 0, 33, 100, 67, 0, 33, 100, DARKEST);\n           *   image(mountains, 0, 0);\n           *   image(bricks, 0, 0);\n           * }\n           * </code></div>\n           * <div><code>\n           * let mountains;\n           * let bricks;\n           *\n           * function preload() {\n           *   mountains = loadImage('assets/rockies.jpg');\n           *   bricks = loadImage('assets/bricks_third.jpg');\n           * }\n           *\n           * function setup() {\n           *   mountains.blend(bricks, 0, 0, 33, 100, 67, 0, 33, 100, LIGHTEST);\n           *   image(mountains, 0, 0);\n           *   image(bricks, 0, 0);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * image of rocky mountains. Brick images on left and right. Right overexposed\n           * image of rockies. Brickwall images on left and right. Right mortar transparent\n           * image of rockies. Brickwall images on left and right. Right translucent\n           *\n           */\n          /**\n           * @method blend\n           * @param  {Integer} sx\n           * @param  {Integer} sy\n           * @param  {Integer} sw\n           * @param  {Integer} sh\n           * @param  {Integer} dx\n           * @param  {Integer} dy\n           * @param  {Integer} dw\n           * @param  {Integer} dh\n           * @param  {Constant} blendMode\n           */\n          p5.Image.prototype.blend = function() {\n            p5.prototype.blend.apply(this, arguments);\n            this.setModified(true);\n          };\n\n          /**\n           * helper method for web GL mode to indicate that an image has been\n           * changed or unchanged since last upload. gl texture upload will\n           * set this value to false after uploading the texture.\n           * @method setModified\n           * @param {boolean} val sets whether or not the image has been\n           * modified.\n           * @private\n           */\n          p5.Image.prototype.setModified = function(val) {\n            this._modified = val; //enforce boolean?\n          };\n\n          /**\n           * helper method for web GL mode to figure out if the image\n           * has been modified and might need to be re-uploaded to texture\n           * memory between frames.\n           * @method isModified\n           * @private\n           * @return {boolean} a boolean indicating whether or not the\n           * image has been updated or modified since last texture upload.\n           */\n          p5.Image.prototype.isModified = function() {\n            return this._modified;\n          };\n\n          /**\n           * Saves the image to a file and force the browser to download it.\n           * Accepts two strings for filename and file extension\n           * Supports png (default) and jpg.\n           *\n           * @method save\n           * @param {String} filename give your file a name\n           * @param  {String} extension 'png' or 'jpg'\n           * @example\n           * <div><code>\n           * let photo;\n           *\n           * function preload() {\n           *   photo = loadImage('assets/rockies.jpg');\n           * }\n           *\n           * function draw() {\n           *   image(photo, 0, 0);\n           * }\n           *\n           * function keyTyped() {\n           *   if (key === 's') {\n           *     photo.save('photo', 'png');\n           *   }\n           * }\n           * </code></div>\n           *\n           * @alt\n           * image of rocky mountains.\n           *\n           */\n          p5.Image.prototype.save = function(filename, extension) {\n            p5.prototype.saveCanvas(this.canvas, filename, extension);\n          };\n\n          module.exports = p5.Image;\n        },\n        { '../core/main': 24, './filters': 43 }\n      ],\n      47: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Image\n           * @submodule Pixels\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          var Filters = _dereq_('./filters');\n          _dereq_('../color/p5.Color');\n\n          /**\n           * <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference\n           * /Global_Objects/Uint8ClampedArray' target='_blank'>Uint8ClampedArray</a>\n           * containing the values for all the pixels in the display window.\n           * These values are numbers. This array is the size (include an appropriate\n           * factor for <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4,\n           * representing the R, G, B, A values in order for each pixel, moving from\n           * left to right across each row, then down each column. Retina and other\n           * high density displays will have more pixels[] (by a factor of\n           * pixelDensity^2).\n           * For example, if the image is 100x100 pixels, there will be 40,000. On a\n           * retina display, there will be 160,000.\n           * <br><br>\n           * The first four values (indices 0-3) in the array will be the R, G, B, A\n           * values of the pixel at (0, 0). The second four values (indices 4-7) will\n           * contain the R, G, B, A values of the pixel at (1, 0). More generally, to\n           * set values for a pixel at (x, y):\n           * ```javascript\n           * let d = pixelDensity();\n           * for (let i = 0; i < d; i++) {\n           *   for (let j = 0; j < d; j++) {\n           *     // loop over\n           *     index = 4 * ((y * d + j) * width * d + (x * d + i));\n           *     pixels[index] = r;\n           *     pixels[index+1] = g;\n           *     pixels[index+2] = b;\n           *     pixels[index+3] = a;\n           *   }\n           * }\n           * ```\n           * <p>While the above method is complex, it is flexible enough to work with\n           * any pixelDensity. Note that <a href=\"#/p5/set\">set()</a> will automatically take care of\n           * setting all the appropriate values in <a href=\"#/p5/pixels\">pixels[]</a> for a given (x, y) at\n           * any pixelDensity, but the performance may not be as fast when lots of\n           * modifications are made to the pixel array.\n           * <br><br>\n           * Before accessing this array, the data must loaded with the <a href=\"#/p5/loadPixels\">loadPixels()</a>\n           * function. After the array data has been modified, the <a href=\"#/p5/updatePixels\">updatePixels()</a>\n           * function must be run to update the changes.\n           * <br><br>\n           * Note that this is not a standard javascript array.  This means that\n           * standard javascript functions such as <a href=\"#/p5/slice\">slice()</a> or\n           * <a href=\"#/p5/arrayCopy\">arrayCopy()</a> do not\n           * work.</p>\n           *\n           * @property {Number[]} pixels\n           * @example\n           * <div>\n           * <code>\n           * let pink = color(255, 102, 204);\n           * loadPixels();\n           * let d = pixelDensity();\n           * let halfImage = 4 * (width * d) * (height / 2 * d);\n           * for (let i = 0; i < halfImage; i += 4) {\n           *   pixels[i] = red(pink);\n           *   pixels[i + 1] = green(pink);\n           *   pixels[i + 2] = blue(pink);\n           *   pixels[i + 3] = alpha(pink);\n           * }\n           * updatePixels();\n           * </code>\n           * </div>\n           *\n           * @alt\n           * top half of canvas pink, bottom grey\n           *\n           */\n          p5.prototype.pixels = [];\n\n          /**\n           * Copies a region of pixels from one image to another, using a specified\n           * blend mode to do the operation.\n           *\n           * @method blend\n           * @param  {p5.Image} srcImage source image\n           * @param  {Integer} sx X coordinate of the source's upper left corner\n           * @param  {Integer} sy Y coordinate of the source's upper left corner\n           * @param  {Integer} sw source image width\n           * @param  {Integer} sh source image height\n           * @param  {Integer} dx X coordinate of the destination's upper left corner\n           * @param  {Integer} dy Y coordinate of the destination's upper left corner\n           * @param  {Integer} dw destination image width\n           * @param  {Integer} dh destination image height\n           * @param  {Constant} blendMode the blend mode. either\n           *     BLEND, DARKEST, LIGHTEST, DIFFERENCE,\n           *     MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n           *     SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.\n           *\n           * @example\n           * <div><code>\n           * let img0;\n           * let img1;\n           *\n           * function preload() {\n           *   img0 = loadImage('assets/rockies.jpg');\n           *   img1 = loadImage('assets/bricks_third.jpg');\n           * }\n           *\n           * function setup() {\n           *   background(img0);\n           *   image(img1, 0, 0);\n           *   blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, LIGHTEST);\n           * }\n           * </code></div>\n           * <div><code>\n           * let img0;\n           * let img1;\n           *\n           * function preload() {\n           *   img0 = loadImage('assets/rockies.jpg');\n           *   img1 = loadImage('assets/bricks_third.jpg');\n           * }\n           *\n           * function setup() {\n           *   background(img0);\n           *   image(img1, 0, 0);\n           *   blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, DARKEST);\n           * }\n           * </code></div>\n           * <div><code>\n           * let img0;\n           * let img1;\n           *\n           * function preload() {\n           *   img0 = loadImage('assets/rockies.jpg');\n           *   img1 = loadImage('assets/bricks_third.jpg');\n           * }\n           *\n           * function setup() {\n           *   background(img0);\n           *   image(img1, 0, 0);\n           *   blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, ADD);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * image of rocky mountains. Brick images on left and right. Right overexposed\n           * image of rockies. Brickwall images on left and right. Right mortar transparent\n           * image of rockies. Brickwall images on left and right. Right translucent\n           *\n           *\n           */\n          /**\n           * @method blend\n           * @param  {Integer} sx\n           * @param  {Integer} sy\n           * @param  {Integer} sw\n           * @param  {Integer} sh\n           * @param  {Integer} dx\n           * @param  {Integer} dy\n           * @param  {Integer} dw\n           * @param  {Integer} dh\n           * @param  {Constant} blendMode\n           */\n          p5.prototype.blend = function() {\n            p5._validateParameters('blend', arguments);\n            if (this._renderer) {\n              this._renderer.blend.apply(this._renderer, arguments);\n            } else {\n              p5.Renderer2D.prototype.blend.apply(this, arguments);\n            }\n          };\n\n          /**\n           * Copies a region of the canvas to another region of the canvas\n           * and copies a region of pixels from an image used as the srcImg parameter\n           * into the canvas srcImage is specified this is used as the source. If\n           * the source and destination regions aren't the same size, it will\n           * automatically resize source pixels to fit the specified\n           * target region.\n           *\n           * @method copy\n           * @param  {p5.Image|p5.Element} srcImage source image\n           * @param  {Integer} sx X coordinate of the source's upper left corner\n           * @param  {Integer} sy Y coordinate of the source's upper left corner\n           * @param  {Integer} sw source image width\n           * @param  {Integer} sh source image height\n           * @param  {Integer} dx X coordinate of the destination's upper left corner\n           * @param  {Integer} dy Y coordinate of the destination's upper left corner\n           * @param  {Integer} dw destination image width\n           * @param  {Integer} dh destination image height\n           *\n           * @example\n           * <div><code>\n           * let img;\n           *\n           * function preload() {\n           *   img = loadImage('assets/rockies.jpg');\n           * }\n           *\n           * function setup() {\n           *   background(img);\n           *   copy(img, 7, 22, 10, 10, 35, 25, 50, 50);\n           *   stroke(255);\n           *   noFill();\n           *   // Rectangle shows area being copied\n           *   rect(7, 22, 10, 10);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * image of rocky mountains. Brick images on left and right. Right overexposed\n           * image of rockies. Brickwall images on left and right. Right mortar transparent\n           * image of rockies. Brickwall images on left and right. Right translucent\n           *\n           */\n          /**\n           * @method copy\n           * @param  {Integer} sx\n           * @param  {Integer} sy\n           * @param  {Integer} sw\n           * @param  {Integer} sh\n           * @param  {Integer} dx\n           * @param  {Integer} dy\n           * @param  {Integer} dw\n           * @param  {Integer} dh\n           */\n          p5.prototype.copy = function() {\n            p5._validateParameters('copy', arguments);\n            p5.Renderer2D.prototype.copy.apply(this._renderer, arguments);\n          };\n\n          /**\n           * Applies a filter to the canvas.\n           * <br><br>\n           *\n           * The presets options are:\n           * <br><br>\n           *\n           * THRESHOLD\n           * Converts the image to black and white pixels depending if they are above or\n           * below the threshold defined by the level parameter. The parameter must be\n           * between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n           * <br><br>\n           *\n           * GRAY\n           * Converts any colors in the image to grayscale equivalents. No parameter\n           * is used.\n           * <br><br>\n           *\n           * OPAQUE\n           * Sets the alpha channel to entirely opaque. No parameter is used.\n           * <br><br>\n           *\n           * INVERT\n           * Sets each pixel to its inverse value. No parameter is used.\n           * <br><br>\n           *\n           * POSTERIZE\n           * Limits each channel of the image to the number of colors specified as the\n           * parameter. The parameter can be set to values between 2 and 255, but\n           * results are most noticeable in the lower ranges.\n           * <br><br>\n           *\n           * BLUR\n           * Executes a Gaussian blur with the level parameter specifying the extent\n           * of the blurring. If no parameter is used, the blur is equivalent to\n           * Gaussian blur of radius 1. Larger values increase the blur.\n           * <br><br>\n           *\n           * ERODE\n           * Reduces the light areas. No parameter is used.\n           * <br><br>\n           *\n           * DILATE\n           * Increases the light areas. No parameter is used.\n           *\n           * @method filter\n           * @param  {Constant} filterType  either THRESHOLD, GRAY, OPAQUE, INVERT,\n           *                                POSTERIZE, BLUR, ERODE, DILATE or BLUR.\n           *                                See Filters.js for docs on\n           *                                each available filter\n           * @param  {Number} [filterParam] an optional parameter unique\n           *                                to each filter, see above\n           *\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   filter(THRESHOLD);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   filter(GRAY);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   filter(OPAQUE);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   filter(INVERT);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   filter(POSTERIZE, 3);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   filter(DILATE);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   filter(BLUR, 3);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   filter(ERODE);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black and white image of a brick wall.\n           * greyscale image of a brickwall\n           * image of a brickwall\n           * jade colored image of a brickwall\n           * red and pink image of a brickwall\n           * image of a brickwall\n           * blurry image of a brickwall\n           * image of a brickwall\n           * image of a brickwall with less detail\n           *\n           */\n          p5.prototype.filter = function(operation, value) {\n            p5._validateParameters('filter', arguments);\n            if (this.canvas !== undefined) {\n              Filters.apply(this.canvas, Filters[operation], value);\n            } else {\n              Filters.apply(this.elt, Filters[operation], value);\n            }\n          };\n\n          /**\n           * Get a region of pixels, or a single pixel, from the canvas.\n           *\n           * Returns an array of [R,G,B,A] values for any pixel or grabs a section of\n           * an image. If no parameters are specified, the entire image is returned.\n           * Use the x and y parameters to get the value of one pixel. Get a section of\n           * the display window by specifying additional w and h parameters. When\n           * getting an image, the x and y parameters define the coordinates for the\n           * upper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>.\n           * <br><br>\n           * Getting the color of a single pixel with get(x, y) is easy, but not as fast\n           * as grabbing the data directly from <a href=\"#/p5/pixels\">pixels[]</a>. The equivalent statement to\n           * get(x, y) using <a href=\"#/p5/pixels\">pixels[]</a> with pixel density d is\n           * ```javascript\n           * let x, y, d; // set these to the coordinates\n           * let off = (y * width + x) * d * 4;\n           * let components = [\n           *   pixels[off],\n           *   pixels[off + 1],\n           *   pixels[off + 2],\n           *   pixels[off + 3]\n           * ];\n           * print(components);\n           * ```\n           * <br><br>\n           *\n           * See the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information.\n           *\n           * If you want to extract an array of colors or a subimage from an p5.Image object,\n           * take a look at <a href=\"#/p5.Image/get\">p5.Image.get()</a>\n           *\n           * @method get\n           * @param  {Number}         x x-coordinate of the pixel\n           * @param  {Number}         y y-coordinate of the pixel\n           * @param  {Number}         w width\n           * @param  {Number}         h height\n           * @return {p5.Image}       the rectangle <a href=\"#/p5.Image\">p5.Image</a>\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/rockies.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   let c = get();\n           *   image(c, width / 2, 0);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/rockies.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   let c = get(50, 90);\n           *   fill(c);\n           *   noStroke();\n           *   rect(25, 25, 50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 2 images of the rocky mountains, side-by-side\n           * Image of the rocky mountains with 50x50 green rect in center of canvas\n           *\n           */\n          /**\n           * @method get\n           * @return {p5.Image}      the whole <a href=\"#/p5.Image\">p5.Image</a>\n           */\n          /**\n           * @method get\n           * @param  {Number}        x\n           * @param  {Number}        y\n           * @return {Number[]}      color of pixel at x,y in array format [R, G, B, A]\n           */\n          p5.prototype.get = function(x, y, w, h) {\n            p5._validateParameters('get', arguments);\n            return this._renderer.get.apply(this._renderer, arguments);\n          };\n\n          /**\n           * Loads the pixel data for the display window into the <a href=\"#/p5/pixels\">pixels[]</a> array. This\n           * function must always be called before reading from or writing to <a href=\"#/p5/pixels\">pixels[]</a>.\n           * Note that only changes made with <a href=\"#/p5/set\">set()</a> or direct manipulation of <a href=\"#/p5/pixels\">pixels[]</a>\n           * will occur.\n           *\n           * @method loadPixels\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/rockies.jpg');\n           * }\n           *\n           * function setup() {\n           *   image(img, 0, 0, width, height);\n           *   let d = pixelDensity();\n           *   let halfImage = 4 * (width * d) * (height * d / 2);\n           *   loadPixels();\n           *   for (let i = 0; i < halfImage; i++) {\n           *     pixels[i + halfImage] = pixels[i];\n           *   }\n           *   updatePixels();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * two images of the rocky mountains. one on top, one on bottom of canvas.\n           *\n           */\n          p5.prototype.loadPixels = function() {\n            p5._validateParameters('loadPixels', arguments);\n            this._renderer.loadPixels();\n          };\n\n          /**\n           * <p>Changes the color of any pixel, or writes an image directly to the\n           * display window.</p>\n           * <p>The x and y parameters specify the pixel to change and the c parameter\n           * specifies the color value. This can be a <a href=\"#/p5.Color\">p5.Color</a> object, or [R, G, B, A]\n           * pixel array. It can also be a single grayscale value.\n           * When setting an image, the x and y parameters define the coordinates for\n           * the upper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>.\n           * </p>\n           * <p>\n           * After using <a href=\"#/p5/set\">set()</a>, you must call <a href=\"#/p5/updatePixels\">updatePixels()</a> for your changes to appear.\n           * This should be called once all pixels have been set, and must be called before\n           * calling .<a href=\"#/p5/get\">get()</a> or drawing the image.\n           * </p>\n           * <p>Setting the color of a single pixel with set(x, y) is easy, but not as\n           * fast as putting the data directly into <a href=\"#/p5/pixels\">pixels[]</a>. Setting the <a href=\"#/p5/pixels\">pixels[]</a>\n           * values directly may be complicated when working with a retina display,\n           * but will perform better when lots of pixels need to be set directly on\n           * every loop.</p>\n           * <p>See the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information.</p>\n           *\n           * @method set\n           * @param {Number}              x x-coordinate of the pixel\n           * @param {Number}              y y-coordinate of the pixel\n           * @param {Number|Number[]|Object} c insert a grayscale value | a pixel array |\n           *                                a <a href=\"#/p5.Color\">p5.Color</a> object | a <a href=\"#/p5.Image\">p5.Image</a> to copy\n           * @example\n           * <div>\n           * <code>\n           * let black = color(0);\n           * set(30, 20, black);\n           * set(85, 20, black);\n           * set(85, 75, black);\n           * set(30, 75, black);\n           * updatePixels();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * for (let i = 30; i < width - 15; i++) {\n           *   for (let j = 20; j < height - 25; j++) {\n           *     let c = color(204 - j, 153 - i, 0);\n           *     set(i, j, c);\n           *   }\n           * }\n           * updatePixels();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/rockies.jpg');\n           * }\n           *\n           * function setup() {\n           *   set(0, 0, img);\n           *   updatePixels();\n           *   line(0, 0, width, height);\n           *   line(0, height, width, 0);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 4 black points in the shape of a square middle-right of canvas.\n           * square with orangey-brown gradient lightening at bottom right.\n           * image of the rocky mountains. with lines like an 'x' through the center.\n           */\n          p5.prototype.set = function(x, y, imgOrCol) {\n            this._renderer.set(x, y, imgOrCol);\n          };\n          /**\n           * Updates the display window with the data in the <a href=\"#/p5/pixels\">pixels[]</a> array.\n           * Use in conjunction with <a href=\"#/p5/loadPixels\">loadPixels()</a>. If you're only reading pixels from\n           * the array, there's no need to call <a href=\"#/p5/updatePixels\">updatePixels()</a> — updating is only\n           * necessary to apply changes. <a href=\"#/p5/updatePixels\">updatePixels()</a> should be called anytime the\n           * pixels array is manipulated or <a href=\"#/p5/set\">set()</a> is called, and only changes made with\n           * <a href=\"#/p5/set\">set()</a> or direct changes to <a href=\"#/p5/pixels\">pixels[]</a> will occur.\n           *\n           * @method updatePixels\n           * @param  {Number} [x]    x-coordinate of the upper-left corner of region\n           *                         to update\n           * @param  {Number} [y]    y-coordinate of the upper-left corner of region\n           *                         to update\n           * @param  {Number} [w]    width of region to update\n           * @param  {Number} [h]    height of region to update\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/rockies.jpg');\n           * }\n           *\n           * function setup() {\n           *   image(img, 0, 0, width, height);\n           *   let d = pixelDensity();\n           *   let halfImage = 4 * (width * d) * (height * d / 2);\n           *   loadPixels();\n           *   for (let i = 0; i < halfImage; i++) {\n           *     pixels[i + halfImage] = pixels[i];\n           *   }\n           *   updatePixels();\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * two images of the rocky mountains. one on top, one on bottom of canvas.\n           */\n          p5.prototype.updatePixels = function(x, y, w, h) {\n            p5._validateParameters('updatePixels', arguments);\n            // graceful fail - if loadPixels() or set() has not been called, pixel\n            // array will be empty, ignore call to updatePixels()\n            if (this.pixels.length === 0) {\n              return;\n            }\n            this._renderer.updatePixels(x, y, w, h);\n          };\n\n          module.exports = p5;\n        },\n        { '../color/p5.Color': 16, '../core/main': 24, './filters': 43 }\n      ],\n      48: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module IO\n           * @submodule Input\n           * @for p5\n           * @requires core\n           */\n\n          /* globals Request: false */\n          /* globals Headers: false */\n\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n\n          var p5 = _dereq_('../core/main');\n          _dereq_('whatwg-fetch');\n          _dereq_('es6-promise').polyfill();\n          var fetchJsonp = _dereq_('fetch-jsonp');\n          _dereq_('../core/error_helpers');\n\n          /**\n                                   * Loads a JSON file from a file or a URL, and returns an Object.\n                                   * Note that even if the JSON file contains an Array, an Object will be\n                                   * returned with index numbers as keys.\n                                   *\n                                   * This method is asynchronous, meaning it may not finish before the next\n                                   * line in your sketch is executed. JSONP is supported via a polyfill and you\n                                   * can pass in as the second argument an object with definitions of the json\n                                   * callback following the syntax specified <a href=\"https://github.com/camsong/\n                                   * fetch-jsonp\">here</a>.\n                                   *\n                                   * This method is suitable for fetching files up to size of 64MB.\n                                   * @method loadJSON\n                                   * @param  {String}        path       name of the file or url to load\n                                   * @param  {Object}        [jsonpOptions] options object for jsonp related settings\n                                   * @param  {String}        [datatype] \"json\" or \"jsonp\"\n                                   * @param  {function}      [callback] function to be executed after\n                                   *                                    <a href=\"#/p5/loadJSON\">loadJSON()</a> completes, data is passed\n                                   *                                    in as first argument\n                                   * @param  {function}      [errorCallback] function to be executed if\n                                   *                                    there is an error, response is passed\n                                   *                                    in as first argument\n                                   * @return {Object|Array}             JSON data\n                                   * @example\n                                   *\n                                   * <p>Calling <a href=\"#/p5/loadJSON\">loadJSON()</a> inside <a href=\"#/p5/preload\">preload()</a> guarantees to complete the\n                                   * operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.</p>\n                                   *\n                                   * <div><code>\n                                   * // Examples use USGS Earthquake API:\n                                   * //   https://earthquake.usgs.gov/fdsnws/event/1/#methods\n                                   * let earthquakes;\n                                   * function preload() {\n                                   *   // Get the most recent earthquake in the database\n                                   *   let url =\n                                      'https://earthquake.usgs.gov/earthquakes/feed/v1.0/' +\n                                   *     'summary/all_day.geojson';\n                                   *   earthquakes = loadJSON(url);\n                                   * }\n                                   *\n                                   * function setup() {\n                                   *   noLoop();\n                                   * }\n                                   *\n                                   * function draw() {\n                                   *   background(200);\n                                   *   // Get the magnitude and name of the earthquake out of the loaded JSON\n                                   *   let earthquakeMag = earthquakes.features[0].properties.mag;\n                                   *   let earthquakeName = earthquakes.features[0].properties.place;\n                                   *   ellipse(width / 2, height / 2, earthquakeMag * 10, earthquakeMag * 10);\n                                   *   textAlign(CENTER);\n                                   *   text(earthquakeName, 0, height - 30, width, 30);\n                                   * }\n                                   * </code></div>\n                                   *\n                                   *\n                                   * <p>Outside of preload(), you may supply a callback function to handle the\n                                   * object:</p>\n                                   * <div><code>\n                                   * function setup() {\n                                   *   noLoop();\n                                   *   let url =\n                                      'https://earthquake.usgs.gov/earthquakes/feed/v1.0/' +\n                                   *     'summary/all_day.geojson';\n                                   *   loadJSON(url, drawEarthquake);\n                                   * }\n                                   *\n                                   * function draw() {\n                                   *   background(200);\n                                   * }\n                                   *\n                                   * function drawEarthquake(earthquakes) {\n                                   *   // Get the magnitude and name of the earthquake out of the loaded JSON\n                                   *   let earthquakeMag = earthquakes.features[0].properties.mag;\n                                   *   let earthquakeName = earthquakes.features[0].properties.place;\n                                   *   ellipse(width / 2, height / 2, earthquakeMag * 10, earthquakeMag * 10);\n                                   *   textAlign(CENTER);\n                                   *   text(earthquakeName, 0, height - 30, width, 30);\n                                   * }\n                                   * </code></div>\n                                   *\n                                   * @alt\n                                   * 50x50 ellipse that changes from black to white depending on the current humidity\n                                   * 50x50 ellipse that changes from black to white depending on the current humidity\n                                   *\n                                   */\n          /**\n           * @method loadJSON\n           * @param  {String}        path\n           * @param  {String}        datatype\n           * @param  {function}      [callback]\n           * @param  {function}      [errorCallback]\n           * @return {Object|Array}\n           */\n          /**\n           * @method loadJSON\n           * @param  {String}        path\n           * @param  {function}      callback\n           * @param  {function}      [errorCallback]\n           * @return {Object|Array}\n           */\n          p5.prototype.loadJSON = function() {\n            p5._validateParameters('loadJSON', arguments);\n            var path = arguments[0];\n            var callback;\n            var errorCallback;\n            var options;\n\n            var ret = {}; // object needed for preload\n            var t = 'json';\n\n            // check for explicit data type argument\n            for (var i = 1; i < arguments.length; i++) {\n              var arg = arguments[i];\n              if (typeof arg === 'string') {\n                if (arg === 'jsonp' || arg === 'json') {\n                  t = arg;\n                }\n              } else if (typeof arg === 'function') {\n                if (!callback) {\n                  callback = arg;\n                } else {\n                  errorCallback = arg;\n                }\n              } else if (\n                _typeof(arg) === 'object' &&\n                (arg.hasOwnProperty('jsonpCallback') ||\n                  arg.hasOwnProperty('jsonpCallbackFunction'))\n              ) {\n                t = 'jsonp';\n                options = arg;\n              }\n            }\n\n            var self = this;\n            this.httpDo(\n              path,\n              'GET',\n              options,\n              t,\n              function(resp) {\n                for (var k in resp) {\n                  ret[k] = resp[k];\n                }\n                if (typeof callback !== 'undefined') {\n                  callback(resp);\n                }\n\n                self._decrementPreload();\n              },\n              function(err) {\n                // Error handling\n                p5._friendlyFileLoadError(5, path);\n\n                if (errorCallback) {\n                  errorCallback(err);\n                } else {\n                  throw err;\n                }\n              }\n            );\n\n            return ret;\n          };\n\n          /**\n    * Reads the contents of a file and creates a String array of its individual\n    * lines. If the name of the file is used as the parameter, as in the above\n    * example, the file must be located in the sketch directory/folder.\n    * <br><br>\n    * Alternatively, the file maybe be loaded from anywhere on the local\n    * computer using an absolute path (something that starts with / on Unix and\n    * Linux, or a drive letter on Windows), or the filename parameter can be a\n    * URL for a file found on a network.\n    * <br><br>\n    * This method is asynchronous, meaning it may not finish before the next\n    * line in your sketch is executed.\n    *\n    * This method is suitable for fetching files up to size of 64MB.\n    * @method loadStrings\n    * @param  {String}   filename   name of the file or url to load\n    * @param  {function} [callback] function to be executed after <a href=\"#/p5/loadStrings\">loadStrings()</a>\n    *                               completes, Array is passed in as first\n    *                               argument\n    * @param  {function} [errorCallback] function to be executed if\n    *                               there is an error, response is passed\n    *                               in as first argument\n    * @return {String[]}            Array of Strings\n    * @example\n    *\n    * <p>Calling loadStrings() inside <a href=\"#/p5/preload\">preload()</a> guarantees to complete the\n    * operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.</p>\n    *\n    * <div><code>\n    * let result;\n    * function preload() {\n    *   result = loadStrings('assets/test.txt');\n    * }\n   \n    * function setup() {\n    *   background(200);\n    *   let ind = floor(random(result.length));\n    *   text(result[ind], 10, 10, 80, 80);\n    * }\n    * </code></div>\n    *\n    * <p>Outside of preload(), you may supply a callback function to handle the\n    * object:</p>\n    *\n    * <div><code>\n    * function setup() {\n    *   loadStrings('assets/test.txt', pickString);\n    * }\n    *\n    * function pickString(result) {\n    *   background(200);\n    *   let ind = floor(random(result.length));\n    *   text(result[ind], 10, 10, 80, 80);\n    * }\n    * </code></div>\n    *\n    * @alt\n    * randomly generated text from a file, for example \"i smell like butter\"\n    * randomly generated text from a file, for example \"i have three feet\"\n    *\n    */\n          p5.prototype.loadStrings = function() {\n            p5._validateParameters('loadStrings', arguments);\n\n            var ret = [];\n            var callback, errorCallback;\n\n            for (var i = 1; i < arguments.length; i++) {\n              var arg = arguments[i];\n              if (typeof arg === 'function') {\n                if (typeof callback === 'undefined') {\n                  callback = arg;\n                } else if (typeof errorCallback === 'undefined') {\n                  errorCallback = arg;\n                }\n              }\n            }\n\n            var self = this;\n            p5.prototype.httpDo.call(\n              this,\n              arguments[0],\n              'GET',\n              'text',\n              function(data) {\n                // split lines handling mac/windows/linux endings\n                var lines = data\n                  .replace(/\\r\\n/g, '\\r')\n                  .replace(/\\n/g, '\\r')\n                  .split(/\\r/);\n                Array.prototype.push.apply(ret, lines);\n\n                if (typeof callback !== 'undefined') {\n                  callback(ret);\n                }\n\n                self._decrementPreload();\n              },\n              function(err) {\n                // Error handling\n                p5._friendlyFileLoadError(3, arguments[0]);\n\n                if (errorCallback) {\n                  errorCallback(err);\n                } else {\n                  throw err;\n                }\n              }\n            );\n\n            return ret;\n          };\n\n          /**\n           * <p>Reads the contents of a file or URL and creates a <a href=\"#/p5.Table\">p5.Table</a> object with\n           * its values. If a file is specified, it must be located in the sketch's\n           * \"data\" folder. The filename parameter can also be a URL to a file found\n           * online. By default, the file is assumed to be comma-separated (in CSV\n           * format). Table only looks for a header row if the 'header' option is\n           * included.</p>\n           *\n           * <p>Possible options include:\n           * <ul>\n           * <li>csv - parse the table as comma-separated values</li>\n           * <li>tsv - parse the table as tab-separated values</li>\n           * <li>header - this table has a header (title) row</li>\n           * </ul>\n           * </p>\n           *\n           * <p>When passing in multiple options, pass them in as separate parameters,\n           * seperated by commas. For example:\n           * <br><br>\n           * <code>\n           * loadTable('my_csv_file.csv', 'csv', 'header');\n           * </code>\n           * </p>\n           *\n           * <p> All files loaded and saved use UTF-8 encoding.</p>\n           *\n           * <p>This method is asynchronous, meaning it may not finish before the next\n           * line in your sketch is executed. Calling <a href=\"#/p5/loadTable\">loadTable()</a> inside <a href=\"#/p5/preload\">preload()</a>\n           * guarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.\n           * <p>Outside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the\n           * object:</p>\n           * </p>\n           *\n           * This method is suitable for fetching files up to size of 64MB.\n           * @method loadTable\n           * @param  {String}         filename   name of the file or URL to load\n           * @param  {String}         options  \"header\" \"csv\" \"tsv\"\n           * @param  {function}       [callback] function to be executed after\n           *                                     <a href=\"#/p5/loadTable\">loadTable()</a> completes. On success, the\n           *                                     <a href=\"#/p5.Table\">Table</a> object is passed in as the\n           *                                     first argument.\n           * @param  {function}  [errorCallback] function to be executed if\n           *                                     there is an error, response is passed\n           *                                     in as first argument\n           * @return {Object}                    <a href=\"#/p5.Table\">Table</a> object containing data\n           *\n           * @example\n           * <div class='norender'>\n           * <code>\n           * // Given the following CSV file called \"mammals.csv\"\n           * // located in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           *   //the file can be remote\n           *   //table = loadTable(\"http://p5js.org/reference/assets/mammals.csv\",\n           *   //                  \"csv\", \"header\");\n           * }\n           *\n           * function setup() {\n           *   //count the columns\n           *   print(table.getRowCount() + ' total rows in table');\n           *   print(table.getColumnCount() + ' total columns in table');\n           *\n           *   print(table.getColumn('name'));\n           *   //[\"Goat\", \"Leopard\", \"Zebra\"]\n           *\n           *   //cycle through the table\n           *   for (let r = 0; r < table.getRowCount(); r++)\n           *     for (let c = 0; c < table.getColumnCount(); c++) {\n           *       print(table.getString(r, c));\n           *     }\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * randomly generated text from a file, for example \"i smell like butter\"\n           * randomly generated text from a file, for example \"i have three feet\"\n           *\n           */\n          /**\n           * @method loadTable\n           * @param  {String}         filename\n           * @param  {function}       [callback]\n           * @param  {function}  [errorCallback]\n           * @return {Object}\n           */\n          p5.prototype.loadTable = function(path) {\n            var callback;\n            var errorCallback;\n            var options = [];\n            var header = false;\n            var ext = path.substring(path.lastIndexOf('.') + 1, path.length);\n            var sep = ',';\n            var separatorSet = false;\n\n            if (ext === 'tsv') {\n              //Only need to check extension is tsv because csv is default\n              sep = '\\t';\n            }\n\n            for (var i = 1; i < arguments.length; i++) {\n              if (typeof arguments[i] === 'function') {\n                if (typeof callback === 'undefined') {\n                  callback = arguments[i];\n                } else if (typeof errorCallback === 'undefined') {\n                  errorCallback = arguments[i];\n                }\n              } else if (typeof arguments[i] === 'string') {\n                options.push(arguments[i]);\n                if (arguments[i] === 'header') {\n                  header = true;\n                }\n                if (arguments[i] === 'csv') {\n                  if (separatorSet) {\n                    throw new Error('Cannot set multiple separator types.');\n                  } else {\n                    sep = ',';\n                    separatorSet = true;\n                  }\n                } else if (arguments[i] === 'tsv') {\n                  if (separatorSet) {\n                    throw new Error('Cannot set multiple separator types.');\n                  } else {\n                    sep = '\\t';\n                    separatorSet = true;\n                  }\n                }\n              }\n            }\n\n            var t = new p5.Table();\n\n            var self = this;\n            this.httpDo(\n              path,\n              'GET',\n              'table',\n              function(resp) {\n                var state = {};\n\n                // define constants\n                var PRE_TOKEN = 0,\n                  MID_TOKEN = 1,\n                  POST_TOKEN = 2,\n                  POST_RECORD = 4;\n\n                var QUOTE = '\"',\n                  CR = '\\r',\n                  LF = '\\n';\n\n                var records = [];\n                var offset = 0;\n                var currentRecord = null;\n                var currentChar;\n\n                var tokenBegin = function tokenBegin() {\n                  state.currentState = PRE_TOKEN;\n                  state.token = '';\n                };\n\n                var tokenEnd = function tokenEnd() {\n                  currentRecord.push(state.token);\n                  tokenBegin();\n                };\n\n                var recordBegin = function recordBegin() {\n                  state.escaped = false;\n                  currentRecord = [];\n                  tokenBegin();\n                };\n\n                var recordEnd = function recordEnd() {\n                  state.currentState = POST_RECORD;\n                  records.push(currentRecord);\n                  currentRecord = null;\n                };\n\n                for (;;) {\n                  currentChar = resp[offset++];\n\n                  // EOF\n                  if (currentChar == null) {\n                    if (state.escaped) {\n                      throw new Error('Unclosed quote in file.');\n                    }\n                    if (currentRecord) {\n                      tokenEnd();\n                      recordEnd();\n                      break;\n                    }\n                  }\n                  if (currentRecord === null) {\n                    recordBegin();\n                  }\n\n                  // Handle opening quote\n                  if (state.currentState === PRE_TOKEN) {\n                    if (currentChar === QUOTE) {\n                      state.escaped = true;\n                      state.currentState = MID_TOKEN;\n                      continue;\n                    }\n                    state.currentState = MID_TOKEN;\n                  }\n\n                  // mid-token and escaped, look for sequences and end quote\n                  if (state.currentState === MID_TOKEN && state.escaped) {\n                    if (currentChar === QUOTE) {\n                      if (resp[offset] === QUOTE) {\n                        state.token += QUOTE;\n                        offset++;\n                      } else {\n                        state.escaped = false;\n                        state.currentState = POST_TOKEN;\n                      }\n                    } else if (currentChar === CR) {\n                      continue;\n                    } else {\n                      state.token += currentChar;\n                    }\n                    continue;\n                  }\n\n                  // fall-through: mid-token or post-token, not escaped\n                  if (currentChar === CR) {\n                    if (resp[offset] === LF) {\n                      offset++;\n                    }\n                    tokenEnd();\n                    recordEnd();\n                  } else if (currentChar === LF) {\n                    tokenEnd();\n                    recordEnd();\n                  } else if (currentChar === sep) {\n                    tokenEnd();\n                  } else if (state.currentState === MID_TOKEN) {\n                    state.token += currentChar;\n                  }\n                }\n\n                // set up column names\n                if (header) {\n                  t.columns = records.shift();\n                } else {\n                  for (i = 0; i < records[0].length; i++) {\n                    t.columns[i] = 'null';\n                  }\n                }\n                var row;\n                for (i = 0; i < records.length; i++) {\n                  //Handles row of 'undefined' at end of some CSVs\n                  if (records[i].length === 1) {\n                    if (records[i][0] === 'undefined' || records[i][0] === '') {\n                      continue;\n                    }\n                  }\n                  row = new p5.TableRow();\n                  row.arr = records[i];\n                  row.obj = makeObject(records[i], t.columns);\n                  t.addRow(row);\n                }\n                if (typeof callback === 'function') {\n                  callback(t);\n                }\n\n                self._decrementPreload();\n              },\n              function(err) {\n                // Error handling\n                p5._friendlyFileLoadError(2, path);\n\n                if (errorCallback) {\n                  errorCallback(err);\n                } else {\n                  console.error(err);\n                }\n              }\n            );\n\n            return t;\n          };\n\n          // helper function to turn a row into a JSON object\n          function makeObject(row, headers) {\n            var ret = {};\n            headers = headers || [];\n            if (typeof headers === 'undefined') {\n              for (var j = 0; j < row.length; j++) {\n                headers[j.toString()] = j;\n              }\n            }\n            for (var i = 0; i < headers.length; i++) {\n              var key = headers[i];\n              var val = row[i];\n              ret[key] = val;\n            }\n            return ret;\n          }\n\n          /**\n           * Reads the contents of a file and creates an XML object with its values.\n           * If the name of the file is used as the parameter, as in the above example,\n           * the file must be located in the sketch directory/folder.\n           *\n           * Alternatively, the file maybe be loaded from anywhere on the local\n           * computer using an absolute path (something that starts with / on Unix and\n           * Linux, or a drive letter on Windows), or the filename parameter can be a\n           * URL for a file found on a network.\n           *\n           * This method is asynchronous, meaning it may not finish before the next\n           * line in your sketch is executed. Calling <a href=\"#/p5/loadXML\">loadXML()</a> inside <a href=\"#/p5/preload\">preload()</a>\n           * guarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.\n           *\n           * Outside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the\n           * object.\n           *\n           * This method is suitable for fetching files up to size of 64MB.\n           * @method loadXML\n           * @param  {String}   filename   name of the file or URL to load\n           * @param  {function} [callback] function to be executed after <a href=\"#/p5/loadXML\">loadXML()</a>\n           *                               completes, XML object is passed in as\n           *                               first argument\n           * @param  {function} [errorCallback] function to be executed if\n           *                               there is an error, response is passed\n           *                               in as first argument\n           * @return {Object}              XML object containing data\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let children = xml.getChildren('animal');\n           *\n           *   for (let i = 0; i < children.length; i++) {\n           *     let id = children[i].getNum('id');\n           *     let coloring = children[i].getString('species');\n           *     let name = children[i].getContent();\n           *     print(id + ', ' + coloring + ', ' + name);\n           *   }\n           * }\n           *\n           * // Sketch prints:\n           * // 0, Capra hircus, Goat\n           * // 1, Panthera pardus, Leopard\n           * // 2, Equus zebra, Zebra\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           *\n           */\n          p5.prototype.loadXML = function() {\n            var ret = new p5.XML();\n            var callback, errorCallback;\n\n            for (var i = 1; i < arguments.length; i++) {\n              var arg = arguments[i];\n              if (typeof arg === 'function') {\n                if (typeof callback === 'undefined') {\n                  callback = arg;\n                } else if (typeof errorCallback === 'undefined') {\n                  errorCallback = arg;\n                }\n              }\n            }\n\n            var self = this;\n            this.httpDo(\n              arguments[0],\n              'GET',\n              'xml',\n              function(xml) {\n                for (var key in xml) {\n                  ret[key] = xml[key];\n                }\n                if (typeof callback !== 'undefined') {\n                  callback(ret);\n                }\n\n                self._decrementPreload();\n              },\n              function(err) {\n                // Error handling\n                p5._friendlyFileLoadError(1, arguments[0]);\n\n                if (errorCallback) {\n                  errorCallback(err);\n                } else {\n                  throw err;\n                }\n              }\n            );\n\n            return ret;\n          };\n\n          /**\n           * This method is suitable for fetching files up to size of 64MB.\n           * @method loadBytes\n           * @param {string}   file            name of the file or URL to load\n           * @param {function} [callback]      function to be executed after <a href=\"#/p5/loadBytes\">loadBytes()</a>\n           *                                    completes\n           * @param {function} [errorCallback] function to be executed if there\n           *                                    is an error\n           * @returns {Object} an object whose 'bytes' property will be the loaded buffer\n           *\n           * @example\n           * <div class='norender'><code>\n           * let data;\n           *\n           * function preload() {\n           *   data = loadBytes('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   for (let i = 0; i < 5; i++) {\n           *     console.log(data.bytes[i].toString(16));\n           *   }\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           *\n           */\n          p5.prototype.loadBytes = function(file, callback, errorCallback) {\n            var ret = {};\n\n            var self = this;\n            this.httpDo(\n              file,\n              'GET',\n              'arrayBuffer',\n              function(arrayBuffer) {\n                ret.bytes = new Uint8Array(arrayBuffer);\n\n                if (typeof callback === 'function') {\n                  callback(ret);\n                }\n\n                self._decrementPreload();\n              },\n              function(err) {\n                // Error handling\n                p5._friendlyFileLoadError(6, file);\n\n                if (errorCallback) {\n                  errorCallback(err);\n                } else {\n                  throw err;\n                }\n              }\n            );\n\n            return ret;\n          };\n\n          /**\n    * Method for executing an HTTP GET request. If data type is not specified,\n    * p5 will try to guess based on the URL, defaulting to text. This is equivalent to\n    * calling <code>httpDo(path, 'GET')</code>. The 'binary' datatype will return\n    * a Blob object, and the 'arrayBuffer' datatype will return an ArrayBuffer\n    * which can be used to initialize typed arrays (such as Uint8Array).\n    *\n    * @method httpGet\n    * @param  {String}        path       name of the file or url to load\n    * @param  {String}        [datatype] \"json\", \"jsonp\", \"binary\", \"arrayBuffer\",\n    *                                    \"xml\", or \"text\"\n    * @param  {Object|Boolean} [data]    param data passed sent with request\n    * @param  {function}      [callback] function to be executed after\n    *                                    <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in\n    *                                    as first argument\n    * @param  {function}      [errorCallback] function to be executed if\n    *                                    there is an error, response is passed\n    *                                    in as first argument\n    * @return {Promise} A promise that resolves with the data when the operation\n    *                   completes successfully or rejects with the error after\n    *                   one occurs.\n    * @example\n    * <div class='norender'><code>\n    * // Examples use USGS Earthquake API:\n    * //   https://earthquake.usgs.gov/fdsnws/event/1/#methods\n    * let earthquakes;\n    * function preload() {\n    *   // Get the most recent earthquake in the database\n    *   let url =\n       'https://earthquake.usgs.gov/fdsnws/event/1/query?' +\n    *     'format=geojson&limit=1&orderby=time';\n    *   httpGet(url, 'jsonp', false, function(response) {\n    *     // when the HTTP request completes, populate the variable that holds the\n    *     // earthquake data used in the visualization.\n    *     earthquakes = response;\n    *   });\n    * }\n    *\n    * function draw() {\n    *   if (!earthquakes) {\n    *     // Wait until the earthquake data has loaded before drawing.\n    *     return;\n    *   }\n    *   background(200);\n    *   // Get the magnitude and name of the earthquake out of the loaded JSON\n    *   let earthquakeMag = earthquakes.features[0].properties.mag;\n    *   let earthquakeName = earthquakes.features[0].properties.place;\n    *   ellipse(width / 2, height / 2, earthquakeMag * 10, earthquakeMag * 10);\n    *   textAlign(CENTER);\n    *   text(earthquakeName, 0, height - 30, width, 30);\n    *   noLoop();\n    * }\n    * </code></div>\n    */\n          /**\n           * @method httpGet\n           * @param  {String}        path\n           * @param  {Object|Boolean} data\n           * @param  {function}      [callback]\n           * @param  {function}      [errorCallback]\n           * @return {Promise}\n           */\n          /**\n           * @method httpGet\n           * @param  {String}        path\n           * @param  {function}      callback\n           * @param  {function}      [errorCallback]\n           * @return {Promise}\n           */\n          p5.prototype.httpGet = function() {\n            p5._validateParameters('httpGet', arguments);\n\n            var args = Array.prototype.slice.call(arguments);\n            args.splice(1, 0, 'GET');\n            return p5.prototype.httpDo.apply(this, args);\n          };\n\n          /**\n           * Method for executing an HTTP POST request. If data type is not specified,\n           * p5 will try to guess based on the URL, defaulting to text. This is equivalent to\n           * calling <code>httpDo(path, 'POST')</code>.\n           *\n           * @method httpPost\n           * @param  {String}        path       name of the file or url to load\n           * @param  {String}        [datatype] \"json\", \"jsonp\", \"xml\", or \"text\".\n           *                                    If omitted, <a href=\"#/p5/httpPost\">httpPost()</a> will guess.\n           * @param  {Object|Boolean} [data]    param data passed sent with request\n           * @param  {function}      [callback] function to be executed after\n           *                                    <a href=\"#/p5/httpPost\">httpPost()</a> completes, data is passed in\n           *                                    as first argument\n           * @param  {function}      [errorCallback] function to be executed if\n           *                                    there is an error, response is passed\n           *                                    in as first argument\n           * @return {Promise} A promise that resolves with the data when the operation\n           *                   completes successfully or rejects with the error after\n           *                   one occurs.\n           *\n           * @example\n           * <div>\n           * <code>\n           * // Examples use jsonplaceholder.typicode.com for a Mock Data API\n           *\n           * let url = 'https://jsonplaceholder.typicode.com/posts';\n           * let postData = { userId: 1, title: 'p5 Clicked!', body: 'p5.js is way cool.' };\n           *\n           * function setup() {\n           *   createCanvas(800, 800);\n           * }\n           *\n           * function mousePressed() {\n           *   // Pick new random color values\n           *   let r = random(255);\n           *   let g = random(255);\n           *   let b = random(255);\n           *\n           *   httpPost(url, 'json', postData, function(result) {\n           *     strokeWeight(2);\n           *     stroke(r, g, b);\n           *     fill(r, g, b, 127);\n           *     ellipse(mouseX, mouseY, 200, 200);\n           *     text(result.body, mouseX, mouseY);\n           *   });\n           * }\n           * </code>\n           * </div>\n           *\n           *\n           * <div><code>\n           * let url = 'https://invalidURL'; // A bad URL that will cause errors\n           * let postData = { title: 'p5 Clicked!', body: 'p5.js is way cool.' };\n           *\n           * function setup() {\n           *   createCanvas(800, 800);\n           * }\n           *\n           * function mousePressed() {\n           *   // Pick new random color values\n           *   let r = random(255);\n           *   let g = random(255);\n           *   let b = random(255);\n           *\n           *   httpPost(\n           *     url,\n           *     'json',\n           *     postData,\n           *     function(result) {\n           *       // ... won't be called\n           *     },\n           *     function(error) {\n           *       strokeWeight(2);\n           *       stroke(r, g, b);\n           *       fill(r, g, b, 127);\n           *       text(error.toString(), mouseX, mouseY);\n           *     }\n           *   );\n           * }\n           * </code></div>\n           *\n           */\n          /**\n           * @method httpPost\n           * @param  {String}        path\n           * @param  {Object|Boolean} data\n           * @param  {function}      [callback]\n           * @param  {function}      [errorCallback]\n           * @return {Promise}\n           */\n          /**\n           * @method httpPost\n           * @param  {String}        path\n           * @param  {function}      callback\n           * @param  {function}      [errorCallback]\n           * @return {Promise}\n           */\n          p5.prototype.httpPost = function() {\n            p5._validateParameters('httpPost', arguments);\n\n            var args = Array.prototype.slice.call(arguments);\n            args.splice(1, 0, 'POST');\n            return p5.prototype.httpDo.apply(this, args);\n          };\n\n          /**\n           * Method for executing an HTTP request. If data type is not specified,\n           * p5 will try to guess based on the URL, defaulting to text.<br><br>\n           * For more advanced use, you may also pass in the path as the first argument\n           * and a object as the second argument, the signature follows the one specified\n           * in the Fetch API specification.\n           * This method is suitable for fetching files up to size of 64MB when \"GET\" is used.\n           *\n           * @method httpDo\n           * @param  {String}        path       name of the file or url to load\n           * @param  {String}        [method]   either \"GET\", \"POST\", or \"PUT\",\n           *                                    defaults to \"GET\"\n           * @param  {String}        [datatype] \"json\", \"jsonp\", \"xml\", or \"text\"\n           * @param  {Object}        [data]     param data passed sent with request\n           * @param  {function}      [callback] function to be executed after\n           *                                    <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in\n           *                                    as first argument\n           * @param  {function}      [errorCallback] function to be executed if\n           *                                    there is an error, response is passed\n           *                                    in as first argument\n           * @return {Promise} A promise that resolves with the data when the operation\n           *                   completes successfully or rejects with the error after\n           *                   one occurs.\n           *\n           * @example\n           * <div>\n           * <code>\n           * // Examples use USGS Earthquake API:\n           * // https://earthquake.usgs.gov/fdsnws/event/1/#methods\n           *\n           * // displays an animation of all USGS earthquakes\n           * let earthquakes;\n           * let eqFeatureIndex = 0;\n           *\n           * function preload() {\n           *   let url = 'https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson';\n           *   httpDo(\n           *     url,\n           *     {\n           *       method: 'GET',\n           *       // Other Request options, like special headers for apis\n           *       headers: { authorization: 'Bearer secretKey' }\n           *     },\n           *     function(res) {\n           *       earthquakes = res;\n           *     }\n           *   );\n           * }\n           *\n           * function draw() {\n           *   // wait until the data is loaded\n           *   if (!earthquakes || !earthquakes.features[eqFeatureIndex]) {\n           *     return;\n           *   }\n           *   clear();\n           *\n           *   let feature = earthquakes.features[eqFeatureIndex];\n           *   let mag = feature.properties.mag;\n           *   let rad = mag / 11 * ((width + height) / 2);\n           *   fill(255, 0, 0, 100);\n           *   ellipse(width / 2 + random(-2, 2), height / 2 + random(-2, 2), rad, rad);\n           *\n           *   if (eqFeatureIndex >= earthquakes.features.length) {\n           *     eqFeatureIndex = 0;\n           *   } else {\n           *     eqFeatureIndex += 1;\n           *   }\n           * }\n           * </code>\n           * </div>\n           */\n          /**\n           * @method httpDo\n           * @param  {String}        path\n           * @param  {Object}        options   Request object options as documented in the\n           *                                    \"fetch\" API\n           * <a href=\"https://developer.mozilla.org/en/docs/Web/API/Fetch_API\">reference</a>\n           * @param  {function}      [callback]\n           * @param  {function}      [errorCallback]\n           * @return {Promise}\n           */\n          p5.prototype.httpDo = function() {\n            var type;\n            var callback;\n            var errorCallback;\n            var request;\n            var promise;\n            var jsonpOptions = {};\n            var cbCount = 0;\n            var contentType = 'text/plain';\n            // Trim the callbacks off the end to get an idea of how many arguments are passed\n            for (var i = arguments.length - 1; i > 0; i--) {\n              if (typeof arguments[i] === 'function') {\n                cbCount++;\n              } else {\n                break;\n              }\n            }\n            // The number of arguments minus callbacks\n            var argsCount = arguments.length - cbCount;\n            var path = arguments[0];\n            if (\n              argsCount === 2 &&\n              typeof path === 'string' &&\n              _typeof(arguments[1]) === 'object'\n            ) {\n              // Intended for more advanced use, pass in Request parameters directly\n              request = new Request(path, arguments[1]);\n              callback = arguments[2];\n              errorCallback = arguments[3];\n            } else {\n              // Provided with arguments\n              var method = 'GET';\n              var data;\n\n              for (var j = 1; j < arguments.length; j++) {\n                var a = arguments[j];\n                if (typeof a === 'string') {\n                  if (a === 'GET' || a === 'POST' || a === 'PUT' || a === 'DELETE') {\n                    method = a;\n                  } else if (\n                    a === 'json' ||\n                    a === 'jsonp' ||\n                    a === 'binary' ||\n                    a === 'arrayBuffer' ||\n                    a === 'xml' ||\n                    a === 'text' ||\n                    a === 'table'\n                  ) {\n                    type = a;\n                  } else {\n                    data = a;\n                  }\n                } else if (typeof a === 'number') {\n                  data = a.toString();\n                } else if (_typeof(a) === 'object') {\n                  if (\n                    a.hasOwnProperty('jsonpCallback') ||\n                    a.hasOwnProperty('jsonpCallbackFunction')\n                  ) {\n                    for (var attr in a) {\n                      jsonpOptions[attr] = a[attr];\n                    }\n                  } else if (a instanceof p5.XML) {\n                    data = a.serialize();\n                    contentType = 'application/xml';\n                  } else {\n                    data = JSON.stringify(a);\n                    contentType = 'application/json';\n                  }\n                } else if (typeof a === 'function') {\n                  if (!callback) {\n                    callback = a;\n                  } else {\n                    errorCallback = a;\n                  }\n                }\n              }\n\n              request = new Request(path, {\n                method: method,\n                mode: 'cors',\n                body: data,\n                headers: new Headers({\n                  'Content-Type': contentType\n                })\n              });\n            }\n            // do some sort of smart type checking\n            if (!type) {\n              if (path.indexOf('json') !== -1) {\n                type = 'json';\n              } else if (path.indexOf('xml') !== -1) {\n                type = 'xml';\n              } else {\n                type = 'text';\n              }\n            }\n\n            if (type === 'jsonp') {\n              promise = fetchJsonp(path, jsonpOptions);\n            } else {\n              promise = fetch(request);\n            }\n            promise = promise.then(function(res) {\n              if (!res.ok) {\n                var err = new Error(res.body);\n                err.status = res.status;\n                err.ok = false;\n                throw err;\n              } else {\n                var fileSize = 0;\n                if (type !== 'jsonp') {\n                  fileSize = res.headers.get('content-length');\n                }\n                if (fileSize && fileSize > 64000000) {\n                  p5._friendlyFileLoadError(7, path);\n                }\n                switch (type) {\n                  case 'json':\n                  case 'jsonp':\n                    return res.json();\n                  case 'binary':\n                    return res.blob();\n                  case 'arrayBuffer':\n                    return res.arrayBuffer();\n                  case 'xml':\n                    return res.text().then(function(text) {\n                      var parser = new DOMParser();\n                      var xml = parser.parseFromString(text, 'text/xml');\n                      return new p5.XML(xml.documentElement);\n                    });\n                  default:\n                    return res.text();\n                }\n              }\n            });\n            promise.then(callback || function() {});\n            promise.catch(errorCallback || console.error);\n            return promise;\n          };\n\n          /**\n           * @module IO\n           * @submodule Output\n           * @for p5\n           */\n\n          window.URL = window.URL || window.webkitURL;\n\n          // private array of p5.PrintWriter objects\n          p5.prototype._pWriters = [];\n\n          /**\n           * @method createWriter\n           * @param {String} name name of the file to be created\n           * @param {String} [extension]\n           * @return {p5.PrintWriter}\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   background(200);\n           *   text('click here to save', 10, 10, 70, 80);\n           * }\n           *\n           * function mousePressed() {\n           *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n           *     var writer = createWriter('squares.txt');\n           *     for (let i = 0; i < 10; i++) {\n           *       writer.print(i * i);\n           *     }\n           *     writer.close();\n           *     writer.clear();\n           *   }\n           * }\n           * </code>\n           * </div>\n           */\n          p5.prototype.createWriter = function(name, extension) {\n            var newPW;\n            // check that it doesn't already exist\n            for (var i in p5.prototype._pWriters) {\n              if (p5.prototype._pWriters[i].name === name) {\n                // if a p5.PrintWriter w/ this name already exists...\n                // return p5.prototype._pWriters[i]; // return it w/ contents intact.\n                // or, could return a new, empty one with a unique name:\n                newPW = new p5.PrintWriter(name + this.millis(), extension);\n                p5.prototype._pWriters.push(newPW);\n                return newPW;\n              }\n            }\n            newPW = new p5.PrintWriter(name, extension);\n            p5.prototype._pWriters.push(newPW);\n            return newPW;\n          };\n\n          /**\n           *  @class p5.PrintWriter\n           *  @param  {String}     filename\n           *  @param  {String}     [extension]\n           */\n          p5.PrintWriter = function(filename, extension) {\n            var self = this;\n            this.name = filename;\n            this.content = '';\n            //Changed to write because it was being overloaded by function below.\n            /**\n             * Writes data to the PrintWriter stream\n             * @method write\n             * @param {Array} data all data to be written by the PrintWriter\n             * @example\n             * <div class=\"norender notest\">\n             * <code>\n             * // creates a file called 'newFile.txt'\n             * let writer = createWriter('newFile.txt');\n             * // write 'Hello world!'' to the file\n             * writer.write(['Hello world!']);\n             * // close the PrintWriter and save the file\n             * writer.close();\n             * </code>\n             * </div>\n             * <div class='norender notest'>\n             * <code>\n             * // creates a file called 'newFile2.txt'\n             * let writer = createWriter('newFile2.txt');\n             * // write 'apples,bananas,123' to the file\n             * writer.write(['apples', 'bananas', 123]);\n             * // close the PrintWriter and save the file\n             * writer.close();\n             * </code>\n             * </div>\n             * <div class='norender notest'>\n             * <code>\n             * // creates a file called 'newFile3.txt'\n             * let writer = createWriter('newFile3.txt');\n             * // write 'My name is: Teddy' to the file\n             * writer.write('My name is:');\n             * writer.write(' Teddy');\n             * // close the PrintWriter and save the file\n             * writer.close();\n             * </code>\n             * </div>\n             */\n            this.write = function(data) {\n              this.content += data;\n            };\n            /**\n             * Writes data to the PrintWriter stream, and adds a new line at the end\n             * @method print\n             * @param {Array} data all data to be printed by the PrintWriter\n             * @example\n             * <div class='norender notest'>\n             * <code>\n             * // creates a file called 'newFile.txt'\n             * let writer = createWriter('newFile.txt');\n             * // creates a file containing\n             * //  My name is:\n             * //  Teddy\n             * writer.print('My name is:');\n             * writer.print('Teddy');\n             * // close the PrintWriter and save the file\n             * writer.close();\n             * </code>\n             * </div>\n             * <div class='norender notest'>\n             * <code>\n             * let writer;\n             *\n             * function setup() {\n             *   createCanvas(400, 400);\n             *   // create a PrintWriter\n             *   writer = createWriter('newFile.txt');\n             * }\n             *\n             * function draw() {\n             *   // print all mouseX and mouseY coordinates to the stream\n             *   writer.print([mouseX, mouseY]);\n             * }\n             *\n             * function mouseClicked() {\n             *   // close the PrintWriter and save the file\n             *   writer.close();\n             * }\n             * </code>\n             * </div>\n             */\n            this.print = function(data) {\n              this.content += data + '\\n';\n            };\n            /**\n             * Clears the data already written to the PrintWriter object\n             * @method clear\n             * @example\n             * <div class =\"norender notest\"><code>\n             * // create writer object\n             * let writer = createWriter('newFile.txt');\n             * writer.write(['clear me']);\n             * // clear writer object here\n             * writer.clear();\n             * // close writer\n             * writer.close();\n             * </code></div>\n             *\n             */\n            this.clear = function() {\n              this.content = '';\n            };\n            /**\n             * Closes the PrintWriter\n             * @method close\n             * @example\n             * <div class=\"norender notest\">\n             * <code>\n             * // create a file called 'newFile.txt'\n             * let writer = createWriter('newFile.txt');\n             * // close the PrintWriter and save the file\n             * writer.close();\n             * </code>\n             * </div>\n             * <div class='norender notest'>\n             * <code>\n             * // create a file called 'newFile2.txt'\n             * let writer = createWriter('newFile2.txt');\n             * // write some data to the file\n             * writer.write([100, 101, 102]);\n             * // close the PrintWriter and save the file\n             * writer.close();\n             * </code>\n             * </div>\n             */\n            this.close = function() {\n              // convert String to Array for the writeFile Blob\n              var arr = [];\n              arr.push(this.content);\n              p5.prototype.writeFile(arr, filename, extension);\n              // remove from _pWriters array and delete self\n              for (var i in p5.prototype._pWriters) {\n                if (p5.prototype._pWriters[i].name === this.name) {\n                  // remove from _pWriters array\n                  p5.prototype._pWriters.splice(i, 1);\n                }\n              }\n              self.clear();\n              self = {};\n            };\n          };\n\n          /**\n           * @module IO\n           * @submodule Output\n           * @for p5\n           */\n\n          // object, filename, options --> saveJSON, saveStrings,\n          // filename, [extension] [canvas] --> saveImage\n\n          /**\n           *  <p>Save an image, text, json, csv, wav, or html. Prompts download to\n           *  the client's computer. <b>Note that it is not recommended to call <a href=\"#/p5/save\">save()</a>\n           *  within draw if it's looping, as the <a href=\"#/p5/save\">save()</a> function will open a new save\n           *  dialog every frame.</b></p>\n           *  <p>The default behavior is to save the canvas as an image. You can\n           *  optionally specify a filename.\n           *  For example:</p>\n           * <pre class='language-javascript'><code>\n           * save();\n           * save('myCanvas.jpg'); // save a specific canvas with a filename\n           * </code></pre>\n           *\n           *  <p>Alternately, the first parameter can be a pointer to a canvas\n           *  <a href=\"#/p5.Element\">p5.Element</a>, an Array of Strings,\n           *  an Array of JSON, a JSON object, a <a href=\"#/p5.Table\">p5.Table</a>, a <a href=\"#/p5.Image\">p5.Image</a>, or a\n           *  p5.SoundFile (requires p5.sound). The second parameter is a filename\n           *  (including extension). The third parameter is for options specific\n           *  to this type of object. This method will save a file that fits the\n           *  given parameters. For example:</p>\n           *\n           * <pre class='language-javascript'><code>\n           * // Saves canvas as an image\n           * save('myCanvas.jpg');\n           *\n           * // Saves pImage as a png image\n           * let img = createImage(10, 10);\n           * save(img, 'my.png');\n           *\n           * // Saves canvas as an image\n           * let cnv = createCanvas(100, 100);\n           * save(cnv, 'myCanvas.jpg');\n           *\n           * // Saves p5.Renderer object as an image\n           * let gb = createGraphics(100, 100);\n           * save(gb, 'myGraphics.jpg');\n           *\n           * let myTable = new p5.Table();\n           *\n           * // Saves table as html file\n           * save(myTable, 'myTable.html');\n           *\n           * // Comma Separated Values\n           * save(myTable, 'myTable.csv');\n           *\n           * // Tab Separated Values\n           * save(myTable, 'myTable.tsv');\n           *\n           * let myJSON = { a: 1, b: true };\n           *\n           * // Saves pretty JSON\n           * save(myJSON, 'my.json');\n           *\n           * // Optimizes JSON filesize\n           * save(myJSON, 'my.json', true);\n           *\n           * // Saves array of strings to a text file with line breaks after each item\n           * let arrayOfStrings = ['a', 'b'];\n           * save(arrayOfStrings, 'my.txt');\n           * </code></pre>\n           *\n           *  @method save\n           *  @param  {Object|String} [objectOrFilename]  If filename is provided, will\n           *                                             save canvas as an image with\n           *                                             either png or jpg extension\n           *                                             depending on the filename.\n           *                                             If object is provided, will\n           *                                             save depending on the object\n           *                                             and filename (see examples\n           *                                             above).\n           *  @param  {String} [filename] If an object is provided as the first\n           *                               parameter, then the second parameter\n           *                               indicates the filename,\n           *                               and should include an appropriate\n           *                               file extension (see examples above).\n           *  @param  {Boolean|String} [options]  Additional options depend on\n           *                            filetype. For example, when saving JSON,\n           *                            <code>true</code> indicates that the\n           *                            output will be optimized for filesize,\n           *                            rather than readability.\n           */\n          p5.prototype.save = function(object, _filename, _options) {\n            // parse the arguments and figure out which things we are saving\n            var args = arguments;\n            // =================================================\n            // OPTION 1: saveCanvas...\n\n            // if no arguments are provided, save canvas\n            var cnv = this._curElement ? this._curElement.elt : this.elt;\n            if (args.length === 0) {\n              p5.prototype.saveCanvas(cnv);\n              return;\n            } else if (args[0] instanceof p5.Renderer || args[0] instanceof p5.Graphics) {\n              // otherwise, parse the arguments\n\n              // if first param is a p5Graphics, then saveCanvas\n              p5.prototype.saveCanvas(args[0].elt, args[1], args[2]);\n              return;\n            } else if (args.length === 1 && typeof args[0] === 'string') {\n              // if 1st param is String and only one arg, assume it is canvas filename\n              p5.prototype.saveCanvas(cnv, args[0]);\n            } else {\n              // =================================================\n              // OPTION 2: extension clarifies saveStrings vs. saveJSON\n              var extension = _checkFileExtension(args[1], args[2])[1];\n              switch (extension) {\n                case 'json':\n                  p5.prototype.saveJSON(args[0], args[1], args[2]);\n                  return;\n                case 'txt':\n                  p5.prototype.saveStrings(args[0], args[1], args[2]);\n                  return;\n                // =================================================\n                // OPTION 3: decide based on object...\n                default:\n                  if (args[0] instanceof Array) {\n                    p5.prototype.saveStrings(args[0], args[1], args[2]);\n                  } else if (args[0] instanceof p5.Table) {\n                    p5.prototype.saveTable(args[0], args[1], args[2]);\n                  } else if (args[0] instanceof p5.Image) {\n                    p5.prototype.saveCanvas(args[0].canvas, args[1]);\n                  } else if (args[0] instanceof p5.SoundFile) {\n                    p5.prototype.saveSound(args[0], args[1], args[2], args[3]);\n                  }\n              }\n            }\n          };\n\n          /**\n           *  Writes the contents of an Array or a JSON object to a .json file.\n           *  The file saving process and location of the saved file will\n           *  vary between web browsers.\n           *\n           *  @method saveJSON\n           *  @param  {Array|Object} json\n           *  @param  {String} filename\n           *  @param  {Boolean} [optimize]   If true, removes line breaks\n           *                                 and spaces from the output\n           *                                 file to optimize filesize\n           *                                 (but not readability).\n           *  @example\n           * <div><code>\n           * let json = {}; // new  JSON Object\n           *\n           * json.id = 0;\n           * json.species = 'Panthera leo';\n           * json.name = 'Lion';\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   background(200);\n           *   text('click here to save', 10, 10, 70, 80);\n           * }\n           *\n           * function mousePressed() {\n           *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n           *     saveJSON(json, 'lion.json');\n           *   }\n           * }\n           *\n           * // saves the following to a file called \"lion.json\":\n           * // {\n           * //   \"id\": 0,\n           * //   \"species\": \"Panthera leo\",\n           * //   \"name\": \"Lion\"\n           * // }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           *\n           */\n          p5.prototype.saveJSON = function(json, filename, opt) {\n            p5._validateParameters('saveJSON', arguments);\n            var stringify;\n            if (opt) {\n              stringify = JSON.stringify(json);\n            } else {\n              stringify = JSON.stringify(json, undefined, 2);\n            }\n            this.saveStrings(stringify.split('\\n'), filename, 'json');\n          };\n\n          p5.prototype.saveJSONObject = p5.prototype.saveJSON;\n          p5.prototype.saveJSONArray = p5.prototype.saveJSON;\n\n          /**\n           *  Writes an array of Strings to a text file, one line per String.\n           *  The file saving process and location of the saved file will\n           *  vary between web browsers.\n           *\n           *  @method saveStrings\n           *  @param  {String[]} list   string array to be written\n           *  @param  {String} filename filename for output\n           *  @param  {String} [extension] the filename's extension\n           *  @example\n           * <div><code>\n           * let words = 'apple bear cat dog';\n           *\n           * // .split() outputs an Array\n           * let list = split(words, ' ');\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   background(200);\n           *   text('click here to save', 10, 10, 70, 80);\n           * }\n           *\n           * function mousePressed() {\n           *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n           *     saveStrings(list, 'nouns.txt');\n           *   }\n           * }\n           *\n           * // Saves the following to a file called 'nouns.txt':\n           * //\n           * // apple\n           * // bear\n           * // cat\n           * // dog\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           *\n           */\n          p5.prototype.saveStrings = function(list, filename, extension) {\n            p5._validateParameters('saveStrings', arguments);\n            var ext = extension || 'txt';\n            var pWriter = this.createWriter(filename, ext);\n            for (var i = 0; i < list.length; i++) {\n              if (i < list.length - 1) {\n                pWriter.print(list[i]);\n              } else {\n                pWriter.print(list[i]);\n              }\n            }\n            pWriter.close();\n            pWriter.clear();\n          };\n\n          // =======\n          // HELPERS\n          // =======\n\n          function escapeHelper(content) {\n            return content\n              .replace(/&/g, '&amp;')\n              .replace(/</g, '&lt;')\n              .replace(/>/g, '&gt;')\n              .replace(/\"/g, '&quot;')\n              .replace(/'/g, '&#039;');\n          }\n\n          /**\n           *  Writes the contents of a <a href=\"#/p5.Table\">Table</a> object to a file. Defaults to a\n           *  text file with comma-separated-values ('csv') but can also\n           *  use tab separation ('tsv'), or generate an HTML table ('html').\n           *  The file saving process and location of the saved file will\n           *  vary between web browsers.\n           *\n           *  @method saveTable\n           *  @param  {p5.Table} Table  the <a href=\"#/p5.Table\">Table</a> object to save to a file\n           *  @param  {String} filename the filename to which the Table should be saved\n           *  @param  {String} [options]  can be one of \"tsv\", \"csv\", or \"html\"\n           *  @example\n           *  <div><code>\n           * let table;\n           *\n           * function setup() {\n           *   table = new p5.Table();\n           *\n           *   table.addColumn('id');\n           *   table.addColumn('species');\n           *   table.addColumn('name');\n           *\n           *   let newRow = table.addRow();\n           *   newRow.setNum('id', table.getRowCount() - 1);\n           *   newRow.setString('species', 'Panthera leo');\n           *   newRow.setString('name', 'Lion');\n           *\n           *   // To save, un-comment next line then click 'run'\n           *   // saveTable(table, 'new.csv');\n           * }\n           *\n           * // Saves the following to a file called 'new.csv':\n           * // id,species,name\n           * // 0,Panthera leo,Lion\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           *\n           */\n          p5.prototype.saveTable = function(table, filename, options) {\n            p5._validateParameters('saveTable', arguments);\n            var ext;\n            if (options === undefined) {\n              ext = filename.substring(filename.lastIndexOf('.') + 1, filename.length);\n            } else {\n              ext = options;\n            }\n            var pWriter = this.createWriter(filename, ext);\n\n            var header = table.columns;\n\n            var sep = ','; // default to CSV\n            if (ext === 'tsv') {\n              sep = '\\t';\n            }\n            if (ext !== 'html') {\n              // make header if it has values\n              if (header[0] !== '0') {\n                for (var h = 0; h < header.length; h++) {\n                  if (h < header.length - 1) {\n                    pWriter.write(header[h] + sep);\n                  } else {\n                    pWriter.write(header[h]);\n                  }\n                }\n                pWriter.write('\\n');\n              }\n\n              // make rows\n              for (var i = 0; i < table.rows.length; i++) {\n                var j;\n                for (j = 0; j < table.rows[i].arr.length; j++) {\n                  if (j < table.rows[i].arr.length - 1) {\n                    pWriter.write(table.rows[i].arr[j] + sep);\n                  } else if (i < table.rows.length - 1) {\n                    pWriter.write(table.rows[i].arr[j]);\n                  } else {\n                    pWriter.write(table.rows[i].arr[j]);\n                  }\n                }\n                pWriter.write('\\n');\n              }\n            } else {\n              // otherwise, make HTML\n              pWriter.print('<html>');\n              pWriter.print('<head>');\n              var str = '  <meta http-equiv=\"content-type\" content';\n              str += '=\"text/html;charset=utf-8\" />';\n              pWriter.print(str);\n              pWriter.print('</head>');\n\n              pWriter.print('<body>');\n              pWriter.print('  <table>');\n\n              // make header if it has values\n              if (header[0] !== '0') {\n                pWriter.print('    <tr>');\n                for (var k = 0; k < header.length; k++) {\n                  var e = escapeHelper(header[k]);\n                  pWriter.print('      <td>' + e);\n                  pWriter.print('      </td>');\n                }\n                pWriter.print('    </tr>');\n              }\n\n              // make rows\n              for (var row = 0; row < table.rows.length; row++) {\n                pWriter.print('    <tr>');\n                for (var col = 0; col < table.columns.length; col++) {\n                  var entry = table.rows[row].getString(col);\n                  var htmlEntry = escapeHelper(entry);\n                  pWriter.print('      <td>' + htmlEntry);\n                  pWriter.print('      </td>');\n                }\n                pWriter.print('    </tr>');\n              }\n              pWriter.print('  </table>');\n              pWriter.print('</body>');\n              pWriter.print('</html>');\n            }\n            // close and clear the pWriter\n            pWriter.close();\n            pWriter.clear();\n          }; // end saveTable()\n\n          /**\n           *  Generate a blob of file data as a url to prepare for download.\n           *  Accepts an array of data, a filename, and an extension (optional).\n           *  This is a private function because it does not do any formatting,\n           *  but it is used by <a href=\"#/p5/saveStrings\">saveStrings</a>, <a href=\"#/p5/saveJSON\">saveJSON</a>, <a href=\"#/p5/saveTable\">saveTable</a> etc.\n           *\n           *  @param  {Array} dataToDownload\n           *  @param  {String} filename\n           *  @param  {String} [extension]\n           *  @private\n           */\n          p5.prototype.writeFile = function(dataToDownload, filename, extension) {\n            var type = 'application/octet-stream';\n            if (p5.prototype._isSafari()) {\n              type = 'text/plain';\n            }\n            var blob = new Blob(dataToDownload, {\n              type: type\n            });\n\n            p5.prototype.downloadFile(blob, filename, extension);\n          };\n\n          /**\n           *  Forces download. Accepts a url to filedata/blob, a filename,\n           *  and an extension (optional).\n           *  This is a private function because it does not do any formatting,\n           *  but it is used by <a href=\"#/p5/saveStrings\">saveStrings</a>, <a href=\"#/p5/saveJSON\">saveJSON</a>, <a href=\"#/p5/saveTable\">saveTable</a> etc.\n           *\n           *  @method downloadFile\n           *  @private\n           *  @param  {String|Blob} data    either an href generated by createObjectURL,\n           *                                or a Blob object containing the data\n           *  @param  {String} [filename]\n           *  @param  {String} [extension]\n           */\n          p5.prototype.downloadFile = function(data, fName, extension) {\n            var fx = _checkFileExtension(fName, extension);\n            var filename = fx[0];\n\n            if (data instanceof Blob) {\n              var fileSaver = _dereq_('file-saver');\n              fileSaver.saveAs(data, filename);\n              return;\n            }\n\n            var a = document.createElement('a');\n            a.href = data;\n            a.download = filename;\n\n            // Firefox requires the link to be added to the DOM before click()\n            a.onclick = function(e) {\n              destroyClickedElement(e);\n              e.stopPropagation();\n            };\n\n            a.style.display = 'none';\n            document.body.appendChild(a);\n\n            // Safari will open this file in the same page as a confusing Blob.\n            if (p5.prototype._isSafari()) {\n              var aText = 'Hello, Safari user! To download this file...\\n';\n              aText += '1. Go to File --> Save As.\\n';\n              aText += '2. Choose \"Page Source\" as the Format.\\n';\n              aText += '3. Name it with this extension: .\"' + fx[1] + '\"';\n              alert(aText);\n            }\n            a.click();\n          };\n\n          /**\n           *  Returns a file extension, or another string\n           *  if the provided parameter has no extension.\n           *\n           *  @param   {String} filename\n           *  @param   {String} [extension]\n           *  @return  {String[]} [fileName, fileExtension]\n           *\n           *  @private\n           */\n          function _checkFileExtension(filename, extension) {\n            if (!extension || extension === true || extension === 'true') {\n              extension = '';\n            }\n            if (!filename) {\n              filename = 'untitled';\n            }\n            var ext = '';\n            // make sure the file will have a name, see if filename needs extension\n            if (filename && filename.indexOf('.') > -1) {\n              ext = filename.split('.').pop();\n            }\n            // append extension if it doesn't exist\n            if (extension) {\n              if (ext !== extension) {\n                ext = extension;\n                filename = filename + '.' + ext;\n              }\n            }\n            return [filename, ext];\n          }\n          p5.prototype._checkFileExtension = _checkFileExtension;\n\n          /**\n           *  Returns true if the browser is Safari, false if not.\n           *  Safari makes trouble for downloading files.\n           *\n           *  @return  {Boolean} [description]\n           *  @private\n           */\n          p5.prototype._isSafari = function() {\n            var x = Object.prototype.toString.call(window.HTMLElement);\n            return x.indexOf('Constructor') > 0;\n          };\n\n          /**\n           *  Helper function, a callback for download that deletes\n           *  an invisible anchor element from the DOM once the file\n           *  has been automatically downloaded.\n           *\n           *  @private\n           */\n          function destroyClickedElement(event) {\n            document.body.removeChild(event.target);\n          }\n\n          module.exports = p5;\n        },\n        {\n          '../core/error_helpers': 20,\n          '../core/main': 24,\n          'es6-promise': 5,\n          'fetch-jsonp': 6,\n          'file-saver': 7,\n          'whatwg-fetch': 12\n        }\n      ],\n      49: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module IO\n           * @submodule Table\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          /**\n           *  Table Options\n           *  <p>Generic class for handling tabular data, typically from a\n           *  CSV, TSV, or other sort of spreadsheet file.</p>\n           *  <p>CSV files are\n           *  <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">\n           *  comma separated values</a>, often with the data in quotes. TSV\n           *  files use tabs as separators, and usually don't bother with the\n           *  quotes.</p>\n           *  <p>File names should end with .csv if they're comma separated.</p>\n           *  <p>A rough \"spec\" for CSV can be found\n           *  <a href=\"http://tools.ietf.org/html/rfc4180\">here</a>.</p>\n           *  <p>To load files, use the <a href=\"#/p5/loadTable\">loadTable</a> method.</p>\n           *  <p>To save tables to your computer, use the <a href=\"#/p5/save\">save</a> method\n           *   or the <a href=\"#/p5/saveTable\">saveTable</a> method.</p>\n           *\n           *  Possible options include:\n           *  <ul>\n           *  <li>csv - parse the table as comma-separated values\n           *  <li>tsv - parse the table as tab-separated values\n           *  <li>header - this table has a header (title) row\n           *  </ul>\n           */\n\n          /**\n           *  <a href=\"#/p5.Table\">Table</a> objects store data with multiple rows and columns, much\n           *  like in a traditional spreadsheet. Tables can be generated from\n           *  scratch, dynamically, or using data from an existing file.\n           *\n           *  @class p5.Table\n           *  @constructor\n           *  @param  {p5.TableRow[]}     [rows] An array of p5.TableRow objects\n           */\n          p5.Table = function(rows) {\n            /**\n             *  @property columns {String[]}\n             */\n            this.columns = [];\n\n            /**\n             *  @property rows {p5.TableRow[]}\n             */\n            this.rows = [];\n          };\n\n          /**\n           *  Use <a href=\"#/p5/addRow\">addRow()</a> to add a new row of data to a <a href=\"#/p5.Table\">p5.Table</a> object. By default,\n           *  an empty row is created. Typically, you would store a reference to\n           *  the new row in a TableRow object (see newRow in the example above),\n           *  and then set individual values using <a href=\"#/p5/set\">set()</a>.\n           *\n           *  If a <a href=\"#/p5.TableRow\">p5.TableRow</a> object is included as a parameter, then that row is\n           *  duplicated and added to the table.\n           *\n           *  @method  addRow\n           *  @param   {p5.TableRow} [row] row to be added to the table\n           *  @return  {p5.TableRow} the row that was added\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   //add a row\n           *   let newRow = table.addRow();\n           *   newRow.setString('id', table.getRowCount() - 1);\n           *   newRow.setString('species', 'Canis Lupus');\n           *   newRow.setString('name', 'Wolf');\n           *\n           *   //print the results\n           *   for (let r = 0; r < table.getRowCount(); r++)\n           *     for (let c = 0; c < table.getColumnCount(); c++)\n           *       print(table.getString(r, c));\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no image displayed\n           *\n           */\n          p5.Table.prototype.addRow = function(row) {\n            // make sure it is a valid TableRow\n            var r = row || new p5.TableRow();\n\n            if (typeof r.arr === 'undefined' || typeof r.obj === 'undefined') {\n              //r = new p5.prototype.TableRow(r);\n              throw new Error('invalid TableRow: ' + r);\n            }\n            r.table = this;\n            this.rows.push(r);\n            return r;\n          };\n\n          /**\n           * Removes a row from the table object.\n           *\n           * @method  removeRow\n           * @param   {Integer} id ID number of the row to remove\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   //remove the first row\n           *   table.removeRow(0);\n           *\n           *   //print the results\n           *   for (let r = 0; r < table.getRowCount(); r++)\n           *     for (let c = 0; c < table.getColumnCount(); c++)\n           *       print(table.getString(r, c));\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no image displayed\n           *\n           */\n          p5.Table.prototype.removeRow = function(id) {\n            this.rows[id].table = null; // remove reference to table\n            var chunk = this.rows.splice(id + 1, this.rows.length);\n            this.rows.pop();\n            this.rows = this.rows.concat(chunk);\n          };\n\n          /**\n           * Returns a reference to the specified <a href=\"#/p5.TableRow\">p5.TableRow</a>. The reference\n           * can then be used to get and set values of the selected row.\n           *\n           * @method  getRow\n           * @param  {Integer}   rowID ID number of the row to get\n           * @return {p5.TableRow} <a href=\"#/p5.TableRow\">p5.TableRow</a> object\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let row = table.getRow(1);\n           *   //print it column by column\n           *   //note: a row is an object, not an array\n           *   for (let c = 0; c < table.getColumnCount(); c++) {\n           *     print(row.getString(c));\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           *\n           */\n          p5.Table.prototype.getRow = function(r) {\n            return this.rows[r];\n          };\n\n          /**\n           *  Gets all rows from the table. Returns an array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s.\n           *\n           *  @method  getRows\n           *  @return {p5.TableRow[]}   Array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let rows = table.getRows();\n           *\n           *   //warning: rows is an array of objects\n           *   for (let r = 0; r < rows.length; r++) {\n           *     rows[r].set('name', 'Unicorn');\n           *   }\n           *\n           *   //print the results\n           *   for (let r = 0; r < table.getRowCount(); r++)\n           *     for (let c = 0; c < table.getColumnCount(); c++)\n           *       print(table.getString(r, c));\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no image displayed\n           *\n           */\n          p5.Table.prototype.getRows = function() {\n            return this.rows;\n          };\n\n          /**\n           *  Finds the first row in the Table that contains the value\n           *  provided, and returns a reference to that row. Even if\n           *  multiple rows are possible matches, only the first matching\n           *  row is returned. The column to search may be specified by\n           *  either its ID or title.\n           *\n           *  @method  findRow\n           *  @param  {String} value  The value to match\n           *  @param  {Integer|String} column ID number or title of the\n           *                                 column to search\n           *  @return {p5.TableRow}\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   //find the animal named zebra\n           *   let row = table.findRow('Zebra', 'name');\n           *   //find the corresponding species\n           *   print(row.getString('species'));\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no image displayed\n           *\n           */\n          p5.Table.prototype.findRow = function(value, column) {\n            // try the Object\n            if (typeof column === 'string') {\n              for (var i = 0; i < this.rows.length; i++) {\n                if (this.rows[i].obj[column] === value) {\n                  return this.rows[i];\n                }\n              }\n            } else {\n              // try the Array\n              for (var j = 0; j < this.rows.length; j++) {\n                if (this.rows[j].arr[column] === value) {\n                  return this.rows[j];\n                }\n              }\n            }\n            // otherwise...\n            return null;\n          };\n\n          /**\n           *  Finds the rows in the Table that contain the value\n           *  provided, and returns references to those rows. Returns an\n           *  Array, so for must be used to iterate through all the rows,\n           *  as shown in the example above. The column to search may be\n           *  specified by either its ID or title.\n           *\n           *  @method  findRows\n           *  @param  {String} value  The value to match\n           *  @param  {Integer|String} column ID number or title of the\n           *                                 column to search\n           *  @return {p5.TableRow[]}        An Array of TableRow objects\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   //add another goat\n           *   let newRow = table.addRow();\n           *   newRow.setString('id', table.getRowCount() - 1);\n           *   newRow.setString('species', 'Scape Goat');\n           *   newRow.setString('name', 'Goat');\n           *\n           *   //find the rows containing animals named Goat\n           *   let rows = table.findRows('Goat', 'name');\n           *   print(rows.length + ' Goats found');\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           *\n           */\n          p5.Table.prototype.findRows = function(value, column) {\n            var ret = [];\n            if (typeof column === 'string') {\n              for (var i = 0; i < this.rows.length; i++) {\n                if (this.rows[i].obj[column] === value) {\n                  ret.push(this.rows[i]);\n                }\n              }\n            } else {\n              // try the Array\n              for (var j = 0; j < this.rows.length; j++) {\n                if (this.rows[j].arr[column] === value) {\n                  ret.push(this.rows[j]);\n                }\n              }\n            }\n            return ret;\n          };\n\n          /**\n           * Finds the first row in the Table that matches the regular\n           * expression provided, and returns a reference to that row.\n           * Even if multiple rows are possible matches, only the first\n           * matching row is returned. The column to search may be\n           * specified by either its ID or title.\n           *\n           * @method  matchRow\n           * @param  {String|RegExp} regexp The regular expression to match\n           * @param  {String|Integer} column The column ID (number) or\n           *                                  title (string)\n           * @return {p5.TableRow}        TableRow object\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   //Search using specified regex on a given column, return TableRow object\n           *   let mammal = table.matchRow(new RegExp('ant'), 1);\n           *   print(mammal.getString(1));\n           *   //Output \"Panthera pardus\"\n           * }\n           * </code>\n           * </div>\n           *\n           */\n          p5.Table.prototype.matchRow = function(regexp, column) {\n            if (typeof column === 'number') {\n              for (var j = 0; j < this.rows.length; j++) {\n                if (this.rows[j].arr[column].match(regexp)) {\n                  return this.rows[j];\n                }\n              }\n            } else {\n              for (var i = 0; i < this.rows.length; i++) {\n                if (this.rows[i].obj[column].match(regexp)) {\n                  return this.rows[i];\n                }\n              }\n            }\n            return null;\n          };\n\n          /**\n           * Finds the rows in the Table that match the regular expression provided,\n           * and returns references to those rows. Returns an array, so for must be\n           * used to iterate through all the rows, as shown in the example. The\n           * column to search may be specified by either its ID or title.\n           *\n           * @method  matchRows\n           * @param  {String} regexp The regular expression to match\n           * @param  {String|Integer} [column] The column ID (number) or\n           *                                  title (string)\n           * @return {p5.TableRow[]}          An Array of TableRow objects\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let table;\n           *\n           * function setup() {\n           *   table = new p5.Table();\n           *\n           *   table.addColumn('name');\n           *   table.addColumn('type');\n           *\n           *   let newRow = table.addRow();\n           *   newRow.setString('name', 'Lion');\n           *   newRow.setString('type', 'Mammal');\n           *\n           *   newRow = table.addRow();\n           *   newRow.setString('name', 'Snake');\n           *   newRow.setString('type', 'Reptile');\n           *\n           *   newRow = table.addRow();\n           *   newRow.setString('name', 'Mosquito');\n           *   newRow.setString('type', 'Insect');\n           *\n           *   newRow = table.addRow();\n           *   newRow.setString('name', 'Lizard');\n           *   newRow.setString('type', 'Reptile');\n           *\n           *   let rows = table.matchRows('R.*', 'type');\n           *   for (let i = 0; i < rows.length; i++) {\n           *     print(rows[i].getString('name') + ': ' + rows[i].getString('type'));\n           *   }\n           * }\n           * // Sketch prints:\n           * // Snake: Reptile\n           * // Lizard: Reptile\n           * </code>\n           * </div>\n           */\n          p5.Table.prototype.matchRows = function(regexp, column) {\n            var ret = [];\n            if (typeof column === 'number') {\n              for (var j = 0; j < this.rows.length; j++) {\n                if (this.rows[j].arr[column].match(regexp)) {\n                  ret.push(this.rows[j]);\n                }\n              }\n            } else {\n              for (var i = 0; i < this.rows.length; i++) {\n                if (this.rows[i].obj[column].match(regexp)) {\n                  ret.push(this.rows[i]);\n                }\n              }\n            }\n            return ret;\n          };\n\n          /**\n           *  Retrieves all values in the specified column, and returns them\n           *  as an array. The column may be specified by either its ID or title.\n           *\n           *  @method  getColumn\n           *  @param  {String|Number} column String or Number of the column to return\n           *  @return {Array}       Array of column values\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   //getColumn returns an array that can be printed directly\n           *   print(table.getColumn('species'));\n           *   //outputs [\"Capra hircus\", \"Panthera pardus\", \"Equus zebra\"]\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           *\n           */\n          p5.Table.prototype.getColumn = function(value) {\n            var ret = [];\n            if (typeof value === 'string') {\n              for (var i = 0; i < this.rows.length; i++) {\n                ret.push(this.rows[i].obj[value]);\n              }\n            } else {\n              for (var j = 0; j < this.rows.length; j++) {\n                ret.push(this.rows[j].arr[value]);\n              }\n            }\n            return ret;\n          };\n\n          /**\n           *  Removes all rows from a Table. While all rows are removed,\n           *  columns and column titles are maintained.\n           *\n           *  @method  clearRows\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   table.clearRows();\n           *   print(table.getRowCount() + ' total rows in table');\n           *   print(table.getColumnCount() + ' total columns in table');\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           *\n           */\n          p5.Table.prototype.clearRows = function() {\n            delete this.rows;\n            this.rows = [];\n          };\n\n          /**\n           *  Use <a href=\"#/p5/addColumn\">addColumn()</a> to add a new column to a <a href=\"#/p5.Table\">Table</a> object.\n           *  Typically, you will want to specify a title, so the column\n           *  may be easily referenced later by name. (If no title is\n           *  specified, the new column's title will be null.)\n           *\n           *  @method  addColumn\n           *  @param {String} [title] title of the given column\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   table.addColumn('carnivore');\n           *   table.set(0, 'carnivore', 'no');\n           *   table.set(1, 'carnivore', 'yes');\n           *   table.set(2, 'carnivore', 'no');\n           *\n           *   //print the results\n           *   for (let r = 0; r < table.getRowCount(); r++)\n           *     for (let c = 0; c < table.getColumnCount(); c++)\n           *       print(table.getString(r, c));\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           *\n           */\n          p5.Table.prototype.addColumn = function(title) {\n            var t = title || null;\n            this.columns.push(t);\n          };\n\n          /**\n           *  Returns the total number of columns in a Table.\n           *\n           *  @method  getColumnCount\n           *  @return {Integer} Number of columns in this table\n           * @example\n           * <div>\n           * <code>\n           * // given the cvs file \"blobs.csv\" in /assets directory\n           * // ID, Name, Flavor, Shape, Color\n           * // Blob1, Blobby, Sweet, Blob, Pink\n           * // Blob2, Saddy, Savory, Blob, Blue\n           *\n           * let table;\n           *\n           * function preload() {\n           *   table = loadTable('assets/blobs.csv');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(200, 100);\n           *   textAlign(CENTER);\n           *   background(255);\n           * }\n           *\n           * function draw() {\n           *   let numOfColumn = table.getColumnCount();\n           *   text('There are ' + numOfColumn + ' columns in the table.', 100, 50);\n           * }\n           * </code>\n           * </div>\n           */\n          p5.Table.prototype.getColumnCount = function() {\n            return this.columns.length;\n          };\n\n          /**\n           *  Returns the total number of rows in a Table.\n           *\n           *  @method  getRowCount\n           *  @return {Integer} Number of rows in this table\n           * @example\n           * <div>\n           * <code>\n           * // given the cvs file \"blobs.csv\" in /assets directory\n           * //\n           * // ID, Name, Flavor, Shape, Color\n           * // Blob1, Blobby, Sweet, Blob, Pink\n           * // Blob2, Saddy, Savory, Blob, Blue\n           *\n           * let table;\n           *\n           * function preload() {\n           *   table = loadTable('assets/blobs.csv');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(200, 100);\n           *   textAlign(CENTER);\n           *   background(255);\n           * }\n           *\n           * function draw() {\n           *   text('There are ' + table.getRowCount() + ' rows in the table.', 100, 50);\n           * }\n           * </code>\n           * </div>\n           */\n          p5.Table.prototype.getRowCount = function() {\n            return this.rows.length;\n          };\n\n          /**\n           *  <p>Removes any of the specified characters (or \"tokens\").</p>\n           *\n           *  <p>If no column is specified, then the values in all columns and\n           *  rows are processed. A specific column may be referenced by\n           *  either its ID or title.</p>\n           *\n           *  @method  removeTokens\n           *  @param  {String} chars  String listing characters to be removed\n           *  @param  {String|Integer} [column] Column ID (number)\n           *                                   or name (string)\n           *\n           * @example\n           * <div class=\"norender\"><code>\n           * function setup() {\n           *   let table = new p5.Table();\n           *\n           *   table.addColumn('name');\n           *   table.addColumn('type');\n           *\n           *   let newRow = table.addRow();\n           *   newRow.setString('name', '   $Lion  ,');\n           *   newRow.setString('type', ',,,Mammal');\n           *\n           *   newRow = table.addRow();\n           *   newRow.setString('name', '$Snake  ');\n           *   newRow.setString('type', ',,,Reptile');\n           *\n           *   table.removeTokens(',$ ');\n           *   print(table.getArray());\n           * }\n           *\n           * // prints:\n           * //  0  \"Lion\"   \"Mamal\"\n           * //  1  \"Snake\"  \"Reptile\"\n           * </code></div>\n           */\n          p5.Table.prototype.removeTokens = function(chars, column) {\n            var escape = function escape(s) {\n              return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n            };\n            var charArray = [];\n            for (var i = 0; i < chars.length; i++) {\n              charArray.push(escape(chars.charAt(i)));\n            }\n            var regex = new RegExp(charArray.join('|'), 'g');\n\n            if (typeof column === 'undefined') {\n              for (var c = 0; c < this.columns.length; c++) {\n                for (var d = 0; d < this.rows.length; d++) {\n                  var s = this.rows[d].arr[c];\n                  s = s.replace(regex, '');\n                  this.rows[d].arr[c] = s;\n                  this.rows[d].obj[this.columns[c]] = s;\n                }\n              }\n            } else if (typeof column === 'string') {\n              for (var j = 0; j < this.rows.length; j++) {\n                var val = this.rows[j].obj[column];\n                val = val.replace(regex, '');\n                this.rows[j].obj[column] = val;\n                var pos = this.columns.indexOf(column);\n                this.rows[j].arr[pos] = val;\n              }\n            } else {\n              for (var k = 0; k < this.rows.length; k++) {\n                var str = this.rows[k].arr[column];\n                str = str.replace(regex, '');\n                this.rows[k].arr[column] = str;\n                this.rows[k].obj[this.columns[column]] = str;\n              }\n            }\n          };\n\n          /**\n           *  Trims leading and trailing whitespace, such as spaces and tabs,\n           *  from String table values. If no column is specified, then the\n           *  values in all columns and rows are trimmed. A specific column\n           *  may be referenced by either its ID or title.\n           *\n           *  @method  trim\n           *  @param  {String|Integer} [column] Column ID (number)\n           *                                   or name (string)\n           * @example\n           * <div class=\"norender\"><code>\n           * function setup() {\n           *   let table = new p5.Table();\n           *\n           *   table.addColumn('name');\n           *   table.addColumn('type');\n           *\n           *   let newRow = table.addRow();\n           *   newRow.setString('name', '   Lion  ,');\n           *   newRow.setString('type', ' Mammal  ');\n           *\n           *   newRow = table.addRow();\n           *   newRow.setString('name', '  Snake  ');\n           *   newRow.setString('type', '  Reptile  ');\n           *\n           *   table.trim();\n           *   print(table.getArray());\n           * }\n           *\n           * // prints:\n           * //  0  \"Lion\"   \"Mamal\"\n           * //  1  \"Snake\"  \"Reptile\"\n           * </code></div>\n           */\n          p5.Table.prototype.trim = function(column) {\n            var regex = new RegExp(' ', 'g');\n\n            if (typeof column === 'undefined') {\n              for (var c = 0; c < this.columns.length; c++) {\n                for (var d = 0; d < this.rows.length; d++) {\n                  var s = this.rows[d].arr[c];\n                  s = s.replace(regex, '');\n                  this.rows[d].arr[c] = s;\n                  this.rows[d].obj[this.columns[c]] = s;\n                }\n              }\n            } else if (typeof column === 'string') {\n              for (var j = 0; j < this.rows.length; j++) {\n                var val = this.rows[j].obj[column];\n                val = val.replace(regex, '');\n                this.rows[j].obj[column] = val;\n                var pos = this.columns.indexOf(column);\n                this.rows[j].arr[pos] = val;\n              }\n            } else {\n              for (var k = 0; k < this.rows.length; k++) {\n                var str = this.rows[k].arr[column];\n                str = str.replace(regex, '');\n                this.rows[k].arr[column] = str;\n                this.rows[k].obj[this.columns[column]] = str;\n              }\n            }\n          };\n\n          /**\n           *  Use <a href=\"#/p5/removeColumn\">removeColumn()</a> to remove an existing column from a Table\n           *  object. The column to be removed may be identified by either\n           *  its title (a String) or its index value (an int).\n           *  removeColumn(0) would remove the first column, removeColumn(1)\n           *  would remove the second column, and so on.\n           *\n           *  @method  removeColumn\n           *  @param  {String|Integer} column columnName (string) or ID (number)\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   table.removeColumn('id');\n           *   print(table.getColumnCount());\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           *\n           */\n          p5.Table.prototype.removeColumn = function(c) {\n            var cString;\n            var cNumber;\n            if (typeof c === 'string') {\n              // find the position of c in the columns\n              cString = c;\n              cNumber = this.columns.indexOf(c);\n            } else {\n              cNumber = c;\n              cString = this.columns[c];\n            }\n\n            var chunk = this.columns.splice(cNumber + 1, this.columns.length);\n            this.columns.pop();\n            this.columns = this.columns.concat(chunk);\n\n            for (var i = 0; i < this.rows.length; i++) {\n              var tempR = this.rows[i].arr;\n              var chip = tempR.splice(cNumber + 1, tempR.length);\n              tempR.pop();\n              this.rows[i].arr = tempR.concat(chip);\n              delete this.rows[i].obj[cString];\n            }\n          };\n\n          /**\n           * Stores a value in the Table's specified row and column.\n           * The row is specified by its ID, while the column may be specified\n           * by either its ID or title.\n           *\n           * @method  set\n           * @param {Integer} row row ID\n           * @param {String|Integer} column column ID (Number)\n           *                               or title (String)\n           * @param {String|Number} value  value to assign\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   table.set(0, 'species', 'Canis Lupus');\n           *   table.set(0, 'name', 'Wolf');\n           *\n           *   //print the results\n           *   for (let r = 0; r < table.getRowCount(); r++)\n           *     for (let c = 0; c < table.getColumnCount(); c++)\n           *       print(table.getString(r, c));\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           *\n           */\n          p5.Table.prototype.set = function(row, column, value) {\n            this.rows[row].set(column, value);\n          };\n\n          /**\n           * Stores a Float value in the Table's specified row and column.\n           * The row is specified by its ID, while the column may be specified\n           * by either its ID or title.\n           *\n           * @method setNum\n           * @param {Integer} row row ID\n           * @param {String|Integer} column column ID (Number)\n           *                               or title (String)\n           * @param {Number} value  value to assign\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   table.setNum(1, 'id', 1);\n           *\n           *   print(table.getColumn(0));\n           *   //[\"0\", 1, \"2\"]\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           */\n          p5.Table.prototype.setNum = function(row, column, value) {\n            this.rows[row].setNum(column, value);\n          };\n\n          /**\n           * Stores a String value in the Table's specified row and column.\n           * The row is specified by its ID, while the column may be specified\n           * by either its ID or title.\n           *\n           * @method  setString\n           * @param {Integer} row row ID\n           * @param {String|Integer} column column ID (Number)\n           *                               or title (String)\n           * @param {String} value  value to assign\n           * @example\n           * <div class=\"norender\"><code>\n           * // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   //add a row\n           *   let newRow = table.addRow();\n           *   newRow.setString('id', table.getRowCount() - 1);\n           *   newRow.setString('species', 'Canis Lupus');\n           *   newRow.setString('name', 'Wolf');\n           *\n           *   print(table.getArray());\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          p5.Table.prototype.setString = function(row, column, value) {\n            this.rows[row].setString(column, value);\n          };\n\n          /**\n           * Retrieves a value from the Table's specified row and column.\n           * The row is specified by its ID, while the column may be specified by\n           * either its ID or title.\n           *\n           * @method  get\n           * @param {Integer} row row ID\n           * @param  {String|Integer} column columnName (string) or\n           *                                   ID (number)\n           * @return {String|Number}\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   print(table.get(0, 1));\n           *   //Capra hircus\n           *   print(table.get(0, 'species'));\n           *   //Capra hircus\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           *\n           */\n          p5.Table.prototype.get = function(row, column) {\n            return this.rows[row].get(column);\n          };\n\n          /**\n           * Retrieves a Float value from the Table's specified row and column.\n           * The row is specified by its ID, while the column may be specified by\n           * either its ID or title.\n           *\n           * @method  getNum\n           * @param {Integer} row row ID\n           * @param  {String|Integer} column columnName (string) or\n           *                                   ID (number)\n           * @return {Number}\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   print(table.getNum(1, 0) + 100);\n           *   //id 1 + 100 = 101\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           *\n           */\n          p5.Table.prototype.getNum = function(row, column) {\n            return this.rows[row].getNum(column);\n          };\n\n          /**\n           * Retrieves a String value from the Table's specified row and column.\n           * The row is specified by its ID, while the column may be specified by\n           * either its ID or title.\n           *\n           * @method  getString\n           * @param {Integer} row row ID\n           * @param  {String|Integer} column columnName (string) or\n           *                                   ID (number)\n           * @return {String}\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   // table is comma separated value \"CSV\"\n           *   // and has specifiying header for column labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   print(table.getString(0, 0)); // 0\n           *   print(table.getString(0, 1)); // Capra hircus\n           *   print(table.getString(0, 2)); // Goat\n           *   print(table.getString(1, 0)); // 1\n           *   print(table.getString(1, 1)); // Panthera pardus\n           *   print(table.getString(1, 2)); // Leopard\n           *   print(table.getString(2, 0)); // 2\n           *   print(table.getString(2, 1)); // Equus zebra\n           *   print(table.getString(2, 2)); // Zebra\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           *\n           */\n\n          p5.Table.prototype.getString = function(row, column) {\n            return this.rows[row].getString(column);\n          };\n\n          /**\n           * Retrieves all table data and returns as an object. If a column name is\n           * passed in, each row object will be stored with that attribute as its\n           * title.\n           *\n           * @method  getObject\n           * @param {String} [headerColumn] Name of the column which should be used to\n           *                              title each row object (optional)\n           * @return {Object}\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let tableObject = table.getObject();\n           *\n           *   print(tableObject);\n           *   //outputs an object\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           *\n           */\n          p5.Table.prototype.getObject = function(headerColumn) {\n            var tableObject = {};\n            var obj, cPos, index;\n\n            for (var i = 0; i < this.rows.length; i++) {\n              obj = this.rows[i].obj;\n\n              if (typeof headerColumn === 'string') {\n                cPos = this.columns.indexOf(headerColumn); // index of columnID\n                if (cPos >= 0) {\n                  index = obj[headerColumn];\n                  tableObject[index] = obj;\n                } else {\n                  throw new Error('This table has no column named \"' + headerColumn + '\"');\n                }\n              } else {\n                tableObject[i] = this.rows[i].obj;\n              }\n            }\n            return tableObject;\n          };\n\n          /**\n           * Retrieves all table data and returns it as a multidimensional array.\n           *\n           * @method  getArray\n           * @return {Array}\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leoperd\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   // table is comma separated value \"CSV\"\n           *   // and has specifiying header for column labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let tableArray = table.getArray();\n           *   for (let i = 0; i < tableArray.length; i++) {\n           *     print(tableArray[i]);\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           *\n           */\n          p5.Table.prototype.getArray = function() {\n            var tableArray = [];\n            for (var i = 0; i < this.rows.length; i++) {\n              tableArray.push(this.rows[i].arr);\n            }\n            return tableArray;\n          };\n\n          module.exports = p5;\n        },\n        { '../core/main': 24 }\n      ],\n      50: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module IO\n           * @submodule Table\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          /**\n           *  A TableRow object represents a single row of data values,\n           *  stored in columns, from a table.\n           *\n           *  A Table Row contains both an ordered array, and an unordered\n           *  JSON object.\n           *\n           *  @class p5.TableRow\n           *  @constructor\n           *  @param {String} [str]       optional: populate the row with a\n           *                              string of values, separated by the\n           *                              separator\n           *  @param {String} [separator] comma separated values (csv) by default\n           */\n          p5.TableRow = function(str, separator) {\n            var arr = [];\n            var obj = {};\n            if (str) {\n              separator = separator || ',';\n              arr = str.split(separator);\n            }\n            for (var i = 0; i < arr.length; i++) {\n              var key = i;\n              var val = arr[i];\n              obj[key] = val;\n            }\n            this.arr = arr;\n            this.obj = obj;\n            this.table = null;\n          };\n\n          /**\n           *  Stores a value in the TableRow's specified column.\n           *  The column may be specified by either its ID or title.\n           *\n           *  @method  set\n           *  @param {String|Integer} column Column ID (Number)\n           *                                or Title (String)\n           *  @param {String|Number} value  The value to be stored\n           *\n           * @example\n           * <div class=\"norender\"><code>\n           * // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let rows = table.getRows();\n           *   for (let r = 0; r < rows.length; r++) {\n           *     rows[r].set('name', 'Unicorn');\n           *   }\n           *\n           *   //print the results\n           *   print(table.getArray());\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          p5.TableRow.prototype.set = function(column, value) {\n            // if typeof column is string, use .obj\n            if (typeof column === 'string') {\n              var cPos = this.table.columns.indexOf(column); // index of columnID\n              if (cPos >= 0) {\n                this.obj[column] = value;\n                this.arr[cPos] = value;\n              } else {\n                throw new Error('This table has no column named \"' + column + '\"');\n              }\n            } else {\n              // if typeof column is number, use .arr\n              if (column < this.table.columns.length) {\n                this.arr[column] = value;\n                var cTitle = this.table.columns[column];\n                this.obj[cTitle] = value;\n              } else {\n                throw new Error('Column #' + column + ' is out of the range of this table');\n              }\n            }\n          };\n\n          /**\n           *  Stores a Float value in the TableRow's specified column.\n           *  The column may be specified by either its ID or title.\n           *\n           *  @method  setNum\n           *  @param {String|Integer} column Column ID (Number)\n           *                                or Title (String)\n           *  @param {Number|String} value  The value to be stored\n           *                                as a Float\n           * @example\n           * <div class=\"norender\"><code>\n           * // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let rows = table.getRows();\n           *   for (let r = 0; r < rows.length; r++) {\n           *     rows[r].setNum('id', r + 10);\n           *   }\n           *\n           *   print(table.getArray());\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          p5.TableRow.prototype.setNum = function(column, value) {\n            var floatVal = parseFloat(value);\n            this.set(column, floatVal);\n          };\n\n          /**\n           *  Stores a String value in the TableRow's specified column.\n           *  The column may be specified by either its ID or title.\n           *\n           *  @method  setString\n           *  @param {String|Integer} column Column ID (Number)\n           *                                or Title (String)\n           *  @param {String|Number|Boolean|Object} value  The value to be stored\n           *                                as a String\n           * @example\n           * <div class=\"norender\"><code>\n           * // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let rows = table.getRows();\n           *   for (let r = 0; r < rows.length; r++) {\n           *     let name = rows[r].getString('name');\n           *     rows[r].setString('name', 'A ' + name + ' named George');\n           *   }\n           *\n           *   print(table.getArray());\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          p5.TableRow.prototype.setString = function(column, value) {\n            var stringVal = value.toString();\n            this.set(column, stringVal);\n          };\n\n          /**\n           *  Retrieves a value from the TableRow's specified column.\n           *  The column may be specified by either its ID or title.\n           *\n           *  @method  get\n           *  @param  {String|Integer} column columnName (string) or\n           *                                   ID (number)\n           *  @return {String|Number}\n           *\n           * @example\n           * <div class=\"norender\"><code>\n           * // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let names = [];\n           *   let rows = table.getRows();\n           *   for (let r = 0; r < rows.length; r++) {\n           *     names.push(rows[r].get('name'));\n           *   }\n           *\n           *   print(names);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          p5.TableRow.prototype.get = function(column) {\n            if (typeof column === 'string') {\n              return this.obj[column];\n            } else {\n              return this.arr[column];\n            }\n          };\n\n          /**\n           *  Retrieves a Float value from the TableRow's specified\n           *  column. The column may be specified by either its ID or\n           *  title.\n           *\n           *  @method  getNum\n           *  @param  {String|Integer} column columnName (string) or\n           *                                   ID (number)\n           *  @return {Number}  Float Floating point number\n           * @example\n           * <div class=\"norender\"><code>\n           * // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let rows = table.getRows();\n           *   let minId = Infinity;\n           *   let maxId = -Infinity;\n           *   for (let r = 0; r < rows.length; r++) {\n           *     let id = rows[r].getNum('id');\n           *     minId = min(minId, id);\n           *     maxId = min(maxId, id);\n           *   }\n           *   print('minimum id = ' + minId + ', maximum id = ' + maxId);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          p5.TableRow.prototype.getNum = function(column) {\n            var ret;\n            if (typeof column === 'string') {\n              ret = parseFloat(this.obj[column]);\n            } else {\n              ret = parseFloat(this.arr[column]);\n            }\n\n            if (ret.toString() === 'NaN') {\n              throw 'Error: ' + this.obj[column] + ' is NaN (Not a Number)';\n            }\n            return ret;\n          };\n\n          /**\n           *  Retrieves an String value from the TableRow's specified\n           *  column. The column may be specified by either its ID or\n           *  title.\n           *\n           *  @method  getString\n           *  @param  {String|Integer} column columnName (string) or\n           *                                   ID (number)\n           *  @return {String}  String\n           * @example\n           * <div class=\"norender\"><code>\n           * // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let rows = table.getRows();\n           *   let longest = '';\n           *   for (let r = 0; r < rows.length; r++) {\n           *     let species = rows[r].getString('species');\n           *     if (longest.length < species.length) {\n           *       longest = species;\n           *     }\n           *   }\n           *\n           *   print('longest: ' + longest);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          p5.TableRow.prototype.getString = function(column) {\n            if (typeof column === 'string') {\n              return this.obj[column].toString();\n            } else {\n              return this.arr[column].toString();\n            }\n          };\n\n          module.exports = p5;\n        },\n        { '../core/main': 24 }\n      ],\n      51: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module IO\n           * @submodule XML\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          /**\n           * XML is a representation of an XML object, able to parse XML code. Use\n           * <a href=\"#/p5/loadXML\">loadXML()</a> to load external XML files and create XML objects.\n           *\n           * @class p5.XML\n           * @constructor\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let children = xml.getChildren('animal');\n           *\n           *   for (let i = 0; i < children.length; i++) {\n           *     let id = children[i].getNum('id');\n           *     let coloring = children[i].getString('species');\n           *     let name = children[i].getContent();\n           *     print(id + ', ' + coloring + ', ' + name);\n           *   }\n           * }\n           *\n           * // Sketch prints:\n           * // 0, Capra hircus, Goat\n           * // 1, Panthera pardus, Leopard\n           * // 2, Equus zebra, Zebra\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           *\n           */\n          p5.XML = function(DOM) {\n            if (!DOM) {\n              var xmlDoc = document.implementation.createDocument(null, 'doc');\n              this.DOM = xmlDoc.createElement('root');\n            } else {\n              this.DOM = DOM;\n            }\n          };\n\n          /**\n           * Gets a copy of the element's parent. Returns the parent as another\n           * <a href=\"#/p5.XML\">p5.XML</a> object.\n           *\n           * @method getParent\n           * @return {p5.XML}   element parent\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let children = xml.getChildren('animal');\n           *   let parent = children[1].getParent();\n           *   print(parent.getName());\n           * }\n           *\n           * // Sketch prints:\n           * // mammals\n           * </code></div>\n           */\n          p5.XML.prototype.getParent = function() {\n            return new p5.XML(this.DOM.parentElement);\n          };\n\n          /**\n           *  Gets the element's full name, which is returned as a String.\n           *\n           * @method getName\n           * @return {String} the name of the node\n           * @example&lt;animal\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   print(xml.getName());\n           * }\n           *\n           * // Sketch prints:\n           * // mammals\n           * </code></div>\n           */\n          p5.XML.prototype.getName = function() {\n            return this.DOM.tagName;\n          };\n\n          /**\n           * Sets the element's name, which is specified as a String.\n           *\n           * @method setName\n           * @param {String} the new name of the node\n           * @example&lt;animal\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   print(xml.getName());\n           *   xml.setName('fish');\n           *   print(xml.getName());\n           * }\n           *\n           * // Sketch prints:\n           * // mammals\n           * // fish\n           * </code></div>\n           */\n          p5.XML.prototype.setName = function(name) {\n            var content = this.DOM.innerHTML;\n            var attributes = this.DOM.attributes;\n            var xmlDoc = document.implementation.createDocument(null, 'default');\n            var newDOM = xmlDoc.createElement(name);\n            newDOM.innerHTML = content;\n            for (var i = 0; i < attributes.length; i++) {\n              newDOM.setAttribute(attributes[i].nodeName, attributes.nodeValue);\n            }\n            this.DOM = newDOM;\n          };\n\n          /**\n           * Checks whether or not the element has any children, and returns the result\n           * as a boolean.\n           *\n           * @method hasChildren\n           * @return {boolean}\n           * @example&lt;animal\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   print(xml.hasChildren());\n           * }\n           *\n           * // Sketch prints:\n           * // true\n           * </code></div>\n           */\n          p5.XML.prototype.hasChildren = function() {\n            return this.DOM.children.length > 0;\n          };\n\n          /**\n           * Get the names of all of the element's children, and returns the names as an\n           * array of Strings. This is the same as looping through and calling <a href=\"#/p5.XML/getName\">getName()</a>\n           * on each child element individually.\n           *\n           * @method listChildren\n           * @return {String[]} names of the children of the element\n           * @example&lt;animal\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   print(xml.listChildren());\n           * }\n           *\n           * // Sketch prints:\n           * // [\"animal\", \"animal\", \"animal\"]\n           * </code></div>\n           */\n          p5.XML.prototype.listChildren = function() {\n            var arr = [];\n            for (var i = 0; i < this.DOM.childNodes.length; i++) {\n              arr.push(this.DOM.childNodes[i].nodeName);\n            }\n            return arr;\n          };\n\n          /**\n           * Returns all of the element's children as an array of <a href=\"#/p5.XML\">p5.XML</a> objects. When\n           * the name parameter is specified, then it will return all children that match\n           * that name.\n           *\n           * @method getChildren\n           * @param {String} [name] element name\n           * @return {p5.XML[]} children of the element\n           * @example&lt;animal\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let animals = xml.getChildren('animal');\n           *\n           *   for (let i = 0; i < animals.length; i++) {\n           *     print(animals[i].getContent());\n           *   }\n           * }\n           *\n           * // Sketch prints:\n           * // \"Goat\"\n           * // \"Leopard\"\n           * // \"Zebra\"\n           * </code></div>\n           */\n          p5.XML.prototype.getChildren = function(param) {\n            if (param) {\n              return elementsToP5XML(this.DOM.getElementsByTagName(param));\n            } else {\n              return elementsToP5XML(this.DOM.children);\n            }\n          };\n\n          function elementsToP5XML(elements) {\n            var arr = [];\n            for (var i = 0; i < elements.length; i++) {\n              arr.push(new p5.XML(elements[i]));\n            }\n            return arr;\n          }\n\n          /**\n           * Returns the first of the element's children that matches the name parameter\n           * or the child of the given index.It returns undefined if no matching\n           * child is found.\n           *\n           * @method getChild\n           * @param {String|Integer} name element name or index\n           * @return {p5.XML}\n           * @example&lt;animal\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let firstChild = xml.getChild('animal');\n           *   print(firstChild.getContent());\n           * }\n           *\n           * // Sketch prints:\n           * // \"Goat\"\n           * </code></div>\n           * <div class='norender'><code>\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let secondChild = xml.getChild(1);\n           *   print(secondChild.getContent());\n           * }\n           *\n           * // Sketch prints:\n           * // \"Leopard\"\n           * </code></div>\n           */\n          p5.XML.prototype.getChild = function(param) {\n            if (typeof param === 'string') {\n              for (var i = 0; i < this.DOM.children.length; i++) {\n                var child = this.DOM.children[i];\n                if (child.tagName === param) return new p5.XML(child);\n              }\n            } else {\n              return new p5.XML(this.DOM.children[param]);\n            }\n          };\n\n          /**\n           * Appends a new child to the element. The child can be specified with\n           * either a String, which will be used as the new tag's name, or as a\n           * reference to an existing <a href=\"#/p5.XML\">p5.XML</a> object.\n           * A reference to the newly created child is returned as an <a href=\"#/p5.XML\">p5.XML</a> object.\n           *\n           * @method addChild\n           * @param {p5.XML} node a <a href=\"#/p5.XML\">p5.XML</a> Object which will be the child to be added\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let child = new p5.XML();\n           *   child.setName('animal');\n           *   child.setAttribute('id', '3');\n           *   child.setAttribute('species', 'Ornithorhynchus anatinus');\n           *   child.setContent('Platypus');\n           *   xml.addChild(child);\n           *\n           *   let animals = xml.getChildren('animal');\n           *   print(animals[animals.length - 1].getContent());\n           * }\n           *\n           * // Sketch prints:\n           * // \"Goat\"\n           * // \"Leopard\"\n           * // \"Zebra\"\n           * </code></div>\n           */\n          p5.XML.prototype.addChild = function(node) {\n            if (node instanceof p5.XML) {\n              this.DOM.appendChild(node.DOM);\n            } else {\n              // PEND\n            }\n          };\n\n          /**\n           * Removes the element specified by name or index.\n           *\n           * @method removeChild\n           * @param {String|Integer} name element name or index\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   xml.removeChild('animal');\n           *   let children = xml.getChildren();\n           *   for (let i = 0; i < children.length; i++) {\n           *     print(children[i].getContent());\n           *   }\n           * }\n           *\n           * // Sketch prints:\n           * // \"Leopard\"\n           * // \"Zebra\"\n           * </code></div>\n           * <div class='norender'><code>\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   xml.removeChild(1);\n           *   let children = xml.getChildren();\n           *   for (let i = 0; i < children.length; i++) {\n           *     print(children[i].getContent());\n           *   }\n           * }\n           *\n           * // Sketch prints:\n           * // \"Goat\"\n           * // \"Zebra\"\n           * </code></div>\n           */\n          p5.XML.prototype.removeChild = function(param) {\n            var ind = -1;\n            if (typeof param === 'string') {\n              for (var i = 0; i < this.DOM.children.length; i++) {\n                if (this.DOM.children[i].tagName === param) {\n                  ind = i;\n                  break;\n                }\n              }\n            } else {\n              ind = param;\n            }\n            if (ind !== -1) {\n              this.DOM.removeChild(this.DOM.children[ind]);\n            }\n          };\n\n          /**\n           * Counts the specified element's number of attributes, returned as an Number.\n           *\n           * @method getAttributeCount\n           * @return {Integer}\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let firstChild = xml.getChild('animal');\n           *   print(firstChild.getAttributeCount());\n           * }\n           *\n           * // Sketch prints:\n           * // 2\n           * </code></div>\n           */\n          p5.XML.prototype.getAttributeCount = function() {\n            return this.DOM.attributes.length;\n          };\n\n          /**\n           * Gets all of the specified element's attributes, and returns them as an\n           * array of Strings.\n           *\n           * @method listAttributes\n           * @return {String[]} an array of strings containing the names of attributes\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let firstChild = xml.getChild('animal');\n           *   print(firstChild.listAttributes());\n           * }\n           *\n           * // Sketch prints:\n           * // [\"id\", \"species\"]\n           * </code></div>\n           */\n          p5.XML.prototype.listAttributes = function() {\n            var arr = [];\n            for (var i = 0; i < this.DOM.attributes.length; i++) {\n              var attribute = this.DOM.attributes[i];\n              arr.push(attribute.nodeName);\n            }\n            return arr;\n          };\n\n          /**\n           *  Checks whether or not an element has the specified attribute.\n           *\n           * @method hasAttribute\n           * @param {String} the attribute to be checked\n           * @return {boolean} true if attribute found else false\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let firstChild = xml.getChild('animal');\n           *   print(firstChild.hasAttribute('species'));\n           *   print(firstChild.hasAttribute('color'));\n           * }\n           *\n           * // Sketch prints:\n           * // true\n           * // false\n           * </code></div>\n           */\n          p5.XML.prototype.hasAttribute = function(name) {\n            var obj = {};\n            for (var i = 0; i < this.DOM.attributes.length; i++) {\n              var attribute = this.DOM.attributes[i];\n              obj[attribute.nodeName] = attribute.nodeValue;\n            }\n            return obj[name] ? true : false;\n          };\n\n          /**\n           * Returns an attribute value of the element as an Number. If the defaultValue\n           * parameter is specified and the attribute doesn't exist, then defaultValue\n           * is returned. If no defaultValue is specified and the attribute doesn't\n           * exist, the value 0 is returned.\n           *\n           * @method getNum\n           * @param {String} name            the non-null full name of the attribute\n           * @param {Number} [defaultValue]  the default value of the attribute\n           * @return {Number}\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let firstChild = xml.getChild('animal');\n           *   print(firstChild.getNum('id'));\n           * }\n           *\n           * // Sketch prints:\n           * // 0\n           * </code></div>\n           */\n          p5.XML.prototype.getNum = function(name, defaultValue) {\n            var obj = {};\n            for (var i = 0; i < this.DOM.attributes.length; i++) {\n              var attribute = this.DOM.attributes[i];\n              obj[attribute.nodeName] = attribute.nodeValue;\n            }\n            return Number(obj[name]) || defaultValue || 0;\n          };\n\n          /**\n           * Returns an attribute value of the element as an String. If the defaultValue\n           * parameter is specified and the attribute doesn't exist, then defaultValue\n           * is returned. If no defaultValue is specified and the attribute doesn't\n           * exist, null is returned.\n           *\n           * @method getString\n           * @param {String} name            the non-null full name of the attribute\n           * @param {Number} [defaultValue]  the default value of the attribute\n           * @return {String}\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let firstChild = xml.getChild('animal');\n           *   print(firstChild.getString('species'));\n           * }\n           *\n           * // Sketch prints:\n           * // \"Capra hircus\"\n           * </code></div>\n           */\n          p5.XML.prototype.getString = function(name, defaultValue) {\n            var obj = {};\n            for (var i = 0; i < this.DOM.attributes.length; i++) {\n              var attribute = this.DOM.attributes[i];\n              obj[attribute.nodeName] = attribute.nodeValue;\n            }\n            return obj[name] ? String(obj[name]) : defaultValue || null;\n          };\n\n          /**\n           * Sets the content of an element's attribute. The first parameter specifies\n           * the attribute name, while the second specifies the new content.\n           *\n           * @method setAttribute\n           * @param {String} name            the full name of the attribute\n           * @param {Number|String|Boolean} value  the value of the attribute\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let firstChild = xml.getChild('animal');\n           *   print(firstChild.getString('species'));\n           *   firstChild.setAttribute('species', 'Jamides zebra');\n           *   print(firstChild.getString('species'));\n           * }\n           *\n           * // Sketch prints:\n           * // \"Capra hircus\"\n           * // \"Jamides zebra\"\n           * </code></div>\n           */\n          p5.XML.prototype.setAttribute = function(name, value) {\n            this.DOM.setAttribute(name, value);\n          };\n\n          /**\n           * Returns the content of an element. If there is no such content,\n           * defaultValue is returned if specified, otherwise null is returned.\n           *\n           * @method getContent\n           * @param {String} [defaultValue] value returned if no content is found\n           * @return {String}\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let firstChild = xml.getChild('animal');\n           *   print(firstChild.getContent());\n           * }\n           *\n           * // Sketch prints:\n           * // \"Goat\"\n           * </code></div>\n           */\n          p5.XML.prototype.getContent = function(defaultValue) {\n            var str;\n            str = this.DOM.textContent;\n            str = str.replace(/\\s\\s+/g, ',');\n            return str || defaultValue || null;\n          };\n\n          /**\n           * Sets the element's content.\n           *\n           * @method setContent\n           * @param {String} text the new content\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let firstChild = xml.getChild('animal');\n           *   print(firstChild.getContent());\n           *   firstChild.setContent('Mountain Goat');\n           *   print(firstChild.getContent());\n           * }\n           *\n           * // Sketch prints:\n           * // \"Goat\"\n           * // \"Mountain Goat\"\n           * </code></div>\n           */\n          p5.XML.prototype.setContent = function(content) {\n            if (!this.DOM.children.length) {\n              this.DOM.textContent = content;\n            }\n          };\n\n          /**\n           * Serializes the element into a string. This function is useful for preparing\n           * the content to be sent over a http request or saved to file.\n           *\n           * @method serialize\n           * @return {String} Serialized string of the element\n           * @example\n           * <div class='norender'><code>\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   print(xml.serialize());\n           * }\n           *\n           * // Sketch prints:\n           * // <mammals>\n           * //   <animal id=\"0\" species=\"Capra hircus\">Goat</animal>\n           * //   <animal id=\"1\" species=\"Panthera pardus\">Leopard</animal>\n           * //   <animal id=\"2\" species=\"Equus zebra\">Zebra</animal>\n           * // </mammals>\n           * </code></div>\n           */\n          p5.XML.prototype.serialize = function() {\n            var xmlSerializer = new XMLSerializer();\n            return xmlSerializer.serializeToString(this.DOM);\n          };\n\n          module.exports = p5;\n        },\n        { '../core/main': 24 }\n      ],\n      52: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Math\n           * @submodule Calculation\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          /**\n           * Calculates the absolute value (magnitude) of a number. Maps to Math.abs().\n           * The absolute value of a number is always positive.\n           *\n           * @method abs\n           * @param  {Number} n number to compute\n           * @return {Number}   absolute value of given number\n           * @example\n           * <div class = \"norender\"><code>\n           * function setup() {\n           *   let x = -3;\n           *   let y = abs(x);\n           *\n           *   print(x); // -3\n           *   print(y); // 3\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           *\n           */\n          p5.prototype.abs = Math.abs;\n\n          /**\n           * Calculates the closest int value that is greater than or equal to the\n           * value of the parameter. Maps to Math.ceil(). For example, ceil(9.03)\n           * returns the value 10.\n           *\n           * @method ceil\n           * @param  {Number} n number to round up\n           * @return {Integer}   rounded up number\n           * @example\n           * <div><code>\n           * function draw() {\n           *   background(200);\n           *   // map, mouseX between 0 and 5.\n           *   let ax = map(mouseX, 0, 100, 0, 5);\n           *   let ay = 66;\n           *\n           *   //Get the ceiling of the mapped number.\n           *   let bx = ceil(map(mouseX, 0, 100, 0, 5));\n           *   let by = 33;\n           *\n           *   // Multiply the mapped numbers by 20 to more easily\n           *   // see the changes.\n           *   stroke(0);\n           *   fill(0);\n           *   line(0, ay, ax * 20, ay);\n           *   line(0, by, bx * 20, by);\n           *\n           *   // Reformat the float returned by map and draw it.\n           *   noStroke();\n           *   text(nfc(ax, 2), ax, ay - 5);\n           *   text(nfc(bx, 1), bx, by - 5);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 2 horizontal lines & number sets. increase with mouse x. bottom to 2 decimals\n           *\n           */\n          p5.prototype.ceil = Math.ceil;\n\n          /**\n           * Constrains a value between a minimum and maximum value.\n           *\n           * @method constrain\n           * @param  {Number} n    number to constrain\n           * @param  {Number} low  minimum limit\n           * @param  {Number} high maximum limit\n           * @return {Number}      constrained number\n           * @example\n           * <div><code>\n           * function draw() {\n           *   background(200);\n           *\n           *   let leftWall = 25;\n           *   let rightWall = 75;\n           *\n           *   // xm is just the mouseX, while\n           *   // xc is the mouseX, but constrained\n           *   // between the leftWall and rightWall!\n           *   let xm = mouseX;\n           *   let xc = constrain(mouseX, leftWall, rightWall);\n           *\n           *   // Draw the walls.\n           *   stroke(150);\n           *   line(leftWall, 0, leftWall, height);\n           *   line(rightWall, 0, rightWall, height);\n           *\n           *   // Draw xm and xc as circles.\n           *   noStroke();\n           *   fill(150);\n           *   ellipse(xm, 33, 9, 9); // Not Constrained\n           *   fill(0);\n           *   ellipse(xc, 66, 9, 9); // Constrained\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 2 vertical lines. 2 ellipses move with mouse X 1 does not move passed lines\n           *\n           */\n          p5.prototype.constrain = function(n, low, high) {\n            p5._validateParameters('constrain', arguments);\n            return Math.max(Math.min(n, high), low);\n          };\n\n          /**\n           * Calculates the distance between two points, in either two or three dimensions.\n           *\n           * @method dist\n           * @param  {Number} x1 x-coordinate of the first point\n           * @param  {Number} y1 y-coordinate of the first point\n           * @param  {Number} x2 x-coordinate of the second point\n           * @param  {Number} y2 y-coordinate of the second point\n           * @return {Number}    distance between the two points\n           *\n           * @example\n           * <div><code>\n           * // Move your mouse inside the canvas to see the\n           * // change in distance between two points!\n           * function draw() {\n           *   background(200);\n           *   fill(0);\n           *\n           *   let x1 = 10;\n           *   let y1 = 90;\n           *   let x2 = mouseX;\n           *   let y2 = mouseY;\n           *\n           *   line(x1, y1, x2, y2);\n           *   ellipse(x1, y1, 7, 7);\n           *   ellipse(x2, y2, 7, 7);\n           *\n           *   // d is the length of the line\n           *   // the distance from point 1 to point 2.\n           *   let d = int(dist(x1, y1, x2, y2));\n           *\n           *   // Let's write d along the line we are drawing!\n           *   push();\n           *   translate((x1 + x2) / 2, (y1 + y2) / 2);\n           *   rotate(atan2(y2 - y1, x2 - x1));\n           *   text(nfc(d, 1), 0, -5);\n           *   pop();\n           *   // Fancy!\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 2 ellipses joined by line. 1 ellipse moves with mouse X&Y. Distance displayed.\n           */\n          /**\n           * @method dist\n           * @param  {Number} x1\n           * @param  {Number} y1\n           * @param  {Number} z1 z-coordinate of the first point\n           * @param  {Number} x2\n           * @param  {Number} y2\n           * @param  {Number} z2 z-coordinate of the second point\n           * @return {Number}    distance between the two points\n           */\n          p5.prototype.dist = function() {\n            p5._validateParameters('dist', arguments);\n            if (arguments.length === 4) {\n              //2D\n              return hypot(arguments[2] - arguments[0], arguments[3] - arguments[1]);\n            } else if (arguments.length === 6) {\n              //3D\n              return hypot(\n                arguments[3] - arguments[0],\n                arguments[4] - arguments[1],\n                arguments[5] - arguments[2]\n              );\n            }\n          };\n\n          /**\n           * Returns Euler's number e (2.71828...) raised to the power of the n\n           * parameter. Maps to Math.exp().\n           *\n           * @method exp\n           * @param  {Number} n exponent to raise\n           * @return {Number}   e^n\n           * @example\n           * <div><code>\n           * function draw() {\n           *   background(200);\n           *\n           *   // Compute the exp() function with a value between 0 and 2\n           *   let xValue = map(mouseX, 0, width, 0, 2);\n           *   let yValue = exp(xValue);\n           *\n           *   let y = map(yValue, 0, 8, height, 0);\n           *\n           *   let legend = 'exp (' + nfc(xValue, 3) + ')\\n= ' + nf(yValue, 1, 4);\n           *   stroke(150);\n           *   line(mouseX, y, mouseX, height);\n           *   fill(0);\n           *   text(legend, 5, 15);\n           *   noStroke();\n           *   ellipse(mouseX, y, 7, 7);\n           *\n           *   // Draw the exp(x) curve,\n           *   // over the domain of x from 0 to 2\n           *   noFill();\n           *   stroke(0);\n           *   beginShape();\n           *   for (let x = 0; x < width; x++) {\n           *     xValue = map(x, 0, width, 0, 2);\n           *     yValue = exp(xValue);\n           *     y = map(yValue, 0, 8, height, 0);\n           *     vertex(x, y);\n           *   }\n           *\n           *   endShape();\n           *   line(0, 0, 0, height);\n           *   line(0, height - 1, width, height - 1);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * ellipse moves along a curve with mouse x. e^n displayed.\n           *\n           */\n          p5.prototype.exp = Math.exp;\n\n          /**\n           * Calculates the closest int value that is less than or equal to the\n           * value of the parameter. Maps to Math.floor().\n           *\n           * @method floor\n           * @param  {Number} n number to round down\n           * @return {Integer}  rounded down number\n           * @example\n           * <div><code>\n           * function draw() {\n           *   background(200);\n           *   //map, mouseX between 0 and 5.\n           *   let ax = map(mouseX, 0, 100, 0, 5);\n           *   let ay = 66;\n           *\n           *   //Get the floor of the mapped number.\n           *   let bx = floor(map(mouseX, 0, 100, 0, 5));\n           *   let by = 33;\n           *\n           *   // Multiply the mapped numbers by 20 to more easily\n           *   // see the changes.\n           *   stroke(0);\n           *   fill(0);\n           *   line(0, ay, ax * 20, ay);\n           *   line(0, by, bx * 20, by);\n           *\n           *   // Reformat the float returned by map and draw it.\n           *   noStroke();\n           *   text(nfc(ax, 2), ax, ay - 5);\n           *   text(nfc(bx, 1), bx, by - 5);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 2 horizontal lines & number sets. increase with mouse x. bottom to 2 decimals\n           *\n           */\n          p5.prototype.floor = Math.floor;\n\n          /**\n           * Calculates a number between two numbers at a specific increment. The amt\n           * parameter is the amount to interpolate between the two values where 0.0\n           * equal to the first point, 0.1 is very near the first point, 0.5 is\n           * half-way in between, and 1.0 is equal to the second point. If the\n           * value of amt is more than 1.0 or less than 0.0, the number will be\n           * calculated accordingly in the ratio of the two given numbers. The lerp\n           * function is convenient for creating motion along a straight\n           * path and for drawing dotted lines.\n           *\n           * @method lerp\n           * @param  {Number} start first value\n           * @param  {Number} stop  second value\n           * @param  {Number} amt   number\n           * @return {Number}       lerped value\n           * @example\n           * <div><code>\n           * function setup() {\n           *   background(200);\n           *   let a = 20;\n           *   let b = 80;\n           *   let c = lerp(a, b, 0.2);\n           *   let d = lerp(a, b, 0.5);\n           *   let e = lerp(a, b, 0.8);\n           *\n           *   let y = 50;\n           *\n           *   strokeWeight(5);\n           *   stroke(0); // Draw the original points in black\n           *   point(a, y);\n           *   point(b, y);\n           *\n           *   stroke(100); // Draw the lerp points in gray\n           *   point(c, y);\n           *   point(d, y);\n           *   point(e, y);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 5 points horizontally staggered mid-canvas. mid 3 are grey, outer black\n           *\n           */\n          p5.prototype.lerp = function(start, stop, amt) {\n            p5._validateParameters('lerp', arguments);\n            return amt * (stop - start) + start;\n          };\n\n          /**\n    * Calculates the natural logarithm (the base-e logarithm) of a number. This\n    * function expects the n parameter to be a value greater than 0.0. Maps to\n    * Math.log().\n    *\n    * @method log\n    * @param  {Number} n number greater than 0\n    * @return {Number}   natural logarithm of n\n    * @example\n    * <div><code>\n    * function draw() {\n    *   background(200);\n    *   let maxX = 2.8;\n    *   let maxY = 1.5;\n    *\n    *   // Compute the natural log of a value between 0 and maxX\n    *   let xValue = map(mouseX, 0, width, 0, maxX);\n    *   let yValue, y;\n    *   if (xValue > 0) {\n       // Cannot take the log of a negative number.\n    *     yValue = log(xValue);\n    *     y = map(yValue, -maxY, maxY, height, 0);\n    *\n    *     // Display the calculation occurring.\n    *     let legend = 'log(' + nf(xValue, 1, 2) + ')\\n= ' + nf(yValue, 1, 3);\n    *     stroke(150);\n    *     line(mouseX, y, mouseX, height);\n    *     fill(0);\n    *     text(legend, 5, 15);\n    *     noStroke();\n    *     ellipse(mouseX, y, 7, 7);\n    *   }\n    *\n    *   // Draw the log(x) curve,\n    *   // over the domain of x from 0 to maxX\n    *   noFill();\n    *   stroke(0);\n    *   beginShape();\n    *   for (let x = 0; x < width; x++) {\n    *     xValue = map(x, 0, width, 0, maxX);\n    *     yValue = log(xValue);\n    *     y = map(yValue, -maxY, maxY, height, 0);\n    *     vertex(x, y);\n    *   }\n    *   endShape();\n    *   line(0, 0, 0, height);\n    *   line(0, height / 2, width, height / 2);\n    * }\n    * </code></div>\n    *\n    * @alt\n    * ellipse moves along a curve with mouse x. natural logarithm of n displayed.\n    *\n    */\n          p5.prototype.log = Math.log;\n\n          /**\n           * Calculates the magnitude (or length) of a vector. A vector is a direction\n           * in space commonly used in computer graphics and linear algebra. Because it\n           * has no \"start\" position, the magnitude of a vector can be thought of as\n           * the distance from the coordinate 0,0 to its x,y value. Therefore, <a href=\"#/p5/mag\">mag()</a> is\n           * a shortcut for writing dist(0, 0, x, y).\n           *\n           * @method mag\n           * @param  {Number} a first value\n           * @param  {Number} b second value\n           * @return {Number}   magnitude of vector from (0,0) to (a,b)\n           * @example\n           * <div><code>\n           * function setup() {\n           *   let x1 = 20;\n           *   let x2 = 80;\n           *   let y1 = 30;\n           *   let y2 = 70;\n           *\n           *   line(0, 0, x1, y1);\n           *   print(mag(x1, y1)); // Prints \"36.05551275463989\"\n           *   line(0, 0, x2, y1);\n           *   print(mag(x2, y1)); // Prints \"85.44003745317531\"\n           *   line(0, 0, x1, y2);\n           *   print(mag(x1, y2)); // Prints \"72.80109889280519\"\n           *   line(0, 0, x2, y2);\n           *   print(mag(x2, y2)); // Prints \"106.3014581273465\"\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 4 lines of different length radiate from top left of canvas.\n           *\n           */\n          p5.prototype.mag = function(x, y) {\n            p5._validateParameters('mag', arguments);\n            return hypot(x, y);\n          };\n\n          /**\n    * Re-maps a number from one range to another.\n    * <br><br>\n    * In the first example above, the number 25 is converted from a value in the\n    * range of 0 to 100 into a value that ranges from the left edge of the\n    * window (0) to the right edge (width).\n    *\n    * @method map\n    * @param  {Number} value  the incoming value to be converted\n    * @param  {Number} start1 lower bound of the value's current range\n    * @param  {Number} stop1  upper bound of the value's current range\n    * @param  {Number} start2 lower bound of the value's target range\n    * @param  {Number} stop2  upper bound of the value's target range\n    * @param  {Boolean} [withinBounds] constrain the value to the newly mapped range\n    * @return {Number}        remapped number\n    * @example\n    *   <div><code>\n    * let value = 25;\n    * let m = map(value, 0, 100, 0, width);\n    * ellipse(m, 50, 10, 10);\n   </code></div>\n    *\n    *   <div><code>\n    * function setup() {\n    *   noStroke();\n    * }\n    *\n    * function draw() {\n    *   background(204);\n    *   let x1 = map(mouseX, 0, width, 25, 75);\n    *   ellipse(x1, 25, 25, 25);\n    *   //This ellipse is constrained to the 0-100 range\n    *   //after setting withinBounds to true\n    *   let x2 = map(mouseX, 0, width, 0, 100, true);\n    *   ellipse(x2, 75, 25, 25);\n    * }\n   </code></div>\n    *\n    * @alt\n    * 10 by 10 white ellipse with in mid left canvas\n    * 2 25 by 25 white ellipses move with mouse x. Bottom has more range from X\n    *\n    */\n          p5.prototype.map = function(n, start1, stop1, start2, stop2, withinBounds) {\n            p5._validateParameters('map', arguments);\n            var newval = (n - start1) / (stop1 - start1) * (stop2 - start2) + start2;\n            if (!withinBounds) {\n              return newval;\n            }\n            if (start2 < stop2) {\n              return this.constrain(newval, start2, stop2);\n            } else {\n              return this.constrain(newval, stop2, start2);\n            }\n          };\n\n          /**\n           * Determines the largest value in a sequence of numbers, and then returns\n           * that value. <a href=\"#/p5/max\">max()</a> accepts any number of Number parameters, or an Array\n           * of any length.\n           *\n           * @method max\n           * @param  {Number} n0 Number to compare\n           * @param  {Number} n1 Number to compare\n           * @return {Number}             maximum Number\n           * @example\n           * <div><code>\n           * function setup() {\n           *   // Change the elements in the array and run the sketch\n           *   // to show how max() works!\n           *   let numArray = [2, 1, 5, 4, 8, 9];\n           *   fill(0);\n           *   noStroke();\n           *   text('Array Elements', 0, 10);\n           *   // Draw all numbers in the array\n           *   let spacing = 15;\n           *   let elemsY = 25;\n           *   for (let i = 0; i < numArray.length; i++) {\n           *     text(numArray[i], i * spacing, elemsY);\n           *   }\n           *   let maxX = 33;\n           *   let maxY = 80;\n           *   // Draw the Maximum value in the array.\n           *   textSize(32);\n           *   text(max(numArray), maxX, maxY);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * Small text at top reads: Array Elements 2 1 5 4 8 9. Large text at center: 9\n           *\n           */\n          /**\n           * @method max\n           * @param  {Number[]} nums Numbers to compare\n           * @return {Number}\n           */\n          p5.prototype.max = function() {\n            p5._validateParameters('max', arguments);\n            if (arguments[0] instanceof Array) {\n              return Math.max.apply(null, arguments[0]);\n            } else {\n              return Math.max.apply(null, arguments);\n            }\n          };\n\n          /**\n           * Determines the smallest value in a sequence of numbers, and then returns\n           * that value. <a href=\"#/p5/min\">min()</a> accepts any number of Number parameters, or an Array\n           * of any length.\n           *\n           * @method min\n           * @param  {Number} n0 Number to compare\n           * @param  {Number} n1 Number to compare\n           * @return {Number}             minimum Number\n           * @example\n           * <div><code>\n           * function setup() {\n           *   // Change the elements in the array and run the sketch\n           *   // to show how min() works!\n           *   let numArray = [2, 1, 5, 4, 8, 9];\n           *   fill(0);\n           *   noStroke();\n           *   text('Array Elements', 0, 10);\n           *   // Draw all numbers in the array\n           *   let spacing = 15;\n           *   let elemsY = 25;\n           *   for (let i = 0; i < numArray.length; i++) {\n           *     text(numArray[i], i * spacing, elemsY);\n           *   }\n           *   let maxX = 33;\n           *   let maxY = 80;\n           *   // Draw the Minimum value in the array.\n           *   textSize(32);\n           *   text(min(numArray), maxX, maxY);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * Small text at top reads: Array Elements 2 1 5 4 8 9. Large text at center: 1\n           *\n           */\n          /**\n           * @method min\n           * @param  {Number[]} nums Numbers to compare\n           * @return {Number}\n           */\n          p5.prototype.min = function() {\n            p5._validateParameters('min', arguments);\n            if (arguments[0] instanceof Array) {\n              return Math.min.apply(null, arguments[0]);\n            } else {\n              return Math.min.apply(null, arguments);\n            }\n          };\n\n          /**\n           * Normalizes a number from another range into a value between 0 and 1.\n           * Identical to map(value, low, high, 0, 1).\n           * Numbers outside of the range are not clamped to 0 and 1, because\n           * out-of-range values are often intentional and useful. (See the example above.)\n           *\n           * @method norm\n           * @param  {Number} value incoming value to be normalized\n           * @param  {Number} start lower bound of the value's current range\n           * @param  {Number} stop  upper bound of the value's current range\n           * @return {Number}       normalized number\n           * @example\n           * <div><code>\n           * function draw() {\n           *   background(200);\n           *   let currentNum = mouseX;\n           *   let lowerBound = 0;\n           *   let upperBound = width; //100;\n           *   let normalized = norm(currentNum, lowerBound, upperBound);\n           *   let lineY = 70;\n           *   stroke(3);\n           *   line(0, lineY, width, lineY);\n           *   //Draw an ellipse mapped to the non-normalized value.\n           *   noStroke();\n           *   fill(50);\n           *   let s = 7; // ellipse size\n           *   ellipse(currentNum, lineY, s, s);\n           *\n           *   // Draw the guide\n           *   let guideY = lineY + 15;\n           *   text('0', 0, guideY);\n           *   textAlign(RIGHT);\n           *   text('100', width, guideY);\n           *\n           *   // Draw the normalized value\n           *   textAlign(LEFT);\n           *   fill(0);\n           *   textSize(32);\n           *   let normalY = 40;\n           *   let normalX = 20;\n           *   text(normalized, normalX, normalY);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * ellipse moves with mouse. 0 shown left & 100 right and updating values center\n           *\n           */\n          p5.prototype.norm = function(n, start, stop) {\n            p5._validateParameters('norm', arguments);\n            return this.map(n, start, stop, 0, 1);\n          };\n\n          /**\n           * Facilitates exponential expressions. The <a href=\"#/p5/pow\">pow()</a> function is an efficient\n           * way of multiplying numbers by themselves (or their reciprocals) in large\n           * quantities. For example, pow(3, 5) is equivalent to the expression\n           * 3*3*3*3*3 and pow(3, -5) is equivalent to 1 / 3*3*3*3*3. Maps to\n           * Math.pow().\n           *\n           * @method pow\n           * @param  {Number} n base of the exponential expression\n           * @param  {Number} e power by which to raise the base\n           * @return {Number}   n^e\n           * @example\n           * <div><code>\n           * function setup() {\n           *   //Exponentially increase the size of an ellipse.\n           *   let eSize = 3; // Original Size\n           *   let eLoc = 10; // Original Location\n           *\n           *   ellipse(eLoc, eLoc, eSize, eSize);\n           *\n           *   ellipse(eLoc * 2, eLoc * 2, pow(eSize, 2), pow(eSize, 2));\n           *\n           *   ellipse(eLoc * 4, eLoc * 4, pow(eSize, 3), pow(eSize, 3));\n           *\n           *   ellipse(eLoc * 8, eLoc * 8, pow(eSize, 4), pow(eSize, 4));\n           * }\n           * </code></div>\n           *\n           * @alt\n           * small to large ellipses radiating from top left of canvas\n           *\n           */\n          p5.prototype.pow = Math.pow;\n\n          /**\n           * Calculates the integer closest to the n parameter. For example,\n           * round(133.8) returns the value 134. Maps to Math.round().\n           *\n           * @method round\n           * @param  {Number} n number to round\n           * @return {Integer}  rounded number\n           * @example\n           * <div><code>\n           * function draw() {\n           *   background(200);\n           *   //map, mouseX between 0 and 5.\n           *   let ax = map(mouseX, 0, 100, 0, 5);\n           *   let ay = 66;\n           *\n           *   // Round the mapped number.\n           *   let bx = round(map(mouseX, 0, 100, 0, 5));\n           *   let by = 33;\n           *\n           *   // Multiply the mapped numbers by 20 to more easily\n           *   // see the changes.\n           *   stroke(0);\n           *   fill(0);\n           *   line(0, ay, ax * 20, ay);\n           *   line(0, by, bx * 20, by);\n           *\n           *   // Reformat the float returned by map and draw it.\n           *   noStroke();\n           *   text(nfc(ax, 2), ax, ay - 5);\n           *   text(nfc(bx, 1), bx, by - 5);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * horizontal center line squared values displayed on top and regular on bottom.\n           *\n           */\n          p5.prototype.round = Math.round;\n\n          /**\n           * Squares a number (multiplies a number by itself). The result is always a\n           * positive number, as multiplying two negative numbers always yields a\n           * positive result. For example, -1 * -1 = 1.\n           *\n           * @method sq\n           * @param  {Number} n number to square\n           * @return {Number}   squared number\n           * @example\n           * <div><code>\n           * function draw() {\n           *   background(200);\n           *   let eSize = 7;\n           *   let x1 = map(mouseX, 0, width, 0, 10);\n           *   let y1 = 80;\n           *   let x2 = sq(x1);\n           *   let y2 = 20;\n           *\n           *   // Draw the non-squared.\n           *   line(0, y1, width, y1);\n           *   ellipse(x1, y1, eSize, eSize);\n           *\n           *   // Draw the squared.\n           *   line(0, y2, width, y2);\n           *   ellipse(x2, y2, eSize, eSize);\n           *\n           *   // Draw dividing line.\n           *   stroke(100);\n           *   line(0, height / 2, width, height / 2);\n           *\n           *   // Draw text.\n           *   let spacing = 15;\n           *   noStroke();\n           *   fill(0);\n           *   text('x = ' + x1, 0, y1 + spacing);\n           *   text('sq(x) = ' + x2, 0, y2 + spacing);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * horizontal center line squared values displayed on top and regular on bottom.\n           *\n           */\n          p5.prototype.sq = function(n) {\n            return n * n;\n          };\n\n          /**\n           * Calculates the square root of a number. The square root of a number is\n           * always positive, even though there may be a valid negative root. The\n           * square root s of number a is such that s*s = a. It is the opposite of\n           * squaring. Maps to Math.sqrt().\n           *\n           * @method sqrt\n           * @param  {Number} n non-negative number to square root\n           * @return {Number}   square root of number\n           * @example\n           * <div><code>\n           * function draw() {\n           *   background(200);\n           *   let eSize = 7;\n           *   let x1 = mouseX;\n           *   let y1 = 80;\n           *   let x2 = sqrt(x1);\n           *   let y2 = 20;\n           *\n           *   // Draw the non-squared.\n           *   line(0, y1, width, y1);\n           *   ellipse(x1, y1, eSize, eSize);\n           *\n           *   // Draw the squared.\n           *   line(0, y2, width, y2);\n           *   ellipse(x2, y2, eSize, eSize);\n           *\n           *   // Draw dividing line.\n           *   stroke(100);\n           *   line(0, height / 2, width, height / 2);\n           *\n           *   // Draw text.\n           *   noStroke();\n           *   fill(0);\n           *   let spacing = 15;\n           *   text('x = ' + x1, 0, y1 + spacing);\n           *   text('sqrt(x) = ' + x2, 0, y2 + spacing);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * horizontal center line squareroot values displayed on top and regular on bottom.\n           *\n           */\n          p5.prototype.sqrt = Math.sqrt;\n\n          // Calculate the length of the hypotenuse of a right triangle\n          // This won't under- or overflow in intermediate steps\n          // https://en.wikipedia.org/wiki/Hypot\n          function hypot(x, y, z) {\n            // Use the native implementation if it's available\n            if (typeof Math.hypot === 'function') {\n              return Math.hypot.apply(null, arguments);\n            }\n\n            // Otherwise use the V8 implementation\n            // https://github.com/v8/v8/blob/8cd3cf297287e581a49e487067f5cbd991b27123/src/js/math.js#L217\n            var length = arguments.length;\n            var args = [];\n            var max = 0;\n            for (var i = 0; i < length; i++) {\n              var n = arguments[i];\n              n = +n;\n              if (n === Infinity || n === -Infinity) {\n                return Infinity;\n              }\n              n = Math.abs(n);\n              if (n > max) {\n                max = n;\n              }\n              args[i] = n;\n            }\n\n            if (max === 0) {\n              max = 1;\n            }\n            var sum = 0;\n            var compensation = 0;\n            for (var j = 0; j < length; j++) {\n              var m = args[j] / max;\n              var summand = m * m - compensation;\n              var preliminary = sum + summand;\n              compensation = preliminary - sum - summand;\n              sum = preliminary;\n            }\n            return Math.sqrt(sum) * max;\n          }\n\n          module.exports = p5;\n        },\n        { '../core/main': 24 }\n      ],\n      53: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Math\n           * @submodule Math\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          /**\n           * Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\n           * two or three dimensional vector, specifically a Euclidean (also known as\n           * geometric) vector. A vector is an entity that has both magnitude and\n           * direction.\n           *\n           * @method createVector\n           * @param {Number} [x] x component of the vector\n           * @param {Number} [y] y component of the vector\n           * @param {Number} [z] z component of the vector\n           * @return {p5.Vector}\n           * @example\n           * <div modernizr='webgl'><code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   noStroke();\n           *   fill(255, 102, 204);\n           * }\n           *\n           * function draw() {\n           *   background(255);\n           *   pointLight(color(255), createVector(sin(millis() / 1000) * 20, -40, -10));\n           *   scale(0.75);\n           *   sphere();\n           * }\n           * </code></div>\n           *\n           * @alt\n           * a purple sphere lit by a point light oscillating horizontally\n           */\n          p5.prototype.createVector = function(x, y, z) {\n            if (this instanceof p5) {\n              return new p5.Vector(this, arguments);\n            } else {\n              return new p5.Vector(x, y, z);\n            }\n          };\n\n          module.exports = p5;\n        },\n        { '../core/main': 24 }\n      ],\n      54: [\n        function(_dereq_, module, exports) {\n          //////////////////////////////////////////////////////////////\n\n          // http://mrl.nyu.edu/~perlin/noise/\n          // Adapting from PApplet.java\n          // which was adapted from toxi\n          // which was adapted from the german demo group farbrausch\n          // as used in their demo \"art\": http://www.farb-rausch.de/fr010src.zip\n\n          // someday we might consider using \"improved noise\"\n          // http://mrl.nyu.edu/~perlin/paper445.pdf\n          // See: https://github.com/shiffman/The-Nature-of-Code-Examples-p5.js/\n          //      blob/master/introduction/Noise1D/noise.js\n\n          /**\n           * @module Math\n           * @submodule Noise\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          var PERLIN_YWRAPB = 4;\n          var PERLIN_YWRAP = 1 << PERLIN_YWRAPB;\n          var PERLIN_ZWRAPB = 8;\n          var PERLIN_ZWRAP = 1 << PERLIN_ZWRAPB;\n          var PERLIN_SIZE = 4095;\n\n          var perlin_octaves = 4; // default to medium smooth\n          var perlin_amp_falloff = 0.5; // 50% reduction/octave\n\n          var scaled_cosine = function scaled_cosine(i) {\n            return 0.5 * (1.0 - Math.cos(i * Math.PI));\n          };\n\n          var perlin; // will be initialized lazily by noise() or noiseSeed()\n\n          /**\n           * Returns the Perlin noise value at specified coordinates. Perlin noise is\n           * a random sequence generator producing a more natural ordered, harmonic\n           * succession of numbers compared to the standard <b>random()</b> function.\n           * It was invented by Ken Perlin in the 1980s and been used since in\n           * graphical applications to produce procedural textures, natural motion,\n           * shapes, terrains etc.<br /><br /> The main difference to the\n           * <b>random()</b> function is that Perlin noise is defined in an infinite\n           * n-dimensional space where each pair of coordinates corresponds to a\n           * fixed semi-random value (fixed only for the lifespan of the program; see\n           * the <a href=\"#/p5/noiseSeed\">noiseSeed()</a> function). p5.js can compute 1D, 2D and 3D noise,\n           * depending on the number of coordinates given. The resulting value will\n           * always be between 0.0 and 1.0. The noise value can be animated by moving\n           * through the noise space as demonstrated in the example above. The 2nd\n           * and 3rd dimension can also be interpreted as time.<br /><br />The actual\n           * noise is structured similar to an audio signal, in respect to the\n           * function's use of frequencies. Similar to the concept of harmonics in\n           * physics, perlin noise is computed over several octaves which are added\n           * together for the final result. <br /><br />Another way to adjust the\n           * character of the resulting sequence is the scale of the input\n           * coordinates. As the function works within an infinite space the value of\n           * the coordinates doesn't matter as such, only the distance between\n           * successive coordinates does (eg. when using <b>noise()</b> within a\n           * loop). As a general rule the smaller the difference between coordinates,\n           * the smoother the resulting noise sequence will be. Steps of 0.005-0.03\n           * work best for most applications, but this will differ depending on use.\n           *\n           *\n           * @method noise\n           * @param  {Number} x   x-coordinate in noise space\n           * @param  {Number} [y] y-coordinate in noise space\n           * @param  {Number} [z] z-coordinate in noise space\n           * @return {Number}     Perlin noise value (between 0 and 1) at specified\n           *                      coordinates\n           * @example\n           * <div>\n           * <code>\n           * let xoff = 0.0;\n           *\n           * function draw() {\n           *   background(204);\n           *   xoff = xoff + 0.01;\n           *   let n = noise(xoff) * width;\n           *   line(n, 0, n, height);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>let noiseScale=0.02;\n           *\n           * function draw() {\n           *   background(0);\n           *   for (let x=0; x < width; x++) {\n           *     let noiseVal = noise((mouseX+x)*noiseScale, mouseY*noiseScale);\n           *     stroke(noiseVal*255);\n           *     line(x, mouseY+noiseVal*80, x, height);\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * vertical line moves left to right with updating noise values.\n           * horizontal wave pattern effected by mouse x-position & updating noise values.\n           *\n           */\n\n          p5.prototype.noise = function(x, y, z) {\n            y = y || 0;\n            z = z || 0;\n\n            if (perlin == null) {\n              perlin = new Array(PERLIN_SIZE + 1);\n              for (var i = 0; i < PERLIN_SIZE + 1; i++) {\n                perlin[i] = Math.random();\n              }\n            }\n\n            if (x < 0) {\n              x = -x;\n            }\n            if (y < 0) {\n              y = -y;\n            }\n            if (z < 0) {\n              z = -z;\n            }\n\n            var xi = Math.floor(x),\n              yi = Math.floor(y),\n              zi = Math.floor(z);\n            var xf = x - xi;\n            var yf = y - yi;\n            var zf = z - zi;\n            var rxf, ryf;\n\n            var r = 0;\n            var ampl = 0.5;\n\n            var n1, n2, n3;\n\n            for (var o = 0; o < perlin_octaves; o++) {\n              var of = xi + (yi << PERLIN_YWRAPB) + (zi << PERLIN_ZWRAPB);\n\n              rxf = scaled_cosine(xf);\n              ryf = scaled_cosine(yf);\n\n              n1 = perlin[of & PERLIN_SIZE];\n              n1 += rxf * (perlin[(of + 1) & PERLIN_SIZE] - n1);\n              n2 = perlin[(of + PERLIN_YWRAP) & PERLIN_SIZE];\n              n2 += rxf * (perlin[(of + PERLIN_YWRAP + 1) & PERLIN_SIZE] - n2);\n              n1 += ryf * (n2 - n1);\n\n              of += PERLIN_ZWRAP;\n              n2 = perlin[of & PERLIN_SIZE];\n              n2 += rxf * (perlin[(of + 1) & PERLIN_SIZE] - n2);\n              n3 = perlin[(of + PERLIN_YWRAP) & PERLIN_SIZE];\n              n3 += rxf * (perlin[(of + PERLIN_YWRAP + 1) & PERLIN_SIZE] - n3);\n              n2 += ryf * (n3 - n2);\n\n              n1 += scaled_cosine(zf) * (n2 - n1);\n\n              r += n1 * ampl;\n              ampl *= perlin_amp_falloff;\n              xi <<= 1;\n              xf *= 2;\n              yi <<= 1;\n              yf *= 2;\n              zi <<= 1;\n              zf *= 2;\n\n              if (xf >= 1.0) {\n                xi++;\n                xf--;\n              }\n              if (yf >= 1.0) {\n                yi++;\n                yf--;\n              }\n              if (zf >= 1.0) {\n                zi++;\n                zf--;\n              }\n            }\n            return r;\n          };\n\n          /**\n           *\n           * Adjusts the character and level of detail produced by the Perlin noise\n           * function. Similar to harmonics in physics, noise is computed over\n           * several octaves. Lower octaves contribute more to the output signal and\n           * as such define the overall intensity of the noise, whereas higher octaves\n           * create finer grained details in the noise sequence.\n           * <br><br>\n           * By default, noise is computed over 4 octaves with each octave contributing\n           * exactly half than its predecessor, starting at 50% strength for the 1st\n           * octave. This falloff amount can be changed by adding an additional function\n           * parameter. Eg. a falloff factor of 0.75 means each octave will now have\n           * 75% impact (25% less) of the previous lower octave. Any value between\n           * 0.0 and 1.0 is valid, however note that values greater than 0.5 might\n           * result in greater than 1.0 values returned by <b>noise()</b>.\n           * <br><br>\n           * By changing these parameters, the signal created by the <b>noise()</b>\n           * function can be adapted to fit very specific needs and characteristics.\n           *\n           * @method noiseDetail\n           * @param {Number} lod number of octaves to be used by the noise\n           * @param {Number} falloff falloff factor for each octave\n           * @example\n           * <div>\n           * <code>\n           * let noiseVal;\n           * let noiseScale = 0.02;\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   for (let y = 0; y < height; y++) {\n           *     for (let x = 0; x < width / 2; x++) {\n           *       noiseDetail(2, 0.2);\n           *       noiseVal = noise((mouseX + x) * noiseScale, (mouseY + y) * noiseScale);\n           *       stroke(noiseVal * 255);\n           *       point(x, y);\n           *       noiseDetail(8, 0.65);\n           *       noiseVal = noise(\n           *         (mouseX + x + width / 2) * noiseScale,\n           *         (mouseY + y) * noiseScale\n           *       );\n           *       stroke(noiseVal * 255);\n           *       point(x + width / 2, y);\n           *     }\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 2 vertical grey smokey patterns affected my mouse x-position and noise.\n           *\n           */\n          p5.prototype.noiseDetail = function(lod, falloff) {\n            if (lod > 0) {\n              perlin_octaves = lod;\n            }\n            if (falloff > 0) {\n              perlin_amp_falloff = falloff;\n            }\n          };\n\n          /**\n           * Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>\n           * produces different results each time the program is run. Set the\n           * <b>value</b> parameter to a constant to return the same pseudo-random\n           * numbers each time the software is run.\n           *\n           * @method noiseSeed\n           * @param {Number} seed   the seed value\n           * @example\n           * <div>\n           * <code>let xoff = 0.0;\n           *\n           * function setup() {\n           *   noiseSeed(99);\n           *   stroke(0, 10);\n           * }\n           *\n           * function draw() {\n           *   xoff = xoff + .01;\n           *   let n = noise(xoff) * width;\n           *   line(n, 0, n, height);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * vertical grey lines drawing in pattern affected by noise.\n           *\n           */\n          p5.prototype.noiseSeed = function(seed) {\n            // Linear Congruential Generator\n            // Variant of a Lehman Generator\n            var lcg = (function() {\n              // Set to values from http://en.wikipedia.org/wiki/Numerical_Recipes\n              // m is basically chosen to be large (as it is the max period)\n              // and for its relationships to a and c\n              var m = 4294967296;\n              // a - 1 should be divisible by m's prime factors\n              var a = 1664525;\n              // c and m should be co-prime\n              var c = 1013904223;\n              var seed, z;\n              return {\n                setSeed: function setSeed(val) {\n                  // pick a random seed if val is undefined or null\n                  // the >>> 0 casts the seed to an unsigned 32-bit integer\n                  z = seed = (val == null ? Math.random() * m : val) >>> 0;\n                },\n                getSeed: function getSeed() {\n                  return seed;\n                },\n                rand: function rand() {\n                  // define the recurrence relationship\n                  z = (a * z + c) % m;\n                  // return a float in [0, 1)\n                  // if z = m then z / m = 0 therefore (z % m) / m < 1 always\n                  return z / m;\n                }\n              };\n            })();\n\n            lcg.setSeed(seed);\n            perlin = new Array(PERLIN_SIZE + 1);\n            for (var i = 0; i < PERLIN_SIZE + 1; i++) {\n              perlin[i] = lcg.rand();\n            }\n          };\n\n          module.exports = p5;\n        },\n        { '../core/main': 24 }\n      ],\n      55: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Math\n           * @submodule Math\n           * @requires constants\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          var constants = _dereq_('../core/constants');\n\n          /**\n           * A class to describe a two or three dimensional vector, specifically\n           * a Euclidean (also known as geometric) vector. A vector is an entity\n           * that has both magnitude and direction. The datatype, however, stores\n           * the components of the vector (x, y for 2D, and x, y, z for 3D). The magnitude\n           * and direction can be accessed via the methods <a href=\"#/p5/mag\">mag()</a> and <a href=\"#/p5/heading\">heading()</a>.\n           * <br><br>\n           * In many of the p5.js examples, you will see <a href=\"#/p5.Vector\">p5.Vector</a> used to describe a\n           * position, velocity, or acceleration. For example, if you consider a rectangle\n           * moving across the screen, at any given instant it has a position (a vector\n           * that points from the origin to its location), a velocity (the rate at which\n           * the object's position changes per time unit, expressed as a vector), and\n           * acceleration (the rate at which the object's velocity changes per time\n           * unit, expressed as a vector).\n           * <br><br>\n           * Since vectors represent groupings of values, we cannot simply use\n           * traditional addition/multiplication/etc. Instead, we'll need to do some\n           * \"vector\" math, which is made easy by the methods inside the <a href=\"#/p5.Vector\">p5.Vector</a> class.\n           *\n           * @class p5.Vector\n           * @param {Number} [x] x component of the vector\n           * @param {Number} [y] y component of the vector\n           * @param {Number} [z] z component of the vector\n           * @example\n           * <div>\n           * <code>\n           * let v1 = createVector(40, 50);\n           * let v2 = createVector(40, 50);\n           *\n           * ellipse(v1.x, v1.y, 50, 50);\n           * ellipse(v2.x, v2.y, 50, 50);\n           * v1.add(v2);\n           * ellipse(v1.x, v1.y, 50, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 2 white ellipses. One center-left the other bottom right and off canvas\n           *\n           */\n          p5.Vector = function Vector() {\n            var x, y, z;\n            // This is how it comes in with createVector()\n            if (arguments[0] instanceof p5) {\n              // save reference to p5 if passed in\n              this.p5 = arguments[0];\n              x = arguments[1][0] || 0;\n              y = arguments[1][1] || 0;\n              z = arguments[1][2] || 0;\n              // This is what we'll get with new p5.Vector()\n            } else {\n              x = arguments[0] || 0;\n              y = arguments[1] || 0;\n              z = arguments[2] || 0;\n            }\n            /**\n             * The x component of the vector\n             * @property x {Number}\n             */\n            this.x = x;\n            /**\n             * The y component of the vector\n             * @property y {Number}\n             */\n            this.y = y;\n            /**\n             * The z component of the vector\n             * @property z {Number}\n             */\n            this.z = z;\n          };\n\n          /**\n           * Returns a string representation of a vector v by calling String(v)\n           * or v.toString(). This method is useful for logging vectors in the\n           * console.\n           * @method  toString\n           * @return {String}\n           * @example\n           * <div class = \"norender\">\n           * <code>\n           * function setup() {\n           *   let v = createVector(20, 30);\n           *   print(String(v)); // prints \"p5.Vector Object : [20, 30, 0]\"\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(0, 0);\n           *   let v1 = createVector(mouseX, mouseY);\n           *   drawArrow(v0, v1, 'black');\n           *\n           *   noStroke();\n           *   text(v1.toString(), 10, 25, 90, 75);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          p5.Vector.prototype.toString = function p5VectorToString() {\n            return 'p5.Vector Object : [' + this.x + ', ' + this.y + ', ' + this.z + ']';\n          };\n\n          /**\n           * Sets the x, y, and z component of the vector using two or three separate\n           * variables, the data from a <a href=\"#/p5.Vector\">p5.Vector</a>, or the values from a float array.\n           * @method set\n           * @param {Number} [x] the x component of the vector\n           * @param {Number} [y] the y component of the vector\n           * @param {Number} [z] the z component of the vector\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let v = createVector(1, 2, 3);\n           *   v.set(4, 5, 6); // Sets vector to [4, 5, 6]\n           *\n           *   let v1 = createVector(0, 0, 0);\n           *   let arr = [1, 2, 3];\n           *   v1.set(arr); // Sets vector to [1, 2, 3]\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let v0, v1;\n           * function setup() {\n           *   createCanvas(100, 100);\n           *\n           *   v0 = createVector(0, 0);\n           *   v1 = createVector(50, 50);\n           * }\n           *\n           * function draw() {\n           *   background(240);\n           *\n           *   drawArrow(v0, v1, 'black');\n           *   v1.set(v1.x + random(-1, 1), v1.y + random(-1, 1));\n           *\n           *   noStroke();\n           *   text('x: ' + round(v1.x) + ' y: ' + round(v1.y), 20, 90);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          /**\n           * @method set\n           * @param {p5.Vector|Number[]} value the vector to set\n           * @chainable\n           */\n          p5.Vector.prototype.set = function set(x, y, z) {\n            if (x instanceof p5.Vector) {\n              this.x = x.x || 0;\n              this.y = x.y || 0;\n              this.z = x.z || 0;\n              return this;\n            }\n            if (x instanceof Array) {\n              this.x = x[0] || 0;\n              this.y = x[1] || 0;\n              this.z = x[2] || 0;\n              return this;\n            }\n            this.x = x || 0;\n            this.y = y || 0;\n            this.z = z || 0;\n            return this;\n          };\n\n          /**\n           * Gets a copy of the vector, returns a <a href=\"#/p5.Vector\">p5.Vector</a> object.\n           *\n           * @method copy\n           * @return {p5.Vector} the copy of the <a href=\"#/p5.Vector\">p5.Vector</a> object\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v1 = createVector(1, 2, 3);\n           * let v2 = v1.copy();\n           * print(v1.x === v2.x && v1.y === v2.y && v1.z === v2.z);\n           * // Prints \"true\"\n           * </code>\n           * </div>\n           */\n          p5.Vector.prototype.copy = function copy() {\n            if (this.p5) {\n              return new p5.Vector(this.p5, [this.x, this.y, this.z]);\n            } else {\n              return new p5.Vector(this.x, this.y, this.z);\n            }\n          };\n\n          /**\n           * Adds x, y, and z components to a vector, adds one vector to another, or\n           * adds two independent vectors together. The version of the method that adds\n           * two vectors together is a static method and returns a <a href=\"#/p5.Vector\">p5.Vector</a>, the others\n           * acts directly on the vector. See the examples for more context.\n           *\n           * @method add\n           * @param  {Number} x   the x component of the vector to be added\n           * @param  {Number} [y] the y component of the vector to be added\n           * @param  {Number} [z] the z component of the vector to be added\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(1, 2, 3);\n           * v.add(4, 5, 6);\n           * // v's components are set to [5, 7, 9]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // Static method\n           * let v1 = createVector(1, 2, 3);\n           * let v2 = createVector(2, 3, 4);\n           *\n           * let v3 = p5.Vector.add(v1, v2);\n           * // v3 has components [3, 5, 7]\n           * print(v3);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // red vector + blue vector = purple vector\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(0, 0);\n           *   let v1 = createVector(mouseX, mouseY);\n           *   drawArrow(v0, v1, 'red');\n           *\n           *   let v2 = createVector(-30, 20);\n           *   drawArrow(v1, v2, 'blue');\n           *\n           *   let v3 = p5.Vector.add(v1, v2);\n           *   drawArrow(v0, v3, 'purple');\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          /**\n           * @method add\n           * @param  {p5.Vector|Number[]} value the vector to add\n           * @chainable\n           */\n          p5.Vector.prototype.add = function add(x, y, z) {\n            if (x instanceof p5.Vector) {\n              this.x += x.x || 0;\n              this.y += x.y || 0;\n              this.z += x.z || 0;\n              return this;\n            }\n            if (x instanceof Array) {\n              this.x += x[0] || 0;\n              this.y += x[1] || 0;\n              this.z += x[2] || 0;\n              return this;\n            }\n            this.x += x || 0;\n            this.y += y || 0;\n            this.z += z || 0;\n            return this;\n          };\n\n          /**\n           * Subtracts x, y, and z components from a vector, subtracts one vector from\n           * another, or subtracts two independent vectors. The version of the method\n           * that subtracts two vectors is a static method and returns a <a href=\"#/p5.Vector\">p5.Vector</a>, the\n           * other acts directly on the vector. See the examples for more context.\n           *\n           * @method sub\n           * @param  {Number} x   the x component of the vector to subtract\n           * @param  {Number} [y] the y component of the vector to subtract\n           * @param  {Number} [z] the z component of the vector to subtract\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(4, 5, 6);\n           * v.sub(1, 1, 1);\n           * // v's components are set to [3, 4, 5]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // Static method\n           * let v1 = createVector(2, 3, 4);\n           * let v2 = createVector(1, 2, 3);\n           *\n           * let v3 = p5.Vector.sub(v1, v2);\n           * // v3 has components [1, 1, 1]\n           * print(v3);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // red vector - blue vector = purple vector\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(0, 0);\n           *   let v1 = createVector(70, 50);\n           *   drawArrow(v0, v1, 'red');\n           *\n           *   let v2 = createVector(mouseX, mouseY);\n           *   drawArrow(v0, v2, 'blue');\n           *\n           *   let v3 = p5.Vector.sub(v1, v2);\n           *   drawArrow(v2, v3, 'purple');\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          /**\n           * @method sub\n           * @param  {p5.Vector|Number[]} value the vector to subtract\n           * @chainable\n           */\n          p5.Vector.prototype.sub = function sub(x, y, z) {\n            if (x instanceof p5.Vector) {\n              this.x -= x.x || 0;\n              this.y -= x.y || 0;\n              this.z -= x.z || 0;\n              return this;\n            }\n            if (x instanceof Array) {\n              this.x -= x[0] || 0;\n              this.y -= x[1] || 0;\n              this.z -= x[2] || 0;\n              return this;\n            }\n            this.x -= x || 0;\n            this.y -= y || 0;\n            this.z -= z || 0;\n            return this;\n          };\n\n          /**\n           * Multiply the vector by a scalar. The static version of this method\n           * creates a new <a href=\"#/p5.Vector\">p5.Vector</a> while the non static version acts on the vector\n           * directly. See the examples for more context.\n           *\n           * @method mult\n           * @param  {Number}    n the number to multiply with the vector\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(1, 2, 3);\n           * v.mult(2);\n           * // v's components are set to [2, 4, 6]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // Static method\n           * let v1 = createVector(1, 2, 3);\n           * let v2 = p5.Vector.mult(v1, 2);\n           * // v2 has components [2, 4, 6]\n           * print(v2);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(50, 50);\n           *   let v1 = createVector(25, -25);\n           *   drawArrow(v0, v1, 'red');\n           *\n           *   let num = map(mouseX, 0, width, -2, 2, true);\n           *   let v2 = p5.Vector.mult(v1, num);\n           *   drawArrow(v0, v2, 'blue');\n           *\n           *   noStroke();\n           *   text('multiplied by ' + num.toFixed(2), 5, 90);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          p5.Vector.prototype.mult = function mult(n) {\n            if (!(typeof n === 'number' && isFinite(n))) {\n              console.warn(\n                'p5.Vector.prototype.mult:',\n                'n is undefined or not a finite number'\n              );\n\n              return this;\n            }\n            this.x *= n;\n            this.y *= n;\n            this.z *= n;\n            return this;\n          };\n\n          /**\n           * Divide the vector by a scalar. The static version of this method creates a\n           * new <a href=\"#/p5.Vector\">p5.Vector</a> while the non static version acts on the vector directly.\n           * See the examples for more context.\n           *\n           * @method div\n           * @param  {number}    n the number to divide the vector by\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(6, 4, 2);\n           * v.div(2); //v's components are set to [3, 2, 1]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // Static method\n           * let v1 = createVector(6, 4, 2);\n           * let v2 = p5.Vector.div(v1, 2);\n           * // v2 has components [3, 2, 1]\n           * print(v2);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(0, 100);\n           *   let v1 = createVector(50, -50);\n           *   drawArrow(v0, v1, 'red');\n           *\n           *   let num = map(mouseX, 0, width, 10, 0.5, true);\n           *   let v2 = p5.Vector.div(v1, num);\n           *   drawArrow(v0, v2, 'blue');\n           *\n           *   noStroke();\n           *   text('divided by ' + num.toFixed(2), 10, 90);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          p5.Vector.prototype.div = function div(n) {\n            if (!(typeof n === 'number' && isFinite(n))) {\n              console.warn(\n                'p5.Vector.prototype.div:',\n                'n is undefined or not a finite number'\n              );\n\n              return this;\n            }\n            if (n === 0) {\n              console.warn('p5.Vector.prototype.div:', 'divide by 0');\n              return this;\n            }\n            this.x /= n;\n            this.y /= n;\n            this.z /= n;\n            return this;\n          };\n\n          /**\n           * Calculates the magnitude (length) of the vector and returns the result as\n           * a float (this is simply the equation sqrt(x*x + y*y + z*z).)\n           *\n           * @method mag\n           * @return {Number} magnitude of the vector\n           * @example\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(0, 0);\n           *   let v1 = createVector(mouseX, mouseY);\n           *   drawArrow(v0, v1, 'black');\n           *\n           *   noStroke();\n           *   text('vector length: ' + v1.mag().toFixed(2), 10, 70, 90, 30);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(20.0, 30.0, 40.0);\n           * let m = v.mag();\n           * print(m); // Prints \"53.85164807134504\"\n           * </code>\n           * </div>\n           */\n          p5.Vector.prototype.mag = function mag() {\n            return Math.sqrt(this.magSq());\n          };\n\n          /**\n           * Calculates the squared magnitude of the vector and returns the result\n           * as a float (this is simply the equation <em>(x*x + y*y + z*z)</em>.)\n           * Faster if the real length is not required in the\n           * case of comparing vectors, etc.\n           *\n           * @method magSq\n           * @return {number} squared magnitude of the vector\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Static method\n           * let v1 = createVector(6, 4, 2);\n           * print(v1.magSq()); // Prints \"56\"\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(0, 0);\n           *   let v1 = createVector(mouseX, mouseY);\n           *   drawArrow(v0, v1, 'black');\n           *\n           *   noStroke();\n           *   text('vector length squared: ' + v1.magSq().toFixed(2), 10, 45, 90, 55);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          p5.Vector.prototype.magSq = function magSq() {\n            var x = this.x;\n            var y = this.y;\n            var z = this.z;\n            return x * x + y * y + z * z;\n          };\n\n          /**\n           * Calculates the dot product of two vectors. The version of the method\n           * that computes the dot product of two independent vectors is a static\n           * method. See the examples for more context.\n           *\n           *\n           * @method dot\n           * @param  {Number} x   x component of the vector\n           * @param  {Number} [y] y component of the vector\n           * @param  {Number} [z] z component of the vector\n           * @return {Number}       the dot product\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v1 = createVector(1, 2, 3);\n           * let v2 = createVector(2, 3, 4);\n           *\n           * print(v1.dot(v2)); // Prints \"20\"\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * //Static method\n           * let v1 = createVector(1, 2, 3);\n           * let v2 = createVector(3, 2, 1);\n           * print(p5.Vector.dot(v1, v2)); // Prints \"10\"\n           * </code>\n           * </div>\n           */\n          /**\n           * @method dot\n           * @param  {p5.Vector} value value component of the vector or a <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @return {Number}\n           */\n          p5.Vector.prototype.dot = function dot(x, y, z) {\n            if (x instanceof p5.Vector) {\n              return this.dot(x.x, x.y, x.z);\n            }\n            return this.x * (x || 0) + this.y * (y || 0) + this.z * (z || 0);\n          };\n\n          /**\n           * Calculates and returns a vector composed of the cross product between\n           * two vectors. Both the static and non static methods return a new <a href=\"#/p5.Vector\">p5.Vector</a>.\n           * See the examples for more context.\n           *\n           * @method cross\n           * @param  {p5.Vector} v <a href=\"#/p5.Vector\">p5.Vector</a> to be crossed\n           * @return {p5.Vector}   <a href=\"#/p5.Vector\">p5.Vector</a> composed of cross product\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v1 = createVector(1, 2, 3);\n           * let v2 = createVector(1, 2, 3);\n           *\n           * v1.cross(v2); // v's components are [0, 0, 0]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // Static method\n           * let v1 = createVector(1, 0, 0);\n           * let v2 = createVector(0, 1, 0);\n           *\n           * let crossProduct = p5.Vector.cross(v1, v2);\n           * // crossProduct has components [0, 0, 1]\n           * print(crossProduct);\n           * </code>\n           * </div>\n           */\n          p5.Vector.prototype.cross = function cross(v) {\n            var x = this.y * v.z - this.z * v.y;\n            var y = this.z * v.x - this.x * v.z;\n            var z = this.x * v.y - this.y * v.x;\n            if (this.p5) {\n              return new p5.Vector(this.p5, [x, y, z]);\n            } else {\n              return new p5.Vector(x, y, z);\n            }\n          };\n\n          /**\n           * Calculates the Euclidean distance between two points (considering a\n           * point as a vector object).\n           *\n           * @method dist\n           * @param  {p5.Vector} v the x, y, and z coordinates of a <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @return {Number}      the distance\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v1 = createVector(1, 0, 0);\n           * let v2 = createVector(0, 1, 0);\n           *\n           * let distance = v1.dist(v2); // distance is 1.4142...\n           * print(distance);\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // Static method\n           * let v1 = createVector(1, 0, 0);\n           * let v2 = createVector(0, 1, 0);\n           *\n           * let distance = p5.Vector.dist(v1, v2);\n           * // distance is 1.4142...\n           * print(distance);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(0, 0);\n           *\n           *   let v1 = createVector(70, 50);\n           *   drawArrow(v0, v1, 'red');\n           *\n           *   let v2 = createVector(mouseX, mouseY);\n           *   drawArrow(v0, v2, 'blue');\n           *\n           *   noStroke();\n           *   text('distance between vectors: ' + v2.dist(v1).toFixed(2), 5, 50, 95, 50);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          p5.Vector.prototype.dist = function dist(v) {\n            return v\n              .copy()\n              .sub(this)\n              .mag();\n          };\n\n          /**\n           * Normalize the vector to length 1 (make it a unit vector).\n           *\n           * @method normalize\n           * @return {p5.Vector} normalized <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(10, 20, 2);\n           * // v has components [10.0, 20.0, 2.0]\n           * v.normalize();\n           * // v's components are set to\n           * // [0.4454354, 0.8908708, 0.089087084]\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(50, 50);\n           *   let v1 = createVector(mouseX - 50, mouseY - 50);\n           *\n           *   drawArrow(v0, v1, 'red');\n           *   v1.normalize();\n           *   drawArrow(v0, v1.mult(35), 'blue');\n           *\n           *   noFill();\n           *   ellipse(50, 50, 35 * 2);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          p5.Vector.prototype.normalize = function normalize() {\n            var len = this.mag();\n            // here we multiply by the reciprocal instead of calling 'div()'\n            // since div duplicates this zero check.\n            if (len !== 0) this.mult(1 / len);\n            return this;\n          };\n\n          /**\n           * Limit the magnitude of this vector to the value used for the <b>max</b>\n           * parameter.\n           *\n           * @method limit\n           * @param  {Number}    max the maximum magnitude for the vector\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(10, 20, 2);\n           * // v has components [10.0, 20.0, 2.0]\n           * v.limit(5);\n           * // v's components are set to\n           * // [2.2271771, 4.4543543, 0.4454354]\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(50, 50);\n           *   let v1 = createVector(mouseX - 50, mouseY - 50);\n           *\n           *   drawArrow(v0, v1, 'red');\n           *   drawArrow(v0, v1.limit(35), 'blue');\n           *\n           *   noFill();\n           *   ellipse(50, 50, 35 * 2);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          p5.Vector.prototype.limit = function limit(max) {\n            var mSq = this.magSq();\n            if (mSq > max * max) {\n              this.div(Math.sqrt(mSq)) //normalize it\n                .mult(max);\n            }\n            return this;\n          };\n\n          /**\n           * Set the magnitude of this vector to the value used for the <b>len</b>\n           * parameter.\n           *\n           * @method setMag\n           * @param  {number}    len the new length for this vector\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(10, 20, 2);\n           * // v has components [10.0, 20.0, 2.0]\n           * v.setMag(10);\n           * // v's components are set to [6.0, 8.0, 0.0]\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(0, 0);\n           *   let v1 = createVector(50, 50);\n           *\n           *   drawArrow(v0, v1, 'red');\n           *\n           *   let length = map(mouseX, 0, width, 0, 141, true);\n           *   v1.setMag(length);\n           *   drawArrow(v0, v1, 'blue');\n           *\n           *   noStroke();\n           *   text('magnitude set to: ' + length.toFixed(2), 10, 70, 90, 30);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          p5.Vector.prototype.setMag = function setMag(n) {\n            return this.normalize().mult(n);\n          };\n\n          /**\n           * Calculate the angle of rotation for this vector (only 2D vectors)\n           *\n           * @method heading\n           * @return {Number} the angle of rotation\n           * @example\n           * <div class = \"norender\">\n           * <code>\n           * function setup() {\n           *   let v1 = createVector(30, 50);\n           *   print(v1.heading()); // 1.0303768265243125\n           *\n           *   v1 = createVector(40, 50);\n           *   print(v1.heading()); // 0.8960553845713439\n           *\n           *   v1 = createVector(30, 70);\n           *   print(v1.heading()); // 1.1659045405098132\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(50, 50);\n           *   let v1 = createVector(mouseX - 50, mouseY - 50);\n           *\n           *   drawArrow(v0, v1, 'black');\n           *\n           *   let myHeading = v1.heading();\n           *   noStroke();\n           *   text(\n           *     'vector heading: ' +\n           *       myHeading.toFixed(2) +\n           *       ' radians or ' +\n           *       degrees(myHeading).toFixed(2) +\n           *       ' degrees',\n           *     10,\n           *     50,\n           *     90,\n           *     50\n           *   );\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          p5.Vector.prototype.heading = function heading() {\n            var h = Math.atan2(this.y, this.x);\n            if (this.p5) return this.p5._fromRadians(h);\n            return h;\n          };\n\n          /**\n           * Rotate the vector by an angle (only 2D vectors), magnitude remains the\n           * same\n           *\n           * @method rotate\n           * @param  {number}    angle the angle of rotation\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(10.0, 20.0);\n           * // v has components [10.0, 20.0, 0.0]\n           * v.rotate(HALF_PI);\n           * // v's components are set to [-20.0, 9.999999, 0.0]\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let angle = 0;\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(50, 50);\n           *   let v1 = createVector(50, 0);\n           *\n           *   drawArrow(v0, v1.rotate(angle), 'black');\n           *   angle += 0.01;\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          p5.Vector.prototype.rotate = function rotate(a) {\n            var newHeading = this.heading() + a;\n            if (this.p5) newHeading = this.p5._toRadians(newHeading);\n            var mag = this.mag();\n            this.x = Math.cos(newHeading) * mag;\n            this.y = Math.sin(newHeading) * mag;\n            return this;\n          };\n\n          /**\n           * Calculates and returns the angle (in radians) between two vectors.\n           * @method angleBetween\n           * @param  {p5.Vector}    value the x, y, and z components of a <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @return {Number}       the angle between (in radians)\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v1 = createVector(1, 0, 0);\n           * let v2 = createVector(0, 1, 0);\n           *\n           * let angle = v1.angleBetween(v2);\n           * // angle is PI/2\n           * print(angle);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *   let v0 = createVector(50, 50);\n           *\n           *   let v1 = createVector(50, 0);\n           *   drawArrow(v0, v1, 'red');\n           *\n           *   let v2 = createVector(mouseX - 50, mouseY - 50);\n           *   drawArrow(v0, v2, 'blue');\n           *\n           *   let angleBetween = v1.angleBetween(v2);\n           *   noStroke();\n           *   text(\n           *     'angle between: ' +\n           *       angleBetween.toFixed(2) +\n           *       ' radians or ' +\n           *       degrees(angleBetween).toFixed(2) +\n           *       ' degrees',\n           *     10,\n           *     50,\n           *     90,\n           *     50\n           *   );\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          p5.Vector.prototype.angleBetween = function angleBetween(v) {\n            var dotmagmag = this.dot(v) / (this.mag() * v.mag());\n            // Mathematically speaking: the dotmagmag variable will be between -1 and 1\n            // inclusive. Practically though it could be slightly outside this range due\n            // to floating-point rounding issues. This can make Math.acos return NaN.\n            //\n            // Solution: we'll clamp the value to the -1,1 range\n            var angle = Math.acos(Math.min(1, Math.max(-1, dotmagmag)));\n            if (this.p5) return this.p5._fromRadians(angle);\n            return angle;\n          };\n\n          /**\n           * Linear interpolate the vector to another vector\n           *\n           * @method lerp\n           * @param  {Number}    x   the x component\n           * @param  {Number}    y   the y component\n           * @param  {Number}    z   the z component\n           * @param  {Number}    amt the amount of interpolation; some value between 0.0\n           *                         (old vector) and 1.0 (new vector). 0.9 is very near\n           *                         the new vector. 0.5 is halfway in between.\n           * @chainable\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(1, 1, 0);\n           *\n           * v.lerp(3, 3, 0, 0.5); // v now has components [2,2,0]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * let v1 = createVector(0, 0, 0);\n           * let v2 = createVector(100, 100, 0);\n           *\n           * let v3 = p5.Vector.lerp(v1, v2, 0.5);\n           * // v3 has components [50,50,0]\n           * print(v3);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let step = 0.01;\n           * let amount = 0;\n           *\n           * function draw() {\n           *   background(240);\n           *   let v0 = createVector(0, 0);\n           *\n           *   let v1 = createVector(mouseX, mouseY);\n           *   drawArrow(v0, v1, 'red');\n           *\n           *   let v2 = createVector(90, 90);\n           *   drawArrow(v0, v2, 'blue');\n           *\n           *   if (amount > 1 || amount < 0) {\n           *     step *= -1;\n           *   }\n           *   amount += step;\n           *   let v3 = p5.Vector.lerp(v1, v2, amount);\n           *\n           *   drawArrow(v0, v3, 'purple');\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          /**\n           * @method lerp\n           * @param  {p5.Vector} v   the <a href=\"#/p5.Vector\">p5.Vector</a> to lerp to\n           * @param  {Number}    amt\n           * @chainable\n           */\n          p5.Vector.prototype.lerp = function lerp(x, y, z, amt) {\n            if (x instanceof p5.Vector) {\n              return this.lerp(x.x, x.y, x.z, y);\n            }\n            this.x += (x - this.x) * amt || 0;\n            this.y += (y - this.y) * amt || 0;\n            this.z += (z - this.z) * amt || 0;\n            return this;\n          };\n\n          /**\n           * Return a representation of this vector as a float array. This is only\n           * for temporary use. If used in any other fashion, the contents should be\n           * copied by using the <b>p5.Vector.<a href=\"#/p5.Vector/copy\">copy()</a></b> method to copy into your own\n           * array.\n           *\n           * @method array\n           * @return {Number[]} an Array with the 3 values\n           * @example\n           * <div class = \"norender\">\n           * <code>\n           * function setup() {\n           *   let v = createVector(20, 30);\n           *   print(v.array()); // Prints : Array [20, 30, 0]\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(10.0, 20.0, 30.0);\n           * let f = v.array();\n           * print(f[0]); // Prints \"10.0\"\n           * print(f[1]); // Prints \"20.0\"\n           * print(f[2]); // Prints \"30.0\"\n           * </code>\n           * </div>\n           */\n          p5.Vector.prototype.array = function array() {\n            return [this.x || 0, this.y || 0, this.z || 0];\n          };\n\n          /**\n           * Equality check against a <a href=\"#/p5.Vector\">p5.Vector</a>\n           *\n           * @method equals\n           * @param {Number} [x] the x component of the vector\n           * @param {Number} [y] the y component of the vector\n           * @param {Number} [z] the z component of the vector\n           * @return {Boolean} whether the vectors are equals\n           * @example\n           * <div class = \"norender\">\n           * <code>\n           * let v1 = createVector(5, 10, 20);\n           * let v2 = createVector(5, 10, 20);\n           * let v3 = createVector(13, 10, 19);\n           *\n           * print(v1.equals(v2.x, v2.y, v2.z)); // true\n           * print(v1.equals(v3.x, v3.y, v3.z)); // false\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * let v1 = createVector(10.0, 20.0, 30.0);\n           * let v2 = createVector(10.0, 20.0, 30.0);\n           * let v3 = createVector(0.0, 0.0, 0.0);\n           * print(v1.equals(v2)); // true\n           * print(v1.equals(v3)); // false\n           * </code>\n           * </div>\n           */\n          /**\n           * @method equals\n           * @param {p5.Vector|Array} value the vector to compare\n           * @return {Boolean}\n           */\n          p5.Vector.prototype.equals = function equals(x, y, z) {\n            var a, b, c;\n            if (x instanceof p5.Vector) {\n              a = x.x || 0;\n              b = x.y || 0;\n              c = x.z || 0;\n            } else if (x instanceof Array) {\n              a = x[0] || 0;\n              b = x[1] || 0;\n              c = x[2] || 0;\n            } else {\n              a = x || 0;\n              b = y || 0;\n              c = z || 0;\n            }\n            return this.x === a && this.y === b && this.z === c;\n          };\n\n          // Static Methods\n\n          /**\n           * Make a new 2D vector from an angle\n           *\n           * @method fromAngle\n           * @static\n           * @param {Number}     angle the desired angle, in radians (unaffected by <a href=\"#/p5/angleMode\">angleMode</a>)\n           * @param {Number}     [length] the length of the new vector (defaults to 1)\n           * @return {p5.Vector}       the new <a href=\"#/p5.Vector\">p5.Vector</a> object\n           * @example\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(200);\n           *\n           *   // Create a variable, proportional to the mouseX,\n           *   // varying from 0-360, to represent an angle in degrees.\n           *   let myDegrees = map(mouseX, 0, width, 0, 360);\n           *\n           *   // Display that variable in an onscreen text.\n           *   // (Note the nfc() function to truncate additional decimal places,\n           *   // and the \"\\xB0\" character for the degree symbol.)\n           *   let readout = 'angle = ' + nfc(myDegrees, 1) + '\\xB0';\n           *   noStroke();\n           *   fill(0);\n           *   text(readout, 5, 15);\n           *\n           *   // Create a p5.Vector using the fromAngle function,\n           *   // and extract its x and y components.\n           *   let v = p5.Vector.fromAngle(radians(myDegrees), 30);\n           *   let vx = v.x;\n           *   let vy = v.y;\n           *\n           *   push();\n           *   translate(width / 2, height / 2);\n           *   noFill();\n           *   stroke(150);\n           *   line(0, 0, 30, 0);\n           *   stroke(0);\n           *   line(0, 0, vx, vy);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          p5.Vector.fromAngle = function fromAngle(angle, length) {\n            if (typeof length === 'undefined') {\n              length = 1;\n            }\n            return new p5.Vector(length * Math.cos(angle), length * Math.sin(angle), 0);\n          };\n\n          /**\n           * Make a new 3D vector from a pair of ISO spherical angles\n           *\n           * @method fromAngles\n           * @static\n           * @param {Number}     theta    the polar angle, in radians (zero is up)\n           * @param {Number}     phi      the azimuthal angle, in radians\n           *                               (zero is out of the screen)\n           * @param {Number}     [length] the length of the new vector (defaults to 1)\n           * @return {p5.Vector}          the new <a href=\"#/p5.Vector\">p5.Vector</a> object\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   fill(255);\n           *   noStroke();\n           * }\n           * function draw() {\n           *   background(255);\n           *\n           *   let t = millis() / 1000;\n           *\n           *   // add three point lights\n           *   pointLight(color('#f00'), p5.Vector.fromAngles(t * 1.0, t * 1.3, 100));\n           *   pointLight(color('#0f0'), p5.Vector.fromAngles(t * 1.1, t * 1.2, 100));\n           *   pointLight(color('#00f'), p5.Vector.fromAngles(t * 1.2, t * 1.1, 100));\n           *\n           *   sphere(35);\n           * }\n           * </code>\n           * </div>\n           */\n          p5.Vector.fromAngles = function(theta, phi, length) {\n            if (typeof length === 'undefined') {\n              length = 1;\n            }\n            var cosPhi = Math.cos(phi);\n            var sinPhi = Math.sin(phi);\n            var cosTheta = Math.cos(theta);\n            var sinTheta = Math.sin(theta);\n\n            return new p5.Vector(\n              length * sinTheta * sinPhi,\n              -length * cosTheta,\n              length * sinTheta * cosPhi\n            );\n          };\n\n          /**\n           * Make a new 2D unit vector from a random angle\n           *\n           * @method random2D\n           * @static\n           * @return {p5.Vector} the new <a href=\"#/p5.Vector\">p5.Vector</a> object\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = p5.Vector.random2D();\n           * // May make v's attributes something like:\n           * // [0.61554617, -0.51195765, 0.0] or\n           * // [-0.4695841, -0.14366731, 0.0] or\n           * // [0.6091097, -0.22805278, 0.0]\n           * print(v);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function setup() {\n           *   frameRate(1);\n           * }\n           *\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(50, 50);\n           *   let v1 = p5.Vector.random2D();\n           *   drawArrow(v0, v1.mult(50), 'black');\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          p5.Vector.random2D = function random2D() {\n            return this.fromAngle(Math.random() * constants.TWO_PI);\n          };\n\n          /**\n           * Make a new random 3D unit vector.\n           *\n           * @method random3D\n           * @static\n           * @return {p5.Vector} the new <a href=\"#/p5.Vector\">p5.Vector</a> object\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = p5.Vector.random3D();\n           * // May make v's attributes something like:\n           * // [0.61554617, -0.51195765, 0.599168] or\n           * // [-0.4695841, -0.14366731, -0.8711202] or\n           * // [0.6091097, -0.22805278, -0.7595902]\n           * print(v);\n           * </code>\n           * </div>\n           */\n          p5.Vector.random3D = function random3D() {\n            var angle = Math.random() * constants.TWO_PI;\n            var vz = Math.random() * 2 - 1;\n            var vzBase = Math.sqrt(1 - vz * vz);\n            var vx = vzBase * Math.cos(angle);\n            var vy = vzBase * Math.sin(angle);\n            return new p5.Vector(vx, vy, vz);\n          };\n\n          // Adds two vectors together and returns a new one.\n          /**\n           * @method add\n           * @static\n           * @param  {p5.Vector} v1 a <a href=\"#/p5.Vector\">p5.Vector</a> to add\n           * @param  {p5.Vector} v2 a <a href=\"#/p5.Vector\">p5.Vector</a> to add\n           * @param  {p5.Vector} target the vector to receive the result\n           */\n          /**\n           * @method add\n           * @static\n           * @param  {p5.Vector} v1\n           * @param  {p5.Vector} v2\n           * @return {p5.Vector} the resulting <a href=\"#/p5.Vector\">p5.Vector</a>\n           *\n           */\n\n          p5.Vector.add = function add(v1, v2, target) {\n            if (!target) {\n              target = v1.copy();\n            } else {\n              target.set(v1);\n            }\n            target.add(v2);\n            return target;\n          };\n\n          /*\n    * Subtracts one <a href=\"#/p5.Vector\">p5.Vector</a> from another and returns a new one.  The second\n    * vector (v2) is subtracted from the first (v1), resulting in v1-v2.\n    */\n          /**\n           * @method sub\n           * @static\n           * @param  {p5.Vector} v1 a <a href=\"#/p5.Vector\">p5.Vector</a> to subtract from\n           * @param  {p5.Vector} v2 a <a href=\"#/p5.Vector\">p5.Vector</a> to subtract\n           * @param  {p5.Vector} target if undefined a new vector will be created\n           */\n          /**\n           * @method sub\n           * @static\n           * @param  {p5.Vector} v1\n           * @param  {p5.Vector} v2\n           * @return {p5.Vector} the resulting <a href=\"#/p5.Vector\">p5.Vector</a>\n           */\n\n          p5.Vector.sub = function sub(v1, v2, target) {\n            if (!target) {\n              target = v1.copy();\n            } else {\n              target.set(v1);\n            }\n            target.sub(v2);\n            return target;\n          };\n\n          /**\n           * Multiplies a vector by a scalar and returns a new vector.\n           */\n          /**\n           * @method mult\n           * @static\n           * @param  {p5.Vector} v the vector to multiply\n           * @param  {Number}  n\n           * @param  {p5.Vector} target if undefined a new vector will be created\n           */\n          /**\n           * @method mult\n           * @static\n           * @param  {p5.Vector} v\n           * @param  {Number}  n\n           * @return {p5.Vector}  the resulting new <a href=\"#/p5.Vector\">p5.Vector</a>\n           */\n          p5.Vector.mult = function mult(v, n, target) {\n            if (!target) {\n              target = v.copy();\n            } else {\n              target.set(v);\n            }\n            target.mult(n);\n            return target;\n          };\n\n          /**\n           * Divides a vector by a scalar and returns a new vector.\n           */\n          /**\n           * @method div\n           * @static\n           * @param  {p5.Vector} v the vector to divide\n           * @param  {Number}  n\n           * @param  {p5.Vector} target if undefined a new vector will be created\n           */\n          /**\n           * @method div\n           * @static\n           * @param  {p5.Vector} v\n           * @param  {Number}  n\n           * @return {p5.Vector} the resulting new <a href=\"#/p5.Vector\">p5.Vector</a>\n           */\n          p5.Vector.div = function div(v, n, target) {\n            if (!target) {\n              target = v.copy();\n            } else {\n              target.set(v);\n            }\n            target.div(n);\n            return target;\n          };\n\n          /**\n           * Calculates the dot product of two vectors.\n           */\n          /**\n           * @method dot\n           * @static\n           * @param  {p5.Vector} v1 the first <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @param  {p5.Vector} v2 the second <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @return {Number}     the dot product\n           */\n          p5.Vector.dot = function dot(v1, v2) {\n            return v1.dot(v2);\n          };\n\n          /**\n           * Calculates the cross product of two vectors.\n           */\n          /**\n           * @method cross\n           * @static\n           * @param  {p5.Vector} v1 the first <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @param  {p5.Vector} v2 the second <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @return {Number}     the cross product\n           */\n          p5.Vector.cross = function cross(v1, v2) {\n            return v1.cross(v2);\n          };\n\n          /**\n           * Calculates the Euclidean distance between two points (considering a\n           * point as a vector object).\n           */\n          /**\n           * @method dist\n           * @static\n           * @param  {p5.Vector} v1 the first <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @param  {p5.Vector} v2 the second <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @return {Number}     the distance\n           */\n          p5.Vector.dist = function dist(v1, v2) {\n            return v1.dist(v2);\n          };\n\n          /**\n           * Linear interpolate a vector to another vector and return the result as a\n           * new vector.\n           */\n          /**\n           * @method lerp\n           * @static\n           * @param {p5.Vector} v1\n           * @param {p5.Vector} v2\n           * @param {Number} amt\n           * @param {p5.Vector} target if undefined a new vector will be created\n           */\n          /**\n           * @method lerp\n           * @static\n           * @param {p5.Vector} v1\n           * @param {p5.Vector} v2\n           * @param {Number} amt\n           * @return {Number}      the lerped value\n           */\n          p5.Vector.lerp = function lerp(v1, v2, amt, target) {\n            if (!target) {\n              target = v1.copy();\n            } else {\n              target.set(v1);\n            }\n            target.lerp(v2, amt);\n            return target;\n          };\n\n          /**\n           * @method mag\n           * @param {p5.Vector} vecT the vector to return the magnitude of\n           * @return {Number}        the magnitude of vecT\n           * @static\n           */\n          p5.Vector.mag = function mag(vecT) {\n            var x = vecT.x,\n              y = vecT.y,\n              z = vecT.z;\n            var magSq = x * x + y * y + z * z;\n            return Math.sqrt(magSq);\n          };\n\n          module.exports = p5.Vector;\n        },\n        { '../core/constants': 18, '../core/main': 24 }\n      ],\n      56: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Math\n           * @submodule Random\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          var seeded = false;\n          var previous = false;\n          var y2 = 0;\n\n          // Linear Congruential Generator\n          // Variant of a Lehman Generator\n          var lcg = (function() {\n            // Set to values from glibc(useb by GCC) (https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use)\n            // m is basically chosen to be large (as it is the max period)\n            // and for its relationships to a and c\n            var m = 2147483647,\n              // a - 1 should be divisible by m's prime factors\n              a = 1103515245,\n              // c and m should be co-prime\n              c = 12345,\n              seed,\n              z;\n            return {\n              setSeed: function setSeed(val) {\n                // pick a random seed if val is undefined or null\n                // the >>> 0 casts the seed to an unsigned 32-bit integer\n                z = seed = (val == null ? Math.random() * m : val) >>> 0;\n              },\n              getSeed: function getSeed() {\n                return seed;\n              },\n              rand: function rand() {\n                // define the recurrence relationship\n                z = (a * z + c) % m;\n                // return a float in [0, 1)\n                // if z = m then z / m = 0 therefore (z % m) / m < 1 always\n                return z / m;\n              }\n            };\n          })();\n\n          /**\n           * Sets the seed value for <a href=\"#/p5/random\">random()</a>.\n           *\n           * By default, <a href=\"#/p5/random\">random()</a> produces different results each time the program\n           * is run. Set the seed parameter to a constant to return the same\n           * pseudo-random numbers each time the software is run.\n           *\n           * @method randomSeed\n           * @param {Number} seed   the seed value\n           * @example\n           * <div>\n           * <code>\n           * randomSeed(99);\n           * for (let i = 0; i < 100; i++) {\n           *   let r = random(0, 255);\n           *   stroke(r);\n           *   line(i, 0, i, 100);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * many vertical lines drawn in white, black or grey.\n           *\n           */\n          p5.prototype.randomSeed = function(seed) {\n            lcg.setSeed(seed);\n            seeded = true;\n            previous = false;\n          };\n\n          /**\n           * Return a random floating-point number.\n           *\n           * Takes either 0, 1 or 2 arguments.\n           *\n           * If no argument is given, returns a random number from 0\n           * up to (but not including) 1.\n           *\n           * If one argument is given and it is a number, returns a random number from 0\n           * up to (but not including) the number.\n           *\n           * If one argument is given and it is an array, returns a random element from\n           * that array.\n           *\n           * If two arguments are given, returns a random number from the\n           * first argument up to (but not including) the second argument.\n           *\n           * @method random\n           * @param  {Number} [min]   the lower bound (inclusive)\n           * @param  {Number} [max]   the upper bound (exclusive)\n           * @return {Number} the random number\n           * @example\n           * <div>\n           * <code>\n           * for (let i = 0; i < 100; i++) {\n           *   let r = random(50);\n           *   stroke(r * 5);\n           *   line(50, i, 50 + r, i);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * for (let i = 0; i < 100; i++) {\n           *   let r = random(-50, 50);\n           *   line(50, i, 50 + r, i);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * // Get a random element from an array using the random(Array) syntax\n           * let words = ['apple', 'bear', 'cat', 'dog'];\n           * let word = random(words); // select random word\n           * text(word, 10, 50); // draw the word\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 100 horizontal lines from center canvas to right. size+fill change each time\n           * 100 horizontal lines from center of canvas. height & side change each render\n           * word displayed at random. Either apple, bear, cat, or dog\n           *\n           */\n          /**\n           * @method random\n           * @param  {Array} choices   the array to choose from\n           * @return {*} the random element from the array\n           * @example\n           */\n          p5.prototype.random = function(min, max) {\n            var rand;\n\n            if (seeded) {\n              rand = lcg.rand();\n            } else {\n              rand = Math.random();\n            }\n            if (typeof min === 'undefined') {\n              return rand;\n            } else if (typeof max === 'undefined') {\n              if (min instanceof Array) {\n                return min[Math.floor(rand * min.length)];\n              } else {\n                return rand * min;\n              }\n            } else {\n              if (min > max) {\n                var tmp = min;\n                min = max;\n                max = tmp;\n              }\n\n              return rand * (max - min) + min;\n            }\n          };\n\n          /**\n           *\n           * Returns a random number fitting a Gaussian, or\n           * normal, distribution. There is theoretically no minimum or maximum\n           * value that <a href=\"#/p5/randomGaussian\">randomGaussian()</a> might return. Rather, there is\n           * just a very low probability that values far from the mean will be\n           * returned; and a higher probability that numbers near the mean will\n           * be returned.\n           * <br><br>\n           * Takes either 0, 1 or 2 arguments.<br>\n           * If no args, returns a mean of 0 and standard deviation of 1.<br>\n           * If one arg, that arg is the mean (standard deviation is 1).<br>\n           * If two args, first is mean, second is standard deviation.\n           *\n           * @method randomGaussian\n           * @param  {Number} mean  the mean\n           * @param  {Number} sd    the standard deviation\n           * @return {Number} the random number\n           * @example\n           * <div>\n           * <code>\n           * for (let y = 0; y < 100; y++) {\n           *   let x = randomGaussian(50, 15);\n           *   line(50, y, x, y);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * let distribution = new Array(360);\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   for (let i = 0; i < distribution.length; i++) {\n           *     distribution[i] = floor(randomGaussian(0, 15));\n           *   }\n           * }\n           *\n           * function draw() {\n           *   background(204);\n           *\n           *   translate(width / 2, width / 2);\n           *\n           *   for (let i = 0; i < distribution.length; i++) {\n           *     rotate(TWO_PI / distribution.length);\n           *     stroke(0);\n           *     let dist = abs(distribution[i]);\n           *     line(0, 0, dist, 0);\n           *   }\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * 100 horizontal lines from center of canvas. height & side change each render\n           * black lines radiate from center of canvas. size determined each render\n           */\n          p5.prototype.randomGaussian = function(mean, sd) {\n            var y1, x1, x2, w;\n            if (previous) {\n              y1 = y2;\n              previous = false;\n            } else {\n              do {\n                x1 = this.random(2) - 1;\n                x2 = this.random(2) - 1;\n                w = x1 * x1 + x2 * x2;\n              } while (w >= 1);\n              w = Math.sqrt(-2 * Math.log(w) / w);\n              y1 = x1 * w;\n              y2 = x2 * w;\n              previous = true;\n            }\n\n            var m = mean || 0;\n            var s = sd || 1;\n            return y1 * s + m;\n          };\n\n          module.exports = p5;\n        },\n        { '../core/main': 24 }\n      ],\n      57: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Math\n           * @submodule Trigonometry\n           * @for p5\n           * @requires core\n           * @requires constants\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          var constants = _dereq_('../core/constants');\n\n          /*\n                                               * all DEGREES/RADIANS conversion should be done in the p5 instance\n                                               * if possible, using the p5._toRadians(), p5._fromRadians() methods.\n                                               */\n          p5.prototype._angleMode = constants.RADIANS;\n\n          /**\n           * The inverse of <a href=\"#/p5/cos\">cos()</a>, returns the arc cosine of a value. This function\n           * expects the values in the range of -1 to 1 and values are returned in\n           * the range 0 to PI (3.1415927).\n           *\n           * @method acos\n           * @param  {Number} value the value whose arc cosine is to be returned\n           * @return {Number}       the arc cosine of the given value\n           *\n           * @example\n           * <div class= “norender\">\n           * <code>\n           * let a = PI;\n           * let c = cos(a);\n           * let ac = acos(c);\n           * // Prints: \"3.1415927 : -1.0 : 3.1415927\"\n           * print(a + ' : ' + c + ' : ' + ac);\n           * </code>\n           * </div>\n           *\n           * <div class= “norender\">\n           * <code>\n           * let a = PI + PI / 4.0;\n           * let c = cos(a);\n           * let ac = acos(c);\n           * // Prints: \"3.926991 : -0.70710665 : 2.3561943\"\n           * print(a + ' : ' + c + ' : ' + ac);\n           * </code>\n           * </div>\n           */\n          p5.prototype.acos = function(ratio) {\n            return this._fromRadians(Math.acos(ratio));\n          };\n\n          /**\n           * The inverse of <a href=\"#/p5/sin\">sin()</a>, returns the arc sine of a value. This function\n           * expects the values in the range of -1 to 1 and values are returned\n           * in the range -PI/2 to PI/2.\n           *\n           * @method asin\n           * @param  {Number} value the value whose arc sine is to be returned\n           * @return {Number}       the arc sine of the given value\n           *\n           * @example\n           * <div class= “norender\">\n           * <code>\n           * let a = PI + PI / 3;\n           * let s = sin(a);\n           * let as = asin(s);\n           * // Prints: \"1.0471976 : 0.86602545 : 1.0471976\"\n           * print(a + ' : ' + s + ' : ' + as);\n           * </code>\n           * </div>\n           *\n           * <div class= “norender\">\n           * <code>\n           * let a = PI + PI / 3.0;\n           * let s = sin(a);\n           * let as = asin(s);\n           * // Prints: \"4.1887903 : -0.86602545 : -1.0471976\"\n           * print(a + ' : ' + s + ' : ' + as);\n           * </code>\n           * </div>\n           *\n           */\n          p5.prototype.asin = function(ratio) {\n            return this._fromRadians(Math.asin(ratio));\n          };\n\n          /**\n           * The inverse of <a href=\"#/p5/tan\">tan()</a>, returns the arc tangent of a value. This function\n           * expects the values in the range of -Infinity to Infinity (exclusive) and\n           * values are returned in the range -PI/2 to PI/2.\n           *\n           * @method atan\n           * @param  {Number} value the value whose arc tangent is to be returned\n           * @return {Number}       the arc tangent of the given value\n           *\n           * @example\n           * <div class= “norender\">\n           * <code>\n           * let a = PI + PI / 3;\n           * let t = tan(a);\n           * let at = atan(t);\n           * // Prints: \"1.0471976 : 1.7320509 : 1.0471976\"\n           * print(a + ' : ' + t + ' : ' + at);\n           * </code>\n           * </div>\n           *\n           * <div class= “norender\">\n           * <code>\n           * let a = PI + PI / 3.0;\n           * let t = tan(a);\n           * let at = atan(t);\n           * // Prints: \"4.1887903 : 1.7320513 : 1.0471977\"\n           * print(a + ' : ' + t + ' : ' + at);\n           * </code>\n           * </div>\n           *\n           */\n          p5.prototype.atan = function(ratio) {\n            return this._fromRadians(Math.atan(ratio));\n          };\n\n          /**\n           * Calculates the angle (in radians) from a specified point to the coordinate\n           * origin as measured from the positive x-axis. Values are returned as a\n           * float in the range from PI to -PI. The atan2<a href=\"#/p5/\">()</a> function is most often used\n           * for orienting geometry to the position of the cursor.\n           * <br><br>\n           * Note: The y-coordinate of the point is the first parameter, and the\n           * x-coordinate is the second parameter, due the the structure of calculating\n           * the tangent.\n           *\n           * @method atan2\n           * @param  {Number} y y-coordinate of the point\n           * @param  {Number} x x-coordinate of the point\n           * @return {Number}   the arc tangent of the given point\n           *\n           * @example\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(204);\n           *   translate(width / 2, height / 2);\n           *   let a = atan2(mouseY - height / 2, mouseX - width / 2);\n           *   rotate(a);\n           *   rect(-30, -5, 60, 10);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 60 by 10 rect at center of canvas rotates with mouse movements\n           *\n           */\n          p5.prototype.atan2 = function(y, x) {\n            return this._fromRadians(Math.atan2(y, x));\n          };\n\n          /**\n           * Calculates the cosine of an angle. This function takes into account the\n           * current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1.\n           *\n           * @method cos\n           * @param  {Number} angle the angle\n           * @return {Number}       the cosine of the angle\n           *\n           * @example\n           * <div>\n           * <code>\n           * let a = 0.0;\n           * let inc = TWO_PI / 25.0;\n           * for (let i = 0; i < 25; i++) {\n           *   line(i * 4, 50, i * 4, 50 + cos(a) * 40.0);\n           *   a = a + inc;\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * vertical black lines form wave patterns, extend-down on left and right side\n           *\n           */\n          p5.prototype.cos = function(angle) {\n            return Math.cos(this._toRadians(angle));\n          };\n\n          /**\n           * Calculates the sine of an angle. This function takes into account the\n           * current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1.\n           *\n           * @method sin\n           * @param  {Number} angle the angle\n           * @return {Number}       the sine of the angle\n           *\n           * @example\n           * <div>\n           * <code>\n           * let a = 0.0;\n           * let inc = TWO_PI / 25.0;\n           * for (let i = 0; i < 25; i++) {\n           *   line(i * 4, 50, i * 4, 50 + sin(a) * 40.0);\n           *   a = a + inc;\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * vertical black lines extend down and up from center to form wave pattern\n           *\n           */\n          p5.prototype.sin = function(angle) {\n            return Math.sin(this._toRadians(angle));\n          };\n\n          /**\n           * Calculates the tangent of an angle. This function takes into account\n           * the current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1.\n           *\n           * @method tan\n           * @param  {Number} angle the angle\n           * @return {Number}       the tangent of the angle\n           *\n           * @example\n           * <div>\n           * <code>\n           * let a = 0.0;\n           * let inc = TWO_PI / 50.0;\n           * for (let i = 0; i < 100; i = i + 2) {\n           *   line(i, 50, i, 50 + tan(a) * 2.0);\n           *   a = a + inc;\n           * }\n           * </code>\n           *\n           *\n           * @alt\n           * vertical black lines end down and up from center to form spike pattern\n           *\n           */\n          p5.prototype.tan = function(angle) {\n            return Math.tan(this._toRadians(angle));\n          };\n\n          /**\n           * Converts a radian measurement to its corresponding value in degrees.\n           * Radians and degrees are two ways of measuring the same thing. There are\n           * 360 degrees in a circle and 2*PI radians in a circle. For example,\n           * 90° = PI/2 = 1.5707964. This function does not take into account the\n           * current <a href=\"#/p5/angleMode\">angleMode</a>.\n           *\n           * @method degrees\n           * @param  {Number} radians the radians value to convert to degrees\n           * @return {Number}         the converted angle\n           *\n           *\n           * @example\n           * <div class= “norender\">\n           * <code>\n           * let rad = PI / 4;\n           * let deg = degrees(rad);\n           * print(rad + ' radians is ' + deg + ' degrees');\n           * // Prints: 0.7853981633974483 radians is 45 degrees\n           * </code>\n           * </div>\n           *\n           */\n          p5.prototype.degrees = function(angle) {\n            return angle * constants.RAD_TO_DEG;\n          };\n\n          /**\n           * Converts a degree measurement to its corresponding value in radians.\n           * Radians and degrees are two ways of measuring the same thing. There are\n           * 360 degrees in a circle and 2*PI radians in a circle. For example,\n           * 90° = PI/2 = 1.5707964. This function does not take into account the\n           * current <a href=\"#/p5/angleMode\">angleMode</a>.\n           *\n           * @method radians\n           * @param  {Number} degrees the degree value to convert to radians\n           * @return {Number}         the converted angle\n           *\n           * @example\n           * <div class= “norender\">\n           * <code>\n           * let deg = 45.0;\n           * let rad = radians(deg);\n           * print(deg + ' degrees is ' + rad + ' radians');\n           * // Prints: 45 degrees is 0.7853981633974483 radians\n           * </code>\n           * </div>\n           */\n          p5.prototype.radians = function(angle) {\n            return angle * constants.DEG_TO_RAD;\n          };\n\n          /**\n           * Sets the current mode of p5 to given mode. Default mode is RADIANS.\n           *\n           * @method angleMode\n           * @param {Constant} mode either RADIANS or DEGREES\n           *\n           * @example\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(204);\n           *   angleMode(DEGREES); // Change the mode to DEGREES\n           *   let a = atan2(mouseY - height / 2, mouseX - width / 2);\n           *   translate(width / 2, height / 2);\n           *   push();\n           *   rotate(a);\n           *   rect(-20, -5, 40, 10); // Larger rectangle is rotating in degrees\n           *   pop();\n           *   angleMode(RADIANS); // Change the mode to RADIANS\n           *   rotate(a); // variable a stays the same\n           *   rect(-40, -5, 20, 10); // Smaller rectangle is rotating in radians\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 40 by 10 rect in center rotates with mouse moves. 20 by 10 rect moves faster.\n           *\n           *\n           */\n          p5.prototype.angleMode = function(mode) {\n            if (mode === constants.DEGREES || mode === constants.RADIANS) {\n              this._angleMode = mode;\n            }\n          };\n\n          /**\n           * converts angles from the current angleMode to RADIANS\n           *\n           * @method _toRadians\n           * @private\n           * @param {Number} angle\n           * @returns {Number}\n           */\n          p5.prototype._toRadians = function(angle) {\n            if (this._angleMode === constants.DEGREES) {\n              return angle * constants.DEG_TO_RAD;\n            }\n            return angle;\n          };\n\n          /**\n           * converts angles from the current angleMode to DEGREES\n           *\n           * @method _toDegrees\n           * @private\n           * @param {Number} angle\n           * @returns {Number}\n           */\n          p5.prototype._toDegrees = function(angle) {\n            if (this._angleMode === constants.RADIANS) {\n              return angle * constants.RAD_TO_DEG;\n            }\n            return angle;\n          };\n\n          /**\n           * converts angles from RADIANS into the current angleMode\n           *\n           * @method _fromRadians\n           * @private\n           * @param {Number} angle\n           * @returns {Number}\n           */\n          p5.prototype._fromRadians = function(angle) {\n            if (this._angleMode === constants.DEGREES) {\n              return angle * constants.RAD_TO_DEG;\n            }\n            return angle;\n          };\n\n          module.exports = p5;\n        },\n        { '../core/constants': 18, '../core/main': 24 }\n      ],\n      58: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Typography\n           * @submodule Attributes\n           * @for p5\n           * @requires core\n           * @requires constants\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          /**\n           * Sets the current alignment for drawing text. Accepts two\n           * arguments: horizAlign (LEFT, CENTER, or RIGHT) and\n           * vertAlign (TOP, BOTTOM, CENTER, or BASELINE).\n           *\n           * The horizAlign parameter is in reference to the x value\n           * of the <a href=\"#/p5/text\">text()</a> function, while the vertAlign parameter is\n           * in reference to the y value.\n           *\n           * So if you write textAlign(LEFT), you are aligning the left\n           * edge of your text to the x value you give in <a href=\"#/p5/text\">text()</a>. If you\n           * write textAlign(RIGHT, TOP), you are aligning the right edge\n           * of your text to the x value and the top of edge of the text\n           * to the y value.\n           *\n           * @method textAlign\n           * @param {Constant} horizAlign horizontal alignment, either LEFT,\n           *                            CENTER, or RIGHT\n           * @param {Constant} [vertAlign] vertical alignment, either TOP,\n           *                            BOTTOM, CENTER, or BASELINE\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * textSize(16);\n           * textAlign(RIGHT);\n           * text('ABCD', 50, 30);\n           * textAlign(CENTER);\n           * text('EFGH', 50, 50);\n           * textAlign(LEFT);\n           * text('IJKL', 50, 70);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * textSize(16);\n           * strokeWeight(0.5);\n           *\n           * line(0, 12, width, 12);\n           * textAlign(CENTER, TOP);\n           * text('TOP', 0, 12, width);\n           *\n           * line(0, 37, width, 37);\n           * textAlign(CENTER, CENTER);\n           * text('CENTER', 0, 37, width);\n           *\n           * line(0, 62, width, 62);\n           * textAlign(CENTER, BASELINE);\n           * text('BASELINE', 0, 62, width);\n           *\n           * line(0, 87, width, 87);\n           * textAlign(CENTER, BOTTOM);\n           * text('BOTTOM', 0, 87, width);\n           * </code>\n           * </div>\n           *\n           * @alt\n           *Letters ABCD displayed at top right, EFGH at center and IJKL at bottom left.\n           * The names of the four vertical alignments rendered each showing that alignment's placement relative to a horizontal line.\n           *\n           */\n          /**\n           * @method textAlign\n           * @return {Object}\n           */\n          p5.prototype.textAlign = function(horizAlign, vertAlign) {\n            p5._validateParameters('textAlign', arguments);\n            return this._renderer.textAlign.apply(this._renderer, arguments);\n          };\n\n          /**\n           * Sets/gets the spacing, in pixels, between lines of text. This\n           * setting will be used in all subsequent calls to the <a href=\"#/p5/text\">text()</a> function.\n           *\n           * @method textLeading\n           * @param {Number} leading the size in pixels for spacing between lines\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * // Text to display. The \"\\n\" is a \"new line\" character\n           * let lines = 'L1\\nL2\\nL3';\n           * textSize(12);\n           *\n           * textLeading(10); // Set leading to 10\n           * text(lines, 10, 25);\n           *\n           * textLeading(20); // Set leading to 20\n           * text(lines, 40, 25);\n           *\n           * textLeading(30); // Set leading to 30\n           * text(lines, 70, 25);\n           * </code>\n           * </div>\n           *\n           * @alt\n           *set L1 L2 & L3 displayed vertically 3 times. spacing increases for each set\n           */\n          /**\n           * @method textLeading\n           * @return {Number}\n           */\n          p5.prototype.textLeading = function(theLeading) {\n            p5._validateParameters('textLeading', arguments);\n            return this._renderer.textLeading.apply(this._renderer, arguments);\n          };\n\n          /**\n           * Sets/gets the current font size. This size will be used in all subsequent\n           * calls to the <a href=\"#/p5/text\">text()</a> function. Font size is measured in pixels.\n           *\n           * @method textSize\n           * @param {Number} theSize the size of the letters in units of pixels\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * textSize(12);\n           * text('Font Size 12', 10, 30);\n           * textSize(14);\n           * text('Font Size 14', 10, 60);\n           * textSize(16);\n           * text('Font Size 16', 10, 90);\n           * </code>\n           * </div>\n           *\n           * @alt\n           *Font Size 12 displayed small, Font Size 14 medium & Font Size 16 large\n           */\n          /**\n           * @method textSize\n           * @return {Number}\n           */\n          p5.prototype.textSize = function(theSize) {\n            p5._validateParameters('textSize', arguments);\n            return this._renderer.textSize.apply(this._renderer, arguments);\n          };\n\n          /**\n           * Sets/gets the style of the text for system fonts to NORMAL, ITALIC, BOLD or BOLDITALIC.\n           * Note: this may be is overridden by CSS styling. For non-system fonts\n           * (opentype, truetype, etc.) please load styled fonts instead.\n           *\n           * @method textStyle\n           * @param {Constant} theStyle styling for text, either NORMAL,\n           *                            ITALIC, BOLD or BOLDITALIC\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * strokeWeight(0);\n           * textSize(12);\n           * textStyle(NORMAL);\n           * text('Font Style Normal', 10, 15);\n           * textStyle(ITALIC);\n           * text('Font Style Italic', 10, 40);\n           * textStyle(BOLD);\n           * text('Font Style Bold', 10, 65);\n           * textStyle(BOLDITALIC);\n           * text('Font Style Bold Italic', 10, 90);\n           * </code>\n           * </div>\n           *\n           * @alt\n           *words Font Style Normal displayed normally, Italic in italic, bold in bold and bold italic in bold italics.\n           */\n          /**\n           * @method textStyle\n           * @return {String}\n           */\n          p5.prototype.textStyle = function(theStyle) {\n            p5._validateParameters('textStyle', arguments);\n            return this._renderer.textStyle.apply(this._renderer, arguments);\n          };\n\n          /**\n           * Calculates and returns the width of any character or text string.\n           *\n           * @method textWidth\n           * @param {String} theText the String of characters to measure\n           * @return {Number}\n           * @example\n           * <div>\n           * <code>\n           * textSize(28);\n           *\n           * let aChar = 'P';\n           * let cWidth = textWidth(aChar);\n           * text(aChar, 0, 40);\n           * line(cWidth, 0, cWidth, 50);\n           *\n           * let aString = 'p5.js';\n           * let sWidth = textWidth(aString);\n           * text(aString, 0, 85);\n           * line(sWidth, 50, sWidth, 100);\n           * </code>\n           * </div>\n           *\n           * @alt\n           *Letter P and p5.js are displayed with vertical lines at end. P is wide\n           *\n           */\n          p5.prototype.textWidth = function(theText) {\n            p5._validateParameters('textWidth', arguments);\n            if (theText.length === 0) {\n              return 0;\n            }\n            return this._renderer.textWidth.apply(this._renderer, arguments);\n          };\n\n          /**\n           * Returns the ascent of the current font at its current size. The ascent\n           * represents the distance, in pixels, of the tallest character above\n           * the baseline.\n           * @method textAscent\n           * @return {Number}\n           * @example\n           * <div>\n           * <code>\n           * let base = height * 0.75;\n           * let scalar = 0.8; // Different for each font\n           *\n           * textSize(32); // Set initial text size\n           * let asc = textAscent() * scalar; // Calc ascent\n           * line(0, base - asc, width, base - asc);\n           * text('dp', 0, base); // Draw text on baseline\n           *\n           * textSize(64); // Increase text size\n           * asc = textAscent() * scalar; // Recalc ascent\n           * line(40, base - asc, width, base - asc);\n           * text('dp', 40, base); // Draw text on baseline\n           * </code>\n           * </div>\n           */\n          p5.prototype.textAscent = function() {\n            p5._validateParameters('textAscent', arguments);\n            return this._renderer.textAscent();\n          };\n\n          /**\n           * Returns the descent of the current font at its current size. The descent\n           * represents the distance, in pixels, of the character with the longest\n           * descender below the baseline.\n           * @method textDescent\n           * @return {Number}\n           * @example\n           * <div>\n           * <code>\n           * let base = height * 0.75;\n           * let scalar = 0.8; // Different for each font\n           *\n           * textSize(32); // Set initial text size\n           * let desc = textDescent() * scalar; // Calc ascent\n           * line(0, base + desc, width, base + desc);\n           * text('dp', 0, base); // Draw text on baseline\n           *\n           * textSize(64); // Increase text size\n           * desc = textDescent() * scalar; // Recalc ascent\n           * line(40, base + desc, width, base + desc);\n           * text('dp', 40, base); // Draw text on baseline\n           * </code>\n           * </div>\n           */\n          p5.prototype.textDescent = function() {\n            p5._validateParameters('textDescent', arguments);\n            return this._renderer.textDescent();\n          };\n\n          /**\n           * Helper function to measure ascent and descent.\n           */\n          p5.prototype._updateTextMetrics = function() {\n            return this._renderer._updateTextMetrics();\n          };\n\n          module.exports = p5;\n        },\n        { '../core/main': 24 }\n      ],\n      59: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Typography\n           * @submodule Loading & Displaying\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          var constants = _dereq_('../core/constants');\n          var opentype = _dereq_('opentype.js');\n\n          _dereq_('../core/error_helpers');\n\n          /**\n           * Loads an opentype font file (.otf, .ttf) from a file or a URL,\n           * and returns a PFont Object. This method is asynchronous,\n           * meaning it may not finish before the next line in your sketch\n           * is executed.\n           * <br><br>\n           * The path to the font should be relative to the HTML file\n           * that links in your sketch. Loading fonts from a URL or other\n           * remote location may be blocked due to your browser's built-in\n           * security.\n           *\n           * @method loadFont\n           * @param  {String}        path       name of the file or url to load\n           * @param  {Function}      [callback] function to be executed after\n           *                                    <a href=\"#/p5/loadFont\">loadFont()</a> completes\n           * @param  {Function}      [onError]  function to be executed if\n           *                                    an error occurs\n           * @return {p5.Font}                  <a href=\"#/p5.Font\">p5.Font</a> object\n           * @example\n           *\n           * <p>Calling loadFont() inside <a href=\"#/p5/preload\">preload()</a> guarantees that the load\n           * operation will have completed before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.</p>\n           *\n           * <div><code>\n           * let myFont;\n           * function preload() {\n           *   myFont = loadFont('assets/inconsolata.otf');\n           * }\n           *\n           * function setup() {\n           *   fill('#ED225D');\n           *   textFont(myFont);\n           *   textSize(36);\n           *   text('p5*js', 10, 50);\n           * }\n           * </code></div>\n           *\n           * Outside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the\n           * object:\n           *\n           * <div><code>\n           * function setup() {\n           *   loadFont('assets/inconsolata.otf', drawText);\n           * }\n           *\n           * function drawText(font) {\n           *   fill('#ED225D');\n           *   textFont(font, 36);\n           *   text('p5*js', 10, 50);\n           * }\n           * </code></div>\n           *\n           * <p>You can also use the font filename string (without the file extension) to style other HTML\n           * elements.</p>\n           *\n           * <div><code>\n           * function preload() {\n           *   loadFont('assets/inconsolata.otf');\n           * }\n           *\n           * function setup() {\n           *   let myDiv = createDiv('hello there');\n           *   myDiv.style('font-family', 'Inconsolata');\n           * }\n           * </code></div>\n           *\n           * @alt\n           * p5*js in p5's theme dark pink\n           * p5*js in p5's theme dark pink\n           *\n           */\n          p5.prototype.loadFont = function(path, onSuccess, onError) {\n            p5._validateParameters('loadFont', arguments);\n            var p5Font = new p5.Font(this);\n\n            var self = this;\n            opentype.load(path, function(err, font) {\n              if (err) {\n                p5._friendlyFileLoadError(4, path);\n                if (typeof onError !== 'undefined') {\n                  return onError(err);\n                }\n                console.error(err, path);\n                return;\n              }\n\n              p5Font.font = font;\n\n              if (typeof onSuccess !== 'undefined') {\n                onSuccess(p5Font);\n              }\n\n              self._decrementPreload();\n\n              // check that we have an acceptable font type\n              var validFontTypes = ['ttf', 'otf', 'woff', 'woff2'],\n                fileNoPath = path\n                  .split('\\\\')\n                  .pop()\n                  .split('/')\n                  .pop(),\n                lastDotIdx = fileNoPath.lastIndexOf('.'),\n                fontFamily,\n                newStyle,\n                fileExt = lastDotIdx < 1 ? null : fileNoPath.substr(lastDotIdx + 1);\n\n              // if so, add it to the DOM (name-only) for use with p5.dom\n              if (validFontTypes.indexOf(fileExt) > -1) {\n                fontFamily = fileNoPath.substr(0, lastDotIdx);\n                newStyle = document.createElement('style');\n                newStyle.appendChild(\n                  document.createTextNode(\n                    '\\n@font-face {' +\n                      '\\nfont-family: ' +\n                      fontFamily +\n                      ';\\nsrc: url(' +\n                      path +\n                      ');\\n}\\n'\n                  )\n                );\n\n                document.head.appendChild(newStyle);\n              }\n            });\n\n            return p5Font;\n          };\n\n          /**\n           * Draws text to the screen. Displays the information specified in the first\n           * parameter on the screen in the position specified by the additional\n           * parameters. A default font will be used unless a font is set with the\n           * <a href=\"#/p5/textFont\">textFont()</a> function and a default size will be used unless a font is set\n           * with <a href=\"#/p5/textSize\">textSize()</a>. Change the color of the text with the <a href=\"#/p5/fill\">fill()</a> function.\n           * Change the outline of the text with the <a href=\"#/p5/stroke\">stroke()</a> and <a href=\"#/p5/strokeWeight\">strokeWeight()</a>\n           * functions.\n           * <br><br>\n           * The text displays in relation to the <a href=\"#/p5/textAlign\">textAlign()</a> function, which gives the\n           * option to draw to the left, right, and center of the coordinates.\n           * <br><br>\n           * The x2 and y2 parameters define a rectangular area to display within and\n           * may only be used with string data. When these parameters are specified,\n           * they are interpreted based on the current <a href=\"#/p5/rectMode\">rectMode()</a> setting. Text that\n           * does not fit completely within the rectangle specified will not be drawn\n           * to the screen. If x2 and y2 are not specified, the baseline alignment is the\n           * default, which means that the text will be drawn upwards from x and y.\n           * <br><br>\n           * <b>WEBGL</b>: Only opentype/truetype fonts are supported. You must load a font using the\n           * <a href=\"#/p5/loadFont\">loadFont()</a> method (see the example above).\n           * <a href=\"#/p5/stroke\">stroke()</a> currently has no effect in webgl mode.\n           *\n           * @method text\n           * @param {String|Object|Array|Number|Boolean} str the alphanumeric\n           *                                             symbols to be displayed\n           * @param {Number} x   x-coordinate of text\n           * @param {Number} y   y-coordinate of text\n           * @param {Number} [x2]  by default, the width of the text box,\n           *                     see <a href=\"#/p5/rectMode\">rectMode()</a> for more info\n           * @param {Number} [y2]  by default, the height of the text box,\n           *                     see <a href=\"#/p5/rectMode\">rectMode()</a> for more info\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * textSize(32);\n           * text('word', 10, 30);\n           * fill(0, 102, 153);\n           * text('word', 10, 60);\n           * fill(0, 102, 153, 51);\n           * text('word', 10, 90);\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * let s = 'The quick brown fox jumped over the lazy dog.';\n           * fill(50);\n           * text(s, 10, 10, 70, 80); // Text wraps within text box\n           * </code>\n           * </div>\n           *\n           * <div modernizr='webgl'>\n           * <code>\n           * let inconsolata;\n           * function preload() {\n           *   inconsolata = loadFont('assets/inconsolata.otf');\n           * }\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   textFont(inconsolata);\n           *   textSize(width / 3);\n           *   textAlign(CENTER, CENTER);\n           * }\n           * function draw() {\n           *   background(0);\n           *   let time = millis();\n           *   rotateX(time / 1000);\n           *   rotateZ(time / 1234);\n           *   text('p5.js', 0, 0);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           *'word' displayed 3 times going from black, blue to translucent blue\n           * The quick brown fox jumped over the lazy dog.\n           * the text 'p5.js' spinning in 3d\n           *\n           */\n          p5.prototype.text = function(str, x, y, maxWidth, maxHeight) {\n            p5._validateParameters('text', arguments);\n            return !(this._renderer._doFill || this._renderer._doStroke)\n              ? this\n              : this._renderer.text.apply(this._renderer, arguments);\n          };\n\n          /**\n    * Sets the current font that will be drawn with the <a href=\"#/p5/text\">text()</a> function.\n    * <br><br>\n    * <b>WEBGL</b>: Only fonts loaded via <a href=\"#/p5/loadFont\">loadFont()</a> are supported.\n    *\n    * @method textFont\n    * @return {Object} the current font\n    *\n    * @example\n    * <div>\n    * <code>\n    * fill(0);\n    * textSize(12);\n    * textFont('Georgia');\n    * text('Georgia', 12, 30);\n    * textFont('Helvetica');\n    * text('Helvetica', 12, 60);\n    * </code>\n    * </div>\n    * <div>\n    * <code>\n    * let fontRegular, fontItalic, fontBold;\n    * function preload() {\n    *   fontRegular = loadFont('assets/Regular.otf');\n    *   fontItalic = loadFont('assets/Italic.ttf');\n    *   fontBold = loadFont('assets/Bold.ttf');\n    * }\n    * function setup() {\n    *   background(210);\n    *   fill(0)\n       .strokeWeight(0)\n       .textSize(10);\n    *   textFont(fontRegular);\n    *   text('Font Style Normal', 10, 30);\n    *   textFont(fontItalic);\n    *   text('Font Style Italic', 10, 50);\n    *   textFont(fontBold);\n    *   text('Font Style Bold', 10, 70);\n    * }\n    * </code>\n    * </div>\n    *\n    * @alt\n    *words Font Style Normal displayed normally, Italic in italic and bold in bold\n    */\n          /**\n           * @method textFont\n           * @param {Object|String} font a font loaded via <a href=\"#/p5/loadFont\">loadFont()</a>, or a String\n           * representing a <a href=\"https://mzl.la/2dOw8WD\">web safe font</a> (a font\n           * that is generally available across all systems)\n           * @param {Number} [size] the font size to use\n           * @chainable\n           */\n          p5.prototype.textFont = function(theFont, theSize) {\n            p5._validateParameters('textFont', arguments);\n            if (arguments.length) {\n              if (!theFont) {\n                throw new Error('null font passed to textFont');\n              }\n\n              this._renderer._setProperty('_textFont', theFont);\n\n              if (theSize) {\n                this._renderer._setProperty('_textSize', theSize);\n                this._renderer._setProperty(\n                  '_textLeading',\n                  theSize * constants._DEFAULT_LEADMULT\n                );\n              }\n\n              return this._renderer._applyTextProperties();\n            }\n\n            return this._renderer._textFont;\n          };\n\n          module.exports = p5;\n        },\n        {\n          '../core/constants': 18,\n          '../core/error_helpers': 20,\n          '../core/main': 24,\n          'opentype.js': 10\n        }\n      ],\n      60: [\n        function(_dereq_, module, exports) {\n          /**\n           * This module defines the <a href=\"#/p5.Font\">p5.Font</a> class and functions for\n           * drawing text to the display canvas.\n           * @module Typography\n           * @submodule Font\n           * @requires core\n           * @requires constants\n           */\n\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n\n          var p5 = _dereq_('../core/main');\n          var constants = _dereq_('../core/constants');\n\n          /**\n           * Base class for font handling\n           * @class p5.Font\n           * @param {p5} [pInst] pointer to p5 instance\n           */\n          p5.Font = function(p) {\n            this.parent = p;\n\n            this.cache = {};\n\n            /**\n             * Underlying opentype font implementation\n             * @property font\n             */\n            this.font = undefined;\n          };\n\n          /**\n           * Returns a tight bounding box for the given text string using this\n           * font (currently only supports single lines)\n           *\n           * @method textBounds\n           * @param  {String} line     a line of text\n           * @param  {Number} x        x-position\n           * @param  {Number} y        y-position\n           * @param  {Number} [fontSize] font size to use (optional) Default is 12.\n           * @param  {Object} [options] opentype options (optional)\n           *                            opentype fonts contains alignment and baseline options.\n           *                            Default is 'LEFT' and 'alphabetic'\n           *\n           *\n           * @return {Object}          a rectangle object with properties: x, y, w, h\n           *\n           * @example\n           * <div>\n           * <code>\n           * let font;\n           * let textString = 'Lorem ipsum dolor sit amet.';\n           * function preload() {\n           *   font = loadFont('./assets/Regular.otf');\n           * }\n           * function setup() {\n           *   background(210);\n           *\n           *   let bbox = font.textBounds(textString, 10, 30, 12);\n           *   fill(255);\n           *   stroke(0);\n           *   rect(bbox.x, bbox.y, bbox.w, bbox.h);\n           *   fill(0);\n           *   noStroke();\n           *\n           *   textFont(font);\n           *   textSize(12);\n           *   text(textString, 10, 30);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           *words Lorem ipsum dol go off canvas and contained by white bounding box\n           *\n           */\n          p5.Font.prototype.textBounds = function(str, x, y, fontSize, opts) {\n            x = x !== undefined ? x : 0;\n            y = y !== undefined ? y : 0;\n\n            // Check cache for existing bounds. Take into consideration the text alignment\n            // settings. Default alignment should match opentype's origin: left-aligned &\n            // alphabetic baseline.\n            var p = (opts && opts.renderer && opts.renderer._pInst) || this.parent,\n              ctx = p._renderer.drawingContext,\n              alignment = ctx.textAlign || constants.LEFT,\n              baseline = ctx.textBaseline || constants.BASELINE,\n              cacheResults = false,\n              result,\n              key;\n\n            fontSize = fontSize || p._renderer._textSize;\n\n            // NOTE: cache disabled for now pending further discussion of #3436\n            if (cacheResults) {\n              key = cacheKey('textBounds', str, x, y, fontSize, alignment, baseline);\n              result = this.cache[key];\n            }\n\n            if (!result) {\n              var minX,\n                minY,\n                maxX,\n                maxY,\n                pos,\n                xCoords = [],\n                yCoords = [],\n                scale = this._scale(fontSize);\n\n              this.font.forEachGlyph(str, x, y, fontSize, opts, function(\n                glyph,\n                gX,\n                gY,\n                gFontSize\n              ) {\n                var gm = glyph.getMetrics();\n                xCoords.push(gX + gm.xMin * scale);\n                xCoords.push(gX + gm.xMax * scale);\n                yCoords.push(gY + -gm.yMin * scale);\n                yCoords.push(gY + -gm.yMax * scale);\n              });\n\n              minX = Math.min.apply(null, xCoords);\n              minY = Math.min.apply(null, yCoords);\n              maxX = Math.max.apply(null, xCoords);\n              maxY = Math.max.apply(null, yCoords);\n\n              result = {\n                x: minX,\n                y: minY,\n                h: maxY - minY,\n                w: maxX - minX,\n                advance: minX - x\n              };\n\n              // Bounds are now calculated, so shift the x & y to match alignment settings\n              pos = this._handleAlignment(\n                p._renderer,\n                str,\n                result.x,\n                result.y,\n                result.w + result.advance\n              );\n\n              result.x = pos.x;\n              result.y = pos.y;\n\n              if (cacheResults) {\n                this.cache[key] = result;\n              }\n            }\n\n            return result;\n          };\n\n          /**\n           * Computes an array of points following the path for specified text\n           *\n           * @method textToPoints\n           * @param  {String} txt     a line of text\n           * @param  {Number} x        x-position\n           * @param  {Number} y        y-position\n           * @param  {Number} fontSize font size to use (optional)\n           * @param  {Object} [options] an (optional) object that can contain:\n           *\n           * <br>sampleFactor - the ratio of path-length to number of samples\n           * (default=.1); higher values yield more points and are therefore\n           * more precise\n           *\n           * <br>simplifyThreshold - if set to a non-zero value, collinear points will be\n           * be removed from the polygon; the value represents the threshold angle to use\n           * when determining whether two edges are collinear\n           *\n           * @return {Array}  an array of points, each with x, y, alpha (the path angle)\n           * @example\n           * <div>\n           * <code>\n           * let font;\n           * function preload() {\n           *   font = loadFont('assets/inconsolata.otf');\n           * }\n           *\n           * let points;\n           * let bounds;\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   stroke(0);\n           *   fill(255, 104, 204);\n           *\n           *   points = font.textToPoints('p5', 0, 0, 10, {\n           *     sampleFactor: 5,\n           *     simplifyThreshold: 0\n           *   });\n           *   bounds = font.textBounds(' p5 ', 0, 0, 10);\n           * }\n           *\n           * function draw() {\n           *   background(255);\n           *   beginShape();\n           *   translate(-bounds.x * width / bounds.w, -bounds.y * height / bounds.h);\n           *   for (let i = 0; i < points.length; i++) {\n           *     let p = points[i];\n           *     vertex(\n           *       p.x * width / bounds.w +\n           *         sin(20 * p.y / bounds.h + millis() / 1000) * width / 30,\n           *       p.y * height / bounds.h\n           *     );\n           *   }\n           *   endShape(CLOSE);\n           * }\n           * </code>\n           * </div>\n           *\n           */\n          p5.Font.prototype.textToPoints = function(txt, x, y, fontSize, options) {\n            var xoff = 0,\n              result = [],\n              glyphs = this._getGlyphs(txt);\n\n            function isSpace(i) {\n              return (\n                (glyphs[i].name && glyphs[i].name === 'space') ||\n                (txt.length === glyphs.length && txt[i] === ' ') ||\n                (glyphs[i].index && glyphs[i].index === 3)\n              );\n            }\n\n            fontSize = fontSize || this.parent._renderer._textSize;\n\n            for (var i = 0; i < glyphs.length; i++) {\n              if (!isSpace(i)) {\n                // fix to #1817, #2069\n\n                var gpath = glyphs[i].getPath(x, y, fontSize),\n                  paths = splitPaths(gpath.commands);\n\n                for (var j = 0; j < paths.length; j++) {\n                  var pts = pathToPoints(paths[j], options);\n\n                  for (var k = 0; k < pts.length; k++) {\n                    pts[k].x += xoff;\n                    result.push(pts[k]);\n                  }\n                }\n              }\n\n              xoff += glyphs[i].advanceWidth * this._scale(fontSize);\n            }\n\n            return result;\n          };\n\n          // ----------------------------- End API ------------------------------\n\n          /**\n           * Returns the set of opentype glyphs for the supplied string.\n           *\n           * Note that there is not a strict one-to-one mapping between characters\n           * and glyphs, so the list of returned glyphs can be larger or smaller\n           *  than the length of the given string.\n           *\n           * @private\n           * @param  {String} str the string to be converted\n           * @return {Array}     the opentype glyphs\n           */\n          p5.Font.prototype._getGlyphs = function(str) {\n            return this.font.stringToGlyphs(str);\n          };\n\n          /**\n           * Returns an opentype path for the supplied string and position.\n           *\n           * @private\n           * @param  {String} line     a line of text\n           * @param  {Number} x        x-position\n           * @param  {Number} y        y-position\n           * @param  {Object} options opentype options (optional)\n           * @return {Object}     the opentype path\n           */\n          p5.Font.prototype._getPath = function(line, x, y, options) {\n            var p = (options && options.renderer && options.renderer._pInst) || this.parent,\n              renderer = p._renderer,\n              pos = this._handleAlignment(renderer, line, x, y);\n\n            return this.font.getPath(line, pos.x, pos.y, renderer._textSize, options);\n          };\n\n          /*\n    * Creates an SVG-formatted path-data string\n    * (See http://www.w3.org/TR/SVG/paths.html#PathData)\n    * from the given opentype path or string/position\n    *\n    * @param  {Object} path    an opentype path, OR the following:\n    *\n    * @param  {String} line     a line of text\n    * @param  {Number} x        x-position\n    * @param  {Number} y        y-position\n    * @param  {Object} options opentype options (optional), set options.decimals\n    * to set the decimal precision of the path-data\n    *\n    * @return {Object}     this p5.Font object\n    */\n          p5.Font.prototype._getPathData = function(line, x, y, options) {\n            var decimals = 3;\n\n            // create path from string/position\n            if (typeof line === 'string' && arguments.length > 2) {\n              line = this._getPath(line, x, y, options);\n            } else if (_typeof(x) === 'object') {\n              // handle options specified in 2nd arg\n              options = x;\n            }\n\n            // handle svg arguments\n            if (options && typeof options.decimals === 'number') {\n              decimals = options.decimals;\n            }\n\n            return line.toPathData(decimals);\n          };\n\n          /*\n    * Creates an SVG <path> element, as a string,\n    * from the given opentype path or string/position\n    *\n    * @param  {Object} path    an opentype path, OR the following:\n    *\n    * @param  {String} line     a line of text\n    * @param  {Number} x        x-position\n    * @param  {Number} y        y-position\n    * @param  {Object} options opentype options (optional), set options.decimals\n    * to set the decimal precision of the path-data in the <path> element,\n    *  options.fill to set the fill color for the <path> element,\n    *  options.stroke to set the stroke color for the <path> element,\n    *  options.strokeWidth to set the strokeWidth for the <path> element.\n    *\n    * @return {Object}     this p5.Font object\n    */\n          p5.Font.prototype._getSVG = function(line, x, y, options) {\n            var decimals = 3;\n\n            // create path from string/position\n            if (typeof line === 'string' && arguments.length > 2) {\n              line = this._getPath(line, x, y, options);\n            } else if (_typeof(x) === 'object') {\n              // handle options specified in 2nd arg\n              options = x;\n            }\n\n            // handle svg arguments\n            if (options) {\n              if (typeof options.decimals === 'number') {\n                decimals = options.decimals;\n              }\n              if (typeof options.strokeWidth === 'number') {\n                line.strokeWidth = options.strokeWidth;\n              }\n              if (typeof options.fill !== 'undefined') {\n                line.fill = options.fill;\n              }\n              if (typeof options.stroke !== 'undefined') {\n                line.stroke = options.stroke;\n              }\n            }\n\n            return line.toSVG(decimals);\n          };\n\n          /*\n    * Renders an opentype path or string/position\n    * to the current graphics context\n    *\n    * @param  {Object} path    an opentype path, OR the following:\n    *\n    * @param  {String} line     a line of text\n    * @param  {Number} x        x-position\n    * @param  {Number} y        y-position\n    * @param  {Object} options opentype options (optional)\n    *\n    * @return {p5.Font}     this p5.Font object\n    */\n          p5.Font.prototype._renderPath = function(line, x, y, options) {\n            var pdata,\n              pg = (options && options.renderer) || this.parent._renderer,\n              ctx = pg.drawingContext;\n\n            if (_typeof(line) === 'object' && line.commands) {\n              pdata = line.commands;\n            } else {\n              //pos = handleAlignment(p, ctx, line, x, y);\n              pdata = this._getPath(line, x, y, options).commands;\n            }\n\n            ctx.beginPath();\n            for (var i = 0; i < pdata.length; i += 1) {\n              var cmd = pdata[i];\n              if (cmd.type === 'M') {\n                ctx.moveTo(cmd.x, cmd.y);\n              } else if (cmd.type === 'L') {\n                ctx.lineTo(cmd.x, cmd.y);\n              } else if (cmd.type === 'C') {\n                ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n              } else if (cmd.type === 'Q') {\n                ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);\n              } else if (cmd.type === 'Z') {\n                ctx.closePath();\n              }\n            }\n\n            // only draw stroke if manually set by user\n            if (pg._doStroke && pg._strokeSet) {\n              ctx.stroke();\n            }\n\n            if (pg._doFill) {\n              // if fill hasn't been set by user, use default-text-fill\n              if (!pg._fillSet) {\n                pg._setFill(constants._DEFAULT_TEXT_FILL);\n              }\n              ctx.fill();\n            }\n\n            return this;\n          };\n\n          p5.Font.prototype._textWidth = function(str, fontSize) {\n            return this.font.getAdvanceWidth(str, fontSize);\n          };\n\n          p5.Font.prototype._textAscent = function(fontSize) {\n            return this.font.ascender * this._scale(fontSize);\n          };\n\n          p5.Font.prototype._textDescent = function(fontSize) {\n            return -this.font.descender * this._scale(fontSize);\n          };\n\n          p5.Font.prototype._scale = function(fontSize) {\n            return 1 / this.font.unitsPerEm * (fontSize || this.parent._renderer._textSize);\n          };\n\n          p5.Font.prototype._handleAlignment = function(renderer, line, x, y, textWidth) {\n            var fontSize = renderer._textSize;\n\n            if (typeof textWidth === 'undefined') {\n              textWidth = this._textWidth(line, fontSize);\n            }\n\n            switch (renderer._textAlign) {\n              case constants.CENTER:\n                x -= textWidth / 2;\n                break;\n              case constants.RIGHT:\n                x -= textWidth;\n                break;\n            }\n\n            switch (renderer._textBaseline) {\n              case constants.TOP:\n                y += this._textAscent(fontSize);\n                break;\n              case constants.CENTER:\n                y += this._textAscent(fontSize) / 2;\n                break;\n              case constants.BOTTOM:\n                y -= this._textDescent(fontSize);\n                break;\n            }\n\n            return { x: x, y: y };\n          };\n\n          // path-utils\n\n          function pathToPoints(cmds, options) {\n            var opts = parseOpts(options, {\n              sampleFactor: 0.1,\n              simplifyThreshold: 0\n            });\n\n            var len = pointAtLength(cmds, 0, 1), // total-length\n              t = len / (len * opts.sampleFactor),\n              pts = [];\n\n            for (var i = 0; i < len; i += t) {\n              pts.push(pointAtLength(cmds, i));\n            }\n\n            if (opts.simplifyThreshold) {\n              simplify(pts, opts.simplifyThreshold);\n            }\n\n            return pts;\n          }\n\n          function simplify(pts, angle) {\n            angle = typeof angle === 'undefined' ? 0 : angle;\n\n            var num = 0;\n            for (var i = pts.length - 1; pts.length > 3 && i >= 0; --i) {\n              if (collinear(at(pts, i - 1), at(pts, i), at(pts, i + 1), angle)) {\n                // Remove the middle point\n                pts.splice(i % pts.length, 1);\n                num++;\n              }\n            }\n            return num;\n          }\n\n          function splitPaths(cmds) {\n            var paths = [],\n              current;\n            for (var i = 0; i < cmds.length; i++) {\n              if (cmds[i].type === 'M') {\n                if (current) {\n                  paths.push(current);\n                }\n                current = [];\n              }\n              current.push(cmdToArr(cmds[i]));\n            }\n            paths.push(current);\n\n            return paths;\n          }\n\n          function cmdToArr(cmd) {\n            var arr = [cmd.type];\n            if (cmd.type === 'M' || cmd.type === 'L') {\n              // moveto or lineto\n              arr.push(cmd.x, cmd.y);\n            } else if (cmd.type === 'C') {\n              arr.push(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n            } else if (cmd.type === 'Q') {\n              arr.push(cmd.x1, cmd.y1, cmd.x, cmd.y);\n            }\n            // else if (cmd.type === 'Z') { /* no-op */ }\n            return arr;\n          }\n\n          function parseOpts(options, defaults) {\n            if (_typeof(options) !== 'object') {\n              options = defaults;\n            } else {\n              for (var key in defaults) {\n                if (typeof options[key] === 'undefined') {\n                  options[key] = defaults[key];\n                }\n              }\n            }\n            return options;\n          }\n\n          //////////////////////// Helpers ////////////////////////////\n\n          function at(v, i) {\n            var s = v.length;\n            return v[i < 0 ? i % s + s : i % s];\n          }\n\n          function collinear(a, b, c, thresholdAngle) {\n            if (!thresholdAngle) {\n              return areaTriangle(a, b, c) === 0;\n            }\n\n            if (typeof collinear.tmpPoint1 === 'undefined') {\n              collinear.tmpPoint1 = [];\n              collinear.tmpPoint2 = [];\n            }\n\n            var ab = collinear.tmpPoint1,\n              bc = collinear.tmpPoint2;\n            ab.x = b.x - a.x;\n            ab.y = b.y - a.y;\n            bc.x = c.x - b.x;\n            bc.y = c.y - b.y;\n\n            var dot = ab.x * bc.x + ab.y * bc.y,\n              magA = Math.sqrt(ab.x * ab.x + ab.y * ab.y),\n              magB = Math.sqrt(bc.x * bc.x + bc.y * bc.y),\n              angle = Math.acos(dot / (magA * magB));\n\n            return angle < thresholdAngle;\n          }\n\n          function areaTriangle(a, b, c) {\n            return (b[0] - a[0]) * (c[1] - a[1]) - (c[0] - a[0]) * (b[1] - a[1]);\n          }\n\n          // Portions of below code copyright 2008 Dmitry Baranovskiy (via MIT license)\n\n          function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n            var t1 = 1 - t,\n              t13 = Math.pow(t1, 3),\n              t12 = Math.pow(t1, 2),\n              t2 = t * t,\n              t3 = t2 * t,\n              x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n              y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n              mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n              my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n              nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n              ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n              ax = t1 * p1x + t * c1x,\n              ay = t1 * p1y + t * c1y,\n              cx = t1 * c2x + t * p2x,\n              cy = t1 * c2y + t * p2y,\n              alpha = 90 - Math.atan2(mx - nx, my - ny) * 180 / Math.PI;\n\n            if (mx > nx || my < ny) {\n              alpha += 180;\n            }\n\n            return {\n              x: x,\n              y: y,\n              m: { x: mx, y: my },\n              n: { x: nx, y: ny },\n              start: { x: ax, y: ay },\n              end: { x: cx, y: cy },\n              alpha: alpha\n            };\n          }\n\n          function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n            return length == null\n              ? bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y)\n              : findDotsAtSegment(\n                  p1x,\n                  p1y,\n                  c1x,\n                  c1y,\n                  c2x,\n                  c2y,\n                  p2x,\n                  p2y,\n                  getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length)\n                );\n          }\n\n          function pointAtLength(path, length, istotal) {\n            path = path2curve(path);\n            var x,\n              y,\n              p,\n              l,\n              sp = '',\n              subpaths = {},\n              point,\n              len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n              p = path[i];\n              if (p[0] === 'M') {\n                x = +p[1];\n                y = +p[2];\n              } else {\n                l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                if (len + l > length) {\n                  if (!istotal) {\n                    point = getPointAtSegmentLength(\n                      x,\n                      y,\n                      p[1],\n                      p[2],\n                      p[3],\n                      p[4],\n                      p[5],\n                      p[6],\n                      length - len\n                    );\n\n                    return { x: point.x, y: point.y, alpha: point.alpha };\n                  }\n                }\n                len += l;\n                x = +p[5];\n                y = +p[6];\n              }\n              sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n\n            point = istotal\n              ? len\n              : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n\n            if (point.alpha) {\n              point = { x: point.x, y: point.y, alpha: point.alpha };\n            }\n\n            return point;\n          }\n\n          function pathToAbsolute(pathArray) {\n            var res = [],\n              x = 0,\n              y = 0,\n              mx = 0,\n              my = 0,\n              start = 0;\n            if (!pathArray) {\n              // console.warn(\"Unexpected state: undefined pathArray\"); // shouldn't happen\n              return res;\n            }\n            if (pathArray[0][0] === 'M') {\n              x = +pathArray[0][1];\n              y = +pathArray[0][2];\n              mx = x;\n              my = y;\n              start++;\n              res[0] = ['M', x, y];\n            }\n\n            var dots,\n              crz =\n                pathArray.length === 3 &&\n                pathArray[0][0] === 'M' &&\n                pathArray[1][0].toUpperCase() === 'R' &&\n                pathArray[2][0].toUpperCase() === 'Z';\n\n            for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n              res.push((r = []));\n              pa = pathArray[i];\n              if (pa[0] !== String.prototype.toUpperCase.call(pa[0])) {\n                r[0] = String.prototype.toUpperCase.call(pa[0]);\n                switch (r[0]) {\n                  case 'A':\n                    r[1] = pa[1];\n                    r[2] = pa[2];\n                    r[3] = pa[3];\n                    r[4] = pa[4];\n                    r[5] = pa[5];\n                    r[6] = +(pa[6] + x);\n                    r[7] = +(pa[7] + y);\n                    break;\n                  case 'V':\n                    r[1] = +pa[1] + y;\n                    break;\n                  case 'H':\n                    r[1] = +pa[1] + x;\n                    break;\n                  case 'R':\n                    dots = [x, y].concat(pa.slice(1));\n                    for (var j = 2, jj = dots.length; j < jj; j++) {\n                      dots[j] = +dots[j] + x;\n                      dots[++j] = +dots[j] + y;\n                    }\n                    res.pop();\n                    res = res.concat(catmullRom2bezier(dots, crz));\n                    break;\n                  case 'M':\n                    mx = +pa[1] + x;\n                    my = +pa[2] + y;\n                    break;\n                  default:\n                    for (j = 1, jj = pa.length; j < jj; j++) {\n                      r[j] = +pa[j] + (j % 2 ? x : y);\n                    }\n                }\n              } else if (pa[0] === 'R') {\n                dots = [x, y].concat(pa.slice(1));\n                res.pop();\n                res = res.concat(catmullRom2bezier(dots, crz));\n                r = ['R'].concat(pa.slice(-2));\n              } else {\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                  r[k] = pa[k];\n                }\n              }\n              switch (r[0]) {\n                case 'Z':\n                  x = mx;\n                  y = my;\n                  break;\n                case 'H':\n                  x = r[1];\n                  break;\n                case 'V':\n                  y = r[1];\n                  break;\n                case 'M':\n                  mx = r[r.length - 2];\n                  my = r[r.length - 1];\n                  break;\n                default:\n                  x = r[r.length - 2];\n                  y = r[r.length - 1];\n              }\n            }\n            return res;\n          }\n\n          function path2curve(path, path2) {\n            var p = pathToAbsolute(path),\n              p2 = path2 && pathToAbsolute(path2);\n            var attrs = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null };\n            var attrs2 = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null };\n            var pcoms1 = []; // path commands of original path p\n            var pcoms2 = []; // path commands of original path p2\n            var ii;\n\n            var processPath = function processPath(path, d, pcom) {\n                var nx,\n                  ny,\n                  tq = { T: 1, Q: 1 };\n                if (!path) {\n                  return ['C', d.x, d.y, d.x, d.y, d.x, d.y];\n                }\n                if (!(path[0] in tq)) {\n                  d.qx = d.qy = null;\n                }\n                switch (path[0]) {\n                  case 'M':\n                    d.X = path[1];\n                    d.Y = path[2];\n                    break;\n                  case 'A':\n                    path = ['C'].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n                    break;\n                  case 'S':\n                    if (pcom === 'C' || pcom === 'S') {\n                      nx = d.x * 2 - d.bx;\n                      ny = d.y * 2 - d.by;\n                    } else {\n                      nx = d.x;\n                      ny = d.y;\n                    }\n                    path = ['C', nx, ny].concat(path.slice(1));\n                    break;\n                  case 'T':\n                    if (pcom === 'Q' || pcom === 'T') {\n                      d.qx = d.x * 2 - d.qx;\n                      d.qy = d.y * 2 - d.qy;\n                    } else {\n                      d.qx = d.x;\n                      d.qy = d.y;\n                    }\n                    path = ['C'].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                    break;\n                  case 'Q':\n                    d.qx = path[1];\n                    d.qy = path[2];\n                    path = ['C'].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\n                    break;\n                  case 'L':\n                    path = ['C'].concat(l2c(d.x, d.y, path[1], path[2]));\n                    break;\n                  case 'H':\n                    path = ['C'].concat(l2c(d.x, d.y, path[1], d.y));\n                    break;\n                  case 'V':\n                    path = ['C'].concat(l2c(d.x, d.y, d.x, path[1]));\n                    break;\n                  case 'Z':\n                    path = ['C'].concat(l2c(d.x, d.y, d.X, d.Y));\n                    break;\n                }\n\n                return path;\n              },\n              fixArc = function fixArc(pp, i) {\n                if (pp[i].length > 7) {\n                  pp[i].shift();\n                  var pi = pp[i];\n                  while (pi.length) {\n                    pcoms1[i] = 'A';\n                    if (p2) {\n                      pcoms2[i] = 'A';\n                    }\n                    pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));\n                  }\n                  pp.splice(i, 1);\n                  ii = Math.max(p.length, (p2 && p2.length) || 0);\n                }\n              },\n              fixM = function fixM(path1, path2, a1, a2, i) {\n                if (path1 && path2 && path1[i][0] === 'M' && path2[i][0] !== 'M') {\n                  path2.splice(i, 0, ['M', a2.x, a2.y]);\n                  a1.bx = 0;\n                  a1.by = 0;\n                  a1.x = path1[i][1];\n                  a1.y = path1[i][2];\n                  ii = Math.max(p.length, (p2 && p2.length) || 0);\n                }\n              };\n\n            var pfirst = ''; // temporary holder for original path command\n            var pcom = ''; // holder for previous path command of original path\n\n            ii = Math.max(p.length, (p2 && p2.length) || 0);\n            for (var i = 0; i < ii; i++) {\n              if (p[i]) {\n                pfirst = p[i][0];\n              } // save current path command\n\n              if (pfirst !== 'C') {\n                pcoms1[i] = pfirst; // Save current path command\n                if (i) {\n                  pcom = pcoms1[i - 1];\n                } // Get previous path command pcom\n              }\n              p[i] = processPath(p[i], attrs, pcom);\n\n              if (pcoms1[i] !== 'A' && pfirst === 'C') {\n                pcoms1[i] = 'C';\n              }\n\n              fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n              if (p2) {\n                // the same procedures is done to p2\n                if (p2[i]) {\n                  pfirst = p2[i][0];\n                }\n                if (pfirst !== 'C') {\n                  pcoms2[i] = pfirst;\n                  if (i) {\n                    pcom = pcoms2[i - 1];\n                  }\n                }\n                p2[i] = processPath(p2[i], attrs2, pcom);\n\n                if (pcoms2[i] !== 'A' && pfirst === 'C') {\n                  pcoms2[i] = 'C';\n                }\n\n                fixArc(p2, i);\n              }\n              fixM(p, p2, attrs, attrs2, i);\n              fixM(p2, p, attrs2, attrs, i);\n              var seg = p[i],\n                seg2 = p2 && p2[i],\n                seglen = seg.length,\n                seg2len = p2 && seg2.length;\n              attrs.x = seg[seglen - 2];\n              attrs.y = seg[seglen - 1];\n              attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;\n              attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;\n              attrs2.bx = p2 && (parseFloat(seg2[seg2len - 4]) || attrs2.x);\n              attrs2.by = p2 && (parseFloat(seg2[seg2len - 3]) || attrs2.y);\n              attrs2.x = p2 && seg2[seg2len - 2];\n              attrs2.y = p2 && seg2[seg2len - 1];\n            }\n\n            return p2 ? [p, p2] : p;\n          }\n\n          function a2c(x1, y1, rx, ry, angle, lac, sweep_flag, x2, y2, recursive) {\n            // for more information of where this Math came from visit:\n            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n            var PI = Math.PI,\n              _120 = PI * 120 / 180,\n              f1,\n              f2,\n              cx,\n              cy,\n              rad = PI / 180 * (+angle || 0),\n              res = [],\n              xy,\n              rotate = function rotate(x, y, rad) {\n                var X = x * Math.cos(rad) - y * Math.sin(rad),\n                  Y = x * Math.sin(rad) + y * Math.cos(rad);\n                return { x: X, y: Y };\n              };\n            if (!recursive) {\n              xy = rotate(x1, y1, -rad);\n              x1 = xy.x;\n              y1 = xy.y;\n              xy = rotate(x2, y2, -rad);\n              x2 = xy.x;\n              y2 = xy.y;\n              var x = (x1 - x2) / 2,\n                y = (y1 - y2) / 2,\n                h = x * x / (rx * rx) + y * y / (ry * ry);\n              if (h > 1) {\n                h = Math.sqrt(h);\n                rx = h * rx;\n                ry = h * ry;\n              }\n              var rx2 = rx * rx,\n                ry2 = ry * ry;\n              var k =\n                (lac === sweep_flag ? -1 : 1) *\n                Math.sqrt(\n                  Math.abs(\n                    (rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)\n                  )\n                );\n\n              cx = k * rx * y / ry + (x1 + x2) / 2;\n              cy = k * -ry * x / rx + (y1 + y2) / 2;\n              f1 = Math.asin(((y1 - cy) / ry).toFixed(9));\n              f2 = Math.asin(((y2 - cy) / ry).toFixed(9));\n\n              f1 = x1 < cx ? PI - f1 : f1;\n              f2 = x2 < cx ? PI - f2 : f2;\n\n              if (f1 < 0) {\n                f1 = PI * 2 + f1;\n              }\n              if (f2 < 0) {\n                f2 = PI * 2 + f2;\n              }\n\n              if (sweep_flag && f1 > f2) {\n                f1 = f1 - PI * 2;\n              }\n              if (!sweep_flag && f2 > f1) {\n                f2 = f2 - PI * 2;\n              }\n            } else {\n              f1 = recursive[0];\n              f2 = recursive[1];\n              cx = recursive[2];\n              cy = recursive[3];\n            }\n            var df = f2 - f1;\n            if (Math.abs(df) > _120) {\n              var f2old = f2,\n                x2old = x2,\n                y2old = y2;\n              f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n              x2 = cx + rx * Math.cos(f2);\n              y2 = cy + ry * Math.sin(f2);\n              res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [\n                f2,\n                f2old,\n                cx,\n                cy\n              ]);\n            }\n            df = f2 - f1;\n            var c1 = Math.cos(f1),\n              s1 = Math.sin(f1),\n              c2 = Math.cos(f2),\n              s2 = Math.sin(f2),\n              t = Math.tan(df / 4),\n              hx = 4 / 3 * rx * t,\n              hy = 4 / 3 * ry * t,\n              m1 = [x1, y1],\n              m2 = [x1 + hx * s1, y1 - hy * c1],\n              m3 = [x2 + hx * s2, y2 - hy * c2],\n              m4 = [x2, y2];\n            m2[0] = 2 * m1[0] - m2[0];\n            m2[1] = 2 * m1[1] - m2[1];\n            if (recursive) {\n              return [m2, m3, m4].concat(res);\n            } else {\n              res = [m2, m3, m4]\n                .concat(res)\n                .join()\n                .split(',');\n              var newres = [];\n              for (var i = 0, ii = res.length; i < ii; i++) {\n                newres[i] =\n                  i % 2\n                    ? rotate(res[i - 1], res[i], rad).y\n                    : rotate(res[i], res[i + 1], rad).x;\n              }\n              return newres;\n            }\n          }\n\n          // http://schepers.cc/getting-to-the-point\n          function catmullRom2bezier(crp, z) {\n            var d = [];\n            for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n              var p = [\n                {\n                  x: +crp[i - 2],\n                  y: +crp[i - 1]\n                },\n\n                {\n                  x: +crp[i],\n                  y: +crp[i + 1]\n                },\n\n                {\n                  x: +crp[i + 2],\n                  y: +crp[i + 3]\n                },\n\n                {\n                  x: +crp[i + 4],\n                  y: +crp[i + 5]\n                }\n              ];\n\n              if (z) {\n                if (!i) {\n                  p[0] = {\n                    x: +crp[iLen - 2],\n                    y: +crp[iLen - 1]\n                  };\n                } else if (iLen - 4 === i) {\n                  p[3] = {\n                    x: +crp[0],\n                    y: +crp[1]\n                  };\n                } else if (iLen - 2 === i) {\n                  p[2] = {\n                    x: +crp[0],\n                    y: +crp[1]\n                  };\n\n                  p[3] = {\n                    x: +crp[2],\n                    y: +crp[3]\n                  };\n                }\n              } else {\n                if (iLen - 4 === i) {\n                  p[3] = p[2];\n                } else if (!i) {\n                  p[0] = {\n                    x: +crp[i],\n                    y: +crp[i + 1]\n                  };\n                }\n              }\n              d.push([\n                'C',\n                (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                (p[1].y + 6 * p[2].y - p[3].y) / 6,\n                p[2].x,\n                p[2].y\n              ]);\n            }\n\n            return d;\n          }\n\n          function l2c(x1, y1, x2, y2) {\n            return [x1, y1, x2, y2, x2, y2];\n          }\n\n          function q2c(x1, y1, ax, ay, x2, y2) {\n            var _13 = 1 / 3,\n              _23 = 2 / 3;\n            return [\n              _13 * x1 + _23 * ax,\n              _13 * y1 + _23 * ay,\n              _13 * x2 + _23 * ax,\n              _13 * y2 + _23 * ay,\n              x2,\n              y2\n            ];\n          }\n\n          function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n            if (z == null) {\n              z = 1;\n            }\n            z = z > 1 ? 1 : z < 0 ? 0 : z;\n            var z2 = z / 2;\n            var n = 12;\n            var Tvalues = [\n              -0.1252,\n              0.1252,\n              -0.3678,\n              0.3678,\n              -0.5873,\n              0.5873,\n              -0.7699,\n              0.7699,\n              -0.9041,\n              0.9041,\n              -0.9816,\n              0.9816\n            ];\n\n            var sum = 0;\n            var Cvalues = [\n              0.2491,\n              0.2491,\n              0.2335,\n              0.2335,\n              0.2032,\n              0.2032,\n              0.1601,\n              0.1601,\n              0.1069,\n              0.1069,\n              0.0472,\n              0.0472\n            ];\n\n            for (var i = 0; i < n; i++) {\n              var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n              sum += Cvalues[i] * Math.sqrt(comb);\n            }\n            return z2 * sum;\n          }\n\n          function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n            if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n              return;\n            }\n            var t = 1,\n              step = t / 2,\n              t2 = t - step,\n              l,\n              e = 0.01;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n            while (Math.abs(l - ll) > e) {\n              step /= 2;\n              t2 += (l < ll ? 1 : -1) * step;\n              l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n            }\n            return t2;\n          }\n\n          function base3(t, p1, p2, p3, p4) {\n            var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n              t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n            return t * t2 - 3 * p1 + 3 * p2;\n          }\n\n          function cacheKey() {\n            var hash = '';\n            for (var i = arguments.length - 1; i >= 0; --i) {\n              hash += '？' + arguments[i];\n            }\n            return hash;\n          }\n\n          module.exports = p5;\n        },\n        { '../core/constants': 18, '../core/main': 24 }\n      ],\n      61: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Data\n           * @submodule Array Functions\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          /**\n           * Adds a value to the end of an array. Extends the length of\n           * the array by one. Maps to Array.push().\n           *\n           * @method append\n           * @deprecated Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\">array.push(value)</a> instead.\n           * @param {Array} array Array to append\n           * @param {any} value to be added to the Array\n           * @return {Array} the array that was appended to\n           * @example\n           * <div class='norender'><code>\n           * function setup() {\n           *   var myArray = ['Mango', 'Apple', 'Papaya'];\n           *   print(myArray); // ['Mango', 'Apple', 'Papaya']\n           *\n           *   append(myArray, 'Peach');\n           *   print(myArray); // ['Mango', 'Apple', 'Papaya', 'Peach']\n           * }\n           * </code></div>\n           */\n          p5.prototype.append = function(array, value) {\n            array.push(value);\n            return array;\n          };\n\n          /**\n           * Copies an array (or part of an array) to another array. The src array is\n           * copied to the dst array, beginning at the position specified by\n           * srcPosition and into the position specified by dstPosition. The number of\n           * elements to copy is determined by length. Note that copying values\n           * overwrites existing values in the destination array. To append values\n           * instead of overwriting them, use <a href=\"#/p5/concat\">concat()</a>.\n           * <br><br>\n           * The simplified version with only two arguments, arrayCopy(src, dst),\n           * copies an entire array to another of the same size. It is equivalent to\n           * arrayCopy(src, 0, dst, 0, src.length).\n           * <br><br>\n           * Using this function is far more efficient for copying array data than\n           * iterating through a for() loop and copying each element individually.\n           *\n           * @method arrayCopy\n           * @deprecated\n           * @param {Array}  src           the source Array\n           * @param {Integer} srcPosition  starting position in the source Array\n           * @param {Array}  dst           the destination Array\n           * @param {Integer} dstPosition   starting position in the destination Array\n           * @param {Integer} length        number of Array elements to be copied\n           *\n           * @example\n           * <div class='norender'><code>\n           * var src = ['A', 'B', 'C'];\n           * var dst = [1, 2, 3];\n           * var srcPosition = 1;\n           * var dstPosition = 0;\n           * var length = 2;\n           *\n           * print(src); // ['A', 'B', 'C']\n           * print(dst); // [ 1 ,  2 ,  3 ]\n           *\n           * arrayCopy(src, srcPosition, dst, dstPosition, length);\n           * print(dst); // ['B', 'C', 3]\n           * </code></div>\n           */\n          /**\n           * @method arrayCopy\n           * @deprecated Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\">arr1.copyWithin(arr2)</a> instead.\n           * @param {Array}  src\n           * @param {Array}  dst\n           * @param {Integer} [length]\n           */\n          p5.prototype.arrayCopy = function(src, srcPosition, dst, dstPosition, length) {\n            // the index to begin splicing from dst array\n            var start;\n            var end;\n\n            if (typeof length !== 'undefined') {\n              end = Math.min(length, src.length);\n              start = dstPosition;\n              src = src.slice(srcPosition, end + srcPosition);\n            } else {\n              if (typeof dst !== 'undefined') {\n                // src, dst, length\n                // rename  so we don't get confused\n                end = dst;\n                end = Math.min(end, src.length);\n              } else {\n                // src, dst\n                end = src.length;\n              }\n\n              start = 0;\n              // rename  so we don't get confused\n              dst = srcPosition;\n              src = src.slice(0, end);\n            }\n\n            // Since we are not returning the array and JavaScript is pass by reference\n            // we must modify the actual values of the array\n            // instead of reassigning arrays\n            Array.prototype.splice.apply(dst, [start, end].concat(src));\n          };\n\n          /**\n           * Concatenates two arrays, maps to Array.concat(). Does not modify the\n           * input arrays.\n           *\n           * @method concat\n           * @deprecated Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">arr1.concat(arr2)</a> instead.\n           * @param {Array} a first Array to concatenate\n           * @param {Array} b second Array to concatenate\n           * @return {Array} concatenated array\n           *\n           * @example\n           * <div class = 'norender'><code>\n           * function setup() {\n           *   var arr1 = ['A', 'B', 'C'];\n           *   var arr2 = [1, 2, 3];\n           *\n           *   print(arr1); // ['A','B','C']\n           *   print(arr2); // [1,2,3]\n           *\n           *   var arr3 = concat(arr1, arr2);\n           *\n           *   print(arr1); // ['A','B','C']\n           *   print(arr2); // [1, 2, 3]\n           *   print(arr3); // ['A','B','C', 1, 2, 3]\n           * }\n           * </code></div>\n           */\n          p5.prototype.concat = function(list0, list1) {\n            return list0.concat(list1);\n          };\n\n          /**\n           * Reverses the order of an array, maps to Array.reverse()\n           *\n           * @method reverse\n           * @deprecated Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\">array.reverse()</a> instead.\n           * @param {Array} list Array to reverse\n           * @return {Array} the reversed list\n           * @example\n           * <div class='norender'><code>\n           * function setup() {\n           *   var myArray = ['A', 'B', 'C'];\n           *   print(myArray); // ['A','B','C']\n           *\n           *   reverse(myArray);\n           *   print(myArray); // ['C','B','A']\n           * }\n           * </code></div>\n           */\n          p5.prototype.reverse = function(list) {\n            return list.reverse();\n          };\n\n          /**\n           * Decreases an array by one element and returns the shortened array,\n           * maps to Array.pop().\n           *\n           * @method shorten\n           * @deprecated Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\">array.pop()</a> instead.\n           * @param  {Array} list Array to shorten\n           * @return {Array} shortened Array\n           * @example\n           * <div class = 'norender'><code>\n           * function setup() {\n           *   var myArray = ['A', 'B', 'C'];\n           *   print(myArray); // ['A', 'B', 'C']\n           *   var newArray = shorten(myArray);\n           *   print(myArray); // ['A','B','C']\n           *   print(newArray); // ['A','B']\n           * }\n           * </code></div>\n           */\n          p5.prototype.shorten = function(list) {\n            list.pop();\n            return list;\n          };\n\n          /**\n           * Randomizes the order of the elements of an array. Implements\n           * <a href='http://Bost.Ocks.org/mike/shuffle/' target=_blank>\n           * Fisher-Yates Shuffle Algorithm</a>.\n           *\n           * @method shuffle\n           * @param  {Array}   array  Array to shuffle\n           * @param  {Boolean} [bool] modify passed array\n           * @return {Array}   shuffled Array\n           * @example\n           * <div><code>\n           * function setup() {\n           *   var regularArr = ['ABC', 'def', createVector(), TAU, Math.E];\n           *   print(regularArr);\n           *   shuffle(regularArr, true); // force modifications to passed array\n           *   print(regularArr);\n           *\n           *   // By default shuffle() returns a shuffled cloned array:\n           *   var newArr = shuffle(regularArr);\n           *   print(regularArr);\n           *   print(newArr);\n           * }\n           * </code></div>\n           */\n          p5.prototype.shuffle = function(arr, bool) {\n            var isView = ArrayBuffer && ArrayBuffer.isView && ArrayBuffer.isView(arr);\n            arr = bool || isView ? arr : arr.slice();\n\n            var rnd,\n              tmp,\n              idx = arr.length;\n            while (idx > 1) {\n              rnd = (Math.random() * idx) | 0;\n\n              tmp = arr[--idx];\n              arr[idx] = arr[rnd];\n              arr[rnd] = tmp;\n            }\n\n            return arr;\n          };\n\n          /**\n           * Sorts an array of numbers from smallest to largest, or puts an array of\n           * words in alphabetical order. The original array is not modified; a\n           * re-ordered array is returned. The count parameter states the number of\n           * elements to sort. For example, if there are 12 elements in an array and\n           * count is set to 5, only the first 5 elements in the array will be sorted.\n           *\n           * @method sort\n           * @deprecated Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">array.sort()</a> instead.\n           * @param {Array} list Array to sort\n           * @param {Integer} [count] number of elements to sort, starting from 0\n           * @return {Array} the sorted list\n           *\n           * @example\n           * <div class = 'norender'><code>\n           * function setup() {\n           *   var words = ['banana', 'apple', 'pear', 'lime'];\n           *   print(words); // ['banana', 'apple', 'pear', 'lime']\n           *   var count = 4; // length of array\n           *\n           *   words = sort(words, count);\n           *   print(words); // ['apple', 'banana', 'lime', 'pear']\n           * }\n           * </code></div>\n           * <div class = 'norender'><code>\n           * function setup() {\n           *   var numbers = [2, 6, 1, 5, 14, 9, 8, 12];\n           *   print(numbers); // [2, 6, 1, 5, 14, 9, 8, 12]\n           *   var count = 5; // Less than the length of the array\n           *\n           *   numbers = sort(numbers, count);\n           *   print(numbers); // [1,2,5,6,14,9,8,12]\n           * }\n           * </code></div>\n           */\n          p5.prototype.sort = function(list, count) {\n            var arr = count ? list.slice(0, Math.min(count, list.length)) : list;\n            var rest = count ? list.slice(Math.min(count, list.length)) : [];\n            if (typeof arr[0] === 'string') {\n              arr = arr.sort();\n            } else {\n              arr = arr.sort(function(a, b) {\n                return a - b;\n              });\n            }\n            return arr.concat(rest);\n          };\n\n          /**\n           * Inserts a value or an array of values into an existing array. The first\n           * parameter specifies the initial array to be modified, and the second\n           * parameter defines the data to be inserted. The third parameter is an index\n           * value which specifies the array position from which to insert data.\n           * (Remember that array index numbering starts at zero, so the first position\n           * is 0, the second position is 1, and so on.)\n           *\n           * @method splice\n           * @deprecated Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">array.splice()</a> instead.\n           * @param {Array}  list Array to splice into\n           * @param {any}    value value to be spliced in\n           * @param {Integer} position in the array from which to insert data\n           * @return {Array} the list\n           *\n           * @example\n           * <div class = 'norender'><code>\n           * function setup() {\n           *   var myArray = [0, 1, 2, 3, 4];\n           *   var insArray = ['A', 'B', 'C'];\n           *   print(myArray); // [0, 1, 2, 3, 4]\n           *   print(insArray); // ['A','B','C']\n           *\n           *   splice(myArray, insArray, 3);\n           *   print(myArray); // [0,1,2,'A','B','C',3,4]\n           * }\n           * </code></div>\n           */\n          p5.prototype.splice = function(list, value, index) {\n            // note that splice returns spliced elements and not an array\n            Array.prototype.splice.apply(list, [index, 0].concat(value));\n\n            return list;\n          };\n\n          /**\n           * Extracts an array of elements from an existing array. The list parameter\n           * defines the array from which the elements will be copied, and the start\n           * and count parameters specify which elements to extract. If no count is\n           * given, elements will be extracted from the start to the end of the array.\n           * When specifying the start, remember that the first array element is 0.\n           * This function does not change the source array.\n           *\n           * @method subset\n           * @deprecated Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">array.slice()</a> instead.\n           * @param  {Array}  list    Array to extract from\n           * @param  {Integer} start   position to begin\n           * @param  {Integer} [count] number of values to extract\n           * @return {Array}          Array of extracted elements\n           *\n           * @example\n           * <div class = 'norender'><code>\n           * function setup() {\n           *   var myArray = [1, 2, 3, 4, 5];\n           *   print(myArray); // [1, 2, 3, 4, 5]\n           *\n           *   var sub1 = subset(myArray, 0, 3);\n           *   var sub2 = subset(myArray, 2, 2);\n           *   print(sub1); // [1,2,3]\n           *   print(sub2); // [3,4]\n           * }\n           * </code></div>\n           */\n          p5.prototype.subset = function(list, start, count) {\n            if (typeof count !== 'undefined') {\n              return list.slice(start, start + count);\n            } else {\n              return list.slice(start, list.length);\n            }\n          };\n\n          module.exports = p5;\n        },\n        { '../core/main': 24 }\n      ],\n      62: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Data\n           * @submodule Conversion\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          /**\n           * Converts a string to its floating point representation. The contents of a\n           * string must resemble a number, or NaN (not a number) will be returned.\n           * For example, float(\"1234.56\") evaluates to 1234.56, but float(\"giraffe\")\n           * will return NaN.\n           *\n           * When an array of values is passed in, then an array of floats of the same\n           * length is returned.\n           *\n           * @method float\n           * @param {String}  str float string to parse\n           * @return {Number}     floating point representation of string\n           * @example\n           * <div><code>\n           * var str = '20';\n           * var diameter = float(str);\n           * ellipse(width / 2, height / 2, diameter, diameter);\n           * </code></div>\n           * <div class='norender'><code>\n           * print(float('10.31')); // 10.31\n           * print(float('Infinity')); // Infinity\n           * print(float('-Infinity')); // -Infinity\n           * </code></div>\n           *\n           * @alt\n           * 20 by 20 white ellipse in the center of the canvas\n           *\n           */\n          p5.prototype.float = function(str) {\n            if (str instanceof Array) {\n              return str.map(parseFloat);\n            }\n            return parseFloat(str);\n          };\n\n          /**\n           * Converts a boolean, string, or float to its integer representation.\n           * When an array of values is passed in, then an int array of the same length\n           * is returned.\n           *\n           * @method int\n           * @param {String|Boolean|Number}       n value to parse\n           * @param {Integer}       [radix] the radix to convert to (default: 10)\n           * @return {Number}                     integer representation of value\n           *\n           * @example\n           * <div class='norender'><code>\n           * print(int('10')); // 10\n           * print(int(10.31)); // 10\n           * print(int(-10)); // -10\n           * print(int(true)); // 1\n           * print(int(false)); // 0\n           * print(int([false, true, '10.3', 9.8])); // [0, 1, 10, 9]\n           * print(int(Infinity)); // Infinity\n           * print(int('-Infinity')); // -Infinity\n           * </code></div>\n           */\n          /**\n           * @method int\n           * @param {Array} ns                    values to parse\n           * @return {Number[]}                   integer representation of values\n           */\n          p5.prototype.int = function(n, radix) {\n            radix = radix || 10;\n            if (n === Infinity || n === 'Infinity') {\n              return Infinity;\n            } else if (n === -Infinity || n === '-Infinity') {\n              return -Infinity;\n            } else if (typeof n === 'string') {\n              return parseInt(n, radix);\n            } else if (typeof n === 'number') {\n              return n | 0;\n            } else if (typeof n === 'boolean') {\n              return n ? 1 : 0;\n            } else if (n instanceof Array) {\n              return n.map(function(n) {\n                return p5.prototype.int(n, radix);\n              });\n            }\n          };\n\n          /**\n           * Converts a boolean, string or number to its string representation.\n           * When an array of values is passed in, then an array of strings of the same\n           * length is returned.\n           *\n           * @method str\n           * @param {String|Boolean|Number|Array} n value to parse\n           * @return {String}                     string representation of value\n           * @example\n           * <div class='norender'><code>\n           * print(str('10')); // \"10\"\n           * print(str(10.31)); // \"10.31\"\n           * print(str(-10)); // \"-10\"\n           * print(str(true)); // \"true\"\n           * print(str(false)); // \"false\"\n           * print(str([true, '10.3', 9.8])); // [ \"true\", \"10.3\", \"9.8\" ]\n           * </code></div>\n           */\n          p5.prototype.str = function(n) {\n            if (n instanceof Array) {\n              return n.map(p5.prototype.str);\n            } else {\n              return String(n);\n            }\n          };\n\n          /**\n           * Converts a number or string to its boolean representation.\n           * For a number, any non-zero value (positive or negative) evaluates to true,\n           * while zero evaluates to false. For a string, the value \"true\" evaluates to\n           * true, while any other value evaluates to false. When an array of number or\n           * string values is passed in, then a array of booleans of the same length is\n           * returned.\n           *\n           * @method boolean\n           * @param {String|Boolean|Number|Array} n value to parse\n           * @return {Boolean}                    boolean representation of value\n           * @example\n           * <div class='norender'><code>\n           * print(boolean(0)); // false\n           * print(boolean(1)); // true\n           * print(boolean('true')); // true\n           * print(boolean('abcd')); // false\n           * print(boolean([0, 12, 'true'])); // [false, true, true]\n           * </code></div>\n           */\n          p5.prototype.boolean = function(n) {\n            if (typeof n === 'number') {\n              return n !== 0;\n            } else if (typeof n === 'string') {\n              return n.toLowerCase() === 'true';\n            } else if (typeof n === 'boolean') {\n              return n;\n            } else if (n instanceof Array) {\n              return n.map(p5.prototype.boolean);\n            }\n          };\n\n          /**\n           * Converts a number, string representation of a number, or boolean to its byte\n           * representation. A byte can be only a whole number between -128 and 127, so\n           * when a value outside of this range is converted, it wraps around to the\n           * corresponding byte representation. When an array of number, string or boolean\n           * values is passed in, then an array of bytes the same length is returned.\n           *\n           * @method byte\n           * @param {String|Boolean|Number}       n value to parse\n           * @return {Number}                     byte representation of value\n           *\n           * @example\n           * <div class='norender'><code>\n           * print(byte(127)); // 127\n           * print(byte(128)); // -128\n           * print(byte(23.4)); // 23\n           * print(byte('23.4')); // 23\n           * print(byte('hello')); // NaN\n           * print(byte(true)); // 1\n           * print(byte([0, 255, '100'])); // [0, -1, 100]\n           * </code></div>\n           */\n          /**\n           * @method byte\n           * @param {Array} ns                   values to parse\n           * @return {Number[]}                  array of byte representation of values\n           */\n          p5.prototype.byte = function(n) {\n            var nn = p5.prototype.int(n, 10);\n            if (typeof nn === 'number') {\n              return (nn + 128) % 256 - 128;\n            } else if (nn instanceof Array) {\n              return nn.map(p5.prototype.byte);\n            }\n          };\n\n          /**\n           * Converts a number or string to its corresponding single-character\n           * string representation. If a string parameter is provided, it is first\n           * parsed as an integer and then translated into a single-character string.\n           * When an array of number or string values is passed in, then an array of\n           * single-character strings of the same length is returned.\n           *\n           * @method char\n           * @param {String|Number}       n value to parse\n           * @return {String}             string representation of value\n           *\n           * @example\n           * <div class='norender'><code>\n           * print(char(65)); // \"A\"\n           * print(char('65')); // \"A\"\n           * print(char([65, 66, 67])); // [ \"A\", \"B\", \"C\" ]\n           * print(join(char([65, 66, 67]), '')); // \"ABC\"\n           * </code></div>\n           */\n          /**\n           * @method char\n           * @param {Array} ns              values to parse\n           * @return {String[]}             array of string representation of values\n           */\n          p5.prototype.char = function(n) {\n            if (typeof n === 'number' && !isNaN(n)) {\n              return String.fromCharCode(n);\n            } else if (n instanceof Array) {\n              return n.map(p5.prototype.char);\n            } else if (typeof n === 'string') {\n              return p5.prototype.char(parseInt(n, 10));\n            }\n          };\n\n          /**\n           * Converts a single-character string to its corresponding integer\n           * representation. When an array of single-character string values is passed\n           * in, then an array of integers of the same length is returned.\n           *\n           * @method unchar\n           * @param {String} n     value to parse\n           * @return {Number}      integer representation of value\n           *\n           * @example\n           * <div class='norender'><code>\n           * print(unchar('A')); // 65\n           * print(unchar(['A', 'B', 'C'])); // [ 65, 66, 67 ]\n           * print(unchar(split('ABC', ''))); // [ 65, 66, 67 ]\n           * </code></div>\n           */\n          /**\n           * @method unchar\n           * @param {Array} ns       values to parse\n           * @return {Number[]}      integer representation of values\n           */\n          p5.prototype.unchar = function(n) {\n            if (typeof n === 'string' && n.length === 1) {\n              return n.charCodeAt(0);\n            } else if (n instanceof Array) {\n              return n.map(p5.prototype.unchar);\n            }\n          };\n\n          /**\n           * Converts a number to a string in its equivalent hexadecimal notation. If a\n           * second parameter is passed, it is used to set the number of characters to\n           * generate in the hexadecimal notation. When an array is passed in, an\n           * array of strings in hexadecimal notation of the same length is returned.\n           *\n           * @method hex\n           * @param {Number} n     value to parse\n           * @param {Number} [digits]\n           * @return {String}      hexadecimal string representation of value\n           *\n           * @example\n           * <div class='norender'><code>\n           * print(hex(255)); // \"000000FF\"\n           * print(hex(255, 6)); // \"0000FF\"\n           * print(hex([0, 127, 255], 6)); // [ \"000000\", \"00007F\", \"0000FF\" ]\n           * print(Infinity); // \"FFFFFFFF\"\n           * print(-Infinity); // \"00000000\"\n           * </code></div>\n           */\n          /**\n           * @method hex\n           * @param {Number[]} ns    array of values to parse\n           * @param {Number} [digits]\n           * @return {String[]}      hexadecimal string representation of values\n           */\n          p5.prototype.hex = function(n, digits) {\n            digits = digits === undefined || digits === null ? (digits = 8) : digits;\n            if (n instanceof Array) {\n              return n.map(function(n) {\n                return p5.prototype.hex(n, digits);\n              });\n            } else if (n === Infinity || n === -Infinity) {\n              var c = n === Infinity ? 'F' : '0';\n              return c.repeat(digits);\n            } else if (typeof n === 'number') {\n              if (n < 0) {\n                n = 0xffffffff + n + 1;\n              }\n              var hex = Number(n)\n                .toString(16)\n                .toUpperCase();\n              while (hex.length < digits) {\n                hex = '0' + hex;\n              }\n              if (hex.length >= digits) {\n                hex = hex.substring(hex.length - digits, hex.length);\n              }\n              return hex;\n            }\n          };\n\n          /**\n           * Converts a string representation of a hexadecimal number to its equivalent\n           * integer value. When an array of strings in hexadecimal notation is passed\n           * in, an array of integers of the same length is returned.\n           *\n           * @method unhex\n           * @param {String} n value to parse\n           * @return {Number}      integer representation of hexadecimal value\n           *\n           * @example\n           * <div class='norender'><code>\n           * print(unhex('A')); // 10\n           * print(unhex('FF')); // 255\n           * print(unhex(['FF', 'AA', '00'])); // [ 255, 170, 0 ]\n           * </code></div>\n           */\n          /**\n           * @method unhex\n           * @param {Array} ns values to parse\n           * @return {Number[]}      integer representations of hexadecimal value\n           */\n          p5.prototype.unhex = function(n) {\n            if (n instanceof Array) {\n              return n.map(p5.prototype.unhex);\n            } else {\n              return parseInt('0x' + n, 16);\n            }\n          };\n\n          module.exports = p5;\n        },\n        { '../core/main': 24 }\n      ],\n      63: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Data\n           * @submodule String Functions\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          _dereq_('../core/error_helpers');\n\n          //return p5; //LM is this a mistake?\n\n          /**\n           * Combines an array of Strings into one String, each separated by the\n           * character(s) used for the separator parameter. To join arrays of ints or\n           * floats, it's necessary to first convert them to Strings using <a href=\"#/p5/nf\">nf()</a> or\n           * nfs().\n           *\n           * @method join\n           * @param  {Array}  list      array of Strings to be joined\n           * @param  {String} separator String to be placed between each item\n           * @return {String}           joined String\n           * @example\n           * <div>\n           * <code>\n           * var array = ['Hello', 'world!'];\n           * var separator = ' ';\n           * var message = join(array, separator);\n           * text(message, 5, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * \"hello world!\" displayed middle left of canvas.\n           *\n           */\n          p5.prototype.join = function(list, separator) {\n            p5._validateParameters('join', arguments);\n            return list.join(separator);\n          };\n\n          /**\n           * This function is used to apply a regular expression to a piece of text,\n           * and return matching groups (elements found inside parentheses) as a\n           * String array. If there are no matches, a null value will be returned.\n           * If no groups are specified in the regular expression, but the sequence\n           * matches, an array of length 1 (with the matched text as the first element\n           * of the array) will be returned.\n           * <br><br>\n           * To use the function, first check to see if the result is null. If the\n           * result is null, then the sequence did not match at all. If the sequence\n           * did match, an array is returned.\n           * <br><br>\n           * If there are groups (specified by sets of parentheses) in the regular\n           * expression, then the contents of each will be returned in the array.\n           * Element [0] of a regular expression match returns the entire matching\n           * string, and the match groups start at element [1] (the first group is [1],\n           * the second [2], and so on).\n           *\n           * @method match\n           * @param  {String} str    the String to be searched\n           * @param  {String} regexp the regexp to be used for matching\n           * @return {String[]}      Array of Strings found\n           * @example\n           * <div>\n           * <code>\n           * var string = 'Hello p5js*!';\n           * var regexp = 'p5js\\\\*';\n           * var m = match(string, regexp);\n           * text(m, 5, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * \"p5js*\" displayed middle left of canvas.\n           *\n           */\n          p5.prototype.match = function(str, reg) {\n            p5._validateParameters('match', arguments);\n            return str.match(reg);\n          };\n\n          /**\n           * This function is used to apply a regular expression to a piece of text,\n           * and return a list of matching groups (elements found inside parentheses)\n           * as a two-dimensional String array. If there are no matches, a null value\n           * will be returned. If no groups are specified in the regular expression,\n           * but the sequence matches, a two dimensional array is still returned, but\n           * the second dimension is only of length one.\n           * <br><br>\n           * To use the function, first check to see if the result is null. If the\n           * result is null, then the sequence did not match at all. If the sequence\n           * did match, a 2D array is returned.\n           * <br><br>\n           * If there are groups (specified by sets of parentheses) in the regular\n           * expression, then the contents of each will be returned in the array.\n           * Assuming a loop with counter variable i, element [i][0] of a regular\n           * expression match returns the entire matching string, and the match groups\n           * start at element [i][1] (the first group is [i][1], the second [i][2],\n           * and so on).\n           *\n           * @method matchAll\n           * @param  {String} str    the String to be searched\n           * @param  {String} regexp the regexp to be used for matching\n           * @return {String[]}         2d Array of Strings found\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * var string = 'Hello p5js*! Hello world!';\n           * var regexp = 'Hello';\n           * matchAll(string, regexp);\n           * </code>\n           * </div>\n           */\n          p5.prototype.matchAll = function(str, reg) {\n            p5._validateParameters('matchAll', arguments);\n            var re = new RegExp(reg, 'g');\n            var match = re.exec(str);\n            var matches = [];\n            while (match !== null) {\n              matches.push(match);\n              // matched text: match[0]\n              // match start: match.index\n              // capturing group n: match[n]\n              match = re.exec(str);\n            }\n            return matches;\n          };\n\n          /**\n           * Utility function for formatting numbers into strings. There are two\n           * versions: one for formatting floats, and one for formatting ints.\n           * The values for the digits, left, and right parameters should always\n           * be positive integers.\n           * (NOTE): Be cautious when using left and right parameters as it prepends numbers of 0's if the parameter\n           * if greater than the current length of the number.\n           * For example if number is 123.2 and left parameter passed is 4 which is greater than length of 123\n           * (integer part) i.e 3 than result will be 0123.2. Same case for right parameter i.e. if right is 3 than\n           * the result will be 123.200.\n           *\n           * @method nf\n           * @param {Number|String}       num      the Number to format\n           * @param {Integer|String}      [left]   number of digits to the left of the\n           *                                decimal point\n           * @param {Integer|String}      [right]  number of digits to the right of the\n           *                                decimal point\n           * @return {String}               formatted String\n           *\n           * @example\n           * <div>\n           * <code>\n           * var myFont;\n           * function preload() {\n           *   myFont = loadFont('assets/fonts/inconsolata.ttf');\n           * }\n           * function setup() {\n           *   background(200);\n           *   var num1 = 321;\n           *   var num2 = -1321;\n           *\n           *   noStroke();\n           *   fill(0);\n           *   textFont(myFont);\n           *   textSize(22);\n           *\n           *   text(nf(num1, 4, 2), 10, 30);\n           *   text(nf(num2, 4, 2), 10, 80);\n           *   // Draw dividing line\n           *   stroke(120);\n           *   line(0, 50, width, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * \"0321.00\" middle top, -1321.00\" middle bottom canvas\n           */\n          /**\n           * @method nf\n           * @param {Array}        nums     the Numbers to format\n           * @param {Integer|String}      [left]\n           * @param {Integer|String}      [right]\n           * @return {String[]}                formatted Strings\n           */\n          p5.prototype.nf = function(nums, left, right) {\n            p5._validateParameters('nf', arguments);\n            if (nums instanceof Array) {\n              return nums.map(function(x) {\n                return doNf(x, left, right);\n              });\n            } else {\n              var typeOfFirst = Object.prototype.toString.call(nums);\n              if (typeOfFirst === '[object Arguments]') {\n                if (nums.length === 3) {\n                  return this.nf(nums[0], nums[1], nums[2]);\n                } else if (nums.length === 2) {\n                  return this.nf(nums[0], nums[1]);\n                } else {\n                  return this.nf(nums[0]);\n                }\n              } else {\n                return doNf(nums, left, right);\n              }\n            }\n          };\n\n          function doNf(num, left, right) {\n            var neg = num < 0;\n            var n = neg ? num.toString().substring(1) : num.toString();\n            var decimalInd = n.indexOf('.');\n            var intPart = decimalInd !== -1 ? n.substring(0, decimalInd) : n;\n            var decPart = decimalInd !== -1 ? n.substring(decimalInd + 1) : '';\n            var str = neg ? '-' : '';\n            if (typeof right !== 'undefined') {\n              var decimal = '';\n              if (decimalInd !== -1 || right - decPart.length > 0) {\n                decimal = '.';\n              }\n              if (decPart.length > right) {\n                decPart = decPart.substring(0, right);\n              }\n              for (var i = 0; i < left - intPart.length; i++) {\n                str += '0';\n              }\n              str += intPart;\n              str += decimal;\n              str += decPart;\n              for (var j = 0; j < right - decPart.length; j++) {\n                str += '0';\n              }\n              return str;\n            } else {\n              for (var k = 0; k < Math.max(left - intPart.length, 0); k++) {\n                str += '0';\n              }\n              str += n;\n              return str;\n            }\n          }\n\n          /**\n           * Utility function for formatting numbers into strings and placing\n           * appropriate commas to mark units of 1000. There are two versions: one\n           * for formatting ints, and one for formatting an array of ints. The value\n           * for the right parameter should always be a positive integer.\n           *\n           * @method nfc\n           * @param  {Number|String}   num     the Number to format\n           * @param  {Integer|String}  [right] number of digits to the right of the\n           *                                  decimal point\n           * @return {String}           formatted String\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   background(200);\n           *   var num = 11253106.115;\n           *   var numArr = [1, 1, 2];\n           *\n           *   noStroke();\n           *   fill(0);\n           *   textSize(12);\n           *\n           *   // Draw formatted numbers\n           *   text(nfc(num, 4), 10, 30);\n           *   text(nfc(numArr, 2), 10, 80);\n           *\n           *   // Draw dividing line\n           *   stroke(120);\n           *   line(0, 50, width, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * \"11,253,106.115\" top middle and \"1.00,1.00,2.00\" displayed bottom mid\n           */\n          /**\n           * @method nfc\n           * @param  {Array}    nums     the Numbers to format\n           * @param  {Integer|String}  [right]\n           * @return {String[]}           formatted Strings\n           */\n          p5.prototype.nfc = function(num, right) {\n            p5._validateParameters('nfc', arguments);\n            if (num instanceof Array) {\n              return num.map(function(x) {\n                return doNfc(x, right);\n              });\n            } else {\n              return doNfc(num, right);\n            }\n          };\n          function doNfc(num, right) {\n            num = num.toString();\n            var dec = num.indexOf('.');\n            var rem = dec !== -1 ? num.substring(dec) : '';\n            var n = dec !== -1 ? num.substring(0, dec) : num;\n            n = n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n            if (right === 0) {\n              rem = '';\n            } else if (typeof right !== 'undefined') {\n              if (right > rem.length) {\n                rem += dec === -1 ? '.' : '';\n                var len = right - rem.length + 1;\n                for (var i = 0; i < len; i++) {\n                  rem += '0';\n                }\n              } else {\n                rem = rem.substring(0, right + 1);\n              }\n            }\n            return n + rem;\n          }\n\n          /**\n           * Utility function for formatting numbers into strings. Similar to <a href=\"#/p5/nf\">nf()</a> but\n           * puts a \"+\" in front of positive numbers and a \"-\" in front of negative\n           * numbers. There are two versions: one for formatting floats, and one for\n           * formatting ints. The values for left, and right parameters\n           * should always be positive integers.\n           *\n           * @method nfp\n           * @param {Number} num      the Number to format\n           * @param {Integer}      [left]   number of digits to the left of the decimal\n           *                                point\n           * @param {Integer}      [right]  number of digits to the right of the\n           *                                decimal point\n           * @return {String}         formatted String\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   background(200);\n           *   var num1 = 11253106.115;\n           *   var num2 = -11253106.115;\n           *\n           *   noStroke();\n           *   fill(0);\n           *   textSize(12);\n           *\n           *   // Draw formatted numbers\n           *   text(nfp(num1, 4, 2), 10, 30);\n           *   text(nfp(num2, 4, 2), 10, 80);\n           *\n           *   // Draw dividing line\n           *   stroke(120);\n           *   line(0, 50, width, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * \"+11253106.11\" top middle and \"-11253106.11\" displayed bottom middle\n           */\n          /**\n           * @method nfp\n           * @param {Number[]} nums      the Numbers to format\n           * @param {Integer}      [left]\n           * @param {Integer}      [right]\n           * @return {String[]}         formatted Strings\n           */\n          p5.prototype.nfp = function() {\n            p5._validateParameters('nfp', arguments);\n            var nfRes = p5.prototype.nf.apply(this, arguments);\n            if (nfRes instanceof Array) {\n              return nfRes.map(addNfp);\n            } else {\n              return addNfp(nfRes);\n            }\n          };\n\n          function addNfp(num) {\n            return parseFloat(num) > 0 ? '+' + num.toString() : num.toString();\n          }\n\n          /**\n           * Utility function for formatting numbers into strings. Similar to <a href=\"#/p5/nf\">nf()</a> but\n           * puts an additional \"_\" (space) in front of positive numbers just in case to align it with negative\n           * numbers which includes \"-\" (minus) sign.\n           * The main usecase of nfs() can be seen when one wants to align the digits (place values) of a non-negative\n           * number with some negative number (See the example to get a clear picture).\n           * There are two versions: one for formatting float, and one for formatting int.\n           * The values for the digits, left, and right parameters should always be positive integers.\n           * (IMP): The result on the canvas basically the expected alignment can vary based on the typeface you are using.\n           * (NOTE): Be cautious when using left and right parameters as it prepends numbers of 0's if the parameter\n           * if greater than the current length of the number.\n           * For example if number is 123.2 and left parameter passed is 4 which is greater than length of 123\n           * (integer part) i.e 3 than result will be 0123.2. Same case for right parameter i.e. if right is 3 than\n           * the result will be 123.200.\n           *\n           * @method nfs\n           * @param {Number}       num      the Number to format\n           * @param {Integer}      [left]   number of digits to the left of the decimal\n           *                                point\n           * @param {Integer}      [right]  number of digits to the right of the\n           *                                decimal point\n           * @return {String}         formatted String\n           *\n           * @example\n           * <div>\n           * <code>\n           * var myFont;\n           * function preload() {\n           *   myFont = loadFont('assets/fonts/inconsolata.ttf');\n           * }\n           * function setup() {\n           *   background(200);\n           *   var num1 = 321;\n           *   var num2 = -1321;\n           *\n           *   noStroke();\n           *   fill(0);\n           *   textFont(myFont);\n           *   textSize(22);\n           *\n           *   // nfs() aligns num1 (positive number) with num2 (negative number) by\n           *   // adding a blank space in front of the num1 (positive number)\n           *   // [left = 4] in num1 add one 0 in front, to align the digits with num2\n           *   // [right = 2] in num1 and num2 adds two 0's after both numbers\n           *   // To see the differences check the example of nf() too.\n           *   text(nfs(num1, 4, 2), 10, 30);\n           *   text(nfs(num2, 4, 2), 10, 80);\n           *   // Draw dividing line\n           *   stroke(120);\n           *   line(0, 50, width, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * \"0321.00\" top middle and \"-1321.00\" displayed bottom middle\n           */\n          /**\n           * @method nfs\n           * @param {Array}        nums     the Numbers to format\n           * @param {Integer}      [left]\n           * @param {Integer}      [right]\n           * @return {String[]}         formatted Strings\n           */\n          p5.prototype.nfs = function() {\n            p5._validateParameters('nfs', arguments);\n            var nfRes = p5.prototype.nf.apply(this, arguments);\n            if (nfRes instanceof Array) {\n              return nfRes.map(addNfs);\n            } else {\n              return addNfs(nfRes);\n            }\n          };\n\n          function addNfs(num) {\n            return parseFloat(num) >= 0 ? ' ' + num.toString() : num.toString();\n          }\n\n          /**\n           * The <a href=\"#/p5/split\">split()</a> function maps to String.split(), it breaks a String into\n           * pieces using a character or string as the delimiter. The delim parameter\n           * specifies the character or characters that mark the boundaries between\n           * each piece. A String[] array is returned that contains each of the pieces.\n           *\n           * The <a href=\"#/p5/splitTokens\">splitTokens()</a> function works in a similar fashion, except that it\n           * splits using a range of characters instead of a specific character or\n           * sequence.\n           *\n           * @method split\n           * @param  {String} value the String to be split\n           * @param  {String} delim the String used to separate the data\n           * @return {String[]}  Array of Strings\n           * @example\n           * <div>\n           * <code>\n           * var names = 'Pat,Xio,Alex';\n           * var splitString = split(names, ',');\n           * text(splitString[0], 5, 30);\n           * text(splitString[1], 5, 50);\n           * text(splitString[2], 5, 70);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * \"pat\" top left, \"Xio\" mid left and \"Alex\" displayed bottom left\n           *\n           */\n          p5.prototype.split = function(str, delim) {\n            p5._validateParameters('split', arguments);\n            return str.split(delim);\n          };\n\n          /**\n           * The <a href=\"#/p5/splitTokens\">splitTokens()</a> function splits a String at one or many character\n           * delimiters or \"tokens.\" The delim parameter specifies the character or\n           * characters to be used as a boundary.\n           * <br><br>\n           * If no delim characters are specified, any whitespace character is used to\n           * split. Whitespace characters include tab (\\t), line feed (\\n), carriage\n           * return (\\r), form feed (\\f), and space.\n           *\n           * @method splitTokens\n           * @param  {String} value   the String to be split\n           * @param  {String} [delim] list of individual Strings that will be used as\n           *                          separators\n           * @return {String[]}          Array of Strings\n           * @example\n           * <div class = \"norender\">\n           * <code>\n           * function setup() {\n           *   var myStr = 'Mango, Banana, Lime';\n           *   var myStrArr = splitTokens(myStr, ',');\n           *\n           *   print(myStrArr); // prints : [\"Mango\",\" Banana\",\" Lime\"]\n           * }\n           * </code>\n           * </div>\n           */\n          p5.prototype.splitTokens = function(value, delims) {\n            p5._validateParameters('splitTokens', arguments);\n            var d;\n            if (typeof delims !== 'undefined') {\n              var str = delims;\n              var sqc = /\\]/g.exec(str);\n              var sqo = /\\[/g.exec(str);\n              if (sqo && sqc) {\n                str = str.slice(0, sqc.index) + str.slice(sqc.index + 1);\n                sqo = /\\[/g.exec(str);\n                str = str.slice(0, sqo.index) + str.slice(sqo.index + 1);\n                d = new RegExp('[\\\\[' + str + '\\\\]]', 'g');\n              } else if (sqc) {\n                str = str.slice(0, sqc.index) + str.slice(sqc.index + 1);\n                d = new RegExp('[' + str + '\\\\]]', 'g');\n              } else if (sqo) {\n                str = str.slice(0, sqo.index) + str.slice(sqo.index + 1);\n                d = new RegExp('[' + str + '\\\\[]', 'g');\n              } else {\n                d = new RegExp('[' + str + ']', 'g');\n              }\n            } else {\n              d = /\\s/g;\n            }\n            return value.split(d).filter(function(n) {\n              return n;\n            });\n          };\n\n          /**\n           * Removes whitespace characters from the beginning and end of a String. In\n           * addition to standard whitespace characters such as space, carriage return,\n           * and tab, this function also removes the Unicode \"nbsp\" character.\n           *\n           * @method trim\n           * @param  {String} str a String to be trimmed\n           * @return {String}       a trimmed String\n           *\n           * @example\n           * <div>\n           * <code>\n           * var string = trim('  No new lines\\n   ');\n           * text(string + ' here', 2, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * \"No new lines here\" displayed center canvas\n           */\n          /**\n           * @method trim\n           * @param  {Array} strs an Array of Strings to be trimmed\n           * @return {String[]}   an Array of trimmed Strings\n           */\n          p5.prototype.trim = function(str) {\n            p5._validateParameters('trim', arguments);\n            if (str instanceof Array) {\n              return str.map(this.trim);\n            } else {\n              return str.trim();\n            }\n          };\n\n          module.exports = p5;\n        },\n        { '../core/error_helpers': 20, '../core/main': 24 }\n      ],\n      64: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module IO\n           * @submodule Time & Date\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          /**\n           * p5.js communicates with the clock on your computer. The <a href=\"#/p5/day\">day()</a> function\n           * returns the current day as a value from 1 - 31.\n           *\n           * @method day\n           * @return {Integer} the current day\n           * @example\n           * <div>\n           * <code>\n           * var d = day();\n           * text('Current day: \\n' + d, 5, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Current day is displayed\n           *\n           */\n          p5.prototype.day = function() {\n            return new Date().getDate();\n          };\n\n          /**\n           * p5.js communicates with the clock on your computer. The <a href=\"#/p5/hour\">hour()</a> function\n           * returns the current hour as a value from 0 - 23.\n           *\n           * @method hour\n           * @return {Integer} the current hour\n           * @example\n           * <div>\n           * <code>\n           * var h = hour();\n           * text('Current hour:\\n' + h, 5, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Current hour is displayed\n           *\n           */\n          p5.prototype.hour = function() {\n            return new Date().getHours();\n          };\n\n          /**\n           * p5.js communicates with the clock on your computer. The <a href=\"#/p5/minute\">minute()</a> function\n           * returns the current minute as a value from 0 - 59.\n           *\n           * @method minute\n           * @return {Integer} the current minute\n           * @example\n           * <div>\n           * <code>\n           * var m = minute();\n           * text('Current minute: \\n' + m, 5, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Current minute is displayed\n           *\n           */\n          p5.prototype.minute = function() {\n            return new Date().getMinutes();\n          };\n\n          /**\n           * Returns the number of milliseconds (thousandths of a second) since\n           * starting the program. This information is often used for timing events and\n           * animation sequences.\n           *\n           * @method millis\n           * @return {Number} the number of milliseconds since starting the program\n           * @example\n           * <div>\n           * <code>\n           * var millisecond = millis();\n           * text('Milliseconds \\nrunning: \\n' + millisecond, 5, 40);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * number of milliseconds since program has started displayed\n           *\n           */\n          p5.prototype.millis = function() {\n            return window.performance.now();\n          };\n\n          /**\n           * p5.js communicates with the clock on your computer. The <a href=\"#/p5/month\">month()</a> function\n           * returns the current month as a value from 1 - 12.\n           *\n           * @method month\n           * @return {Integer} the current month\n           * @example\n           * <div>\n           * <code>\n           * var m = month();\n           * text('Current month: \\n' + m, 5, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Current month is displayed\n           *\n           */\n          p5.prototype.month = function() {\n            return new Date().getMonth() + 1; //January is 0!\n          };\n\n          /**\n           * p5.js communicates with the clock on your computer. The <a href=\"#/p5/second\">second()</a> function\n           * returns the current second as a value from 0 - 59.\n           *\n           * @method second\n           * @return {Integer} the current second\n           * @example\n           * <div>\n           * <code>\n           * var s = second();\n           * text('Current second: \\n' + s, 5, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Current second is displayed\n           *\n           */\n          p5.prototype.second = function() {\n            return new Date().getSeconds();\n          };\n\n          /**\n           * p5.js communicates with the clock on your computer. The <a href=\"#/p5/year\">year()</a> function\n           * returns the current year as an integer (2014, 2015, 2016, etc).\n           *\n           * @method year\n           * @return {Integer} the current year\n           * @example\n           * <div>\n           * <code>\n           * var y = year();\n           * text('Current year: \\n' + y, 5, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Current year is displayed\n           *\n           */\n          p5.prototype.year = function() {\n            return new Date().getFullYear();\n          };\n\n          module.exports = p5;\n        },\n        { '../core/main': 24 }\n      ],\n      65: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Shape\n           * @submodule 3D Primitives\n           * @for p5\n           * @requires core\n           * @requires p5.Geometry\n           */\n\n          'use strict';\n          var p5 = _dereq_('../core/main');\n          _dereq_('./p5.Geometry');\n          var constants = _dereq_('../core/constants');\n\n          /**\n           * Draw a plane with given a width and height\n           * @method plane\n           * @param  {Number} [width]    width of the plane\n           * @param  {Number} [height]   height of the plane\n           * @param  {Integer} [detailX]  Optional number of triangle\n           *                             subdivisions in x-dimension\n           * @param {Integer} [detailY]   Optional number of triangle\n           *                             subdivisions in y-dimension\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // draw a plane\n           * // with width 50 and height 50\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   plane(50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Nothing displayed on canvas\n           * Rotating interior view of a box with sides that change color.\n           * 3d red and green gradient.\n           * Rotating interior view of a cylinder with sides that change color.\n           * Rotating view of a cylinder with sides that change color.\n           * 3d red and green gradient.\n           * rotating view of a multi-colored cylinder with concave sides.\n           */\n          p5.prototype.plane = function(width, height, detailX, detailY) {\n            this._assert3d('plane');\n            p5._validateParameters('plane', arguments);\n            if (typeof width === 'undefined') {\n              width = 50;\n            }\n            if (typeof height === 'undefined') {\n              height = width;\n            }\n\n            if (typeof detailX === 'undefined') {\n              detailX = 1;\n            }\n            if (typeof detailY === 'undefined') {\n              detailY = 1;\n            }\n\n            var gId = 'plane|' + detailX + '|' + detailY;\n\n            if (!this._renderer.geometryInHash(gId)) {\n              var _plane = function _plane() {\n                var u, v, p;\n                for (var i = 0; i <= this.detailY; i++) {\n                  v = i / this.detailY;\n                  for (var j = 0; j <= this.detailX; j++) {\n                    u = j / this.detailX;\n                    p = new p5.Vector(u - 0.5, v - 0.5, 0);\n                    this.vertices.push(p);\n                    this.uvs.push(u, v);\n                  }\n                }\n              };\n              var planeGeom = new p5.Geometry(detailX, detailY, _plane);\n              planeGeom.computeFaces().computeNormals();\n              if (detailX <= 1 && detailY <= 1) {\n                planeGeom._makeTriangleEdges()._edgesToVertices();\n              } else {\n                console.log(\n                  'Cannot draw stroke on plane objects with more' +\n                    ' than 1 detailX or 1 detailY'\n                );\n              }\n              this._renderer.createBuffers(gId, planeGeom);\n            }\n\n            this._renderer.drawBuffersScaled(gId, width, height, 1);\n            return this;\n          };\n\n          /**\n           * Draw a box with given width, height and depth\n           * @method  box\n           * @param  {Number} [width]     width of the box\n           * @param  {Number} [Height]    height of the box\n           * @param  {Number} [depth]     depth of the box\n           * @param {Integer} [detailX]  Optional number of triangle\n           *                            subdivisions in x-dimension\n           * @param {Integer} [detailY]  Optional number of triangle\n           *                            subdivisions in y-dimension\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // draw a spinning box\n           * // with width, height and depth of 50\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   box(50);\n           * }\n           * </code>\n           * </div>\n           */\n          p5.prototype.box = function(width, height, depth, detailX, detailY) {\n            this._assert3d('box');\n            p5._validateParameters('box', arguments);\n            if (typeof width === 'undefined') {\n              width = 50;\n            }\n            if (typeof height === 'undefined') {\n              height = width;\n            }\n            if (typeof depth === 'undefined') {\n              depth = height;\n            }\n\n            var perPixelLighting =\n              this._renderer.attributes && this._renderer.attributes.perPixelLighting;\n            if (typeof detailX === 'undefined') {\n              detailX = perPixelLighting ? 1 : 4;\n            }\n            if (typeof detailY === 'undefined') {\n              detailY = perPixelLighting ? 1 : 4;\n            }\n\n            var gId = 'box|' + detailX + '|' + detailY;\n            if (!this._renderer.geometryInHash(gId)) {\n              var _box = function _box() {\n                var cubeIndices = [\n                  [0, 4, 2, 6], // -1, 0, 0],// -x\n                  [1, 3, 5, 7], // +1, 0, 0],// +x\n                  [0, 1, 4, 5], // 0, -1, 0],// -y\n                  [2, 6, 3, 7], // 0, +1, 0],// +y\n                  [0, 2, 1, 3], // 0, 0, -1],// -z\n                  [4, 5, 6, 7] // 0, 0, +1] // +z\n                ];\n                //using strokeIndices instead of faces for strokes\n                //to avoid diagonal stroke lines across face of box\n                this.strokeIndices = [\n                  [0, 1],\n                  [1, 3],\n                  [3, 2],\n                  [6, 7],\n                  [8, 9],\n                  [9, 11],\n                  [14, 15],\n                  [16, 17],\n                  [17, 19],\n                  [18, 19],\n                  [20, 21],\n                  [22, 23]\n                ];\n\n                for (var i = 0; i < cubeIndices.length; i++) {\n                  var cubeIndex = cubeIndices[i];\n                  var v = i * 4;\n                  for (var j = 0; j < 4; j++) {\n                    var d = cubeIndex[j];\n                    //inspired by lightgl:\n                    //https://github.com/evanw/lightgl.js\n                    //octants:https://en.wikipedia.org/wiki/Octant_(solid_geometry)\n                    var octant = new p5.Vector(\n                      ((d & 1) * 2 - 1) / 2,\n                      ((d & 2) - 1) / 2,\n                      ((d & 4) / 2 - 1) / 2\n                    );\n\n                    this.vertices.push(octant);\n                    this.uvs.push(j & 1, (j & 2) / 2);\n                  }\n                  this.faces.push([v, v + 1, v + 2]);\n                  this.faces.push([v + 2, v + 1, v + 3]);\n                }\n              };\n              var boxGeom = new p5.Geometry(detailX, detailY, _box);\n              boxGeom.computeNormals();\n              if (detailX <= 4 && detailY <= 4) {\n                boxGeom._makeTriangleEdges()._edgesToVertices();\n              } else {\n                console.log(\n                  'Cannot draw stroke on box objects with more' +\n                    ' than 4 detailX or 4 detailY'\n                );\n              }\n              //initialize our geometry buffer with\n              //the key val pair:\n              //geometry Id, Geom object\n              this._renderer.createBuffers(gId, boxGeom);\n            }\n            this._renderer.drawBuffersScaled(gId, width, height, depth);\n\n            return this;\n          };\n\n          /**\n           * Draw a sphere with given radius\n           * @method sphere\n           * @param  {Number} [radius]          radius of circle\n           * @param  {Integer} [detailX]        number of segments,\n           *                                    the more segments the smoother geometry\n           *                                    default is 24\n           * @param  {Integer} [detailY]        number of segments,\n           *                                    the more segments the smoother geometry\n           *                                    default is 16\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // draw a sphere with radius 40\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   sphere(40);\n           * }\n           * </code>\n           * </div>\n           */\n          p5.prototype.sphere = function(radius, detailX, detailY) {\n            this._assert3d('sphere');\n            p5._validateParameters('sphere', arguments);\n            if (typeof radius === 'undefined') {\n              radius = 50;\n            }\n            if (typeof detailX === 'undefined') {\n              detailX = 24;\n            }\n            if (typeof detailY === 'undefined') {\n              detailY = 16;\n            }\n\n            this.ellipsoid(radius, radius, radius, detailX, detailY);\n\n            return this;\n          };\n\n          /**\n           * @private\n           * Helper function for creating both cones and cyllinders\n           * Will only generate well-defined geometry when bottomRadius, height > 0\n           * and topRadius >= 0\n           * If topRadius == 0, topCap should be false\n           */\n          var _truncatedCone = function _truncatedCone(\n            bottomRadius,\n            topRadius,\n            height,\n            detailX,\n            detailY,\n            bottomCap,\n            topCap\n          ) {\n            bottomRadius = bottomRadius <= 0 ? 1 : bottomRadius;\n            topRadius = topRadius < 0 ? 0 : topRadius;\n            height = height <= 0 ? bottomRadius : height;\n            detailX = detailX < 3 ? 3 : detailX;\n            detailY = detailY < 1 ? 1 : detailY;\n            bottomCap = bottomCap === undefined ? true : bottomCap;\n            topCap = topCap === undefined ? topRadius !== 0 : topCap;\n            var start = bottomCap ? -2 : 0;\n            var end = detailY + (topCap ? 2 : 0);\n            //ensure constant slant for interior vertex normals\n            var slant = Math.atan2(bottomRadius - topRadius, height);\n            var sinSlant = Math.sin(slant);\n            var cosSlant = Math.cos(slant);\n            var yy, ii, jj;\n            for (yy = start; yy <= end; ++yy) {\n              var v = yy / detailY;\n              var y = height * v;\n              var ringRadius;\n              if (yy < 0) {\n                //for the bottomCap edge\n                y = 0;\n                v = 0;\n                ringRadius = bottomRadius;\n              } else if (yy > detailY) {\n                //for the topCap edge\n                y = height;\n                v = 1;\n                ringRadius = topRadius;\n              } else {\n                //for the middle\n                ringRadius = bottomRadius + (topRadius - bottomRadius) * v;\n              }\n              if (yy === -2 || yy === detailY + 2) {\n                //center of bottom or top caps\n                ringRadius = 0;\n              }\n\n              y -= height / 2; //shift coordiate origin to the center of object\n              for (ii = 0; ii < detailX; ++ii) {\n                var u = ii / detailX;\n                var ur = 2 * Math.PI * u;\n                var sur = Math.sin(ur);\n                var cur = Math.cos(ur);\n\n                //VERTICES\n                this.vertices.push(new p5.Vector(sur * ringRadius, y, cur * ringRadius));\n\n                //VERTEX NORMALS\n                var vertexNormal;\n                if (yy < 0) {\n                  vertexNormal = new p5.Vector(0, -1, 0);\n                } else if (yy > detailY && topRadius) {\n                  vertexNormal = new p5.Vector(0, 1, 0);\n                } else {\n                  vertexNormal = new p5.Vector(sur * cosSlant, sinSlant, cur * cosSlant);\n                }\n                this.vertexNormals.push(vertexNormal);\n                //UVs\n                this.uvs.push(u, v);\n              }\n            }\n\n            var startIndex = 0;\n            if (bottomCap) {\n              for (jj = 0; jj < detailX; ++jj) {\n                var nextjj = (jj + 1) % detailX;\n                this.faces.push([\n                  startIndex + jj,\n                  startIndex + detailX + nextjj,\n                  startIndex + detailX + jj\n                ]);\n              }\n              startIndex += detailX * 2;\n            }\n            for (yy = 0; yy < detailY; ++yy) {\n              for (ii = 0; ii < detailX; ++ii) {\n                var nextii = (ii + 1) % detailX;\n                this.faces.push([\n                  startIndex + ii,\n                  startIndex + nextii,\n                  startIndex + detailX + nextii\n                ]);\n\n                this.faces.push([\n                  startIndex + ii,\n                  startIndex + detailX + nextii,\n                  startIndex + detailX + ii\n                ]);\n              }\n              startIndex += detailX;\n            }\n            if (topCap) {\n              startIndex += detailX;\n              for (ii = 0; ii < detailX; ++ii) {\n                this.faces.push([\n                  startIndex + ii,\n                  startIndex + (ii + 1) % detailX,\n                  startIndex + detailX\n                ]);\n              }\n            }\n          };\n\n          /**\n           * Draw a cylinder with given radius and height\n           * @method cylinder\n           * @param  {Number}  [radius]    radius of the surface\n           * @param  {Number}  [height]    height of the cylinder\n           * @param  {Integer} [detailX]   number of segments,\n           *                               the more segments the smoother geometry\n           *                               default is 24\n           * @param  {Integer} [detailY]   number of segments in y-dimension,\n           *                               the more segments the smoother geometry\n           *                               default is 1\n           * @param  {Boolean} [bottomCap] whether to draw the bottom of the cylinder\n           * @param  {Boolean} [topCap]    whether to draw the top of the cylinder\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // draw a spinning cylinder\n           * // with radius 20 and height 50\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rotateX(frameCount * 0.01);\n           *   rotateZ(frameCount * 0.01);\n           *   cylinder(20, 50);\n           * }\n           * </code>\n           * </div>\n           */\n          p5.prototype.cylinder = function(\n            radius,\n            height,\n            detailX,\n            detailY,\n            bottomCap,\n            topCap\n          ) {\n            this._assert3d('cylinder');\n            p5._validateParameters('cylinder', arguments);\n            if (typeof radius === 'undefined') {\n              radius = 50;\n            }\n            if (typeof height === 'undefined') {\n              height = radius;\n            }\n            if (typeof detailX === 'undefined') {\n              detailX = 24;\n            }\n            if (typeof detailY === 'undefined') {\n              detailY = 1;\n            }\n            if (typeof topCap === 'undefined') {\n              topCap = true;\n            }\n            if (typeof bottomCap === 'undefined') {\n              bottomCap = true;\n            }\n\n            var gId =\n              'cylinder|' + detailX + '|' + detailY + '|' + bottomCap + '|' + topCap;\n            if (!this._renderer.geometryInHash(gId)) {\n              var cylinderGeom = new p5.Geometry(detailX, detailY);\n              _truncatedCone.call(\n                cylinderGeom,\n                1,\n                1,\n                1,\n                detailX,\n                detailY,\n                bottomCap,\n                topCap\n              );\n\n              // normals are computed in call to _truncatedCone\n              if (detailX <= 24 && detailY <= 16) {\n                cylinderGeom._makeTriangleEdges()._edgesToVertices();\n              } else {\n                console.log(\n                  'Cannot draw stroke on cylinder objects with more' +\n                    ' than 24 detailX or 16 detailY'\n                );\n              }\n              this._renderer.createBuffers(gId, cylinderGeom);\n            }\n\n            this._renderer.drawBuffersScaled(gId, radius, height, radius);\n\n            return this;\n          };\n\n          /**\n           * Draw a cone with given radius and height\n           * @method cone\n           * @param  {Number}  [radius]  radius of the bottom surface\n           * @param  {Number}  [height]  height of the cone\n           * @param  {Integer} [detailX] number of segments,\n           *                             the more segments the smoother geometry\n           *                             default is 24\n           * @param  {Integer} [detailY] number of segments,\n           *                             the more segments the smoother geometry\n           *                             default is 1\n           * @param  {Boolean} [cap]     whether to draw the base of the cone\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // draw a spinning cone\n           * // with radius 40 and height 70\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rotateX(frameCount * 0.01);\n           *   rotateZ(frameCount * 0.01);\n           *   cone(40, 70);\n           * }\n           * </code>\n           * </div>\n           */\n          p5.prototype.cone = function(radius, height, detailX, detailY, cap) {\n            this._assert3d('cone');\n            p5._validateParameters('cone', arguments);\n            if (typeof radius === 'undefined') {\n              radius = 50;\n            }\n            if (typeof height === 'undefined') {\n              height = radius;\n            }\n            if (typeof detailX === 'undefined') {\n              detailX = 24;\n            }\n            if (typeof detailY === 'undefined') {\n              detailY = 1;\n            }\n            if (typeof cap === 'undefined') {\n              cap = true;\n            }\n\n            var gId = 'cone|' + detailX + '|' + detailY + '|' + cap;\n            if (!this._renderer.geometryInHash(gId)) {\n              var coneGeom = new p5.Geometry(detailX, detailY);\n              _truncatedCone.call(coneGeom, 1, 0, 1, detailX, detailY, cap, false);\n              if (detailX <= 24 && detailY <= 16) {\n                coneGeom._makeTriangleEdges()._edgesToVertices();\n              } else {\n                console.log(\n                  'Cannot draw stroke on cone objects with more' +\n                    ' than 24 detailX or 16 detailY'\n                );\n              }\n              this._renderer.createBuffers(gId, coneGeom);\n            }\n\n            this._renderer.drawBuffersScaled(gId, radius, height, radius);\n\n            return this;\n          };\n\n          /**\n           * Draw an ellipsoid with given radius\n           * @method ellipsoid\n           * @param  {Number} [radiusx]         x-radius of ellipsoid\n           * @param  {Number} [radiusy]         y-radius of ellipsoid\n           * @param  {Number} [radiusz]         z-radius of ellipsoid\n           * @param  {Integer} [detailX]        number of segments,\n           *                                    the more segments the smoother geometry\n           *                                    default is 24. Avoid detail number above\n           *                                    150, it may crash the browser.\n           * @param  {Integer} [detailY]        number of segments,\n           *                                    the more segments the smoother geometry\n           *                                    default is 16. Avoid detail number above\n           *                                    150, it may crash the browser.\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // draw an ellipsoid\n           * // with radius 30, 40 and 40.\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   ellipsoid(30, 40, 40);\n           * }\n           * </code>\n           * </div>\n           */\n          p5.prototype.ellipsoid = function(radiusX, radiusY, radiusZ, detailX, detailY) {\n            this._assert3d('ellipsoid');\n            p5._validateParameters('ellipsoid', arguments);\n            if (typeof radiusX === 'undefined') {\n              radiusX = 50;\n            }\n            if (typeof radiusY === 'undefined') {\n              radiusY = radiusX;\n            }\n            if (typeof radiusZ === 'undefined') {\n              radiusZ = radiusX;\n            }\n\n            if (typeof detailX === 'undefined') {\n              detailX = 24;\n            }\n            if (typeof detailY === 'undefined') {\n              detailY = 16;\n            }\n\n            var gId = 'ellipsoid|' + detailX + '|' + detailY;\n\n            if (!this._renderer.geometryInHash(gId)) {\n              var _ellipsoid = function _ellipsoid() {\n                for (var i = 0; i <= this.detailY; i++) {\n                  var v = i / this.detailY;\n                  var phi = Math.PI * v - Math.PI / 2;\n                  var cosPhi = Math.cos(phi);\n                  var sinPhi = Math.sin(phi);\n\n                  for (var j = 0; j <= this.detailX; j++) {\n                    var u = j / this.detailX;\n                    var theta = 2 * Math.PI * u;\n                    var cosTheta = Math.cos(theta);\n                    var sinTheta = Math.sin(theta);\n                    var p = new p5.Vector(cosPhi * sinTheta, sinPhi, cosPhi * cosTheta);\n                    this.vertices.push(p);\n                    this.vertexNormals.push(p);\n                    this.uvs.push(u, v);\n                  }\n                }\n              };\n              var ellipsoidGeom = new p5.Geometry(detailX, detailY, _ellipsoid);\n              ellipsoidGeom.computeFaces();\n              if (detailX <= 24 && detailY <= 24) {\n                ellipsoidGeom._makeTriangleEdges()._edgesToVertices();\n              } else {\n                console.log(\n                  'Cannot draw stroke on ellipsoids with more' +\n                    ' than 24 detailX or 24 detailY'\n                );\n              }\n              this._renderer.createBuffers(gId, ellipsoidGeom);\n            }\n\n            this._renderer.drawBuffersScaled(gId, radiusX, radiusY, radiusZ);\n\n            return this;\n          };\n\n          /**\n           * Draw a torus with given radius and tube radius\n           * @method torus\n           * @param  {Number} [radius]      radius of the whole ring\n           * @param  {Number} [tubeRadius]  radius of the tube\n           * @param  {Integer} [detailX]    number of segments in x-dimension,\n           *                                the more segments the smoother geometry\n           *                                default is 24\n           * @param  {Integer} [detailY]    number of segments in y-dimension,\n           *                                the more segments the smoother geometry\n           *                                default is 16\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // draw a spinning torus\n           * // with ring radius 30 and tube radius 15\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   torus(30, 15);\n           * }\n           * </code>\n           * </div>\n           */\n          p5.prototype.torus = function(radius, tubeRadius, detailX, detailY) {\n            this._assert3d('torus');\n            p5._validateParameters('torus', arguments);\n            if (typeof radius === 'undefined') {\n              radius = 50;\n            } else if (!radius) {\n              return; // nothing to draw\n            }\n\n            if (typeof tubeRadius === 'undefined') {\n              tubeRadius = 10;\n            } else if (!tubeRadius) {\n              return; // nothing to draw\n            }\n\n            if (typeof detailX === 'undefined') {\n              detailX = 24;\n            }\n            if (typeof detailY === 'undefined') {\n              detailY = 16;\n            }\n\n            var tubeRatio = (tubeRadius / radius).toPrecision(4);\n            var gId = 'torus|' + tubeRatio + '|' + detailX + '|' + detailY;\n\n            if (!this._renderer.geometryInHash(gId)) {\n              var _torus = function _torus() {\n                for (var i = 0; i <= this.detailY; i++) {\n                  var v = i / this.detailY;\n                  var phi = 2 * Math.PI * v;\n                  var cosPhi = Math.cos(phi);\n                  var sinPhi = Math.sin(phi);\n                  var r = 1 + tubeRatio * cosPhi;\n\n                  for (var j = 0; j <= this.detailX; j++) {\n                    var u = j / this.detailX;\n                    var theta = 2 * Math.PI * u;\n                    var cosTheta = Math.cos(theta);\n                    var sinTheta = Math.sin(theta);\n\n                    var p = new p5.Vector(r * cosTheta, r * sinTheta, tubeRatio * sinPhi);\n\n                    var n = new p5.Vector(cosPhi * cosTheta, cosPhi * sinTheta, sinPhi);\n\n                    this.vertices.push(p);\n                    this.vertexNormals.push(n);\n                    this.uvs.push(u, v);\n                  }\n                }\n              };\n              var torusGeom = new p5.Geometry(detailX, detailY, _torus);\n              torusGeom.computeFaces();\n              if (detailX <= 24 && detailY <= 16) {\n                torusGeom._makeTriangleEdges()._edgesToVertices();\n              } else {\n                console.log(\n                  'Cannot draw strokes on torus object with more' +\n                    ' than 24 detailX or 16 detailY'\n                );\n              }\n              this._renderer.createBuffers(gId, torusGeom);\n            }\n            this._renderer.drawBuffersScaled(gId, radius, radius, radius);\n\n            return this;\n          };\n\n          ///////////////////////\n          /// 2D primitives\n          /////////////////////////\n\n          /**\n           * Draws a point, a coordinate in space at the dimension of one pixel,\n           * given x, y and z coordinates. The color of the point is determined\n           * by the current stroke, while the point size is determined by current\n           * stroke weight.\n           * @private\n           * @param {Number} x x-coordinate of point\n           * @param {Number} y y-coordinate of point\n           * @param {Number} z z-coordinate of point\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(50);\n           *   stroke(255);\n           *   strokeWeight(4);\n           *   point(25, 0);\n           *   strokeWeight(3);\n           *   point(-25, 0);\n           *   strokeWeight(2);\n           *   point(0, 25);\n           *   strokeWeight(1);\n           *   point(0, -25);\n           * }\n           * </code>\n           * </div>\n           */\n          p5.RendererGL.prototype.point = function(x, y, z) {\n            if (typeof z === 'undefined') {\n              z = 0;\n            }\n\n            var _vertex = [];\n            _vertex.push(new p5.Vector(x, y, z));\n            this._drawPoints(_vertex, this._pointVertexBuffer);\n\n            return this;\n          };\n\n          p5.RendererGL.prototype.triangle = function(args) {\n            var x1 = args[0],\n              y1 = args[1];\n            var x2 = args[2],\n              y2 = args[3];\n            var x3 = args[4],\n              y3 = args[5];\n\n            var gId = 'tri';\n            if (!this.geometryInHash(gId)) {\n              var _triangle = function _triangle() {\n                var vertices = [];\n                vertices.push(new p5.Vector(0, 0, 0));\n                vertices.push(new p5.Vector(0, 1, 0));\n                vertices.push(new p5.Vector(1, 0, 0));\n                this.strokeIndices = [[0, 1], [1, 2], [2, 0]];\n                this.vertices = vertices;\n                this.faces = [[0, 1, 2]];\n                this.uvs = [0, 0, 0, 1, 1, 1];\n              };\n              var triGeom = new p5.Geometry(1, 1, _triangle);\n              triGeom._makeTriangleEdges()._edgesToVertices();\n              triGeom.computeNormals();\n              this.createBuffers(gId, triGeom);\n            }\n\n            // only one triangle is cached, one point is at the origin, and the\n            // two adjacent sides are tne unit vectors along the X & Y axes.\n            //\n            // this matrix multiplication transforms those two unit vectors\n            // onto the required vector prior to rendering, and moves the\n            // origin appropriately.\n            var uMVMatrix = this.uMVMatrix.copy();\n            try {\n              // prettier-ignore\n              var mult = new p5.Matrix([\n    x2 - x1, y2 - y1, 0, 0, // the resulting unit X-axis\n    x3 - x1, y3 - y1, 0, 0, // the resulting unit Y-axis\n    0, 0, 1, 0, // the resulting unit Z-axis (unchanged)\n    x1, y1, 0, 1 // the resulting origin\n    ]).mult(this.uMVMatrix);\n\n              this.uMVMatrix = mult;\n\n              this.drawBuffers(gId);\n            } finally {\n              this.uMVMatrix = uMVMatrix;\n            }\n\n            return this;\n          };\n\n          p5.RendererGL.prototype.ellipse = function(args) {\n            this.arc(\n              args[0],\n              args[1],\n              args[2],\n              args[3],\n              0,\n              constants.TWO_PI,\n              constants.OPEN,\n              args[4]\n            );\n          };\n\n          p5.RendererGL.prototype.arc = function(args) {\n            var x = arguments[0];\n            var y = arguments[1];\n            var width = arguments[2];\n            var height = arguments[3];\n            var start = arguments[4];\n            var stop = arguments[5];\n            var mode = arguments[6];\n            var detail = arguments[7] || 25;\n\n            var shape;\n            var gId;\n\n            // check if it is an ellipse or an arc\n            if (Math.abs(stop - start) >= constants.TWO_PI) {\n              shape = 'ellipse';\n              gId = shape + '|' + detail + '|';\n            } else {\n              shape = 'arc';\n              gId = shape + '|' + start + '|' + stop + '|' + mode + '|' + detail + '|';\n            }\n\n            if (!this.geometryInHash(gId)) {\n              var _arc = function _arc() {\n                this.strokeIndices = [];\n\n                // if the start and stop angles are not the same, push vertices to the array\n                if (start.toFixed(10) !== stop.toFixed(10)) {\n                  // if the mode specified is PIE or null, push the mid point of the arc in vertices\n                  if (mode === constants.PIE || typeof mode === 'undefined') {\n                    this.vertices.push(new p5.Vector(0.5, 0.5, 0));\n                    this.uvs.push([0.5, 0.5]);\n                  }\n\n                  // vertices for the perimeter of the circle\n                  for (var i = 0; i <= detail; i++) {\n                    var u = i / detail;\n                    var theta = (stop - start) * u + start;\n\n                    var _x = 0.5 + Math.cos(theta) / 2;\n                    var _y = 0.5 + Math.sin(theta) / 2;\n\n                    this.vertices.push(new p5.Vector(_x, _y, 0));\n                    this.uvs.push([_x, _y]);\n\n                    if (i < detail - 1) {\n                      this.faces.push([0, i + 1, i + 2]);\n                      this.strokeIndices.push([i + 1, i + 2]);\n                    }\n                  }\n\n                  // check the mode specified in order to push vertices and faces, different for each mode\n                  switch (mode) {\n                    case constants.PIE:\n                      this.faces.push([\n                        0,\n                        this.vertices.length - 2,\n                        this.vertices.length - 1\n                      ]);\n\n                      this.strokeIndices.push([0, 1]);\n                      this.strokeIndices.push([\n                        this.vertices.length - 2,\n                        this.vertices.length - 1\n                      ]);\n\n                      this.strokeIndices.push([0, this.vertices.length - 1]);\n                      break;\n\n                    case constants.CHORD:\n                      this.strokeIndices.push([0, 1]);\n                      this.strokeIndices.push([0, this.vertices.length - 1]);\n                      break;\n\n                    case constants.OPEN:\n                      this.strokeIndices.push([0, 1]);\n                      break;\n\n                    default:\n                      this.faces.push([\n                        0,\n                        this.vertices.length - 2,\n                        this.vertices.length - 1\n                      ]);\n\n                      this.strokeIndices.push([\n                        this.vertices.length - 2,\n                        this.vertices.length - 1\n                      ]);\n                  }\n                }\n              };\n\n              var arcGeom = new p5.Geometry(detail, 1, _arc);\n              arcGeom.computeNormals();\n\n              if (detail <= 50) {\n                arcGeom._makeTriangleEdges()._edgesToVertices(arcGeom);\n              } else {\n                console.log('Cannot stroke ' + shape + ' with more than 50 detail');\n              }\n\n              this.createBuffers(gId, arcGeom);\n            }\n\n            var uMVMatrix = this.uMVMatrix.copy();\n\n            try {\n              this.uMVMatrix.translate([x, y, 0]);\n              this.uMVMatrix.scale(width, height, 1);\n\n              this.drawBuffers(gId);\n            } finally {\n              this.uMVMatrix = uMVMatrix;\n            }\n\n            return this;\n          };\n\n          p5.RendererGL.prototype.rect = function(args) {\n            var perPixelLighting = this._pInst._glAttributes.perPixelLighting;\n            var x = args[0];\n            var y = args[1];\n            var width = args[2];\n            var height = args[3];\n            var detailX = args[4] || (perPixelLighting ? 1 : 24);\n            var detailY = args[5] || (perPixelLighting ? 1 : 16);\n            var gId = 'rect|' + detailX + '|' + detailY;\n            if (!this.geometryInHash(gId)) {\n              var _rect = function _rect() {\n                for (var i = 0; i <= this.detailY; i++) {\n                  var v = i / this.detailY;\n                  for (var j = 0; j <= this.detailX; j++) {\n                    var u = j / this.detailX;\n                    var p = new p5.Vector(u, v, 0);\n                    this.vertices.push(p);\n                    this.uvs.push(u, v);\n                  }\n                }\n                // using stroke indices to avoid stroke over face(s) of rectangle\n                if (detailX > 0 && detailY > 0) {\n                  this.strokeIndices = [\n                    [0, detailX],\n                    [detailX, (detailX + 1) * (detailY + 1) - 1],\n                    [(detailX + 1) * (detailY + 1) - 1, (detailX + 1) * detailY],\n                    [(detailX + 1) * detailY, 0]\n                  ];\n                }\n              };\n              var rectGeom = new p5.Geometry(detailX, detailY, _rect);\n              rectGeom\n                .computeFaces()\n                .computeNormals()\n                ._makeTriangleEdges()\n                ._edgesToVertices();\n              this.createBuffers(gId, rectGeom);\n            }\n\n            // only a single rectangle (of a given detail) is cached: a square with\n            // opposite corners at (0,0) & (1,1).\n            //\n            // before rendering, this square is scaled & moved to the required location.\n            var uMVMatrix = this.uMVMatrix.copy();\n            try {\n              this.uMVMatrix.translate([x, y, 0]);\n              this.uMVMatrix.scale(width, height, 1);\n\n              this.drawBuffers(gId);\n            } finally {\n              this.uMVMatrix = uMVMatrix;\n            }\n            return this;\n          };\n\n          // prettier-ignore\n          p5.RendererGL.prototype.quad = function (x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {\n  var gId =\n  'quad|' +\n  x1 +\n  '|' +\n  y1 +\n  '|' +\n  z1 +\n  '|' +\n  x2 +\n  '|' +\n  y2 +\n  '|' +\n  z2 +\n  '|' +\n  x3 +\n  '|' +\n  y3 +\n  '|' +\n  z3 +\n  '|' +\n  x4 +\n  '|' +\n  y4 +\n  '|' +\n  z4;\n  if (!this.geometryInHash(gId)) {\n    var _quad = function _quad() {\n      this.vertices.push(new p5.Vector(x1, y1, z1));\n      this.vertices.push(new p5.Vector(x2, y2, z2));\n      this.vertices.push(new p5.Vector(x3, y3, z3));\n      this.vertices.push(new p5.Vector(x4, y4, z4));\n      this.uvs.push(0, 0, 1, 0, 1, 1, 0, 1);\n      this.strokeIndices = [[0, 1], [1, 2], [2, 3], [3, 0]];\n    };\n    var quadGeom = new p5.Geometry(2, 2, _quad);\n    quadGeom.\n    computeNormals().\n    _makeTriangleEdges().\n    _edgesToVertices();\n    quadGeom.faces = [[0, 1, 2], [2, 3, 0]];\n    this.createBuffers(gId, quadGeom);\n  }\n  this.drawBuffers(gId);\n  return this;\n};\n\n          //this implementation of bezier curve\n          //is based on Bernstein polynomial\n          // pretier-ignore\n          p5.RendererGL.prototype.bezier = function(\n            x1,\n            y1,\n            z1, // x2\n            x2, // y2\n            y2, // x3\n            z2, // y3\n            x3, // x4\n            y3, // y4\n            z3,\n            x4,\n            y4,\n            z4\n          ) {\n            if (arguments.length === 8) {\n              y4 = y3;\n              x4 = x3;\n              y3 = z2;\n              x3 = y2;\n              y2 = x2;\n              x2 = z1;\n              z1 = z2 = z3 = z4 = 0;\n            }\n            var bezierDetail = this._pInst._bezierDetail || 20; //value of Bezier detail\n            this.beginShape();\n            for (var i = 0; i <= bezierDetail; i++) {\n              var c1 = Math.pow(1 - i / bezierDetail, 3);\n              var c2 = 3 * (i / bezierDetail) * Math.pow(1 - i / bezierDetail, 2);\n              var c3 = 3 * Math.pow(i / bezierDetail, 2) * (1 - i / bezierDetail);\n              var c4 = Math.pow(i / bezierDetail, 3);\n              this.vertex(\n                x1 * c1 + x2 * c2 + x3 * c3 + x4 * c4,\n                y1 * c1 + y2 * c2 + y3 * c3 + y4 * c4,\n                z1 * c1 + z2 * c2 + z3 * c3 + z4 * c4\n              );\n            }\n            this.endShape();\n            return this;\n          };\n\n          // pretier-ignore\n          p5.RendererGL.prototype.curve = function(\n            x1,\n            y1,\n            z1, // x2\n            x2, // y2\n            y2, // x3\n            z2, // y3\n            x3, // x4\n            y3, // y4\n            z3,\n            x4,\n            y4,\n            z4\n          ) {\n            if (arguments.length === 8) {\n              x4 = x3;\n              y4 = y3;\n              x3 = y2;\n              y3 = x2;\n              x2 = z1;\n              y2 = x2;\n              z1 = z2 = z3 = z4 = 0;\n            }\n            var curveDetail = this._pInst._curveDetail;\n            this.beginShape();\n            for (var i = 0; i <= curveDetail; i++) {\n              var c1 = Math.pow(i / curveDetail, 3) * 0.5;\n              var c2 = Math.pow(i / curveDetail, 2) * 0.5;\n              var c3 = i / curveDetail * 0.5;\n              var c4 = 0.5;\n              var vx =\n                c1 * (-x1 + 3 * x2 - 3 * x3 + x4) +\n                c2 * (2 * x1 - 5 * x2 + 4 * x3 - x4) +\n                c3 * (-x1 + x3) +\n                c4 * (2 * x2);\n              var vy =\n                c1 * (-y1 + 3 * y2 - 3 * y3 + y4) +\n                c2 * (2 * y1 - 5 * y2 + 4 * y3 - y4) +\n                c3 * (-y1 + y3) +\n                c4 * (2 * y2);\n              var vz =\n                c1 * (-z1 + 3 * z2 - 3 * z3 + z4) +\n                c2 * (2 * z1 - 5 * z2 + 4 * z3 - z4) +\n                c3 * (-z1 + z3) +\n                c4 * (2 * z2);\n              this.vertex(vx, vy, vz);\n            }\n            this.endShape();\n            return this;\n          };\n\n          /**\n           * Draw a line given two points\n           * @private\n           * @param {Number} x0 x-coordinate of first vertex\n           * @param {Number} y0 y-coordinate of first vertex\n           * @param {Number} z0 z-coordinate of first vertex\n           * @param {Number} x1 x-coordinate of second vertex\n           * @param {Number} y1 y-coordinate of second vertex\n           * @param {Number} z1 z-coordinate of second vertex\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * //draw a line\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   // Use fill instead of stroke to change the color of shape.\n           *   fill(255, 0, 0);\n           *   line(10, 10, 0, 60, 60, 20);\n           * }\n           * </code>\n           * </div>\n           */\n          p5.RendererGL.prototype.line = function() {\n            if (arguments.length === 6) {\n              this.beginShape();\n              this.vertex(arguments[0], arguments[1], arguments[2]);\n              this.vertex(arguments[3], arguments[4], arguments[5]);\n              this.endShape();\n            } else if (arguments.length === 4) {\n              this.beginShape();\n              this.vertex(arguments[0], arguments[1], 0);\n              this.vertex(arguments[2], arguments[3], 0);\n              this.endShape();\n            }\n            return this;\n          };\n\n          p5.RendererGL.prototype.bezierVertex = function() {\n            if (this.immediateMode._bezierVertex.length === 0) {\n              throw Error('vertex() must be used once before calling bezierVertex()');\n            } else {\n              var w_x = [];\n              var w_y = [];\n              var w_z = [];\n              var t, _x, _y, _z, i;\n              var argLength = arguments.length;\n\n              t = 0;\n\n              if (\n                this._lookUpTableBezier.length === 0 ||\n                this._lutBezierDetail !== this._pInst._curveDetail\n              ) {\n                this._lookUpTableBezier = [];\n                this._lutBezierDetail = this._pInst._curveDetail;\n                var step = 1 / this._lutBezierDetail;\n                var start = 0;\n                var end = 1;\n                var j = 0;\n                while (start < 1) {\n                  t = parseFloat(start.toFixed(6));\n                  this._lookUpTableBezier[j] = this._bezierCoefficients(t);\n                  if (end.toFixed(6) === step.toFixed(6)) {\n                    t = parseFloat(end.toFixed(6)) + parseFloat(start.toFixed(6));\n                    ++j;\n                    this._lookUpTableBezier[j] = this._bezierCoefficients(t);\n                    break;\n                  }\n                  start += step;\n                  end -= step;\n                  ++j;\n                }\n              }\n\n              var LUTLength = this._lookUpTableBezier.length;\n\n              if (argLength === 6) {\n                this.isBezier = true;\n\n                w_x = [\n                  this.immediateMode._bezierVertex[0],\n                  arguments[0],\n                  arguments[2],\n                  arguments[4]\n                ];\n\n                w_y = [\n                  this.immediateMode._bezierVertex[1],\n                  arguments[1],\n                  arguments[3],\n                  arguments[5]\n                ];\n\n                for (i = 0; i < LUTLength; i++) {\n                  _x =\n                    w_x[0] * this._lookUpTableBezier[i][0] +\n                    w_x[1] * this._lookUpTableBezier[i][1] +\n                    w_x[2] * this._lookUpTableBezier[i][2] +\n                    w_x[3] * this._lookUpTableBezier[i][3];\n                  _y =\n                    w_y[0] * this._lookUpTableBezier[i][0] +\n                    w_y[1] * this._lookUpTableBezier[i][1] +\n                    w_y[2] * this._lookUpTableBezier[i][2] +\n                    w_y[3] * this._lookUpTableBezier[i][3];\n                  this.vertex(_x, _y);\n                }\n                this.immediateMode._bezierVertex[0] = arguments[4];\n                this.immediateMode._bezierVertex[1] = arguments[5];\n              } else if (argLength === 9) {\n                this.isBezier = true;\n\n                w_x = [\n                  this.immediateMode._bezierVertex[0],\n                  arguments[0],\n                  arguments[3],\n                  arguments[6]\n                ];\n\n                w_y = [\n                  this.immediateMode._bezierVertex[1],\n                  arguments[1],\n                  arguments[4],\n                  arguments[7]\n                ];\n\n                w_z = [\n                  this.immediateMode._bezierVertex[2],\n                  arguments[2],\n                  arguments[5],\n                  arguments[8]\n                ];\n\n                for (i = 0; i < LUTLength; i++) {\n                  _x =\n                    w_x[0] * this._lookUpTableBezier[i][0] +\n                    w_x[1] * this._lookUpTableBezier[i][1] +\n                    w_x[2] * this._lookUpTableBezier[i][2] +\n                    w_x[3] * this._lookUpTableBezier[i][3];\n                  _y =\n                    w_y[0] * this._lookUpTableBezier[i][0] +\n                    w_y[1] * this._lookUpTableBezier[i][1] +\n                    w_y[2] * this._lookUpTableBezier[i][2] +\n                    w_y[3] * this._lookUpTableBezier[i][3];\n                  _z =\n                    w_z[0] * this._lookUpTableBezier[i][0] +\n                    w_z[1] * this._lookUpTableBezier[i][1] +\n                    w_z[2] * this._lookUpTableBezier[i][2] +\n                    w_z[3] * this._lookUpTableBezier[i][3];\n                  this.vertex(_x, _y, _z);\n                }\n                this.immediateMode._bezierVertex[0] = arguments[6];\n                this.immediateMode._bezierVertex[1] = arguments[7];\n                this.immediateMode._bezierVertex[2] = arguments[8];\n              }\n            }\n          };\n\n          p5.RendererGL.prototype.quadraticVertex = function() {\n            if (this.immediateMode._quadraticVertex.length === 0) {\n              throw Error('vertex() must be used once before calling quadraticVertex()');\n            } else {\n              var w_x = [];\n              var w_y = [];\n              var w_z = [];\n              var t, _x, _y, _z, i;\n              var argLength = arguments.length;\n\n              t = 0;\n\n              if (\n                this._lookUpTableQuadratic.length === 0 ||\n                this._lutQuadraticDetail !== this._pInst._curveDetail\n              ) {\n                this._lookUpTableQuadratic = [];\n                this._lutQuadraticDetail = this._pInst._curveDetail;\n                var step = 1 / this._lutQuadraticDetail;\n                var start = 0;\n                var end = 1;\n                var j = 0;\n                while (start < 1) {\n                  t = parseFloat(start.toFixed(6));\n                  this._lookUpTableQuadratic[j] = this._quadraticCoefficients(t);\n                  if (end.toFixed(6) === step.toFixed(6)) {\n                    t = parseFloat(end.toFixed(6)) + parseFloat(start.toFixed(6));\n                    ++j;\n                    this._lookUpTableQuadratic[j] = this._quadraticCoefficients(t);\n                    break;\n                  }\n                  start += step;\n                  end -= step;\n                  ++j;\n                }\n              }\n\n              var LUTLength = this._lookUpTableQuadratic.length;\n\n              if (argLength === 4) {\n                this.isQuadratic = true;\n\n                w_x = [this.immediateMode._quadraticVertex[0], arguments[0], arguments[2]];\n\n                w_y = [this.immediateMode._quadraticVertex[1], arguments[1], arguments[3]];\n\n                for (i = 0; i < LUTLength; i++) {\n                  _x =\n                    w_x[0] * this._lookUpTableQuadratic[i][0] +\n                    w_x[1] * this._lookUpTableQuadratic[i][1] +\n                    w_x[2] * this._lookUpTableQuadratic[i][2];\n                  _y =\n                    w_y[0] * this._lookUpTableQuadratic[i][0] +\n                    w_y[1] * this._lookUpTableQuadratic[i][1] +\n                    w_y[2] * this._lookUpTableQuadratic[i][2];\n                  this.vertex(_x, _y);\n                }\n\n                this.immediateMode._quadraticVertex[0] = arguments[2];\n                this.immediateMode._quadraticVertex[1] = arguments[3];\n              } else if (argLength === 6) {\n                this.isQuadratic = true;\n\n                w_x = [this.immediateMode._quadraticVertex[0], arguments[0], arguments[3]];\n\n                w_y = [this.immediateMode._quadraticVertex[1], arguments[1], arguments[4]];\n\n                w_z = [this.immediateMode._quadraticVertex[2], arguments[2], arguments[5]];\n\n                for (i = 0; i < LUTLength; i++) {\n                  _x =\n                    w_x[0] * this._lookUpTableQuadratic[i][0] +\n                    w_x[1] * this._lookUpTableQuadratic[i][1] +\n                    w_x[2] * this._lookUpTableQuadratic[i][2];\n                  _y =\n                    w_y[0] * this._lookUpTableQuadratic[i][0] +\n                    w_y[1] * this._lookUpTableQuadratic[i][1] +\n                    w_y[2] * this._lookUpTableQuadratic[i][2];\n                  _z =\n                    w_z[0] * this._lookUpTableQuadratic[i][0] +\n                    w_z[1] * this._lookUpTableQuadratic[i][1] +\n                    w_z[2] * this._lookUpTableQuadratic[i][2];\n                  this.vertex(_x, _y, _z);\n                }\n\n                this.immediateMode._quadraticVertex[0] = arguments[3];\n                this.immediateMode._quadraticVertex[1] = arguments[4];\n                this.immediateMode._quadraticVertex[2] = arguments[5];\n              }\n            }\n          };\n\n          p5.RendererGL.prototype.curveVertex = function() {\n            var w_x = [];\n            var w_y = [];\n            var w_z = [];\n            var t, _x, _y, _z, i;\n            t = 0;\n            var argLength = arguments.length;\n\n            if (\n              this._lookUpTableBezier.length === 0 ||\n              this._lutBezierDetail !== this._pInst._curveDetail\n            ) {\n              this._lookUpTableBezier = [];\n              this._lutBezierDetail = this._pInst._curveDetail;\n              var step = 1 / this._lutBezierDetail;\n              var start = 0;\n              var end = 1;\n              var j = 0;\n              while (start < 1) {\n                t = parseFloat(start.toFixed(6));\n                this._lookUpTableBezier[j] = this._bezierCoefficients(t);\n                if (end.toFixed(6) === step.toFixed(6)) {\n                  t = parseFloat(end.toFixed(6)) + parseFloat(start.toFixed(6));\n                  ++j;\n                  this._lookUpTableBezier[j] = this._bezierCoefficients(t);\n                  break;\n                }\n                start += step;\n                end -= step;\n                ++j;\n              }\n            }\n\n            var LUTLength = this._lookUpTableBezier.length;\n\n            if (argLength === 2) {\n              this.immediateMode._curveVertex.push(arguments[0]);\n              this.immediateMode._curveVertex.push(arguments[1]);\n              if (this.immediateMode._curveVertex.length === 8) {\n                this.isCurve = true;\n                w_x = this._bezierToCatmull([\n                  this.immediateMode._curveVertex[0],\n                  this.immediateMode._curveVertex[2],\n                  this.immediateMode._curveVertex[4],\n                  this.immediateMode._curveVertex[6]\n                ]);\n\n                w_y = this._bezierToCatmull([\n                  this.immediateMode._curveVertex[1],\n                  this.immediateMode._curveVertex[3],\n                  this.immediateMode._curveVertex[5],\n                  this.immediateMode._curveVertex[7]\n                ]);\n\n                for (i = 0; i < LUTLength; i++) {\n                  _x =\n                    w_x[0] * this._lookUpTableBezier[i][0] +\n                    w_x[1] * this._lookUpTableBezier[i][1] +\n                    w_x[2] * this._lookUpTableBezier[i][2] +\n                    w_x[3] * this._lookUpTableBezier[i][3];\n                  _y =\n                    w_y[0] * this._lookUpTableBezier[i][0] +\n                    w_y[1] * this._lookUpTableBezier[i][1] +\n                    w_y[2] * this._lookUpTableBezier[i][2] +\n                    w_y[3] * this._lookUpTableBezier[i][3];\n                  this.vertex(_x, _y);\n                }\n                for (i = 0; i < argLength; i++) {\n                  this.immediateMode._curveVertex.shift();\n                }\n              }\n            } else if (argLength === 3) {\n              this.immediateMode._curveVertex.push(arguments[0]);\n              this.immediateMode._curveVertex.push(arguments[1]);\n              this.immediateMode._curveVertex.push(arguments[2]);\n              if (this.immediateMode._curveVertex.length === 12) {\n                this.isCurve = true;\n                w_x = this._bezierToCatmull([\n                  this.immediateMode._curveVertex[0],\n                  this.immediateMode._curveVertex[3],\n                  this.immediateMode._curveVertex[6],\n                  this.immediateMode._curveVertex[9]\n                ]);\n\n                w_y = this._bezierToCatmull([\n                  this.immediateMode._curveVertex[1],\n                  this.immediateMode._curveVertex[4],\n                  this.immediateMode._curveVertex[7],\n                  this.immediateMode._curveVertex[10]\n                ]);\n\n                w_z = this._bezierToCatmull([\n                  this.immediateMode._curveVertex[2],\n                  this.immediateMode._curveVertex[5],\n                  this.immediateMode._curveVertex[8],\n                  this.immediateMode._curveVertex[11]\n                ]);\n\n                for (i = 0; i < LUTLength; i++) {\n                  _x =\n                    w_x[0] * this._lookUpTableBezier[i][0] +\n                    w_x[1] * this._lookUpTableBezier[i][1] +\n                    w_x[2] * this._lookUpTableBezier[i][2] +\n                    w_x[3] * this._lookUpTableBezier[i][3];\n                  _y =\n                    w_y[0] * this._lookUpTableBezier[i][0] +\n                    w_y[1] * this._lookUpTableBezier[i][1] +\n                    w_y[2] * this._lookUpTableBezier[i][2] +\n                    w_y[3] * this._lookUpTableBezier[i][3];\n                  _z =\n                    w_z[0] * this._lookUpTableBezier[i][0] +\n                    w_z[1] * this._lookUpTableBezier[i][1] +\n                    w_z[2] * this._lookUpTableBezier[i][2] +\n                    w_z[3] * this._lookUpTableBezier[i][3];\n                  this.vertex(_x, _y, _z);\n                }\n                for (i = 0; i < argLength; i++) {\n                  this.immediateMode._curveVertex.shift();\n                }\n              }\n            }\n          };\n\n          p5.RendererGL.prototype.image = function(\n            img,\n            sx,\n            sy,\n            sWidth,\n            sHeight,\n            dx,\n            dy,\n            dWidth,\n            dHeight\n          ) {\n            this._pInst.push();\n\n            this._pInst.texture(img);\n            this._pInst.textureMode(constants.NORMAL);\n\n            var u0 = 0;\n            if (sx <= img.width) {\n              u0 = sx / img.width;\n            }\n\n            var u1 = 1;\n            if (sx + sWidth <= img.width) {\n              u1 = (sx + sWidth) / img.width;\n            }\n\n            var v0 = 0;\n            if (sy <= img.height) {\n              v0 = sy / img.height;\n            }\n\n            var v1 = 1;\n            if (sy + sHeight <= img.height) {\n              v1 = (sy + sHeight) / img.height;\n            }\n\n            this.beginShape();\n            this.vertex(dx, dy, 0, u0, v0);\n            this.vertex(dx + dWidth, dy, 0, u1, v0);\n            this.vertex(dx + dWidth, dy + dHeight, 0, u1, v1);\n            this.vertex(dx, dy + dHeight, 0, u0, v1);\n            this.endShape(constants.CLOSE);\n\n            this._pInst.pop();\n          };\n\n          module.exports = p5;\n        },\n        { '../core/constants': 18, '../core/main': 24, './p5.Geometry': 71 }\n      ],\n      66: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Lights, Camera\n           * @submodule Interaction\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          var constants = _dereq_('../core/constants');\n\n          /**\n           * Allows movement around a 3D sketch using a mouse or trackpad.  Left-clicking\n           * and dragging will rotate the camera position about the center of the sketch,\n           * right-clicking and dragging will pan the camera position without rotation,\n           * and using the mouse wheel (scrolling) will move the camera closer or further\n           * from the center of the sketch. This function can be called with parameters\n           * dictating sensitivity to mouse movement along the X and Y axes.  Calling\n           * this function without parameters is equivalent to calling orbitControl(1,1).\n           * To reverse direction of movement in either axis, enter a negative number\n           * for sensitivity.\n           * @method orbitControl\n           * @for p5\n           * @param  {Number} [sensitivityX] sensitivity to mouse movement along X axis\n           * @param  {Number} [sensitivityY] sensitivity to mouse movement along Y axis\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   normalMaterial();\n           * }\n           * function draw() {\n           *   background(200);\n           *   orbitControl();\n           *   rotateY(0.5);\n           *   box(30, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Camera orbits around a box when mouse is hold-clicked & then moved.\n           */\n\n          // implementation based on three.js 'orbitControls':\n          // https://github.com/mrdoob/three.js/blob/dev/examples/js/controls/OrbitControls.js\n          p5.prototype.orbitControl = function(sensitivityX, sensitivityY) {\n            this._assert3d('orbitControl');\n            p5._validateParameters('orbitControl', arguments);\n\n            // If the mouse is not in bounds of the canvas, disable all behaviors:\n            var mouseInCanvas =\n              this.mouseX < this.width &&\n              this.mouseX > 0 &&\n              this.mouseY < this.height &&\n              this.mouseY > 0;\n            if (!mouseInCanvas) return;\n\n            var cam = this._renderer._curCamera;\n\n            if (typeof sensitivityX === 'undefined') {\n              sensitivityX = 1;\n            }\n            if (typeof sensitivityY === 'undefined') {\n              sensitivityY = sensitivityX;\n            }\n\n            // default right-mouse and mouse-wheel behaviors (context menu and scrolling,\n            // respectively) are disabled here to allow use of those events for panning and\n            // zooming\n\n            // disable context menu for canvas element and add 'contextMenuDisabled'\n            // flag to p5 instance\n            if (this.contextMenuDisabled !== true) {\n              this.canvas.oncontextmenu = function() {\n                return false;\n              };\n              this._setProperty('contextMenuDisabled', true);\n            }\n\n            // disable default scrolling behavior on the canvas element and add\n            // 'wheelDefaultDisabled' flag to p5 instance\n            if (this.wheelDefaultDisabled !== true) {\n              this.canvas.onwheel = function() {\n                return false;\n              };\n              this._setProperty('wheelDefaultDisabled', true);\n            }\n\n            var scaleFactor = this.height < this.width ? this.height : this.width;\n\n            // ZOOM if there is a change in mouseWheelDelta\n            if (this._mouseWheelDeltaY !== this._pmouseWheelDeltaY) {\n              // zoom according to direction of mouseWheelDeltaY rather than value\n              if (this._mouseWheelDeltaY > 0) {\n                this._renderer._curCamera._orbit(0, 0, 0.5 * scaleFactor);\n              } else {\n                this._renderer._curCamera._orbit(0, 0, -0.5 * scaleFactor);\n              }\n            }\n\n            if (this.mouseIsPressed) {\n              // ORBIT BEHAVIOR\n              if (this.mouseButton === this.LEFT) {\n                var deltaTheta = -sensitivityX * (this.mouseX - this.pmouseX) / scaleFactor;\n                var deltaPhi = sensitivityY * (this.mouseY - this.pmouseY) / scaleFactor;\n                this._renderer._curCamera._orbit(deltaTheta, deltaPhi, 0);\n              } else if (this.mouseButton === this.RIGHT) {\n                // PANNING BEHAVIOR along X/Z camera axes and restricted to X/Z plane\n                // in world space\n                var local = cam._getLocalAxes();\n\n                // normalize portions along X/Z axes\n                var xmag = Math.sqrt(local.x[0] * local.x[0] + local.x[2] * local.x[2]);\n                if (xmag !== 0) {\n                  local.x[0] /= xmag;\n                  local.x[2] /= xmag;\n                }\n\n                // normalize portions along X/Z axes\n                var ymag = Math.sqrt(local.y[0] * local.y[0] + local.y[2] * local.y[2]);\n                if (ymag !== 0) {\n                  local.y[0] /= ymag;\n                  local.y[2] /= ymag;\n                }\n\n                // move along those vectors by amount controlled by mouseX, pmouseY\n                var dx = -1 * sensitivityX * (this.mouseX - this.pmouseX);\n                var dz = -1 * sensitivityY * (this.mouseY - this.pmouseY);\n\n                // restrict movement to XZ plane in world space\n                cam.setPosition(\n                  cam.eyeX + dx * local.x[0] + dz * local.z[0],\n                  cam.eyeY,\n                  cam.eyeZ + dx * local.x[2] + dz * local.z[2]\n                );\n              }\n            }\n            return this;\n          };\n\n          /**\n           * debugMode() helps visualize 3D space by adding a grid to indicate where the\n           * ‘ground’ is in a sketch and an axes icon which indicates the +X, +Y, and +Z\n           * directions. This function can be called without parameters to create a\n           * default grid and axes icon, or it can be called according to the examples\n           * above to customize the size and position of the grid and/or axes icon.  The\n           * grid is drawn using the most recently set stroke color and weight.  To\n           * specify these parameters, add a call to stroke() and strokeWeight()\n           * just before the end of the draw() loop.\n           *\n           * By default, the grid will run through the origin (0,0,0) of the sketch\n           * along the XZ plane\n           * and the axes icon will be offset from the origin.  Both the grid and axes\n           * icon will be sized according to the current canvas size.  Note that because the\n           * grid runs parallel to the default camera view, it is often helpful to use\n           * debugMode along with orbitControl to allow full view of the grid.\n           * @method debugMode\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n           *   normalMaterial();\n           *   debugMode();\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   orbitControl();\n           *   box(15, 30);\n           *   // Press the spacebar to turn debugMode off!\n           *   if (keyIsDown(32)) {\n           *     noDebugMode();\n           *   }\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * a 3D box is centered on a grid in a 3D sketch. an icon\n           * indicates the direction of each axis: a red line points +X,\n           * a green line +Y, and a blue line +Z. the grid and icon disappear when the\n           * spacebar is pressed.\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n           *   normalMaterial();\n           *   debugMode(GRID);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   orbitControl();\n           *   box(15, 30);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * a 3D box is centered on a grid in a 3D sketch.\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n           *   normalMaterial();\n           *   debugMode(AXES);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   orbitControl();\n           *   box(15, 30);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * a 3D box is centered in a 3D sketch. an icon\n           * indicates the direction of each axis: a red line points +X,\n           * a green line +Y, and a blue line +Z.\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n           *   normalMaterial();\n           *   debugMode(GRID, 100, 10, 0, 0, 0);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   orbitControl();\n           *   box(15, 30);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * a 3D box is centered on a grid in a 3D sketch\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n           *   normalMaterial();\n           *   debugMode(100, 10, 0, 0, 0, 20, 0, -40, 0);\n           * }\n           *\n           * function draw() {\n           *   noStroke();\n           *   background(200);\n           *   orbitControl();\n           *   box(15, 30);\n           *   // set the stroke color and weight for the grid!\n           *   stroke(255, 0, 150);\n           *   strokeWeight(0.8);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * a 3D box is centered on a grid in a 3D sketch. an icon\n           * indicates the direction of each axis: a red line points +X,\n           * a green line +Y, and a blue line +Z.\n           */\n\n          /**\n           * @method debugMode\n           * @param {Constant} mode either GRID or AXES\n           */\n\n          /**\n           * @method debugMode\n           * @param {Constant} mode\n           * @param {Number} [gridSize] size of one side of the grid\n           * @param {Number} [gridDivisions] number of divisions in the grid\n           * @param {Number} [xOff] X axis offset from origin (0,0,0)\n           * @param {Number} [yOff] Y axis offset from origin (0,0,0)\n           * @param {Number} [zOff] Z axis offset from origin (0,0,0)\n           */\n\n          /**\n           * @method debugMode\n           * @param {Constant} mode\n           * @param {Number} [axesSize] size of axes icon\n           * @param {Number} [xOff]\n           * @param {Number} [yOff]\n           * @param {Number} [zOff]\n           */\n\n          /**\n           * @method debugMode\n           * @param {Number} [gridSize]\n           * @param {Number} [gridDivisions]\n           * @param {Number} [gridXOff]\n           * @param {Number} [gridYOff]\n           * @param {Number} [gridZOff]\n           * @param {Number} [axesSize]\n           * @param {Number} [axesXOff]\n           * @param {Number} [axesYOff]\n           * @param {Number} [axesZOff]\n           */\n\n          p5.prototype.debugMode = function() {\n            this._assert3d('debugMode');\n            p5._validateParameters('debugMode', arguments);\n\n            // start by removing existing 'post' registered debug methods\n            for (var i = this._registeredMethods.post.length - 1; i >= 0; i--) {\n              // test for equality...\n              if (\n                this._registeredMethods.post[i].toString() === this._grid().toString() ||\n                this._registeredMethods.post[i].toString() === this._axesIcon().toString()\n              ) {\n                this._registeredMethods.post.splice(i, 1);\n              }\n            }\n\n            // then add new debugMode functions according to the argument list\n            if (arguments[0] === constants.GRID) {\n              this.registerMethod(\n                'post',\n                this._grid.call(\n                  this,\n                  arguments[1],\n                  arguments[2],\n                  arguments[3],\n                  arguments[4],\n                  arguments[5]\n                )\n              );\n            } else if (arguments[0] === constants.AXES) {\n              this.registerMethod(\n                'post',\n                this._axesIcon.call(\n                  this,\n                  arguments[1],\n                  arguments[2],\n                  arguments[3],\n                  arguments[4]\n                )\n              );\n            } else {\n              this.registerMethod(\n                'post',\n                this._grid.call(\n                  this,\n                  arguments[0],\n                  arguments[1],\n                  arguments[2],\n                  arguments[3],\n                  arguments[4]\n                )\n              );\n\n              this.registerMethod(\n                'post',\n                this._axesIcon.call(\n                  this,\n                  arguments[5],\n                  arguments[6],\n                  arguments[7],\n                  arguments[8]\n                )\n              );\n            }\n          };\n\n          /**\n           * Turns off debugMode() in a 3D sketch.\n           * @method noDebugMode\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n           *   normalMaterial();\n           *   debugMode();\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   orbitControl();\n           *   box(15, 30);\n           *   // Press the spacebar to turn debugMode off!\n           *   if (keyIsDown(32)) {\n           *     noDebugMode();\n           *   }\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * a 3D box is centered on a grid in a 3D sketch. an icon\n           * indicates the direction of each axis: a red line points +X,\n           * a green line +Y, and a blue line +Z. the grid and icon disappear when the\n           * spacebar is pressed.\n           */\n          p5.prototype.noDebugMode = function() {\n            this._assert3d('noDebugMode');\n\n            // start by removing existing 'post' registered debug methods\n            for (var i = this._registeredMethods.post.length - 1; i >= 0; i--) {\n              // test for equality...\n              if (\n                this._registeredMethods.post[i].toString() === this._grid().toString() ||\n                this._registeredMethods.post[i].toString() === this._axesIcon().toString()\n              ) {\n                this._registeredMethods.post.splice(i, 1);\n              }\n            }\n          };\n\n          /**\n           * For use with debugMode\n           * @private\n           * @method _grid\n           * @param {Number} [size] size of grid sides\n           * @param {Number} [div] number of grid divisions\n           * @param {Number} [xOff] offset of grid center from origin in X axis\n           * @param {Number} [yOff] offset of grid center from origin in Y axis\n           * @param {Number} [zOff] offset of grid center from origin in Z axis\n           */\n          p5.prototype._grid = function(size, numDivs, xOff, yOff, zOff) {\n            if (typeof size === 'undefined') {\n              size = this.width / 2;\n            }\n            if (typeof numDivs === 'undefined') {\n              // ensure at least 2 divisions\n              numDivs = Math.round(size / 30) < 4 ? 4 : Math.round(size / 30);\n            }\n            if (typeof xOff === 'undefined') {\n              xOff = 0;\n            }\n            if (typeof yOff === 'undefined') {\n              yOff = 0;\n            }\n            if (typeof zOff === 'undefined') {\n              zOff = 0;\n            }\n\n            var spacing = size / numDivs;\n            var halfSize = size / 2;\n\n            return function() {\n              this.push();\n              this.stroke(\n                this._renderer.curStrokeColor[0] * 255,\n                this._renderer.curStrokeColor[1] * 255,\n                this._renderer.curStrokeColor[2] * 255\n              );\n\n              this._renderer.uMVMatrix.set(\n                this._renderer._curCamera.cameraMatrix.mat4[0],\n                this._renderer._curCamera.cameraMatrix.mat4[1],\n                this._renderer._curCamera.cameraMatrix.mat4[2],\n                this._renderer._curCamera.cameraMatrix.mat4[3],\n                this._renderer._curCamera.cameraMatrix.mat4[4],\n                this._renderer._curCamera.cameraMatrix.mat4[5],\n                this._renderer._curCamera.cameraMatrix.mat4[6],\n                this._renderer._curCamera.cameraMatrix.mat4[7],\n                this._renderer._curCamera.cameraMatrix.mat4[8],\n                this._renderer._curCamera.cameraMatrix.mat4[9],\n                this._renderer._curCamera.cameraMatrix.mat4[10],\n                this._renderer._curCamera.cameraMatrix.mat4[11],\n                this._renderer._curCamera.cameraMatrix.mat4[12],\n                this._renderer._curCamera.cameraMatrix.mat4[13],\n                this._renderer._curCamera.cameraMatrix.mat4[14],\n                this._renderer._curCamera.cameraMatrix.mat4[15]\n              );\n\n              // Lines along X axis\n              for (var q = 0; q <= numDivs; q++) {\n                this.beginShape(this.LINES);\n                this.vertex(-halfSize + xOff, yOff, q * spacing - halfSize + zOff);\n                this.vertex(+halfSize + xOff, yOff, q * spacing - halfSize + zOff);\n                this.endShape();\n              }\n\n              // Lines along Z axis\n              for (var i = 0; i <= numDivs; i++) {\n                this.beginShape(this.LINES);\n                this.vertex(i * spacing - halfSize + xOff, yOff, -halfSize + zOff);\n                this.vertex(i * spacing - halfSize + xOff, yOff, +halfSize + zOff);\n                this.endShape();\n              }\n\n              this.pop();\n            };\n          };\n\n          /**\n           * For use with debugMode\n           * @private\n           * @method _axesIcon\n           * @param {Number} [size] size of axes icon lines\n           * @param {Number} [xOff] offset of icon from origin in X axis\n           * @param {Number} [yOff] offset of icon from origin in Y axis\n           * @param {Number} [zOff] offset of icon from origin in Z axis\n           */\n          p5.prototype._axesIcon = function(size, xOff, yOff, zOff) {\n            if (typeof size === 'undefined') {\n              size = this.width / 20 > 40 ? this.width / 20 : 40;\n            }\n            if (typeof xOff === 'undefined') {\n              xOff = -this.width / 4;\n            }\n            if (typeof yOff === 'undefined') {\n              yOff = xOff;\n            }\n            if (typeof zOff === 'undefined') {\n              zOff = xOff;\n            }\n\n            return function() {\n              this.push();\n              this._renderer.uMVMatrix.set(\n                this._renderer._curCamera.cameraMatrix.mat4[0],\n                this._renderer._curCamera.cameraMatrix.mat4[1],\n                this._renderer._curCamera.cameraMatrix.mat4[2],\n                this._renderer._curCamera.cameraMatrix.mat4[3],\n                this._renderer._curCamera.cameraMatrix.mat4[4],\n                this._renderer._curCamera.cameraMatrix.mat4[5],\n                this._renderer._curCamera.cameraMatrix.mat4[6],\n                this._renderer._curCamera.cameraMatrix.mat4[7],\n                this._renderer._curCamera.cameraMatrix.mat4[8],\n                this._renderer._curCamera.cameraMatrix.mat4[9],\n                this._renderer._curCamera.cameraMatrix.mat4[10],\n                this._renderer._curCamera.cameraMatrix.mat4[11],\n                this._renderer._curCamera.cameraMatrix.mat4[12],\n                this._renderer._curCamera.cameraMatrix.mat4[13],\n                this._renderer._curCamera.cameraMatrix.mat4[14],\n                this._renderer._curCamera.cameraMatrix.mat4[15]\n              );\n\n              // X axis\n              this.strokeWeight(2);\n              this.stroke(255, 0, 0);\n              this.beginShape(this.LINES);\n              this.vertex(xOff, yOff, zOff);\n              this.vertex(xOff + size, yOff, zOff);\n              this.endShape();\n              // Y axis\n              this.stroke(0, 255, 0);\n              this.beginShape(this.LINES);\n              this.vertex(xOff, yOff, zOff);\n              this.vertex(xOff, yOff + size, zOff);\n              this.endShape();\n              // Z axis\n              this.stroke(0, 0, 255);\n              this.beginShape(this.LINES);\n              this.vertex(xOff, yOff, zOff);\n              this.vertex(xOff, yOff, zOff + size);\n              this.endShape();\n              this.pop();\n            };\n          };\n\n          module.exports = p5;\n        },\n        { '../core/constants': 18, '../core/main': 24 }\n      ],\n      67: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Lights, Camera\n           * @submodule Lights\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          /**\n           * Creates an ambient light with a color\n           *\n           * @method ambientLight\n           * @param  {Number}        v1      red or hue value relative to\n           *                                 the current color range\n           * @param  {Number}        v2      green or saturation value\n           *                                 relative to the current color range\n           * @param  {Number}        v3      blue or brightness value\n           *                                 relative to the current color range\n           * @param  {Number}        [alpha] the alpha value\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(0);\n           *   ambientLight(150);\n           *   ambientMaterial(250);\n           *   noStroke();\n           *   sphere(40);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * evenly distributed light across a sphere\n           *\n           */\n\n          /**\n           * @method ambientLight\n           * @param  {String}        value   a color string\n           * @chainable\n           */\n\n          /**\n           * @method ambientLight\n           * @param  {Number}        gray   a gray value\n           * @param  {Number}        [alpha]\n           * @chainable\n           */\n\n          /**\n           * @method ambientLight\n           * @param  {Number[]}      values  an array containing the red,green,blue &\n           *                                 and alpha components of the color\n           * @chainable\n           */\n\n          /**\n           * @method ambientLight\n           * @param  {p5.Color}      color   the ambient light color\n           * @chainable\n           */\n          p5.prototype.ambientLight = function(v1, v2, v3, a) {\n            this._assert3d('ambientLight');\n            p5._validateParameters('ambientLight', arguments);\n            var color = this.color.apply(this, arguments);\n\n            this._renderer.ambientLightColors.push(\n              color._array[0],\n              color._array[1],\n              color._array[2]\n            );\n\n            this._renderer._enableLighting = true;\n\n            return this;\n          };\n\n          /**\n           * Creates a directional light with a color and a direction\n           * @method directionalLight\n           * @param  {Number}    v1       red or hue value (depending on the current\n           * color mode),\n           * @param  {Number}    v2       green or saturation value\n           * @param  {Number}    v3       blue or brightness value\n           * @param  {p5.Vector} position the direction of the light\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(0);\n           *   //move your mouse to change light direction\n           *   let dirX = (mouseX / width - 0.5) * 2;\n           *   let dirY = (mouseY / height - 0.5) * 2;\n           *   directionalLight(250, 250, 250, -dirX, -dirY, -1);\n           *   noStroke();\n           *   sphere(40);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * light source on canvas changeable with mouse position\n           *\n           */\n\n          /**\n           * @method directionalLight\n           * @param  {Number[]|String|p5.Color} color   color Array, CSS color string,\n           *                                             or <a href=\"#/p5.Color\">p5.Color</a> value\n           * @param  {Number}                   x       x axis direction\n           * @param  {Number}                   y       y axis direction\n           * @param  {Number}                   z       z axis direction\n           * @chainable\n           */\n\n          /**\n           * @method directionalLight\n           * @param  {Number[]|String|p5.Color} color\n           * @param  {p5.Vector}                position\n           * @chainable\n           */\n\n          /**\n           * @method directionalLight\n           * @param  {Number}    v1\n           * @param  {Number}    v2\n           * @param  {Number}    v3\n           * @param  {Number}    x\n           * @param  {Number}    y\n           * @param  {Number}    z\n           * @chainable\n           */\n          p5.prototype.directionalLight = function(v1, v2, v3, x, y, z) {\n            this._assert3d('directionalLight');\n            p5._validateParameters('directionalLight', arguments);\n\n            //@TODO: check parameters number\n            var color;\n            if (v1 instanceof p5.Color) {\n              color = v1;\n            } else {\n              color = this.color(v1, v2, v3);\n            }\n\n            var _x, _y, _z;\n            var v = arguments[arguments.length - 1];\n            if (typeof v === 'number') {\n              _x = arguments[arguments.length - 3];\n              _y = arguments[arguments.length - 2];\n              _z = arguments[arguments.length - 1];\n            } else {\n              _x = v.x;\n              _y = v.y;\n              _z = v.z;\n            }\n\n            // normalize direction\n            var l = Math.sqrt(_x * _x + _y * _y + _z * _z);\n            this._renderer.directionalLightDirections.push(_x / l, _y / l, _z / l);\n\n            this._renderer.directionalLightColors.push(\n              color._array[0],\n              color._array[1],\n              color._array[2]\n            );\n\n            this._renderer._enableLighting = true;\n\n            return this;\n          };\n\n          /**\n           * Creates a point light with a color and a light position\n           * @method pointLight\n           * @param  {Number}    v1       red or hue value (depending on the current\n           * color mode),\n           * @param  {Number}    v2       green or saturation value\n           * @param  {Number}    v3       blue or brightness value\n           * @param  {Number}    x        x axis position\n           * @param  {Number}    y        y axis position\n           * @param  {Number}    z        z axis position\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(0);\n           *   //move your mouse to change light position\n           *   let locX = mouseX - width / 2;\n           *   let locY = mouseY - height / 2;\n           *   // to set the light position,\n           *   // think of the world's coordinate as:\n           *   // -width/2,-height/2 -------- width/2,-height/2\n           *   //                |            |\n           *   //                |     0,0    |\n           *   //                |            |\n           *   // -width/2,height/2--------width/2,height/2\n           *   pointLight(250, 250, 250, locX, locY, 50);\n           *   noStroke();\n           *   sphere(40);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * spot light on canvas changes position with mouse\n           *\n           */\n\n          /**\n           * @method pointLight\n           * @param  {Number}    v1\n           * @param  {Number}    v2\n           * @param  {Number}    v3\n           * @param  {p5.Vector} position the position of the light\n           * @chainable\n           */\n\n          /**\n           * @method pointLight\n           * @param  {Number[]|String|p5.Color} color   color Array, CSS color string,\n           * or <a href=\"#/p5.Color\">p5.Color</a> value\n           * @param  {Number}                   x\n           * @param  {Number}                   y\n           * @param  {Number}                   z\n           * @chainable\n           */\n\n          /**\n           * @method pointLight\n           * @param  {Number[]|String|p5.Color} color\n           * @param  {p5.Vector}                position\n           * @chainable\n           */\n          p5.prototype.pointLight = function(v1, v2, v3, x, y, z) {\n            this._assert3d('pointLight');\n            p5._validateParameters('pointLight', arguments);\n\n            //@TODO: check parameters number\n            var color;\n            if (v1 instanceof p5.Color) {\n              color = v1;\n            } else {\n              color = this.color(v1, v2, v3);\n            }\n\n            var _x, _y, _z;\n            var v = arguments[arguments.length - 1];\n            if (typeof v === 'number') {\n              _x = arguments[arguments.length - 3];\n              _y = arguments[arguments.length - 2];\n              _z = arguments[arguments.length - 1];\n            } else {\n              _x = v.x;\n              _y = v.y;\n              _z = v.z;\n            }\n\n            this._renderer.pointLightPositions.push(_x, _y, _z);\n            this._renderer.pointLightColors.push(\n              color._array[0],\n              color._array[1],\n              color._array[2]\n            );\n\n            this._renderer._enableLighting = true;\n\n            return this;\n          };\n\n          /**\n           * Sets the default ambient and directional light. The defaults are <a href=\"#/p5/ambientLight\">ambientLight(128, 128, 128)</a> and <a href=\"#/p5/directionalLight\">directionalLight(128, 128, 128, 0, 0, -1)</a>. Lights need to be included in the <a href=\"#/p5/draw\">draw()</a> to remain persistent in a looping program. Placing them in the <a href=\"#/p5/setup\">setup()</a> of a looping program will cause them to only have an effect the first time through the loop.\n           * @method lights\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(0);\n           *   lights();\n           *   rotateX(millis() / 1000);\n           *   rotateY(millis() / 1000);\n           *   rotateZ(millis() / 1000);\n           *   box();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * the light is partially ambient and partially directional\n           */\n          p5.prototype.lights = function() {\n            this._assert3d('lights');\n            this.ambientLight(128, 128, 128);\n            this.directionalLight(128, 128, 128, 0, 0, -1);\n            return this;\n          };\n\n          /**\n           * Sets the falloff rates for point lights. It affects only the elements which are created after it in the code.\n           * The default value is lightFalloff(1.0, 0.0, 0.0), and the parameters are used to calculate the falloff with the following equation:\n           *\n           * d = distance from light position to vertex position\n           *\n           * falloff = 1 / (CONSTANT + d \\* LINEAR + ( d \\* d ) \\* QUADRATIC)\n           *\n           * @method lightFalloff\n           * @param {Number} constant   constant value for determining falloff\n           * @param {Number} linear     linear value for determining falloff\n           * @param {Number} quadratic  quadratic value for determining falloff\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   noStroke();\n           * }\n           * function draw() {\n           *   background(0);\n           *   let locX = mouseX - width / 2;\n           *   let locY = mouseY - height / 2;\n           *   translate(-25, 0, 0);\n           *   lightFalloff(1, 0, 0);\n           *   pointLight(250, 250, 250, locX, locY, 50);\n           *   sphere(20);\n           *   translate(50, 0, 0);\n           *   lightFalloff(0.9, 0.01, 0);\n           *   pointLight(250, 250, 250, locX, locY, 50);\n           *   sphere(20);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Two spheres with different falloff values show different intensity of light\n           *\n           */\n          p5.prototype.lightFalloff = function(\n            constantAttenuation,\n            linearAttenuation,\n            quadraticAttenuation\n          ) {\n            this._assert3d('lightFalloff');\n            p5._validateParameters('lightFalloff', arguments);\n\n            if (constantAttenuation < 0) {\n              constantAttenuation = 0;\n              console.warn(\n                'Value of constant argument in lightFalloff() should be never be negative. Set to 0.'\n              );\n            }\n\n            if (linearAttenuation < 0) {\n              linearAttenuation = 0;\n              console.warn(\n                'Value of linear argument in lightFalloff() should be never be negative. Set to 0.'\n              );\n            }\n\n            if (quadraticAttenuation < 0) {\n              quadraticAttenuation = 0;\n              console.warn(\n                'Value of quadratic argument in lightFalloff() should be never be negative. Set to 0.'\n              );\n            }\n\n            if (\n              constantAttenuation === 0 &&\n              linearAttenuation === 0 &&\n              quadraticAttenuation === 0\n            ) {\n              constantAttenuation = 1;\n              console.warn(\n                'Either one of the three arguments in lightFalloff() should be greater than zero. Set constant argument to 1.'\n              );\n            }\n\n            this._renderer.constantAttenuation = constantAttenuation;\n            this._renderer.linearAttenuation = linearAttenuation;\n            this._renderer.quadraticAttenuation = quadraticAttenuation;\n\n            return this;\n          };\n\n          module.exports = p5;\n        },\n        { '../core/main': 24 }\n      ],\n      68: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Shape\n           * @submodule 3D Models\n           * @for p5\n           * @requires core\n           * @requires p5.Geometry\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          _dereq_('./p5.Geometry');\n\n          /**\n           * Load a 3d model from an OBJ or STL file.\n           * <br><br>\n           * One of the limitations of the OBJ and STL format is that it doesn't have a built-in\n           * sense of scale. This means that models exported from different programs might\n           * be very different sizes. If your model isn't displaying, try calling\n           * <a href=\"#/p5/loadModel\">loadModel()</a> with the normalized parameter set to true. This will resize the\n           * model to a scale appropriate for p5. You can also make additional changes to\n           * the final size of your model with the <a href=\"#/p5/scale\">scale()</a> function.\n           *\n           * Also, the support for colored STL files is not present. STL files with color will be\n           * rendered without color properties.\n           *\n           * @method loadModel\n           * @param  {String} path              Path of the model to be loaded\n           * @param  {Boolean} normalize        If true, scale the model to a\n           *                                      standardized size when loading\n           * @param  {function(p5.Geometry)} [successCallback] Function to be called\n           *                                     once the model is loaded. Will be passed\n           *                                     the 3D model object.\n           * @param  {function(Event)} [failureCallback] called with event error if\n           *                                         the model fails to load.\n           * @return {p5.Geometry} the <a href=\"#/p5.Geometry\">p5.Geometry</a> object\n           *\n           * @example\n           * <div>\n           * <code>\n           * //draw a spinning octahedron\n           * let octahedron;\n           *\n           * function preload() {\n           *   octahedron = loadModel('assets/octahedron.obj');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   model(octahedron);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Vertically rotating 3-d octahedron.\n           *\n           * @example\n           * <div>\n           * <code>\n           * //draw a spinning teapot\n           * let teapot;\n           *\n           * function preload() {\n           *   // Load model with normalise parameter set to true\n           *   teapot = loadModel('assets/teapot.obj', true);\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   scale(0.4); // Scaled to make model fit into canvas\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   normalMaterial(); // For effect\n           *   model(teapot);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Vertically rotating 3-d teapot with red, green and blue gradient.\n           */\n          /**\n           * @method loadModel\n           * @param  {String} path\n           * @param  {function(p5.Geometry)} [successCallback]\n           * @param  {function(Event)} [failureCallback]\n           * @return {p5.Geometry} the <a href=\"#/p5.Geometry\">p5.Geometry</a> object\n           */\n          p5.prototype.loadModel = function(path) {\n            p5._validateParameters('loadModel', arguments);\n            var normalize;\n            var successCallback;\n            var failureCallback;\n            if (typeof arguments[1] === 'boolean') {\n              normalize = arguments[1];\n              successCallback = arguments[2];\n              failureCallback = arguments[3];\n            } else {\n              normalize = false;\n              successCallback = arguments[1];\n              failureCallback = arguments[2];\n            }\n\n            var fileType = path.slice(-4);\n            var model = new p5.Geometry();\n            model.gid = path + '|' + normalize;\n            var self = this;\n\n            if (fileType === '.stl') {\n              this.httpDo(\n                path,\n                'GET',\n                'arrayBuffer',\n                function(arrayBuffer) {\n                  parseSTL(model, arrayBuffer);\n\n                  if (normalize) {\n                    model.normalize();\n                  }\n                  self._decrementPreload();\n                  if (typeof successCallback === 'function') {\n                    successCallback(model);\n                  }\n                }.bind(this),\n                failureCallback\n              );\n            } else if (fileType === '.obj') {\n              this.loadStrings(\n                path,\n                function(strings) {\n                  parseObj(model, strings);\n\n                  if (normalize) {\n                    model.normalize();\n                  }\n\n                  self._decrementPreload();\n                  if (typeof successCallback === 'function') {\n                    successCallback(model);\n                  }\n                }.bind(this),\n                failureCallback\n              );\n            } else {\n              p5._friendlyFileLoadError(3, path);\n\n              if (failureCallback) {\n                failureCallback();\n              } else {\n                console.error(\n                  'Sorry, the file type is invalid. Only OBJ and STL files are supported.'\n                );\n              }\n            }\n            return model;\n          };\n\n          /**\n           * Parse OBJ lines into model. For reference, this is what a simple model of a\n           * square might look like:\n           *\n           * v -0.5 -0.5 0.5\n           * v -0.5 -0.5 -0.5\n           * v -0.5 0.5 -0.5\n           * v -0.5 0.5 0.5\n           *\n           * f 4 3 2 1\n           */\n          function parseObj(model, lines) {\n            // OBJ allows a face to specify an index for a vertex (in the above example),\n            // but it also allows you to specify a custom combination of vertex, UV\n            // coordinate, and vertex normal. So, \"3/4/3\" would mean, \"use vertex 3 with\n            // UV coordinate 4 and vertex normal 3\". In WebGL, every vertex with different\n            // parameters must be a different vertex, so loadedVerts is used to\n            // temporarily store the parsed vertices, normals, etc., and indexedVerts is\n            // used to map a specific combination (keyed on, for example, the string\n            // \"3/4/3\"), to the actual index of the newly created vertex in the final\n            // object.\n            var loadedVerts = {\n              v: [],\n              vt: [],\n              vn: []\n            };\n\n            var indexedVerts = {};\n\n            for (var line = 0; line < lines.length; ++line) {\n              // Each line is a separate object (vertex, face, vertex normal, etc)\n              // For each line, split it into tokens on whitespace. The first token\n              // describes the type.\n              var tokens = lines[line].trim().split(/\\b\\s+/);\n\n              if (tokens.length > 0) {\n                if (tokens[0] === 'v' || tokens[0] === 'vn') {\n                  // Check if this line describes a vertex or vertex normal.\n                  // It will have three numeric parameters.\n                  var vertex = new p5.Vector(\n                    parseFloat(tokens[1]),\n                    parseFloat(tokens[2]),\n                    parseFloat(tokens[3])\n                  );\n\n                  loadedVerts[tokens[0]].push(vertex);\n                } else if (tokens[0] === 'vt') {\n                  // Check if this line describes a texture coordinate.\n                  // It will have two numeric parameters.\n                  var texVertex = [parseFloat(tokens[1]), parseFloat(tokens[2])];\n                  loadedVerts[tokens[0]].push(texVertex);\n                } else if (tokens[0] === 'f') {\n                  // Check if this line describes a face.\n                  // OBJ faces can have more than three points. Triangulate points.\n                  for (var tri = 3; tri < tokens.length; ++tri) {\n                    var face = [];\n\n                    var vertexTokens = [1, tri - 1, tri];\n\n                    for (var tokenInd = 0; tokenInd < vertexTokens.length; ++tokenInd) {\n                      // Now, convert the given token into an index\n                      var vertString = tokens[vertexTokens[tokenInd]];\n                      var vertIndex = 0;\n\n                      // TODO: Faces can technically use negative numbers to refer to the\n                      // previous nth vertex. I haven't seen this used in practice, but\n                      // it might be good to implement this in the future.\n\n                      if (indexedVerts[vertString] !== undefined) {\n                        vertIndex = indexedVerts[vertString];\n                      } else {\n                        var vertParts = vertString.split('/');\n                        for (var i = 0; i < vertParts.length; i++) {\n                          vertParts[i] = parseInt(vertParts[i]) - 1;\n                        }\n\n                        vertIndex = indexedVerts[vertString] = model.vertices.length;\n                        model.vertices.push(loadedVerts.v[vertParts[0]].copy());\n                        if (loadedVerts.vt[vertParts[1]]) {\n                          model.uvs.push(loadedVerts.vt[vertParts[1]].slice());\n                        } else {\n                          model.uvs.push([0, 0]);\n                        }\n\n                        if (loadedVerts.vn[vertParts[2]]) {\n                          model.vertexNormals.push(loadedVerts.vn[vertParts[2]].copy());\n                        }\n                      }\n\n                      face.push(vertIndex);\n                    }\n\n                    if (face[0] !== face[1] && face[0] !== face[2] && face[1] !== face[2]) {\n                      model.faces.push(face);\n                    }\n                  }\n                }\n              }\n            }\n            // If the model doesn't have normals, compute the normals\n            if (model.vertexNormals.length === 0) {\n              model.computeNormals();\n            }\n\n            return model;\n          }\n\n          /**\n           * STL files can be of two types, ASCII and Binary,\n           *\n           * We need to convert the arrayBuffer to an array of strings,\n           * to parse it as an ASCII file.\n           */\n          function parseSTL(model, buffer) {\n            if (isBinary(buffer)) {\n              parseBinarySTL(model, buffer);\n            } else {\n              var reader = new DataView(buffer);\n\n              if (!('TextDecoder' in window)) {\n                console.warn(\n                  'Sorry, ASCII STL loading only works in browsers that support TextDecoder (https://caniuse.com/#feat=textencoder)'\n                );\n\n                return model;\n              }\n\n              var decoder = new TextDecoder('utf-8');\n              var lines = decoder.decode(reader);\n              var lineArray = lines.split('\\n');\n              parseASCIISTL(model, lineArray);\n            }\n            return model;\n          }\n\n          /**\n           * This function checks if the file is in ASCII format or in Binary format\n           *\n           * It is done by searching keyword `solid` at the start of the file.\n           *\n           * An ASCII STL data must begin with `solid` as the first six bytes.\n           * However, ASCII STLs lacking the SPACE after the `d` are known to be\n           * plentiful. So, check the first 5 bytes for `solid`.\n           *\n           * Several encodings, such as UTF-8, precede the text with up to 5 bytes:\n           * https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\n           * Search for `solid` to start anywhere after those prefixes.\n           */\n          function isBinary(data) {\n            var reader = new DataView(data);\n\n            // US-ASCII ordinal values for `s`, `o`, `l`, `i`, `d`\n            var solid = [115, 111, 108, 105, 100];\n            for (var off = 0; off < 5; off++) {\n              // If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\n              if (matchDataViewAt(solid, reader, off)) return false;\n            }\n\n            // Couldn't find \"solid\" text at the beginning; it is binary STL.\n            return true;\n          }\n\n          /**\n           * This function matches the `query` at the provided `offset`\n           */\n          function matchDataViewAt(query, reader, offset) {\n            // Check if each byte in query matches the corresponding byte from the current offset\n            for (var i = 0, il = query.length; i < il; i++) {\n              if (query[i] !== reader.getUint8(offset + i, false)) return false;\n            }\n\n            return true;\n          }\n\n          /**\n           * This function parses the Binary STL files.\n           * https://en.wikipedia.org/wiki/STL_%28file_format%29#Binary_STL\n           *\n           * Currently there is no support for the colors provided in STL files.\n           */\n          function parseBinarySTL(model, buffer) {\n            var reader = new DataView(buffer);\n\n            // Number of faces is present following the header\n            var faces = reader.getUint32(80, true);\n            var r,\n              g,\n              b,\n              hasColors = false,\n              colors;\n            var defaultR, defaultG, defaultB;\n\n            // Binary files contain 80-byte header, which is generally ignored.\n            for (var index = 0; index < 80 - 10; index++) {\n              // Check for `COLOR=`\n              if (\n                reader.getUint32(index, false) === 0x434f4c4f /*COLO*/ &&\n                reader.getUint8(index + 4) === 0x52 /*'R'*/ &&\n                reader.getUint8(index + 5) === 0x3d /*'='*/\n              ) {\n                hasColors = true;\n                colors = [];\n\n                defaultR = reader.getUint8(index + 6) / 255;\n                defaultG = reader.getUint8(index + 7) / 255;\n                defaultB = reader.getUint8(index + 8) / 255;\n                // To be used when color support is added\n                // alpha = reader.getUint8(index + 9) / 255;\n              }\n            }\n            var dataOffset = 84;\n            var faceLength = 12 * 4 + 2;\n\n            // Iterate the faces\n            for (var face = 0; face < faces; face++) {\n              var start = dataOffset + face * faceLength;\n              var normalX = reader.getFloat32(start, true);\n              var normalY = reader.getFloat32(start + 4, true);\n              var normalZ = reader.getFloat32(start + 8, true);\n\n              if (hasColors) {\n                var packedColor = reader.getUint16(start + 48, true);\n\n                if ((packedColor & 0x8000) === 0) {\n                  // facet has its own unique color\n                  r = (packedColor & 0x1f) / 31;\n                  g = ((packedColor >> 5) & 0x1f) / 31;\n                  b = ((packedColor >> 10) & 0x1f) / 31;\n                } else {\n                  r = defaultR;\n                  g = defaultG;\n                  b = defaultB;\n                }\n              }\n\n              for (var i = 1; i <= 3; i++) {\n                var vertexstart = start + i * 12;\n\n                var newVertex = new p5.Vector(\n                  reader.getFloat32(vertexstart, true),\n                  reader.getFloat32(vertexstart + 8, true),\n                  reader.getFloat32(vertexstart + 4, true)\n                );\n\n                model.vertices.push(newVertex);\n\n                if (hasColors) {\n                  colors.push(r, g, b);\n                }\n              }\n\n              var newNormal = new p5.Vector(normalX, normalY, normalZ);\n\n              model.vertexNormals.push(newNormal, newNormal, newNormal);\n\n              model.faces.push([3 * face, 3 * face + 1, 3 * face + 2]);\n            }\n            if (hasColors) {\n              // add support for colors here.\n            }\n            return model;\n          }\n\n          /**\n           * ASCII STL file starts with `solid 'nameOfFile'`\n           * Then contain the normal of the face, starting with `facet normal`\n           * Next contain a keyword indicating the start of face vertex, `outer loop`\n           * Next comes the three vertex, starting with `vertex x y z`\n           * Vertices ends with `endloop`\n           * Face ends with `endfacet`\n           * Next face starts with `facet normal`\n           * The end of the file is indicated by `endsolid`\n           */\n          function parseASCIISTL(model, lines) {\n            var state = '';\n            var curVertexIndex = [];\n            var newNormal, newVertex;\n\n            for (var iterator = 0; iterator < lines.length; ++iterator) {\n              var line = lines[iterator].trim();\n              var parts = line.split(' ');\n\n              for (var partsiterator = 0; partsiterator < parts.length; ++partsiterator) {\n                if (parts[partsiterator] === '') {\n                  // Ignoring multiple whitespaces\n                  parts.splice(partsiterator, 1);\n                }\n              }\n\n              if (parts.length === 0) {\n                // Remove newline\n                continue;\n              }\n\n              switch (state) {\n                case '': // First run\n                  if (parts[0] !== 'solid') {\n                    // Invalid state\n                    console.error(line);\n                    console.error('Invalid state \"' + parts[0] + '\", should be \"solid\"');\n                    return;\n                  } else {\n                    state = 'solid';\n                  }\n                  break;\n\n                case 'solid': // First face\n                  if (parts[0] !== 'facet' || parts[1] !== 'normal') {\n                    // Invalid state\n                    console.error(line);\n                    console.error(\n                      'Invalid state \"' + parts[0] + '\", should be \"facet normal\"'\n                    );\n\n                    return;\n                  } else {\n                    // Push normal for first face\n                    newNormal = new p5.Vector(\n                      parseFloat(parts[2]),\n                      parseFloat(parts[3]),\n                      parseFloat(parts[4])\n                    );\n\n                    model.vertexNormals.push(newNormal, newNormal, newNormal);\n                    state = 'facet normal';\n                  }\n                  break;\n\n                case 'facet normal': // After normal is defined\n                  if (parts[0] !== 'outer' || parts[1] !== 'loop') {\n                    // Invalid State\n                    console.error(line);\n                    console.error(\n                      'Invalid state \"' + parts[0] + '\", should be \"outer loop\"'\n                    );\n\n                    return;\n                  } else {\n                    // Next should be vertices\n                    state = 'vertex';\n                  }\n                  break;\n\n                case 'vertex':\n                  if (parts[0] === 'vertex') {\n                    //Vertex of triangle\n                    newVertex = new p5.Vector(\n                      parseFloat(parts[1]),\n                      parseFloat(parts[2]),\n                      parseFloat(parts[3])\n                    );\n\n                    model.vertices.push(newVertex);\n                    curVertexIndex.push(model.vertices.indexOf(newVertex));\n                  } else if (parts[0] === 'endloop') {\n                    // End of vertices\n                    model.faces.push(curVertexIndex);\n                    curVertexIndex = [];\n                    state = 'endloop';\n                  } else {\n                    // Invalid State\n                    console.error(line);\n                    console.error(\n                      'Invalid state \"' + parts[0] + '\", should be \"vertex\" or \"endloop\"'\n                    );\n\n                    return;\n                  }\n                  break;\n\n                case 'endloop':\n                  if (parts[0] !== 'endfacet') {\n                    // End of face\n                    console.error(line);\n                    console.error('Invalid state \"' + parts[0] + '\", should be \"endfacet\"');\n\n                    return;\n                  } else {\n                    state = 'endfacet';\n                  }\n                  break;\n\n                case 'endfacet':\n                  if (parts[0] === 'endsolid') {\n                    // End of solid\n                  } else if (parts[0] === 'facet' && parts[1] === 'normal') {\n                    // Next face\n                    newNormal = new p5.Vector(\n                      parseFloat(parts[2]),\n                      parseFloat(parts[3]),\n                      parseFloat(parts[4])\n                    );\n\n                    model.vertexNormals.push(newNormal, newNormal, newNormal);\n                    state = 'facet normal';\n                  } else {\n                    // Invalid State\n                    console.error(line);\n                    console.error(\n                      'Invalid state \"' +\n                        parts[0] +\n                        '\", should be \"endsolid\" or \"facet normal\"'\n                    );\n\n                    return;\n                  }\n                  break;\n\n                default:\n                  console.error('Invalid state \"' + state + '\"');\n                  break;\n              }\n            }\n            return model;\n          }\n\n          /**\n           * Render a 3d model to the screen.\n           *\n           * @method model\n           * @param  {p5.Geometry} model Loaded 3d model to be rendered\n           * @example\n           * <div>\n           * <code>\n           * //draw a spinning octahedron\n           * let octahedron;\n           *\n           * function preload() {\n           *   octahedron = loadModel('assets/octahedron.obj');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   model(octahedron);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Vertically rotating 3-d octahedron.\n           *\n           */\n          p5.prototype.model = function(model) {\n            this._assert3d('model');\n            p5._validateParameters('model', arguments);\n            if (model.vertices.length > 0) {\n              if (!this._renderer.geometryInHash(model.gid)) {\n                model._makeTriangleEdges()._edgesToVertices();\n                this._renderer.createBuffers(model.gid, model);\n              }\n\n              this._renderer.drawBuffers(model.gid);\n            }\n          };\n\n          module.exports = p5;\n        },\n        { '../core/main': 24, './p5.Geometry': 71 }\n      ],\n      69: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Lights, Camera\n           * @submodule Material\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          var constants = _dereq_('../core/constants');\n          _dereq_('./p5.Texture');\n\n          /**\n           * Loads a custom shader from the provided vertex and fragment\n           * shader paths. The shader files are loaded asynchronously in the\n           * background, so this method should be used in <a href=\"#/p5/preload\">preload()</a>.\n           *\n           * For now, there are three main types of shaders. p5 will automatically\n           * supply appropriate vertices, normals, colors, and lighting attributes\n           * if the parameters defined in the shader match the names.\n           *\n           * @method loadShader\n           * @param {String} vertFilename path to file containing vertex shader\n           * source code\n           * @param {String} fragFilename path to file containing fragment shader\n           * source code\n           * @param {function} [callback] callback to be executed after loadShader\n           * completes. On success, the Shader object is passed as the first argument.\n           * @param {function} [errorCallback] callback to be executed when an error\n           * occurs inside loadShader. On error, the error is passed as the first\n           * argument.\n           * @return {p5.Shader} a shader object created from the provided\n           * vertex and fragment shader files.\n           *\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * let mandel;\n           * function preload() {\n           *   // load the shader definitions from files\n           *   mandel = loadShader('assets/shader.vert', 'assets/shader.frag');\n           * }\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   // use the shader\n           *   shader(mandel);\n           *   noStroke();\n           *   mandel.setUniform('p', [-0.74364388703, 0.13182590421]);\n           * }\n           *\n           * function draw() {\n           *   mandel.setUniform('r', 1.5 * exp(-6.5 * (1 + sin(millis() / 2000))));\n           *   quad(-1, -1, 1, -1, 1, 1, -1, 1);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * zooming Mandelbrot set. a colorful, infinitely detailed fractal.\n           */\n          p5.prototype.loadShader = function(\n            vertFilename,\n            fragFilename,\n            callback,\n            errorCallback\n          ) {\n            p5._validateParameters('loadShader', arguments);\n            if (!errorCallback) {\n              errorCallback = console.error;\n            }\n\n            var loadedShader = new p5.Shader();\n\n            var self = this;\n            var loadedFrag = false;\n            var loadedVert = false;\n\n            var onLoad = function onLoad() {\n              self._decrementPreload();\n              if (callback) {\n                callback(loadedShader);\n              }\n            };\n\n            this.loadStrings(\n              vertFilename,\n              function(result) {\n                loadedShader._vertSrc = result.join('\\n');\n                loadedVert = true;\n                if (loadedFrag) {\n                  onLoad();\n                }\n              },\n              errorCallback\n            );\n\n            this.loadStrings(\n              fragFilename,\n              function(result) {\n                loadedShader._fragSrc = result.join('\\n');\n                loadedFrag = true;\n                if (loadedVert) {\n                  onLoad();\n                }\n              },\n              errorCallback\n            );\n\n            return loadedShader;\n          };\n\n          /**\n           * @method createShader\n           * @param {String} vertSrc source code for the vertex shader\n           * @param {String} fragSrc source code for the fragment shader\n           * @returns {p5.Shader} a shader object created from the provided\n           * vertex and fragment shaders.\n           *\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * // the 'varying's are shared between both vertex & fragment shaders\n           * let varying = 'precision highp float; varying vec2 vPos;';\n           *\n           * // the vertex shader is called for each vertex\n           * let vs =\n           *   varying +\n           *   'attribute vec3 aPosition;' +\n           *   'void main() { vPos = (gl_Position = vec4(aPosition,1.0)).xy; }';\n           *\n           * // the fragment shader is called for each pixel\n           * let fs =\n           *   varying +\n           *   'uniform vec2 p;' +\n           *   'uniform float r;' +\n           *   'const int I = 500;' +\n           *   'void main() {' +\n           *   '  vec2 c = p + vPos * r, z = c;' +\n           *   '  float n = 0.0;' +\n           *   '  for (int i = I; i > 0; i --) {' +\n           *   '    if(z.x*z.x+z.y*z.y > 4.0) {' +\n           *   '      n = float(i)/float(I);' +\n           *   '      break;' +\n           *   '    }' +\n           *   '    z = vec2(z.x*z.x-z.y*z.y, 2.0*z.x*z.y) + c;' +\n           *   '  }' +\n           *   '  gl_FragColor = vec4(0.5-cos(n*17.0)/2.0,0.5-cos(n*13.0)/2.0,0.5-cos(n*23.0)/2.0,1.0);' +\n           *   '}';\n           *\n           * let mandel;\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *\n           *   // create and initialize the shader\n           *   mandel = createShader(vs, fs);\n           *   shader(mandel);\n           *   noStroke();\n           *\n           *   // 'p' is the center point of the Mandelbrot image\n           *   mandel.setUniform('p', [-0.74364388703, 0.13182590421]);\n           * }\n           *\n           * function draw() {\n           *   // 'r' is the size of the image in Mandelbrot-space\n           *   mandel.setUniform('r', 1.5 * exp(-6.5 * (1 + sin(millis() / 2000))));\n           *   quad(-1, -1, 1, -1, 1, 1, -1, 1);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * zooming Mandelbrot set. a colorful, infinitely detailed fractal.\n           */\n          p5.prototype.createShader = function(vertSrc, fragSrc) {\n            this._assert3d('createShader');\n            p5._validateParameters('createShader', arguments);\n            return new p5.Shader(this._renderer, vertSrc, fragSrc);\n          };\n\n          /**\n           * The <a href=\"#/p5/shader\">shader()</a> function lets the user provide a custom shader\n           * to fill in shapes in WEBGL mode. Users can create their\n           * own shaders by loading vertex and fragment shaders with\n           * <a href=\"#/p5/loadShader\">loadShader()</a>.\n           *\n           * @method shader\n           * @chainable\n           * @param {p5.Shader} [s] the desired <a href=\"#/p5.Shader\">p5.Shader</a> to use for rendering\n           * shapes.\n           *\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * // Click within the image to toggle\n           * // the shader used by the quad shape\n           * // Note: for an alternative approach to the same example,\n           * // involving changing uniforms please refer to:\n           * // https://p5js.org/reference/#/p5.Shader/setUniform\n           *\n           * let redGreen;\n           * let orangeBlue;\n           * let showRedGreen = false;\n           *\n           * function preload() {\n           *   // note that we are using two instances\n           *   // of the same vertex and fragment shaders\n           *   redGreen = loadShader('assets/shader.vert', 'assets/shader-gradient.frag');\n           *   orangeBlue = loadShader('assets/shader.vert', 'assets/shader-gradient.frag');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *\n           *   // initialize the colors for redGreen shader\n           *   shader(redGreen);\n           *   redGreen.setUniform('colorCenter', [1.0, 0.0, 0.0]);\n           *   redGreen.setUniform('colorBackground', [0.0, 1.0, 0.0]);\n           *\n           *   // initialize the colors for orangeBlue shader\n           *   shader(orangeBlue);\n           *   orangeBlue.setUniform('colorCenter', [1.0, 0.5, 0.0]);\n           *   orangeBlue.setUniform('colorBackground', [0.226, 0.0, 0.615]);\n           *\n           *   noStroke();\n           * }\n           *\n           * function draw() {\n           *   // update the offset values for each shader,\n           *   // moving orangeBlue in vertical and redGreen\n           *   // in horizontal direction\n           *   orangeBlue.setUniform('offset', [0, sin(millis() / 2000) + 1]);\n           *   redGreen.setUniform('offset', [sin(millis() / 2000), 1]);\n           *\n           *   if (showRedGreen === true) {\n           *     shader(redGreen);\n           *   } else {\n           *     shader(orangeBlue);\n           *   }\n           *   quad(-1, -1, 1, -1, 1, 1, -1, 1);\n           * }\n           *\n           * function mouseClicked() {\n           *   showRedGreen = !showRedGreen;\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * canvas toggles between a circular gradient of orange and blue vertically. and a circular gradient of red and green moving horizontally when mouse is clicked/pressed.\n           */\n          p5.prototype.shader = function(s) {\n            this._assert3d('shader');\n            p5._validateParameters('shader', arguments);\n\n            if (s._renderer === undefined) {\n              s._renderer = this._renderer;\n            }\n\n            if (s.isStrokeShader()) {\n              this._renderer.userStrokeShader = s;\n            } else {\n              this._renderer.userFillShader = s;\n              this._renderer._useNormalMaterial = false;\n            }\n\n            s.init();\n\n            return this;\n          };\n\n          /**\n           * This function restores the default shaders in WEBGL mode. Code that runs\n           * after resetShader() will not be affected by previously defined\n           * shaders. Should be run after <a href=\"#/p5/shader\">shader()</a>.\n           *\n           * @method resetShader\n           * @chainable\n           */\n          p5.prototype.resetShader = function() {\n            this._renderer.userFillShader = this._renderer.userStrokeShader = null;\n            return this;\n          };\n\n          /**\n           * Normal material for geometry. You can view all\n           * possible materials in this\n           * <a href=\"https://p5js.org/examples/3d-materials.html\">example</a>.\n           * @method normalMaterial\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   normalMaterial();\n           *   sphere(40);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Red, green and blue gradient.\n           *\n           */\n          p5.prototype.normalMaterial = function() {\n            this._assert3d('normalMaterial');\n            p5._validateParameters('normalMaterial', arguments);\n            this._renderer.drawMode = constants.FILL;\n            this._renderer._useSpecularMaterial = false;\n            this._renderer._useNormalMaterial = true;\n            this._renderer.curFillColor = [1, 1, 1, 1];\n            this._renderer._setProperty('_doFill', true);\n            this.noStroke();\n            return this;\n          };\n\n          /**\n           * Texture for geometry.  You can view other possible materials in this\n           * <a href=\"https://p5js.org/examples/3d-materials.html\">example</a>.\n           * @method texture\n           * @param {p5.Image|p5.MediaElement|p5.Graphics} tex 2-dimensional graphics\n           *                    to render as texture\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/laDefense.jpg');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   rotateZ(frameCount * 0.01);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   //pass image as texture\n           *   texture(img);\n           *   box(200, 200, 200);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let pg;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   pg = createGraphics(200, 200);\n           *   pg.textSize(75);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   pg.background(255);\n           *   pg.text('hello!', 0, 100);\n           *   //pass image as texture\n           *   texture(pg);\n           *   rotateX(0.5);\n           *   noStroke();\n           *   plane(50);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let vid;\n           * function preload() {\n           *   vid = createVideo('assets/fingers.mov');\n           *   vid.hide();\n           * }\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   //pass video frame as texture\n           *   texture(vid);\n           *   rect(-40, -40, 80, 80);\n           * }\n           *\n           * function mousePressed() {\n           *   vid.loop();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Rotating view of many images umbrella and grid roof on a 3d plane\n           * black canvas\n           * black canvas\n           *\n           */\n          p5.prototype.texture = function(tex) {\n            this._assert3d('texture');\n            p5._validateParameters('texture', arguments);\n\n            this._renderer.drawMode = constants.TEXTURE;\n            this._renderer._useSpecularMaterial = false;\n            this._renderer._useNormalMaterial = false;\n            this._renderer._tex = tex;\n            this._renderer._setProperty('_doFill', true);\n\n            return this;\n          };\n\n          /**\n           * Sets the coordinate space for texture mapping. The default mode is IMAGE\n           * which refers to the actual coordinates of the image.\n           * NORMAL refers to a normalized space of values ranging from 0 to 1.\n           * This function only works in WEBGL mode.\n           *\n           * With IMAGE, if an image is 100 x 200 pixels, mapping the image onto the entire\n           * size of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\n           * The same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).\n           * @method  textureMode\n           * @param {Constant} mode either IMAGE or NORMAL\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           *\n           * function preload() {\n           *   img = loadImage('assets/laDefense.jpg');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   texture(img);\n           *   textureMode(NORMAL);\n           *   beginShape();\n           *   vertex(-50, -50, 0, 0);\n           *   vertex(50, -50, 1, 0);\n           *   vertex(50, 50, 1, 1);\n           *   vertex(-50, 50, 0, 1);\n           *   endShape();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * the underside of a white umbrella and gridded ceiling above\n           *\n           * <div>\n           * <code>\n           * let img;\n           *\n           * function preload() {\n           *   img = loadImage('assets/laDefense.jpg');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   texture(img);\n           *   textureMode(NORMAL);\n           *   beginShape();\n           *   vertex(-50, -50, 0, 0);\n           *   vertex(50, -50, img.width, 0);\n           *   vertex(50, 50, img.width, img.height);\n           *   vertex(-50, 50, 0, img.height);\n           *   endShape();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * the underside of a white umbrella and gridded ceiling above\n           *\n           */\n          p5.prototype.textureMode = function(mode) {\n            if (mode !== constants.IMAGE && mode !== constants.NORMAL) {\n              console.warn(\n                'You tried to set ' + mode + ' textureMode only supports IMAGE & NORMAL '\n              );\n            } else {\n              this._renderer.textureMode = mode;\n            }\n          };\n\n          /**\n           * Sets the global texture wrapping mode. This controls how textures behave\n           * when their uv's go outside of the 0 - 1 range. There are three options:\n           * CLAMP, REPEAT, and MIRROR.\n           *\n           * CLAMP causes the pixels at the edge of the texture to extend to the bounds\n           * REPEAT causes the texture to tile repeatedly until reaching the bounds\n           * MIRROR works similarly to REPEAT but it flips the texture with every new tile\n           *\n           * REPEAT & MIRROR are only available if the texture\n           * is a power of two size (128, 256, 512, 1024, etc.).\n           *\n           * This method will affect all textures in your sketch until a subsequent\n           * textureWrap call is made.\n           *\n           * If only one argument is provided, it will be applied to both the\n           * horizontal and vertical axes.\n           * @method textureWrap\n           * @param {Constant} wrapX either CLAMP, REPEAT, or MIRROR\n           * @param {Constant} [wrapY] either CLAMP, REPEAT, or MIRROR\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/rockies128.jpg');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   textureWrap(MIRROR);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *\n           *   let dX = mouseX;\n           *   let dY = mouseY;\n           *\n           *   let u = lerp(1.0, 2.0, dX);\n           *   let v = lerp(1.0, 2.0, dY);\n           *\n           *   scale(width / 2);\n           *\n           *   texture(img);\n           *\n           *   beginShape(TRIANGLES);\n           *   vertex(-1, -1, 0, 0, 0);\n           *   vertex(1, -1, 0, u, 0);\n           *   vertex(1, 1, 0, u, v);\n           *\n           *   vertex(1, 1, 0, u, v);\n           *   vertex(-1, 1, 0, 0, v);\n           *   vertex(-1, -1, 0, 0, 0);\n           *   endShape();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * an image of the rocky mountains repeated in mirrored tiles\n           *\n           */\n          p5.prototype.textureWrap = function(wrapX, wrapY) {\n            wrapY = wrapY || wrapX;\n\n            this._renderer.textureWrapX = wrapX;\n            this._renderer.textureWrapY = wrapY;\n\n            var textures = this._renderer.textures;\n            for (var i = 0; i < textures.length; i++) {\n              textures[i].setWrapMode(wrapX, wrapY);\n            }\n          };\n\n          /**\n           * Ambient material for geometry with a given color. You can view all\n           * possible materials in this\n           * <a href=\"https://p5js.org/examples/3d-materials.html\">example</a>.\n           * @method  ambientMaterial\n           * @param  {Number} v1  gray value, red or hue value\n           *                         (depending on the current color mode),\n           * @param  {Number} [v2] green or saturation value\n           * @param  {Number} [v3] blue or brightness value\n           * @param  {Number} [a]  opacity\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(0);\n           *   noStroke();\n           *   ambientLight(200);\n           *   ambientMaterial(70, 130, 230);\n           *   sphere(40);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * radiating light source from top right of canvas\n           *\n           */\n          /**\n           * @method  ambientMaterial\n           * @param  {Number[]|String|p5.Color} color  color, color Array, or CSS color string\n           * @chainable\n           */\n          p5.prototype.ambientMaterial = function(v1, v2, v3, a) {\n            this._assert3d('ambientMaterial');\n            p5._validateParameters('ambientMaterial', arguments);\n\n            var color = p5.prototype.color.apply(this, arguments);\n            this._renderer.curFillColor = color._array;\n            this._renderer._useSpecularMaterial = false;\n            this._renderer._useNormalMaterial = false;\n            this._renderer._enableLighting = true;\n            this._renderer._tex = null;\n\n            return this;\n          };\n\n          /**\n           * Specular material for geometry with a given color. You can view all\n           * possible materials in this\n           * <a href=\"https://p5js.org/examples/3d-materials.html\">example</a>.\n           * @method specularMaterial\n           * @param  {Number} v1  gray value, red or hue value\n           *                       (depending on the current color mode),\n           * @param  {Number} [v2] green or saturation value\n           * @param  {Number} [v3] blue or brightness value\n           * @param  {Number} [a]  opacity\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(0);\n           *   noStroke();\n           *   ambientLight(50);\n           *   pointLight(250, 250, 250, 100, 100, 30);\n           *   specularMaterial(250);\n           *   sphere(40);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * diffused radiating light source from top right of canvas\n           *\n           */\n          /**\n           * @method specularMaterial\n           * @param  {Number[]|String|p5.Color} color color Array, or CSS color string\n           * @chainable\n           */\n          p5.prototype.specularMaterial = function(v1, v2, v3, a) {\n            this._assert3d('specularMaterial');\n            p5._validateParameters('specularMaterial', arguments);\n\n            var color = p5.prototype.color.apply(this, arguments);\n            this._renderer.curFillColor = color._array;\n            this._renderer._useSpecularMaterial = true;\n            this._renderer._useNormalMaterial = false;\n            this._renderer._enableLighting = true;\n            this._renderer._tex = null;\n\n            return this;\n          };\n\n          /**\n           * Sets the amount of gloss in the surface of shapes.\n           * Used in combination with specularMaterial() in setting\n           * the material properties of shapes. The default and minimum value is 1.\n           * @method shininess\n           * @param {Number} shine Degree of Shininess.\n           *                       Defaults to 1.\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(0);\n           *   noStroke();\n           *   let locX = mouseX - width / 2;\n           *   let locY = mouseY - height / 2;\n           *   ambientLight(60, 60, 60);\n           *   pointLight(255, 255, 255, locX, locY, 50);\n           *   specularMaterial(250);\n           *   translate(-25, 0, 0);\n           *   shininess(1);\n           *   sphere(20);\n           *   translate(50, 0, 0);\n           *   shininess(20);\n           *   sphere(20);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * Shininess on Camera changes position with mouse\n           */\n          p5.prototype.shininess = function(shine) {\n            this._assert3d('shininess');\n            p5._validateParameters('shininess', arguments);\n\n            if (shine < 1) {\n              shine = 1;\n            }\n            this._renderer._useShininess = shine;\n            return this;\n          };\n\n          /**\n           * @private blends colors according to color components.\n           * If alpha value is less than 1, we need to enable blending\n           * on our gl context.  Otherwise opaque objects need to a depthMask.\n           * @param  {Number[]} color [description]\n           * @return {Number[]]}  Normalized numbers array\n           */\n          p5.RendererGL.prototype._applyColorBlend = function(colors) {\n            var gl = this.GL;\n\n            var isTexture = this.drawMode === constants.TEXTURE;\n            if (isTexture || colors[colors.length - 1] < 1.0) {\n              gl.depthMask(isTexture);\n              gl.enable(gl.BLEND);\n              this._applyBlendMode();\n            } else {\n              gl.depthMask(true);\n              gl.disable(gl.BLEND);\n            }\n            return colors;\n          };\n\n          /**\n           * @private sets blending in gl context to curBlendMode\n           * @param  {Number[]} color [description]\n           * @return {Number[]]}  Normalized numbers array\n           */\n          p5.RendererGL.prototype._applyBlendMode = function() {\n            var gl = this.GL;\n            switch (this.curBlendMode) {\n              case constants.BLEND:\n              case constants.ADD:\n                gl.blendEquation(gl.FUNC_ADD);\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n                break;\n              case constants.MULTIPLY:\n                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ONE, gl.ONE);\n                break;\n              case constants.SCREEN:\n                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                gl.blendFuncSeparate(gl.ONE_MINUS_DST_COLOR, gl.ONE, gl.ONE, gl.ONE);\n                break;\n              case constants.EXCLUSION:\n                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                gl.blendFuncSeparate(\n                  gl.ONE_MINUS_DST_COLOR,\n                  gl.ONE_MINUS_SRC_COLOR,\n                  gl.ONE,\n                  gl.ONE\n                );\n\n                break;\n              case constants.REPLACE:\n                gl.blendEquation(gl.FUNC_ADD);\n                gl.blendFunc(gl.ONE, gl.ZERO);\n                break;\n              case constants.SUBTRACT:\n                gl.blendEquationSeparate(gl.FUNC_REVERSE_SUBTRACT, gl.FUNC_ADD);\n                gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE);\n                break;\n              case constants.DARKEST:\n                if (this.blendExt) {\n                  gl.blendEquationSeparate(this.blendExt.MIN_EXT, gl.FUNC_ADD);\n                  gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE);\n                } else {\n                  console.warn(\n                    'blendMode(DARKEST) does not work in your browser in WEBGL mode.'\n                  );\n                }\n                break;\n              case constants.LIGHTEST:\n                if (this.blendExt) {\n                  gl.blendEquationSeparate(this.blendExt.MAX_EXT, gl.FUNC_ADD);\n                  gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE);\n                } else {\n                  console.warn(\n                    'blendMode(LIGHTEST) does not work in your browser in WEBGL mode.'\n                  );\n                }\n                break;\n              default:\n                console.error(\n                  'Oops! Somehow RendererGL set curBlendMode to an unsupported mode.'\n                );\n\n                break;\n            }\n          };\n\n          module.exports = p5;\n        },\n        { '../core/constants': 18, '../core/main': 24, './p5.Texture': 77 }\n      ],\n      70: [\n        function(_dereq_, module, exports) {\n          /**\n           * @module Lights, Camera\n           * @submodule Camera\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          ////////////////////////////////////////////////////////////////////////////////\n          // p5.Prototype Methods\n          ////////////////////////////////////////////////////////////////////////////////\n\n          /**\n           * Sets the camera position for a 3D sketch. Parameters for this function define\n           * the position for the camera, the center of the sketch (where the camera is\n           * pointing), and an up direction (the orientation of the camera).\n           *\n           * When called with no arguments, this function creates a default camera\n           * equivalent to\n           * camera(0, 0, (height/2.0) / tan(PI*30.0 / 180.0), 0, 0, 0, 0, 1, 0);\n           * @method camera\n           * @for p5\n           * @param  {Number} [x]        camera position value on x axis\n           * @param  {Number} [y]        camera position value on y axis\n           * @param  {Number} [z]        camera position value on z axis\n           * @param  {Number} [centerX]  x coordinate representing center of the sketch\n           * @param  {Number} [centerY]  y coordinate representing center of the sketch\n           * @param  {Number} [centerZ]  z coordinate representing center of the sketch\n           * @param  {Number} [upX]      x component of direction 'up' from camera\n           * @param  {Number} [upY]      y component of direction 'up' from camera\n           * @param  {Number} [upZ]      z component of direction 'up' from camera\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(204);\n           *   //move the camera away from the plane by a sin wave\n           *   camera(0, 0, 20 + sin(frameCount * 0.01) * 10, 0, 0, 0, 0, 1, 0);\n           *   plane(10, 10);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * White square repeatedly grows to fill canvas and then shrinks.\n           *\n           */\n          p5.prototype.camera = function() {\n            this._assert3d('camera');\n            p5._validateParameters('camera', arguments);\n            this._renderer._curCamera.camera.apply(this._renderer._curCamera, arguments);\n            return this;\n          };\n\n          /**\n           * Sets a perspective projection for the camera in a 3D sketch. This projection\n           * represents depth through foreshortening: objects that are close to the camera\n           * appear their actual size while those that are further away from the camera\n           * appear smaller. The parameters to this function define the viewing frustum\n           * (the truncated pyramid within which objects are seen by the camera) through\n           * vertical field of view, aspect ratio (usually width/height), and near and far\n           * clipping planes.\n           *\n           * When called with no arguments, the defaults\n           * provided are equivalent to\n           * perspective(PI/3.0, width/height, eyeZ/10.0, eyeZ*10.0), where eyeZ\n           * is equal to ((height/2.0) / tan(PI*60.0/360.0));\n           * @method  perspective\n           * @for p5\n           * @param  {Number} [fovy]   camera frustum vertical field of view,\n           *                           from bottom to top of view, in <a href=\"#/p5/angleMode\">angleMode</a> units\n           * @param  {Number} [aspect] camera frustum aspect ratio\n           * @param  {Number} [near]   frustum near plane length\n           * @param  {Number} [far]    frustum far plane length\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * //drag the mouse to look around!\n           * //you will see there's a vanishing point\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   perspective(PI / 3.0, width / height, 0.1, 500);\n           * }\n           * function draw() {\n           *   background(200);\n           *   orbitControl();\n           *   normalMaterial();\n           *\n           *   rotateX(-0.3);\n           *   rotateY(-0.2);\n           *   translate(0, 0, -50);\n           *\n           *   push();\n           *   translate(-15, 0, sin(frameCount / 30) * 95);\n           *   box(30);\n           *   pop();\n           *   push();\n           *   translate(15, 0, sin(frameCount / 30 + PI) * 95);\n           *   box(30);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * two colored 3D boxes move back and forth, rotating as mouse is dragged.\n           *\n           */\n          p5.prototype.perspective = function() {\n            this._assert3d('perspective');\n            p5._validateParameters('perspective', arguments);\n            this._renderer._curCamera.perspective.apply(\n              this._renderer._curCamera,\n              arguments\n            );\n\n            return this;\n          };\n\n          /**\n           * Sets an orthographic projection for the camera in a 3D sketch and defines a\n           * box-shaped viewing frustum within which objects are seen. In this projection,\n           * all objects with the same dimension appear the same size, regardless of\n           * whether they are near or far from the camera. The parameters to this\n           * function specify the viewing frustum where left and right are the minimum and\n           * maximum x values, top and bottom are the minimum and maximum y values, and near\n           * and far are the minimum and maximum z values. If no parameters are given, the\n           * default is used: ortho(-width/2, width/2, -height/2, height/2).\n           * @method  ortho\n           * @for p5\n           * @param  {Number} [left]   camera frustum left plane\n           * @param  {Number} [right]  camera frustum right plane\n           * @param  {Number} [bottom] camera frustum bottom plane\n           * @param  {Number} [top]    camera frustum top plane\n           * @param  {Number} [near]   camera frustum near plane\n           * @param  {Number} [far]    camera frustum far plane\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * //drag the mouse to look around!\n           * //there's no vanishing point\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   ortho(-width / 2, width / 2, height / 2, -height / 2, 0, 500);\n           * }\n           * function draw() {\n           *   background(200);\n           *   orbitControl();\n           *   normalMaterial();\n           *\n           *   rotateX(0.2);\n           *   rotateY(-0.2);\n           *   push();\n           *   translate(-15, 0, sin(frameCount / 30) * 65);\n           *   box(30);\n           *   pop();\n           *   push();\n           *   translate(15, 0, sin(frameCount / 30 + PI) * 65);\n           *   box(30);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * two 3D boxes move back and forth along same plane, rotating as mouse is dragged.\n           *\n           */\n          p5.prototype.ortho = function() {\n            this._assert3d('ortho');\n            p5._validateParameters('ortho', arguments);\n            this._renderer._curCamera.ortho.apply(this._renderer._curCamera, arguments);\n            return this;\n          };\n\n          ////////////////////////////////////////////////////////////////////////////////\n          // p5.Camera\n          ////////////////////////////////////////////////////////////////////////////////\n\n          /**\n           * Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and tells the\n           * renderer to use that camera.\n           * Returns the p5.Camera object.\n           * @method createCamera\n           * @return {p5.Camera} The newly created camera object.\n           * @for p5\n           */\n          p5.prototype.createCamera = function() {\n            this._assert3d('createCamera');\n            var _cam = new p5.Camera(this._renderer);\n\n            // compute default camera settings, then set a default camera\n            _cam._computeCameraDefaultSettings();\n            _cam._setDefaultCamera();\n\n            // set renderer current camera to the new camera\n            this._renderer._curCamera = _cam;\n\n            return _cam;\n          };\n\n          /**\n           * This class describes a camera for use in p5's\n           * <a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5\">\n           * WebGL mode</a>. It contains camera position, orientation, and projection\n           * information necessary for rendering a 3D scene.\n           *\n           * New p5.Camera objects can be made through the\n           * <a href=\"#/p5/createCamera\">createCamera()</a> function and controlled through\n           * the methods described below. A camera created in this way will use a default\n           * position in the scene and a default perspective projection until these\n           * properties are changed through the various methods available. It is possible\n           * to create multiple cameras, in which case the current camera\n           * can be set through the <a href=\"#/p5/setCamera\">setCamera()</a> method.\n           *\n           *\n           * Note:\n           * The methods below operate in two coordinate systems: the 'world' coordinate\n           * system describe positions in terms of their relationship to the origin along\n           * the X, Y and Z axes whereas the camera's 'local' coordinate system\n           * describes positions from the camera's point of view: left-right, up-down,\n           * and forward-backward. The <a href=\"#/p5.Camera/move\">move()</a> method,\n           * for instance, moves the camera along its own axes, whereas the\n           * <a href=\"#/p5.Camera/setPosition\">setPosition()</a>\n           * method sets the camera's position in world-space.\n           *\n           *\n           * @class p5.Camera\n           * @param {rendererGL} rendererGL instance of WebGL renderer\n           * @example\n           * <div>\n           * <code>\n           * let cam;\n           * let delta = 0.01;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   normalMaterial();\n           *   cam = createCamera();\n           *   // set initial pan angle\n           *   cam.pan(-0.8);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *\n           *   // pan camera according to angle 'delta'\n           *   cam.pan(delta);\n           *\n           *   // every 160 frames, switch direction\n           *   if (frameCount % 160 === 0) {\n           *     delta *= -1;\n           *   }\n           *\n           *   rotateX(frameCount * 0.01);\n           *   translate(-100, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * camera view pans left and right across a series of rotating 3D boxes.\n           *\n           */\n          p5.Camera = function(renderer) {\n            this._renderer = renderer;\n\n            this.cameraType = 'default';\n\n            this.cameraMatrix = new p5.Matrix();\n            this.projMatrix = new p5.Matrix();\n          };\n\n          ////////////////////////////////////////////////////////////////////////////////\n          // Camera Projection Methods\n          ////////////////////////////////////////////////////////////////////////////////\n\n          /**\n           * Sets a perspective projection for a p5.Camera object and sets parameters\n           * for that projection according to <a href=\"#/p5/perspective\">perspective()</a>\n           * syntax.\n           * @method perspective\n           * @for p5.Camera\n           */\n          p5.Camera.prototype.perspective = function(fovy, aspect, near, far) {\n            if (typeof fovy === 'undefined') {\n              fovy = this.defaultCameraFOV;\n              // this avoids issue where setting angleMode(DEGREES) before calling\n              // perspective leads to a smaller than expected FOV (because\n              // _computeCameraDefaultSettings computes in radians)\n              this.cameraFOV = fovy;\n            } else {\n              this.cameraFOV = this._renderer._pInst._toRadians(fovy);\n            }\n            if (typeof aspect === 'undefined') {\n              aspect = this.defaultAspectRatio;\n            }\n            if (typeof near === 'undefined') {\n              near = this.defaultCameraNear;\n            }\n            if (typeof far === 'undefined') {\n              far = this.defaultCameraFar;\n            }\n\n            if (near <= 0.0001) {\n              near = 0.01;\n              console.log(\n                'Avoid perspective near plane values close to or below 0. ' +\n                  'Setting value to 0.01.'\n              );\n            }\n\n            if (far < near) {\n              console.log(\n                'Perspective far plane value is less than near plane value. ' +\n                  'Nothing will be shown.'\n              );\n            }\n\n            this.aspectRatio = aspect;\n            this.cameraNear = near;\n            this.cameraFar = far;\n\n            this.projMatrix = p5.Matrix.identity();\n\n            var f = 1.0 / Math.tan(this.cameraFOV / 2);\n            var nf = 1.0 / (this.cameraNear - this.cameraFar);\n\n            // prettier-ignore\n            this.projMatrix.set(f / aspect, 0, 0, 0,\n  0, -f, 0, 0,\n  0, 0, (far + near) * nf, -1,\n  0, 0, 2 * far * near * nf, 0);\n\n            if (this._isActive()) {\n              this._renderer.uPMatrix.set(\n                this.projMatrix.mat4[0],\n                this.projMatrix.mat4[1],\n                this.projMatrix.mat4[2],\n                this.projMatrix.mat4[3],\n                this.projMatrix.mat4[4],\n                this.projMatrix.mat4[5],\n                this.projMatrix.mat4[6],\n                this.projMatrix.mat4[7],\n                this.projMatrix.mat4[8],\n                this.projMatrix.mat4[9],\n                this.projMatrix.mat4[10],\n                this.projMatrix.mat4[11],\n                this.projMatrix.mat4[12],\n                this.projMatrix.mat4[13],\n                this.projMatrix.mat4[14],\n                this.projMatrix.mat4[15]\n              );\n            }\n\n            this.cameraType = 'custom';\n          };\n\n          /**\n           * Sets an orthographic projection for a p5.Camera object and sets parameters\n           * for that projection according to <a href=\"#/p5/ortho\">ortho()</a> syntax.\n           * @method ortho\n           * @for p5.Camera\n           */\n          p5.Camera.prototype.ortho = function(left, right, bottom, top, near, far) {\n            if (left === undefined) left = -this._renderer.width / 2;\n            if (right === undefined) right = +this._renderer.width / 2;\n            if (bottom === undefined) bottom = -this._renderer.height / 2;\n            if (top === undefined) top = +this._renderer.height / 2;\n            if (near === undefined) near = 0;\n            if (far === undefined)\n              far = Math.max(this._renderer.width, this._renderer.height);\n\n            var w = right - left;\n            var h = top - bottom;\n            var d = far - near;\n\n            var x = +2.0 / w;\n            var y = +2.0 / h;\n            var z = -2.0 / d;\n\n            var tx = -(right + left) / w;\n            var ty = -(top + bottom) / h;\n            var tz = -(far + near) / d;\n\n            this.projMatrix = p5.Matrix.identity();\n\n            // prettier-ignore\n            this.projMatrix.set(x, 0, 0, 0,\n  0, -y, 0, 0,\n  0, 0, z, 0,\n  tx, ty, tz, 1);\n\n            if (this._isActive()) {\n              this._renderer.uPMatrix.set(\n                this.projMatrix.mat4[0],\n                this.projMatrix.mat4[1],\n                this.projMatrix.mat4[2],\n                this.projMatrix.mat4[3],\n                this.projMatrix.mat4[4],\n                this.projMatrix.mat4[5],\n                this.projMatrix.mat4[6],\n                this.projMatrix.mat4[7],\n                this.projMatrix.mat4[8],\n                this.projMatrix.mat4[9],\n                this.projMatrix.mat4[10],\n                this.projMatrix.mat4[11],\n                this.projMatrix.mat4[12],\n                this.projMatrix.mat4[13],\n                this.projMatrix.mat4[14],\n                this.projMatrix.mat4[15]\n              );\n            }\n\n            this.cameraType = 'custom';\n          };\n\n          ////////////////////////////////////////////////////////////////////////////////\n          // Camera Orientation Methods\n          ////////////////////////////////////////////////////////////////////////////////\n\n          /**\n           * Rotate camera view about arbitrary axis defined by x,y,z\n           * based on http://learnwebgl.brown37.net/07_cameras/camera_rotating_motion.html\n           * @method _rotateView\n           * @private\n           */\n          p5.Camera.prototype._rotateView = function(a, x, y, z) {\n            var centerX = this.centerX;\n            var centerY = this.centerY;\n            var centerZ = this.centerZ;\n\n            // move center by eye position such that rotation happens around eye position\n            centerX -= this.eyeX;\n            centerY -= this.eyeY;\n            centerZ -= this.eyeZ;\n\n            var rotation = p5.Matrix.identity(this._renderer._pInst);\n            rotation.rotate(this._renderer._pInst._toRadians(a), x, y, z);\n\n            // prettier-ignore\n            var rotatedCenter = [\n  centerX * rotation.mat4[0] + centerY * rotation.mat4[4] + centerZ * rotation.mat4[8],\n  centerX * rotation.mat4[1] + centerY * rotation.mat4[5] + centerZ * rotation.mat4[9],\n  centerX * rotation.mat4[2] + centerY * rotation.mat4[6] + centerZ * rotation.mat4[10]];\n\n            // add eye position back into center\n            rotatedCenter[0] += this.eyeX;\n            rotatedCenter[1] += this.eyeY;\n            rotatedCenter[2] += this.eyeZ;\n\n            this.camera(\n              this.eyeX,\n              this.eyeY,\n              this.eyeZ,\n              rotatedCenter[0],\n              rotatedCenter[1],\n              rotatedCenter[2],\n              this.upX,\n              this.upY,\n              this.upZ\n            );\n          };\n\n          /**\n           * Panning rotates the camera view to the left and right.\n           * @method pan\n           * @param {Number} angle amount to rotate camera in current\n           * <a href=\"#/p5/angleMode\">angleMode</a> units.\n           * Greater than 0 values rotate counterclockwise (to the left).\n           * @example\n           * <div>\n           * <code>\n           * let cam;\n           * let delta = 0.01;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   normalMaterial();\n           *   cam = createCamera();\n           *   // set initial pan angle\n           *   cam.pan(-0.8);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *\n           *   // pan camera according to angle 'delta'\n           *   cam.pan(delta);\n           *\n           *   // every 160 frames, switch direction\n           *   if (frameCount % 160 === 0) {\n           *     delta *= -1;\n           *   }\n           *\n           *   rotateX(frameCount * 0.01);\n           *   translate(-100, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * camera view pans left and right across a series of rotating 3D boxes.\n           *\n           */\n          p5.Camera.prototype.pan = function(amount) {\n            var local = this._getLocalAxes();\n            this._rotateView(amount, local.y[0], local.y[1], local.y[2]);\n          };\n\n          /**\n           * Tilting rotates the camera view up and down.\n           * @method tilt\n           * @param {Number} angle amount to rotate camera in current\n           * <a href=\"#/p5/angleMode\">angleMode</a> units.\n           * Greater than 0 values rotate counterclockwise (to the left).\n           * @example\n           * <div>\n           * <code>\n           * let cam;\n           * let delta = 0.01;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   normalMaterial();\n           *   cam = createCamera();\n           *   // set initial tilt\n           *   cam.tilt(-0.8);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *\n           *   // pan camera according to angle 'delta'\n           *   cam.tilt(delta);\n           *\n           *   // every 160 frames, switch direction\n           *   if (frameCount % 160 === 0) {\n           *     delta *= -1;\n           *   }\n           *\n           *   rotateY(frameCount * 0.01);\n           *   translate(0, -100, 0);\n           *   box(20);\n           *   translate(0, 35, 0);\n           *   box(20);\n           *   translate(0, 35, 0);\n           *   box(20);\n           *   translate(0, 35, 0);\n           *   box(20);\n           *   translate(0, 35, 0);\n           *   box(20);\n           *   translate(0, 35, 0);\n           *   box(20);\n           *   translate(0, 35, 0);\n           *   box(20);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * camera view tilts up and down across a series of rotating 3D boxes.\n           */\n          p5.Camera.prototype.tilt = function(amount) {\n            var local = this._getLocalAxes();\n            this._rotateView(amount, local.x[0], local.x[1], local.x[2]);\n          };\n\n          /**\n           * Reorients the camera to look at a position in world space.\n           * @method lookAt\n           * @for p5.Camera\n           * @param {Number} x x position of a point in world space\n           * @param {Number} y y position of a point in world space\n           * @param {Number} z z position of a point in world space\n           * @example\n           * <div>\n           * <code>\n           * let cam;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   normalMaterial();\n           *   cam = createCamera();\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *\n           *   // look at a new random point every 60 frames\n           *   if (frameCount % 60 === 0) {\n           *     cam.lookAt(random(-100, 100), random(-50, 50), 0);\n           *   }\n           *\n           *   rotateX(frameCount * 0.01);\n           *   translate(-100, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * camera view of rotating 3D cubes changes to look at a new random\n           * point every second .\n           */\n          p5.Camera.prototype.lookAt = function(x, y, z) {\n            this.camera(\n              this.eyeX,\n              this.eyeY,\n              this.eyeZ,\n              x,\n              y,\n              z,\n              this.upX,\n              this.upY,\n              this.upZ\n            );\n          };\n\n          ////////////////////////////////////////////////////////////////////////////////\n          // Camera Position Methods\n          ////////////////////////////////////////////////////////////////////////////////\n\n          /**\n           * Sets a camera's position and orientation.  This is equivalent to calling\n           * <a href=\"#/p5/camera\">camera()</a> on a p5.Camera object.\n           * @method camera\n           * @for p5.Camera\n           */\n          p5.Camera.prototype.camera = function(\n            eyeX,\n            eyeY,\n            eyeZ,\n            centerX,\n            centerY,\n            centerZ,\n            upX,\n            upY,\n            upZ\n          ) {\n            if (typeof eyeX === 'undefined') {\n              eyeX = this.defaultEyeX;\n              eyeY = this.defaultEyeY;\n              eyeZ = this.defaultEyeZ;\n              centerX = eyeX;\n              centerY = eyeY;\n              centerZ = 0;\n              upX = 0;\n              upY = 1;\n              upZ = 0;\n            }\n\n            this.eyeX = eyeX;\n            this.eyeY = eyeY;\n            this.eyeZ = eyeZ;\n\n            this.centerX = centerX;\n            this.centerY = centerY;\n            this.centerZ = centerZ;\n\n            this.upX = upX;\n            this.upY = upY;\n            this.upZ = upZ;\n\n            var local = this._getLocalAxes();\n\n            // the camera affects the model view matrix, insofar as it\n            // inverse translates the world to the eye position of the camera\n            // and rotates it.\n            // prettier-ignore\n            this.cameraMatrix.set(local.x[0], local.y[0], local.z[0], 0,\n  local.x[1], local.y[1], local.z[1], 0,\n  local.x[2], local.y[2], local.z[2], 0,\n  0, 0, 0, 1);\n\n            var tx = -eyeX;\n            var ty = -eyeY;\n            var tz = -eyeZ;\n\n            this.cameraMatrix.translate([tx, ty, tz]);\n\n            if (this._isActive()) {\n              this._renderer.uMVMatrix.set(\n                this.cameraMatrix.mat4[0],\n                this.cameraMatrix.mat4[1],\n                this.cameraMatrix.mat4[2],\n                this.cameraMatrix.mat4[3],\n                this.cameraMatrix.mat4[4],\n                this.cameraMatrix.mat4[5],\n                this.cameraMatrix.mat4[6],\n                this.cameraMatrix.mat4[7],\n                this.cameraMatrix.mat4[8],\n                this.cameraMatrix.mat4[9],\n                this.cameraMatrix.mat4[10],\n                this.cameraMatrix.mat4[11],\n                this.cameraMatrix.mat4[12],\n                this.cameraMatrix.mat4[13],\n                this.cameraMatrix.mat4[14],\n                this.cameraMatrix.mat4[15]\n              );\n            }\n            return this;\n          };\n\n          /**\n           * Move camera along its local axes while maintaining current camera orientation.\n           * @method move\n           * @param {Number} x amount to move along camera's left-right axis\n           * @param {Number} y amount to move along camera's up-down axis\n           * @param {Number} z amount to move along camera's forward-backward axis\n           * @example\n           * <div>\n           * <code>\n           * // see the camera move along its own axes while maintaining its orientation\n           * let cam;\n           * let delta = 0.5;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   normalMaterial();\n           *   cam = createCamera();\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *\n           *   // move the camera along its local axes\n           *   cam.move(delta, delta, 0);\n           *\n           *   // every 100 frames, switch direction\n           *   if (frameCount % 150 === 0) {\n           *     delta *= -1;\n           *   }\n           *\n           *   translate(-10, -10, 0);\n           *   box(50, 8, 50);\n           *   translate(15, 15, 0);\n           *   box(50, 8, 50);\n           *   translate(15, 15, 0);\n           *   box(50, 8, 50);\n           *   translate(15, 15, 0);\n           *   box(50, 8, 50);\n           *   translate(15, 15, 0);\n           *   box(50, 8, 50);\n           *   translate(15, 15, 0);\n           *   box(50, 8, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * camera view moves along a series of 3D boxes, maintaining the same\n           * orientation throughout the move\n           */\n          p5.Camera.prototype.move = function(x, y, z) {\n            var local = this._getLocalAxes();\n\n            // scale local axes by movement amounts\n            // based on http://learnwebgl.brown37.net/07_cameras/camera_linear_motion.html\n            var dx = [local.x[0] * x, local.x[1] * x, local.x[2] * x];\n            var dy = [local.y[0] * y, local.y[1] * y, local.y[2] * y];\n            var dz = [local.z[0] * z, local.z[1] * z, local.z[2] * z];\n\n            this.camera(\n              this.eyeX + dx[0] + dy[0] + dz[0],\n              this.eyeY + dx[1] + dy[1] + dz[1],\n              this.eyeZ + dx[2] + dy[2] + dz[2],\n              this.centerX + dx[0] + dy[0] + dz[0],\n              this.centerY + dx[1] + dy[1] + dz[1],\n              this.centerZ + dx[2] + dy[2] + dz[2],\n              0,\n              1,\n              0\n            );\n          };\n\n          /**\n           * Set camera position in world-space while maintaining current camera\n           * orientation.\n           * @method setPosition\n           * @param {Number} x x position of a point in world space\n           * @param {Number} y y position of a point in world space\n           * @param {Number} z z position of a point in world space\n           * @example\n           * <div>\n           * <code>\n           * // press '1' '2' or '3' keys to set camera position\n           *\n           * let cam;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   normalMaterial();\n           *   cam = createCamera();\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *\n           *   // '1' key\n           *   if (keyIsDown(49)) {\n           *     cam.setPosition(30, 0, 80);\n           *   }\n           *   // '2' key\n           *   if (keyIsDown(50)) {\n           *     cam.setPosition(0, 0, 80);\n           *   }\n           *   // '3' key\n           *   if (keyIsDown(51)) {\n           *     cam.setPosition(-30, 0, 80);\n           *   }\n           *\n           *   box(20);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * camera position changes as the user presses keys, altering view of a 3D box\n           */\n          p5.Camera.prototype.setPosition = function(x, y, z) {\n            var diffX = x - this.eyeX;\n            var diffY = y - this.eyeY;\n            var diffZ = z - this.eyeZ;\n\n            this.camera(\n              x,\n              y,\n              z,\n              this.centerX + diffX,\n              this.centerY + diffY,\n              this.centerZ + diffZ,\n              0,\n              1,\n              0\n            );\n          };\n\n          ////////////////////////////////////////////////////////////////////////////////\n          // Camera Helper Methods\n          ////////////////////////////////////////////////////////////////////////////////\n\n          // @TODO: combine this function with _setDefaultCamera to compute these values\n          // as-needed\n          p5.Camera.prototype._computeCameraDefaultSettings = function() {\n            this.defaultCameraFOV = 60 / 180 * Math.PI;\n            this.defaultAspectRatio = this._renderer.width / this._renderer.height;\n            this.defaultEyeX = 0;\n            this.defaultEyeY = 0;\n            this.defaultEyeZ =\n              this._renderer.height / 2.0 / Math.tan(this.defaultCameraFOV / 2.0);\n            this.defaultCenterX = 0;\n            this.defaultCenterY = 0;\n            this.defaultCenterZ = 0;\n            this.defaultCameraNear = this.defaultEyeZ * 0.1;\n            this.defaultCameraFar = this.defaultEyeZ * 10;\n          };\n\n          //detect if user didn't set the camera\n          //then call this function below\n          p5.Camera.prototype._setDefaultCamera = function() {\n            this.cameraFOV = this.defaultCameraFOV;\n            this.aspectRatio = this.defaultAspectRatio;\n            this.eyeX = this.defaultEyeX;\n            this.eyeY = this.defaultEyeY;\n            this.eyeZ = this.defaultEyeZ;\n            this.centerX = this.defaultCenterX;\n            this.centerY = this.defaultCenterY;\n            this.centerZ = this.defaultCenterZ;\n            this.upX = 0;\n            this.upY = 1;\n            this.upZ = 0;\n            this.cameraNear = this.defaultCameraNear;\n            this.cameraFar = this.defaultCameraFar;\n\n            this.perspective();\n            this.camera();\n\n            this.cameraType = 'default';\n          };\n\n          p5.Camera.prototype._resize = function() {\n            // If we're using the default camera, update the aspect ratio\n            if (this.cameraType === 'default') {\n              this._computeCameraDefaultSettings();\n              this._setDefaultCamera();\n            } else {\n              this.perspective(\n                this.cameraFOV,\n                this._renderer.width / this._renderer.height\n              );\n            }\n          };\n\n          /**\n           * Returns a copy of a camera.\n           * @method copy\n           * @private\n           */\n          p5.Camera.prototype.copy = function() {\n            var _cam = new p5.Camera(this._renderer);\n            _cam.cameraFOV = this.cameraFOV;\n            _cam.aspectRatio = this.aspectRatio;\n            _cam.eyeX = this.eyeX;\n            _cam.eyeY = this.eyeY;\n            _cam.eyeZ = this.eyeZ;\n            _cam.centerX = this.centerX;\n            _cam.centerY = this.centerY;\n            _cam.centerZ = this.centerZ;\n            _cam.cameraNear = this.cameraNear;\n            _cam.cameraFar = this.cameraFar;\n\n            _cam.cameraType = this.cameraType;\n\n            _cam.cameraMatrix = this.cameraMatrix.copy();\n            _cam.projMatrix = this.projMatrix.copy();\n\n            return _cam;\n          };\n\n          /**\n           * Returns a camera's local axes: left-right, up-down, and forward-backward,\n           * as defined by vectors in world-space.\n           * @method _getLocalAxes\n           * @private\n           */\n          p5.Camera.prototype._getLocalAxes = function() {\n            // calculate camera local Z vector\n            var z0 = this.eyeX - this.centerX;\n            var z1 = this.eyeY - this.centerY;\n            var z2 = this.eyeZ - this.centerZ;\n\n            // normalize camera local Z vector\n            var eyeDist = Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n            if (eyeDist !== 0) {\n              z0 /= eyeDist;\n              z1 /= eyeDist;\n              z2 /= eyeDist;\n            }\n\n            // calculate camera Y vector\n            var y0 = this.upX;\n            var y1 = this.upY;\n            var y2 = this.upZ;\n\n            // compute camera local X vector as up vector (local Y) cross local Z\n            var x0 = y1 * z2 - y2 * z1;\n            var x1 = -y0 * z2 + y2 * z0;\n            var x2 = y0 * z1 - y1 * z0;\n\n            // recompute y = z cross x\n            y0 = z1 * x2 - z2 * x1;\n            y1 = -z0 * x2 + z2 * x0;\n            y2 = z0 * x1 - z1 * x0;\n\n            // cross product gives area of parallelogram, which is < 1.0 for\n            // non-perpendicular unit-length vectors; so normalize x, y here:\n            var xmag = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n            if (xmag !== 0) {\n              x0 /= xmag;\n              x1 /= xmag;\n              x2 /= xmag;\n            }\n\n            var ymag = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n            if (ymag !== 0) {\n              y0 /= ymag;\n              y1 /= ymag;\n              y2 /= ymag;\n            }\n\n            return {\n              x: [x0, x1, x2],\n              y: [y0, y1, y2],\n              z: [z0, z1, z2]\n            };\n          };\n\n          /**\n           * Orbits the camera about center point. For use with orbitControl().\n           * @method _orbit\n           * @private\n           * @param {Number} dTheta change in spherical coordinate theta\n           * @param {Number} dPhi change in spherical coordinate phi\n           * @param {Number} dRadius change in radius\n           */\n          p5.Camera.prototype._orbit = function(dTheta, dPhi, dRadius) {\n            var diffX = this.eyeX - this.centerX;\n            var diffY = this.eyeY - this.centerY;\n            var diffZ = this.eyeZ - this.centerZ;\n\n            // get spherical coorinates for current camera position about origin\n            var camRadius = Math.sqrt(diffX * diffX + diffY * diffY + diffZ * diffZ);\n            // from https://github.com/mrdoob/three.js/blob/dev/src/math/Spherical.js#L72-L73\n            var camTheta = Math.atan2(diffX, diffZ); // equatorial angle\n            var camPhi = Math.acos(Math.max(-1, Math.min(1, diffY / camRadius))); // polar angle\n\n            // add change\n            camTheta += dTheta;\n            camPhi += dPhi;\n            camRadius += dRadius;\n\n            // prevent zooming through the center:\n            if (camRadius < 0) {\n              camRadius = 0.1;\n            }\n\n            // prevent rotation over the zenith / under bottom\n            if (camPhi > Math.PI) {\n              camPhi = Math.PI;\n            } else if (camPhi <= 0) {\n              camPhi = 0.001;\n            }\n\n            // from https://github.com/mrdoob/three.js/blob/dev/src/math/Vector3.js#L628-L632\n            var _x = Math.sin(camPhi) * camRadius * Math.sin(camTheta);\n            var _y = Math.cos(camPhi) * camRadius;\n            var _z = Math.sin(camPhi) * camRadius * Math.cos(camTheta);\n\n            this.camera(\n              _x + this.centerX,\n              _y + this.centerY,\n              _z + this.centerZ,\n              this.centerX,\n              this.centerY,\n              this.centerZ,\n              0,\n              1,\n              0\n            );\n          };\n\n          /**\n           * Returns true if camera is currently attached to renderer.\n           * @method _isActive\n           * @private\n           */\n          p5.Camera.prototype._isActive = function() {\n            return this === this._renderer._curCamera;\n          };\n\n          /**\n           * Sets rendererGL's current camera to a p5.Camera object.  Allows switching\n           * between multiple cameras.\n           * @method setCamera\n           * @param  {p5.Camera} cam  p5.Camera object\n           * @for p5\n           * @example\n           * <div>\n           * <code>\n           * let cam1, cam2;\n           * let currentCamera;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   normalMaterial();\n           *\n           *   cam1 = createCamera();\n           *   cam2 = createCamera();\n           *   cam2.setPosition(30, 0, 50);\n           *   cam2.lookAt(0, 0, 0);\n           *   cam2.ortho();\n           *\n           *   // set variable for previously active camera:\n           *   currentCamera = 1;\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *\n           *   // camera 1:\n           *   cam1.lookAt(0, 0, 0);\n           *   cam1.setPosition(sin(frameCount / 60) * 200, 0, 100);\n           *\n           *   // every 100 frames, switch between the two cameras\n           *   if (frameCount % 100 === 0) {\n           *     if (currentCamera === 1) {\n           *       setCamera(cam1);\n           *       currentCamera = 0;\n           *     } else {\n           *       setCamera(cam2);\n           *       currentCamera = 1;\n           *     }\n           *   }\n           *\n           *   drawBoxes();\n           * }\n           *\n           * function drawBoxes() {\n           *   rotateX(frameCount * 0.01);\n           *   translate(-100, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Canvas switches between two camera views, each showing a series of spinning\n           * 3D boxes.\n           */\n          p5.prototype.setCamera = function(cam) {\n            this._renderer._curCamera = cam;\n\n            // set the projection matrix (which is not normally updated each frame)\n            this._renderer.uPMatrix.set(\n              cam.projMatrix.mat4[0],\n              cam.projMatrix.mat4[1],\n              cam.projMatrix.mat4[2],\n              cam.projMatrix.mat4[3],\n              cam.projMatrix.mat4[4],\n              cam.projMatrix.mat4[5],\n              cam.projMatrix.mat4[6],\n              cam.projMatrix.mat4[7],\n              cam.projMatrix.mat4[8],\n              cam.projMatrix.mat4[9],\n              cam.projMatrix.mat4[10],\n              cam.projMatrix.mat4[11],\n              cam.projMatrix.mat4[12],\n              cam.projMatrix.mat4[13],\n              cam.projMatrix.mat4[14],\n              cam.projMatrix.mat4[15]\n            );\n          };\n\n          module.exports = p5.Camera;\n        },\n        { '../core/main': 24 }\n      ],\n      71: [\n        function(_dereq_, module, exports) {\n          //some of the functions are adjusted from Three.js(http://threejs.org)\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          /**\n           * p5 Geometry class\n           * @class p5.Geometry\n           * @constructor\n           * @param  {Integer} [detailX] number of vertices on horizontal surface\n           * @param  {Integer} [detailY] number of vertices on horizontal surface\n           * @param {function} [callback] function to call upon object instantiation.\n           *\n           */\n          p5.Geometry = function(detailX, detailY, callback) {\n            //an array containing every vertex\n            //@type [p5.Vector]\n            this.vertices = [];\n\n            //an array containing every vertex for stroke drawing\n            this.lineVertices = [];\n\n            //an array 1 normal per lineVertex with\n            //final position representing which direction to\n            //displace for strokeWeight\n            //[[0,0,-1,1], [0,1,0,-1] ...];\n            this.lineNormals = [];\n\n            //an array containing 1 normal per vertex\n            //@type [p5.Vector]\n            //[p5.Vector, p5.Vector, p5.Vector,p5.Vector, p5.Vector, p5.Vector,...]\n            this.vertexNormals = [];\n            //an array containing each three vertex indices that form a face\n            //[[0, 1, 2], [2, 1, 3], ...]\n            this.faces = [];\n            //a 2D array containing uvs for every vertex\n            //[[0.0,0.0],[1.0,0.0], ...]\n            this.uvs = [];\n            // a 2D array containing edge connectivity pattern for create line vertices\n            //based on faces for most objects;\n            this.edges = [];\n            this.detailX = detailX !== undefined ? detailX : 1;\n            this.detailY = detailY !== undefined ? detailY : 1;\n\n            this.dirtyFlags = {};\n\n            if (callback instanceof Function) {\n              callback.call(this);\n            }\n            return this; // TODO: is this a constructor?\n          };\n\n          p5.Geometry.prototype.reset = function() {\n            this.lineVertices.length = 0;\n            this.lineNormals.length = 0;\n\n            this.vertices.length = 0;\n            this.edges.length = 0;\n            this.vertexColors.length = 0;\n            this.vertexNormals.length = 0;\n            this.uvs.length = 0;\n\n            this.dirtyFlags = {};\n          };\n\n          /**\n           * @method computeFaces\n           * @chainable\n           */\n          p5.Geometry.prototype.computeFaces = function() {\n            this.faces.length = 0;\n            var sliceCount = this.detailX + 1;\n            var a, b, c, d;\n            for (var i = 0; i < this.detailY; i++) {\n              for (var j = 0; j < this.detailX; j++) {\n                a = i * sliceCount + j; // + offset;\n                b = i * sliceCount + j + 1; // + offset;\n                c = (i + 1) * sliceCount + j + 1; // + offset;\n                d = (i + 1) * sliceCount + j; // + offset;\n                this.faces.push([a, b, d]);\n                this.faces.push([d, b, c]);\n              }\n            }\n            return this;\n          };\n\n          p5.Geometry.prototype._getFaceNormal = function(faceId) {\n            //This assumes that vA->vB->vC is a counter-clockwise ordering\n            var face = this.faces[faceId];\n            var vA = this.vertices[face[0]];\n            var vB = this.vertices[face[1]];\n            var vC = this.vertices[face[2]];\n            var ab = p5.Vector.sub(vB, vA);\n            var ac = p5.Vector.sub(vC, vA);\n            var n = p5.Vector.cross(ab, ac);\n            var ln = p5.Vector.mag(n);\n            var sinAlpha = ln / (p5.Vector.mag(ab) * p5.Vector.mag(ac));\n            if (sinAlpha === 0 || isNaN(sinAlpha)) {\n              console.warn(\n                'p5.Geometry.prototype._getFaceNormal:',\n                'face has colinear sides or a repeated vertex'\n              );\n\n              return n;\n            }\n            if (sinAlpha > 1) sinAlpha = 1; // handle float rounding error\n            return n.mult(Math.asin(sinAlpha) / ln);\n          };\n          /**\n           * computes smooth normals per vertex as an average of each\n           * face.\n           * @method computeNormals\n           * @chainable\n           */\n          p5.Geometry.prototype.computeNormals = function() {\n            var vertexNormals = this.vertexNormals;\n            var vertices = this.vertices;\n            var faces = this.faces;\n            var iv;\n\n            // initialize the vertexNormals array with empty vectors\n            vertexNormals.length = 0;\n            for (iv = 0; iv < vertices.length; ++iv) {\n              vertexNormals.push(new p5.Vector());\n            }\n\n            // loop through all the faces adding its normal to the normal\n            // of each of its vertices\n            for (var f = 0; f < faces.length; ++f) {\n              var face = faces[f];\n              var faceNormal = this._getFaceNormal(f);\n\n              // all three vertices get the normal added\n              for (var fv = 0; fv < 3; ++fv) {\n                var vertexIndex = face[fv];\n                vertexNormals[vertexIndex].add(faceNormal);\n              }\n            }\n\n            // normalize the normals\n            for (iv = 0; iv < vertices.length; ++iv) {\n              vertexNormals[iv].normalize();\n            }\n\n            return this;\n          };\n\n          /**\n           * Averages the vertex normals. Used in curved\n           * surfaces\n           * @method averageNormals\n           * @chainable\n           */\n          p5.Geometry.prototype.averageNormals = function() {\n            for (var i = 0; i <= this.detailY; i++) {\n              var offset = this.detailX + 1;\n              var temp = p5.Vector.add(\n                this.vertexNormals[i * offset],\n                this.vertexNormals[i * offset + this.detailX]\n              );\n\n              temp = p5.Vector.div(temp, 2);\n              this.vertexNormals[i * offset] = temp;\n              this.vertexNormals[i * offset + this.detailX] = temp;\n            }\n            return this;\n          };\n\n          /**\n           * Averages pole normals.  Used in spherical primitives\n           * @method averagePoleNormals\n           * @chainable\n           */\n          p5.Geometry.prototype.averagePoleNormals = function() {\n            //average the north pole\n            var sum = new p5.Vector(0, 0, 0);\n            for (var i = 0; i < this.detailX; i++) {\n              sum.add(this.vertexNormals[i]);\n            }\n            sum = p5.Vector.div(sum, this.detailX);\n\n            for (i = 0; i < this.detailX; i++) {\n              this.vertexNormals[i] = sum;\n            }\n\n            //average the south pole\n            sum = new p5.Vector(0, 0, 0);\n            for (\n              i = this.vertices.length - 1;\n              i > this.vertices.length - 1 - this.detailX;\n              i--\n            ) {\n              sum.add(this.vertexNormals[i]);\n            }\n            sum = p5.Vector.div(sum, this.detailX);\n\n            for (\n              i = this.vertices.length - 1;\n              i > this.vertices.length - 1 - this.detailX;\n              i--\n            ) {\n              this.vertexNormals[i] = sum;\n            }\n            return this;\n          };\n\n          /**\n           * Create a 2D array for establishing stroke connections\n           * @private\n           * @chainable\n           */\n          p5.Geometry.prototype._makeTriangleEdges = function() {\n            this.edges.length = 0;\n            if (Array.isArray(this.strokeIndices)) {\n              for (var i = 0, max = this.strokeIndices.length; i < max; i++) {\n                this.edges.push(this.strokeIndices[i]);\n              }\n            } else {\n              for (var j = 0; j < this.faces.length; j++) {\n                this.edges.push([this.faces[j][0], this.faces[j][1]]);\n                this.edges.push([this.faces[j][1], this.faces[j][2]]);\n                this.edges.push([this.faces[j][2], this.faces[j][0]]);\n              }\n            }\n            return this;\n          };\n\n          /**\n           * Create 4 vertices for each stroke line, two at the beginning position\n           * and two at the end position. These vertices are displaced relative to\n           * that line's normal on the GPU\n           * @private\n           * @chainable\n           */\n          p5.Geometry.prototype._edgesToVertices = function() {\n            this.lineVertices.length = 0;\n            this.lineNormals.length = 0;\n\n            for (var i = 0; i < this.edges.length; i++) {\n              var begin = this.vertices[this.edges[i][0]];\n              var end = this.vertices[this.edges[i][1]];\n              var dir = end\n                .copy()\n                .sub(begin)\n                .normalize();\n              var a = begin.array();\n              var b = begin.array();\n              var c = end.array();\n              var d = end.array();\n              var dirAdd = dir.array();\n              var dirSub = dir.array();\n              // below is used to displace the pair of vertices at beginning and end\n              // in opposite directions\n              dirAdd.push(1);\n              dirSub.push(-1);\n              this.lineNormals.push(dirAdd, dirSub, dirAdd, dirAdd, dirSub, dirSub);\n              this.lineVertices.push(a, b, c, c, b, d);\n            }\n            return this;\n          };\n\n          /**\n           * Modifies all vertices to be centered within the range -100 to 100.\n           * @method normalize\n           * @chainable\n           */\n          p5.Geometry.prototype.normalize = function() {\n            if (this.vertices.length > 0) {\n              // Find the corners of our bounding box\n              var maxPosition = this.vertices[0].copy();\n              var minPosition = this.vertices[0].copy();\n\n              for (var i = 0; i < this.vertices.length; i++) {\n                maxPosition.x = Math.max(maxPosition.x, this.vertices[i].x);\n                minPosition.x = Math.min(minPosition.x, this.vertices[i].x);\n                maxPosition.y = Math.max(maxPosition.y, this.vertices[i].y);\n                minPosition.y = Math.min(minPosition.y, this.vertices[i].y);\n                maxPosition.z = Math.max(maxPosition.z, this.vertices[i].z);\n                minPosition.z = Math.min(minPosition.z, this.vertices[i].z);\n              }\n\n              var center = p5.Vector.lerp(maxPosition, minPosition, 0.5);\n              var dist = p5.Vector.sub(maxPosition, minPosition);\n              var longestDist = Math.max(Math.max(dist.x, dist.y), dist.z);\n              var scale = 200 / longestDist;\n\n              for (i = 0; i < this.vertices.length; i++) {\n                this.vertices[i].sub(center);\n                this.vertices[i].mult(scale);\n              }\n            }\n            return this;\n          };\n\n          module.exports = p5.Geometry;\n        },\n        { '../core/main': 24 }\n      ],\n      72: [\n        function(_dereq_, module, exports) {\n          /**\n           * @requires constants\n           * @todo see methods below needing further implementation.\n           * future consideration: implement SIMD optimizations\n           * when browser compatibility becomes available\n           * https://developer.mozilla.org/en-US/docs/Web/JavaScript/\n           *   Reference/Global_Objects/SIMD\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          var GLMAT_ARRAY_TYPE = Array;\n          var isMatrixArray = function isMatrixArray(x) {\n            return x instanceof Array;\n          };\n          if (typeof Float32Array !== 'undefined') {\n            GLMAT_ARRAY_TYPE = Float32Array;\n            isMatrixArray = function isMatrixArray(x) {\n              return x instanceof Array || x instanceof Float32Array;\n            };\n          }\n\n          /**\n           * A class to describe a 4x4 matrix\n           * for model and view matrix manipulation in the p5js webgl renderer.\n           * @class p5.Matrix\n           * @private\n           * @constructor\n           * @param {Array} [mat4] array literal of our 4x4 matrix\n           */\n          p5.Matrix = function() {\n            var args = new Array(arguments.length);\n            for (var i = 0; i < args.length; ++i) {\n              args[i] = arguments[i];\n            }\n\n            // This is default behavior when object\n            // instantiated using createMatrix()\n            // @todo implement createMatrix() in core/math.js\n            if (args.length && args[args.length - 1] instanceof p5) {\n              this.p5 = args[args.length - 1];\n            }\n\n            if (args[0] === 'mat3') {\n              this.mat3 = Array.isArray(args[1])\n                ? args[1]\n                : new GLMAT_ARRAY_TYPE([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n            } else {\n              this.mat4 = Array.isArray(args[0])\n                ? args[0]\n                : new GLMAT_ARRAY_TYPE([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n            }\n            return this;\n          };\n\n          /**\n           * Sets the x, y, and z component of the vector using two or three separate\n           * variables, the data from a p5.Matrix, or the values from a float array.\n           *\n           * @method set\n           * @param {p5.Matrix|Float32Array|Number[]} [inMatrix] the input p5.Matrix or\n           *                                     an Array of length 16\n           * @chainable\n           */\n          /**\n           * @method set\n           * @param {Number[]} elements 16 numbers passed by value to avoid\n           *                                     array copying.\n           * @chainable\n           */\n          p5.Matrix.prototype.set = function(inMatrix) {\n            if (inMatrix instanceof p5.Matrix) {\n              this.mat4 = inMatrix.mat4;\n              return this;\n            } else if (isMatrixArray(inMatrix)) {\n              this.mat4 = inMatrix;\n              return this;\n            } else if (arguments.length === 16) {\n              this.mat4[0] = arguments[0];\n              this.mat4[1] = arguments[1];\n              this.mat4[2] = arguments[2];\n              this.mat4[3] = arguments[3];\n              this.mat4[4] = arguments[4];\n              this.mat4[5] = arguments[5];\n              this.mat4[6] = arguments[6];\n              this.mat4[7] = arguments[7];\n              this.mat4[8] = arguments[8];\n              this.mat4[9] = arguments[9];\n              this.mat4[10] = arguments[10];\n              this.mat4[11] = arguments[11];\n              this.mat4[12] = arguments[12];\n              this.mat4[13] = arguments[13];\n              this.mat4[14] = arguments[14];\n              this.mat4[15] = arguments[15];\n            }\n            return this;\n          };\n\n          /**\n           * Gets a copy of the vector, returns a p5.Matrix object.\n           *\n           * @method get\n           * @return {p5.Matrix} the copy of the p5.Matrix object\n           */\n          p5.Matrix.prototype.get = function() {\n            return new p5.Matrix(this.mat4, this.p5);\n          };\n\n          /**\n           * return a copy of a matrix\n           * @method copy\n           * @return {p5.Matrix}   the result matrix\n           */\n          p5.Matrix.prototype.copy = function() {\n            var copied = new p5.Matrix(this.p5);\n            copied.mat4[0] = this.mat4[0];\n            copied.mat4[1] = this.mat4[1];\n            copied.mat4[2] = this.mat4[2];\n            copied.mat4[3] = this.mat4[3];\n            copied.mat4[4] = this.mat4[4];\n            copied.mat4[5] = this.mat4[5];\n            copied.mat4[6] = this.mat4[6];\n            copied.mat4[7] = this.mat4[7];\n            copied.mat4[8] = this.mat4[8];\n            copied.mat4[9] = this.mat4[9];\n            copied.mat4[10] = this.mat4[10];\n            copied.mat4[11] = this.mat4[11];\n            copied.mat4[12] = this.mat4[12];\n            copied.mat4[13] = this.mat4[13];\n            copied.mat4[14] = this.mat4[14];\n            copied.mat4[15] = this.mat4[15];\n            return copied;\n          };\n\n          /**\n           * return an identity matrix\n           * @method identity\n           * @return {p5.Matrix}   the result matrix\n           */\n          p5.Matrix.identity = function(pInst) {\n            return new p5.Matrix(pInst);\n          };\n\n          /**\n           * transpose according to a given matrix\n           * @method transpose\n           * @param  {p5.Matrix|Float32Array|Number[]} a  the matrix to be\n           *                                               based on to transpose\n           * @chainable\n           */\n          p5.Matrix.prototype.transpose = function(a) {\n            var a01, a02, a03, a12, a13, a23;\n            if (a instanceof p5.Matrix) {\n              a01 = a.mat4[1];\n              a02 = a.mat4[2];\n              a03 = a.mat4[3];\n              a12 = a.mat4[6];\n              a13 = a.mat4[7];\n              a23 = a.mat4[11];\n\n              this.mat4[0] = a.mat4[0];\n              this.mat4[1] = a.mat4[4];\n              this.mat4[2] = a.mat4[8];\n              this.mat4[3] = a.mat4[12];\n              this.mat4[4] = a01;\n              this.mat4[5] = a.mat4[5];\n              this.mat4[6] = a.mat4[9];\n              this.mat4[7] = a.mat4[13];\n              this.mat4[8] = a02;\n              this.mat4[9] = a12;\n              this.mat4[10] = a.mat4[10];\n              this.mat4[11] = a.mat4[14];\n              this.mat4[12] = a03;\n              this.mat4[13] = a13;\n              this.mat4[14] = a23;\n              this.mat4[15] = a.mat4[15];\n            } else if (isMatrixArray(a)) {\n              a01 = a[1];\n              a02 = a[2];\n              a03 = a[3];\n              a12 = a[6];\n              a13 = a[7];\n              a23 = a[11];\n\n              this.mat4[0] = a[0];\n              this.mat4[1] = a[4];\n              this.mat4[2] = a[8];\n              this.mat4[3] = a[12];\n              this.mat4[4] = a01;\n              this.mat4[5] = a[5];\n              this.mat4[6] = a[9];\n              this.mat4[7] = a[13];\n              this.mat4[8] = a02;\n              this.mat4[9] = a12;\n              this.mat4[10] = a[10];\n              this.mat4[11] = a[14];\n              this.mat4[12] = a03;\n              this.mat4[13] = a13;\n              this.mat4[14] = a23;\n              this.mat4[15] = a[15];\n            }\n            return this;\n          };\n\n          /**\n           * invert  matrix according to a give matrix\n           * @method invert\n           * @param  {p5.Matrix|Float32Array|Number[]} a   the matrix to be\n           *                                                based on to invert\n           * @chainable\n           */\n          p5.Matrix.prototype.invert = function(a) {\n            var a00, a01, a02, a03, a10, a11, a12, a13;\n            var a20, a21, a22, a23, a30, a31, a32, a33;\n            if (a instanceof p5.Matrix) {\n              a00 = a.mat4[0];\n              a01 = a.mat4[1];\n              a02 = a.mat4[2];\n              a03 = a.mat4[3];\n              a10 = a.mat4[4];\n              a11 = a.mat4[5];\n              a12 = a.mat4[6];\n              a13 = a.mat4[7];\n              a20 = a.mat4[8];\n              a21 = a.mat4[9];\n              a22 = a.mat4[10];\n              a23 = a.mat4[11];\n              a30 = a.mat4[12];\n              a31 = a.mat4[13];\n              a32 = a.mat4[14];\n              a33 = a.mat4[15];\n            } else if (isMatrixArray(a)) {\n              a00 = a[0];\n              a01 = a[1];\n              a02 = a[2];\n              a03 = a[3];\n              a10 = a[4];\n              a11 = a[5];\n              a12 = a[6];\n              a13 = a[7];\n              a20 = a[8];\n              a21 = a[9];\n              a22 = a[10];\n              a23 = a[11];\n              a30 = a[12];\n              a31 = a[13];\n              a32 = a[14];\n              a33 = a[15];\n            }\n            var b00 = a00 * a11 - a01 * a10;\n            var b01 = a00 * a12 - a02 * a10;\n            var b02 = a00 * a13 - a03 * a10;\n            var b03 = a01 * a12 - a02 * a11;\n            var b04 = a01 * a13 - a03 * a11;\n            var b05 = a02 * a13 - a03 * a12;\n            var b06 = a20 * a31 - a21 * a30;\n            var b07 = a20 * a32 - a22 * a30;\n            var b08 = a20 * a33 - a23 * a30;\n            var b09 = a21 * a32 - a22 * a31;\n            var b10 = a21 * a33 - a23 * a31;\n            var b11 = a22 * a33 - a23 * a32;\n\n            // Calculate the determinant\n            var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n            if (!det) {\n              return null;\n            }\n            det = 1.0 / det;\n\n            this.mat4[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n            this.mat4[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n            this.mat4[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n            this.mat4[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n            this.mat4[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n            this.mat4[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n            this.mat4[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n            this.mat4[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n            this.mat4[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n            this.mat4[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n            this.mat4[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n            this.mat4[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n            this.mat4[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n            this.mat4[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n            this.mat4[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n            this.mat4[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n            return this;\n          };\n\n          /**\n           * Inverts a 3x3 matrix\n           * @method invert3x3\n           * @chainable\n           */\n          p5.Matrix.prototype.invert3x3 = function() {\n            var a00 = this.mat3[0];\n            var a01 = this.mat3[1];\n            var a02 = this.mat3[2];\n            var a10 = this.mat3[3];\n            var a11 = this.mat3[4];\n            var a12 = this.mat3[5];\n            var a20 = this.mat3[6];\n            var a21 = this.mat3[7];\n            var a22 = this.mat3[8];\n            var b01 = a22 * a11 - a12 * a21;\n            var b11 = -a22 * a10 + a12 * a20;\n            var b21 = a21 * a10 - a11 * a20;\n\n            // Calculate the determinant\n            var det = a00 * b01 + a01 * b11 + a02 * b21;\n            if (!det) {\n              return null;\n            }\n            det = 1.0 / det;\n            this.mat3[0] = b01 * det;\n            this.mat3[1] = (-a22 * a01 + a02 * a21) * det;\n            this.mat3[2] = (a12 * a01 - a02 * a11) * det;\n            this.mat3[3] = b11 * det;\n            this.mat3[4] = (a22 * a00 - a02 * a20) * det;\n            this.mat3[5] = (-a12 * a00 + a02 * a10) * det;\n            this.mat3[6] = b21 * det;\n            this.mat3[7] = (-a21 * a00 + a01 * a20) * det;\n            this.mat3[8] = (a11 * a00 - a01 * a10) * det;\n            return this;\n          };\n\n          /**\n           * transposes a 3x3 p5.Matrix by a mat3\n           * @method transpose3x3\n           * @param  {Number[]} mat3 1-dimensional array\n           * @chainable\n           */\n          p5.Matrix.prototype.transpose3x3 = function(mat3) {\n            var a01 = mat3[1],\n              a02 = mat3[2],\n              a12 = mat3[5];\n            this.mat3[1] = mat3[3];\n            this.mat3[2] = mat3[6];\n            this.mat3[3] = a01;\n            this.mat3[5] = mat3[7];\n            this.mat3[6] = a02;\n            this.mat3[7] = a12;\n            return this;\n          };\n\n          /**\n           * converts a 4x4 matrix to its 3x3 inverse transform\n           * commonly used in MVMatrix to NMatrix conversions.\n           * @method invertTranspose\n           * @param  {p5.Matrix} mat4 the matrix to be based on to invert\n           * @chainable\n           * @todo  finish implementation\n           */\n          p5.Matrix.prototype.inverseTranspose = function(matrix) {\n            if (this.mat3 === undefined) {\n              console.error('sorry, this function only works with mat3');\n            } else {\n              //convert mat4 -> mat3\n              this.mat3[0] = matrix.mat4[0];\n              this.mat3[1] = matrix.mat4[1];\n              this.mat3[2] = matrix.mat4[2];\n              this.mat3[3] = matrix.mat4[4];\n              this.mat3[4] = matrix.mat4[5];\n              this.mat3[5] = matrix.mat4[6];\n              this.mat3[6] = matrix.mat4[8];\n              this.mat3[7] = matrix.mat4[9];\n              this.mat3[8] = matrix.mat4[10];\n            }\n\n            var inverse = this.invert3x3();\n            // check inverse succeeded\n            if (inverse) {\n              inverse.transpose3x3(this.mat3);\n            } else {\n              // in case of singularity, just zero the matrix\n              for (var i = 0; i < 9; i++) {\n                this.mat3[i] = 0;\n              }\n            }\n            return this;\n          };\n\n          /**\n           * inspired by Toji's mat4 determinant\n           * @method determinant\n           * @return {Number} Determinant of our 4x4 matrix\n           */\n          p5.Matrix.prototype.determinant = function() {\n            var d00 = this.mat4[0] * this.mat4[5] - this.mat4[1] * this.mat4[4],\n              d01 = this.mat4[0] * this.mat4[6] - this.mat4[2] * this.mat4[4],\n              d02 = this.mat4[0] * this.mat4[7] - this.mat4[3] * this.mat4[4],\n              d03 = this.mat4[1] * this.mat4[6] - this.mat4[2] * this.mat4[5],\n              d04 = this.mat4[1] * this.mat4[7] - this.mat4[3] * this.mat4[5],\n              d05 = this.mat4[2] * this.mat4[7] - this.mat4[3] * this.mat4[6],\n              d06 = this.mat4[8] * this.mat4[13] - this.mat4[9] * this.mat4[12],\n              d07 = this.mat4[8] * this.mat4[14] - this.mat4[10] * this.mat4[12],\n              d08 = this.mat4[8] * this.mat4[15] - this.mat4[11] * this.mat4[12],\n              d09 = this.mat4[9] * this.mat4[14] - this.mat4[10] * this.mat4[13],\n              d10 = this.mat4[9] * this.mat4[15] - this.mat4[11] * this.mat4[13],\n              d11 = this.mat4[10] * this.mat4[15] - this.mat4[11] * this.mat4[14];\n\n            // Calculate the determinant\n            return d00 * d11 - d01 * d10 + d02 * d09 + d03 * d08 - d04 * d07 + d05 * d06;\n          };\n\n          /**\n           * multiply two mat4s\n           * @method mult\n           * @param {p5.Matrix|Float32Array|Number[]} multMatrix The matrix\n           *                                                we want to multiply by\n           * @chainable\n           */\n          p5.Matrix.prototype.mult = function(multMatrix) {\n            var _src;\n\n            if (multMatrix === this || multMatrix === this.mat4) {\n              _src = this.copy().mat4; // only need to allocate in this rare case\n            } else if (multMatrix instanceof p5.Matrix) {\n              _src = multMatrix.mat4;\n            } else if (isMatrixArray(multMatrix)) {\n              _src = multMatrix;\n            } else if (arguments.length === 16) {\n              _src = arguments;\n            } else {\n              return; // nothing to do.\n            }\n\n            // each row is used for the multiplier\n            var b0 = this.mat4[0],\n              b1 = this.mat4[1],\n              b2 = this.mat4[2],\n              b3 = this.mat4[3];\n            this.mat4[0] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n            this.mat4[1] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n            this.mat4[2] = b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n            this.mat4[3] = b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n\n            b0 = this.mat4[4];\n            b1 = this.mat4[5];\n            b2 = this.mat4[6];\n            b3 = this.mat4[7];\n            this.mat4[4] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n            this.mat4[5] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n            this.mat4[6] = b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n            this.mat4[7] = b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n\n            b0 = this.mat4[8];\n            b1 = this.mat4[9];\n            b2 = this.mat4[10];\n            b3 = this.mat4[11];\n            this.mat4[8] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n            this.mat4[9] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n            this.mat4[10] = b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n            this.mat4[11] = b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n\n            b0 = this.mat4[12];\n            b1 = this.mat4[13];\n            b2 = this.mat4[14];\n            b3 = this.mat4[15];\n            this.mat4[12] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n            this.mat4[13] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n            this.mat4[14] = b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n            this.mat4[15] = b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n\n            return this;\n          };\n\n          p5.Matrix.prototype.apply = function(multMatrix) {\n            var _src;\n\n            if (multMatrix === this || multMatrix === this.mat4) {\n              _src = this.copy().mat4; // only need to allocate in this rare case\n            } else if (multMatrix instanceof p5.Matrix) {\n              _src = multMatrix.mat4;\n            } else if (isMatrixArray(multMatrix)) {\n              _src = multMatrix;\n            } else if (arguments.length === 16) {\n              _src = arguments;\n            } else {\n              return; // nothing to do.\n            }\n\n            var mat4 = this.mat4;\n\n            // each row is used for the multiplier\n            var m0 = mat4[0];\n            var m4 = mat4[4];\n            var m8 = mat4[8];\n            var m12 = mat4[12];\n            mat4[0] = _src[0] * m0 + _src[1] * m4 + _src[2] * m8 + _src[3] * m12;\n            mat4[4] = _src[4] * m0 + _src[5] * m4 + _src[6] * m8 + _src[7] * m12;\n            mat4[8] = _src[8] * m0 + _src[9] * m4 + _src[10] * m8 + _src[11] * m12;\n            mat4[12] = _src[12] * m0 + _src[13] * m4 + _src[14] * m8 + _src[15] * m12;\n\n            var m1 = mat4[1];\n            var m5 = mat4[5];\n            var m9 = mat4[9];\n            var m13 = mat4[13];\n            mat4[1] = _src[0] * m1 + _src[1] * m5 + _src[2] * m9 + _src[3] * m13;\n            mat4[5] = _src[4] * m1 + _src[5] * m5 + _src[6] * m9 + _src[7] * m13;\n            mat4[9] = _src[8] * m1 + _src[9] * m5 + _src[10] * m9 + _src[11] * m13;\n            mat4[13] = _src[12] * m1 + _src[13] * m5 + _src[14] * m9 + _src[15] * m13;\n\n            var m2 = mat4[2];\n            var m6 = mat4[6];\n            var m10 = mat4[10];\n            var m14 = mat4[14];\n            mat4[2] = _src[0] * m2 + _src[1] * m6 + _src[2] * m10 + _src[3] * m14;\n            mat4[6] = _src[4] * m2 + _src[5] * m6 + _src[6] * m10 + _src[7] * m14;\n            mat4[10] = _src[8] * m2 + _src[9] * m6 + _src[10] * m10 + _src[11] * m14;\n            mat4[14] = _src[12] * m2 + _src[13] * m6 + _src[14] * m10 + _src[15] * m14;\n\n            var m3 = mat4[3];\n            var m7 = mat4[7];\n            var m11 = mat4[11];\n            var m15 = mat4[15];\n            mat4[3] = _src[0] * m3 + _src[1] * m7 + _src[2] * m11 + _src[3] * m15;\n            mat4[7] = _src[4] * m3 + _src[5] * m7 + _src[6] * m11 + _src[7] * m15;\n            mat4[11] = _src[8] * m3 + _src[9] * m7 + _src[10] * m11 + _src[11] * m15;\n            mat4[15] = _src[12] * m3 + _src[13] * m7 + _src[14] * m11 + _src[15] * m15;\n\n            return this;\n          };\n\n          /**\n           * scales a p5.Matrix by scalars or a vector\n           * @method scale\n           * @param  {p5.Vector|Float32Array|Number[]} s vector to scale by\n           * @chainable\n           */\n          p5.Matrix.prototype.scale = function(x, y, z) {\n            if (x instanceof p5.Vector) {\n              // x is a vector, extract the components from it.\n              y = x.y;\n              z = x.z;\n              x = x.x; // must be last\n            } else if (x instanceof Array) {\n              // x is an array, extract the components from it.\n              y = x[1];\n              z = x[2];\n              x = x[0]; // must be last\n            }\n\n            this.mat4[0] *= x;\n            this.mat4[1] *= x;\n            this.mat4[2] *= x;\n            this.mat4[3] *= x;\n            this.mat4[4] *= y;\n            this.mat4[5] *= y;\n            this.mat4[6] *= y;\n            this.mat4[7] *= y;\n            this.mat4[8] *= z;\n            this.mat4[9] *= z;\n            this.mat4[10] *= z;\n            this.mat4[11] *= z;\n\n            return this;\n          };\n\n          /**\n           * rotate our Matrix around an axis by the given angle.\n           * @method rotate\n           * @param  {Number} a The angle of rotation in radians\n           * @param  {p5.Vector|Number[]} axis  the axis(es) to rotate around\n           * @chainable\n           * inspired by Toji's gl-matrix lib, mat4 rotation\n           */\n          p5.Matrix.prototype.rotate = function(a, x, y, z) {\n            if (x instanceof p5.Vector) {\n              // x is a vector, extract the components from it.\n              y = x.y;\n              z = x.z;\n              x = x.x; //must be last\n            } else if (x instanceof Array) {\n              // x is an array, extract the components from it.\n              y = x[1];\n              z = x[2];\n              x = x[0]; //must be last\n            }\n\n            var len = Math.sqrt(x * x + y * y + z * z);\n            x *= 1 / len;\n            y *= 1 / len;\n            z *= 1 / len;\n\n            var a00 = this.mat4[0];\n            var a01 = this.mat4[1];\n            var a02 = this.mat4[2];\n            var a03 = this.mat4[3];\n            var a10 = this.mat4[4];\n            var a11 = this.mat4[5];\n            var a12 = this.mat4[6];\n            var a13 = this.mat4[7];\n            var a20 = this.mat4[8];\n            var a21 = this.mat4[9];\n            var a22 = this.mat4[10];\n            var a23 = this.mat4[11];\n\n            //sin,cos, and tan of respective angle\n            var sA = Math.sin(a);\n            var cA = Math.cos(a);\n            var tA = 1 - cA;\n            // Construct the elements of the rotation matrix\n            var b00 = x * x * tA + cA;\n            var b01 = y * x * tA + z * sA;\n            var b02 = z * x * tA - y * sA;\n            var b10 = x * y * tA - z * sA;\n            var b11 = y * y * tA + cA;\n            var b12 = z * y * tA + x * sA;\n            var b20 = x * z * tA + y * sA;\n            var b21 = y * z * tA - x * sA;\n            var b22 = z * z * tA + cA;\n\n            // rotation-specific matrix multiplication\n            this.mat4[0] = a00 * b00 + a10 * b01 + a20 * b02;\n            this.mat4[1] = a01 * b00 + a11 * b01 + a21 * b02;\n            this.mat4[2] = a02 * b00 + a12 * b01 + a22 * b02;\n            this.mat4[3] = a03 * b00 + a13 * b01 + a23 * b02;\n            this.mat4[4] = a00 * b10 + a10 * b11 + a20 * b12;\n            this.mat4[5] = a01 * b10 + a11 * b11 + a21 * b12;\n            this.mat4[6] = a02 * b10 + a12 * b11 + a22 * b12;\n            this.mat4[7] = a03 * b10 + a13 * b11 + a23 * b12;\n            this.mat4[8] = a00 * b20 + a10 * b21 + a20 * b22;\n            this.mat4[9] = a01 * b20 + a11 * b21 + a21 * b22;\n            this.mat4[10] = a02 * b20 + a12 * b21 + a22 * b22;\n            this.mat4[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n            return this;\n          };\n\n          /**\n           * @todo  finish implementing this method!\n           * translates\n           * @method translate\n           * @param  {Number[]} v vector to translate by\n           * @chainable\n           */\n          p5.Matrix.prototype.translate = function(v) {\n            var x = v[0],\n              y = v[1],\n              z = v[2] || 0;\n            this.mat4[12] += this.mat4[0] * x + this.mat4[4] * y + this.mat4[8] * z;\n            this.mat4[13] += this.mat4[1] * x + this.mat4[5] * y + this.mat4[9] * z;\n            this.mat4[14] += this.mat4[2] * x + this.mat4[6] * y + this.mat4[10] * z;\n            this.mat4[15] += this.mat4[3] * x + this.mat4[7] * y + this.mat4[11] * z;\n          };\n\n          p5.Matrix.prototype.rotateX = function(a) {\n            this.rotate(a, 1, 0, 0);\n          };\n          p5.Matrix.prototype.rotateY = function(a) {\n            this.rotate(a, 0, 1, 0);\n          };\n          p5.Matrix.prototype.rotateZ = function(a) {\n            this.rotate(a, 0, 0, 1);\n          };\n\n          /**\n           * sets the perspective matrix\n           * @method perspective\n           * @param  {Number} fovy   [description]\n           * @param  {Number} aspect [description]\n           * @param  {Number} near   near clipping plane\n           * @param  {Number} far    far clipping plane\n           * @chainable\n           */\n          p5.Matrix.prototype.perspective = function(fovy, aspect, near, far) {\n            var f = 1.0 / Math.tan(fovy / 2),\n              nf = 1 / (near - far);\n\n            this.mat4[0] = f / aspect;\n            this.mat4[1] = 0;\n            this.mat4[2] = 0;\n            this.mat4[3] = 0;\n            this.mat4[4] = 0;\n            this.mat4[5] = f;\n            this.mat4[6] = 0;\n            this.mat4[7] = 0;\n            this.mat4[8] = 0;\n            this.mat4[9] = 0;\n            this.mat4[10] = (far + near) * nf;\n            this.mat4[11] = -1;\n            this.mat4[12] = 0;\n            this.mat4[13] = 0;\n            this.mat4[14] = 2 * far * near * nf;\n            this.mat4[15] = 0;\n\n            return this;\n          };\n\n          /**\n           * sets the ortho matrix\n           * @method ortho\n           * @param  {Number} left   [description]\n           * @param  {Number} right  [description]\n           * @param  {Number} bottom [description]\n           * @param  {Number} top    [description]\n           * @param  {Number} near   near clipping plane\n           * @param  {Number} far    far clipping plane\n           * @chainable\n           */\n          p5.Matrix.prototype.ortho = function(left, right, bottom, top, near, far) {\n            var lr = 1 / (left - right),\n              bt = 1 / (bottom - top),\n              nf = 1 / (near - far);\n            this.mat4[0] = -2 * lr;\n            this.mat4[1] = 0;\n            this.mat4[2] = 0;\n            this.mat4[3] = 0;\n            this.mat4[4] = 0;\n            this.mat4[5] = -2 * bt;\n            this.mat4[6] = 0;\n            this.mat4[7] = 0;\n            this.mat4[8] = 0;\n            this.mat4[9] = 0;\n            this.mat4[10] = 2 * nf;\n            this.mat4[11] = 0;\n            this.mat4[12] = (left + right) * lr;\n            this.mat4[13] = (top + bottom) * bt;\n            this.mat4[14] = (far + near) * nf;\n            this.mat4[15] = 1;\n\n            return this;\n          };\n\n          /**\n           * PRIVATE\n           */\n          // matrix methods adapted from:\n          // https://developer.mozilla.org/en-US/docs/Web/WebGL/\n          // gluPerspective\n          //\n          // function _makePerspective(fovy, aspect, znear, zfar){\n          //    var ymax = znear * Math.tan(fovy * Math.PI / 360.0);\n          //    var ymin = -ymax;\n          //    var xmin = ymin * aspect;\n          //    var xmax = ymax * aspect;\n          //    return _makeFrustum(xmin, xmax, ymin, ymax, znear, zfar);\n          //  }\n\n          ////\n          //// glFrustum\n          ////\n          //function _makeFrustum(left, right, bottom, top, znear, zfar){\n          //  var X = 2*znear/(right-left);\n          //  var Y = 2*znear/(top-bottom);\n          //  var A = (right+left)/(right-left);\n          //  var B = (top+bottom)/(top-bottom);\n          //  var C = -(zfar+znear)/(zfar-znear);\n          //  var D = -2*zfar*znear/(zfar-znear);\n          //  var frustrumMatrix =[\n          //  X, 0, A, 0,\n          //  0, Y, B, 0,\n          //  0, 0, C, D,\n          //  0, 0, -1, 0\n          //];\n          //return frustrumMatrix;\n          // }\n\n          // function _setMVPMatrices(){\n          ////an identity matrix\n          ////@TODO use the p5.Matrix class to abstract away our MV matrices and\n          ///other math\n          //var _mvMatrix =\n          //[\n          //  1.0,0.0,0.0,0.0,\n          //  0.0,1.0,0.0,0.0,\n          //  0.0,0.0,1.0,0.0,\n          //  0.0,0.0,0.0,1.0\n          //];\n\n          module.exports = p5.Matrix;\n        },\n        { '../core/main': 24 }\n      ],\n      73: [\n        function(_dereq_, module, exports) {\n          /**\n           * Welcome to RendererGL Immediate Mode.\n           * Immediate mode is used for drawing custom shapes\n           * from a set of vertices.  Immediate Mode is activated\n           * when you call <a href=\"#/p5/beginShape\">beginShape()</a> & de-activated when you call <a href=\"#/p5/endShape\">endShape()</a>.\n           * Immediate mode is a style of programming borrowed\n           * from OpenGL's (now-deprecated) immediate mode.\n           * It differs from p5.js' default, Retained Mode, which caches\n           * geometries and buffers on the CPU to reduce the number of webgl\n           * draw calls. Retained mode is more efficient & performative,\n           * however, Immediate Mode is useful for sketching quick\n           * geometric ideas.\n           */\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          var constants = _dereq_('../core/constants');\n\n          /**\n           * Begin shape drawing.  This is a helpful way of generating\n           * custom shapes quickly.  However in WEBGL mode, application\n           * performance will likely drop as a result of too many calls to\n           * <a href=\"#/p5/beginShape\">beginShape()</a> / <a href=\"#/p5/endShape\">endShape()</a>.  As a high performance alternative,\n           * please use p5.js geometry primitives.\n           * @private\n           * @method beginShape\n           * @param  {Number} mode webgl primitives mode.  beginShape supports the\n           *                       following modes:\n           *                       POINTS,LINES,LINE_STRIP,LINE_LOOP,TRIANGLES,\n           *                       TRIANGLE_STRIP,and TRIANGLE_FAN.\n           * @chainable\n           */\n          p5.RendererGL.prototype.beginShape = function(mode) {\n            //default shape mode is line_strip\n            this.immediateMode.shapeMode = mode !== undefined ? mode : constants.LINE_STRIP;\n            //if we haven't yet initialized our\n            //immediateMode vertices & buffers, create them now!\n            if (this.immediateMode.vertices === undefined) {\n              this.immediateMode.vertices = [];\n              this.immediateMode.edges = [];\n              this.immediateMode.lineVertices = [];\n              this.immediateMode.vertexColors = [];\n              this.immediateMode.lineNormals = [];\n              this.immediateMode.uvCoords = [];\n              this.immediateMode.vertexBuffer = this.GL.createBuffer();\n              this.immediateMode.colorBuffer = this.GL.createBuffer();\n              this.immediateMode.uvBuffer = this.GL.createBuffer();\n              this.immediateMode.lineVertexBuffer = this.GL.createBuffer();\n              this.immediateMode.lineNormalBuffer = this.GL.createBuffer();\n              this.immediateMode.pointVertexBuffer = this.GL.createBuffer();\n              this.immediateMode._bezierVertex = [];\n              this.immediateMode._quadraticVertex = [];\n              this.immediateMode._curveVertex = [];\n              this.immediateMode._isCoplanar = true;\n              this.immediateMode._testIfCoplanar = null;\n            } else {\n              this.immediateMode.vertices.length = 0;\n              this.immediateMode.edges.length = 0;\n              this.immediateMode.lineVertices.length = 0;\n              this.immediateMode.lineNormals.length = 0;\n              this.immediateMode.vertexColors.length = 0;\n              this.immediateMode.uvCoords.length = 0;\n            }\n            this.isImmediateDrawing = true;\n            return this;\n          };\n          /**\n           * adds a vertex to be drawn in a custom Shape.\n           * @private\n           * @method vertex\n           * @param  {Number} x x-coordinate of vertex\n           * @param  {Number} y y-coordinate of vertex\n           * @param  {Number} z z-coordinate of vertex\n           * @chainable\n           * @TODO implement handling of <a href=\"#/p5.Vector\">p5.Vector</a> args\n           */\n          p5.RendererGL.prototype.vertex = function(x, y) {\n            var z, u, v;\n\n            // default to (x, y) mode: all other arugments assumed to be 0.\n            z = u = v = 0;\n\n            if (arguments.length === 3) {\n              // (x, y, z) mode: (u, v) assumed to be 0.\n              z = arguments[2];\n            } else if (arguments.length === 4) {\n              // (x, y, u, v) mode: z assumed to be 0.\n              u = arguments[2];\n              v = arguments[3];\n            } else if (arguments.length === 5) {\n              // (x, y, z, u, v) mode\n              z = arguments[2];\n              u = arguments[3];\n              v = arguments[4];\n            }\n            if (this.immediateMode._testIfCoplanar == null) {\n              this.immediateMode._testIfCoplanar = z;\n            } else if (this.immediateMode._testIfCoplanar !== z) {\n              this.immediateMode._isCoplanar = false;\n            }\n            var vert = new p5.Vector(x, y, z);\n            this.immediateMode.vertices.push(vert);\n            var vertexColor = this.curFillColor || [0.5, 0.5, 0.5, 1.0];\n            this.immediateMode.vertexColors.push(\n              vertexColor[0],\n              vertexColor[1],\n              vertexColor[2],\n              vertexColor[3]\n            );\n\n            if (this.textureMode === constants.IMAGE) {\n              if (this._tex !== null) {\n                if (this._tex.width > 0 && this._tex.height > 0) {\n                  u /= this._tex.width;\n                  v /= this._tex.height;\n                }\n              } else if (this._tex === null && arguments.length >= 4) {\n                // Only throw this warning if custom uv's have  been provided\n                console.warn(\n                  'You must first call texture() before using' +\n                    ' vertex() with image based u and v coordinates'\n                );\n              }\n            }\n\n            this.immediateMode.uvCoords.push(u, v);\n\n            this.immediateMode._bezierVertex[0] = x;\n            this.immediateMode._bezierVertex[1] = y;\n            this.immediateMode._bezierVertex[2] = z;\n\n            this.immediateMode._quadraticVertex[0] = x;\n            this.immediateMode._quadraticVertex[1] = y;\n            this.immediateMode._quadraticVertex[2] = z;\n\n            return this;\n          };\n\n          /**\n           * End shape drawing and render vertices to screen.\n           * @chainable\n           */\n          p5.RendererGL.prototype.endShape = function(\n            mode,\n            isCurve,\n            isBezier,\n            isQuadratic,\n            isContour,\n            shapeKind\n          ) {\n            if (this.immediateMode.shapeMode === constants.POINTS) {\n              this._drawPoints(\n                this.immediateMode.vertices,\n                this.immediateMode.pointVertexBuffer\n              );\n            } else if (this.immediateMode.vertices.length > 1) {\n              if (this._doStroke && this.drawMode !== constants.TEXTURE) {\n                if (this.immediateMode.shapeMode === constants.TRIANGLE_STRIP) {\n                  var i;\n                  for (i = 0; i < this.immediateMode.vertices.length - 2; i++) {\n                    this.immediateMode.edges.push([i, i + 1]);\n                    this.immediateMode.edges.push([i, i + 2]);\n                  }\n                  this.immediateMode.edges.push([i, i + 1]);\n                } else if (this.immediateMode.shapeMode === constants.TRIANGLES) {\n                  for (i = 0; i < this.immediateMode.vertices.length - 2; i = i + 3) {\n                    this.immediateMode.edges.push([i, i + 1]);\n                    this.immediateMode.edges.push([i + 1, i + 2]);\n                    this.immediateMode.edges.push([i + 2, i]);\n                  }\n                } else if (this.immediateMode.shapeMode === constants.LINES) {\n                  for (i = 0; i < this.immediateMode.vertices.length - 1; i = i + 2) {\n                    this.immediateMode.edges.push([i, i + 1]);\n                  }\n                } else {\n                  for (i = 0; i < this.immediateMode.vertices.length - 1; i++) {\n                    this.immediateMode.edges.push([i, i + 1]);\n                  }\n                }\n                if (mode === constants.CLOSE) {\n                  this.immediateMode.edges.push([\n                    this.immediateMode.vertices.length - 1,\n                    0\n                  ]);\n                }\n\n                p5.Geometry.prototype._edgesToVertices.call(this.immediateMode);\n                this._drawStrokeImmediateMode();\n              }\n\n              if (this._doFill && this.immediateMode.shapeMode !== constants.LINES) {\n                if (\n                  this.isBezier ||\n                  this.isQuadratic ||\n                  this.isCurve ||\n                  (this.immediateMode.shapeMode === constants.LINE_STRIP &&\n                    this.drawMode === constants.FILL &&\n                    this.immediateMode._isCoplanar === true)\n                ) {\n                  this.immediateMode.shapeMode = constants.TRIANGLES;\n                  var contours = [\n                    new Float32Array(this._vToNArray(this.immediateMode.vertices))\n                  ];\n\n                  var polyTriangles = this._triangulate(contours);\n                  this.immediateMode.vertices = [];\n                  for (\n                    var j = 0, polyTriLength = polyTriangles.length;\n                    j < polyTriLength;\n                    j = j + 3\n                  ) {\n                    this.vertex(\n                      polyTriangles[j],\n                      polyTriangles[j + 1],\n                      polyTriangles[j + 2]\n                    );\n                  }\n                }\n                if (this.immediateMode.vertices.length > 0) {\n                  this._drawFillImmediateMode(\n                    mode,\n                    isCurve,\n                    isBezier,\n                    isQuadratic,\n                    isContour,\n                    shapeKind\n                  );\n                }\n              }\n            }\n            //clear out our vertexPositions & colors arrays\n            //after rendering\n            this.immediateMode.vertices.length = 0;\n            this.immediateMode.vertexColors.length = 0;\n            this.immediateMode.uvCoords.length = 0;\n            this.isImmediateDrawing = false;\n            this.isBezier = false;\n            this.isQuadratic = false;\n            this.isCurve = false;\n            this.immediateMode._bezierVertex.length = 0;\n            this.immediateMode._quadraticVertex.length = 0;\n            this.immediateMode._curveVertex.length = 0;\n            this.immediateMode._isCoplanar = true;\n            this.immediateMode._testIfCoplanar = null;\n\n            return this;\n          };\n\n          p5.RendererGL.prototype._drawFillImmediateMode = function(\n            mode,\n            isCurve,\n            isBezier,\n            isQuadratic,\n            isContour,\n            shapeKind\n          ) {\n            var gl = this.GL;\n            var shader = this._getImmediateFillShader();\n            this._setFillUniforms(shader);\n\n            // initialize the fill shader's 'aPosition' buffer\n            if (shader.attributes.aPosition) {\n              //vertex position Attribute\n              this._bindBuffer(\n                this.immediateMode.vertexBuffer,\n                gl.ARRAY_BUFFER,\n                this._vToNArray(this.immediateMode.vertices),\n                Float32Array,\n                gl.DYNAMIC_DRAW\n              );\n\n              shader.enableAttrib(shader.attributes.aPosition, 3);\n            }\n\n            // initialize the fill shader's 'aVertexColor' buffer\n            if (this.drawMode === constants.FILL && shader.attributes.aVertexColor) {\n              this._bindBuffer(\n                this.immediateMode.colorBuffer,\n                gl.ARRAY_BUFFER,\n                this.immediateMode.vertexColors,\n                Float32Array,\n                gl.DYNAMIC_DRAW\n              );\n\n              shader.enableAttrib(shader.attributes.aVertexColor, 4);\n            }\n\n            // initialize the fill shader's 'aTexCoord' buffer\n            if (this.drawMode === constants.TEXTURE && shader.attributes.aTexCoord) {\n              //texture coordinate Attribute\n              this._bindBuffer(\n                this.immediateMode.uvBuffer,\n                gl.ARRAY_BUFFER,\n                this.immediateMode.uvCoords,\n                Float32Array,\n                gl.DYNAMIC_DRAW\n              );\n\n              shader.enableAttrib(shader.attributes.aTexCoord, 2);\n            }\n\n            //if (true || mode) {\n            if (this.drawMode === constants.FILL || this.drawMode === constants.TEXTURE) {\n              switch (this.immediateMode.shapeMode) {\n                case constants.LINE_STRIP:\n                case constants.LINES:\n                  this.immediateMode.shapeMode = constants.TRIANGLE_FAN;\n                  break;\n              }\n            } else {\n              switch (this.immediateMode.shapeMode) {\n                case constants.LINE_STRIP:\n                case constants.LINES:\n                  this.immediateMode.shapeMode = constants.LINE_LOOP;\n                  break;\n              }\n            }\n            //}\n            //QUADS & QUAD_STRIP are not supported primitives modes\n            //in webgl.\n            if (\n              this.immediateMode.shapeMode === constants.QUADS ||\n              this.immediateMode.shapeMode === constants.QUAD_STRIP\n            ) {\n              throw new Error(\n                'sorry, ' +\n                  this.immediateMode.shapeMode +\n                  ' not yet implemented in webgl mode.'\n              );\n            } else {\n              this._applyColorBlend(this.curFillColor);\n              gl.enable(gl.BLEND);\n              gl.drawArrays(\n                this.immediateMode.shapeMode,\n                0,\n                this.immediateMode.vertices.length\n              );\n\n              this._pixelsState._pixelsDirty = true;\n            }\n            // todo / optimizations? leave bound until another shader is set?\n            shader.unbindShader();\n          };\n\n          p5.RendererGL.prototype._drawStrokeImmediateMode = function() {\n            var gl = this.GL;\n            var shader = this._getImmediateStrokeShader();\n            this._setStrokeUniforms(shader);\n\n            // initialize the stroke shader's 'aPosition' buffer\n            if (shader.attributes.aPosition) {\n              this._bindBuffer(\n                this.immediateMode.lineVertexBuffer,\n                gl.ARRAY_BUFFER,\n                this._flatten(this.immediateMode.lineVertices),\n                Float32Array,\n                gl.STATIC_DRAW\n              );\n\n              shader.enableAttrib(shader.attributes.aPosition, 3);\n            }\n\n            // initialize the stroke shader's 'aDirection' buffer\n            if (shader.attributes.aDirection) {\n              this._bindBuffer(\n                this.immediateMode.lineNormalBuffer,\n                gl.ARRAY_BUFFER,\n                this._flatten(this.immediateMode.lineNormals),\n                Float32Array,\n                gl.STATIC_DRAW\n              );\n\n              shader.enableAttrib(shader.attributes.aDirection, 4);\n            }\n\n            this._applyColorBlend(this.curStrokeColor);\n            gl.drawArrays(gl.TRIANGLES, 0, this.immediateMode.lineVertices.length);\n\n            this._pixelsState._pixelsDirty = true;\n\n            shader.unbindShader();\n          };\n\n          module.exports = p5.RendererGL;\n        },\n        { '../core/constants': 18, '../core/main': 24 }\n      ],\n      74: [\n        function(_dereq_, module, exports) {\n          //Retained Mode. The default mode for rendering 3D primitives\n          //in WEBGL.\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          _dereq_('./p5.RendererGL');\n\n          // a render buffer definition\n          function BufferDef(size, src, dst, attr, map) {\n            this.size = size; // the number of FLOATs in each vertex\n            this.src = src; // the name of the model's source array\n            this.dst = dst; // the name of the geometry's buffer\n            this.attr = attr; // the name of the vertex attribute\n            this.map = map; // optional, a transformation function to apply to src\n          }\n\n          var _flatten = p5.RendererGL.prototype._flatten;\n          var _vToNArray = p5.RendererGL.prototype._vToNArray;\n\n          var strokeBuffers = [\n            new BufferDef(3, 'lineVertices', 'lineVertexBuffer', 'aPosition', _flatten),\n            new BufferDef(4, 'lineNormals', 'lineNormalBuffer', 'aDirection', _flatten)\n          ];\n\n          var fillBuffers = [\n            new BufferDef(3, 'vertices', 'vertexBuffer', 'aPosition', _vToNArray),\n            new BufferDef(3, 'vertexNormals', 'normalBuffer', 'aNormal', _vToNArray),\n            new BufferDef(4, 'vertexColors', 'colorBuffer', 'aMaterialColor'),\n            new BufferDef(3, 'vertexAmbients', 'ambientBuffer', 'aAmbientColor'),\n            //new BufferDef(3, 'vertexSpeculars', 'specularBuffer', 'aSpecularColor'),\n            new BufferDef(2, 'uvs', 'uvBuffer', 'aTexCoord', _flatten)\n          ];\n\n          p5.RendererGL._textBuffers = [\n            new BufferDef(3, 'vertices', 'vertexBuffer', 'aPosition', _vToNArray),\n            new BufferDef(2, 'uvs', 'uvBuffer', 'aTexCoord', _flatten)\n          ];\n\n          var hashCount = 0;\n          /**\n           * _initBufferDefaults\n           * @private\n           * @description initializes buffer defaults. runs each time a new geometry is\n           * registered\n           * @param  {String} gId  key of the geometry object\n           * @returns {Object} a new buffer object\n           */\n          p5.RendererGL.prototype._initBufferDefaults = function(gId) {\n            this._freeBuffers(gId);\n\n            //@TODO remove this limit on hashes in gHash\n            hashCount++;\n            if (hashCount > 1000) {\n              var key = Object.keys(this.gHash)[0];\n              delete this.gHash[key];\n              hashCount--;\n            }\n\n            //create a new entry in our gHash\n            return (this.gHash[gId] = {});\n          };\n\n          p5.RendererGL.prototype._freeBuffers = function(gId) {\n            var buffers = this.gHash[gId];\n            if (!buffers) {\n              return;\n            }\n\n            delete this.gHash[gId];\n            hashCount--;\n\n            var gl = this.GL;\n            if (buffers.indexBuffer) {\n              gl.deleteBuffer(buffers.indexBuffer);\n            }\n\n            function freeBuffers(defs) {\n              for (var i = 0; i < defs.length; i++) {\n                var def = defs[i];\n                if (buffers[def.dst]) {\n                  gl.deleteBuffer(buffers[def.dst]);\n                  buffers[def.dst] = null;\n                }\n              }\n            }\n\n            // free all the buffers\n            freeBuffers(strokeBuffers);\n            freeBuffers(fillBuffers);\n          };\n\n          p5.RendererGL.prototype._prepareBuffers = function(buffers, shader, defs) {\n            var model = buffers.model;\n            var attributes = shader.attributes;\n            var gl = this.GL;\n\n            // loop through each of the buffer definitions\n            for (var i = 0; i < defs.length; i++) {\n              var def = defs[i];\n\n              var attr = attributes[def.attr];\n              if (!attr) continue;\n\n              var buffer = buffers[def.dst];\n\n              // check if the model has the appropriate source array\n              var src = model[def.src];\n              if (src) {\n                // check if we need to create the GL buffer\n                var createBuffer = !buffer;\n                if (createBuffer) {\n                  // create and remember the buffer\n                  buffers[def.dst] = buffer = gl.createBuffer();\n                }\n                // bind the buffer\n                gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n                // check if we need to fill the buffer with data\n                if (createBuffer || model.dirtyFlags[def.src] !== false) {\n                  var map = def.map;\n                  // get the values from the model, possibly transformed\n                  var values = map ? map(src) : src;\n\n                  // fill the buffer with the values\n                  this._bindBuffer(buffer, gl.ARRAY_BUFFER, values);\n\n                  // mark the model's source array as clean\n                  model.dirtyFlags[def.src] = false;\n                }\n                // enable the attribute\n                shader.enableAttrib(attr, def.size);\n              } else {\n                if (buffer) {\n                  // remove the unused buffer\n                  gl.deleteBuffer(buffer);\n                  buffers[def.dst] = null;\n                }\n                // disable the vertex\n                gl.disableVertexAttribArray(attr.index);\n              }\n            }\n          };\n\n          /**\n           * creates a buffers object that holds the WebGL render buffers\n           * for a geometry.\n           * @private\n           * @param  {String} gId    key of the geometry object\n           * @param  {p5.Geometry}  model contains geometry data\n           */\n          p5.RendererGL.prototype.createBuffers = function(gId, model) {\n            var gl = this.GL;\n            //initialize the gl buffers for our geom groups\n            var buffers = this._initBufferDefaults(gId);\n            buffers.model = model;\n\n            var indexBuffer = buffers.indexBuffer;\n\n            if (model.faces.length) {\n              // allocate space for faces\n              if (!indexBuffer) indexBuffer = buffers.indexBuffer = gl.createBuffer();\n              var vals = p5.RendererGL.prototype._flatten(model.faces);\n              this._bindBuffer(indexBuffer, gl.ELEMENT_ARRAY_BUFFER, vals, Uint16Array);\n\n              // the vertex count is based on the number of faces\n              buffers.vertexCount = model.faces.length * 3;\n            } else {\n              // the index buffer is unused, remove it\n              if (indexBuffer) {\n                gl.deleteBuffer(indexBuffer);\n                buffers.indexBuffer = null;\n              }\n              // the vertex count comes directly from the model\n              buffers.vertexCount = model.vertices ? model.vertices.length : 0;\n            }\n\n            buffers.lineVertexCount = model.lineVertices ? model.lineVertices.length : 0;\n\n            return buffers;\n          };\n\n          /**\n           * Draws buffers given a geometry key ID\n           * @private\n           * @param  {String} gId     ID in our geom hash\n           * @chainable\n           */\n          p5.RendererGL.prototype.drawBuffers = function(gId) {\n            var gl = this.GL;\n            var buffers = this.gHash[gId];\n\n            if (this._doStroke && buffers.lineVertexCount > 0) {\n              var strokeShader = this._getRetainedStrokeShader();\n              this._setStrokeUniforms(strokeShader);\n              this._prepareBuffers(buffers, strokeShader, strokeBuffers);\n              this._applyColorBlend(this.curStrokeColor);\n              this._drawArrays(gl.TRIANGLES, gId);\n              strokeShader.unbindShader();\n            }\n\n            if (this._doFill) {\n              var fillShader = this._getRetainedFillShader();\n              this._setFillUniforms(fillShader);\n              this._prepareBuffers(buffers, fillShader, fillBuffers);\n              if (buffers.indexBuffer) {\n                //vertex index buffer\n                this._bindBuffer(buffers.indexBuffer, gl.ELEMENT_ARRAY_BUFFER);\n              }\n              this._applyColorBlend(this.curFillColor);\n              this._drawElements(gl.TRIANGLES, gId);\n              fillShader.unbindShader();\n            }\n            return this;\n          };\n\n          /**\n           * Calls drawBuffers() with a scaled model/view matrix.\n           *\n           * This is used by various 3d primitive methods (in primitives.js, eg. plane,\n           * box, torus, etc...) to allow caching of un-scaled geometries. Those\n           * geometries are generally created with unit-length dimensions, cached as\n           * such, and then scaled appropriately in this method prior to rendering.\n           *\n           * @private\n           * @method drawBuffersScaled\n           * @param {String} gId     ID in our geom hash\n           * @param {Number} scaleX  the amount to scale in the X direction\n           * @param {Number} scaleY  the amount to scale in the Y direction\n           * @param {Number} scaleZ  the amount to scale in the Z direction\n           */\n          p5.RendererGL.prototype.drawBuffersScaled = function(\n            gId,\n            scaleX,\n            scaleY,\n            scaleZ\n          ) {\n            var uMVMatrix = this.uMVMatrix.copy();\n            try {\n              this.uMVMatrix.scale(scaleX, scaleY, scaleZ);\n              this.drawBuffers(gId);\n            } finally {\n              this.uMVMatrix = uMVMatrix;\n            }\n          };\n\n          p5.RendererGL.prototype._drawArrays = function(drawMode, gId) {\n            this.GL.drawArrays(drawMode, 0, this.gHash[gId].lineVertexCount);\n            this._pixelsState._pixelsDirty = true;\n            return this;\n          };\n\n          p5.RendererGL.prototype._drawElements = function(drawMode, gId) {\n            var buffers = this.gHash[gId];\n            var gl = this.GL;\n            // render the fill\n            if (buffers.indexBuffer) {\n              // we're drawing faces\n              gl.drawElements(gl.TRIANGLES, buffers.vertexCount, gl.UNSIGNED_SHORT, 0);\n            } else {\n              // drawing vertices\n              gl.drawArrays(drawMode || gl.TRIANGLES, 0, buffers.vertexCount);\n            }\n            this._pixelsState._pixelsDirty = true;\n          };\n\n          p5.RendererGL.prototype._drawPoints = function(vertices, vertexBuffer) {\n            var gl = this.GL;\n            var pointShader = this._getImmediatePointShader();\n            this._setPointUniforms(pointShader);\n\n            this._bindBuffer(\n              vertexBuffer,\n              gl.ARRAY_BUFFER,\n              this._vToNArray(vertices),\n              Float32Array,\n              gl.STATIC_DRAW\n            );\n\n            pointShader.enableAttrib(pointShader.attributes.aPosition, 3);\n\n            gl.drawArrays(gl.Points, 0, vertices.length);\n\n            pointShader.unbindShader();\n            this._pixelsState._pixelsDirty = true;\n          };\n\n          module.exports = p5.RendererGL;\n        },\n        { '../core/main': 24, './p5.RendererGL': 75 }\n      ],\n      75: [\n        function(_dereq_, module, exports) {\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          var constants = _dereq_('../core/constants');\n          var libtess = _dereq_('libtess');\n          _dereq_('./p5.Shader');\n          _dereq_('./p5.Camera');\n          _dereq_('../core/p5.Renderer');\n          _dereq_('./p5.Matrix');\n\n          var lightingShader =\n            'precision mediump float;\\n\\nuniform mat4 uViewMatrix;\\n\\nuniform bool uUseLighting;\\n\\nuniform int uAmbientLightCount;\\nuniform vec3 uAmbientColor[8];\\n\\nuniform int uDirectionalLightCount;\\nuniform vec3 uLightingDirection[8];\\nuniform vec3 uDirectionalColor[8];\\n\\nuniform int uPointLightCount;\\nuniform vec3 uPointLightLocation[8];\\nuniform vec3 uPointLightColor[8];\\n\\nuniform bool uSpecular;\\nuniform float uShininess;\\n\\nuniform float uConstantAttenuation;\\nuniform float uLinearAttenuation;\\nuniform float uQuadraticAttenuation;\\n\\nconst float specularFactor = 2.0;\\nconst float diffuseFactor = 0.73;\\n\\nstruct LightResult {\\n  float specular;\\n  float diffuse;\\n};\\n\\nfloat _phongSpecular(\\n  vec3 lightDirection,\\n  vec3 viewDirection,\\n  vec3 surfaceNormal,\\n  float shininess) {\\n\\n  vec3 R = reflect(lightDirection, surfaceNormal);\\n  return pow(max(0.0, dot(R, viewDirection)), shininess);\\n}\\n\\nfloat _lambertDiffuse(vec3 lightDirection, vec3 surfaceNormal) {\\n  return max(0.0, dot(-lightDirection, surfaceNormal));\\n}\\n\\nLightResult _light(vec3 viewDirection, vec3 normal, vec3 lightVector) {\\n\\n  vec3 lightDir = normalize(lightVector);\\n\\n  //compute our diffuse & specular terms\\n  LightResult lr;\\n  if (uSpecular)\\n    lr.specular = _phongSpecular(lightDir, viewDirection, normal, uShininess);\\n  lr.diffuse = _lambertDiffuse(lightDir, normal);\\n  return lr;\\n}\\n\\nvoid totalLight(\\n  vec3 modelPosition,\\n  vec3 normal,\\n  out vec3 totalDiffuse,\\n  out vec3 totalSpecular\\n) {\\n\\n  totalSpecular = vec3(0.0);\\n\\n  if (!uUseLighting) {\\n    totalDiffuse = vec3(1.0);\\n    return;\\n  }\\n\\n  totalDiffuse = vec3(0.0);\\n\\n  vec3 viewDirection = normalize(-modelPosition);\\n\\n  for (int j = 0; j < 8; j++) {\\n    if (j < uDirectionalLightCount) {\\n      vec3 lightVector = (uViewMatrix * vec4(uLightingDirection[j], 0.0)).xyz;\\n      vec3 lightColor = uDirectionalColor[j];\\n      LightResult result = _light(viewDirection, normal, lightVector);\\n      totalDiffuse += result.diffuse * lightColor;\\n      totalSpecular += result.specular * lightColor;\\n    }\\n\\n    if (j < uPointLightCount) {\\n      vec3 lightPosition = (uViewMatrix * vec4(uPointLightLocation[j], 1.0)).xyz;\\n      vec3 lightVector = modelPosition - lightPosition;\\n    \\n      //calculate attenuation\\n      float lightDistance = length(lightVector);\\n      float lightFalloff = 1.0 / (uConstantAttenuation + lightDistance * uLinearAttenuation + (lightDistance * lightDistance) * uQuadraticAttenuation);\\n      vec3 lightColor = lightFalloff * uPointLightColor[j];\\n\\n      LightResult result = _light(viewDirection, normal, lightVector);\\n      totalDiffuse += result.diffuse * lightColor;\\n      totalSpecular += result.specular * lightColor;\\n    }\\n  }\\n\\n  totalDiffuse *= diffuseFactor;\\n  totalSpecular *= specularFactor;\\n}\\n';\n\n          var defaultShaders = {\n            immediateVert:\n              'attribute vec3 aPosition;\\nattribute vec4 aVertexColor;\\n\\nuniform mat4 uModelViewMatrix;\\nuniform mat4 uProjectionMatrix;\\nuniform float uResolution;\\nuniform float uPointSize;\\n\\nvarying vec4 vColor;\\nvoid main(void) {\\n  vec4 positionVec4 = vec4(aPosition, 1.0);\\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\\n  vColor = aVertexColor;\\n  gl_PointSize = uPointSize;\\n}\\n',\n            vertexColorVert:\n              'attribute vec3 aPosition;\\nattribute vec4 aVertexColor;\\n\\nuniform mat4 uModelViewMatrix;\\nuniform mat4 uProjectionMatrix;\\n\\nvarying vec4 vColor;\\n\\nvoid main(void) {\\n  vec4 positionVec4 = vec4(aPosition, 1.0);\\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\\n  vColor = aVertexColor;\\n}\\n',\n            vertexColorFrag:\n              'precision mediump float;\\nvarying vec4 vColor;\\nvoid main(void) {\\n  gl_FragColor = vColor;\\n}',\n            normalVert:\n              'attribute vec3 aPosition;\\nattribute vec3 aNormal;\\nattribute vec2 aTexCoord;\\n\\nuniform mat4 uModelViewMatrix;\\nuniform mat4 uProjectionMatrix;\\nuniform mat3 uNormalMatrix;\\n\\nvarying vec3 vVertexNormal;\\nvarying highp vec2 vVertTexCoord;\\n\\nvoid main(void) {\\n  vec4 positionVec4 = vec4(aPosition, 1.0);\\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\\n  vVertexNormal = normalize(vec3( uNormalMatrix * aNormal ));\\n  vVertTexCoord = aTexCoord;\\n}\\n',\n            normalFrag:\n              'precision mediump float;\\nvarying vec3 vVertexNormal;\\nvoid main(void) {\\n  gl_FragColor = vec4(vVertexNormal, 1.0);\\n}',\n            basicFrag:\n              'precision mediump float;\\nuniform vec4 uMaterialColor;\\nvoid main(void) {\\n  gl_FragColor = uMaterialColor;\\n}',\n            lightVert:\n              lightingShader +\n              '// include lighting.glgl\\n\\nattribute vec3 aPosition;\\nattribute vec3 aNormal;\\nattribute vec2 aTexCoord;\\n\\nuniform mat4 uModelViewMatrix;\\nuniform mat4 uProjectionMatrix;\\nuniform mat3 uNormalMatrix;\\n\\nvarying highp vec2 vVertTexCoord;\\nvarying vec3 vDiffuseColor;\\nvarying vec3 vSpecularColor;\\n\\nvoid main(void) {\\n\\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\\n  gl_Position = uProjectionMatrix * viewModelPosition;\\n\\n  vec3 vertexNormal = normalize(uNormalMatrix * aNormal);\\n  vVertTexCoord = aTexCoord;\\n\\n  totalLight(viewModelPosition.xyz, vertexNormal, vDiffuseColor, vSpecularColor);\\n\\n  for (int i = 0; i < 8; i++) {\\n    if (i < uAmbientLightCount) {\\n      vDiffuseColor += uAmbientColor[i];\\n    }\\n  }\\n}\\n',\n            lightTextureFrag:\n              'precision mediump float;\\n\\nuniform vec4 uMaterialColor;\\nuniform vec4 uTint;\\nuniform sampler2D uSampler;\\nuniform bool isTexture;\\n\\nvarying highp vec2 vVertTexCoord;\\nvarying vec3 vDiffuseColor;\\nvarying vec3 vSpecularColor;\\n\\nvoid main(void) {\\n  gl_FragColor = isTexture ? texture2D(uSampler, vVertTexCoord) * (uTint / vec4(255, 255, 255, 255)) : uMaterialColor;\\n  gl_FragColor.rgb = gl_FragColor.rgb * vDiffuseColor + vSpecularColor;\\n}',\n            phongVert:\n              'precision mediump float;\\nprecision mediump int;\\n\\nattribute vec3 aPosition;\\nattribute vec3 aNormal;\\nattribute vec2 aTexCoord;\\n\\nuniform vec3 uAmbientColor[8];\\n\\nuniform mat4 uModelViewMatrix;\\nuniform mat4 uProjectionMatrix;\\nuniform mat3 uNormalMatrix;\\nuniform int uAmbientLightCount;\\n\\nvarying vec3 vNormal;\\nvarying vec2 vTexCoord;\\nvarying vec3 vViewPosition;\\nvarying vec3 vAmbientColor;\\n\\nvoid main(void) {\\n\\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\\n\\n  // Pass varyings to fragment shader\\n  vViewPosition = viewModelPosition.xyz;\\n  gl_Position = uProjectionMatrix * viewModelPosition;  \\n\\n  vNormal = uNormalMatrix * aNormal;\\n  vTexCoord = aTexCoord;\\n\\n  // TODO: this should be a uniform\\n  vAmbientColor = vec3(0.0);\\n  for (int i = 0; i < 8; i++) {\\n    if (i < uAmbientLightCount) {\\n      vAmbientColor += uAmbientColor[i];\\n    }\\n  }\\n}\\n',\n            phongFrag:\n              lightingShader +\n              '// include lighting.glgl\\n\\nuniform vec4 uMaterialColor;\\nuniform sampler2D uSampler;\\nuniform bool isTexture;\\n\\nvarying vec3 vNormal;\\nvarying vec2 vTexCoord;\\nvarying vec3 vViewPosition;\\nvarying vec3 vAmbientColor;\\n\\nvoid main(void) {\\n\\n  vec3 diffuse;\\n  vec3 specular;\\n  totalLight(vViewPosition, normalize(vNormal), diffuse, specular);\\n\\n  gl_FragColor = isTexture ? texture2D(uSampler, vTexCoord) : uMaterialColor;\\n  gl_FragColor.rgb = gl_FragColor.rgb * (diffuse + vAmbientColor) + specular;\\n}',\n            fontVert:\n              \"precision mediump float;\\n\\nattribute vec3 aPosition;\\nattribute vec2 aTexCoord;\\nuniform mat4 uModelViewMatrix;\\nuniform mat4 uProjectionMatrix;\\n\\nuniform vec4 uGlyphRect;\\nuniform float uGlyphOffset;\\n\\nvarying vec2 vTexCoord;\\nvarying float w;\\n\\nvoid main() {\\n  vec4 positionVec4 = vec4(aPosition, 1.0);\\n\\n  // scale by the size of the glyph's rectangle\\n  positionVec4.xy *= uGlyphRect.zw - uGlyphRect.xy;\\n\\n  // move to the corner of the glyph\\n  positionVec4.xy += uGlyphRect.xy;\\n\\n  // move to the letter's line offset\\n  positionVec4.x += uGlyphOffset;\\n  \\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\\n  vTexCoord = aTexCoord;\\n  w = gl_Position.w;\\n}\\n\",\n            fontFrag:\n              \"#extension GL_OES_standard_derivatives : enable\\nprecision mediump float;\\n\\n#if 0\\n  // simulate integer math using floats\\n\\t#define int float\\n\\t#define ivec2 vec2\\n\\t#define INT(x) float(x)\\n\\n\\tint ifloor(float v) { return floor(v); }\\n\\tivec2 ifloor(vec2 v) { return floor(v); }\\n\\n#else\\n  // use native integer math\\n\\tprecision highp int;\\n\\t#define INT(x) x\\n\\n\\tint ifloor(float v) { return int(v); }\\n\\tint ifloor(int v) { return v; }\\n\\tivec2 ifloor(vec2 v) { return ivec2(v); }\\n\\n#endif\\n\\nuniform sampler2D uSamplerStrokes;\\nuniform sampler2D uSamplerRowStrokes;\\nuniform sampler2D uSamplerRows;\\nuniform sampler2D uSamplerColStrokes;\\nuniform sampler2D uSamplerCols;\\n\\nuniform ivec2 uStrokeImageSize;\\nuniform ivec2 uCellsImageSize;\\nuniform ivec2 uGridImageSize;\\n\\nuniform ivec2 uGridOffset;\\nuniform ivec2 uGridSize;\\nuniform vec4 uMaterialColor;\\n\\nvarying vec2 vTexCoord;\\n\\n// some helper functions\\nint round(float v) { return ifloor(v + 0.5); }\\nivec2 round(vec2 v) { return ifloor(v + 0.5); }\\nfloat saturate(float v) { return clamp(v, 0.0, 1.0); }\\nvec2 saturate(vec2 v) { return clamp(v, 0.0, 1.0); }\\n\\nint mul(float v1, int v2) {\\n  return ifloor(v1 * float(v2));\\n}\\n\\nivec2 mul(vec2 v1, ivec2 v2) {\\n  return ifloor(v1 * vec2(v2) + 0.5);\\n}\\n\\n// unpack a 16-bit integer from a float vec2\\nint getInt16(vec2 v) {\\n  ivec2 iv = round(v * 255.0);\\n  return iv.x * INT(128) + iv.y;\\n}\\n\\nvec2 pixelScale;\\nvec2 coverage = vec2(0.0);\\nvec2 weight = vec2(0.5);\\nconst float minDistance = 1.0/8192.0;\\nconst float hardness = 1.05; // amount of antialias\\n\\n// the maximum number of curves in a glyph\\nconst int N = INT(250);\\n\\n// retrieves an indexed pixel from a sampler\\nvec4 getTexel(sampler2D sampler, int pos, ivec2 size) {\\n  int width = size.x;\\n  int y = ifloor(pos / width);\\n  int x = pos - y * width;  // pos % width\\n\\n  return texture2D(sampler, (vec2(x, y) + 0.5) / vec2(size));\\n}\\n\\nvoid calulateCrossings(vec2 p0, vec2 p1, vec2 p2, out vec2 C1, out vec2 C2) {\\n\\n  // get the coefficients of the quadratic in t\\n  vec2 a = p0 - p1 * 2.0 + p2;\\n  vec2 b = p0 - p1;\\n  vec2 c = p0 - vTexCoord;\\n\\n  // found out which values of 't' it crosses the axes\\n  vec2 surd = sqrt(max(vec2(0.0), b * b - a * c));\\n  vec2 t1 = ((b - surd) / a).yx;\\n  vec2 t2 = ((b + surd) / a).yx;\\n\\n  // approximate straight lines to avoid rounding errors\\n  if (abs(a.y) < 0.001)\\n    t1.x = t2.x = c.y / (2.0 * b.y);\\n\\n  if (abs(a.x) < 0.001)\\n    t1.y = t2.y = c.x / (2.0 * b.x);\\n\\n  // plug into quadratic formula to find the corrdinates of the crossings\\n  C1 = ((a * t1 - b * 2.0) * t1 + c) * pixelScale;\\n  C2 = ((a * t2 - b * 2.0) * t2 + c) * pixelScale;\\n}\\n\\nvoid coverageX(vec2 p0, vec2 p1, vec2 p2) {\\n\\n  vec2 C1, C2;\\n  calulateCrossings(p0, p1, p2, C1, C2);\\n\\n  // determine on which side of the x-axis the points lie\\n  bool y0 = p0.y > vTexCoord.y;\\n  bool y1 = p1.y > vTexCoord.y;\\n  bool y2 = p2.y > vTexCoord.y;\\n\\n  // could web be under the curve (after t1)?\\n  if (y1 ? !y2 : y0) {\\n    // add the coverage for t1\\n    coverage.x += saturate(C1.x + 0.5);\\n    // calculate the anti-aliasing for t1\\n    weight.x = min(weight.x, abs(C1.x));\\n  }\\n\\n  // are we outside the curve (after t2)?\\n  if (y1 ? !y0 : y2) {\\n    // subtract the coverage for t2\\n    coverage.x -= saturate(C2.x + 0.5);\\n    // calculate the anti-aliasing for t2\\n    weight.x = min(weight.x, abs(C2.x));\\n  }\\n}\\n\\n// this is essentially the same as coverageX, but with the axes swapped\\nvoid coverageY(vec2 p0, vec2 p1, vec2 p2) {\\n\\n  vec2 C1, C2;\\n  calulateCrossings(p0, p1, p2, C1, C2);\\n\\n  bool x0 = p0.x > vTexCoord.x;\\n  bool x1 = p1.x > vTexCoord.x;\\n  bool x2 = p2.x > vTexCoord.x;\\n\\n  if (x1 ? !x2 : x0) {\\n    coverage.y -= saturate(C1.y + 0.5);\\n    weight.y = min(weight.y, abs(C1.y));\\n  }\\n\\n  if (x1 ? !x0 : x2) {\\n    coverage.y += saturate(C2.y + 0.5);\\n    weight.y = min(weight.y, abs(C2.y));\\n  }\\n}\\n\\nvoid main() {\\n\\n  // calculate the pixel scale based on screen-coordinates\\n  pixelScale = hardness / fwidth(vTexCoord);\\n\\n  // which grid cell is this pixel in?\\n  ivec2 gridCoord = ifloor(vTexCoord * vec2(uGridSize));\\n\\n  // intersect curves in this row\\n  {\\n    // the index into the row info bitmap\\n    int rowIndex = gridCoord.y + uGridOffset.y;\\n    // fetch the info texel\\n    vec4 rowInfo = getTexel(uSamplerRows, rowIndex, uGridImageSize);\\n    // unpack the rowInfo\\n    int rowStrokeIndex = getInt16(rowInfo.xy);\\n    int rowStrokeCount = getInt16(rowInfo.zw);\\n\\n    for (int iRowStroke = INT(0); iRowStroke < N; iRowStroke++) {\\n      if (iRowStroke >= rowStrokeCount)\\n        break;\\n\\n      // each stroke is made up of 3 points: the start and control point\\n      // and the start of the next curve.\\n      // fetch the indices of this pair of strokes:\\n      vec4 strokeIndices = getTexel(uSamplerRowStrokes, rowStrokeIndex++, uCellsImageSize);\\n\\n      // unpack the stroke index\\n      int strokePos = getInt16(strokeIndices.xy);\\n\\n      // fetch the two strokes\\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\\n\\n      // calculate the coverage\\n      coverageX(stroke0.xy, stroke0.zw, stroke1.xy);\\n    }\\n  }\\n\\n  // intersect curves in this column\\n  {\\n    int colIndex = gridCoord.x + uGridOffset.x;\\n    vec4 colInfo = getTexel(uSamplerCols, colIndex, uGridImageSize);\\n    int colStrokeIndex = getInt16(colInfo.xy);\\n    int colStrokeCount = getInt16(colInfo.zw);\\n    \\n    for (int iColStroke = INT(0); iColStroke < N; iColStroke++) {\\n      if (iColStroke >= colStrokeCount)\\n        break;\\n\\n      vec4 strokeIndices = getTexel(uSamplerColStrokes, colStrokeIndex++, uCellsImageSize);\\n\\n      int strokePos = getInt16(strokeIndices.xy);\\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\\n      coverageY(stroke0.xy, stroke0.zw, stroke1.xy);\\n    }\\n  }\\n\\n  weight = saturate(1.0 - weight * 2.0);\\n  float distance = max(weight.x + weight.y, minDistance); // manhattan approx.\\n  float antialias = abs(dot(coverage, weight) / distance);\\n  float cover = min(abs(coverage.x), abs(coverage.y));\\n  gl_FragColor = uMaterialColor;\\n  gl_FragColor.a *= saturate(max(antialias, cover));\\n}\",\n            lineVert:\n              \"/*\\n  Part of the Processing project - http://processing.org\\n  Copyright (c) 2012-15 The Processing Foundation\\n  Copyright (c) 2004-12 Ben Fry and Casey Reas\\n  Copyright (c) 2001-04 Massachusetts Institute of Technology\\n  This library is free software; you can redistribute it and/or\\n  modify it under the terms of the GNU Lesser General Public\\n  License as published by the Free Software Foundation, version 2.1.\\n  This library is distributed in the hope that it will be useful,\\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\\n  Lesser General Public License for more details.\\n  You should have received a copy of the GNU Lesser General\\n  Public License along with this library; if not, write to the\\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\\n  Boston, MA  02111-1307  USA\\n*/\\n\\n#define PROCESSING_LINE_SHADER\\n\\nuniform mat4 uModelViewMatrix;\\nuniform mat4 uProjectionMatrix;\\nuniform float uStrokeWeight;\\n\\nuniform vec4 uViewport;\\n\\nattribute vec4 aPosition;\\nattribute vec4 aDirection;\\n  \\nvoid main() {\\n  // using a scale <1 moves the lines towards the camera\\n  // in order to prevent popping effects due to half of\\n  // the line disappearing behind the geometry faces.\\n  vec3 scale = vec3(0.9995);\\n\\n  vec4 posp = uModelViewMatrix * aPosition;\\n  vec4 posq = uModelViewMatrix * (aPosition + vec4(aDirection.xyz, 0));\\n\\n  // Moving vertices slightly toward the camera\\n  // to avoid depth-fighting with the fill triangles.\\n  // Discussed here:\\n  // http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&Number=252848  \\n  posp.xyz = posp.xyz * scale;\\n  posq.xyz = posq.xyz * scale;\\n\\n  vec4 p = uProjectionMatrix * posp;\\n  vec4 q = uProjectionMatrix * posq;\\n\\n  // formula to convert from clip space (range -1..1) to screen space (range 0..[width or height])\\n  // screen_p = (p.xy/p.w + <1,1>) * 0.5 * uViewport.zw\\n\\n  // prevent division by W by transforming the tangent formula (div by 0 causes\\n  // the line to disappear, see https://github.com/processing/processing/issues/5183)\\n  // t = screen_q - screen_p\\n  //\\n  // tangent is normalized and we don't care which aDirection it points to (+-)\\n  // t = +- normalize( screen_q - screen_p )\\n  // t = +- normalize( (q.xy/q.w+<1,1>)*0.5*uViewport.zw - (p.xy/p.w+<1,1>)*0.5*uViewport.zw )\\n  //\\n  // extract common factor, <1,1> - <1,1> cancels out\\n  // t = +- normalize( (q.xy/q.w - p.xy/p.w) * 0.5 * uViewport.zw )\\n  //\\n  // convert to common divisor\\n  // t = +- normalize( ((q.xy*p.w - p.xy*q.w) / (p.w*q.w)) * 0.5 * uViewport.zw )\\n  //\\n  // remove the common scalar divisor/factor, not needed due to normalize and +-\\n  // (keep uViewport - can't remove because it has different components for x and y\\n  //  and corrects for aspect ratio, see https://github.com/processing/processing/issues/5181)\\n  // t = +- normalize( (q.xy*p.w - p.xy*q.w) * uViewport.zw )\\n\\n  vec2 tangent = normalize((q.xy*p.w - p.xy*q.w) * uViewport.zw);\\n\\n  // flip tangent to normal (it's already normalized)\\n  vec2 normal = vec2(-tangent.y, tangent.x);\\n\\n  float thickness = aDirection.w * uStrokeWeight;\\n  vec2 offset = normal * thickness / 2.0;\\n\\n  // Perspective ---\\n  // convert from world to clip by multiplying with projection scaling factor\\n  // to get the right thickness (see https://github.com/processing/processing/issues/5182)\\n  // invert Y, projections in Processing invert Y\\n  vec2 perspScale = (uProjectionMatrix * vec4(1, -1, 0, 0)).xy;\\n\\n  // No Perspective ---\\n  // multiply by W (to cancel out division by W later in the pipeline) and\\n  // convert from screen to clip (derived from clip to screen above)\\n  vec2 noPerspScale = p.w / (0.5 * uViewport.zw);\\n\\n  //gl_Position.xy = p.xy + offset.xy * mix(noPerspScale, perspScale, float(perspective > 0));\\n  gl_Position.xy = p.xy + offset.xy * perspScale;\\n  gl_Position.zw = p.zw;\\n}\\n\",\n            lineFrag:\n              'precision mediump float;\\nprecision mediump int;\\n\\nuniform vec4 uMaterialColor;\\n\\nvoid main() {\\n  gl_FragColor = uMaterialColor;\\n}',\n            pointVert:\n              'attribute vec3 aPosition;\\nuniform float uPointSize;\\nvarying float vStrokeWeight;\\nuniform mat4 uModelViewMatrix;\\nuniform mat4 uProjectionMatrix;\\nvoid main() {\\n\\tvec4 positionVec4 =  vec4(aPosition, 1.0);\\n\\tgl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\\n\\tgl_PointSize = uPointSize;\\n\\tvStrokeWeight = uPointSize;\\n}',\n            pointFrag:\n              'precision mediump float;\\nprecision mediump int;\\nuniform vec4 uMaterialColor;\\nvarying float vStrokeWeight;\\n\\nvoid main(){\\n\\tfloat mask = 0.0;\\n\\n\\t// make a circular mask using the gl_PointCoord (goes from 0 - 1 on a point)\\n    // might be able to get a nicer edge on big strokeweights with smoothstep but slightly less performant\\n\\n\\tmask = step(0.98, length(gl_PointCoord * 2.0 - 1.0));\\n\\n\\t// if strokeWeight is 1 or less lets just draw a square\\n\\t// this prevents weird artifacting from carving circles when our points are really small\\n\\t// if strokeWeight is larger than 1, we just use it as is\\n\\n\\tmask = mix(0.0, mask, clamp(floor(vStrokeWeight - 0.5),0.0,1.0));\\n\\n\\t// throw away the borders of the mask\\n    // otherwise we get weird alpha blending issues\\n\\n\\tif(mask > 0.98){\\n      discard;\\n  \\t}\\n\\n  \\tgl_FragColor = vec4(uMaterialColor.rgb * (1.0 - mask), uMaterialColor.a) ;\\n}'\n          };\n\n          /**\n           * 3D graphics class\n           * @private\n           * @class p5.RendererGL\n           * @constructor\n           * @extends p5.Renderer\n           * @todo extend class to include public method for offscreen\n           * rendering (FBO).\n           *\n           */\n          p5.RendererGL = function(elt, pInst, isMainCanvas, attr) {\n            p5.Renderer.call(this, elt, pInst, isMainCanvas);\n            this._setAttributeDefaults(pInst);\n            this._initContext();\n            this.isP3D = true; //lets us know we're in 3d mode\n            this.GL = this.drawingContext;\n\n            // lights\n            this._enableLighting = false;\n\n            this.ambientLightColors = [];\n            this.directionalLightDirections = [];\n            this.directionalLightColors = [];\n\n            this.pointLightPositions = [];\n            this.pointLightColors = [];\n\n            this.drawMode = constants.FILL;\n            this.curFillColor = [1, 1, 1, 1];\n            this.curStrokeColor = [0, 0, 0, 1];\n            this.curBlendMode = constants.BLEND;\n            this.blendExt = this.GL.getExtension('EXT_blend_minmax');\n\n            this._useSpecularMaterial = false;\n            this._useNormalMaterial = false;\n            this._useShininess = 1;\n\n            this._tint = [255, 255, 255, 255];\n\n            // lightFalloff variables\n            this.constantAttenuation = 1;\n            this.linearAttenuation = 0;\n            this.quadraticAttenuation = 0;\n\n            /**\n             * model view, projection, & normal\n             * matrices\n             */\n            this.uMVMatrix = new p5.Matrix();\n            this.uPMatrix = new p5.Matrix();\n            this.uNMatrix = new p5.Matrix('mat3');\n\n            // Camera\n            this._curCamera = new p5.Camera(this);\n            this._curCamera._computeCameraDefaultSettings();\n            this._curCamera._setDefaultCamera();\n\n            //Geometry & Material hashes\n            this.gHash = {};\n\n            this._defaultLightShader = undefined;\n            this._defaultImmediateModeShader = undefined;\n            this._defaultNormalShader = undefined;\n            this._defaultColorShader = undefined;\n            this._defaultPointShader = undefined;\n\n            this._pointVertexBuffer = this.GL.createBuffer();\n\n            this.userFillShader = undefined;\n            this.userStrokeShader = undefined;\n            this.userPointShader = undefined;\n\n            //Imediate Mode\n            //default drawing is done in Retained Mode\n            this.isImmediateDrawing = false;\n            this.immediateMode = {};\n\n            this.pointSize = 5.0; //default point size\n            this.curStrokeWeight = 1;\n\n            // array of textures created in this gl context via this.getTexture(src)\n            this.textures = [];\n\n            this.textureMode = constants.IMAGE;\n            // default wrap settings\n            this.textureWrapX = constants.CLAMP;\n            this.textureWrapY = constants.CLAMP;\n            this._tex = null;\n            this._curveTightness = 6;\n\n            // lookUpTable for coefficients needed to be calculated for bezierVertex, same are used for curveVertex\n            this._lookUpTableBezier = [];\n            // lookUpTable for coefficients needed to be calculated for quadraticVertex\n            this._lookUpTableQuadratic = [];\n\n            // current curveDetail in the Bezier lookUpTable\n            this._lutBezierDetail = 0;\n            // current curveDetail in the Quadratic lookUpTable\n            this._lutQuadraticDetail = 0;\n\n            this._tessy = this._initTessy();\n\n            this.fontInfos = {};\n\n            return this;\n          };\n\n          p5.RendererGL.prototype = Object.create(p5.Renderer.prototype);\n\n          //////////////////////////////////////////////\n          // Setting\n          //////////////////////////////////////////////\n\n          p5.RendererGL.prototype._setAttributeDefaults = function(pInst) {\n            var defaults = {\n              alpha: true,\n              depth: true,\n              stencil: true,\n              antialias: false,\n              premultipliedAlpha: false,\n              preserveDrawingBuffer: true,\n              perPixelLighting: false\n            };\n\n            if (pInst._glAttributes === null) {\n              pInst._glAttributes = defaults;\n            } else {\n              pInst._glAttributes = Object.assign(defaults, pInst._glAttributes);\n            }\n            return;\n          };\n\n          p5.RendererGL.prototype._initContext = function() {\n            try {\n              this.drawingContext =\n                this.canvas.getContext('webgl', this._pInst._glAttributes) ||\n                this.canvas.getContext('experimental-webgl', this._pInst._glAttributes);\n              if (this.drawingContext === null) {\n                throw new Error('Error creating webgl context');\n              } else {\n                var gl = this.drawingContext;\n                gl.enable(gl.DEPTH_TEST);\n                gl.depthFunc(gl.LEQUAL);\n                gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n                this._viewport = this.drawingContext.getParameter(\n                  this.drawingContext.VIEWPORT\n                );\n              }\n            } catch (er) {\n              throw er;\n            }\n          };\n\n          //This is helper function to reset the context anytime the attributes\n          //are changed with setAttributes()\n\n          p5.RendererGL.prototype._resetContext = function(options, callback) {\n            var w = this.width;\n            var h = this.height;\n            var defaultId = this.canvas.id;\n            var isPGraphics = this._pInst instanceof p5.Graphics;\n\n            if (isPGraphics) {\n              var pg = this._pInst;\n              pg.canvas.parentNode.removeChild(pg.canvas);\n              pg.canvas = document.createElement('canvas');\n              var node = pg._pInst._userNode || document.body;\n              node.appendChild(pg.canvas);\n              p5.Element.call(pg, pg.canvas, pg._pInst);\n              pg.width = w;\n              pg.height = h;\n            } else {\n              var c = this.canvas;\n              if (c) {\n                c.parentNode.removeChild(c);\n              }\n              c = document.createElement('canvas');\n              c.id = defaultId;\n              if (this._pInst._userNode) {\n                this._pInst._userNode.appendChild(c);\n              } else {\n                document.body.appendChild(c);\n              }\n              this._pInst.canvas = c;\n            }\n\n            var renderer = new p5.RendererGL(this._pInst.canvas, this._pInst, !isPGraphics);\n\n            this._pInst._setProperty('_renderer', renderer);\n            renderer.resize(w, h);\n            renderer._applyDefaults();\n\n            if (!isPGraphics) {\n              this._pInst._elements.push(renderer);\n            }\n\n            if (typeof callback === 'function') {\n              //setTimeout with 0 forces the task to the back of the queue, this ensures that\n              //we finish switching out the renderer\n              setTimeout(function() {\n                callback.apply(window._renderer, options);\n              }, 0);\n            }\n          };\n          /**\n           * @module Rendering\n           * @submodule Rendering\n           * @for p5\n           */\n          /**\n           * Set attributes for the WebGL Drawing context.\n           * This is a way of adjusting how the WebGL\n           * renderer works to fine-tune the display and performance.\n           * <br><br>\n           * Note that this will reinitialize the drawing context\n           * if called after the WebGL canvas is made.\n           * <br><br>\n           * If an object is passed as the parameter, all attributes\n           * not declared in the object will be set to defaults.\n           * <br><br>\n           * The available attributes are:\n           * <br>\n           * alpha - indicates if the canvas contains an alpha buffer\n           * default is true\n           * <br><br>\n           * depth - indicates whether the drawing buffer has a depth buffer\n           * of at least 16 bits - default is true\n           * <br><br>\n           * stencil - indicates whether the drawing buffer has a stencil buffer\n           * of at least 8 bits\n           * <br><br>\n           * antialias - indicates whether or not to perform anti-aliasing\n           * default is false\n           * <br><br>\n           * premultipliedAlpha - indicates that the page compositor will assume\n           * the drawing buffer contains colors with pre-multiplied alpha\n           * default is false\n           * <br><br>\n           * preserveDrawingBuffer - if true the buffers will not be cleared and\n           * and will preserve their values until cleared or overwritten by author\n           * (note that p5 clears automatically on draw loop)\n           * default is true\n           * <br><br>\n           * perPixelLighting - if true, per-pixel lighting will be used in the\n           * lighting shader.\n           * default is false\n           * <br><br>\n           * @method setAttributes\n           * @for p5\n           * @param  {String}  key Name of attribute\n           * @param  {Boolean}        value New value of named attribute\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(255);\n           *   push();\n           *   rotateZ(frameCount * 0.02);\n           *   rotateX(frameCount * 0.02);\n           *   rotateY(frameCount * 0.02);\n           *   fill(0, 0, 0);\n           *   box(50);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           * <br>\n           * Now with the antialias attribute set to true.\n           * <br>\n           * <div>\n           * <code>\n           * function setup() {\n           *   setAttributes('antialias', true);\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(255);\n           *   push();\n           *   rotateZ(frameCount * 0.02);\n           *   rotateX(frameCount * 0.02);\n           *   rotateY(frameCount * 0.02);\n           *   fill(0, 0, 0);\n           *   box(50);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // press the mouse button to enable perPixelLighting\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   noStroke();\n           *   fill(255);\n           * }\n           *\n           * var lights = [\n           *   { c: '#f00', t: 1.12, p: 1.91, r: 0.2 },\n           *   { c: '#0f0', t: 1.21, p: 1.31, r: 0.2 },\n           *   { c: '#00f', t: 1.37, p: 1.57, r: 0.2 },\n           *   { c: '#ff0', t: 1.12, p: 1.91, r: 0.7 },\n           *   { c: '#0ff', t: 1.21, p: 1.31, r: 0.7 },\n           *   { c: '#f0f', t: 1.37, p: 1.57, r: 0.7 }\n           * ];\n           *\n           * function draw() {\n           *   var t = millis() / 1000 + 1000;\n           *   background(0);\n           *   directionalLight(color('#222'), 1, 1, 1);\n           *\n           *   for (var i = 0; i < lights.length; i++) {\n           *     var light = lights[i];\n           *     pointLight(\n           *       color(light.c),\n           *       p5.Vector.fromAngles(t * light.t, t * light.p, width * light.r)\n           *     );\n           *   }\n           *\n           *   specularMaterial(255);\n           *   sphere(width * 0.1);\n           *\n           *   rotateX(t * 0.77);\n           *   rotateY(t * 0.83);\n           *   rotateZ(t * 0.91);\n           *   torus(width * 0.3, width * 0.07, 24, 10);\n           * }\n           *\n           * function mousePressed() {\n           *   setAttributes('perPixelLighting', true);\n           *   noStroke();\n           *   fill(255);\n           * }\n           * function mouseReleased() {\n           *   setAttributes('perPixelLighting', false);\n           *   noStroke();\n           *   fill(255);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt a rotating cube with smoother edges\n           */\n          /**\n           * @method setAttributes\n           * @for p5\n           * @param  {Object}  obj object with key-value pairs\n           */\n\n          p5.prototype.setAttributes = function(key, value) {\n            if (typeof this._glAttributes === 'undefined') {\n              console.log(\n                'You are trying to use setAttributes on a p5.Graphics object ' +\n                  'that does not use a WEBGL renderer.'\n              );\n\n              return;\n            }\n            var unchanged = true;\n            if (typeof value !== 'undefined') {\n              //first time modifying the attributes\n              if (this._glAttributes === null) {\n                this._glAttributes = {};\n              }\n              if (this._glAttributes[key] !== value) {\n                //changing value of previously altered attribute\n                this._glAttributes[key] = value;\n                unchanged = false;\n              }\n              //setting all attributes with some change\n            } else if (key instanceof Object) {\n              if (this._glAttributes !== key) {\n                this._glAttributes = key;\n                unchanged = false;\n              }\n            }\n            //@todo_FES\n            if (!this._renderer.isP3D || unchanged) {\n              return;\n            }\n\n            if (!this._setupDone) {\n              for (var x in this._renderer.gHash) {\n                if (this._renderer.gHash.hasOwnProperty(x)) {\n                  console.error(\n                    'Sorry, Could not set the attributes, you need to call setAttributes() ' +\n                      'before calling the other drawing methods in setup()'\n                  );\n\n                  return;\n                }\n              }\n            }\n\n            this.push();\n            this._renderer._resetContext();\n            this.pop();\n\n            if (this._renderer._curCamera) {\n              this._renderer._curCamera._renderer = this._renderer;\n            }\n          };\n\n          /**\n           * @class p5.RendererGL\n           */\n\n          p5.RendererGL.prototype._update = function() {\n            // reset model view and apply initial camera transform\n            // (containing only look at info; no projection).\n            this.uMVMatrix.set(\n              this._curCamera.cameraMatrix.mat4[0],\n              this._curCamera.cameraMatrix.mat4[1],\n              this._curCamera.cameraMatrix.mat4[2],\n              this._curCamera.cameraMatrix.mat4[3],\n              this._curCamera.cameraMatrix.mat4[4],\n              this._curCamera.cameraMatrix.mat4[5],\n              this._curCamera.cameraMatrix.mat4[6],\n              this._curCamera.cameraMatrix.mat4[7],\n              this._curCamera.cameraMatrix.mat4[8],\n              this._curCamera.cameraMatrix.mat4[9],\n              this._curCamera.cameraMatrix.mat4[10],\n              this._curCamera.cameraMatrix.mat4[11],\n              this._curCamera.cameraMatrix.mat4[12],\n              this._curCamera.cameraMatrix.mat4[13],\n              this._curCamera.cameraMatrix.mat4[14],\n              this._curCamera.cameraMatrix.mat4[15]\n            );\n\n            // reset light data for new frame.\n\n            this.ambientLightColors.length = 0;\n            this.directionalLightDirections.length = 0;\n            this.directionalLightColors.length = 0;\n\n            this.pointLightPositions.length = 0;\n            this.pointLightColors.length = 0;\n\n            this._enableLighting = false;\n\n            //reset tint value for new frame\n            this._tint = [255, 255, 255, 255];\n          };\n\n          /**\n           * [background description]\n           */\n          p5.RendererGL.prototype.background = function() {\n            var _col = this._pInst.color.apply(this._pInst, arguments);\n            var _r = _col.levels[0] / 255;\n            var _g = _col.levels[1] / 255;\n            var _b = _col.levels[2] / 255;\n            var _a = _col.levels[3] / 255;\n            this.GL.clearColor(_r, _g, _b, _a);\n            this.GL.depthMask(true);\n            this.GL.clear(this.GL.COLOR_BUFFER_BIT | this.GL.DEPTH_BUFFER_BIT);\n            this._pixelsState._pixelsDirty = true;\n          };\n\n          //////////////////////////////////////////////\n          // COLOR\n          //////////////////////////////////////////////\n          /**\n           * Basic fill material for geometry with a given color\n           * @method  fill\n           * @class p5.RendererGL\n           * @param  {Number|Number[]|String|p5.Color} v1  gray value,\n           * red or hue value (depending on the current color mode),\n           * or color Array, or CSS color string\n           * @param  {Number}            [v2] green or saturation value\n           * @param  {Number}            [v3] blue or brightness value\n           * @param  {Number}            [a]  opacity\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(200, 200, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   noStroke();\n           *   fill(100, 100, 240);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   box(75, 75, 75);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black canvas with purple cube spinning\n           *\n           */\n          p5.RendererGL.prototype.fill = function(v1, v2, v3, a) {\n            //see material.js for more info on color blending in webgl\n            var color = p5.prototype.color.apply(this._pInst, arguments);\n            this.curFillColor = color._array;\n            this.drawMode = constants.FILL;\n            this._useNormalMaterial = false;\n            this._tex = null;\n          };\n\n          /**\n           * Basic stroke material for geometry with a given color\n           * @method  stroke\n           * @param  {Number|Number[]|String|p5.Color} v1  gray value,\n           * red or hue value (depending on the current color mode),\n           * or color Array, or CSS color string\n           * @param  {Number}            [v2] green or saturation value\n           * @param  {Number}            [v3] blue or brightness value\n           * @param  {Number}            [a]  opacity\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(200, 200, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   stroke(240, 150, 150);\n           *   fill(100, 100, 240);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   box(75, 75, 75);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black canvas with purple cube with pink outline spinning\n           *\n           */\n          p5.RendererGL.prototype.stroke = function(r, g, b, a) {\n            //@todo allow transparency in stroking currently doesn't have\n            //any impact and causes problems with specularMaterial\n            arguments[3] = 255;\n            var color = p5.prototype.color.apply(this._pInst, arguments);\n            this.curStrokeColor = color._array;\n          };\n\n          p5.RendererGL.prototype.strokeCap = function(cap) {\n            // @TODO : to be implemented\n            console.error('Sorry, strokeCap() is not yet implemented in WEBGL mode');\n          };\n\n          p5.RendererGL.prototype.blendMode = function(mode) {\n            if (\n              mode === constants.DARKEST ||\n              mode === constants.LIGHTEST ||\n              mode === constants.ADD ||\n              mode === constants.BLEND ||\n              mode === constants.SUBTRACT ||\n              mode === constants.SCREEN ||\n              mode === constants.EXCLUSION ||\n              mode === constants.REPLACE ||\n              mode === constants.MULTIPLY\n            )\n              this.curBlendMode = mode;\n            else if (\n              mode === constants.BURN ||\n              mode === constants.OVERLAY ||\n              mode === constants.HARD_LIGHT ||\n              mode === constants.SOFT_LIGHT ||\n              mode === constants.DODGE\n            ) {\n              console.warn(\n                'BURN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, and DODGE only work for blendMode in 2D mode.'\n              );\n            }\n          };\n\n          /**\n           * Change weight of stroke\n           * @method  strokeWeight\n           * @param  {Number} stroke weight to be used for drawing\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(200, 400, WEBGL);\n           *   setAttributes('antialias', true);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   noStroke();\n           *   translate(0, -100, 0);\n           *   stroke(240, 150, 150);\n           *   fill(100, 100, 240);\n           *   push();\n           *   strokeWeight(8);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   sphere(75);\n           *   pop();\n           *   push();\n           *   translate(0, 200, 0);\n           *   strokeWeight(1);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   sphere(75);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black canvas with two purple rotating spheres with pink\n           * outlines the sphere on top has much heavier outlines,\n           *\n           */\n          p5.RendererGL.prototype.strokeWeight = function(w) {\n            if (this.curStrokeWeight !== w) {\n              this.pointSize = w;\n              this.curStrokeWeight = w;\n            }\n          };\n\n          // x,y are canvas-relative (pre-scaled by _pixelDensity)\n          p5.RendererGL.prototype._getPixel = function(x, y) {\n            var pixelsState = this._pixelsState;\n            var imageData, index;\n            if (pixelsState._pixelsDirty) {\n              imageData = new Uint8Array(4);\n              // prettier-ignore\n              this.drawingContext.readPixels(\n    x, y, 1, 1,\n    this.drawingContext.RGBA, this.drawingContext.UNSIGNED_BYTE,\n    imageData);\n\n              index = 0;\n            } else {\n              imageData = pixelsState.pixels;\n              index = (Math.floor(x) + Math.floor(y) * this.canvas.width) * 4;\n            }\n            return [\n              imageData[index + 0],\n              imageData[index + 1],\n              imageData[index + 2],\n              imageData[index + 3]\n            ];\n          };\n\n          /**\n           * Loads the pixels data for this canvas into the pixels[] attribute.\n           * Note that updatePixels() and set() do not work.\n           * Any pixel manipulation must be done directly to the pixels[] array.\n           *\n           * @private\n           * @method loadPixels\n           *\n           */\n\n          p5.RendererGL.prototype.loadPixels = function() {\n            var pixelsState = this._pixelsState;\n            if (!pixelsState._pixelsDirty) return;\n            pixelsState._pixelsDirty = false;\n\n            //@todo_FES\n            if (this._pInst._glAttributes.preserveDrawingBuffer !== true) {\n              console.log(\n                'loadPixels only works in WebGL when preserveDrawingBuffer ' + 'is true.'\n              );\n\n              return;\n            }\n\n            //if there isn't a renderer-level temporary pixels buffer\n            //make a new one\n            var pixels = pixelsState.pixels;\n            var len = this.GL.drawingBufferWidth * this.GL.drawingBufferHeight * 4;\n            if (!(pixels instanceof Uint8Array) || pixels.length !== len) {\n              pixels = new Uint8Array(len);\n              this._pixelsState._setProperty('pixels', pixels);\n            }\n\n            var pd = this._pInst._pixelDensity;\n            // prettier-ignore\n            this.GL.readPixels(\n  0, 0, this.width * pd, this.height * pd,\n  this.GL.RGBA, this.GL.UNSIGNED_BYTE,\n  pixels);\n          };\n\n          //////////////////////////////////////////////\n          // HASH | for geometry\n          //////////////////////////////////////////////\n\n          p5.RendererGL.prototype.geometryInHash = function(gId) {\n            return this.gHash[gId] !== undefined;\n          };\n\n          /**\n           * [resize description]\n           * @private\n           * @param  {Number} w [description]\n           * @param  {Number} h [description]\n           */\n          p5.RendererGL.prototype.resize = function(w, h) {\n            p5.Renderer.prototype.resize.call(this, w, h);\n            this.GL.viewport(0, 0, this.GL.drawingBufferWidth, this.GL.drawingBufferHeight);\n\n            this._viewport = this.GL.getParameter(this.GL.VIEWPORT);\n\n            this._curCamera._resize();\n\n            //resize pixels buffer\n            var pixelsState = this._pixelsState;\n            pixelsState._pixelsDirty = true;\n            if (typeof pixelsState.pixels !== 'undefined') {\n              pixelsState._setProperty(\n                'pixels',\n                new Uint8Array(this.GL.drawingBufferWidth * this.GL.drawingBufferHeight * 4)\n              );\n            }\n          };\n\n          /**\n           * clears color and depth buffers\n           * with r,g,b,a\n           * @private\n           * @param {Number} r normalized red val.\n           * @param {Number} g normalized green val.\n           * @param {Number} b normalized blue val.\n           * @param {Number} a normalized alpha val.\n           */\n          p5.RendererGL.prototype.clear = function() {\n            var _r = arguments[0] || 0;\n            var _g = arguments[1] || 0;\n            var _b = arguments[2] || 0;\n            var _a = arguments[3] || 0;\n            this.GL.clearColor(_r, _g, _b, _a);\n            this.GL.clear(this.GL.COLOR_BUFFER_BIT | this.GL.DEPTH_BUFFER_BIT);\n            this._pixelsState._pixelsDirty = true;\n          };\n\n          p5.RendererGL.prototype.applyMatrix = function(a, b, c, d, e, f) {\n            if (arguments.length === 16) {\n              p5.Matrix.prototype.apply.apply(this.uMVMatrix, arguments);\n            } else {\n              // prettier-ignore\n              this.uMVMatrix.apply([\n    a, b, 0, 0,\n    c, d, 0, 0,\n    0, 0, 1, 0,\n    e, f, 0, 1]);\n            }\n          };\n\n          /**\n           * [translate description]\n           * @private\n           * @param  {Number} x [description]\n           * @param  {Number} y [description]\n           * @param  {Number} z [description]\n           * @chainable\n           * @todo implement handle for components or vector as args\n           */\n          p5.RendererGL.prototype.translate = function(x, y, z) {\n            if (x instanceof p5.Vector) {\n              z = x.z;\n              y = x.y;\n              x = x.x;\n            }\n            this.uMVMatrix.translate([x, y, z]);\n            return this;\n          };\n\n          /**\n           * Scales the Model View Matrix by a vector\n           * @private\n           * @param  {Number | p5.Vector | Array} x [description]\n           * @param  {Number} [y] y-axis scalar\n           * @param  {Number} [z] z-axis scalar\n           * @chainable\n           */\n          p5.RendererGL.prototype.scale = function(x, y, z) {\n            this.uMVMatrix.scale(x, y, z);\n            return this;\n          };\n\n          p5.RendererGL.prototype.rotate = function(rad, axis) {\n            if (typeof axis === 'undefined') {\n              return this.rotateZ(rad);\n            }\n            p5.Matrix.prototype.rotate.apply(this.uMVMatrix, arguments);\n            return this;\n          };\n\n          p5.RendererGL.prototype.rotateX = function(rad) {\n            this.rotate(rad, 1, 0, 0);\n            return this;\n          };\n\n          p5.RendererGL.prototype.rotateY = function(rad) {\n            this.rotate(rad, 0, 1, 0);\n            return this;\n          };\n\n          p5.RendererGL.prototype.rotateZ = function(rad) {\n            this.rotate(rad, 0, 0, 1);\n            return this;\n          };\n\n          p5.RendererGL.prototype.push = function() {\n            // get the base renderer style\n            var style = p5.Renderer.prototype.push.apply(this);\n\n            // add webgl-specific style properties\n            var properties = style.properties;\n\n            properties.uMVMatrix = this.uMVMatrix.copy();\n            properties.uPMatrix = this.uPMatrix.copy();\n            properties._curCamera = this._curCamera;\n\n            // make a copy of the current camera for the push state\n            // this preserves any references stored using 'createCamera'\n            this._curCamera = this._curCamera.copy();\n\n            properties.ambientLightColors = this.ambientLightColors.slice();\n\n            properties.directionalLightDirections = this.directionalLightDirections.slice();\n            properties.directionalLightColors = this.directionalLightColors.slice();\n\n            properties.pointLightPositions = this.pointLightPositions.slice();\n            properties.pointLightColors = this.pointLightColors.slice();\n\n            properties.userFillShader = this.userFillShader;\n            properties.userStrokeShader = this.userStrokeShader;\n            properties.userPointShader = this.userPointShader;\n\n            properties.pointSize = this.pointSize;\n            properties.curStrokeWeight = this.curStrokeWeight;\n            properties.curStrokeColor = this.curStrokeColor;\n            properties.curFillColor = this.curFillColor;\n\n            properties._useSpecularMaterial = this._useSpecularMaterial;\n            properties._useShininess = this._useShininess;\n\n            properties.constantAttenuation = this.constantAttenuation;\n            properties.linearAttenuation = this.linearAttenuation;\n            properties.quadraticAttenuation = this.quadraticAttenuation;\n\n            properties._enableLighting = this._enableLighting;\n            properties._useNormalMaterial = this._useNormalMaterial;\n            properties._tex = this._tex;\n            properties.drawMode = this.drawMode;\n\n            return style;\n          };\n\n          p5.RendererGL.prototype.resetMatrix = function() {\n            this.uMVMatrix = p5.Matrix.identity(this._pInst);\n            return this;\n          };\n\n          //////////////////////////////////////////////\n          // SHADER\n          //////////////////////////////////////////////\n\n          /*\n * shaders are created and cached on a per-renderer basis,\n * on the grounds that each renderer will have its own gl context\n * and the shader must be valid in that context.\n */\n\n          p5.RendererGL.prototype._getImmediateStrokeShader = function() {\n            // select the stroke shader to use\n            var stroke = this.userStrokeShader;\n            if (!stroke || !stroke.isStrokeShader()) {\n              return this._getLineShader();\n            }\n            return stroke;\n          };\n\n          p5.RendererGL.prototype._getRetainedStrokeShader =\n            p5.RendererGL.prototype._getImmediateStrokeShader;\n\n          /*\n                                                    * selects which fill shader should be used based on renderer state,\n                                                    * for use with begin/endShape and immediate vertex mode.\n                                                    */\n          p5.RendererGL.prototype._getImmediateFillShader = function() {\n            if (this._useNormalMaterial) {\n              console.log(\n                'Sorry, normalMaterial() does not currently work with custom WebGL geometry' +\n                  ' created with beginShape(). Falling back to standard fill material.'\n              );\n\n              return this._getImmediateModeShader();\n            }\n\n            var fill = this.userFillShader;\n            if (this._enableLighting) {\n              if (!fill || !fill.isLightShader()) {\n                return this._getLightShader();\n              }\n            } else if (this._tex) {\n              if (!fill || !fill.isTextureShader()) {\n                return this._getLightShader();\n              }\n            } else if (!fill /*|| !fill.isColorShader()*/) {\n              return this._getImmediateModeShader();\n            }\n            return fill;\n          };\n\n          /*\n    * selects which fill shader should be used based on renderer state\n    * for retained mode.\n    */\n          p5.RendererGL.prototype._getRetainedFillShader = function() {\n            if (this._useNormalMaterial) {\n              return this._getNormalShader();\n            }\n\n            var fill = this.userFillShader;\n            if (this._enableLighting) {\n              if (!fill || !fill.isLightShader()) {\n                return this._getLightShader();\n              }\n            } else if (this._tex) {\n              if (!fill || !fill.isTextureShader()) {\n                return this._getLightShader();\n              }\n            } else if (!fill /* || !fill.isColorShader()*/) {\n              return this._getColorShader();\n            }\n            return fill;\n          };\n\n          p5.RendererGL.prototype._getImmediatePointShader = function() {\n            // select the point shader to use\n            var point = this.userPointShader;\n            if (!point || !point.isPointShader()) {\n              return this._getPointShader();\n            }\n            return point;\n          };\n\n          p5.RendererGL.prototype._getRetainedLineShader =\n            p5.RendererGL.prototype._getImmediateLineShader;\n\n          p5.RendererGL.prototype._getLightShader = function() {\n            if (!this._defaultLightShader) {\n              if (this._pInst._glAttributes.perPixelLighting) {\n                this._defaultLightShader = new p5.Shader(\n                  this,\n                  defaultShaders.phongVert,\n                  defaultShaders.phongFrag\n                );\n              } else {\n                this._defaultLightShader = new p5.Shader(\n                  this,\n                  defaultShaders.lightVert,\n                  defaultShaders.lightTextureFrag\n                );\n              }\n            }\n\n            return this._defaultLightShader;\n          };\n\n          p5.RendererGL.prototype._getImmediateModeShader = function() {\n            if (!this._defaultImmediateModeShader) {\n              this._defaultImmediateModeShader = new p5.Shader(\n                this,\n                defaultShaders.immediateVert,\n                defaultShaders.vertexColorFrag\n              );\n            }\n\n            return this._defaultImmediateModeShader;\n          };\n\n          p5.RendererGL.prototype._getNormalShader = function() {\n            if (!this._defaultNormalShader) {\n              this._defaultNormalShader = new p5.Shader(\n                this,\n                defaultShaders.normalVert,\n                defaultShaders.normalFrag\n              );\n            }\n\n            return this._defaultNormalShader;\n          };\n\n          p5.RendererGL.prototype._getColorShader = function() {\n            if (!this._defaultColorShader) {\n              this._defaultColorShader = new p5.Shader(\n                this,\n                defaultShaders.normalVert,\n                defaultShaders.basicFrag\n              );\n            }\n\n            return this._defaultColorShader;\n          };\n\n          p5.RendererGL.prototype._getPointShader = function() {\n            if (!this._defaultPointShader) {\n              this._defaultPointShader = new p5.Shader(\n                this,\n                defaultShaders.pointVert,\n                defaultShaders.pointFrag\n              );\n            }\n            return this._defaultPointShader;\n          };\n\n          p5.RendererGL.prototype._getLineShader = function() {\n            if (!this._defaultLineShader) {\n              this._defaultLineShader = new p5.Shader(\n                this,\n                defaultShaders.lineVert,\n                defaultShaders.lineFrag\n              );\n            }\n\n            return this._defaultLineShader;\n          };\n\n          p5.RendererGL.prototype._getFontShader = function() {\n            if (!this._defaultFontShader) {\n              this.GL.getExtension('OES_standard_derivatives');\n              this._defaultFontShader = new p5.Shader(\n                this,\n                defaultShaders.fontVert,\n                defaultShaders.fontFrag\n              );\n            }\n            return this._defaultFontShader;\n          };\n\n          p5.RendererGL.prototype._getEmptyTexture = function() {\n            if (!this._emptyTexture) {\n              // a plain white texture RGBA, full alpha, single pixel.\n              var im = new p5.Image(1, 1);\n              im.set(0, 0, 255);\n              this._emptyTexture = new p5.Texture(this, im);\n            }\n            return this._emptyTexture;\n          };\n\n          p5.RendererGL.prototype.getTexture = function(img) {\n            var textures = this.textures;\n            for (var it = 0; it < textures.length; ++it) {\n              var texture = textures[it];\n              if (texture.src === img) return texture;\n            }\n\n            var tex = new p5.Texture(this, img);\n            textures.push(tex);\n            return tex;\n          };\n\n          p5.RendererGL.prototype._setStrokeUniforms = function(strokeShader) {\n            strokeShader.bindShader();\n\n            // set the uniform values\n            strokeShader.setUniform('uMaterialColor', this.curStrokeColor);\n            strokeShader.setUniform('uStrokeWeight', this.curStrokeWeight);\n          };\n\n          p5.RendererGL.prototype._setFillUniforms = function(fillShader) {\n            fillShader.bindShader();\n\n            // TODO: optimize\n            fillShader.setUniform('uMaterialColor', this.curFillColor);\n            fillShader.setUniform('isTexture', !!this._tex);\n            if (this._tex) {\n              fillShader.setUniform('uSampler', this._tex);\n            }\n            fillShader.setUniform('uTint', this._tint);\n\n            fillShader.setUniform('uSpecular', this._useSpecularMaterial);\n            fillShader.setUniform('uShininess', this._useShininess);\n\n            fillShader.setUniform('uUseLighting', this._enableLighting);\n\n            var pointLightCount = this.pointLightColors.length / 3;\n            fillShader.setUniform('uPointLightCount', pointLightCount);\n            fillShader.setUniform('uPointLightLocation', this.pointLightPositions);\n            fillShader.setUniform('uPointLightColor', this.pointLightColors);\n\n            var directionalLightCount = this.directionalLightColors.length / 3;\n            fillShader.setUniform('uDirectionalLightCount', directionalLightCount);\n            fillShader.setUniform('uLightingDirection', this.directionalLightDirections);\n            fillShader.setUniform('uDirectionalColor', this.directionalLightColors);\n\n            // TODO: sum these here...\n            var ambientLightCount = this.ambientLightColors.length / 3;\n            fillShader.setUniform('uAmbientLightCount', ambientLightCount);\n            fillShader.setUniform('uAmbientColor', this.ambientLightColors);\n\n            fillShader.setUniform('uConstantAttenuation', this.constantAttenuation);\n            fillShader.setUniform('uLinearAttenuation', this.linearAttenuation);\n            fillShader.setUniform('uQuadraticAttenuation', this.quadraticAttenuation);\n\n            fillShader.bindTextures();\n          };\n\n          p5.RendererGL.prototype._setPointUniforms = function(pointShader) {\n            pointShader.bindShader();\n\n            // set the uniform values\n            pointShader.setUniform('uMaterialColor', this.curStrokeColor);\n            // @todo is there an instance where this isn't stroke weight?\n            // should be they be same var?\n            pointShader.setUniform('uPointSize', this.pointSize);\n          };\n\n          /* Binds a buffer to the drawing context\n    * when passed more than two arguments it also updates or initializes\n    * the data associated with the buffer\n    */\n          p5.RendererGL.prototype._bindBuffer = function(\n            buffer,\n            target,\n            values,\n            type,\n            usage\n          ) {\n            if (!target) target = this.GL.ARRAY_BUFFER;\n            this.GL.bindBuffer(target, buffer);\n            if (values !== undefined) {\n              var data = new (type || Float32Array)(values);\n              this.GL.bufferData(target, data, usage || this.GL.STATIC_DRAW);\n            }\n          };\n\n          ///////////////////////////////\n          //// UTILITY FUNCTIONS\n          //////////////////////////////\n          /**\n           * turn a two dimensional array into one dimensional array\n           * @private\n           * @param  {Array} arr 2-dimensional array\n           * @return {Array}     1-dimensional array\n           * [[1, 2, 3],[4, 5, 6]] -> [1, 2, 3, 4, 5, 6]\n           */\n          p5.RendererGL.prototype._flatten = function(arr) {\n            //when empty, return empty\n            if (arr.length === 0) {\n              return [];\n            } else if (arr.length > 20000) {\n              //big models , load slower to avoid stack overflow\n              //faster non-recursive flatten via axelduch\n              //stackoverflow.com/questions/27266550/how-to-flatten-nested-array-in-javascript\n              var toString = Object.prototype.toString;\n              var arrayTypeStr = '[object Array]';\n              var result = [];\n              var nodes = arr.slice();\n              var node;\n              node = nodes.pop();\n              do {\n                if (toString.call(node) === arrayTypeStr) {\n                  nodes.push.apply(nodes, node);\n                } else {\n                  result.push(node);\n                }\n              } while (nodes.length && (node = nodes.pop()) !== undefined);\n              result.reverse(); // we reverse result to restore the original order\n              return result;\n            } else {\n              //otherwise if model within limits for browser\n              //use faster recursive loading\n              return [].concat.apply([], arr);\n            }\n          };\n\n          /**\n           * turn a p5.Vector Array into a one dimensional number array\n           * @private\n           * @param  {p5.Vector[]} arr  an array of p5.Vector\n           * @return {Number[]}     a one dimensional array of numbers\n           * [p5.Vector(1, 2, 3), p5.Vector(4, 5, 6)] ->\n           * [1, 2, 3, 4, 5, 6]\n           */\n          p5.RendererGL.prototype._vToNArray = function(arr) {\n            var ret = [];\n            for (var i = 0; i < arr.length; i++) {\n              var item = arr[i];\n              ret.push(item.x, item.y, item.z);\n            }\n            return ret;\n          };\n\n          /**\n           * ensures that p5 is using a 3d renderer. throws an error if not.\n           */\n          p5.prototype._assert3d = function(name) {\n            if (!this._renderer.isP3D)\n              throw new Error(\n                name +\n                  \"() is only supported in WEBGL mode. If you'd like to use 3D graphics\" +\n                  ' and WebGL, see  https://p5js.org/examples/form-3d-primitives.html' +\n                  ' for more information.'\n              );\n          };\n\n          // function to initialize GLU Tesselator\n\n          p5.RendererGL.prototype._initTessy = function initTesselator() {\n            // function called for each vertex of tesselator output\n            function vertexCallback(data, polyVertArray) {\n              polyVertArray[polyVertArray.length] = data[0];\n              polyVertArray[polyVertArray.length] = data[1];\n              polyVertArray[polyVertArray.length] = data[2];\n            }\n\n            function begincallback(type) {\n              if (type !== libtess.primitiveType.GL_TRIANGLES) {\n                console.log('expected TRIANGLES but got type: ' + type);\n              }\n            }\n\n            function errorcallback(errno) {\n              console.log('error callback');\n              console.log('error number: ' + errno);\n            }\n            // callback for when segments intersect and must be split\n            function combinecallback(coords, data, weight) {\n              return [coords[0], coords[1], coords[2]];\n            }\n\n            function edgeCallback(flag) {\n              // don't really care about the flag, but need no-strip/no-fan behavior\n            }\n\n            var tessy = new libtess.GluTesselator();\n            tessy.gluTessCallback(libtess.gluEnum.GLU_TESS_VERTEX_DATA, vertexCallback);\n            tessy.gluTessCallback(libtess.gluEnum.GLU_TESS_BEGIN, begincallback);\n            tessy.gluTessCallback(libtess.gluEnum.GLU_TESS_ERROR, errorcallback);\n            tessy.gluTessCallback(libtess.gluEnum.GLU_TESS_COMBINE, combinecallback);\n            tessy.gluTessCallback(libtess.gluEnum.GLU_TESS_EDGE_FLAG, edgeCallback);\n\n            return tessy;\n          };\n\n          p5.RendererGL.prototype._triangulate = function(contours) {\n            // libtess will take 3d verts and flatten to a plane for tesselation\n            // since only doing 2d tesselation here, provide z=1 normal to skip\n            // iterating over verts only to get the same answer.\n            // comment out to test normal-generation code\n            this._tessy.gluTessNormal(0, 0, 1);\n\n            var triangleVerts = [];\n            this._tessy.gluTessBeginPolygon(triangleVerts);\n\n            for (var i = 0; i < contours.length; i++) {\n              this._tessy.gluTessBeginContour();\n              var contour = contours[i];\n              for (var j = 0; j < contour.length; j += 3) {\n                var coords = [contour[j], contour[j + 1], contour[j + 2]];\n                this._tessy.gluTessVertex(coords, coords);\n              }\n              this._tessy.gluTessEndContour();\n            }\n\n            // finish polygon\n            this._tessy.gluTessEndPolygon();\n\n            return triangleVerts;\n          };\n\n          // function to calculate BezierVertex Coefficients\n          p5.RendererGL.prototype._bezierCoefficients = function(t) {\n            var t2 = t * t;\n            var t3 = t2 * t;\n            var mt = 1 - t;\n            var mt2 = mt * mt;\n            var mt3 = mt2 * mt;\n            return [mt3, 3 * mt2 * t, 3 * mt * t2, t3];\n          };\n\n          // function to calculate QuadraticVertex Coefficients\n          p5.RendererGL.prototype._quadraticCoefficients = function(t) {\n            var t2 = t * t;\n            var mt = 1 - t;\n            var mt2 = mt * mt;\n            return [mt2, 2 * mt * t, t2];\n          };\n\n          // function to convert Bezier coordinates to Catmull Rom Splines\n          p5.RendererGL.prototype._bezierToCatmull = function(w) {\n            var p1 = w[1];\n            var p2 = w[1] + (w[2] - w[0]) / this._curveTightness;\n            var p3 = w[2] - (w[3] - w[1]) / this._curveTightness;\n            var p4 = w[2];\n            var p = [p1, p2, p3, p4];\n            return p;\n          };\n\n          module.exports = p5.RendererGL;\n        },\n        {\n          '../core/constants': 18,\n          '../core/main': 24,\n          '../core/p5.Renderer': 27,\n          './p5.Camera': 70,\n          './p5.Matrix': 72,\n          './p5.Shader': 76,\n          libtess: 9\n        }\n      ],\n      76: [\n        function(_dereq_, module, exports) {\n          /**\n           * This module defines the p5.Shader class\n           * @module Lights, Camera\n           * @submodule Shaders\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n\n          /**\n           * Shader class for WEBGL Mode\n           * @class p5.Shader\n           * @param {p5.RendererGL} renderer an instance of p5.RendererGL that\n           * will provide the GL context for this new p5.Shader\n           * @param {String} vertSrc source code for the vertex shader (as a string)\n           * @param {String} fragSrc source code for the fragment shader (as a string)\n           */\n          p5.Shader = function(renderer, vertSrc, fragSrc) {\n            // TODO: adapt this to not take ids, but rather,\n            // to take the source for a vertex and fragment shader\n            // to enable custom shaders at some later date\n            this._renderer = renderer;\n            this._vertSrc = vertSrc;\n            this._fragSrc = fragSrc;\n            this._vertShader = -1;\n            this._fragShader = -1;\n            this._glProgram = 0;\n            this._loadedAttributes = false;\n            this.attributes = {};\n            this._loadedUniforms = false;\n            this.uniforms = {};\n            this._bound = false;\n            this.samplers = [];\n          };\n\n          /**\n           * Creates, compiles, and links the shader based on its\n           * sources for the vertex and fragment shaders (provided\n           * to the constructor). Populates known attributes and\n           * uniforms from the shader.\n           * @method init\n           * @chainable\n           * @private\n           */\n          p5.Shader.prototype.init = function() {\n            if (this._glProgram === 0 /* or context is stale? */) {\n              var gl = this._renderer.GL;\n\n              // @todo: once custom shading is allowed,\n              // friendly error messages should be used here to share\n              // compiler and linker errors.\n\n              //set up the shader by\n              // 1. creating and getting a gl id for the shader program,\n              // 2. compliling its vertex & fragment sources,\n              // 3. linking the vertex and fragment shaders\n              this._vertShader = gl.createShader(gl.VERTEX_SHADER);\n              //load in our default vertex shader\n              gl.shaderSource(this._vertShader, this._vertSrc);\n              gl.compileShader(this._vertShader);\n              // if our vertex shader failed compilation?\n              if (!gl.getShaderParameter(this._vertShader, gl.COMPILE_STATUS)) {\n                console.error(\n                  'Yikes! An error occurred compiling the vertex shader:' +\n                    gl.getShaderInfoLog(this._vertShader)\n                );\n\n                return null;\n              }\n\n              this._fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n              //load in our material frag shader\n              gl.shaderSource(this._fragShader, this._fragSrc);\n              gl.compileShader(this._fragShader);\n              // if our frag shader failed compilation?\n              if (!gl.getShaderParameter(this._fragShader, gl.COMPILE_STATUS)) {\n                console.error(\n                  'Darn! An error occurred compiling the fragment shader:' +\n                    gl.getShaderInfoLog(this._fragShader)\n                );\n\n                return null;\n              }\n\n              this._glProgram = gl.createProgram();\n              gl.attachShader(this._glProgram, this._vertShader);\n              gl.attachShader(this._glProgram, this._fragShader);\n              gl.linkProgram(this._glProgram);\n              if (!gl.getProgramParameter(this._glProgram, gl.LINK_STATUS)) {\n                console.error(\n                  'Snap! Error linking shader program: ' +\n                    gl.getProgramInfoLog(this._glProgram)\n                );\n              }\n\n              this._loadAttributes();\n              this._loadUniforms();\n            }\n            return this;\n          };\n\n          /**\n           * Queries the active attributes for this shader and loads\n           * their names and locations into the attributes array.\n           * @method _loadAttributes\n           * @private\n           */\n          p5.Shader.prototype._loadAttributes = function() {\n            if (this._loadedAttributes) {\n              return;\n            }\n\n            this.attributes = {};\n\n            var gl = this._renderer.GL;\n\n            var numAttributes = gl.getProgramParameter(\n              this._glProgram,\n              gl.ACTIVE_ATTRIBUTES\n            );\n\n            for (var i = 0; i < numAttributes; ++i) {\n              var attributeInfo = gl.getActiveAttrib(this._glProgram, i);\n              var name = attributeInfo.name;\n              var location = gl.getAttribLocation(this._glProgram, name);\n              var attribute = {};\n              attribute.name = name;\n              attribute.location = location;\n              attribute.index = i;\n              attribute.type = attributeInfo.type;\n              attribute.size = attributeInfo.size;\n              this.attributes[name] = attribute;\n            }\n\n            this._loadedAttributes = true;\n          };\n\n          /**\n           * Queries the active uniforms for this shader and loads\n           * their names and locations into the uniforms array.\n           * @method _loadUniforms\n           * @private\n           */\n          p5.Shader.prototype._loadUniforms = function() {\n            if (this._loadedUniforms) {\n              return;\n            }\n\n            var gl = this._renderer.GL;\n\n            // Inspect shader and cache uniform info\n            var numUniforms = gl.getProgramParameter(this._glProgram, gl.ACTIVE_UNIFORMS);\n\n            var samplerIndex = 0;\n            for (var i = 0; i < numUniforms; ++i) {\n              var uniformInfo = gl.getActiveUniform(this._glProgram, i);\n              var uniform = {};\n              uniform.location = gl.getUniformLocation(this._glProgram, uniformInfo.name);\n              uniform.size = uniformInfo.size;\n              var uniformName = uniformInfo.name;\n              //uniforms thats are arrays have their name returned as\n              //someUniform[0] which is a bit silly so we trim it\n              //off here. The size property tells us that its an array\n              //so we dont lose any information by doing this\n              if (uniformInfo.size > 1) {\n                uniformName = uniformName.substring(0, uniformName.indexOf('[0]'));\n              }\n              uniform.name = uniformName;\n              uniform.type = uniformInfo.type;\n              if (uniform.type === gl.SAMPLER_2D) {\n                uniform.samplerIndex = samplerIndex;\n                samplerIndex++;\n                this.samplers.push(uniform);\n              }\n              this.uniforms[uniformName] = uniform;\n            }\n            this._loadedUniforms = true;\n          };\n\n          p5.Shader.prototype.compile = function() {\n            // TODO\n          };\n\n          /**\n           * initializes (if needed) and binds the shader program.\n           * @method bindShader\n           * @private\n           */\n          p5.Shader.prototype.bindShader = function() {\n            this.init();\n            if (!this._bound) {\n              this.useProgram();\n              this._bound = true;\n\n              this._setMatrixUniforms();\n\n              this.setUniform('uViewport', this._renderer._viewport);\n            }\n          };\n\n          /**\n           * @method unbindShader\n           * @chainable\n           * @private\n           */\n          p5.Shader.prototype.unbindShader = function() {\n            if (this._bound) {\n              this.unbindTextures();\n              //this._renderer.GL.useProgram(0); ??\n              this._bound = false;\n            }\n            return this;\n          };\n\n          p5.Shader.prototype.bindTextures = function() {\n            var gl = this._renderer.GL;\n            for (var i = 0; i < this.samplers.length; i++) {\n              var uniform = this.samplers[i];\n              var tex = uniform.texture;\n              if (tex === undefined) {\n                // user hasn't yet supplied a texture for this slot.\n                // (or there may not be one--maybe just lighting),\n                // so we supply a default texture instead.\n                tex = this._renderer._getEmptyTexture();\n              }\n              gl.activeTexture(gl.TEXTURE0 + uniform.samplerIndex);\n              tex.bindTexture();\n              tex.update();\n              gl.uniform1i(uniform.location, uniform.samplerIndex);\n            }\n          };\n\n          p5.Shader.prototype.updateTextures = function() {\n            for (var i = 0; i < this.samplers.length; i++) {\n              var uniform = this.samplers[i];\n              var tex = uniform.texture;\n              if (tex) {\n                tex.update();\n              }\n            }\n          };\n\n          p5.Shader.prototype.unbindTextures = function() {\n            // TODO: migrate stuff from material.js here\n            // - OR - have material.js define this function\n          };\n\n          p5.Shader.prototype._setMatrixUniforms = function() {\n            this.setUniform('uProjectionMatrix', this._renderer.uPMatrix.mat4);\n            this.setUniform('uModelViewMatrix', this._renderer.uMVMatrix.mat4);\n            this.setUniform('uViewMatrix', this._renderer._curCamera.cameraMatrix.mat4);\n            if (this.uniforms.uNormalMatrix) {\n              this._renderer.uNMatrix.inverseTranspose(this._renderer.uMVMatrix);\n              this.setUniform('uNormalMatrix', this._renderer.uNMatrix.mat3);\n            }\n          };\n\n          /**\n           * @method useProgram\n           * @chainable\n           * @private\n           */\n          p5.Shader.prototype.useProgram = function() {\n            var gl = this._renderer.GL;\n            gl.useProgram(this._glProgram);\n            return this;\n          };\n\n          /**\n           * Wrapper around gl.uniform functions.\n           * As we store uniform info in the shader we can use that\n           * to do type checking on the supplied data and call\n           * the appropriate function.\n           * @method setUniform\n           * @chainable\n           * @param {String} uniformName the name of the uniform in the\n           * shader program\n           * @param {Object|Number|Boolean|Number[]} data the data to be associated\n           * with that uniform; type varies (could be a single numerical value, array,\n           * matrix, or texture / sampler reference)\n           *\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * // Click within the image to toggle the value of uniforms\n           * // Note: for an alternative approach to the same example,\n           * // involving toggling between shaders please refer to:\n           * // https://p5js.org/reference/#/p5/shader\n           *\n           * let grad;\n           * let showRedGreen = false;\n           *\n           * function preload() {\n           *   // note that we are using two instances\n           *   // of the same vertex and fragment shaders\n           *   grad = loadShader('assets/shader.vert', 'assets/shader-gradient.frag');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   shader(grad);\n           *   noStroke();\n           * }\n           *\n           * function draw() {\n           *   // update the offset values for each scenario,\n           *   // moving the \"grad\" shader in either vertical or\n           *   // horizontal direction each with differing colors\n           *\n           *   if (showRedGreen === true) {\n           *     grad.setUniform('colorCenter', [1, 0, 0]);\n           *     grad.setUniform('colorBackground', [0, 1, 0]);\n           *     grad.setUniform('offset', [sin(millis() / 2000), 1]);\n           *   } else {\n           *     grad.setUniform('colorCenter', [1, 0.5, 0]);\n           *     grad.setUniform('colorBackground', [0.226, 0, 0.615]);\n           *     grad.setUniform('offset', [0, sin(millis() / 2000) + 1]);\n           *   }\n           *   quad(-1, -1, 1, -1, 1, 1, -1, 1);\n           * }\n           *\n           * function mouseClicked() {\n           *   showRedGreen = !showRedGreen;\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * canvas toggles between a circular gradient of orange and blue vertically. and a circular gradient of red and green moving horizontally when mouse is clicked/pressed.\n           */\n          p5.Shader.prototype.setUniform = function(uniformName, data) {\n            //@todo update all current gl.uniformXX calls\n\n            var uniform = this.uniforms[uniformName];\n            if (!uniform) {\n              return;\n            }\n\n            var location = uniform.location;\n\n            var gl = this._renderer.GL;\n            this.useProgram();\n\n            switch (uniform.type) {\n              case gl.BOOL:\n                if (data === true) {\n                  gl.uniform1i(location, 1);\n                } else {\n                  gl.uniform1i(location, 0);\n                }\n                break;\n              case gl.INT:\n                if (uniform.size > 1) {\n                  data.length && gl.uniform1iv(location, data);\n                } else {\n                  gl.uniform1i(location, data);\n                }\n                break;\n              case gl.FLOAT:\n                if (uniform.size > 1) {\n                  data.length && gl.uniform1fv(location, data);\n                } else {\n                  gl.uniform1f(location, data);\n                }\n                break;\n              case gl.FLOAT_MAT3:\n                gl.uniformMatrix3fv(location, false, data);\n                break;\n              case gl.FLOAT_MAT4:\n                gl.uniformMatrix4fv(location, false, data);\n                break;\n              case gl.FLOAT_VEC2:\n                if (uniform.size > 1) {\n                  data.length && gl.uniform2fv(location, data);\n                } else {\n                  gl.uniform2f(location, data[0], data[1]);\n                }\n                break;\n              case gl.FLOAT_VEC3:\n                if (uniform.size > 1) {\n                  data.length && gl.uniform3fv(location, data);\n                } else {\n                  gl.uniform3f(location, data[0], data[1], data[2]);\n                }\n                break;\n              case gl.FLOAT_VEC4:\n                if (uniform.size > 1) {\n                  data.length && gl.uniform4fv(location, data);\n                } else {\n                  gl.uniform4f(location, data[0], data[1], data[2], data[3]);\n                }\n                break;\n              case gl.INT_VEC2:\n                if (uniform.size > 1) {\n                  data.length && gl.uniform2iv(location, data);\n                } else {\n                  gl.uniform2i(location, data[0], data[1]);\n                }\n                break;\n              case gl.INT_VEC3:\n                if (uniform.size > 1) {\n                  data.length && gl.uniform3iv(location, data);\n                } else {\n                  gl.uniform3i(location, data[0], data[1], data[2]);\n                }\n                break;\n              case gl.INT_VEC4:\n                if (uniform.size > 1) {\n                  data.length && gl.uniform4iv(location, data);\n                } else {\n                  gl.uniform4i(location, data[0], data[1], data[2], data[3]);\n                }\n                break;\n              case gl.SAMPLER_2D:\n                gl.activeTexture(gl.TEXTURE0 + uniform.samplerIndex);\n                uniform.texture = this._renderer.getTexture(data);\n                gl.uniform1i(uniform.location, uniform.samplerIndex);\n                break;\n              //@todo complete all types\n            }\n            return this;\n          };\n\n          /* NONE OF THIS IS FAST OR EFFICIENT BUT BEAR WITH ME\n    *\n    * these shader \"type\" query methods are used by various\n    * facilities of the renderer to determine if changing\n    * the shader type for the required action (for example,\n    * do we need to load the default lighting shader if the\n    * current shader cannot handle lighting?)\n    *\n    **/\n\n          p5.Shader.prototype.isLightShader = function() {\n            return (\n              this.attributes.aNormal !== undefined ||\n              this.uniforms.uUseLighting !== undefined ||\n              this.uniforms.uAmbientLightCount !== undefined ||\n              this.uniforms.uDirectionalLightCount !== undefined ||\n              this.uniforms.uPointLightCount !== undefined ||\n              this.uniforms.uAmbientColor !== undefined ||\n              this.uniforms.uDirectionalColor !== undefined ||\n              this.uniforms.uPointLightLocation !== undefined ||\n              this.uniforms.uPointLightColor !== undefined ||\n              this.uniforms.uLightingDirection !== undefined ||\n              this.uniforms.uSpecular !== undefined\n            );\n          };\n\n          p5.Shader.prototype.isTextureShader = function() {\n            return this.samplerIndex > 0;\n          };\n\n          p5.Shader.prototype.isColorShader = function() {\n            return (\n              this.attributes.aVertexColor !== undefined ||\n              this.uniforms.uMaterialColor !== undefined\n            );\n          };\n\n          p5.Shader.prototype.isTexLightShader = function() {\n            return this.isLightShader() && this.isTextureShader();\n          };\n\n          p5.Shader.prototype.isStrokeShader = function() {\n            return this.uniforms.uStrokeWeight !== undefined;\n          };\n\n          /**\n           * @method enableAttrib\n           * @chainable\n           * @private\n           */\n          p5.Shader.prototype.enableAttrib = function(\n            attr,\n            size,\n            type,\n            normalized,\n            stride,\n            offset\n          ) {\n            if (attr) {\n              if (\n                typeof IS_MINIFIED === 'undefined' &&\n                this.attributes[attr.name] !== attr\n              ) {\n                console.warn(\n                  'The attribute \"' +\n                    attr.name +\n                    '\"passed to enableAttrib does not belong to this shader.'\n                );\n              }\n              var loc = attr.location;\n              if (loc !== -1) {\n                var gl = this._renderer.GL;\n                gl.enableVertexAttribArray(loc);\n                gl.vertexAttribPointer(\n                  loc,\n                  size,\n                  type || gl.FLOAT,\n                  normalized || false,\n                  stride || 0,\n                  offset || 0\n                );\n              }\n            }\n            return this;\n          };\n\n          module.exports = p5.Shader;\n        },\n        { '../core/main': 24 }\n      ],\n      77: [\n        function(_dereq_, module, exports) {\n          /**\n           * This module defines the p5.Texture class\n           * @module Lights, Camera\n           * @submodule Material\n           * @for p5\n           * @requires core\n           */\n\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          var constants = _dereq_('../core/constants');\n\n          /**\n           * Texture class for WEBGL Mode\n           * @private\n           * @class p5.Texture\n           * @param {p5.RendererGL} renderer an instance of p5.RendererGL that\n           * will provide the GL context for this new p5.Texture\n           * @param {p5.Image|p5.Graphics|p5.Element|p5.MediaElement|ImageData} [obj] the\n           * object containing the image data to store in the texture.\n           */\n          p5.Texture = function(renderer, obj) {\n            this._renderer = renderer;\n\n            var gl = this._renderer.GL;\n\n            this.src = obj;\n            this.glTex = undefined;\n            this.glTarget = gl.TEXTURE_2D;\n            this.glFormat = gl.RGBA;\n            this.mipmaps = false;\n            this.glMinFilter = gl.LINEAR;\n            this.glMagFilter = gl.LINEAR;\n            this.glWrapS = gl.CLAMP_TO_EDGE;\n            this.glWrapT = gl.CLAMP_TO_EDGE;\n\n            // used to determine if this texture might need constant updating\n            // because it is a video or gif.\n            this.isSrcMediaElement =\n              typeof p5.MediaElement !== 'undefined' && obj instanceof p5.MediaElement;\n            this._videoPrevUpdateTime = 0;\n            this.isSrcHTMLElement =\n              typeof p5.Element !== 'undefined' &&\n              obj instanceof p5.Element &&\n              !(obj instanceof p5.Graphics);\n            this.isSrcP5Image = obj instanceof p5.Image;\n            this.isSrcP5Graphics = obj instanceof p5.Graphics;\n            this.isImageData = typeof ImageData !== 'undefined' && obj instanceof ImageData;\n\n            var textureData = this._getTextureDataFromSource();\n            this.width = textureData.width;\n            this.height = textureData.height;\n\n            this.init(textureData);\n            return this;\n          };\n\n          p5.Texture.prototype._getTextureDataFromSource = function() {\n            var textureData;\n            if (this.isSrcP5Image) {\n              // param is a p5.Image\n              textureData = this.src.canvas;\n            } else if (\n              this.isSrcMediaElement ||\n              this.isSrcP5Graphics ||\n              this.isSrcHTMLElement\n            ) {\n              // if param is a video HTML element\n              textureData = this.src.elt;\n            } else if (this.isImageData) {\n              textureData = this.src;\n            }\n            return textureData;\n          };\n\n          /**\n           * Initializes common texture parameters, creates a gl texture,\n           * tries to upload the texture for the first time if data is\n           * already available.\n           * @private\n           * @method init\n           */\n          p5.Texture.prototype.init = function(data) {\n            var gl = this._renderer.GL;\n            this.glTex = gl.createTexture();\n\n            this.glWrapS = this._renderer.textureWrapX;\n            this.glWrapT = this._renderer.textureWrapY;\n\n            this.setWrapMode(this.glWrapS, this.glWrapT);\n            this.bindTexture();\n\n            //gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.glMagFilter);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.glMinFilter);\n\n            if (\n              this.width === 0 ||\n              this.height === 0 ||\n              (this.isSrcMediaElement && !this.src.loadedmetadata)\n            ) {\n              // assign a 1x1 empty texture initially, because data is not yet ready,\n              // so that no errors occur in gl console!\n              var tmpdata = new Uint8Array([1, 1, 1, 1]);\n              gl.texImage2D(\n                this.glTarget,\n                0,\n                gl.RGBA,\n                1,\n                1,\n                0,\n                this.glFormat,\n                gl.UNSIGNED_BYTE,\n                tmpdata\n              );\n            } else {\n              // data is ready: just push the texture!\n              gl.texImage2D(\n                this.glTarget,\n                0,\n                this.glFormat,\n                this.glFormat,\n                gl.UNSIGNED_BYTE,\n                data\n              );\n            }\n          };\n\n          /**\n           * Checks if the source data for this texture has changed (if it's\n           * easy to do so) and reuploads the texture if necessary. If it's not\n           * possible or to expensive to do a calculation to determine wheter or\n           * not the data has occurred, this method simply re-uploads the texture.\n           * @method update\n           */\n          p5.Texture.prototype.update = function() {\n            var data = this.src;\n            if (data.width === 0 || data.height === 0) {\n              return false; // nothing to do!\n            }\n\n            var textureData = this._getTextureDataFromSource();\n            var updated = false;\n\n            var gl = this._renderer.GL;\n            // pull texture from data, make sure width & height are appropriate\n            if (textureData.width !== this.width || textureData.height !== this.height) {\n              updated = true;\n\n              // make sure that if the width and height of this.src have changed\n              // for some reason, we update our metadata and upload the texture again\n              this.width = textureData.width;\n              this.height = textureData.height;\n\n              if (this.isSrcP5Image) {\n                data.setModified(false);\n              } else if (this.isSrcMediaElement || this.isSrcHTMLElement) {\n                // on the first frame the metadata comes in, the size will be changed\n                // from 0 to actual size, but pixels may not be available.\n                // flag for update in a future frame.\n                // if we don't do this, a paused video, for example, may not\n                // send the first frame to texture memory.\n                data.setModified(true);\n              }\n            } else if (this.isSrcP5Image) {\n              // for an image, we only update if the modified field has been set,\n              // for example, by a call to p5.Image.set\n              if (data.isModified()) {\n                updated = true;\n                data.setModified(false);\n              }\n            } else if (this.isSrcMediaElement) {\n              // for a media element (video), we'll check if the current time in\n              // the video frame matches the last time. if it doesn't match, the\n              // video has advanced or otherwise been taken to a new frame,\n              // and we need to upload it.\n              if (data.isModified()) {\n                // p5.MediaElement may have also had set/updatePixels, etc. called\n                // on it and should be updated, or may have been set for the first\n                // time!\n                updated = true;\n                data.setModified(false);\n              } else if (data.loadedmetadata) {\n                // if the meta data has been loaded, we can ask the video\n                // what it's current position (in time) is.\n                if (this._videoPrevUpdateTime !== data.time()) {\n                  // update the texture in gpu mem only if the current\n                  // video timestamp does not match the timestamp of the last\n                  // time we uploaded this texture (and update the time we\n                  // last uploaded, too)\n                  this._videoPrevUpdateTime = data.time();\n                  updated = true;\n                }\n              }\n            } else if (this.isImageData) {\n              if (data._dirty) {\n                data._dirty = false;\n                updated = true;\n              }\n            } else {\n              /* data instanceof p5.Graphics, probably */\n              // there is not enough information to tell if the texture can be\n              // conditionally updated; so to be safe, we just go ahead and upload it.\n              updated = true;\n            }\n\n            if (updated) {\n              this.bindTexture();\n              gl.texImage2D(\n                this.glTarget,\n                0,\n                this.glFormat,\n                this.glFormat,\n                gl.UNSIGNED_BYTE,\n                textureData\n              );\n            }\n\n            return updated;\n          };\n\n          /**\n           * Binds the texture to the appropriate GL target.\n           * @method bindTexture\n           */\n          p5.Texture.prototype.bindTexture = function() {\n            // bind texture using gl context + glTarget and\n            // generated gl texture object\n            var gl = this._renderer.GL;\n            gl.bindTexture(this.glTarget, this.glTex);\n\n            return this;\n          };\n\n          /**\n           * Unbinds the texture from the appropriate GL target.\n           * @method unbindTexture\n           */\n          p5.Texture.prototype.unbindTexture = function() {\n            // unbind per above, disable texturing on glTarget\n            var gl = this._renderer.GL;\n            gl.bindTexture(this.glTarget, null);\n          };\n\n          /**\n           * Sets how a texture is be interpolated when upscaled or downscaled.\n           * Nearest filtering uses nearest neighbor scaling when interpolating\n           * Linear filtering uses WebGL's linear scaling when interpolating\n           * @method setInterpolation\n           * @param {String} downScale Specifies the texture filtering when\n           *                           textures are shrunk. Options are LINEAR or NEAREST\n           * @param {String} upScale Specifies the texture filtering when\n           *                         textures are magnified. Options are LINEAR or NEAREST\n           * @todo implement mipmapping filters\n           */\n          p5.Texture.prototype.setInterpolation = function(downScale, upScale) {\n            var gl = this._renderer.GL;\n\n            if (downScale === constants.NEAREST) {\n              this.glMinFilter = gl.NEAREST;\n            } else {\n              this.glMinFilter = gl.LINEAR;\n            }\n\n            if (upScale === constants.NEAREST) {\n              this.glMagFilter = gl.NEAREST;\n            } else {\n              this.glMagFilter = gl.LINEAR;\n            }\n\n            this.bindTexture();\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.glMinFilter);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.glMagFilter);\n            this.unbindTexture();\n          };\n\n          /**\n           * Sets the texture wrapping mode. This controls how textures behave\n           * when their uv's go outside of the 0 - 1 range. There are three options:\n           * CLAMP, REPEAT, and MIRROR. REPEAT & MIRROR are only available if the texture\n           * is a power of two size (128, 256, 512, 1024, etc.).\n           * @method setWrapMode\n           * @param {String} wrapX Controls the horizontal texture wrapping behavior\n           * @param {String} wrapY Controls the vertical texture wrapping behavior\n           */\n          p5.Texture.prototype.setWrapMode = function(wrapX, wrapY) {\n            var gl = this._renderer.GL;\n\n            // for webgl 1 we need to check if the texture is power of two\n            // if it isn't we will set the wrap mode to CLAMP\n            // webgl2 will support npot REPEAT and MIRROR but we don't check for it yet\n            var isPowerOfTwo = function isPowerOfTwo(x) {\n              return (x & (x - 1)) === 0;\n            };\n\n            var widthPowerOfTwo = isPowerOfTwo(this.width);\n            var heightPowerOfTwo = isPowerOfTwo(this.height);\n\n            if (wrapX === constants.REPEAT) {\n              if (widthPowerOfTwo && heightPowerOfTwo) {\n                this.glWrapS = gl.REPEAT;\n              } else {\n                console.warn(\n                  'You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead'\n                );\n\n                this.glWrapS = gl.CLAMP_TO_EDGE;\n              }\n            } else if (wrapX === constants.MIRROR) {\n              if (widthPowerOfTwo && heightPowerOfTwo) {\n                this.glWrapS = gl.MIRRORED_REPEAT;\n              } else {\n                console.warn(\n                  'You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead'\n                );\n\n                this.glWrapS = gl.CLAMP_TO_EDGE;\n              }\n            } else {\n              // falling back to default if didn't get a proper mode\n              this.glWrapS = gl.CLAMP_TO_EDGE;\n            }\n\n            if (wrapY === constants.REPEAT) {\n              if (widthPowerOfTwo && heightPowerOfTwo) {\n                this.glWrapT = gl.REPEAT;\n              } else {\n                console.warn(\n                  'You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead'\n                );\n\n                this.glWrapT = gl.CLAMP_TO_EDGE;\n              }\n            } else if (wrapY === constants.MIRROR) {\n              if (widthPowerOfTwo && heightPowerOfTwo) {\n                this.glWrapT = gl.MIRRORED_REPEAT;\n              } else {\n                console.warn(\n                  'You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead'\n                );\n\n                this.glWrapT = gl.CLAMP_TO_EDGE;\n              }\n            } else {\n              // falling back to default if didn't get a proper mode\n              this.glWrapT = gl.CLAMP_TO_EDGE;\n            }\n\n            this.bindTexture();\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.glWrapS);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.glWrapT);\n            this.unbindTexture();\n          };\n\n          module.exports = p5.Texture;\n        },\n        { '../core/constants': 18, '../core/main': 24 }\n      ],\n      78: [\n        function(_dereq_, module, exports) {\n          'use strict';\n\n          var p5 = _dereq_('../core/main');\n          var constants = _dereq_('../core/constants');\n          _dereq_('./p5.Shader');\n          _dereq_('./p5.RendererGL.Retained');\n\n          // Text/Typography\n          // @TODO:\n          p5.RendererGL.prototype._applyTextProperties = function() {\n            //@TODO finish implementation\n            //console.error('text commands not yet implemented in webgl');\n          };\n\n          p5.RendererGL.prototype.textWidth = function(s) {\n            if (this._isOpenType()) {\n              return this._textFont._textWidth(s, this._textSize);\n            }\n\n            return 0; // TODO: error\n          };\n\n          // rendering constants\n\n          // the number of rows/columns dividing each glyph\n          var charGridWidth = 9;\n          var charGridHeight = charGridWidth;\n\n          // size of the image holding the bezier stroke info\n          var strokeImageWidth = 64;\n          var strokeImageHeight = 64;\n\n          // size of the image holding the stroke indices for each row/col\n          var gridImageWidth = 64;\n          var gridImageHeight = 64;\n\n          // size of the image holding the offset/length of each row/col stripe\n          var cellImageWidth = 64;\n          var cellImageHeight = 64;\n\n          /**\n           * @private\n           * @class ImageInfos\n           * @param {Integer} width\n           * @param {Integer} height\n           *\n           * the ImageInfos class holds a list of ImageDatas of a given size.\n           */\n          function ImageInfos(width, height) {\n            this.width = width;\n            this.height = height;\n            this.infos = []; // the list of images\n\n            /**\n             *\n             * @method findImage\n             * @param {Integer} space\n             * @return {Object} contains the ImageData, and pixel index into that\n             *                  ImageData where the free space was allocated.\n             *\n             * finds free space of a given size in the ImageData list\n             */\n            this.findImage = function(space) {\n              var imageSize = this.width * this.height;\n              if (space > imageSize) throw new Error('font is too complex to render in 3D');\n\n              // search through the list of images, looking for one with\n              // anough unused space.\n              var imageInfo, imageData;\n              for (var ii = this.infos.length - 1; ii >= 0; --ii) {\n                var imageInfoTest = this.infos[ii];\n                if (imageInfoTest.index + space < imageSize) {\n                  // found one\n                  imageInfo = imageInfoTest;\n                  imageData = imageInfoTest.imageData;\n                  break;\n                }\n              }\n\n              if (!imageInfo) {\n                try {\n                  // create a new image\n                  imageData = new ImageData(this.width, this.height);\n                } catch (err) {\n                  // for browsers that don't support ImageData constructors (ie IE11)\n                  // create an ImageData using the old method\n                  var canvas = document.getElementsByTagName('canvas')[0];\n                  var created = !canvas;\n                  if (!canvas) {\n                    // create a temporary canvas\n                    canvas = document.createElement('canvas');\n                    canvas.style.display = 'none';\n                    document.body.appendChild(canvas);\n                  }\n                  var ctx = canvas.getContext('2d');\n                  if (ctx) {\n                    imageData = ctx.createImageData(this.width, this.height);\n                  }\n                  if (created) {\n                    // distroy the temporary canvas, if necessary\n                    document.body.removeChild(canvas);\n                  }\n                }\n                // construct & dd the new image info\n                imageInfo = { index: 0, imageData: imageData };\n                this.infos.push(imageInfo);\n              }\n\n              var index = imageInfo.index;\n              imageInfo.index += space; // move to the start of the next image\n              imageData._dirty = true;\n              return { imageData: imageData, index: index };\n            };\n          }\n\n          /**\n           * @function setPixel\n           * @param {Object} imageInfo\n           * @param {Number} r\n           * @param {Number} g\n           * @param {Number} b\n           * @param {Number} a\n           *\n           * writes the next pixel into an indexed ImageData\n           */\n          function setPixel(imageInfo, r, g, b, a) {\n            var imageData = imageInfo.imageData;\n            var pixels = imageData.data;\n            var index = imageInfo.index++ * 4;\n            pixels[index++] = r;\n            pixels[index++] = g;\n            pixels[index++] = b;\n            pixels[index++] = a;\n          }\n\n          var SQRT3 = Math.sqrt(3);\n\n          /**\n           * @private\n           * @class FontInfo\n           * @param {Object} font an opentype.js font object\n           *\n           * contains cached images and glyph information for an opentype font\n           */\n          var FontInfo = function FontInfo(font) {\n            this.font = font;\n            // the bezier curve coordinates\n            this.strokeImageInfos = new ImageInfos(strokeImageWidth, strokeImageHeight);\n            // lists of curve indices for each row/column slice\n            this.colDimImageInfos = new ImageInfos(gridImageWidth, gridImageHeight);\n            this.rowDimImageInfos = new ImageInfos(gridImageWidth, gridImageHeight);\n            // the offset & length of each row/col slice in the glyph\n            this.colCellImageInfos = new ImageInfos(cellImageWidth, cellImageHeight);\n            this.rowCellImageInfos = new ImageInfos(cellImageWidth, cellImageHeight);\n\n            // the cached information for each glyph\n            this.glyphInfos = {};\n\n            /**\n             * @method getGlyphInfo\n             * @param {Glyph} glyph the x positions of points in the curve\n             * @returns {Object} the glyphInfo for that glyph\n             *\n             * calculates rendering info for a glyph, including the curve information,\n             * row & column stripes compiled into textures.\n             */\n\n            this.getGlyphInfo = function(glyph) {\n              // check the cache\n              var gi = this.glyphInfos[glyph.index];\n              if (gi) return gi;\n\n              // get the bounding box of the glyph from opentype.js\n              var bb = glyph.getBoundingBox();\n              var xMin = bb.x1;\n              var yMin = bb.y1;\n              var gWidth = bb.x2 - xMin;\n              var gHeight = bb.y2 - yMin;\n              var cmds = glyph.path.commands;\n              // don't bother rendering invisible glyphs\n              if (gWidth === 0 || gHeight === 0 || !cmds.length) {\n                return (this.glyphInfos[glyph.index] = {});\n              }\n\n              var i;\n              var strokes = []; // the strokes in this glyph\n              var rows = []; // the indices of strokes in each row\n              var cols = []; // the indices of strokes in each column\n              for (i = charGridWidth - 1; i >= 0; --i) {\n                cols.push([]);\n              }\n              for (i = charGridHeight - 1; i >= 0; --i) {\n                rows.push([]);\n              }\n\n              /**\n               * @function push\n               * @param {Number[]} xs the x positions of points in the curve\n               * @param {Number[]} ys the y positions of points in the curve\n               * @param {Object} v    the curve information\n               *\n               * adds a curve to the rows & columns that it intersects with\n               */\n              function push(xs, ys, v) {\n                var index = strokes.length; // the index of this stroke\n                strokes.push(v); // add this stroke to the list\n\n                /**\n                 * @function minMax\n                 * @param {Number[]} rg the list of values to compare\n                 * @param {Number} min the initial minimum value\n                 * @param {Number} max the initial maximum value\n                 *\n                 * find the minimum & maximum value in a list of values\n                 */\n                function minMax(rg, min, max) {\n                  for (var i = rg.length; i-- > 0; ) {\n                    var v = rg[i];\n                    if (min > v) min = v;\n                    if (max < v) max = v;\n                  }\n                  return { min: min, max: max };\n                }\n\n                // loop through the rows & columns that the curve intersects\n                // adding the curve to those slices\n                var mmX = minMax(xs, 1, 0);\n                var ixMin = Math.max(Math.floor(mmX.min * charGridWidth), 0);\n                var ixMax = Math.min(Math.ceil(mmX.max * charGridWidth), charGridWidth);\n                for (var iCol = ixMin; iCol < ixMax; ++iCol) {\n                  cols[iCol].push(index);\n                }\n\n                var mmY = minMax(ys, 1, 0);\n                var iyMin = Math.max(Math.floor(mmY.min * charGridHeight), 0);\n                var iyMax = Math.min(Math.ceil(mmY.max * charGridHeight), charGridHeight);\n                for (var iRow = iyMin; iRow < iyMax; ++iRow) {\n                  rows[iRow].push(index);\n                }\n              }\n\n              /**\n               * @function clamp\n               * @param {Number} v the value to clamp\n               * @param {Number} min the minimum value\n               * @param {Number} max the maxmimum value\n               *\n               * clamps a value between a minimum & maximum value\n               */\n              function clamp(v, min, max) {\n                if (v < min) return min;\n                if (v > max) return max;\n                return v;\n              }\n\n              /**\n               * @function byte\n               * @param {Number} v the value to scale\n               *\n               * converts a floating-point number in the range 0-1 to a byte 0-255\n               */\n              function byte(v) {\n                return clamp(255 * v, 0, 255);\n              }\n\n              /**\n               * @private\n               * @class Cubic\n               * @param {Number} p0 the start point of the curve\n               * @param {Number} c0 the first control point\n               * @param {Number} c1 the second control point\n               * @param {Number} p1 the end point\n               *\n               * a cubic curve\n               */\n              function Cubic(p0, c0, c1, p1) {\n                this.p0 = p0;\n                this.c0 = c0;\n                this.c1 = c1;\n                this.p1 = p1;\n\n                /**\n                 * @method toQuadratic\n                 * @return {Object} the quadratic approximation\n                 *\n                 * converts the cubic to a quadtratic approximation by\n                 * picking an appropriate quadratic control point\n                 */\n                this.toQuadratic = function() {\n                  return {\n                    x: this.p0.x,\n                    y: this.p0.y,\n                    x1: this.p1.x,\n                    y1: this.p1.y,\n                    cx: ((this.c0.x + this.c1.x) * 3 - (this.p0.x + this.p1.x)) / 4,\n                    cy: ((this.c0.y + this.c1.y) * 3 - (this.p0.y + this.p1.y)) / 4\n                  };\n                };\n\n                /**\n                 * @method quadError\n                 * @return {Number} the error\n                 *\n                 * calculates the magnitude of error of this curve's\n                 * quadratic approximation.\n                 */\n                this.quadError = function() {\n                  return (\n                    p5.Vector.sub(\n                      p5.Vector.sub(this.p1, this.p0),\n                      p5.Vector.mult(p5.Vector.sub(this.c1, this.c0), 3)\n                    ).mag() / 2\n                  );\n                };\n\n                /**\n                 * @method split\n                 * @param {Number} t the value (0-1) at which to split\n                 * @return {Cubic} the second part of the curve\n                 *\n                 * splits the cubic into two parts at a point 't' along the curve.\n                 * this cubic keeps its start point and its end point becomes the\n                 * point at 't'. the 'end half is returned.\n                 */\n                this.split = function(t) {\n                  var m1 = p5.Vector.lerp(this.p0, this.c0, t);\n                  var m2 = p5.Vector.lerp(this.c0, this.c1, t);\n                  var mm1 = p5.Vector.lerp(m1, m2, t);\n\n                  this.c1 = p5.Vector.lerp(this.c1, this.p1, t);\n                  this.c0 = p5.Vector.lerp(m2, this.c1, t);\n                  var pt = p5.Vector.lerp(mm1, this.c0, t);\n                  var part1 = new Cubic(this.p0, m1, mm1, pt);\n                  this.p0 = pt;\n                  return part1;\n                };\n\n                /**\n                 * @method splitInflections\n                 * @return {Cubic[]} the non-inflecting pieces of this cubic\n                 *\n                 * returns an array containing 0, 1 or 2 cubics split resulting\n                 * from splitting this cubic at its inflection points.\n                 * this cubic is (potentially) altered and returned in the list.\n                 */\n                this.splitInflections = function() {\n                  var a = p5.Vector.sub(this.c0, this.p0);\n                  var b = p5.Vector.sub(p5.Vector.sub(this.c1, this.c0), a);\n                  var c = p5.Vector.sub(\n                    p5.Vector.sub(p5.Vector.sub(this.p1, this.c1), a),\n                    p5.Vector.mult(b, 2)\n                  );\n\n                  var cubics = [];\n\n                  // find the derivative coefficients\n                  var A = b.x * c.y - b.y * c.x;\n                  if (A !== 0) {\n                    var B = a.x * c.y - a.y * c.x;\n                    var C = a.x * b.y - a.y * b.x;\n                    var disc = B * B - 4 * A * C;\n                    if (disc >= 0) {\n                      if (A < 0) {\n                        A = -A;\n                        B = -B;\n                        C = -C;\n                      }\n\n                      var Q = Math.sqrt(disc);\n                      var t0 = (-B - Q) / (2 * A); // the first inflection point\n                      var t1 = (-B + Q) / (2 * A); // the second inflection point\n\n                      // test if the first inflection point lies on the curve\n                      if (t0 > 0 && t0 < 1) {\n                        // split at the first inflection point\n                        cubics.push(this.split(t0));\n                        // scale t2 into the second part\n                        t1 = 1 - (1 - t1) / (1 - t0);\n                      }\n\n                      // test if the second inflection point lies on the curve\n                      if (t1 > 0 && t1 < 1) {\n                        // split at the second inflection point\n                        cubics.push(this.split(t1));\n                      }\n                    }\n                  }\n\n                  cubics.push(this);\n                  return cubics;\n                };\n              }\n\n              /**\n               * @function cubicToQuadratics\n               * @param {Number} x0\n               * @param {Number} y0\n               * @param {Number} cx0\n               * @param {Number} cy0\n               * @param {Number} cx1\n               * @param {Number} cy1\n               * @param {Number} x1\n               * @param {Number} y1\n               * @returns {Cubic[]} an array of cubics whose quadratic approximations\n               *                    closely match the civen cubic.\n               *\n               * converts a cubic curve to a list of quadratics.\n               */\n              function cubicToQuadratics(x0, y0, cx0, cy0, cx1, cy1, x1, y1) {\n                // create the Cubic object and split it at its inflections\n                var cubics = new Cubic(\n                  new p5.Vector(x0, y0),\n                  new p5.Vector(cx0, cy0),\n                  new p5.Vector(cx1, cy1),\n                  new p5.Vector(x1, y1)\n                ).splitInflections();\n\n                var qs = []; // the final list of quadratics\n                var precision = 30 / SQRT3;\n\n                // for each of the non-inflected pieces of the original cubic\n                for (var i = 0; i < cubics.length; i++) {\n                  var cubic = cubics[i];\n\n                  // the cubic is iteratively split in 3 pieces:\n                  // the first piece is accumulated in 'qs', the result.\n                  // the last piece is accumulated in 'tail', temporarily.\n                  // the middle piece is repeatedly split again, while necessary.\n                  var tail = [];\n\n                  var t3;\n                  for (;;) {\n                    // calculate this cubic's precision\n                    t3 = precision / cubic.quadError();\n                    if (t3 >= 0.5 * 0.5 * 0.5) {\n                      break; // not too bad, we're done\n                    }\n\n                    // find a split point based on the error\n                    var t = Math.pow(t3, 1.0 / 3.0);\n                    // split the cubic in 3\n                    var start = cubic.split(t);\n                    var middle = cubic.split(1 - t / (1 - t));\n\n                    qs.push(start); // the first part\n                    tail.push(cubic); // the last part\n                    cubic = middle; // iterate on the middle piece\n                  }\n\n                  if (t3 < 1) {\n                    // a little excess error, split the middle in two\n                    qs.push(cubic.split(0.5));\n                  }\n                  // add the middle piece to the result\n                  qs.push(cubic);\n\n                  // finally add the tail, reversed, onto the result\n                  Array.prototype.push.apply(qs, tail.reverse());\n                }\n\n                return qs;\n              }\n\n              /**\n               * @function pushLine\n               * @param {Number} x0\n               * @param {Number} y0\n               * @param {Number} x1\n               * @param {Number} y1\n               *\n               * add a straight line to the row/col grid of a glyph\n               */\n              function pushLine(x0, y0, x1, y1) {\n                var mx = (x0 + x1) / 2;\n                var my = (y0 + y1) / 2;\n                push([x0, x1], [y0, y1], { x: x0, y: y0, cx: mx, cy: my });\n              }\n\n              /**\n               * @function samePoint\n               * @param {Number} x0\n               * @param {Number} y0\n               * @param {Number} x1\n               * @param {Number} y1\n               * @return {Boolean} true if the two points are sufficiently close\n               *\n               * tests if two points are close enough to be considered the same\n               */\n              function samePoint(x0, y0, x1, y1) {\n                return Math.abs(x1 - x0) < 0.00001 && Math.abs(y1 - y0) < 0.00001;\n              }\n\n              var x0, y0, xs, ys;\n              for (var iCmd = 0; iCmd < cmds.length; ++iCmd) {\n                var cmd = cmds[iCmd];\n                // scale the coordinates to the range 0-1\n                var x1 = (cmd.x - xMin) / gWidth;\n                var y1 = (cmd.y - yMin) / gHeight;\n\n                // don't bother if this point is the same as the last\n                if (samePoint(x0, y0, x1, y1)) continue;\n\n                switch (cmd.type) {\n                  case 'M': // move\n                    xs = x1;\n                    ys = y1;\n                    break;\n                  case 'L': // line\n                    pushLine(x0, y0, x1, y1);\n                    break;\n                  case 'Q': // quadratic\n                    var cx = (cmd.x1 - xMin) / gWidth;\n                    var cy = (cmd.y1 - yMin) / gHeight;\n                    push([x0, x1, cx], [y0, y1, cy], { x: x0, y: y0, cx: cx, cy: cy });\n                    break;\n                  case 'Z': // end\n                    if (!samePoint(x0, y0, xs, ys)) {\n                      // add an extra line closing the loop, if necessary\n                      pushLine(x0, y0, xs, ys);\n                      strokes.push({ x: xs, y: ys });\n                    } else {\n                      strokes.push({ x: x0, y: y0 });\n                    }\n                    break;\n                  case 'C': // cubic\n                    var cx1 = (cmd.x1 - xMin) / gWidth;\n                    var cy1 = (cmd.y1 - yMin) / gHeight;\n                    var cx2 = (cmd.x2 - xMin) / gWidth;\n                    var cy2 = (cmd.y2 - yMin) / gHeight;\n                    var qs = cubicToQuadratics(x0, y0, cx1, cy1, cx2, cy2, x1, y1);\n                    for (var iq = 0; iq < qs.length; iq++) {\n                      var q = qs[iq].toQuadratic();\n                      push([q.x, q.x1, q.cx], [q.y, q.y1, q.cy], q);\n                    }\n                    break;\n                  default:\n                    throw new Error('unknown command type: ' + cmd.type);\n                }\n\n                x0 = x1;\n                y0 = y1;\n              }\n\n              // allocate space for the strokes\n              var strokeCount = strokes.length;\n              var strokeImageInfo = this.strokeImageInfos.findImage(strokeCount);\n              var strokeOffset = strokeImageInfo.index;\n\n              // fill the stroke image\n              for (var il = 0; il < strokeCount; ++il) {\n                var s = strokes[il];\n                setPixel(strokeImageInfo, byte(s.x), byte(s.y), byte(s.cx), byte(s.cy));\n              }\n\n              /**\n               * @function layout\n               * @param {Number[][]} dim\n               * @param {ImageInfo[]} dimImageInfos\n               * @param {ImageInfo[]} cellImageInfos\n               * @return {Object}\n               *\n               * lays out the curves in a dimension (row or col) into two\n               * images, one for the indices of the curves themselves, and\n               * one containing the offset and length of those index spans.\n               */\n              function layout(dim, dimImageInfos, cellImageInfos) {\n                var dimLength = dim.length; // the number of slices in this dimension\n                var dimImageInfo = dimImageInfos.findImage(dimLength);\n                var dimOffset = dimImageInfo.index;\n                // calculate the total number of stroke indices in this dimension\n                var totalStrokes = 0;\n                for (var id = 0; id < dimLength; ++id) {\n                  totalStrokes += dim[id].length;\n                }\n\n                // allocate space for the stroke indices\n                var cellImageInfo = cellImageInfos.findImage(totalStrokes);\n\n                // for each slice in the glyph\n                for (var i = 0; i < dimLength; ++i) {\n                  var strokeIndices = dim[i];\n                  var strokeCount = strokeIndices.length;\n                  var cellLineIndex = cellImageInfo.index;\n\n                  // write the offset and count into the glyph slice image\n                  setPixel(\n                    dimImageInfo,\n                    cellLineIndex >> 7,\n                    cellLineIndex & 0x7f,\n                    strokeCount >> 7,\n                    strokeCount & 0x7f\n                  );\n\n                  // for each stroke index in that slice\n                  for (var iil = 0; iil < strokeCount; ++iil) {\n                    // write the stroke index into the slice's image\n                    var strokeIndex = strokeIndices[iil] + strokeOffset;\n                    setPixel(cellImageInfo, strokeIndex >> 7, strokeIndex & 0x7f, 0, 0);\n                  }\n                }\n\n                return {\n                  cellImageInfo: cellImageInfo,\n                  dimOffset: dimOffset,\n                  dimImageInfo: dimImageInfo\n                };\n              }\n\n              // initialize the info for this glyph\n              gi = this.glyphInfos[glyph.index] = {\n                glyph: glyph,\n                uGlyphRect: [bb.x1, -bb.y1, bb.x2, -bb.y2],\n                strokeImageInfo: strokeImageInfo,\n                strokes: strokes,\n                colInfo: layout(cols, this.colDimImageInfos, this.colCellImageInfos),\n                rowInfo: layout(rows, this.rowDimImageInfos, this.rowCellImageInfos)\n              };\n\n              gi.uGridOffset = [gi.colInfo.dimOffset, gi.rowInfo.dimOffset];\n              return gi;\n            };\n          };\n\n          p5.RendererGL.prototype._renderText = function(p, line, x, y, maxY) {\n            if (!this._textFont || typeof this._textFont === 'string') {\n              console.log(\n                'WEBGL: you must load and set a font before drawing text. See `loadFont` and `textFont` for more details.'\n              );\n\n              return;\n            }\n            if (y >= maxY || !this._doFill) {\n              return; // don't render lines beyond our maxY position\n            }\n\n            if (!this._isOpenType()) {\n              console.log('WEBGL: only opentype fonts are supported');\n              return p;\n            }\n\n            p.push(); // fix to #803\n\n            // remember this state, so it can be restored later\n            var doStroke = this._doStroke;\n            var drawMode = this.drawMode;\n\n            this._doStroke = false;\n            this.drawMode = constants.TEXTURE;\n\n            // get the cached FontInfo object\n            var font = this._textFont.font;\n            var fontInfo = this._textFont._fontInfo;\n            if (!fontInfo) {\n              fontInfo = this._textFont._fontInfo = new FontInfo(font);\n            }\n\n            // calculate the alignment and move/scale the view accordingly\n            var pos = this._textFont._handleAlignment(this, line, x, y);\n            var fontSize = this._textSize;\n            var scale = fontSize / font.unitsPerEm;\n            this.translate(pos.x, pos.y, 0);\n            this.scale(scale, scale, 1);\n\n            // initialize the font shader\n            var gl = this.GL;\n            var initializeShader = !this._defaultFontShader;\n            var sh = this._getFontShader();\n            sh.init();\n            sh.bindShader(); // first time around, bind the shader fully\n\n            if (initializeShader) {\n              // these are constants, really. just initialize them one-time.\n              sh.setUniform('uGridImageSize', [gridImageWidth, gridImageHeight]);\n              sh.setUniform('uCellsImageSize', [cellImageWidth, cellImageHeight]);\n              sh.setUniform('uStrokeImageSize', [strokeImageWidth, strokeImageHeight]);\n              sh.setUniform('uGridSize', [charGridWidth, charGridHeight]);\n            }\n            this._applyColorBlend(this.curFillColor);\n\n            var g = this.gHash['glyph'];\n            if (!g) {\n              // create the geometry for rendering a quad\n              var geom = (this._textGeom = new p5.Geometry(1, 1, function() {\n                for (var i = 0; i <= 1; i++) {\n                  for (var j = 0; j <= 1; j++) {\n                    this.vertices.push(new p5.Vector(j, i, 0));\n                    this.uvs.push(j, i);\n                  }\n                }\n              }));\n              geom.computeFaces().computeNormals();\n              g = this.createBuffers('glyph', geom);\n            }\n\n            // bind the shader buffers\n            this._prepareBuffers(g, sh, p5.RendererGL._textBuffers);\n            this._bindBuffer(g.indexBuffer, gl.ELEMENT_ARRAY_BUFFER);\n\n            // this will have to do for now...\n            sh.setUniform('uMaterialColor', this.curFillColor);\n\n            try {\n              var dx = 0; // the x position in the line\n              var glyphPrev = null; // the previous glyph, used for kerning\n              // fetch the glyphs in the line of text\n              var glyphs = font.stringToGlyphs(line);\n              for (var ig = 0; ig < glyphs.length; ++ig) {\n                var glyph = glyphs[ig];\n                // kern\n                if (glyphPrev) dx += font.getKerningValue(glyphPrev, glyph);\n\n                var gi = fontInfo.getGlyphInfo(glyph);\n                if (gi.uGlyphRect) {\n                  var rowInfo = gi.rowInfo;\n                  var colInfo = gi.colInfo;\n                  sh.setUniform('uSamplerStrokes', gi.strokeImageInfo.imageData);\n                  sh.setUniform('uSamplerRowStrokes', rowInfo.cellImageInfo.imageData);\n                  sh.setUniform('uSamplerRows', rowInfo.dimImageInfo.imageData);\n                  sh.setUniform('uSamplerColStrokes', colInfo.cellImageInfo.imageData);\n                  sh.setUniform('uSamplerCols', colInfo.dimImageInfo.imageData);\n                  sh.setUniform('uGridOffset', gi.uGridOffset);\n                  sh.setUniform('uGlyphRect', gi.uGlyphRect);\n                  sh.setUniform('uGlyphOffset', dx);\n\n                  sh.bindTextures(); // afterwards, only textures need updating\n\n                  // draw it\n                  gl.drawElements(gl.TRIANGLES, 6, this.GL.UNSIGNED_SHORT, 0);\n                }\n                dx += glyph.advanceWidth;\n                glyphPrev = glyph;\n              }\n            } finally {\n              // clean up\n              sh.unbindShader();\n\n              this._doStroke = doStroke;\n              this.drawMode = drawMode;\n\n              p.pop();\n            }\n\n            this._pixelsState._pixelsDirty = true;\n            return p;\n          };\n        },\n        {\n          '../core/constants': 18,\n          '../core/main': 24,\n          './p5.RendererGL.Retained': 74,\n          './p5.Shader': 76\n        }\n      ]\n    },\n    {},\n    [13]\n  )(13);\n});\n","args":" ","x":417.80719307964654,"y":1985.5009954576954,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":true,"isMediaFile":false,"hidden":true,"exported":true,"isBlob":false,"codeSize":14,"icon":"./static/media/file.5bd43cb8.svg","lineHighLightingStatus":"none"},{"id":"cm1eqn7na","name":"drawLetter","code":"      for (i = 1; i < activeLetter.length; i++) {\n        if (i == 1) {\n          fill(letterColor);\n        } else {\n          fill(backgroundColor);\n        }\n        beginShape();\n        for (j = 0; j < activeLetter[i][0].length; j++) {\n          stretchVal = elong / stretchFactor;\n          if (activeLetter[i][1].includes(j)) {\n            var x = activeLetter[i][0][j][1] * sizeMult + stretchVal + startX;\n            if (activeLetter.length == 2 && i == 1 && x > width - 30) {\n              stopFlag = true;\n            } else if (\n              activeLetter.length > 2 &&\n              i == activeLetter.length - 1 &&\n              x > width - 30 - sizeMult\n            ) {\n              stopFlag = true;\n            }\n          } else if (\n            activeLetter[i].length == 3 &&\n            activeLetter[i][2].includes(j)\n          ) {\n            var x =\n              activeLetter[i][0][j][1] * sizeMult + stretchVal / 2 + startX;\n          } else {\n            var x = activeLetter[i][0][j][1] * sizeMult + startX;\n          }\n          var y = activeLetter[i][0][j][0] * sizeMult + startY;\n          vertex(x, y);\n        }\n        endShape();\n\n        if (stopFlag) {\n          active = false;\n          newLine();\n        }\n      }","args":"startX = 0, startY = 0, activeLetter =letters[\"H\"]","x":100,"y":-60,"editorWidth":578.0000000000001,"editorHeight":600.0000000000001,"iframeWidth":400,"iframeHeight":400,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":684,"isBlob":false,"codeSize":14,"icon":"./static/media/box.310d8273.svg","lineHighLightingStatus":"none"}],"scale":0.4013560321414839,"originX":259.6784745530016,"originY":480.6863880796263,"worldKey":"Stretch_Letters~Soonho","worldEdited":false,"worldPublishTime":"Mon Feb 17 2020 21:18:10 GMT-0800 (Pacific Standard Time)","snapToGrid":true,"linesOn":false,"js":"\nvar letters = {\n  A: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2, 3, 4]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [2, 2],\n        [2, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  B: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 2],\n        [1, 2],\n        [1, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 3],\n        [4, 3],\n        [4, 2],\n        [5, 2],\n        [5, 0]\n      ],\n      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [2, 2],\n        [2, 1]\n      ],\n      [1, 2]\n    ],\n    [\n      [\n        [3, 1],\n        [3, 2],\n        [4, 2],\n        [4, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  C: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [2, 3],\n        [2, 2],\n        [1, 2],\n        [1, 1],\n        [4, 1],\n        [4, 2],\n        [3, 2],\n        [3, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [1, 2, 3, 4, 7, 8, 9, 10]\n    ]\n  ],\n  D: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 2],\n        [1, 2],\n        [1, 3],\n        [4, 3],\n        [4, 2],\n        [5, 2],\n        [5, 0]\n      ],\n      [1, 2, 3, 4, 5, 6]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [4, 2],\n        [4, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  E: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 1],\n        [2, 1],\n        [2, 3],\n        [3, 3],\n        [3, 1],\n        [4, 1],\n        [4, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [1, 2, 5, 6, 9, 10]\n    ]\n  ],\n  F: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 1],\n        [2, 1],\n        [2, 3],\n        [3, 3],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2, 5, 6]\n    ]\n  ],\n  G: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 1],\n        [4, 1],\n        [4, 2],\n        [2, 2],\n        [2, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [1, 2, 5, 6, 7, 8]\n    ]\n  ],\n  H: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [2, 1],\n        [2, 2],\n        [0, 2],\n        [0, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [3, 4, 5, 6, 7, 8]\n    ]\n  ],\n  I: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 2],\n        [4, 2],\n        [4, 3],\n        [5, 3],\n        [5, 0],\n        [4, 0],\n        [4, 1],\n        [1, 1],\n        [1, 0]\n      ],\n      [1, 2, 5, 6],\n      [3, 4, 9, 10]\n    ]\n  ],\n  J: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 2],\n        [5, 2],\n        [5, 0],\n        [4, 0],\n        [4, 1],\n        [1, 1],\n        [1, 0]\n      ],\n      [1, 2],\n      [3, 4, 7, 8]\n    ]\n  ],\n  K: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [2, 1],\n        [2, 2],\n        [0, 2],\n        [0, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    ]\n  ],\n  L: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [4, 1],\n        [4, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [3, 4]\n    ]\n  ],\n  M: [\n    [5, 5],\n    [\n      [\n        [1, 0],\n        [1, 1],\n        [0, 1],\n        [0, 2],\n        [1, 2],\n        [1, 3],\n        [0, 3],\n        [0, 4],\n        [1, 4],\n        [1, 5],\n        [5, 5],\n        [5, 4],\n        [1, 4],\n        [1, 3],\n        [3, 3],\n        [3, 2],\n        [1, 2],\n        [1, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [7, 8, 9, 10, 11, 12],\n      [3, 4, 5, 6, 13, 14, 15, 16]\n    ]\n  ],\n  N: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [5, 3],\n        [5, 2],\n        [1, 2],\n        [1, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2, 3, 4]\n    ]\n  ],\n  O: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [1, 2]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [4, 2],\n        [4, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  P: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [3, 3],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [2, 2],\n        [2, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  Q: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [5, 3],\n        [5, 2],\n        [4, 2],\n        [4, 0]\n      ],\n      [1, 2, 3, 4]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [3, 2],\n        [3, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  R: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 2],\n        [1, 2],\n        [1, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [2, 2],\n        [2, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  S: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 1],\n        [2, 1],\n        [2, 3],\n        [5, 3],\n        [5, 0],\n        [4, 0],\n        [4, 2],\n        [3, 2],\n        [3, 0]\n      ],\n      [1, 2, 5, 6, 9, 10]\n    ]\n  ],\n  T: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 2],\n        [5, 2],\n        [5, 1],\n        [1, 1],\n        [1, 0]\n      ],\n      [1, 2],\n      [3, 4, 5, 6]\n    ]\n  ],\n  U: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [4, 1],\n        [4, 2],\n        [0, 2],\n        [0, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [3, 4, 5, 6]\n    ]\n  ],\n  V: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [4, 1],\n        [4, 2],\n        [0, 2],\n        [0, 3],\n        [4, 3],\n        [4, 2],\n        [5, 2],\n        [5, 1],\n        [4, 1],\n        [4, 0]\n      ],\n      [3, 4, 5, 6, 7, 8]\n    ]\n  ],\n  W: [\n    [5, 5],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [4, 1],\n        [4, 2],\n        [2, 2],\n        [2, 3],\n        [4, 3],\n        [4, 4],\n        [0, 4],\n        [0, 5],\n        [4, 5],\n        [4, 4],\n        [5, 4],\n        [5, 3],\n        [4, 3],\n        [4, 2],\n        [5, 2],\n        [5, 1],\n        [4, 1],\n        [4, 0]\n      ],\n      [7, 8, 9, 10, 11, 12],\n      [3, 4, 5, 6, 13, 14, 15, 16]\n    ]\n  ],\n  X: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [2, 1],\n        [2, 2],\n        [0, 2],\n        [0, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0],\n        [3, 0],\n        [3, 1],\n        [2, 1],\n        [2, 0]\n      ],\n      [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    ]\n  ],\n  Y: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [2, 1],\n        [2, 2],\n        [0, 2],\n        [0, 3],\n        [5, 3],\n        [5, 0],\n        [4, 0],\n        [4, 2],\n        [3, 2],\n        [3, 0]\n      ],\n      [3, 4, 5, 6, 9, 10]\n    ]\n  ],\n  Z: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 1],\n        [4, 1],\n        [4, 3],\n        [5, 3],\n        [5, 0],\n        [3, 0],\n        [3, 1],\n        [2, 1],\n        [2, 2],\n        [1, 2],\n        [1, 0]\n      ],\n      [1, 2, 3, 4, 7, 8, 13, 14]\n    ]\n  ]\n};\nvar elong = 0;\nvar stretchFactor = 1;\n\n\n\nvar letterW, letterH;\nvar currentLetter;\n\nvar active;\nvar stopFlag;\n\nvar diff = 0;\n\nvar stretchVal;\nvar startX, startY;\n\nvar letterColor = 0;\nvar backgroundColor = 229;\n\nvar sizeMult = 10;\nvar spaceVal = 20;\n\n\nfunction setup(){\n  \n    createCanvas(400, 400);\n    background(backgroundColor);\n    noStroke();\n  \n    startX = 20;\n    startY = 20;\n  \n    active = true;\n    stopFlag = false;\n    currentLetter = \"\";\n  \n}\n\nfunction draw(){\n  \n    if (true) {\n      if (keyIsPressed && keyCode > 64 && keyCode < 91) {\n        var let = key.toUpperCase();\n        if (let == currentLetter || currentLetter == \"\") {\n          currentLetter = let;\n        } else {\n          currentLetter = let;\n          newLetter();\n  \n        }\n  \n        var activeLetter = letters[let];\n  \n        fill(backgroundColor);\n        letterW = activeLetter[0][1] * sizeMult + stretchVal;\n        letterH = activeLetter[0][0] * sizeMult;\n        rect(startX, startY, startX + letterW, startY + letterH); //new frame\n  \n        if (width - startX < activeLetter[0][1] * sizeMult) {\n          newLine();\n        }\n        \n        drawLetter(startX, startY, activeLetter)\n        elong += 5;\n      } else if (!keyIsPressed) {\n        currentLetter = \"\";\n      }\n    }\n    noFill();\n    strokeWeight(2);\n    stroke(0);\n    rect(0, 0, width, height);\n    noStroke();\n  \n}\n\nfunction newLine(){\n  \n    startX = 20;\n    startY += spaceVal + letterH;\n    elong = 0;\n    stopFlag = false;\n  \n}\n\nfunction newLetter(){\n  \n    startX += spaceVal + letterW;\n    elong = 0;\n    active = true;\n  \n}\n\nfunction keyReleased(){\n  \n    if (keyCode == 13) {\n      newLine();\n    } //enter\n    else if (keyCode == 32) {\n      startX += 40;\n    } //space\n    else if (keyCode == 49) {\n      save(\"myCanvas.png\");\n    } else if (keyCode == 50) {\n      reset();\n    } else if (key.toUpperCase() == currentLetter && active) {\n      newLetter();\n    } else if (!active) {\n      active = true;\n    }\n  \n}\n\nfunction reset(){\n  \n    background(backgroundColor);\n    noStroke();\n  \n    startX = 20;\n    startY = 20;\n  \n    active = true;\n    stopFlag = false;\n    currentLetter = \"\";\n  \n}\n\nfunction drawLetter(startX = 0, startY = 0, activeLetter =letters[\"H\"]){\n        for (i = 1; i < activeLetter.length; i++) {\n          if (i == 1) {\n            fill(letterColor);\n          } else {\n            fill(backgroundColor);\n          }\n          beginShape();\n          for (j = 0; j < activeLetter[i][0].length; j++) {\n            stretchVal = elong / stretchFactor;\n            if (activeLetter[i][1].includes(j)) {\n              var x = activeLetter[i][0][j][1] * sizeMult + stretchVal + startX;\n              if (activeLetter.length == 2 && i == 1 && x > width - 30) {\n                stopFlag = true;\n              } else if (\n                activeLetter.length > 2 &&\n                i == activeLetter.length - 1 &&\n                x > width - 30 - sizeMult\n              ) {\n                stopFlag = true;\n              }\n            } else if (\n              activeLetter[i].length == 3 &&\n              activeLetter[i][2].includes(j)\n            ) {\n              var x =\n                activeLetter[i][0][j][1] * sizeMult + stretchVal / 2 + startX;\n            } else {\n              var x = activeLetter[i][0][j][1] * sizeMult + startX;\n            }\n            var y = activeLetter[i][0][j][0] * sizeMult + startY;\n            vertex(x, y);\n          }\n          endShape();\n  \n          if (stopFlag) {\n            active = false;\n            newLine();\n          }\n        }\n}\n","highlightedLines":{}}