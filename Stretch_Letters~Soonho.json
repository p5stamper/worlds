{"stamps":[{"id":"ibav5kwya","name":"var letters = {","code":"var letters = {\n  A: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2, 3, 4]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [2, 2],\n        [2, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  B: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 2],\n        [1, 2],\n        [1, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 3],\n        [4, 3],\n        [4, 2],\n        [5, 2],\n        [5, 0]\n      ],\n      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [2, 2],\n        [2, 1]\n      ],\n      [1, 2]\n    ],\n    [\n      [\n        [3, 1],\n        [3, 2],\n        [4, 2],\n        [4, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  C: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [2, 3],\n        [2, 2],\n        [1, 2],\n        [1, 1],\n        [4, 1],\n        [4, 2],\n        [3, 2],\n        [3, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [1, 2, 3, 4, 7, 8, 9, 10]\n    ]\n  ],\n  D: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 2],\n        [1, 2],\n        [1, 3],\n        [4, 3],\n        [4, 2],\n        [5, 2],\n        [5, 0]\n      ],\n      [1, 2, 3, 4, 5, 6]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [4, 2],\n        [4, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  E: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 1],\n        [2, 1],\n        [2, 3],\n        [3, 3],\n        [3, 1],\n        [4, 1],\n        [4, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [1, 2, 5, 6, 9, 10]\n    ]\n  ],\n  F: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 1],\n        [2, 1],\n        [2, 3],\n        [3, 3],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2, 5, 6]\n    ]\n  ],\n  G: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 1],\n        [4, 1],\n        [4, 2],\n        [2, 2],\n        [2, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [1, 2, 5, 6, 7, 8]\n    ]\n  ],\n  H: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [2, 1],\n        [2, 2],\n        [0, 2],\n        [0, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [3, 4, 5, 6, 7, 8]\n    ]\n  ],\n  I: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 2],\n        [4, 2],\n        [4, 3],\n        [5, 3],\n        [5, 0],\n        [4, 0],\n        [4, 1],\n        [1, 1],\n        [1, 0]\n      ],\n      [1, 2, 5, 6],\n      [3, 4, 9, 10]\n    ]\n  ],\n  J: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 2],\n        [5, 2],\n        [5, 0],\n        [4, 0],\n        [4, 1],\n        [1, 1],\n        [1, 0]\n      ],\n      [1, 2],\n      [3, 4, 7, 8]\n    ]\n  ],\n  K: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [2, 1],\n        [2, 2],\n        [0, 2],\n        [0, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    ]\n  ],\n  L: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [4, 1],\n        [4, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [3, 4]\n    ]\n  ],\n  M: [\n    [5, 5],\n    [\n      [\n        [1, 0],\n        [1, 1],\n        [0, 1],\n        [0, 2],\n        [1, 2],\n        [1, 3],\n        [0, 3],\n        [0, 4],\n        [1, 4],\n        [1, 5],\n        [5, 5],\n        [5, 4],\n        [1, 4],\n        [1, 3],\n        [3, 3],\n        [3, 2],\n        [1, 2],\n        [1, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [7, 8, 9, 10, 11, 12],\n      [3, 4, 5, 6, 13, 14, 15, 16]\n    ]\n  ],\n  N: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [5, 3],\n        [5, 2],\n        [1, 2],\n        [1, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2, 3, 4]\n    ]\n  ],\n  O: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [1, 2]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [4, 2],\n        [4, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  P: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [3, 3],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [2, 2],\n        [2, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  Q: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [5, 3],\n        [5, 2],\n        [4, 2],\n        [4, 0]\n      ],\n      [1, 2, 3, 4]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [3, 2],\n        [3, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  R: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 2],\n        [1, 2],\n        [1, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [2, 2],\n        [2, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  S: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 1],\n        [2, 1],\n        [2, 3],\n        [5, 3],\n        [5, 0],\n        [4, 0],\n        [4, 2],\n        [3, 2],\n        [3, 0]\n      ],\n      [1, 2, 5, 6, 9, 10]\n    ]\n  ],\n  T: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 2],\n        [5, 2],\n        [5, 1],\n        [1, 1],\n        [1, 0]\n      ],\n      [1, 2],\n      [3, 4, 5, 6]\n    ]\n  ],\n  U: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [4, 1],\n        [4, 2],\n        [0, 2],\n        [0, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [3, 4, 5, 6]\n    ]\n  ],\n  V: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [4, 1],\n        [4, 2],\n        [0, 2],\n        [0, 3],\n        [4, 3],\n        [4, 2],\n        [5, 2],\n        [5, 1],\n        [4, 1],\n        [4, 0]\n      ],\n      [3, 4, 5, 6, 7, 8]\n    ]\n  ],\n  W: [\n    [5, 5],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [4, 1],\n        [4, 2],\n        [2, 2],\n        [2, 3],\n        [4, 3],\n        [4, 4],\n        [0, 4],\n        [0, 5],\n        [4, 5],\n        [4, 4],\n        [5, 4],\n        [5, 3],\n        [4, 3],\n        [4, 2],\n        [5, 2],\n        [5, 1],\n        [4, 1],\n        [4, 0]\n      ],\n      [7, 8, 9, 10, 11, 12],\n      [3, 4, 5, 6, 13, 14, 15, 16]\n    ]\n  ],\n  X: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [2, 1],\n        [2, 2],\n        [0, 2],\n        [0, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0],\n        [3, 0],\n        [3, 1],\n        [2, 1],\n        [2, 0]\n      ],\n      [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    ]\n  ],\n  Y: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [2, 1],\n        [2, 2],\n        [0, 2],\n        [0, 3],\n        [5, 3],\n        [5, 0],\n        [4, 0],\n        [4, 2],\n        [3, 2],\n        [3, 0]\n      ],\n      [3, 4, 5, 6, 9, 10]\n    ]\n  ],\n  Z: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 1],\n        [4, 1],\n        [4, 3],\n        [5, 3],\n        [5, 0],\n        [3, 0],\n        [3, 1],\n        [2, 1],\n        [2, 2],\n        [1, 2],\n        [1, 0]\n      ],\n      [1, 2, 3, 4, 7, 8, 13, 14]\n    ]\n  ]\n};\nvar elong = 0;\nvar stretchFactor = 1;","args":" ","x":380,"y":-740,"editorWidth":218,"editorHeight":199.99999999999977,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":667,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"p9e53mxoz","name":"var letterW, le...","code":"var letterW, letterH;\nvar currentLetter;\n\nvar active;\nvar stopFlag;\n\nvar diff = 0;\n\nvar stretchVal;\nvar startX, startY;\n\nvar letterColor = 0;\nvar backgroundColor = 229;\n\nvar sizeMult = 10;\nvar spaceVal = 20;","args":" ","x":99.83828186769279,"y":-734.041209999785,"editorWidth":218.16171813230721,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":666,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"xyeb43nt3","name":"setup","code":"\n  createCanvas(400, 400);\n  background(backgroundColor);\n  noStroke();\n\n  startX = 20;\n  startY = 20;\n\n  active = true;\n  stopFlag = false;\n  currentLetter = \"\";\n","args":"","x":1330.9360381832712,"y":-9.822556537670923,"editorWidth":300,"editorHeight":200,"iframeWidth":145.0116582955174,"iframeHeight":141.47015354962176,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":true,"exported":true,"zIndex":657,"isBlob":false,"codeSize":14,"icon":"./static/media/tool.d68b9b61.svg","lineHighLightingStatus":"none"},{"id":"kskejrmci","name":"draw","code":"\n  if (true) {\n    if (keyIsPressed && keyCode > 64 && keyCode < 91) {\n      var let = key.toUpperCase();\n      if (let == currentLetter || currentLetter == \"\") {\n        currentLetter = let;\n      } else {\n        currentLetter = let;\n        newLetter();\n\n      }\n\n      var activeLetter = letters[let];\n\n      fill(backgroundColor);\n      letterW = activeLetter[0][1] * sizeMult + stretchVal;\n      letterH = activeLetter[0][0] * sizeMult;\n      rect(startX, startY, startX + letterW, startY + letterH); //new frame\n\n      if (width - startX < activeLetter[0][1] * sizeMult) {\n        newLine();\n      }\n      \n      drawLetter(startX, startY, activeLetter)\n      elong += 5;\n    } else if (!keyIsPressed) {\n      currentLetter = \"\";\n    }\n  }\n  noFill();\n  strokeWeight(2);\n  stroke(0);\n  rect(0, 0, width, height);\n  noStroke();\n","args":"","x":1140,"y":-60,"editorWidth":577.9999999999999,"editorHeight":600,"iframeWidth":400,"iframeHeight":400,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":685,"isBlob":false,"codeSize":14,"icon":"./static/media/tool.d68b9b61.svg","lineHighLightingStatus":"none"},{"id":"aophxbnxv","name":"newLine","code":"\n  startX = 20;\n  startY += spaceVal + letterH;\n  elong = 0;\n  stopFlag = false;\n","args":"","x":980,"y":-440,"editorWidth":300,"editorHeight":200,"iframeWidth":80,"iframeHeight":80,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":678,"isBlob":false,"codeSize":14,"icon":"./static/media/box.310d8273.svg","lineHighLightingStatus":"none"},{"id":"b1eb09l37","name":"newLetter","code":"\n  startX += spaceVal + letterW;\n  elong = 0;\n  active = true;\n","args":"","x":540,"y":-440,"editorWidth":300,"editorHeight":200,"iframeWidth":80,"iframeHeight":80,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":677,"isBlob":false,"codeSize":14,"icon":"./static/media/box.310d8273.svg","lineHighLightingStatus":"none"},{"id":"2gerglsoz","name":"keyReleased","code":"\n  if (keyCode == 13) {\n    newLine();\n  } //enter\n  else if (keyCode == 32) {\n    startX += 40;\n  } //space\n  else if (keyCode == 49) {\n    save(\"myCanvas.png\");\n  } else if (keyCode == 50) {\n    reset();\n  } else if (key.toUpperCase() == currentLetter && active) {\n    newLetter();\n  } else if (!active) {\n    active = true;\n  }\n","args":"","x":2180,"y":-60,"editorWidth":300,"editorHeight":280,"iframeWidth":80,"iframeHeight":80,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":686,"isBlob":false,"codeSize":14,"icon":"./static/media/bell.86facacc.svg","lineHighLightingStatus":"none"},{"id":"umaqyrpvl","name":"reset","code":"\n  background(backgroundColor);\n  noStroke();\n\n  startX = 20;\n  startY = 20;\n\n  active = true;\n  stopFlag = false;\n  currentLetter = \"\";\n","args":"","x":100,"y":-440,"editorWidth":298,"editorHeight":200,"iframeWidth":80,"iframeHeight":80,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":674,"isBlob":false,"codeSize":14,"icon":"./static/media/box.310d8273.svg","lineHighLightingStatus":"none"},{"id":"aopr5tpxu","name":"index.html","code":"<!DOCTYPE html><html><head>\n    <script src=\"https://cdn.jsdelivr.net/npm/p5\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.1/addons/p5.dom.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.1/addons/p5.sound.min.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n    <meta charset=\"utf-8\">\n\n  </head>\n  <body>\n    <script src=\"sketch.js\"></script>\n  \n\n</body></html>","args":" ","x":779.8071930796466,"y":1605.5009954576954,"editorWidth":300,"editorHeight":200,"iframeWidth":100,"iframeHeight":100,"isIndex":true,"isTxtFile":false,"isMediaFile":false,"hidden":true,"exported":true,"isBlob":false,"codeSize":14,"icon":"./static/media/layout.8a437d55.svg","lineHighLightingStatus":"none"},{"id":"gkxydkf8g","name":"style.css","code":"html, body {\n  margin: 0;\n  padding: 0;\n}\ncanvas {\n  display: block;\n}\n","args":" ","x":1603.8071930796466,"y":1605.5009954576954,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":true,"isMediaFile":false,"hidden":true,"exported":true,"isBlob":false,"codeSize":14,"icon":"./static/media/file.5bd43cb8.svg","lineHighLightingStatus":"none"},{"id":"cm1eqn7na","name":"drawLetter","code":"      for (i = 1; i < activeLetter.length; i++) {\n        if (i == 1) {\n          fill(letterColor);\n        } else {\n          fill(backgroundColor);\n        }\n        beginShape();\n        for (j = 0; j < activeLetter[i][0].length; j++) {\n          stretchVal = elong / stretchFactor;\n          if (activeLetter[i][1].includes(j)) {\n            var x = activeLetter[i][0][j][1] * sizeMult + stretchVal + startX;\n            if (activeLetter.length == 2 && i == 1 && x > width - 30) {\n              stopFlag = true;\n            } else if (\n              activeLetter.length > 2 &&\n              i == activeLetter.length - 1 &&\n              x > width - 30 - sizeMult\n            ) {\n              stopFlag = true;\n            }\n          } else if (\n            activeLetter[i].length == 3 &&\n            activeLetter[i][2].includes(j)\n          ) {\n            var x =\n              activeLetter[i][0][j][1] * sizeMult + stretchVal / 2 + startX;\n          } else {\n            var x = activeLetter[i][0][j][1] * sizeMult + startX;\n          }\n          var y = activeLetter[i][0][j][0] * sizeMult + startY;\n          vertex(x, y);\n        }\n        endShape();\n\n        if (stopFlag) {\n          active = false;\n          newLine();\n        }\n      }","args":"startX = 0, startY = 0, activeLetter =letters[\"H\"]","x":100,"y":-60,"editorWidth":578.0000000000001,"editorHeight":600.0000000000001,"iframeWidth":400,"iframeHeight":400,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":684,"isBlob":false,"codeSize":14,"icon":"./static/media/box.310d8273.svg","lineHighLightingStatus":"none"}],"scale":0.4013560321414839,"originX":259.6784745530016,"originY":480.6863880796263,"worldKey":"Stretch_Letters~Soonho","worldEdited":false,"worldPublishTime":"Mon Feb 17 2020 21:26:23 GMT-0800 (Pacific Standard Time)","snapToGrid":true,"linesOn":false,"js":"\nvar letters = {\n  A: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2, 3, 4]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [2, 2],\n        [2, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  B: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 2],\n        [1, 2],\n        [1, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 3],\n        [4, 3],\n        [4, 2],\n        [5, 2],\n        [5, 0]\n      ],\n      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [2, 2],\n        [2, 1]\n      ],\n      [1, 2]\n    ],\n    [\n      [\n        [3, 1],\n        [3, 2],\n        [4, 2],\n        [4, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  C: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [2, 3],\n        [2, 2],\n        [1, 2],\n        [1, 1],\n        [4, 1],\n        [4, 2],\n        [3, 2],\n        [3, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [1, 2, 3, 4, 7, 8, 9, 10]\n    ]\n  ],\n  D: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 2],\n        [1, 2],\n        [1, 3],\n        [4, 3],\n        [4, 2],\n        [5, 2],\n        [5, 0]\n      ],\n      [1, 2, 3, 4, 5, 6]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [4, 2],\n        [4, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  E: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 1],\n        [2, 1],\n        [2, 3],\n        [3, 3],\n        [3, 1],\n        [4, 1],\n        [4, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [1, 2, 5, 6, 9, 10]\n    ]\n  ],\n  F: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 1],\n        [2, 1],\n        [2, 3],\n        [3, 3],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2, 5, 6]\n    ]\n  ],\n  G: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 1],\n        [4, 1],\n        [4, 2],\n        [2, 2],\n        [2, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [1, 2, 5, 6, 7, 8]\n    ]\n  ],\n  H: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [2, 1],\n        [2, 2],\n        [0, 2],\n        [0, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [3, 4, 5, 6, 7, 8]\n    ]\n  ],\n  I: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 2],\n        [4, 2],\n        [4, 3],\n        [5, 3],\n        [5, 0],\n        [4, 0],\n        [4, 1],\n        [1, 1],\n        [1, 0]\n      ],\n      [1, 2, 5, 6],\n      [3, 4, 9, 10]\n    ]\n  ],\n  J: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 2],\n        [5, 2],\n        [5, 0],\n        [4, 0],\n        [4, 1],\n        [1, 1],\n        [1, 0]\n      ],\n      [1, 2],\n      [3, 4, 7, 8]\n    ]\n  ],\n  K: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [2, 1],\n        [2, 2],\n        [0, 2],\n        [0, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    ]\n  ],\n  L: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [4, 1],\n        [4, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [3, 4]\n    ]\n  ],\n  M: [\n    [5, 5],\n    [\n      [\n        [1, 0],\n        [1, 1],\n        [0, 1],\n        [0, 2],\n        [1, 2],\n        [1, 3],\n        [0, 3],\n        [0, 4],\n        [1, 4],\n        [1, 5],\n        [5, 5],\n        [5, 4],\n        [1, 4],\n        [1, 3],\n        [3, 3],\n        [3, 2],\n        [1, 2],\n        [1, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [7, 8, 9, 10, 11, 12],\n      [3, 4, 5, 6, 13, 14, 15, 16]\n    ]\n  ],\n  N: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [5, 3],\n        [5, 2],\n        [1, 2],\n        [1, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2, 3, 4]\n    ]\n  ],\n  O: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [1, 2]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [4, 2],\n        [4, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  P: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [3, 3],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [2, 2],\n        [2, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  Q: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [5, 3],\n        [5, 2],\n        [4, 2],\n        [4, 0]\n      ],\n      [1, 2, 3, 4]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [3, 2],\n        [3, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  R: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 2],\n        [1, 2],\n        [1, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0]\n      ],\n      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    ],\n    [\n      [\n        [1, 1],\n        [1, 2],\n        [2, 2],\n        [2, 1]\n      ],\n      [1, 2]\n    ]\n  ],\n  S: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 1],\n        [2, 1],\n        [2, 3],\n        [5, 3],\n        [5, 0],\n        [4, 0],\n        [4, 2],\n        [3, 2],\n        [3, 0]\n      ],\n      [1, 2, 5, 6, 9, 10]\n    ]\n  ],\n  T: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [1, 3],\n        [1, 2],\n        [5, 2],\n        [5, 1],\n        [1, 1],\n        [1, 0]\n      ],\n      [1, 2],\n      [3, 4, 5, 6]\n    ]\n  ],\n  U: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [4, 1],\n        [4, 2],\n        [0, 2],\n        [0, 3],\n        [5, 3],\n        [5, 0]\n      ],\n      [3, 4, 5, 6]\n    ]\n  ],\n  V: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [4, 1],\n        [4, 2],\n        [0, 2],\n        [0, 3],\n        [4, 3],\n        [4, 2],\n        [5, 2],\n        [5, 1],\n        [4, 1],\n        [4, 0]\n      ],\n      [3, 4, 5, 6, 7, 8]\n    ]\n  ],\n  W: [\n    [5, 5],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [4, 1],\n        [4, 2],\n        [2, 2],\n        [2, 3],\n        [4, 3],\n        [4, 4],\n        [0, 4],\n        [0, 5],\n        [4, 5],\n        [4, 4],\n        [5, 4],\n        [5, 3],\n        [4, 3],\n        [4, 2],\n        [5, 2],\n        [5, 1],\n        [4, 1],\n        [4, 0]\n      ],\n      [7, 8, 9, 10, 11, 12],\n      [3, 4, 5, 6, 13, 14, 15, 16]\n    ]\n  ],\n  X: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [2, 1],\n        [2, 2],\n        [0, 2],\n        [0, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 3],\n        [5, 3],\n        [5, 2],\n        [3, 2],\n        [3, 1],\n        [5, 1],\n        [5, 0],\n        [3, 0],\n        [3, 1],\n        [2, 1],\n        [2, 0]\n      ],\n      [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    ]\n  ],\n  Y: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 1],\n        [2, 1],\n        [2, 2],\n        [0, 2],\n        [0, 3],\n        [5, 3],\n        [5, 0],\n        [4, 0],\n        [4, 2],\n        [3, 2],\n        [3, 0]\n      ],\n      [3, 4, 5, 6, 9, 10]\n    ]\n  ],\n  Z: [\n    [5, 3],\n    [\n      [\n        [0, 0],\n        [0, 3],\n        [2, 3],\n        [2, 2],\n        [3, 2],\n        [3, 1],\n        [4, 1],\n        [4, 3],\n        [5, 3],\n        [5, 0],\n        [3, 0],\n        [3, 1],\n        [2, 1],\n        [2, 2],\n        [1, 2],\n        [1, 0]\n      ],\n      [1, 2, 3, 4, 7, 8, 13, 14]\n    ]\n  ]\n};\nvar elong = 0;\nvar stretchFactor = 1;\n\n\n\nvar letterW, letterH;\nvar currentLetter;\n\nvar active;\nvar stopFlag;\n\nvar diff = 0;\n\nvar stretchVal;\nvar startX, startY;\n\nvar letterColor = 0;\nvar backgroundColor = 229;\n\nvar sizeMult = 10;\nvar spaceVal = 20;\n\n\nfunction setup(){\n  \n    createCanvas(400, 400);\n    background(backgroundColor);\n    noStroke();\n  \n    startX = 20;\n    startY = 20;\n  \n    active = true;\n    stopFlag = false;\n    currentLetter = \"\";\n  \n}\n\nfunction draw(){\n  \n    if (true) {\n      if (keyIsPressed && keyCode > 64 && keyCode < 91) {\n        var let = key.toUpperCase();\n        if (let == currentLetter || currentLetter == \"\") {\n          currentLetter = let;\n        } else {\n          currentLetter = let;\n          newLetter();\n  \n        }\n  \n        var activeLetter = letters[let];\n  \n        fill(backgroundColor);\n        letterW = activeLetter[0][1] * sizeMult + stretchVal;\n        letterH = activeLetter[0][0] * sizeMult;\n        rect(startX, startY, startX + letterW, startY + letterH); //new frame\n  \n        if (width - startX < activeLetter[0][1] * sizeMult) {\n          newLine();\n        }\n        \n        drawLetter(startX, startY, activeLetter)\n        elong += 5;\n      } else if (!keyIsPressed) {\n        currentLetter = \"\";\n      }\n    }\n    noFill();\n    strokeWeight(2);\n    stroke(0);\n    rect(0, 0, width, height);\n    noStroke();\n  \n}\n\nfunction newLine(){\n  \n    startX = 20;\n    startY += spaceVal + letterH;\n    elong = 0;\n    stopFlag = false;\n  \n}\n\nfunction newLetter(){\n  \n    startX += spaceVal + letterW;\n    elong = 0;\n    active = true;\n  \n}\n\nfunction keyReleased(){\n  \n    if (keyCode == 13) {\n      newLine();\n    } //enter\n    else if (keyCode == 32) {\n      startX += 40;\n    } //space\n    else if (keyCode == 49) {\n      save(\"myCanvas.png\");\n    } else if (keyCode == 50) {\n      reset();\n    } else if (key.toUpperCase() == currentLetter && active) {\n      newLetter();\n    } else if (!active) {\n      active = true;\n    }\n  \n}\n\nfunction reset(){\n  \n    background(backgroundColor);\n    noStroke();\n  \n    startX = 20;\n    startY = 20;\n  \n    active = true;\n    stopFlag = false;\n    currentLetter = \"\";\n  \n}\n\nfunction drawLetter(startX = 0, startY = 0, activeLetter =letters[\"H\"]){\n        for (i = 1; i < activeLetter.length; i++) {\n          if (i == 1) {\n            fill(letterColor);\n          } else {\n            fill(backgroundColor);\n          }\n          beginShape();\n          for (j = 0; j < activeLetter[i][0].length; j++) {\n            stretchVal = elong / stretchFactor;\n            if (activeLetter[i][1].includes(j)) {\n              var x = activeLetter[i][0][j][1] * sizeMult + stretchVal + startX;\n              if (activeLetter.length == 2 && i == 1 && x > width - 30) {\n                stopFlag = true;\n              } else if (\n                activeLetter.length > 2 &&\n                i == activeLetter.length - 1 &&\n                x > width - 30 - sizeMult\n              ) {\n                stopFlag = true;\n              }\n            } else if (\n              activeLetter[i].length == 3 &&\n              activeLetter[i][2].includes(j)\n            ) {\n              var x =\n                activeLetter[i][0][j][1] * sizeMult + stretchVal / 2 + startX;\n            } else {\n              var x = activeLetter[i][0][j][1] * sizeMult + startX;\n            }\n            var y = activeLetter[i][0][j][0] * sizeMult + startY;\n            vertex(x, y);\n          }\n          endShape();\n  \n          if (stopFlag) {\n            active = false;\n            newLine();\n          }\n        }\n}\n","highlightedLines":{}}